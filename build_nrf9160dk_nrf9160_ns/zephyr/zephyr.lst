
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_table>:
   1c200:	a0 35 01 20 69 23 02 00 5b 0b 03 00 3d 23 02 00     .5. i#..[...=#..
   1c210:	3d 23 02 00 3d 23 02 00 3d 23 02 00 3d 23 02 00     =#..=#..=#..=#..
	...
   1c22c:	c9 1c 02 00 3d 23 02 00 00 00 00 00 35 1c 02 00     ....=#......5...
   1c23c:	3d 23 02 00                                         =#..

0001c240 <_irq_vector_table>:
   1c240:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c250:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c260:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c270:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c280:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c290:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c2a0:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c2b0:	f1 16 03 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     ....m...m...m...
   1c2c0:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c2d0:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c2e0:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c2f0:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c300:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c310:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c320:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c330:	6d 1d 02 00 6d 1d 02 00 6d 1d 02 00 6d 1d 02 00     m...m...m...m...
   1c340:	6d 1d 02 00                                         m...

Disassembly of section text:

0001c348 <__aeabi_drsub>:
   1c348:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c34c:	e002      	b.n	1c354 <__adddf3>
   1c34e:	bf00      	nop

0001c350 <__aeabi_dsub>:
   1c350:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c354 <__adddf3>:
   1c354:	b530      	push	{r4, r5, lr}
   1c356:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c35a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c35e:	ea94 0f05 	teq	r4, r5
   1c362:	bf08      	it	eq
   1c364:	ea90 0f02 	teqeq	r0, r2
   1c368:	bf1f      	itttt	ne
   1c36a:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c36e:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c372:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c376:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c37a:	f000 80e2 	beq.w	1c542 <__adddf3+0x1ee>
   1c37e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c382:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c386:	bfb8      	it	lt
   1c388:	426d      	neglt	r5, r5
   1c38a:	dd0c      	ble.n	1c3a6 <__adddf3+0x52>
   1c38c:	442c      	add	r4, r5
   1c38e:	ea80 0202 	eor.w	r2, r0, r2
   1c392:	ea81 0303 	eor.w	r3, r1, r3
   1c396:	ea82 0000 	eor.w	r0, r2, r0
   1c39a:	ea83 0101 	eor.w	r1, r3, r1
   1c39e:	ea80 0202 	eor.w	r2, r0, r2
   1c3a2:	ea81 0303 	eor.w	r3, r1, r3
   1c3a6:	2d36      	cmp	r5, #54	; 0x36
   1c3a8:	bf88      	it	hi
   1c3aa:	bd30      	pophi	{r4, r5, pc}
   1c3ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c3b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c3b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c3b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c3bc:	d002      	beq.n	1c3c4 <__adddf3+0x70>
   1c3be:	4240      	negs	r0, r0
   1c3c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c3c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c3c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c3cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c3d0:	d002      	beq.n	1c3d8 <__adddf3+0x84>
   1c3d2:	4252      	negs	r2, r2
   1c3d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c3d8:	ea94 0f05 	teq	r4, r5
   1c3dc:	f000 80a7 	beq.w	1c52e <__adddf3+0x1da>
   1c3e0:	f1a4 0401 	sub.w	r4, r4, #1
   1c3e4:	f1d5 0e20 	rsbs	lr, r5, #32
   1c3e8:	db0d      	blt.n	1c406 <__adddf3+0xb2>
   1c3ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c3ee:	fa22 f205 	lsr.w	r2, r2, r5
   1c3f2:	1880      	adds	r0, r0, r2
   1c3f4:	f141 0100 	adc.w	r1, r1, #0
   1c3f8:	fa03 f20e 	lsl.w	r2, r3, lr
   1c3fc:	1880      	adds	r0, r0, r2
   1c3fe:	fa43 f305 	asr.w	r3, r3, r5
   1c402:	4159      	adcs	r1, r3
   1c404:	e00e      	b.n	1c424 <__adddf3+0xd0>
   1c406:	f1a5 0520 	sub.w	r5, r5, #32
   1c40a:	f10e 0e20 	add.w	lr, lr, #32
   1c40e:	2a01      	cmp	r2, #1
   1c410:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c414:	bf28      	it	cs
   1c416:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c41a:	fa43 f305 	asr.w	r3, r3, r5
   1c41e:	18c0      	adds	r0, r0, r3
   1c420:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c428:	d507      	bpl.n	1c43a <__adddf3+0xe6>
   1c42a:	f04f 0e00 	mov.w	lr, #0
   1c42e:	f1dc 0c00 	rsbs	ip, ip, #0
   1c432:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c436:	eb6e 0101 	sbc.w	r1, lr, r1
   1c43a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c43e:	d31b      	bcc.n	1c478 <__adddf3+0x124>
   1c440:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c444:	d30c      	bcc.n	1c460 <__adddf3+0x10c>
   1c446:	0849      	lsrs	r1, r1, #1
   1c448:	ea5f 0030 	movs.w	r0, r0, rrx
   1c44c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c450:	f104 0401 	add.w	r4, r4, #1
   1c454:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c458:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c45c:	f080 809a 	bcs.w	1c594 <__adddf3+0x240>
   1c460:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c464:	bf08      	it	eq
   1c466:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c46a:	f150 0000 	adcs.w	r0, r0, #0
   1c46e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c472:	ea41 0105 	orr.w	r1, r1, r5
   1c476:	bd30      	pop	{r4, r5, pc}
   1c478:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c47c:	4140      	adcs	r0, r0
   1c47e:	eb41 0101 	adc.w	r1, r1, r1
   1c482:	3c01      	subs	r4, #1
   1c484:	bf28      	it	cs
   1c486:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1c48a:	d2e9      	bcs.n	1c460 <__adddf3+0x10c>
   1c48c:	f091 0f00 	teq	r1, #0
   1c490:	bf04      	itt	eq
   1c492:	4601      	moveq	r1, r0
   1c494:	2000      	moveq	r0, #0
   1c496:	fab1 f381 	clz	r3, r1
   1c49a:	bf08      	it	eq
   1c49c:	3320      	addeq	r3, #32
   1c49e:	f1a3 030b 	sub.w	r3, r3, #11
   1c4a2:	f1b3 0220 	subs.w	r2, r3, #32
   1c4a6:	da0c      	bge.n	1c4c2 <__adddf3+0x16e>
   1c4a8:	320c      	adds	r2, #12
   1c4aa:	dd08      	ble.n	1c4be <__adddf3+0x16a>
   1c4ac:	f102 0c14 	add.w	ip, r2, #20
   1c4b0:	f1c2 020c 	rsb	r2, r2, #12
   1c4b4:	fa01 f00c 	lsl.w	r0, r1, ip
   1c4b8:	fa21 f102 	lsr.w	r1, r1, r2
   1c4bc:	e00c      	b.n	1c4d8 <__adddf3+0x184>
   1c4be:	f102 0214 	add.w	r2, r2, #20
   1c4c2:	bfd8      	it	le
   1c4c4:	f1c2 0c20 	rsble	ip, r2, #32
   1c4c8:	fa01 f102 	lsl.w	r1, r1, r2
   1c4cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c4d0:	bfdc      	itt	le
   1c4d2:	ea41 010c 	orrle.w	r1, r1, ip
   1c4d6:	4090      	lslle	r0, r2
   1c4d8:	1ae4      	subs	r4, r4, r3
   1c4da:	bfa2      	ittt	ge
   1c4dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c4e0:	4329      	orrge	r1, r5
   1c4e2:	bd30      	popge	{r4, r5, pc}
   1c4e4:	ea6f 0404 	mvn.w	r4, r4
   1c4e8:	3c1f      	subs	r4, #31
   1c4ea:	da1c      	bge.n	1c526 <__adddf3+0x1d2>
   1c4ec:	340c      	adds	r4, #12
   1c4ee:	dc0e      	bgt.n	1c50e <__adddf3+0x1ba>
   1c4f0:	f104 0414 	add.w	r4, r4, #20
   1c4f4:	f1c4 0220 	rsb	r2, r4, #32
   1c4f8:	fa20 f004 	lsr.w	r0, r0, r4
   1c4fc:	fa01 f302 	lsl.w	r3, r1, r2
   1c500:	ea40 0003 	orr.w	r0, r0, r3
   1c504:	fa21 f304 	lsr.w	r3, r1, r4
   1c508:	ea45 0103 	orr.w	r1, r5, r3
   1c50c:	bd30      	pop	{r4, r5, pc}
   1c50e:	f1c4 040c 	rsb	r4, r4, #12
   1c512:	f1c4 0220 	rsb	r2, r4, #32
   1c516:	fa20 f002 	lsr.w	r0, r0, r2
   1c51a:	fa01 f304 	lsl.w	r3, r1, r4
   1c51e:	ea40 0003 	orr.w	r0, r0, r3
   1c522:	4629      	mov	r1, r5
   1c524:	bd30      	pop	{r4, r5, pc}
   1c526:	fa21 f004 	lsr.w	r0, r1, r4
   1c52a:	4629      	mov	r1, r5
   1c52c:	bd30      	pop	{r4, r5, pc}
   1c52e:	f094 0f00 	teq	r4, #0
   1c532:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c536:	bf06      	itte	eq
   1c538:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c53c:	3401      	addeq	r4, #1
   1c53e:	3d01      	subne	r5, #1
   1c540:	e74e      	b.n	1c3e0 <__adddf3+0x8c>
   1c542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c546:	bf18      	it	ne
   1c548:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c54c:	d029      	beq.n	1c5a2 <__adddf3+0x24e>
   1c54e:	ea94 0f05 	teq	r4, r5
   1c552:	bf08      	it	eq
   1c554:	ea90 0f02 	teqeq	r0, r2
   1c558:	d005      	beq.n	1c566 <__adddf3+0x212>
   1c55a:	ea54 0c00 	orrs.w	ip, r4, r0
   1c55e:	bf04      	itt	eq
   1c560:	4619      	moveq	r1, r3
   1c562:	4610      	moveq	r0, r2
   1c564:	bd30      	pop	{r4, r5, pc}
   1c566:	ea91 0f03 	teq	r1, r3
   1c56a:	bf1e      	ittt	ne
   1c56c:	2100      	movne	r1, #0
   1c56e:	2000      	movne	r0, #0
   1c570:	bd30      	popne	{r4, r5, pc}
   1c572:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c576:	d105      	bne.n	1c584 <__adddf3+0x230>
   1c578:	0040      	lsls	r0, r0, #1
   1c57a:	4149      	adcs	r1, r1
   1c57c:	bf28      	it	cs
   1c57e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c582:	bd30      	pop	{r4, r5, pc}
   1c584:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c588:	bf3c      	itt	cc
   1c58a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c58e:	bd30      	popcc	{r4, r5, pc}
   1c590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c594:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c598:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c59c:	f04f 0000 	mov.w	r0, #0
   1c5a0:	bd30      	pop	{r4, r5, pc}
   1c5a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c5a6:	bf1a      	itte	ne
   1c5a8:	4619      	movne	r1, r3
   1c5aa:	4610      	movne	r0, r2
   1c5ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c5b0:	bf1c      	itt	ne
   1c5b2:	460b      	movne	r3, r1
   1c5b4:	4602      	movne	r2, r0
   1c5b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c5ba:	bf06      	itte	eq
   1c5bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c5c0:	ea91 0f03 	teqeq	r1, r3
   1c5c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c5c8:	bd30      	pop	{r4, r5, pc}
   1c5ca:	bf00      	nop

0001c5cc <__aeabi_ui2d>:
   1c5cc:	f090 0f00 	teq	r0, #0
   1c5d0:	bf04      	itt	eq
   1c5d2:	2100      	moveq	r1, #0
   1c5d4:	4770      	bxeq	lr
   1c5d6:	b530      	push	{r4, r5, lr}
   1c5d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c5dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c5e0:	f04f 0500 	mov.w	r5, #0
   1c5e4:	f04f 0100 	mov.w	r1, #0
   1c5e8:	e750      	b.n	1c48c <__adddf3+0x138>
   1c5ea:	bf00      	nop

0001c5ec <__aeabi_i2d>:
   1c5ec:	f090 0f00 	teq	r0, #0
   1c5f0:	bf04      	itt	eq
   1c5f2:	2100      	moveq	r1, #0
   1c5f4:	4770      	bxeq	lr
   1c5f6:	b530      	push	{r4, r5, lr}
   1c5f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c5fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c600:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c604:	bf48      	it	mi
   1c606:	4240      	negmi	r0, r0
   1c608:	f04f 0100 	mov.w	r1, #0
   1c60c:	e73e      	b.n	1c48c <__adddf3+0x138>
   1c60e:	bf00      	nop

0001c610 <__aeabi_f2d>:
   1c610:	0042      	lsls	r2, r0, #1
   1c612:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c616:	ea4f 0131 	mov.w	r1, r1, rrx
   1c61a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c61e:	bf1f      	itttt	ne
   1c620:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c624:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c628:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c62c:	4770      	bxne	lr
   1c62e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c632:	bf08      	it	eq
   1c634:	4770      	bxeq	lr
   1c636:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c63a:	bf04      	itt	eq
   1c63c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c640:	4770      	bxeq	lr
   1c642:	b530      	push	{r4, r5, lr}
   1c644:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c648:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c64c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c650:	e71c      	b.n	1c48c <__adddf3+0x138>
   1c652:	bf00      	nop

0001c654 <__aeabi_ul2d>:
   1c654:	ea50 0201 	orrs.w	r2, r0, r1
   1c658:	bf08      	it	eq
   1c65a:	4770      	bxeq	lr
   1c65c:	b530      	push	{r4, r5, lr}
   1c65e:	f04f 0500 	mov.w	r5, #0
   1c662:	e00a      	b.n	1c67a <__aeabi_l2d+0x16>

0001c664 <__aeabi_l2d>:
   1c664:	ea50 0201 	orrs.w	r2, r0, r1
   1c668:	bf08      	it	eq
   1c66a:	4770      	bxeq	lr
   1c66c:	b530      	push	{r4, r5, lr}
   1c66e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c672:	d502      	bpl.n	1c67a <__aeabi_l2d+0x16>
   1c674:	4240      	negs	r0, r0
   1c676:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c67a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c67e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c682:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c686:	f43f aed8 	beq.w	1c43a <__adddf3+0xe6>
   1c68a:	f04f 0203 	mov.w	r2, #3
   1c68e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c692:	bf18      	it	ne
   1c694:	3203      	addne	r2, #3
   1c696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c69a:	bf18      	it	ne
   1c69c:	3203      	addne	r2, #3
   1c69e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c6a2:	f1c2 0320 	rsb	r3, r2, #32
   1c6a6:	fa00 fc03 	lsl.w	ip, r0, r3
   1c6aa:	fa20 f002 	lsr.w	r0, r0, r2
   1c6ae:	fa01 fe03 	lsl.w	lr, r1, r3
   1c6b2:	ea40 000e 	orr.w	r0, r0, lr
   1c6b6:	fa21 f102 	lsr.w	r1, r1, r2
   1c6ba:	4414      	add	r4, r2
   1c6bc:	e6bd      	b.n	1c43a <__adddf3+0xe6>
   1c6be:	bf00      	nop

0001c6c0 <__aeabi_dmul>:
   1c6c0:	b570      	push	{r4, r5, r6, lr}
   1c6c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c6c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c6ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c6ce:	bf1d      	ittte	ne
   1c6d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c6d4:	ea94 0f0c 	teqne	r4, ip
   1c6d8:	ea95 0f0c 	teqne	r5, ip
   1c6dc:	f000 f8de 	bleq	1c89c <__aeabi_dmul+0x1dc>
   1c6e0:	442c      	add	r4, r5
   1c6e2:	ea81 0603 	eor.w	r6, r1, r3
   1c6e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c6ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c6ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c6f2:	bf18      	it	ne
   1c6f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c6f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c6fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c700:	d038      	beq.n	1c774 <__aeabi_dmul+0xb4>
   1c702:	fba0 ce02 	umull	ip, lr, r0, r2
   1c706:	f04f 0500 	mov.w	r5, #0
   1c70a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c70e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c712:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c716:	f04f 0600 	mov.w	r6, #0
   1c71a:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c71e:	f09c 0f00 	teq	ip, #0
   1c722:	bf18      	it	ne
   1c724:	f04e 0e01 	orrne.w	lr, lr, #1
   1c728:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c72c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c730:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c734:	d204      	bcs.n	1c740 <__aeabi_dmul+0x80>
   1c736:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c73a:	416d      	adcs	r5, r5
   1c73c:	eb46 0606 	adc.w	r6, r6, r6
   1c740:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c744:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c748:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c74c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c750:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c754:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c758:	bf88      	it	hi
   1c75a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c75e:	d81e      	bhi.n	1c79e <__aeabi_dmul+0xde>
   1c760:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c764:	bf08      	it	eq
   1c766:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c76a:	f150 0000 	adcs.w	r0, r0, #0
   1c76e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c772:	bd70      	pop	{r4, r5, r6, pc}
   1c774:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c778:	ea46 0101 	orr.w	r1, r6, r1
   1c77c:	ea40 0002 	orr.w	r0, r0, r2
   1c780:	ea81 0103 	eor.w	r1, r1, r3
   1c784:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c788:	bfc2      	ittt	gt
   1c78a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c78e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c792:	bd70      	popgt	{r4, r5, r6, pc}
   1c794:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c798:	f04f 0e00 	mov.w	lr, #0
   1c79c:	3c01      	subs	r4, #1
   1c79e:	f300 80ab 	bgt.w	1c8f8 <__aeabi_dmul+0x238>
   1c7a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c7a6:	bfde      	ittt	le
   1c7a8:	2000      	movle	r0, #0
   1c7aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c7ae:	bd70      	pople	{r4, r5, r6, pc}
   1c7b0:	f1c4 0400 	rsb	r4, r4, #0
   1c7b4:	3c20      	subs	r4, #32
   1c7b6:	da35      	bge.n	1c824 <__aeabi_dmul+0x164>
   1c7b8:	340c      	adds	r4, #12
   1c7ba:	dc1b      	bgt.n	1c7f4 <__aeabi_dmul+0x134>
   1c7bc:	f104 0414 	add.w	r4, r4, #20
   1c7c0:	f1c4 0520 	rsb	r5, r4, #32
   1c7c4:	fa00 f305 	lsl.w	r3, r0, r5
   1c7c8:	fa20 f004 	lsr.w	r0, r0, r4
   1c7cc:	fa01 f205 	lsl.w	r2, r1, r5
   1c7d0:	ea40 0002 	orr.w	r0, r0, r2
   1c7d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c7d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c7dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c7e0:	fa21 f604 	lsr.w	r6, r1, r4
   1c7e4:	eb42 0106 	adc.w	r1, r2, r6
   1c7e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c7ec:	bf08      	it	eq
   1c7ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c7f2:	bd70      	pop	{r4, r5, r6, pc}
   1c7f4:	f1c4 040c 	rsb	r4, r4, #12
   1c7f8:	f1c4 0520 	rsb	r5, r4, #32
   1c7fc:	fa00 f304 	lsl.w	r3, r0, r4
   1c800:	fa20 f005 	lsr.w	r0, r0, r5
   1c804:	fa01 f204 	lsl.w	r2, r1, r4
   1c808:	ea40 0002 	orr.w	r0, r0, r2
   1c80c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c810:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c814:	f141 0100 	adc.w	r1, r1, #0
   1c818:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c81c:	bf08      	it	eq
   1c81e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c822:	bd70      	pop	{r4, r5, r6, pc}
   1c824:	f1c4 0520 	rsb	r5, r4, #32
   1c828:	fa00 f205 	lsl.w	r2, r0, r5
   1c82c:	ea4e 0e02 	orr.w	lr, lr, r2
   1c830:	fa20 f304 	lsr.w	r3, r0, r4
   1c834:	fa01 f205 	lsl.w	r2, r1, r5
   1c838:	ea43 0302 	orr.w	r3, r3, r2
   1c83c:	fa21 f004 	lsr.w	r0, r1, r4
   1c840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c844:	fa21 f204 	lsr.w	r2, r1, r4
   1c848:	ea20 0002 	bic.w	r0, r0, r2
   1c84c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c854:	bf08      	it	eq
   1c856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c85a:	bd70      	pop	{r4, r5, r6, pc}
   1c85c:	f094 0f00 	teq	r4, #0
   1c860:	d10f      	bne.n	1c882 <__aeabi_dmul+0x1c2>
   1c862:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c866:	0040      	lsls	r0, r0, #1
   1c868:	eb41 0101 	adc.w	r1, r1, r1
   1c86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c870:	bf08      	it	eq
   1c872:	3c01      	subeq	r4, #1
   1c874:	d0f7      	beq.n	1c866 <__aeabi_dmul+0x1a6>
   1c876:	ea41 0106 	orr.w	r1, r1, r6
   1c87a:	f095 0f00 	teq	r5, #0
   1c87e:	bf18      	it	ne
   1c880:	4770      	bxne	lr
   1c882:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c886:	0052      	lsls	r2, r2, #1
   1c888:	eb43 0303 	adc.w	r3, r3, r3
   1c88c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c890:	bf08      	it	eq
   1c892:	3d01      	subeq	r5, #1
   1c894:	d0f7      	beq.n	1c886 <__aeabi_dmul+0x1c6>
   1c896:	ea43 0306 	orr.w	r3, r3, r6
   1c89a:	4770      	bx	lr
   1c89c:	ea94 0f0c 	teq	r4, ip
   1c8a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c8a4:	bf18      	it	ne
   1c8a6:	ea95 0f0c 	teqne	r5, ip
   1c8aa:	d00c      	beq.n	1c8c6 <__aeabi_dmul+0x206>
   1c8ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c8b0:	bf18      	it	ne
   1c8b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c8b6:	d1d1      	bne.n	1c85c <__aeabi_dmul+0x19c>
   1c8b8:	ea81 0103 	eor.w	r1, r1, r3
   1c8bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c8c0:	f04f 0000 	mov.w	r0, #0
   1c8c4:	bd70      	pop	{r4, r5, r6, pc}
   1c8c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c8ca:	bf06      	itte	eq
   1c8cc:	4610      	moveq	r0, r2
   1c8ce:	4619      	moveq	r1, r3
   1c8d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c8d4:	d019      	beq.n	1c90a <__aeabi_dmul+0x24a>
   1c8d6:	ea94 0f0c 	teq	r4, ip
   1c8da:	d102      	bne.n	1c8e2 <__aeabi_dmul+0x222>
   1c8dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c8e0:	d113      	bne.n	1c90a <__aeabi_dmul+0x24a>
   1c8e2:	ea95 0f0c 	teq	r5, ip
   1c8e6:	d105      	bne.n	1c8f4 <__aeabi_dmul+0x234>
   1c8e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c8ec:	bf1c      	itt	ne
   1c8ee:	4610      	movne	r0, r2
   1c8f0:	4619      	movne	r1, r3
   1c8f2:	d10a      	bne.n	1c90a <__aeabi_dmul+0x24a>
   1c8f4:	ea81 0103 	eor.w	r1, r1, r3
   1c8f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c8fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c900:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c904:	f04f 0000 	mov.w	r0, #0
   1c908:	bd70      	pop	{r4, r5, r6, pc}
   1c90a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c90e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1c912:	bd70      	pop	{r4, r5, r6, pc}

0001c914 <__aeabi_ddiv>:
   1c914:	b570      	push	{r4, r5, r6, lr}
   1c916:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c91a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c91e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c922:	bf1d      	ittte	ne
   1c924:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c928:	ea94 0f0c 	teqne	r4, ip
   1c92c:	ea95 0f0c 	teqne	r5, ip
   1c930:	f000 f8a7 	bleq	1ca82 <__aeabi_ddiv+0x16e>
   1c934:	eba4 0405 	sub.w	r4, r4, r5
   1c938:	ea81 0e03 	eor.w	lr, r1, r3
   1c93c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1c940:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c944:	f000 8088 	beq.w	1ca58 <__aeabi_ddiv+0x144>
   1c948:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c94c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1c950:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1c954:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1c958:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1c95c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1c960:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1c964:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1c968:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1c96c:	429d      	cmp	r5, r3
   1c96e:	bf08      	it	eq
   1c970:	4296      	cmpeq	r6, r2
   1c972:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1c976:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1c97a:	d202      	bcs.n	1c982 <__aeabi_ddiv+0x6e>
   1c97c:	085b      	lsrs	r3, r3, #1
   1c97e:	ea4f 0232 	mov.w	r2, r2, rrx
   1c982:	1ab6      	subs	r6, r6, r2
   1c984:	eb65 0503 	sbc.w	r5, r5, r3
   1c988:	085b      	lsrs	r3, r3, #1
   1c98a:	ea4f 0232 	mov.w	r2, r2, rrx
   1c98e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1c992:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1c996:	ebb6 0e02 	subs.w	lr, r6, r2
   1c99a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c99e:	bf22      	ittt	cs
   1c9a0:	1ab6      	subcs	r6, r6, r2
   1c9a2:	4675      	movcs	r5, lr
   1c9a4:	ea40 000c 	orrcs.w	r0, r0, ip
   1c9a8:	085b      	lsrs	r3, r3, #1
   1c9aa:	ea4f 0232 	mov.w	r2, r2, rrx
   1c9ae:	ebb6 0e02 	subs.w	lr, r6, r2
   1c9b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c9b6:	bf22      	ittt	cs
   1c9b8:	1ab6      	subcs	r6, r6, r2
   1c9ba:	4675      	movcs	r5, lr
   1c9bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1c9c0:	085b      	lsrs	r3, r3, #1
   1c9c2:	ea4f 0232 	mov.w	r2, r2, rrx
   1c9c6:	ebb6 0e02 	subs.w	lr, r6, r2
   1c9ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c9ce:	bf22      	ittt	cs
   1c9d0:	1ab6      	subcs	r6, r6, r2
   1c9d2:	4675      	movcs	r5, lr
   1c9d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1c9d8:	085b      	lsrs	r3, r3, #1
   1c9da:	ea4f 0232 	mov.w	r2, r2, rrx
   1c9de:	ebb6 0e02 	subs.w	lr, r6, r2
   1c9e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1c9e6:	bf22      	ittt	cs
   1c9e8:	1ab6      	subcs	r6, r6, r2
   1c9ea:	4675      	movcs	r5, lr
   1c9ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1c9f0:	ea55 0e06 	orrs.w	lr, r5, r6
   1c9f4:	d018      	beq.n	1ca28 <__aeabi_ddiv+0x114>
   1c9f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1c9fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1c9fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1ca02:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1ca06:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1ca0a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1ca0e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1ca12:	d1c0      	bne.n	1c996 <__aeabi_ddiv+0x82>
   1ca14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ca18:	d10b      	bne.n	1ca32 <__aeabi_ddiv+0x11e>
   1ca1a:	ea41 0100 	orr.w	r1, r1, r0
   1ca1e:	f04f 0000 	mov.w	r0, #0
   1ca22:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1ca26:	e7b6      	b.n	1c996 <__aeabi_ddiv+0x82>
   1ca28:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1ca2c:	bf04      	itt	eq
   1ca2e:	4301      	orreq	r1, r0
   1ca30:	2000      	moveq	r0, #0
   1ca32:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1ca36:	bf88      	it	hi
   1ca38:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1ca3c:	f63f aeaf 	bhi.w	1c79e <__aeabi_dmul+0xde>
   1ca40:	ebb5 0c03 	subs.w	ip, r5, r3
   1ca44:	bf04      	itt	eq
   1ca46:	ebb6 0c02 	subseq.w	ip, r6, r2
   1ca4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1ca4e:	f150 0000 	adcs.w	r0, r0, #0
   1ca52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1ca56:	bd70      	pop	{r4, r5, r6, pc}
   1ca58:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1ca5c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1ca60:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1ca64:	bfc2      	ittt	gt
   1ca66:	ebd4 050c 	rsbsgt	r5, r4, ip
   1ca6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1ca6e:	bd70      	popgt	{r4, r5, r6, pc}
   1ca70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ca74:	f04f 0e00 	mov.w	lr, #0
   1ca78:	3c01      	subs	r4, #1
   1ca7a:	e690      	b.n	1c79e <__aeabi_dmul+0xde>
   1ca7c:	ea45 0e06 	orr.w	lr, r5, r6
   1ca80:	e68d      	b.n	1c79e <__aeabi_dmul+0xde>
   1ca82:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1ca86:	ea94 0f0c 	teq	r4, ip
   1ca8a:	bf08      	it	eq
   1ca8c:	ea95 0f0c 	teqeq	r5, ip
   1ca90:	f43f af3b 	beq.w	1c90a <__aeabi_dmul+0x24a>
   1ca94:	ea94 0f0c 	teq	r4, ip
   1ca98:	d10a      	bne.n	1cab0 <__aeabi_ddiv+0x19c>
   1ca9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1ca9e:	f47f af34 	bne.w	1c90a <__aeabi_dmul+0x24a>
   1caa2:	ea95 0f0c 	teq	r5, ip
   1caa6:	f47f af25 	bne.w	1c8f4 <__aeabi_dmul+0x234>
   1caaa:	4610      	mov	r0, r2
   1caac:	4619      	mov	r1, r3
   1caae:	e72c      	b.n	1c90a <__aeabi_dmul+0x24a>
   1cab0:	ea95 0f0c 	teq	r5, ip
   1cab4:	d106      	bne.n	1cac4 <__aeabi_ddiv+0x1b0>
   1cab6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1caba:	f43f aefd 	beq.w	1c8b8 <__aeabi_dmul+0x1f8>
   1cabe:	4610      	mov	r0, r2
   1cac0:	4619      	mov	r1, r3
   1cac2:	e722      	b.n	1c90a <__aeabi_dmul+0x24a>
   1cac4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cac8:	bf18      	it	ne
   1caca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cace:	f47f aec5 	bne.w	1c85c <__aeabi_dmul+0x19c>
   1cad2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cad6:	f47f af0d 	bne.w	1c8f4 <__aeabi_dmul+0x234>
   1cada:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cade:	f47f aeeb 	bne.w	1c8b8 <__aeabi_dmul+0x1f8>
   1cae2:	e712      	b.n	1c90a <__aeabi_dmul+0x24a>

0001cae4 <__gedf2>:
   1cae4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1cae8:	e006      	b.n	1caf8 <__cmpdf2+0x4>
   1caea:	bf00      	nop

0001caec <__ledf2>:
   1caec:	f04f 0c01 	mov.w	ip, #1
   1caf0:	e002      	b.n	1caf8 <__cmpdf2+0x4>
   1caf2:	bf00      	nop

0001caf4 <__cmpdf2>:
   1caf4:	f04f 0c01 	mov.w	ip, #1
   1caf8:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cafc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cb00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cb04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cb08:	bf18      	it	ne
   1cb0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cb0e:	d01b      	beq.n	1cb48 <__cmpdf2+0x54>
   1cb10:	b001      	add	sp, #4
   1cb12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cb16:	bf0c      	ite	eq
   1cb18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cb1c:	ea91 0f03 	teqne	r1, r3
   1cb20:	bf02      	ittt	eq
   1cb22:	ea90 0f02 	teqeq	r0, r2
   1cb26:	2000      	moveq	r0, #0
   1cb28:	4770      	bxeq	lr
   1cb2a:	f110 0f00 	cmn.w	r0, #0
   1cb2e:	ea91 0f03 	teq	r1, r3
   1cb32:	bf58      	it	pl
   1cb34:	4299      	cmppl	r1, r3
   1cb36:	bf08      	it	eq
   1cb38:	4290      	cmpeq	r0, r2
   1cb3a:	bf2c      	ite	cs
   1cb3c:	17d8      	asrcs	r0, r3, #31
   1cb3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cb42:	f040 0001 	orr.w	r0, r0, #1
   1cb46:	4770      	bx	lr
   1cb48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cb4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cb50:	d102      	bne.n	1cb58 <__cmpdf2+0x64>
   1cb52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cb56:	d107      	bne.n	1cb68 <__cmpdf2+0x74>
   1cb58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cb5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cb60:	d1d6      	bne.n	1cb10 <__cmpdf2+0x1c>
   1cb62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cb66:	d0d3      	beq.n	1cb10 <__cmpdf2+0x1c>
   1cb68:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cb6c:	4770      	bx	lr
   1cb6e:	bf00      	nop

0001cb70 <__aeabi_cdrcmple>:
   1cb70:	4684      	mov	ip, r0
   1cb72:	4610      	mov	r0, r2
   1cb74:	4662      	mov	r2, ip
   1cb76:	468c      	mov	ip, r1
   1cb78:	4619      	mov	r1, r3
   1cb7a:	4663      	mov	r3, ip
   1cb7c:	e000      	b.n	1cb80 <__aeabi_cdcmpeq>
   1cb7e:	bf00      	nop

0001cb80 <__aeabi_cdcmpeq>:
   1cb80:	b501      	push	{r0, lr}
   1cb82:	f7ff ffb7 	bl	1caf4 <__cmpdf2>
   1cb86:	2800      	cmp	r0, #0
   1cb88:	bf48      	it	mi
   1cb8a:	f110 0f00 	cmnmi.w	r0, #0
   1cb8e:	bd01      	pop	{r0, pc}

0001cb90 <__aeabi_dcmpeq>:
   1cb90:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cb94:	f7ff fff4 	bl	1cb80 <__aeabi_cdcmpeq>
   1cb98:	bf0c      	ite	eq
   1cb9a:	2001      	moveq	r0, #1
   1cb9c:	2000      	movne	r0, #0
   1cb9e:	f85d fb08 	ldr.w	pc, [sp], #8
   1cba2:	bf00      	nop

0001cba4 <__aeabi_dcmplt>:
   1cba4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cba8:	f7ff ffea 	bl	1cb80 <__aeabi_cdcmpeq>
   1cbac:	bf34      	ite	cc
   1cbae:	2001      	movcc	r0, #1
   1cbb0:	2000      	movcs	r0, #0
   1cbb2:	f85d fb08 	ldr.w	pc, [sp], #8
   1cbb6:	bf00      	nop

0001cbb8 <__aeabi_dcmple>:
   1cbb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cbbc:	f7ff ffe0 	bl	1cb80 <__aeabi_cdcmpeq>
   1cbc0:	bf94      	ite	ls
   1cbc2:	2001      	movls	r0, #1
   1cbc4:	2000      	movhi	r0, #0
   1cbc6:	f85d fb08 	ldr.w	pc, [sp], #8
   1cbca:	bf00      	nop

0001cbcc <__aeabi_dcmpge>:
   1cbcc:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cbd0:	f7ff ffce 	bl	1cb70 <__aeabi_cdrcmple>
   1cbd4:	bf94      	ite	ls
   1cbd6:	2001      	movls	r0, #1
   1cbd8:	2000      	movhi	r0, #0
   1cbda:	f85d fb08 	ldr.w	pc, [sp], #8
   1cbde:	bf00      	nop

0001cbe0 <__aeabi_dcmpgt>:
   1cbe0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cbe4:	f7ff ffc4 	bl	1cb70 <__aeabi_cdrcmple>
   1cbe8:	bf34      	ite	cc
   1cbea:	2001      	movcc	r0, #1
   1cbec:	2000      	movcs	r0, #0
   1cbee:	f85d fb08 	ldr.w	pc, [sp], #8
   1cbf2:	bf00      	nop

0001cbf4 <__aeabi_dcmpun>:
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	d102      	bne.n	1cc04 <__aeabi_dcmpun+0x10>
   1cbfe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc02:	d10a      	bne.n	1cc1a <__aeabi_dcmpun+0x26>
   1cc04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc0c:	d102      	bne.n	1cc14 <__aeabi_dcmpun+0x20>
   1cc0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc12:	d102      	bne.n	1cc1a <__aeabi_dcmpun+0x26>
   1cc14:	f04f 0000 	mov.w	r0, #0
   1cc18:	4770      	bx	lr
   1cc1a:	f04f 0001 	mov.w	r0, #1
   1cc1e:	4770      	bx	lr

0001cc20 <__aeabi_d2iz>:
   1cc20:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cc24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cc28:	d215      	bcs.n	1cc56 <__aeabi_d2iz+0x36>
   1cc2a:	d511      	bpl.n	1cc50 <__aeabi_d2iz+0x30>
   1cc2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cc30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cc34:	d912      	bls.n	1cc5c <__aeabi_d2iz+0x3c>
   1cc36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cc3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cc3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cc42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cc46:	fa23 f002 	lsr.w	r0, r3, r2
   1cc4a:	bf18      	it	ne
   1cc4c:	4240      	negne	r0, r0
   1cc4e:	4770      	bx	lr
   1cc50:	f04f 0000 	mov.w	r0, #0
   1cc54:	4770      	bx	lr
   1cc56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cc5a:	d105      	bne.n	1cc68 <__aeabi_d2iz+0x48>
   1cc5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cc60:	bf08      	it	eq
   1cc62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cc66:	4770      	bx	lr
   1cc68:	f04f 0000 	mov.w	r0, #0
   1cc6c:	4770      	bx	lr
   1cc6e:	bf00      	nop

0001cc70 <__aeabi_d2f>:
   1cc70:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cc74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cc78:	bf24      	itt	cs
   1cc7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cc7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cc82:	d90d      	bls.n	1cca0 <__aeabi_d2f+0x30>
   1cc84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cc88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cc8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cc90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cc94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cc98:	bf08      	it	eq
   1cc9a:	f020 0001 	biceq.w	r0, r0, #1
   1cc9e:	4770      	bx	lr
   1cca0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cca4:	d121      	bne.n	1ccea <__aeabi_d2f+0x7a>
   1cca6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1ccaa:	bfbc      	itt	lt
   1ccac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1ccb0:	4770      	bxlt	lr
   1ccb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1ccb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1ccba:	f1c2 0218 	rsb	r2, r2, #24
   1ccbe:	f1c2 0c20 	rsb	ip, r2, #32
   1ccc2:	fa10 f30c 	lsls.w	r3, r0, ip
   1ccc6:	fa20 f002 	lsr.w	r0, r0, r2
   1ccca:	bf18      	it	ne
   1cccc:	f040 0001 	orrne.w	r0, r0, #1
   1ccd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1ccd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1ccd8:	fa03 fc0c 	lsl.w	ip, r3, ip
   1ccdc:	ea40 000c 	orr.w	r0, r0, ip
   1cce0:	fa23 f302 	lsr.w	r3, r3, r2
   1cce4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1cce8:	e7cc      	b.n	1cc84 <__aeabi_d2f+0x14>
   1ccea:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1ccee:	d107      	bne.n	1cd00 <__aeabi_d2f+0x90>
   1ccf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1ccf4:	bf1e      	ittt	ne
   1ccf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ccfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ccfe:	4770      	bxne	lr
   1cd00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1cd04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1cd08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1cd0c:	4770      	bx	lr
   1cd0e:	bf00      	nop

0001cd10 <__aeabi_ldivmod>:
   1cd10:	b97b      	cbnz	r3, 1cd32 <__aeabi_ldivmod+0x22>
   1cd12:	b972      	cbnz	r2, 1cd32 <__aeabi_ldivmod+0x22>
   1cd14:	2900      	cmp	r1, #0
   1cd16:	bfbe      	ittt	lt
   1cd18:	2000      	movlt	r0, #0
   1cd1a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1cd1e:	e006      	blt.n	1cd2e <__aeabi_ldivmod+0x1e>
   1cd20:	bf08      	it	eq
   1cd22:	2800      	cmpeq	r0, #0
   1cd24:	bf1c      	itt	ne
   1cd26:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1cd2a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1cd2e:	f000 b857 	b.w	1cde0 <__aeabi_idiv0>
   1cd32:	f1ad 0c08 	sub.w	ip, sp, #8
   1cd36:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cd3a:	2900      	cmp	r1, #0
   1cd3c:	db09      	blt.n	1cd52 <__aeabi_ldivmod+0x42>
   1cd3e:	2b00      	cmp	r3, #0
   1cd40:	db1a      	blt.n	1cd78 <__aeabi_ldivmod+0x68>
   1cd42:	f000 f84f 	bl	1cde4 <__udivmoddi4>
   1cd46:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cd4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cd4e:	b004      	add	sp, #16
   1cd50:	4770      	bx	lr
   1cd52:	4240      	negs	r0, r0
   1cd54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cd58:	2b00      	cmp	r3, #0
   1cd5a:	db1b      	blt.n	1cd94 <__aeabi_ldivmod+0x84>
   1cd5c:	f000 f842 	bl	1cde4 <__udivmoddi4>
   1cd60:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cd64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cd68:	b004      	add	sp, #16
   1cd6a:	4240      	negs	r0, r0
   1cd6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cd70:	4252      	negs	r2, r2
   1cd72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cd76:	4770      	bx	lr
   1cd78:	4252      	negs	r2, r2
   1cd7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cd7e:	f000 f831 	bl	1cde4 <__udivmoddi4>
   1cd82:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cd86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cd8a:	b004      	add	sp, #16
   1cd8c:	4240      	negs	r0, r0
   1cd8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cd92:	4770      	bx	lr
   1cd94:	4252      	negs	r2, r2
   1cd96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cd9a:	f000 f823 	bl	1cde4 <__udivmoddi4>
   1cd9e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cda2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cda6:	b004      	add	sp, #16
   1cda8:	4252      	negs	r2, r2
   1cdaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cdae:	4770      	bx	lr

0001cdb0 <__aeabi_uldivmod>:
   1cdb0:	b953      	cbnz	r3, 1cdc8 <__aeabi_uldivmod+0x18>
   1cdb2:	b94a      	cbnz	r2, 1cdc8 <__aeabi_uldivmod+0x18>
   1cdb4:	2900      	cmp	r1, #0
   1cdb6:	bf08      	it	eq
   1cdb8:	2800      	cmpeq	r0, #0
   1cdba:	bf1c      	itt	ne
   1cdbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1cdc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1cdc4:	f000 b80c 	b.w	1cde0 <__aeabi_idiv0>
   1cdc8:	f1ad 0c08 	sub.w	ip, sp, #8
   1cdcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cdd0:	f000 f808 	bl	1cde4 <__udivmoddi4>
   1cdd4:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cdd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cddc:	b004      	add	sp, #16
   1cdde:	4770      	bx	lr

0001cde0 <__aeabi_idiv0>:
   1cde0:	4770      	bx	lr
   1cde2:	bf00      	nop

0001cde4 <__udivmoddi4>:
   1cde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cde8:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1cdea:	4688      	mov	r8, r1
   1cdec:	468e      	mov	lr, r1
   1cdee:	4615      	mov	r5, r2
   1cdf0:	4604      	mov	r4, r0
   1cdf2:	4619      	mov	r1, r3
   1cdf4:	2b00      	cmp	r3, #0
   1cdf6:	f040 80c6 	bne.w	1cf86 <__udivmoddi4+0x1a2>
   1cdfa:	4542      	cmp	r2, r8
   1cdfc:	fab2 f782 	clz	r7, r2
   1ce00:	d946      	bls.n	1ce90 <__udivmoddi4+0xac>
   1ce02:	b14f      	cbz	r7, 1ce18 <__udivmoddi4+0x34>
   1ce04:	f1c7 0c20 	rsb	ip, r7, #32
   1ce08:	fa08 f307 	lsl.w	r3, r8, r7
   1ce0c:	40bd      	lsls	r5, r7
   1ce0e:	40bc      	lsls	r4, r7
   1ce10:	fa20 fc0c 	lsr.w	ip, r0, ip
   1ce14:	ea4c 0e03 	orr.w	lr, ip, r3
   1ce18:	ea4f 4815 	mov.w	r8, r5, lsr #16
   1ce1c:	fa1f fc85 	uxth.w	ip, r5
   1ce20:	0c22      	lsrs	r2, r4, #16
   1ce22:	fbbe f9f8 	udiv	r9, lr, r8
   1ce26:	fb08 e319 	mls	r3, r8, r9, lr
   1ce2a:	fb09 fa0c 	mul.w	sl, r9, ip
   1ce2e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   1ce32:	459a      	cmp	sl, r3
   1ce34:	d928      	bls.n	1ce88 <__udivmoddi4+0xa4>
   1ce36:	18eb      	adds	r3, r5, r3
   1ce38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1ce3c:	d204      	bcs.n	1ce48 <__udivmoddi4+0x64>
   1ce3e:	459a      	cmp	sl, r3
   1ce40:	d902      	bls.n	1ce48 <__udivmoddi4+0x64>
   1ce42:	f1a9 0002 	sub.w	r0, r9, #2
   1ce46:	442b      	add	r3, r5
   1ce48:	eba3 030a 	sub.w	r3, r3, sl
   1ce4c:	b2a4      	uxth	r4, r4
   1ce4e:	fbb3 f2f8 	udiv	r2, r3, r8
   1ce52:	fb08 3312 	mls	r3, r8, r2, r3
   1ce56:	fb02 fc0c 	mul.w	ip, r2, ip
   1ce5a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1ce5e:	45a4      	cmp	ip, r4
   1ce60:	d914      	bls.n	1ce8c <__udivmoddi4+0xa8>
   1ce62:	192c      	adds	r4, r5, r4
   1ce64:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   1ce68:	d203      	bcs.n	1ce72 <__udivmoddi4+0x8e>
   1ce6a:	45a4      	cmp	ip, r4
   1ce6c:	d901      	bls.n	1ce72 <__udivmoddi4+0x8e>
   1ce6e:	1e93      	subs	r3, r2, #2
   1ce70:	442c      	add	r4, r5
   1ce72:	eba4 040c 	sub.w	r4, r4, ip
   1ce76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   1ce7a:	b11e      	cbz	r6, 1ce84 <__udivmoddi4+0xa0>
   1ce7c:	40fc      	lsrs	r4, r7
   1ce7e:	2300      	movs	r3, #0
   1ce80:	6034      	str	r4, [r6, #0]
   1ce82:	6073      	str	r3, [r6, #4]
   1ce84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce88:	4648      	mov	r0, r9
   1ce8a:	e7dd      	b.n	1ce48 <__udivmoddi4+0x64>
   1ce8c:	4613      	mov	r3, r2
   1ce8e:	e7f0      	b.n	1ce72 <__udivmoddi4+0x8e>
   1ce90:	b902      	cbnz	r2, 1ce94 <__udivmoddi4+0xb0>
   1ce92:	deff      	udf	#255	; 0xff
   1ce94:	bb8f      	cbnz	r7, 1cefa <__udivmoddi4+0x116>
   1ce96:	eba8 0302 	sub.w	r3, r8, r2
   1ce9a:	2101      	movs	r1, #1
   1ce9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cea0:	b2aa      	uxth	r2, r5
   1cea2:	0c20      	lsrs	r0, r4, #16
   1cea4:	fbb3 fcfe 	udiv	ip, r3, lr
   1cea8:	fb0e 331c 	mls	r3, lr, ip, r3
   1ceac:	fb0c f802 	mul.w	r8, ip, r2
   1ceb0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
   1ceb4:	4598      	cmp	r8, r3
   1ceb6:	d962      	bls.n	1cf7e <__udivmoddi4+0x19a>
   1ceb8:	18eb      	adds	r3, r5, r3
   1ceba:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1cebe:	d204      	bcs.n	1ceca <__udivmoddi4+0xe6>
   1cec0:	4598      	cmp	r8, r3
   1cec2:	d902      	bls.n	1ceca <__udivmoddi4+0xe6>
   1cec4:	f1ac 0002 	sub.w	r0, ip, #2
   1cec8:	442b      	add	r3, r5
   1ceca:	eba3 0308 	sub.w	r3, r3, r8
   1cece:	b2a4      	uxth	r4, r4
   1ced0:	fbb3 fcfe 	udiv	ip, r3, lr
   1ced4:	fb0e 331c 	mls	r3, lr, ip, r3
   1ced8:	fb0c f202 	mul.w	r2, ip, r2
   1cedc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1cee0:	42a2      	cmp	r2, r4
   1cee2:	d94e      	bls.n	1cf82 <__udivmoddi4+0x19e>
   1cee4:	192c      	adds	r4, r5, r4
   1cee6:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
   1ceea:	d204      	bcs.n	1cef6 <__udivmoddi4+0x112>
   1ceec:	42a2      	cmp	r2, r4
   1ceee:	d902      	bls.n	1cef6 <__udivmoddi4+0x112>
   1cef0:	f1ac 0302 	sub.w	r3, ip, #2
   1cef4:	442c      	add	r4, r5
   1cef6:	1aa4      	subs	r4, r4, r2
   1cef8:	e7bd      	b.n	1ce76 <__udivmoddi4+0x92>
   1cefa:	f1c7 0c20 	rsb	ip, r7, #32
   1cefe:	40bd      	lsls	r5, r7
   1cf00:	fa08 f307 	lsl.w	r3, r8, r7
   1cf04:	40bc      	lsls	r4, r7
   1cf06:	fa28 f90c 	lsr.w	r9, r8, ip
   1cf0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cf0e:	fa20 fc0c 	lsr.w	ip, r0, ip
   1cf12:	ea4c 0203 	orr.w	r2, ip, r3
   1cf16:	b2ab      	uxth	r3, r5
   1cf18:	fbb9 fcfe 	udiv	ip, r9, lr
   1cf1c:	0c11      	lsrs	r1, r2, #16
   1cf1e:	fb0e 901c 	mls	r0, lr, ip, r9
   1cf22:	fb0c f803 	mul.w	r8, ip, r3
   1cf26:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   1cf2a:	4580      	cmp	r8, r0
   1cf2c:	d923      	bls.n	1cf76 <__udivmoddi4+0x192>
   1cf2e:	1828      	adds	r0, r5, r0
   1cf30:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   1cf34:	d204      	bcs.n	1cf40 <__udivmoddi4+0x15c>
   1cf36:	4580      	cmp	r8, r0
   1cf38:	d902      	bls.n	1cf40 <__udivmoddi4+0x15c>
   1cf3a:	f1ac 0102 	sub.w	r1, ip, #2
   1cf3e:	4428      	add	r0, r5
   1cf40:	eba0 0008 	sub.w	r0, r0, r8
   1cf44:	b292      	uxth	r2, r2
   1cf46:	fbb0 fcfe 	udiv	ip, r0, lr
   1cf4a:	fb0e 001c 	mls	r0, lr, ip, r0
   1cf4e:	fb0c f803 	mul.w	r8, ip, r3
   1cf52:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
   1cf56:	4598      	cmp	r8, r3
   1cf58:	d90f      	bls.n	1cf7a <__udivmoddi4+0x196>
   1cf5a:	18eb      	adds	r3, r5, r3
   1cf5c:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   1cf60:	d204      	bcs.n	1cf6c <__udivmoddi4+0x188>
   1cf62:	4598      	cmp	r8, r3
   1cf64:	d902      	bls.n	1cf6c <__udivmoddi4+0x188>
   1cf66:	f1ac 0202 	sub.w	r2, ip, #2
   1cf6a:	442b      	add	r3, r5
   1cf6c:	eba3 0308 	sub.w	r3, r3, r8
   1cf70:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   1cf74:	e792      	b.n	1ce9c <__udivmoddi4+0xb8>
   1cf76:	4661      	mov	r1, ip
   1cf78:	e7e2      	b.n	1cf40 <__udivmoddi4+0x15c>
   1cf7a:	4662      	mov	r2, ip
   1cf7c:	e7f6      	b.n	1cf6c <__udivmoddi4+0x188>
   1cf7e:	4660      	mov	r0, ip
   1cf80:	e7a3      	b.n	1ceca <__udivmoddi4+0xe6>
   1cf82:	4663      	mov	r3, ip
   1cf84:	e7b7      	b.n	1cef6 <__udivmoddi4+0x112>
   1cf86:	4543      	cmp	r3, r8
   1cf88:	d905      	bls.n	1cf96 <__udivmoddi4+0x1b2>
   1cf8a:	b10e      	cbz	r6, 1cf90 <__udivmoddi4+0x1ac>
   1cf8c:	e9c6 0800 	strd	r0, r8, [r6]
   1cf90:	2100      	movs	r1, #0
   1cf92:	4608      	mov	r0, r1
   1cf94:	e776      	b.n	1ce84 <__udivmoddi4+0xa0>
   1cf96:	fab3 fc83 	clz	ip, r3
   1cf9a:	f1bc 0f00 	cmp.w	ip, #0
   1cf9e:	d110      	bne.n	1cfc2 <__udivmoddi4+0x1de>
   1cfa0:	4543      	cmp	r3, r8
   1cfa2:	d301      	bcc.n	1cfa8 <__udivmoddi4+0x1c4>
   1cfa4:	4282      	cmp	r2, r0
   1cfa6:	d80a      	bhi.n	1cfbe <__udivmoddi4+0x1da>
   1cfa8:	1a84      	subs	r4, r0, r2
   1cfaa:	eb68 0303 	sbc.w	r3, r8, r3
   1cfae:	2001      	movs	r0, #1
   1cfb0:	469e      	mov	lr, r3
   1cfb2:	2e00      	cmp	r6, #0
   1cfb4:	d068      	beq.n	1d088 <__udivmoddi4+0x2a4>
   1cfb6:	e9c6 4e00 	strd	r4, lr, [r6]
   1cfba:	2100      	movs	r1, #0
   1cfbc:	e762      	b.n	1ce84 <__udivmoddi4+0xa0>
   1cfbe:	4660      	mov	r0, ip
   1cfc0:	e7f7      	b.n	1cfb2 <__udivmoddi4+0x1ce>
   1cfc2:	f1cc 0e20 	rsb	lr, ip, #32
   1cfc6:	fa03 f30c 	lsl.w	r3, r3, ip
   1cfca:	fa02 f50c 	lsl.w	r5, r2, ip
   1cfce:	fa00 f70c 	lsl.w	r7, r0, ip
   1cfd2:	fa22 f40e 	lsr.w	r4, r2, lr
   1cfd6:	fa28 fb0e 	lsr.w	fp, r8, lr
   1cfda:	fa20 f10e 	lsr.w	r1, r0, lr
   1cfde:	431c      	orrs	r4, r3
   1cfe0:	fa08 f30c 	lsl.w	r3, r8, ip
   1cfe4:	ea4f 4914 	mov.w	r9, r4, lsr #16
   1cfe8:	4319      	orrs	r1, r3
   1cfea:	b2a3      	uxth	r3, r4
   1cfec:	0c0a      	lsrs	r2, r1, #16
   1cfee:	fbbb f8f9 	udiv	r8, fp, r9
   1cff2:	fb09 bb18 	mls	fp, r9, r8, fp
   1cff6:	fb08 fa03 	mul.w	sl, r8, r3
   1cffa:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
   1cffe:	4592      	cmp	sl, r2
   1d000:	d93e      	bls.n	1d080 <__udivmoddi4+0x29c>
   1d002:	18a2      	adds	r2, r4, r2
   1d004:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
   1d008:	d204      	bcs.n	1d014 <__udivmoddi4+0x230>
   1d00a:	4592      	cmp	sl, r2
   1d00c:	d902      	bls.n	1d014 <__udivmoddi4+0x230>
   1d00e:	f1a8 0002 	sub.w	r0, r8, #2
   1d012:	4422      	add	r2, r4
   1d014:	eba2 020a 	sub.w	r2, r2, sl
   1d018:	b289      	uxth	r1, r1
   1d01a:	fbb2 f8f9 	udiv	r8, r2, r9
   1d01e:	fb09 2218 	mls	r2, r9, r8, r2
   1d022:	fb08 f303 	mul.w	r3, r8, r3
   1d026:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   1d02a:	4293      	cmp	r3, r2
   1d02c:	d92a      	bls.n	1d084 <__udivmoddi4+0x2a0>
   1d02e:	18a2      	adds	r2, r4, r2
   1d030:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   1d034:	d204      	bcs.n	1d040 <__udivmoddi4+0x25c>
   1d036:	4293      	cmp	r3, r2
   1d038:	d902      	bls.n	1d040 <__udivmoddi4+0x25c>
   1d03a:	f1a8 0102 	sub.w	r1, r8, #2
   1d03e:	4422      	add	r2, r4
   1d040:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   1d044:	1ad2      	subs	r2, r2, r3
   1d046:	fba0 9805 	umull	r9, r8, r0, r5
   1d04a:	4542      	cmp	r2, r8
   1d04c:	464b      	mov	r3, r9
   1d04e:	4641      	mov	r1, r8
   1d050:	d302      	bcc.n	1d058 <__udivmoddi4+0x274>
   1d052:	d106      	bne.n	1d062 <__udivmoddi4+0x27e>
   1d054:	454f      	cmp	r7, r9
   1d056:	d204      	bcs.n	1d062 <__udivmoddi4+0x27e>
   1d058:	3801      	subs	r0, #1
   1d05a:	ebb9 0305 	subs.w	r3, r9, r5
   1d05e:	eb68 0104 	sbc.w	r1, r8, r4
   1d062:	b18e      	cbz	r6, 1d088 <__udivmoddi4+0x2a4>
   1d064:	1afc      	subs	r4, r7, r3
   1d066:	eb62 0701 	sbc.w	r7, r2, r1
   1d06a:	fa07 fe0e 	lsl.w	lr, r7, lr
   1d06e:	fa24 f30c 	lsr.w	r3, r4, ip
   1d072:	fa27 f70c 	lsr.w	r7, r7, ip
   1d076:	ea4e 0303 	orr.w	r3, lr, r3
   1d07a:	e9c6 3700 	strd	r3, r7, [r6]
   1d07e:	e79c      	b.n	1cfba <__udivmoddi4+0x1d6>
   1d080:	4640      	mov	r0, r8
   1d082:	e7c7      	b.n	1d014 <__udivmoddi4+0x230>
   1d084:	4641      	mov	r1, r8
   1d086:	e7db      	b.n	1d040 <__udivmoddi4+0x25c>
   1d088:	4631      	mov	r1, r6
   1d08a:	e6fb      	b.n	1ce84 <__udivmoddi4+0xa0>

0001d08c <strcmp>:
   1d08c:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d090:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d094:	2a01      	cmp	r2, #1
   1d096:	bf28      	it	cs
   1d098:	429a      	cmpcs	r2, r3
   1d09a:	d0f7      	beq.n	1d08c <strcmp>
   1d09c:	1ad0      	subs	r0, r2, r3
   1d09e:	4770      	bx	lr

0001d0a0 <strlen>:
   1d0a0:	4603      	mov	r3, r0
   1d0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d0a6:	2a00      	cmp	r2, #0
   1d0a8:	d1fb      	bne.n	1d0a2 <strlen+0x2>
   1d0aa:	1a18      	subs	r0, r3, r0
   1d0ac:	3801      	subs	r0, #1
   1d0ae:	4770      	bx	lr

0001d0b0 <app_main_handler>:
                                 NULL, NULL, NULL,
                                 THREAD_PRIORITY_GNSS, 0, K_NO_WAIT);
}

void app_main_handler(int socket)
{
   1d0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0b4:	ed2d 8b02 	vpush	{d8}
    struct rest_client_req_context req_ctx = {
   1d0b8:	2301      	movs	r3, #1
{
   1d0ba:	b0a2      	sub	sp, #136	; 0x88
    struct rest_client_req_context req_ctx = {
   1d0bc:	2100      	movs	r1, #0
   1d0be:	f88d 3020 	strb.w	r3, [sp, #32]
   1d0c2:	232a      	movs	r3, #42	; 0x2a
   1d0c4:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
   1d0c8:	2304      	movs	r3, #4
   1d0ca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1d0ce:	4b6a      	ldr	r3, [pc, #424]	; (1d278 <app_main_handler+0x1c8>)
   1d0d0:	4f6a      	ldr	r7, [pc, #424]	; (1d27c <app_main_handler+0x1cc>)
   1d0d2:	930c      	str	r3, [sp, #48]	; 0x30
   1d0d4:	f240 13bb 	movw	r3, #443	; 0x1bb
   1d0d8:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   1d0dc:	f247 5330 	movw	r3, #30000	; 0x7530
   1d0e0:	9311      	str	r3, [sp, #68]	; 0x44
   1d0e2:	4b67      	ldr	r3, [pc, #412]	; (1d280 <app_main_handler+0x1d0>)
   1d0e4:	4e67      	ldr	r6, [pc, #412]	; (1d284 <app_main_handler+0x1d4>)
   1d0e6:	9312      	str	r3, [sp, #72]	; 0x48
   1d0e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1d0ec:	9007      	str	r0, [sp, #28]
        .resp_buff = recv_buf,
        /** User-defined size of resp_buff. */
        .resp_buff_len = RECV_BUF_SIZE,
    };
    struct rest_client_resp_context resp_ctx;
    memset(&resp_ctx, 0, sizeof(resp_ctx));
   1d0ee:	2238      	movs	r2, #56	; 0x38
   1d0f0:	a814      	add	r0, sp, #80	; 0x50
    struct rest_client_req_context req_ctx = {
   1d0f2:	e9cd 710e 	strd	r7, r1, [sp, #56]	; 0x38
   1d0f6:	9610      	str	r6, [sp, #64]	; 0x40
   1d0f8:	9313      	str	r3, [sp, #76]	; 0x4c
    while (1)
    {
        LOG_INF("Do scheduled job ...");

        cJSON* sensorDataObj = cJSON_CreateObject(); cJSON_AddItemToObject(sensorDataObj, "uuid", cJSON_CreateString(DEV_UUID));
        cJSON_AddItemToObject(sensorDataObj, "bat", cJSON_CreateNumber(1.0));
   1d0fa:	ed9f 8b5d 	vldr	d8, [pc, #372]	; 1d270 <app_main_handler+0x1c0>
    memset(&resp_ctx, 0, sizeof(resp_ctx));
   1d0fe:	f016 fdb6 	bl	33c6e <memset>
        cJSON_AddItemToObject(sensorDataObj, "bat", cJSON_CreateNumber(1.0));
   1d102:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 1d2b8 <app_main_handler+0x208>
        LOG_INF("Do scheduled job ...");
   1d106:	2400      	movs	r4, #0
   1d108:	4b5f      	ldr	r3, [pc, #380]	; (1d288 <app_main_handler+0x1d8>)
   1d10a:	2203      	movs	r2, #3
   1d10c:	495f      	ldr	r1, [pc, #380]	; (1d28c <app_main_handler+0x1dc>)
   1d10e:	4620      	mov	r0, r4
   1d110:	9302      	str	r3, [sp, #8]
   1d112:	e9cd 4400 	strd	r4, r4, [sp]
   1d116:	4623      	mov	r3, r4
   1d118:	f012 fae1 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
        cJSON* sensorDataObj = cJSON_CreateObject(); cJSON_AddItemToObject(sensorDataObj, "uuid", cJSON_CreateString(DEV_UUID));
   1d11c:	f00c f888 	bl	29230 <cJSON_CreateObject>
   1d120:	4605      	mov	r5, r0
   1d122:	485b      	ldr	r0, [pc, #364]	; (1d290 <app_main_handler+0x1e0>)
   1d124:	f00c f86c 	bl	29200 <cJSON_CreateString>
   1d128:	495a      	ldr	r1, [pc, #360]	; (1d294 <app_main_handler+0x1e4>)
   1d12a:	4602      	mov	r2, r0
   1d12c:	4628      	mov	r0, r5
   1d12e:	f014 ff9b 	bl	32068 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(sensorDataObj, "bat", cJSON_CreateNumber(1.0));
   1d132:	eeb0 0a48 	vmov.f32	s0, s16
   1d136:	eef0 0a68 	vmov.f32	s1, s17
   1d13a:	f001 f81d 	bl	1e178 <cJSON_CreateNumber>
   1d13e:	4641      	mov	r1, r8
   1d140:	4602      	mov	r2, r0
   1d142:	4628      	mov	r0, r5
   1d144:	f014 ff90 	bl	32068 <cJSON_AddItemToObject>
        cJSON_PrintPreallocated(sensorDataObj, msg_buffer, sizeof(msg_buffer), false);
   1d148:	4623      	mov	r3, r4
   1d14a:	2280      	movs	r2, #128	; 0x80
   1d14c:	4631      	mov	r1, r6
   1d14e:	4628      	mov	r0, r5
   1d150:	f00c f830 	bl	291b4 <cJSON_PrintPreallocated>
        int err = -1;
        req_ctx.url = ENDPOINT_BATTERY;
        err = rest_client_request(&req_ctx, &resp_ctx);
   1d154:	a914      	add	r1, sp, #80	; 0x50
   1d156:	a807      	add	r0, sp, #28
        req_ctx.url = ENDPOINT_BATTERY;
   1d158:	970e      	str	r7, [sp, #56]	; 0x38
        err = rest_client_request(&req_ctx, &resp_ctx);
   1d15a:	f00b f9df 	bl	2851c <rest_client_request>
        if(err == 0)
   1d15e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d160:	4603      	mov	r3, r0
   1d162:	2800      	cmp	r0, #0
   1d164:	d148      	bne.n	1d1f8 <app_main_handler+0x148>
        {
            LOG_INF("Put msg [%s] to endpoint \"%s\" succeeded", msg_buffer, req_ctx.url);
   1d166:	e9cd 6203 	strd	r6, r2, [sp, #12]
   1d16a:	4a4b      	ldr	r2, [pc, #300]	; (1d298 <app_main_handler+0x1e8>)
   1d16c:	4947      	ldr	r1, [pc, #284]	; (1d28c <app_main_handler+0x1dc>)
   1d16e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1d172:	9000      	str	r0, [sp, #0]
   1d174:	2203      	movs	r2, #3
   1d176:	f012 fab2 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
            {
                LOG_INF("Response: %s", resp_ctx.response);
            }
        }

        memset(&resp_ctx, 0, sizeof(resp_ctx));
   1d17a:	2238      	movs	r2, #56	; 0x38
   1d17c:	2100      	movs	r1, #0
   1d17e:	a814      	add	r0, sp, #80	; 0x50
   1d180:	f016 fd75 	bl	33c6e <memset>

        cJSON_DetachItemFromObject(sensorDataObj, "bat");
   1d184:	4641      	mov	r1, r8
   1d186:	4628      	mov	r0, r5
   1d188:	f014 ff8d 	bl	320a6 <cJSON_DetachItemFromObject>
        cJSON_AddItemToObject(sensorDataObj, "lat", cJSON_CreateNumber(last_latitude));
   1d18c:	4b43      	ldr	r3, [pc, #268]	; (1d29c <app_main_handler+0x1ec>)
   1d18e:	ed93 0b00 	vldr	d0, [r3]
   1d192:	f000 fff1 	bl	1e178 <cJSON_CreateNumber>
   1d196:	4942      	ldr	r1, [pc, #264]	; (1d2a0 <app_main_handler+0x1f0>)
   1d198:	4602      	mov	r2, r0
   1d19a:	4628      	mov	r0, r5
   1d19c:	f014 ff64 	bl	32068 <cJSON_AddItemToObject>
        cJSON_AddItemToObject(sensorDataObj, "long", cJSON_CreateNumber(last_longtitude));
   1d1a0:	4b40      	ldr	r3, [pc, #256]	; (1d2a4 <app_main_handler+0x1f4>)
   1d1a2:	ed93 0b00 	vldr	d0, [r3]
   1d1a6:	f000 ffe7 	bl	1e178 <cJSON_CreateNumber>
   1d1aa:	493f      	ldr	r1, [pc, #252]	; (1d2a8 <app_main_handler+0x1f8>)
   1d1ac:	4602      	mov	r2, r0
   1d1ae:	4628      	mov	r0, r5
   1d1b0:	f014 ff5a 	bl	32068 <cJSON_AddItemToObject>
        cJSON_PrintPreallocated(sensorDataObj, msg_buffer, sizeof(msg_buffer), false);
   1d1b4:	2280      	movs	r2, #128	; 0x80
   1d1b6:	2300      	movs	r3, #0
   1d1b8:	4631      	mov	r1, r6
   1d1ba:	4628      	mov	r0, r5
   1d1bc:	f00b fffa 	bl	291b4 <cJSON_PrintPreallocated>
        req_ctx.url = ENDPOINT_LOCATION;
   1d1c0:	4b3a      	ldr	r3, [pc, #232]	; (1d2ac <app_main_handler+0x1fc>)
        err = rest_client_request(&req_ctx, &resp_ctx);
   1d1c2:	a914      	add	r1, sp, #80	; 0x50
   1d1c4:	a807      	add	r0, sp, #28
        req_ctx.url = ENDPOINT_LOCATION;
   1d1c6:	930e      	str	r3, [sp, #56]	; 0x38
        err = rest_client_request(&req_ctx, &resp_ctx);
   1d1c8:	f00b f9a8 	bl	2851c <rest_client_request>
        if(err == 0)
   1d1cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1d1ce:	4603      	mov	r3, r0
   1d1d0:	bb70      	cbnz	r0, 1d230 <app_main_handler+0x180>
        {
            LOG_INF("Put msg [%s] to endpoint \"%s\" succeeded", msg_buffer, req_ctx.url);
   1d1d2:	e9cd 6203 	strd	r6, r2, [sp, #12]
   1d1d6:	4a30      	ldr	r2, [pc, #192]	; (1d298 <app_main_handler+0x1e8>)
   1d1d8:	492c      	ldr	r1, [pc, #176]	; (1d28c <app_main_handler+0x1dc>)
   1d1da:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1d1de:	9000      	str	r0, [sp, #0]
   1d1e0:	2203      	movs	r2, #3
   1d1e2:	f012 fa7c 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
            if(resp_ctx.response != NULL)
            {
                LOG_INF("Response: %s", resp_ctx.response);
            }
        }
        cJSON_Delete(sensorDataObj);
   1d1e6:	4628      	mov	r0, r5
   1d1e8:	f00b ffc0 	bl	2916c <cJSON_Delete>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   1d1ec:	2100      	movs	r1, #0
   1d1ee:	f44f 10f0 	mov.w	r0, #1966080	; 0x1e0000
   1d1f2:	f00f fdcf 	bl	2cd94 <z_impl_k_sleep>
    {
   1d1f6:	e786      	b.n	1d106 <app_main_handler+0x56>
            LOG_ERR("Put msg [%s] to endpoint \"%s\" failed with err %d", msg_buffer, req_ctx.url, err);
   1d1f8:	4b2d      	ldr	r3, [pc, #180]	; (1d2b0 <app_main_handler+0x200>)
   1d1fa:	e9cd 2004 	strd	r2, r0, [sp, #16]
   1d1fe:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1d202:	2201      	movs	r2, #1
   1d204:	4623      	mov	r3, r4
   1d206:	4620      	mov	r0, r4
   1d208:	4920      	ldr	r1, [pc, #128]	; (1d28c <app_main_handler+0x1dc>)
   1d20a:	9603      	str	r6, [sp, #12]
   1d20c:	9400      	str	r4, [sp, #0]
   1d20e:	f012 fa66 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
            if(resp_ctx.response != NULL)
   1d212:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d214:	2b00      	cmp	r3, #0
   1d216:	d0b0      	beq.n	1d17a <app_main_handler+0xca>
                LOG_INF("Response: %s", resp_ctx.response);
   1d218:	9303      	str	r3, [sp, #12]
   1d21a:	4b26      	ldr	r3, [pc, #152]	; (1d2b4 <app_main_handler+0x204>)
   1d21c:	2203      	movs	r2, #3
   1d21e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1d222:	4620      	mov	r0, r4
   1d224:	4623      	mov	r3, r4
   1d226:	4919      	ldr	r1, [pc, #100]	; (1d28c <app_main_handler+0x1dc>)
   1d228:	9400      	str	r4, [sp, #0]
   1d22a:	f012 fa58 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
   1d22e:	e7a4      	b.n	1d17a <app_main_handler+0xca>
            LOG_ERR("Put msg [%s] to endpoint \"%s\" failed with err %d", msg_buffer, req_ctx.url, err);
   1d230:	2400      	movs	r4, #0
   1d232:	4b1f      	ldr	r3, [pc, #124]	; (1d2b0 <app_main_handler+0x200>)
   1d234:	e9cd 2004 	strd	r2, r0, [sp, #16]
   1d238:	9302      	str	r3, [sp, #8]
   1d23a:	2201      	movs	r2, #1
   1d23c:	4623      	mov	r3, r4
   1d23e:	4620      	mov	r0, r4
   1d240:	e9cd 4400 	strd	r4, r4, [sp]
   1d244:	4911      	ldr	r1, [pc, #68]	; (1d28c <app_main_handler+0x1dc>)
   1d246:	9603      	str	r6, [sp, #12]
   1d248:	f012 fa49 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
            if(resp_ctx.response != NULL)
   1d24c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d24e:	2b00      	cmp	r3, #0
   1d250:	d0c9      	beq.n	1d1e6 <app_main_handler+0x136>
                LOG_INF("Response: %s", resp_ctx.response);
   1d252:	9303      	str	r3, [sp, #12]
   1d254:	4b17      	ldr	r3, [pc, #92]	; (1d2b4 <app_main_handler+0x204>)
   1d256:	2203      	movs	r2, #3
   1d258:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1d25c:	4620      	mov	r0, r4
   1d25e:	4623      	mov	r3, r4
   1d260:	490a      	ldr	r1, [pc, #40]	; (1d28c <app_main_handler+0x1dc>)
   1d262:	9400      	str	r4, [sp, #0]
   1d264:	f012 fa3b 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
   1d268:	e7bd      	b.n	1d1e6 <app_main_handler+0x136>
   1d26a:	bf00      	nop
   1d26c:	f3af 8000 	nop.w
   1d270:	00000000 	.word	0x00000000
   1d274:	3ff00000 	.word	0x3ff00000
   1d278:	00035571 	.word	0x00035571
   1d27c:	00035640 	.word	0x00035640
   1d280:	2000d9e7 	.word	0x2000d9e7
   1d284:	2000d967 	.word	0x2000d967
   1d288:	00035658 	.word	0x00035658
   1d28c:	00034a48 	.word	0x00034a48
   1d290:	2000d90c 	.word	0x2000d90c
   1d294:	000357eb 	.word	0x000357eb
   1d298:	00035671 	.word	0x00035671
   1d29c:	2000cc48 	.word	0x2000cc48
   1d2a0:	000356d7 	.word	0x000356d7
   1d2a4:	2000cc50 	.word	0x2000cc50
   1d2a8:	000356db 	.word	0x000356db
   1d2ac:	000356e0 	.word	0x000356e0
   1d2b0:	00035699 	.word	0x00035699
   1d2b4:	000356ca 	.word	0x000356ca
   1d2b8:	0003566d 	.word	0x0003566d
   1d2bc:	00000000 	.word	0x00000000

0001d2c0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   1d2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2c4:	ed2d 8b02 	vpush	{d8}
   1d2c8:	4681      	mov	r9, r0
   1d2ca:	468a      	mov	sl, r1
   1d2cc:	4615      	mov	r5, r2
   1d2ce:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1d2d0:	2600      	movs	r6, #0
	uint64_t round = BIT64(59); /* 0.5 */
   1d2d2:	ed9f 8ba9 	vldr	d8, [pc, #676]	; 1d578 <z_cbvprintf_impl+0x2b8>
{
   1d2d6:	b09b      	sub	sp, #108	; 0x6c
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   1d2d8:	7828      	ldrb	r0, [r5, #0]
   1d2da:	b910      	cbnz	r0, 1d2e2 <z_cbvprintf_impl+0x22>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1d2dc:	4630      	mov	r0, r6
   1d2de:	f000 bdcb 	b.w	1de78 <z_cbvprintf_impl+0xbb8>
			OUTC(*fp++);
   1d2e2:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
   1d2e4:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   1d2e6:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
   1d2e8:	d006      	beq.n	1d2f8 <z_cbvprintf_impl+0x38>
			OUTC(*fp++);
   1d2ea:	4651      	mov	r1, sl
			OUTC('%');
   1d2ec:	47c8      	blx	r9
   1d2ee:	2800      	cmp	r0, #0
   1d2f0:	f2c0 85c2 	blt.w	1de78 <z_cbvprintf_impl+0xbb8>
   1d2f4:	3601      	adds	r6, #1
		if (bps == NULL) {
   1d2f6:	e22e      	b.n	1d756 <z_cbvprintf_impl+0x496>
		} state = {
   1d2f8:	2218      	movs	r2, #24
   1d2fa:	2100      	movs	r1, #0
   1d2fc:	a80c      	add	r0, sp, #48	; 0x30
   1d2fe:	f016 fcb6 	bl	33c6e <memset>
	if (*sp == '%') {
   1d302:	786b      	ldrb	r3, [r5, #1]
   1d304:	2b25      	cmp	r3, #37	; 0x25
   1d306:	d059      	beq.n	1d3bc <z_cbvprintf_impl+0xfc>
   1d308:	1c6a      	adds	r2, r5, #1
   1d30a:	4617      	mov	r7, r2
		switch (*sp) {
   1d30c:	f812 3b01 	ldrb.w	r3, [r2], #1
   1d310:	2b2b      	cmp	r3, #43	; 0x2b
   1d312:	f000 808b 	beq.w	1d42c <z_cbvprintf_impl+0x16c>
   1d316:	d879      	bhi.n	1d40c <z_cbvprintf_impl+0x14c>
   1d318:	2b20      	cmp	r3, #32
   1d31a:	f000 808c 	beq.w	1d436 <z_cbvprintf_impl+0x176>
   1d31e:	2b23      	cmp	r3, #35	; 0x23
   1d320:	f000 808e 	beq.w	1d440 <z_cbvprintf_impl+0x180>
	if (conv->flag_zero && conv->flag_dash) {
   1d324:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d328:	f003 0244 	and.w	r2, r3, #68	; 0x44
   1d32c:	2a44      	cmp	r2, #68	; 0x44
   1d32e:	d103      	bne.n	1d338 <z_cbvprintf_impl+0x78>
		conv->flag_zero = false;
   1d330:	f36f 1386 	bfc	r3, #6, #1
   1d334:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   1d338:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d33c:	970a      	str	r7, [sp, #40]	; 0x28
   1d33e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1d342:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   1d346:	783b      	ldrb	r3, [r7, #0]
   1d348:	2b2a      	cmp	r3, #42	; 0x2a
   1d34a:	d17e      	bne.n	1d44a <z_cbvprintf_impl+0x18a>
		conv->width_star = true;
   1d34c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d350:	f043 0301 	orr.w	r3, r3, #1
   1d354:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   1d358:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
   1d35a:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
   1d35c:	781a      	ldrb	r2, [r3, #0]
   1d35e:	2a2e      	cmp	r2, #46	; 0x2e
   1d360:	bf0c      	ite	eq
   1d362:	2101      	moveq	r1, #1
   1d364:	2100      	movne	r1, #0
   1d366:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d36a:	f361 0241 	bfi	r2, r1, #1, #1
   1d36e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   1d372:	d10b      	bne.n	1d38c <z_cbvprintf_impl+0xcc>
	++sp;
   1d374:	1c5a      	adds	r2, r3, #1
   1d376:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
   1d378:	785a      	ldrb	r2, [r3, #1]
   1d37a:	2a2a      	cmp	r2, #42	; 0x2a
   1d37c:	d17b      	bne.n	1d476 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   1d37e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   1d382:	3302      	adds	r3, #2
		conv->prec_star = true;
   1d384:	f042 0204 	orr.w	r2, r2, #4
   1d388:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	switch (*sp) {
   1d38c:	4619      	mov	r1, r3
   1d38e:	f811 0b01 	ldrb.w	r0, [r1], #1
   1d392:	286c      	cmp	r0, #108	; 0x6c
   1d394:	f000 80cf 	beq.w	1d536 <z_cbvprintf_impl+0x276>
   1d398:	d87d      	bhi.n	1d496 <z_cbvprintf_impl+0x1d6>
   1d39a:	2868      	cmp	r0, #104	; 0x68
   1d39c:	f000 8084 	beq.w	1d4a8 <z_cbvprintf_impl+0x1e8>
   1d3a0:	286a      	cmp	r0, #106	; 0x6a
   1d3a2:	f000 80d2 	beq.w	1d54a <z_cbvprintf_impl+0x28a>
   1d3a6:	284c      	cmp	r0, #76	; 0x4c
   1d3a8:	f000 80d6 	beq.w	1d558 <z_cbvprintf_impl+0x298>
		conv->length_mod = LENGTH_NONE;
   1d3ac:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
		break;
   1d3b0:	4619      	mov	r1, r3
		conv->length_mod = LENGTH_NONE;
   1d3b2:	f36f 02c6 	bfc	r2, #3, #4
   1d3b6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   1d3ba:	e080      	b.n	1d4be <z_cbvprintf_impl+0x1fe>
		conv->specifier = *sp++;
   1d3bc:	1caa      	adds	r2, r5, #2
   1d3be:	9202      	str	r2, [sp, #8]
   1d3c0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   1d3c4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d3c8:	07df      	lsls	r7, r3, #31
   1d3ca:	f140 8178 	bpl.w	1d6be <z_cbvprintf_impl+0x3fe>
			width = va_arg(ap, int);
   1d3ce:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
   1d3d2:	f1bb 0f00 	cmp.w	fp, #0
   1d3d6:	da07      	bge.n	1d3e8 <z_cbvprintf_impl+0x128>
				conv->flag_dash = true;
   1d3d8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				width = -width;
   1d3dc:	f1cb 0b00 	rsb	fp, fp, #0
				conv->flag_dash = true;
   1d3e0:	f042 0204 	orr.w	r2, r2, #4
   1d3e4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		if (conv->prec_star) {
   1d3e8:	0758      	lsls	r0, r3, #29
   1d3ea:	f140 8171 	bpl.w	1d6d0 <z_cbvprintf_impl+0x410>
			int arg = va_arg(ap, int);
   1d3ee:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   1d3f2:	f1b8 0f00 	cmp.w	r8, #0
   1d3f6:	f280 8170 	bge.w	1d6da <z_cbvprintf_impl+0x41a>
				conv->prec_present = false;
   1d3fa:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d3fe:	f36f 0341 	bfc	r3, #1, #1
   1d402:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   1d406:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1d40a:	e166      	b.n	1d6da <z_cbvprintf_impl+0x41a>
		switch (*sp) {
   1d40c:	2b2d      	cmp	r3, #45	; 0x2d
   1d40e:	d006      	beq.n	1d41e <z_cbvprintf_impl+0x15e>
   1d410:	2b30      	cmp	r3, #48	; 0x30
   1d412:	d187      	bne.n	1d324 <z_cbvprintf_impl+0x64>
			conv->flag_zero = true;
   1d414:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d41c:	e003      	b.n	1d426 <z_cbvprintf_impl+0x166>
			conv->flag_dash = true;
   1d41e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d422:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   1d426:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   1d42a:	e76e      	b.n	1d30a <z_cbvprintf_impl+0x4a>
			conv->flag_plus = true;
   1d42c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d430:	f043 0308 	orr.w	r3, r3, #8
   1d434:	e7f7      	b.n	1d426 <z_cbvprintf_impl+0x166>
			conv->flag_space = true;
   1d436:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d43a:	f043 0310 	orr.w	r3, r3, #16
   1d43e:	e7f2      	b.n	1d426 <z_cbvprintf_impl+0x166>
			conv->flag_hash = true;
   1d440:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d444:	f043 0320 	orr.w	r3, r3, #32
   1d448:	e7ed      	b.n	1d426 <z_cbvprintf_impl+0x166>
	size_t width = extract_decimal(&sp);
   1d44a:	a80a      	add	r0, sp, #40	; 0x28
   1d44c:	f003 f89e 	bl	2058c <extract_decimal>
	if (sp != wp) {
   1d450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d452:	42bb      	cmp	r3, r7
   1d454:	d081      	beq.n	1d35a <z_cbvprintf_impl+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
   1d456:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
		conv->width_value = width;
   1d45a:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   1d45c:	f3c7 0140 	ubfx	r1, r7, #1, #1
   1d460:	ea41 72d0 	orr.w	r2, r1, r0, lsr #31
   1d464:	0052      	lsls	r2, r2, #1
   1d466:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1d46a:	f007 017d 	and.w	r1, r7, #125	; 0x7d
   1d46e:	430a      	orrs	r2, r1
   1d470:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   1d474:	e771      	b.n	1d35a <z_cbvprintf_impl+0x9a>
	size_t prec = extract_decimal(&sp);
   1d476:	a80a      	add	r0, sp, #40	; 0x28
   1d478:	f003 f888 	bl	2058c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   1d47c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   1d480:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   1d482:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1d486:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   1d48a:	f360 0341 	bfi	r3, r0, #1, #1
   1d48e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   1d492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d494:	e77a      	b.n	1d38c <z_cbvprintf_impl+0xcc>
	switch (*sp) {
   1d496:	2874      	cmp	r0, #116	; 0x74
   1d498:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d49c:	d059      	beq.n	1d552 <z_cbvprintf_impl+0x292>
   1d49e:	287a      	cmp	r0, #122	; 0x7a
   1d4a0:	d184      	bne.n	1d3ac <z_cbvprintf_impl+0xec>
		conv->length_mod = LENGTH_Z;
   1d4a2:	4613      	mov	r3, r2
   1d4a4:	2206      	movs	r2, #6
   1d4a6:	e041      	b.n	1d52c <z_cbvprintf_impl+0x26c>
		if (*++sp == 'h') {
   1d4a8:	785a      	ldrb	r2, [r3, #1]
   1d4aa:	2a68      	cmp	r2, #104	; 0x68
   1d4ac:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d4b0:	d13a      	bne.n	1d528 <z_cbvprintf_impl+0x268>
			conv->length_mod = LENGTH_HH;
   1d4b2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1d4b4:	f361 02c6 	bfi	r2, r1, #3, #4
   1d4b8:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   1d4bc:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   1d4be:	460b      	mov	r3, r1
   1d4c0:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   1d4c4:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1d4c6:	9302      	str	r3, [sp, #8]
   1d4c8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   1d4cc:	f200 80cd 	bhi.w	1d66a <z_cbvprintf_impl+0x3aa>
   1d4d0:	2a57      	cmp	r2, #87	; 0x57
   1d4d2:	d855      	bhi.n	1d580 <z_cbvprintf_impl+0x2c0>
   1d4d4:	2a41      	cmp	r2, #65	; 0x41
   1d4d6:	d004      	beq.n	1d4e2 <z_cbvprintf_impl+0x222>
   1d4d8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1d4dc:	2b02      	cmp	r3, #2
   1d4de:	f200 80c4 	bhi.w	1d66a <z_cbvprintf_impl+0x3aa>
		conv->specifier_cat = SPECIFIER_FP;
   1d4e2:	2104      	movs	r1, #4
   1d4e4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d4e8:	f361 0302 	bfi	r3, r1, #0, #3
   1d4ec:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
   1d4f0:	f002 03df 	and.w	r3, r2, #223	; 0xdf
   1d4f4:	f1a3 0841 	sub.w	r8, r3, #65	; 0x41
		conv->specifier_a = (conv->specifier == 'a')
   1d4f8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
			|| (conv->specifier == 'A');
   1d4fc:	f1d8 0300 	rsbs	r3, r8, #0
   1d500:	eb43 0308 	adc.w	r3, r3, r8
		conv->specifier_a = (conv->specifier == 'a')
   1d504:	f363 12c7 	bfi	r2, r3, #7, #1
   1d508:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		if (conv->specifier_a
   1d50c:	b2d3      	uxtb	r3, r2
   1d50e:	0612      	lsls	r2, r2, #24
   1d510:	f100 80d3 	bmi.w	1d6ba <z_cbvprintf_impl+0x3fa>
		if (conv->length_mod == LENGTH_L) {
   1d514:	f003 0278 	and.w	r2, r3, #120	; 0x78
   1d518:	2a18      	cmp	r2, #24
   1d51a:	f040 80a3 	bne.w	1d664 <z_cbvprintf_impl+0x3a4>
			conv->length_mod = LENGTH_NONE;
   1d51e:	f36f 03c6 	bfc	r3, #3, #4
   1d522:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1d526:	e08a      	b.n	1d63e <z_cbvprintf_impl+0x37e>
			conv->length_mod = LENGTH_H;
   1d528:	4613      	mov	r3, r2
   1d52a:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   1d52c:	f362 03c6 	bfi	r3, r2, #3, #4
   1d530:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   1d534:	e7c3      	b.n	1d4be <z_cbvprintf_impl+0x1fe>
		if (*++sp == 'l') {
   1d536:	785a      	ldrb	r2, [r3, #1]
   1d538:	2a6c      	cmp	r2, #108	; 0x6c
   1d53a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   1d53e:	d101      	bne.n	1d544 <z_cbvprintf_impl+0x284>
			conv->length_mod = LENGTH_LL;
   1d540:	2104      	movs	r1, #4
   1d542:	e7b7      	b.n	1d4b4 <z_cbvprintf_impl+0x1f4>
			conv->length_mod = LENGTH_L;
   1d544:	4613      	mov	r3, r2
   1d546:	2203      	movs	r2, #3
   1d548:	e7f0      	b.n	1d52c <z_cbvprintf_impl+0x26c>
		conv->length_mod = LENGTH_J;
   1d54a:	2205      	movs	r2, #5
   1d54c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d550:	e7ec      	b.n	1d52c <z_cbvprintf_impl+0x26c>
		conv->length_mod = LENGTH_T;
   1d552:	4613      	mov	r3, r2
   1d554:	2207      	movs	r2, #7
   1d556:	e7e9      	b.n	1d52c <z_cbvprintf_impl+0x26c>
		conv->unsupported = true;
   1d558:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1d55c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   1d560:	f023 0302 	bic.w	r3, r3, #2
   1d564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1d568:	f043 0302 	orr.w	r3, r3, #2
   1d56c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   1d570:	e7a5      	b.n	1d4be <z_cbvprintf_impl+0x1fe>
   1d572:	bf00      	nop
   1d574:	f3af 8000 	nop.w
   1d578:	00000000 	.word	0x00000000
   1d57c:	08000000 	.word	0x08000000
	switch (conv->specifier) {
   1d580:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1d584:	2b20      	cmp	r3, #32
   1d586:	d870      	bhi.n	1d66a <z_cbvprintf_impl+0x3aa>
   1d588:	a101      	add	r1, pc, #4	; (adr r1, 1d590 <z_cbvprintf_impl+0x2d0>)
   1d58a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1d58e:	bf00      	nop
   1d590:	0001d643 	.word	0x0001d643
   1d594:	0001d66b 	.word	0x0001d66b
   1d598:	0001d66b 	.word	0x0001d66b
   1d59c:	0001d66b 	.word	0x0001d66b
   1d5a0:	0001d66b 	.word	0x0001d66b
   1d5a4:	0001d66b 	.word	0x0001d66b
   1d5a8:	0001d66b 	.word	0x0001d66b
   1d5ac:	0001d66b 	.word	0x0001d66b
   1d5b0:	0001d66b 	.word	0x0001d66b
   1d5b4:	0001d4e3 	.word	0x0001d4e3
   1d5b8:	0001d66b 	.word	0x0001d66b
   1d5bc:	0001d643 	.word	0x0001d643
   1d5c0:	0001d615 	.word	0x0001d615
   1d5c4:	0001d4e3 	.word	0x0001d4e3
   1d5c8:	0001d4e3 	.word	0x0001d4e3
   1d5cc:	0001d4e3 	.word	0x0001d4e3
   1d5d0:	0001d66b 	.word	0x0001d66b
   1d5d4:	0001d615 	.word	0x0001d615
   1d5d8:	0001d66b 	.word	0x0001d66b
   1d5dc:	0001d66b 	.word	0x0001d66b
   1d5e0:	0001d66b 	.word	0x0001d66b
   1d5e4:	0001d66b 	.word	0x0001d66b
   1d5e8:	0001d679 	.word	0x0001d679
   1d5ec:	0001d643 	.word	0x0001d643
   1d5f0:	0001d69d 	.word	0x0001d69d
   1d5f4:	0001d66b 	.word	0x0001d66b
   1d5f8:	0001d66b 	.word	0x0001d66b
   1d5fc:	0001d69d 	.word	0x0001d69d
   1d600:	0001d66b 	.word	0x0001d66b
   1d604:	0001d643 	.word	0x0001d643
   1d608:	0001d66b 	.word	0x0001d66b
   1d60c:	0001d66b 	.word	0x0001d66b
   1d610:	0001d643 	.word	0x0001d643
		conv->specifier_cat = SPECIFIER_SINT;
   1d614:	2101      	movs	r1, #1
   1d616:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		conv->specifier_cat = SPECIFIER_UINT;
   1d61a:	f361 0302 	bfi	r3, r1, #0, #3
   1d61e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d622:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d626:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d62a:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   1d62c:	bf02      	ittt	eq
   1d62e:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   1d632:	f041 0101 	orreq.w	r1, r1, #1
   1d636:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   1d63a:	2a63      	cmp	r2, #99	; 0x63
   1d63c:	d005      	beq.n	1d64a <z_cbvprintf_impl+0x38a>
	bool unsupported = false;
   1d63e:	2300      	movs	r3, #0
   1d640:	e006      	b.n	1d650 <z_cbvprintf_impl+0x390>
		conv->specifier_cat = SPECIFIER_UINT;
   1d642:	2102      	movs	r1, #2
   1d644:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d648:	e7e7      	b.n	1d61a <z_cbvprintf_impl+0x35a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   1d64a:	3b00      	subs	r3, #0
   1d64c:	bf18      	it	ne
   1d64e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1d650:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1d654:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1d658:	430b      	orrs	r3, r1
   1d65a:	f363 0241 	bfi	r2, r3, #1, #1
   1d65e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   1d662:	e6af      	b.n	1d3c4 <z_cbvprintf_impl+0x104>
		} else if ((conv->length_mod != LENGTH_NONE)
   1d664:	f013 0f38 	tst.w	r3, #56	; 0x38
   1d668:	d0e9      	beq.n	1d63e <z_cbvprintf_impl+0x37e>
			conv->invalid = true;
   1d66a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d66e:	f043 0301 	orr.w	r3, r3, #1
   1d672:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
   1d676:	e7e2      	b.n	1d63e <z_cbvprintf_impl+0x37e>
		conv->specifier_cat = SPECIFIER_PTR;
   1d678:	2203      	movs	r2, #3
   1d67a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d67e:	f362 0302 	bfi	r3, r2, #0, #3
   1d682:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   1d686:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d68a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1d68e:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
   1d692:	f1dc 0300 	rsbs	r3, ip, #0
   1d696:	eb43 030c 	adc.w	r3, r3, ip
   1d69a:	e7d9      	b.n	1d650 <z_cbvprintf_impl+0x390>
		conv->specifier_cat = SPECIFIER_PTR;
   1d69c:	2203      	movs	r2, #3
   1d69e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d6a2:	f362 0302 	bfi	r3, r2, #0, #3
   1d6a6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   1d6aa:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d6ae:	f013 0f78 	tst.w	r3, #120	; 0x78
   1d6b2:	bf14      	ite	ne
   1d6b4:	2301      	movne	r3, #1
   1d6b6:	2300      	moveq	r3, #0
   1d6b8:	e7ca      	b.n	1d650 <z_cbvprintf_impl+0x390>
			unsupported = true;
   1d6ba:	2301      	movs	r3, #1
   1d6bc:	e7c8      	b.n	1d650 <z_cbvprintf_impl+0x390>
		} else if (conv->width_present) {
   1d6be:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   1d6c2:	2a00      	cmp	r2, #0
		int width = -1;
   1d6c4:	bfac      	ite	ge
   1d6c6:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
			width = conv->width_value;
   1d6ca:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
   1d6ce:	e68b      	b.n	1d3e8 <z_cbvprintf_impl+0x128>
		} else if (conv->prec_present) {
   1d6d0:	0799      	lsls	r1, r3, #30
   1d6d2:	f57f ae98 	bpl.w	1d406 <z_cbvprintf_impl+0x146>
			precision = conv->prec_value;
   1d6d6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
   1d6da:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1d6dc:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
   1d6e0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1d6e4:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   1d6e8:	f003 0207 	and.w	r2, r3, #7
   1d6ec:	2a04      	cmp	r2, #4
   1d6ee:	d109      	bne.n	1d704 <z_cbvprintf_impl+0x444>
		    && !conv->prec_present) {
   1d6f0:	078a      	lsls	r2, r1, #30
   1d6f2:	d407      	bmi.n	1d704 <z_cbvprintf_impl+0x444>
			if (conv->specifier_a) {
   1d6f4:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
   1d6f8:	2a00      	cmp	r2, #0
   1d6fa:	bfb4      	ite	lt
   1d6fc:	f04f 080d 	movlt.w	r8, #13
   1d700:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
   1d704:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1d708:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1d70a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1d70e:	d134      	bne.n	1d77a <z_cbvprintf_impl+0x4ba>
			switch (length_mod) {
   1d710:	1ecb      	subs	r3, r1, #3
   1d712:	2b04      	cmp	r3, #4
   1d714:	d821      	bhi.n	1d75a <z_cbvprintf_impl+0x49a>
   1d716:	e8df f003 	tbb	[pc, r3]
   1d71a:	0903      	.short	0x0903
   1d71c:	2009      	.short	0x2009
   1d71e:	20          	.byte	0x20
   1d71f:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   1d720:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   1d724:	17da      	asrs	r2, r3, #31
   1d726:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
   1d72a:	e006      	b.n	1d73a <z_cbvprintf_impl+0x47a>
					(sint_value_type)va_arg(ap, intmax_t);
   1d72c:	3407      	adds	r4, #7
   1d72e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   1d732:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1d736:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   1d73a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   1d73e:	07bb      	lsls	r3, r7, #30
   1d740:	d059      	beq.n	1d7f6 <z_cbvprintf_impl+0x536>
			OUTS(sp, fp);
   1d742:	462a      	mov	r2, r5
   1d744:	4651      	mov	r1, sl
   1d746:	4648      	mov	r0, r9
   1d748:	9b02      	ldr	r3, [sp, #8]
   1d74a:	f012 fb42 	bl	2fdd2 <outs>
   1d74e:	2800      	cmp	r0, #0
   1d750:	f2c0 8392 	blt.w	1de78 <z_cbvprintf_impl+0xbb8>
   1d754:	4406      	add	r6, r0
			continue;
   1d756:	9d02      	ldr	r5, [sp, #8]
   1d758:	e5be      	b.n	1d2d8 <z_cbvprintf_impl+0x18>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d75a:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1d75e:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1d760:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1d764:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   1d768:	d102      	bne.n	1d770 <z_cbvprintf_impl+0x4b0>
				value->sint = (signed char)value->sint;
   1d76a:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   1d76e:	e7d9      	b.n	1d724 <z_cbvprintf_impl+0x464>
			} else if (length_mod == LENGTH_H) {
   1d770:	2902      	cmp	r1, #2
   1d772:	d1e2      	bne.n	1d73a <z_cbvprintf_impl+0x47a>
				value->sint = (short)value->sint;
   1d774:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   1d778:	e7d4      	b.n	1d724 <z_cbvprintf_impl+0x464>
		} else if (specifier_cat == SPECIFIER_UINT) {
   1d77a:	2b02      	cmp	r3, #2
   1d77c:	d129      	bne.n	1d7d2 <z_cbvprintf_impl+0x512>
			switch (length_mod) {
   1d77e:	1ecb      	subs	r3, r1, #3
   1d780:	2b04      	cmp	r3, #4
   1d782:	d813      	bhi.n	1d7ac <z_cbvprintf_impl+0x4ec>
   1d784:	e8df f003 	tbb	[pc, r3]
   1d788:	120a0a03 	.word	0x120a0a03
   1d78c:	12          	.byte	0x12
   1d78d:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   1d78e:	2200      	movs	r2, #0
					value->uint = (wchar_t)va_arg(ap,
   1d790:	6820      	ldr	r0, [r4, #0]
				value->sint = va_arg(ap, int);
   1d792:	1d23      	adds	r3, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   1d794:	900c      	str	r0, [sp, #48]	; 0x30
   1d796:	920d      	str	r2, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   1d798:	461c      	mov	r4, r3
   1d79a:	e7ce      	b.n	1d73a <z_cbvprintf_impl+0x47a>
					(uint_value_type)va_arg(ap,
   1d79c:	1de3      	adds	r3, r4, #7
   1d79e:	f023 0307 	bic.w	r3, r3, #7
				value->uint =
   1d7a2:	ecb3 7b02 	vldmia	r3!, {d7}
   1d7a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
				break;
   1d7aa:	e7f5      	b.n	1d798 <z_cbvprintf_impl+0x4d8>
					(uint_value_type)va_arg(ap, size_t);
   1d7ac:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   1d7b0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   1d7b2:	930c      	str	r3, [sp, #48]	; 0x30
   1d7b4:	f04f 0300 	mov.w	r3, #0
   1d7b8:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   1d7ba:	d105      	bne.n	1d7c8 <z_cbvprintf_impl+0x508>
				value->uint = (unsigned char)value->uint;
   1d7bc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   1d7c0:	930c      	str	r3, [sp, #48]	; 0x30
   1d7c2:	2300      	movs	r3, #0
   1d7c4:	930d      	str	r3, [sp, #52]	; 0x34
   1d7c6:	e7b8      	b.n	1d73a <z_cbvprintf_impl+0x47a>
			} else if (length_mod == LENGTH_H) {
   1d7c8:	2902      	cmp	r1, #2
   1d7ca:	d1b6      	bne.n	1d73a <z_cbvprintf_impl+0x47a>
				value->uint = (unsigned short)value->uint;
   1d7cc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1d7d0:	e7f6      	b.n	1d7c0 <z_cbvprintf_impl+0x500>
		} else if (specifier_cat == SPECIFIER_FP) {
   1d7d2:	2b04      	cmp	r3, #4
   1d7d4:	d109      	bne.n	1d7ea <z_cbvprintf_impl+0x52a>
					(sint_value_type)va_arg(ap, long long);
   1d7d6:	1de3      	adds	r3, r4, #7
   1d7d8:	f023 0307 	bic.w	r3, r3, #7
   1d7dc:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   1d7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d7e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1d7e8:	e7a7      	b.n	1d73a <z_cbvprintf_impl+0x47a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1d7ea:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   1d7ec:	bf04      	itt	eq
   1d7ee:	f854 3b04 	ldreq.w	r3, [r4], #4
   1d7f2:	930c      	streq	r3, [sp, #48]	; 0x30
   1d7f4:	e7a1      	b.n	1d73a <z_cbvprintf_impl+0x47a>
		switch (conv->specifier) {
   1d7f6:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
   1d7fa:	2a78      	cmp	r2, #120	; 0x78
   1d7fc:	d8ab      	bhi.n	1d756 <z_cbvprintf_impl+0x496>
   1d7fe:	2a57      	cmp	r2, #87	; 0x57
   1d800:	f200 808c 	bhi.w	1d91c <z_cbvprintf_impl+0x65c>
   1d804:	2a25      	cmp	r2, #37	; 0x25
   1d806:	f000 80d3 	beq.w	1d9b0 <z_cbvprintf_impl+0x6f0>
   1d80a:	2a24      	cmp	r2, #36	; 0x24
   1d80c:	d9a3      	bls.n	1d756 <z_cbvprintf_impl+0x496>
   1d80e:	2a41      	cmp	r2, #65	; 0x41
   1d810:	d003      	beq.n	1d81a <z_cbvprintf_impl+0x55a>
   1d812:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1d816:	2b02      	cmp	r3, #2
   1d818:	d89d      	bhi.n	1d756 <z_cbvprintf_impl+0x496>
	} u = {
   1d81a:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
   1d81e:	2b00      	cmp	r3, #0
   1d820:	f2c0 81b5 	blt.w	1db8e <z_cbvprintf_impl+0x8ce>
	} else if (conv->flag_plus) {
   1d824:	0738      	lsls	r0, r7, #28
   1d826:	f100 81b4 	bmi.w	1db92 <z_cbvprintf_impl+0x8d2>
		*sign = ' ';
   1d82a:	f017 0710 	ands.w	r7, r7, #16
   1d82e:	bf18      	it	ne
   1d830:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1d832:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   1d836:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1d83a:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
   1d83e:	2d00      	cmp	r5, #0
   1d840:	f040 81a9 	bne.w	1db96 <z_cbvprintf_impl+0x8d6>
   1d844:	ea51 0003 	orrs.w	r0, r1, r3
   1d848:	bf14      	ite	ne
   1d84a:	2001      	movne	r0, #1
   1d84c:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
   1d84e:	02db      	lsls	r3, r3, #11
   1d850:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
   1d854:	02c9      	lsls	r1, r1, #11
		c = 'f';
   1d856:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
   1d858:	ea45 0e01 	orr.w	lr, r5, r1
   1d85c:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
   1d860:	bf08      	it	eq
   1d862:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
   1d864:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   1d868:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
   1d86c:	f000 8201 	beq.w	1dc72 <z_cbvprintf_impl+0x9b2>
		if (is_subnormal) {
   1d870:	2800      	cmp	r0, #0
   1d872:	f040 81c9 	bne.w	1dc08 <z_cbvprintf_impl+0x948>
		fract |= BIT_63;
   1d876:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1d87a:	f04f 0c00 	mov.w	ip, #0
		fract *= 5U;
   1d87e:	f04f 0e05 	mov.w	lr, #5
		fract |= BIT_63;
   1d882:	4663      	mov	r3, ip
   1d884:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   1d888:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
   1d88c:	9109      	str	r1, [sp, #36]	; 0x24
	while (expo < -2) {
   1d88e:	f115 0f02 	cmn.w	r5, #2
   1d892:	f2c0 81c0 	blt.w	1dc16 <z_cbvprintf_impl+0x956>
   1d896:	f1bc 0f00 	cmp.w	ip, #0
   1d89a:	d001      	beq.n	1d8a0 <z_cbvprintf_impl+0x5e0>
   1d89c:	e9cd 0108 	strd	r0, r1, [sp, #32]
		fract += 2;
   1d8a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
	while (expo > 0) {
   1d8a4:	2d00      	cmp	r5, #0
   1d8a6:	f300 81cb 	bgt.w	1dc40 <z_cbvprintf_impl+0x980>
	fract >>= (4 - expo);
   1d8aa:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d8ac:	9908      	ldr	r1, [sp, #32]
   1d8ae:	f1c5 0c04 	rsb	ip, r5, #4
   1d8b2:	351c      	adds	r5, #28
   1d8b4:	fa00 f505 	lsl.w	r5, r0, r5
   1d8b8:	f1ac 0e20 	sub.w	lr, ip, #32
   1d8bc:	fa21 f10c 	lsr.w	r1, r1, ip
   1d8c0:	fa20 fe0e 	lsr.w	lr, r0, lr
   1d8c4:	4329      	orrs	r1, r5
   1d8c6:	ea41 010e 	orr.w	r1, r1, lr
   1d8ca:	fa20 f00c 	lsr.w	r0, r0, ip
   1d8ce:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
   1d8d2:	f002 01df 	and.w	r1, r2, #223	; 0xdf
   1d8d6:	2947      	cmp	r1, #71	; 0x47
   1d8d8:	f040 81d2 	bne.w	1dc80 <z_cbvprintf_impl+0x9c0>
		if (decexp < (-4 + 1) || decexp > precision) {
   1d8dc:	1cdd      	adds	r5, r3, #3
   1d8de:	db02      	blt.n	1d8e6 <z_cbvprintf_impl+0x626>
   1d8e0:	4598      	cmp	r8, r3
   1d8e2:	f280 81c9 	bge.w	1dc78 <z_cbvprintf_impl+0x9b8>
			c += 'e' - 'g';  /* e or E */
   1d8e6:	3a02      	subs	r2, #2
			if (precision > 0) {
   1d8e8:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
   1d8ec:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
   1d8ee:	dd01      	ble.n	1d8f4 <z_cbvprintf_impl+0x634>
				precision--;
   1d8f0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
   1d8f4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1d8f8:	0688      	lsls	r0, r1, #26
   1d8fa:	f100 81c1 	bmi.w	1dc80 <z_cbvprintf_impl+0x9c0>
   1d8fe:	f1b8 0f00 	cmp.w	r8, #0
   1d902:	bfd4      	ite	le
   1d904:	2100      	movle	r1, #0
   1d906:	2101      	movgt	r1, #1
	if (c == 'f') {
   1d908:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
   1d90a:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
   1d90c:	f040 81ba 	bne.w	1dc84 <z_cbvprintf_impl+0x9c4>
		if (decimals < 0) {
   1d910:	eb13 0108 	adds.w	r1, r3, r8
   1d914:	f140 81b8 	bpl.w	1dc88 <z_cbvprintf_impl+0x9c8>
			decimals = 0;
   1d918:	2100      	movs	r1, #0
   1d91a:	e1b8      	b.n	1dc8e <z_cbvprintf_impl+0x9ce>
		switch (conv->specifier) {
   1d91c:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   1d920:	2b20      	cmp	r3, #32
   1d922:	f63f af18 	bhi.w	1d756 <z_cbvprintf_impl+0x496>
   1d926:	a001      	add	r0, pc, #4	; (adr r0, 1d92c <z_cbvprintf_impl+0x66c>)
   1d928:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   1d92c:	0001db31 	.word	0x0001db31
   1d930:	0001d757 	.word	0x0001d757
   1d934:	0001d757 	.word	0x0001d757
   1d938:	0001d757 	.word	0x0001d757
   1d93c:	0001d757 	.word	0x0001d757
   1d940:	0001d757 	.word	0x0001d757
   1d944:	0001d757 	.word	0x0001d757
   1d948:	0001d757 	.word	0x0001d757
   1d94c:	0001d757 	.word	0x0001d757
   1d950:	0001d81b 	.word	0x0001d81b
   1d954:	0001d757 	.word	0x0001d757
   1d958:	0001d9dd 	.word	0x0001d9dd
   1d95c:	0001dad1 	.word	0x0001dad1
   1d960:	0001d81b 	.word	0x0001d81b
   1d964:	0001d81b 	.word	0x0001d81b
   1d968:	0001d81b 	.word	0x0001d81b
   1d96c:	0001d757 	.word	0x0001d757
   1d970:	0001dad1 	.word	0x0001dad1
   1d974:	0001d757 	.word	0x0001d757
   1d978:	0001d757 	.word	0x0001d757
   1d97c:	0001d757 	.word	0x0001d757
   1d980:	0001d757 	.word	0x0001d757
   1d984:	0001db67 	.word	0x0001db67
   1d988:	0001db31 	.word	0x0001db31
   1d98c:	0001db35 	.word	0x0001db35
   1d990:	0001d757 	.word	0x0001d757
   1d994:	0001d757 	.word	0x0001d757
   1d998:	0001d9b7 	.word	0x0001d9b7
   1d99c:	0001d757 	.word	0x0001d757
   1d9a0:	0001db31 	.word	0x0001db31
   1d9a4:	0001d757 	.word	0x0001d757
   1d9a8:	0001d757 	.word	0x0001d757
   1d9ac:	0001db31 	.word	0x0001db31
			OUTC('%');
   1d9b0:	4651      	mov	r1, sl
   1d9b2:	4610      	mov	r0, r2
   1d9b4:	e49a      	b.n	1d2ec <z_cbvprintf_impl+0x2c>
			if (precision >= 0) {
   1d9b6:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   1d9ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
   1d9bc:	db09      	blt.n	1d9d2 <z_cbvprintf_impl+0x712>
				len = strnlen(bps, precision);
   1d9be:	4641      	mov	r1, r8
   1d9c0:	4610      	mov	r0, r2
   1d9c2:	9203      	str	r2, [sp, #12]
   1d9c4:	f016 fb24 	bl	34010 <strnlen>
		char sign = 0;
   1d9c8:	2700      	movs	r7, #0
				len = strlen(bps);
   1d9ca:	9a03      	ldr	r2, [sp, #12]
			bpe = bps + len;
   1d9cc:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
   1d9ce:	b962      	cbnz	r2, 1d9ea <z_cbvprintf_impl+0x72a>
   1d9d0:	e6c1      	b.n	1d756 <z_cbvprintf_impl+0x496>
				len = strlen(bps);
   1d9d2:	4610      	mov	r0, r2
   1d9d4:	9203      	str	r2, [sp, #12]
   1d9d6:	f7ff fb63 	bl	1d0a0 <strlen>
   1d9da:	e7f5      	b.n	1d9c8 <z_cbvprintf_impl+0x708>
		char sign = 0;
   1d9dc:	2700      	movs	r7, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1d9de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			bpe = buf + 1;
   1d9e0:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1d9e4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				bps = encode_float(value->dbl, conv, precision,
   1d9e8:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
   1d9ea:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
   1d9ec:	b107      	cbz	r7, 1d9f0 <z_cbvprintf_impl+0x730>
			nj_len += 1U;
   1d9ee:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1d9f0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   1d9f4:	06c1      	lsls	r1, r0, #27
   1d9f6:	f140 8233 	bpl.w	1de60 <z_cbvprintf_impl+0xba0>
			nj_len += 2U;
   1d9fa:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   1d9fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
   1d9fe:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   1da00:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   1da02:	bf44      	itt	mi
   1da04:	9910      	ldrmi	r1, [sp, #64]	; 0x40
   1da06:	185b      	addmi	r3, r3, r1
		if (width > 0) {
   1da08:	f1bb 0f00 	cmp.w	fp, #0
   1da0c:	dd23      	ble.n	1da56 <z_cbvprintf_impl+0x796>
			width -= (int)nj_len;
   1da0e:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
   1da12:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1da16:	0759      	lsls	r1, r3, #29
   1da18:	f3c3 0880 	ubfx	r8, r3, #2, #1
   1da1c:	d41b      	bmi.n	1da56 <z_cbvprintf_impl+0x796>
				if (conv->flag_zero) {
   1da1e:	0658      	lsls	r0, r3, #25
   1da20:	f140 8234 	bpl.w	1de8c <z_cbvprintf_impl+0xbcc>
					if (sign != 0) {
   1da24:	2f00      	cmp	r7, #0
   1da26:	f000 8234 	beq.w	1de92 <z_cbvprintf_impl+0xbd2>
						OUTC(sign);
   1da2a:	4651      	mov	r1, sl
   1da2c:	4638      	mov	r0, r7
   1da2e:	9203      	str	r2, [sp, #12]
   1da30:	47c8      	blx	r9
   1da32:	2800      	cmp	r0, #0
   1da34:	f2c0 8220 	blt.w	1de78 <z_cbvprintf_impl+0xbb8>
						sign = 0;
   1da38:	4647      	mov	r7, r8
					pad = '0';
   1da3a:	f04f 0830 	mov.w	r8, #48	; 0x30
   1da3e:	9a03      	ldr	r2, [sp, #12]
						OUTC(sign);
   1da40:	3601      	adds	r6, #1
						sign = 0;
   1da42:	445e      	add	r6, fp
   1da44:	465b      	mov	r3, fp
				while (width-- > 0) {
   1da46:	2b00      	cmp	r3, #0
   1da48:	eba6 000b 	sub.w	r0, r6, fp
   1da4c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1da50:	f300 820a 	bgt.w	1de68 <z_cbvprintf_impl+0xba8>
   1da54:	4606      	mov	r6, r0
		if (sign != 0) {
   1da56:	b147      	cbz	r7, 1da6a <z_cbvprintf_impl+0x7aa>
			OUTC(sign);
   1da58:	4651      	mov	r1, sl
   1da5a:	4638      	mov	r0, r7
   1da5c:	9203      	str	r2, [sp, #12]
   1da5e:	47c8      	blx	r9
   1da60:	2800      	cmp	r0, #0
   1da62:	f2c0 8209 	blt.w	1de78 <z_cbvprintf_impl+0xbb8>
   1da66:	9a03      	ldr	r2, [sp, #12]
   1da68:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   1da6a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1da6e:	0659      	lsls	r1, r3, #25
   1da70:	f140 8263 	bpl.w	1df3a <z_cbvprintf_impl+0xc7a>
			if (conv->specifier_a) {
   1da74:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
   1da78:	1ab6      	subs	r6, r6, r2
   1da7a:	2b00      	cmp	r3, #0
   1da7c:	f280 8218 	bge.w	1deb0 <z_cbvprintf_impl+0xbf0>
   1da80:	4617      	mov	r7, r2
   1da82:	46b8      	mov	r8, r7
   1da84:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
   1da86:	f817 0b01 	ldrb.w	r0, [r7], #1
   1da8a:	2870      	cmp	r0, #112	; 0x70
   1da8c:	f040 8204 	bne.w	1de98 <z_cbvprintf_impl+0xbd8>
			while (pad_len-- > 0) {
   1da90:	461e      	mov	r6, r3
   1da92:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1da94:	441f      	add	r7, r3
   1da96:	1bbb      	subs	r3, r7, r6
   1da98:	2b00      	cmp	r3, #0
   1da9a:	f300 8247 	bgt.w	1df2c <z_cbvprintf_impl+0xc6c>
			OUTS(cp, bpe);
   1da9e:	462b      	mov	r3, r5
   1daa0:	4642      	mov	r2, r8
			OUTS(bps, bpe);
   1daa2:	4651      	mov	r1, sl
   1daa4:	4648      	mov	r0, r9
   1daa6:	f012 f994 	bl	2fdd2 <outs>
   1daaa:	2800      	cmp	r0, #0
   1daac:	f2c0 81e4 	blt.w	1de78 <z_cbvprintf_impl+0xbb8>
   1dab0:	4430      	add	r0, r6
			while (pad_len-- > 0) {
   1dab2:	4606      	mov	r6, r0
   1dab4:	4483      	add	fp, r0
		while (width > 0) {
   1dab6:	ebab 0306 	sub.w	r3, fp, r6
   1daba:	2b00      	cmp	r3, #0
   1dabc:	f77f ae4b 	ble.w	1d756 <z_cbvprintf_impl+0x496>
			OUTC(' ');
   1dac0:	4651      	mov	r1, sl
   1dac2:	2020      	movs	r0, #32
   1dac4:	47c8      	blx	r9
   1dac6:	2800      	cmp	r0, #0
   1dac8:	f2c0 81d6 	blt.w	1de78 <z_cbvprintf_impl+0xbb8>
   1dacc:	3601      	adds	r6, #1
			--width;
   1dace:	e7f2      	b.n	1dab6 <z_cbvprintf_impl+0x7f6>
			if (conv->flag_plus) {
   1dad0:	073d      	lsls	r5, r7, #28
   1dad2:	d42b      	bmi.n	1db2c <z_cbvprintf_impl+0x86c>
				sign = ' ';
   1dad4:	f017 0710 	ands.w	r7, r7, #16
   1dad8:	bf18      	it	ne
   1dada:	2720      	movne	r7, #32
			sint = value->sint;
   1dadc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   1dae0:	2b00      	cmp	r3, #0
   1dae2:	da05      	bge.n	1daf0 <z_cbvprintf_impl+0x830>
				sign = '-';
   1dae4:	272d      	movs	r7, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
   1dae6:	4252      	negs	r2, r2
   1dae8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1daec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			bps = encode_uint(value->uint, conv, buf, bpe);
   1daf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1daf4:	f10d 0365 	add.w	r3, sp, #101	; 0x65
   1daf8:	9300      	str	r3, [sp, #0]
   1dafa:	aa0e      	add	r2, sp, #56	; 0x38
   1dafc:	ab13      	add	r3, sp, #76	; 0x4c
   1dafe:	f002 fd5b 	bl	205b8 <encode_uint>
   1db02:	4602      	mov	r2, r0
			if (precision >= 0) {
   1db04:	f1b8 0f00 	cmp.w	r8, #0
   1db08:	f10d 0565 	add.w	r5, sp, #101	; 0x65
   1db0c:	f6ff af5f 	blt.w	1d9ce <z_cbvprintf_impl+0x70e>
				conv->flag_zero = false;
   1db10:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   1db14:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
   1db16:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   1db1a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   1db1c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   1db20:	f67f af55 	bls.w	1d9ce <z_cbvprintf_impl+0x70e>
					conv->pad0_value = precision - (int)len;
   1db24:	eba8 0303 	sub.w	r3, r8, r3
   1db28:	930f      	str	r3, [sp, #60]	; 0x3c
   1db2a:	e750      	b.n	1d9ce <z_cbvprintf_impl+0x70e>
				sign = '+';
   1db2c:	272b      	movs	r7, #43	; 0x2b
   1db2e:	e7d5      	b.n	1dadc <z_cbvprintf_impl+0x81c>
		switch (conv->specifier) {
   1db30:	2700      	movs	r7, #0
   1db32:	e7dd      	b.n	1daf0 <z_cbvprintf_impl+0x830>
			if (value->ptr != NULL) {
   1db34:	980c      	ldr	r0, [sp, #48]	; 0x30
   1db36:	2800      	cmp	r0, #0
   1db38:	f000 818e 	beq.w	1de58 <z_cbvprintf_impl+0xb98>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1db3c:	f10d 0365 	add.w	r3, sp, #101	; 0x65
   1db40:	9300      	str	r3, [sp, #0]
   1db42:	aa0e      	add	r2, sp, #56	; 0x38
   1db44:	ab13      	add	r3, sp, #76	; 0x4c
   1db46:	2100      	movs	r1, #0
   1db48:	f002 fd36 	bl	205b8 <encode_uint>
				conv->altform_0c = true;
   1db4c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1db50:	4602      	mov	r2, r0
				conv->altform_0c = true;
   1db52:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1db56:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1db5a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   1db5e:	2700      	movs	r7, #0
				conv->altform_0c = true;
   1db60:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
				goto prec_int_pad0;
   1db64:	e7ce      	b.n	1db04 <z_cbvprintf_impl+0x844>
				store_count(conv, value->ptr, count);
   1db66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   1db68:	2907      	cmp	r1, #7
   1db6a:	f63f adf4 	bhi.w	1d756 <z_cbvprintf_impl+0x496>
   1db6e:	e8df f001 	tbb	[pc, r1]
   1db72:	040c      	.short	0x040c
   1db74:	08080c06 	.word	0x08080c06
   1db78:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   1db7a:	701e      	strb	r6, [r3, #0]
		break;
   1db7c:	e5eb      	b.n	1d756 <z_cbvprintf_impl+0x496>
		*(short *)dp = (short)count;
   1db7e:	801e      	strh	r6, [r3, #0]
		break;
   1db80:	e5e9      	b.n	1d756 <z_cbvprintf_impl+0x496>
		*(intmax_t *)dp = (intmax_t)count;
   1db82:	17f2      	asrs	r2, r6, #31
   1db84:	e9c3 6200 	strd	r6, r2, [r3]
		break;
   1db88:	e5e5      	b.n	1d756 <z_cbvprintf_impl+0x496>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1db8a:	601e      	str	r6, [r3, #0]
		break;
   1db8c:	e5e3      	b.n	1d756 <z_cbvprintf_impl+0x496>
		*sign = '-';
   1db8e:	272d      	movs	r7, #45	; 0x2d
   1db90:	e64f      	b.n	1d832 <z_cbvprintf_impl+0x572>
		*sign = '+';
   1db92:	272b      	movs	r7, #43	; 0x2b
   1db94:	e64d      	b.n	1d832 <z_cbvprintf_impl+0x572>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   1db96:	f240 70ff 	movw	r0, #2047	; 0x7ff
   1db9a:	4285      	cmp	r5, r0
   1db9c:	d131      	bne.n	1dc02 <z_cbvprintf_impl+0x942>
			if (isupper((unsigned char)c)) {
   1db9e:	48b9      	ldr	r0, [pc, #740]	; (1de84 <z_cbvprintf_impl+0xbc4>)
   1dba0:	3201      	adds	r2, #1
   1dba2:	b2d2      	uxtb	r2, r2
   1dba4:	5c12      	ldrb	r2, [r2, r0]
		if (fract == 0) {
   1dba6:	430b      	orrs	r3, r1
   1dba8:	f002 0203 	and.w	r2, r2, #3
   1dbac:	d11b      	bne.n	1dbe6 <z_cbvprintf_impl+0x926>
			if (isupper((unsigned char)c)) {
   1dbae:	2a01      	cmp	r2, #1
   1dbb0:	d111      	bne.n	1dbd6 <z_cbvprintf_impl+0x916>
				*buf++ = 'I';
   1dbb2:	2349      	movs	r3, #73	; 0x49
   1dbb4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
   1dbb8:	234e      	movs	r3, #78	; 0x4e
   1dbba:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
   1dbbe:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
   1dbc0:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
   1dbc4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
   1dbc8:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		conv->flag_zero = false;
   1dbcc:	f36f 1386 	bfc	r3, #6, #1
   1dbd0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		return bps;
   1dbd4:	e708      	b.n	1d9e8 <z_cbvprintf_impl+0x728>
				*buf++ = 'i';
   1dbd6:	2369      	movs	r3, #105	; 0x69
   1dbd8:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
   1dbdc:	236e      	movs	r3, #110	; 0x6e
   1dbde:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
   1dbe2:	2366      	movs	r3, #102	; 0x66
   1dbe4:	e7ec      	b.n	1dbc0 <z_cbvprintf_impl+0x900>
			if (isupper((unsigned char)c)) {
   1dbe6:	2a01      	cmp	r2, #1
				*buf++ = 'N';
   1dbe8:	bf07      	ittee	eq
   1dbea:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
   1dbec:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
   1dbee:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
   1dbf0:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
   1dbf2:	bf0c      	ite	eq
   1dbf4:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
   1dbf8:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
   1dbfc:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
   1dc00:	e7de      	b.n	1dbc0 <z_cbvprintf_impl+0x900>
	bool is_subnormal = (expo == 0) && (fract != 0);
   1dc02:	2000      	movs	r0, #0
   1dc04:	e623      	b.n	1d84e <z_cbvprintf_impl+0x58e>
				expo--;
   1dc06:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   1dc08:	1849      	adds	r1, r1, r1
   1dc0a:	415b      	adcs	r3, r3
   1dc0c:	2b00      	cmp	r3, #0
   1dc0e:	dafa      	bge.n	1dc06 <z_cbvprintf_impl+0x946>
   1dc10:	e9cd 1308 	strd	r1, r3, [sp, #32]
   1dc14:	e62f      	b.n	1d876 <z_cbvprintf_impl+0x5b6>
			fract >>= 1;
   1dc16:	0840      	lsrs	r0, r0, #1
   1dc18:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   1dc1c:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1dc1e:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
   1dc22:	46ac      	mov	ip, r5
			expo++;
   1dc24:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1dc28:	d2f5      	bcs.n	1dc16 <z_cbvprintf_impl+0x956>
		fract *= 5U;
   1dc2a:	fb0e f501 	mul.w	r5, lr, r1
   1dc2e:	fba0 010e 	umull	r0, r1, r0, lr
		decexp--;
   1dc32:	3b01      	subs	r3, #1
		fract *= 5U;
   1dc34:	4429      	add	r1, r5
		expo++;
   1dc36:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
   1dc3a:	f04f 0c01 	mov.w	ip, #1
   1dc3e:	e626      	b.n	1d88e <z_cbvprintf_impl+0x5ce>
		fract += 2;
   1dc40:	3002      	adds	r0, #2
   1dc42:	f141 0100 	adc.w	r1, r1, #0
   1dc46:	e9cd 0108 	strd	r0, r1, [sp, #32]
		_ldiv5(&fract);
   1dc4a:	a808      	add	r0, sp, #32
   1dc4c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1dc50:	f012 f890 	bl	2fd74 <_ldiv5>
		expo--;
   1dc54:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		decexp++;
   1dc58:	9b04      	ldr	r3, [sp, #16]
   1dc5a:	9a03      	ldr	r2, [sp, #12]
		expo--;
   1dc5c:	3d01      	subs	r5, #1
		decexp++;
   1dc5e:	3301      	adds	r3, #1
			fract <<= 1;
   1dc60:	1849      	adds	r1, r1, r1
   1dc62:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
   1dc64:	2800      	cmp	r0, #0
			expo--;
   1dc66:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
   1dc6a:	daf9      	bge.n	1dc60 <z_cbvprintf_impl+0x9a0>
   1dc6c:	e9cd 1008 	strd	r1, r0, [sp, #32]
   1dc70:	e616      	b.n	1d8a0 <z_cbvprintf_impl+0x5e0>
   1dc72:	2300      	movs	r3, #0
   1dc74:	461d      	mov	r5, r3
   1dc76:	e618      	b.n	1d8aa <z_cbvprintf_impl+0x5ea>
			c = 'f';
   1dc78:	2266      	movs	r2, #102	; 0x66
			precision -= decexp;
   1dc7a:	eba8 0803 	sub.w	r8, r8, r3
   1dc7e:	e639      	b.n	1d8f4 <z_cbvprintf_impl+0x634>
	bool prune_zero = false;
   1dc80:	2100      	movs	r1, #0
   1dc82:	e641      	b.n	1d908 <z_cbvprintf_impl+0x648>
		decimals = precision + 1;
   1dc84:	f108 0101 	add.w	r1, r8, #1
	if (decimals > 16) {
   1dc88:	2910      	cmp	r1, #16
   1dc8a:	bfa8      	it	ge
   1dc8c:	2110      	movge	r1, #16
   1dc8e:	2010      	movs	r0, #16
	uint64_t round = BIT64(59); /* 0.5 */
   1dc90:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
   1dc94:	460d      	mov	r5, r1
   1dc96:	9007      	str	r0, [sp, #28]
	*v >>= 1;
   1dc98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
	while (decimals--) {
   1dc9c:	b9a5      	cbnz	r5, 1dcc8 <z_cbvprintf_impl+0xa08>
	fract += round;
   1dc9e:	9d08      	ldr	r5, [sp, #32]
   1dca0:	1940      	adds	r0, r0, r5
   1dca2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1dca4:	eb41 0105 	adc.w	r1, r1, r5
	if (fract >= BIT64(60)) {
   1dca8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   1dcac:	d21b      	bcs.n	1dce6 <z_cbvprintf_impl+0xa26>
	fract += round;
   1dcae:	e9cd 0108 	strd	r0, r1, [sp, #32]
	if (c == 'f') {
   1dcb2:	2a66      	cmp	r2, #102	; 0x66
   1dcb4:	f040 8098 	bne.w	1dde8 <z_cbvprintf_impl+0xb28>
		if (decexp > 0) {
   1dcb8:	2b00      	cmp	r3, #0
   1dcba:	dc23      	bgt.n	1dd04 <z_cbvprintf_impl+0xa44>
			*buf++ = '0';
   1dcbc:	2130      	movs	r1, #48	; 0x30
   1dcbe:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
   1dcc2:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
   1dcc6:	e02f      	b.n	1dd28 <z_cbvprintf_impl+0xa68>
	*v >>= 1;
   1dcc8:	0840      	lsrs	r0, r0, #1
   1dcca:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   1dcce:	0849      	lsrs	r1, r1, #1
   1dcd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	_ldiv5(v);
   1dcd4:	a80a      	add	r0, sp, #40	; 0x28
   1dcd6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dcda:	3d01      	subs	r5, #1
   1dcdc:	f012 f84a 	bl	2fd74 <_ldiv5>
   1dce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
   1dce4:	e7d8      	b.n	1dc98 <z_cbvprintf_impl+0x9d8>
	*v >>= 1;
   1dce6:	0840      	lsrs	r0, r0, #1
   1dce8:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
   1dcec:	0849      	lsrs	r1, r1, #1
   1dcee:	e9cd 0108 	strd	r0, r1, [sp, #32]
	_ldiv5(v);
   1dcf2:	a808      	add	r0, sp, #32
   1dcf4:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dcf8:	f012 f83c 	bl	2fd74 <_ldiv5>
		decexp++;
   1dcfc:	9b05      	ldr	r3, [sp, #20]
   1dcfe:	9a04      	ldr	r2, [sp, #16]
   1dd00:	3301      	adds	r3, #1
   1dd02:	e7d6      	b.n	1dcb2 <z_cbvprintf_impl+0x9f2>
	char *buf = bps;
   1dd04:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
   1dd06:	9907      	ldr	r1, [sp, #28]
   1dd08:	2900      	cmp	r1, #0
   1dd0a:	dd0b      	ble.n	1dd24 <z_cbvprintf_impl+0xa64>
				*buf++ = _get_digit(&fract, &digit_count);
   1dd0c:	a907      	add	r1, sp, #28
   1dd0e:	a808      	add	r0, sp, #32
   1dd10:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1dd14:	f012 f846 	bl	2fda4 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   1dd18:	9b05      	ldr	r3, [sp, #20]
   1dd1a:	9a04      	ldr	r2, [sp, #16]
   1dd1c:	3b01      	subs	r3, #1
				*buf++ = _get_digit(&fract, &digit_count);
   1dd1e:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
   1dd22:	d1f0      	bne.n	1dd06 <z_cbvprintf_impl+0xa46>
			conv->pad0_value = decexp;
   1dd24:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
   1dd26:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
   1dd28:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
   1dd2c:	0689      	lsls	r1, r1, #26
   1dd2e:	d402      	bmi.n	1dd36 <z_cbvprintf_impl+0xa76>
   1dd30:	f1b8 0f00 	cmp.w	r8, #0
   1dd34:	dd1d      	ble.n	1dd72 <z_cbvprintf_impl+0xab2>
			*buf++ = '.';
   1dd36:	212e      	movs	r1, #46	; 0x2e
   1dd38:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
   1dd3c:	b19b      	cbz	r3, 1dd66 <z_cbvprintf_impl+0xaa6>
   1dd3e:	f1b8 0f00 	cmp.w	r8, #0
   1dd42:	dd16      	ble.n	1dd72 <z_cbvprintf_impl+0xab2>
			conv->pad0_value = -decexp;
   1dd44:	4259      	negs	r1, r3
   1dd46:	4541      	cmp	r1, r8
   1dd48:	bfa8      	it	ge
   1dd4a:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
   1dd4c:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
   1dd4e:	910f      	str	r1, [sp, #60]	; 0x3c
			precision -= conv->pad0_value;
   1dd50:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   1dd54:	bfd4      	ite	le
   1dd56:	2100      	movle	r1, #0
   1dd58:	2101      	movgt	r1, #1
   1dd5a:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   1dd5e:	f361 1045 	bfi	r0, r1, #5, #1
   1dd62:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
   1dd66:	f1b8 0f00 	cmp.w	r8, #0
   1dd6a:	dd02      	ble.n	1dd72 <z_cbvprintf_impl+0xab2>
   1dd6c:	9907      	ldr	r1, [sp, #28]
   1dd6e:	2900      	cmp	r1, #0
   1dd70:	dc55      	bgt.n	1de1e <z_cbvprintf_impl+0xb5e>
	if (prune_zero) {
   1dd72:	9903      	ldr	r1, [sp, #12]
   1dd74:	2900      	cmp	r1, #0
   1dd76:	d162      	bne.n	1de3e <z_cbvprintf_impl+0xb7e>
	conv->pad0_pre_exp = precision;
   1dd78:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
   1dd7c:	f002 01df 	and.w	r1, r2, #223	; 0xdf
   1dd80:	2945      	cmp	r1, #69	; 0x45
   1dd82:	d120      	bne.n	1ddc6 <z_cbvprintf_impl+0xb06>
		*buf++ = c;
   1dd84:	4629      	mov	r1, r5
		if (decexp < 0) {
   1dd86:	2b00      	cmp	r3, #0
		*buf++ = c;
   1dd88:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
   1dd8c:	bfb6      	itet	lt
   1dd8e:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
   1dd90:	222b      	movge	r2, #43	; 0x2b
			decexp = -decexp;
   1dd92:	425b      	neglt	r3, r3
		if (decexp >= 100) {
   1dd94:	2b63      	cmp	r3, #99	; 0x63
   1dd96:	706a      	strb	r2, [r5, #1]
   1dd98:	dd09      	ble.n	1ddae <z_cbvprintf_impl+0xaee>
			*buf++ = (decexp / 100) + '0';
   1dd9a:	2064      	movs	r0, #100	; 0x64
   1dd9c:	fbb3 f2f0 	udiv	r2, r3, r0
			decexp %= 100;
   1dda0:	fb00 3312 	mls	r3, r0, r2, r3
			*buf++ = (decexp / 100) + '0';
   1dda4:	f102 0c30 	add.w	ip, r2, #48	; 0x30
   1dda8:	1ce9      	adds	r1, r5, #3
   1ddaa:	f885 c002 	strb.w	ip, [r5, #2]
		*buf++ = (decexp / 10) + '0';
   1ddae:	200a      	movs	r0, #10
   1ddb0:	fbb3 f2f0 	udiv	r2, r3, r0
   1ddb4:	460d      	mov	r5, r1
		*buf++ = (decexp % 10) + '0';
   1ddb6:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
   1ddba:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   1ddbe:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   1ddc0:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
   1ddc4:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
   1ddc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ddc8:	2b00      	cmp	r3, #0
   1ddca:	dc43      	bgt.n	1de54 <z_cbvprintf_impl+0xb94>
   1ddcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ddce:	2b00      	cmp	r3, #0
   1ddd0:	bfd4      	ite	le
   1ddd2:	2300      	movle	r3, #0
   1ddd4:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   1ddd6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1ddda:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   1ddde:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   1dde0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
   1dde4:	702b      	strb	r3, [r5, #0]
	return bps;
   1dde6:	e5ff      	b.n	1d9e8 <z_cbvprintf_impl+0x728>
		*buf = _get_digit(&fract, &digit_count);
   1dde8:	a907      	add	r1, sp, #28
   1ddea:	a808      	add	r0, sp, #32
   1ddec:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1ddf0:	f011 ffd8 	bl	2fda4 <_get_digit>
		if (*buf++ != '0') {
   1ddf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
   1ddf8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		if (*buf++ != '0') {
   1ddfc:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
   1ddfe:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
			decexp--;
   1de02:	bf18      	it	ne
   1de04:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
   1de08:	0688      	lsls	r0, r1, #26
   1de0a:	d402      	bmi.n	1de12 <z_cbvprintf_impl+0xb52>
   1de0c:	f1b8 0f00 	cmp.w	r8, #0
   1de10:	dd12      	ble.n	1de38 <z_cbvprintf_impl+0xb78>
			*buf++ = '.';
   1de12:	212e      	movs	r1, #46	; 0x2e
   1de14:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
   1de18:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
   1de1c:	e7a3      	b.n	1dd66 <z_cbvprintf_impl+0xaa6>
		*buf++ = _get_digit(&fract, &digit_count);
   1de1e:	a907      	add	r1, sp, #28
   1de20:	a808      	add	r0, sp, #32
   1de22:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1de26:	f011 ffbd 	bl	2fda4 <_get_digit>
   1de2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1de2e:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
   1de32:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1de36:	e796      	b.n	1dd66 <z_cbvprintf_impl+0xaa6>
		if (*buf++ != '0') {
   1de38:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
   1de3c:	e799      	b.n	1dd72 <z_cbvprintf_impl+0xab2>
		conv->pad0_pre_exp = 0;
   1de3e:	2100      	movs	r1, #0
   1de40:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
   1de42:	4628      	mov	r0, r5
   1de44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   1de48:	2930      	cmp	r1, #48	; 0x30
   1de4a:	d0fa      	beq.n	1de42 <z_cbvprintf_impl+0xb82>
		if (*buf != '.') {
   1de4c:	292e      	cmp	r1, #46	; 0x2e
   1de4e:	bf18      	it	ne
   1de50:	4605      	movne	r5, r0
   1de52:	e793      	b.n	1dd7c <z_cbvprintf_impl+0xabc>
		|| (conv->pad0_pre_exp > 0);
   1de54:	2301      	movs	r3, #1
   1de56:	e7be      	b.n	1ddd6 <z_cbvprintf_impl+0xb16>
			bpe = bps + 5;
   1de58:	4d0b      	ldr	r5, [pc, #44]	; (1de88 <z_cbvprintf_impl+0xbc8>)
		char sign = 0;
   1de5a:	4607      	mov	r7, r0
			bps = "(nil)";
   1de5c:	1f6a      	subs	r2, r5, #5
   1de5e:	e5c4      	b.n	1d9ea <z_cbvprintf_impl+0x72a>
		} else if (conv->altform_0) {
   1de60:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
   1de62:	bf48      	it	mi
   1de64:	3301      	addmi	r3, #1
   1de66:	e5c9      	b.n	1d9fc <z_cbvprintf_impl+0x73c>
					OUTC(pad);
   1de68:	4651      	mov	r1, sl
   1de6a:	4640      	mov	r0, r8
   1de6c:	9203      	str	r2, [sp, #12]
   1de6e:	47c8      	blx	r9
   1de70:	2800      	cmp	r0, #0
   1de72:	9a03      	ldr	r2, [sp, #12]
   1de74:	f6bf ade6 	bge.w	1da44 <z_cbvprintf_impl+0x784>
#undef OUTS
#undef OUTC
}
   1de78:	b01b      	add	sp, #108	; 0x6c
   1de7a:	ecbd 8b02 	vpop	{d8}
   1de7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1de82:	bf00      	nop
   1de84:	00039f70 	.word	0x00039f70
   1de88:	0003798b 	.word	0x0003798b
				char pad = ' ';
   1de8c:	f04f 0820 	mov.w	r8, #32
   1de90:	e5d7      	b.n	1da42 <z_cbvprintf_impl+0x782>
					pad = '0';
   1de92:	f04f 0830 	mov.w	r8, #48	; 0x30
   1de96:	e5d4      	b.n	1da42 <z_cbvprintf_impl+0x782>
					OUTC(*cp++);
   1de98:	4651      	mov	r1, sl
   1de9a:	47c8      	blx	r9
   1de9c:	2800      	cmp	r0, #0
   1de9e:	f6bf adf0 	bge.w	1da82 <z_cbvprintf_impl+0x7c2>
   1dea2:	e7e9      	b.n	1de78 <z_cbvprintf_impl+0xbb8>
					OUTC(*cp++);
   1dea4:	4651      	mov	r1, sl
   1dea6:	9203      	str	r2, [sp, #12]
   1dea8:	47c8      	blx	r9
   1deaa:	2800      	cmp	r0, #0
   1deac:	9a03      	ldr	r2, [sp, #12]
   1deae:	dbe3      	blt.n	1de78 <z_cbvprintf_impl+0xbb8>
				while (isdigit((unsigned char)*cp)) {
   1deb0:	7810      	ldrb	r0, [r2, #0]
   1deb2:	4b37      	ldr	r3, [pc, #220]	; (1df90 <z_cbvprintf_impl+0xcd0>)
   1deb4:	4617      	mov	r7, r2
   1deb6:	5cc3      	ldrb	r3, [r0, r3]
   1deb8:	eb06 0802 	add.w	r8, r6, r2
   1debc:	075b      	lsls	r3, r3, #29
   1debe:	f102 0201 	add.w	r2, r2, #1
   1dec2:	d4ef      	bmi.n	1dea4 <z_cbvprintf_impl+0xbe4>
				if (!conv->pad_postdp) {
   1dec4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
   1dec8:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
   1deca:	0699      	lsls	r1, r3, #26
   1decc:	d407      	bmi.n	1dede <z_cbvprintf_impl+0xc1e>
   1dece:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
   1ded0:	2e00      	cmp	r6, #0
   1ded2:	eba8 0206 	sub.w	r2, r8, r6
   1ded6:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   1deda:	dc0f      	bgt.n	1defc <z_cbvprintf_impl+0xc3c>
   1dedc:	4690      	mov	r8, r2
				if (*cp == '.') {
   1dede:	7838      	ldrb	r0, [r7, #0]
   1dee0:	282e      	cmp	r0, #46	; 0x2e
   1dee2:	d108      	bne.n	1def6 <z_cbvprintf_impl+0xc36>
					OUTC(*cp++);
   1dee4:	4651      	mov	r1, sl
   1dee6:	47c8      	blx	r9
						OUTC('0');
   1dee8:	2800      	cmp	r0, #0
   1deea:	dbc5      	blt.n	1de78 <z_cbvprintf_impl+0xbb8>
					while (pad_len-- > 0) {
   1deec:	2e00      	cmp	r6, #0
						OUTC('0');
   1deee:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
   1def2:	dc09      	bgt.n	1df08 <z_cbvprintf_impl+0xc48>
					OUTC(*cp++);
   1def4:	3701      	adds	r7, #1
   1def6:	eba8 0607 	sub.w	r6, r8, r7
   1defa:	e00e      	b.n	1df1a <z_cbvprintf_impl+0xc5a>
						OUTC('0');
   1defc:	4651      	mov	r1, sl
   1defe:	2030      	movs	r0, #48	; 0x30
   1df00:	47c8      	blx	r9
   1df02:	2800      	cmp	r0, #0
   1df04:	dae4      	bge.n	1ded0 <z_cbvprintf_impl+0xc10>
   1df06:	e7b7      	b.n	1de78 <z_cbvprintf_impl+0xbb8>
						OUTC('0');
   1df08:	4651      	mov	r1, sl
   1df0a:	2030      	movs	r0, #48	; 0x30
   1df0c:	47c8      	blx	r9
   1df0e:	3e01      	subs	r6, #1
   1df10:	e7ea      	b.n	1dee8 <z_cbvprintf_impl+0xc28>
					OUTC(*cp++);
   1df12:	4651      	mov	r1, sl
   1df14:	47c8      	blx	r9
   1df16:	2800      	cmp	r0, #0
   1df18:	dbae      	blt.n	1de78 <z_cbvprintf_impl+0xbb8>
   1df1a:	46b8      	mov	r8, r7
				while (isdigit((unsigned char)*cp)) {
   1df1c:	4a1c      	ldr	r2, [pc, #112]	; (1df90 <z_cbvprintf_impl+0xcd0>)
   1df1e:	19f3      	adds	r3, r6, r7
   1df20:	f817 0b01 	ldrb.w	r0, [r7], #1
   1df24:	5c12      	ldrb	r2, [r2, r0]
   1df26:	0752      	lsls	r2, r2, #29
   1df28:	d4f3      	bmi.n	1df12 <z_cbvprintf_impl+0xc52>
   1df2a:	e5b1      	b.n	1da90 <z_cbvprintf_impl+0x7d0>
				OUTC('0');
   1df2c:	4651      	mov	r1, sl
   1df2e:	2030      	movs	r0, #48	; 0x30
   1df30:	47c8      	blx	r9
   1df32:	2800      	cmp	r0, #0
   1df34:	dba0      	blt.n	1de78 <z_cbvprintf_impl+0xbb8>
   1df36:	3601      	adds	r6, #1
   1df38:	e5ad      	b.n	1da96 <z_cbvprintf_impl+0x7d6>
			if (conv->altform_0c | conv->altform_0) {
   1df3a:	06d8      	lsls	r0, r3, #27
   1df3c:	d401      	bmi.n	1df42 <z_cbvprintf_impl+0xc82>
   1df3e:	0719      	lsls	r1, r3, #28
   1df40:	d507      	bpl.n	1df52 <z_cbvprintf_impl+0xc92>
				OUTC('0');
   1df42:	4651      	mov	r1, sl
   1df44:	2030      	movs	r0, #48	; 0x30
   1df46:	9203      	str	r2, [sp, #12]
   1df48:	47c8      	blx	r9
   1df4a:	2800      	cmp	r0, #0
   1df4c:	db94      	blt.n	1de78 <z_cbvprintf_impl+0xbb8>
   1df4e:	9a03      	ldr	r2, [sp, #12]
   1df50:	3601      	adds	r6, #1
			if (conv->altform_0c) {
   1df52:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1df56:	06db      	lsls	r3, r3, #27
   1df58:	d508      	bpl.n	1df6c <z_cbvprintf_impl+0xcac>
				OUTC(conv->specifier);
   1df5a:	4651      	mov	r1, sl
   1df5c:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   1df60:	9203      	str	r2, [sp, #12]
   1df62:	47c8      	blx	r9
   1df64:	2800      	cmp	r0, #0
   1df66:	db87      	blt.n	1de78 <z_cbvprintf_impl+0xbb8>
   1df68:	9a03      	ldr	r2, [sp, #12]
   1df6a:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
   1df6c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1df6e:	4437      	add	r7, r6
   1df70:	1bbb      	subs	r3, r7, r6
   1df72:	2b00      	cmp	r3, #0
   1df74:	dc01      	bgt.n	1df7a <z_cbvprintf_impl+0xcba>
			OUTS(bps, bpe);
   1df76:	462b      	mov	r3, r5
   1df78:	e593      	b.n	1daa2 <z_cbvprintf_impl+0x7e2>
				OUTC('0');
   1df7a:	4651      	mov	r1, sl
   1df7c:	2030      	movs	r0, #48	; 0x30
   1df7e:	9203      	str	r2, [sp, #12]
   1df80:	47c8      	blx	r9
   1df82:	2800      	cmp	r0, #0
   1df84:	f6ff af78 	blt.w	1de78 <z_cbvprintf_impl+0xbb8>
   1df88:	9a03      	ldr	r2, [sp, #12]
   1df8a:	3601      	adds	r6, #1
   1df8c:	e7f0      	b.n	1df70 <z_cbvprintf_impl+0xcb0>
   1df8e:	bf00      	nop
   1df90:	00039f71 	.word	0x00039f71
   1df94:	00000000 	.word	0x00000000

0001df98 <parse_edrx>:

	return 0;
}

int parse_edrx(const char *at_response, struct lte_lc_edrx_cfg *cfg)
{
   1df98:	b5f0      	push	{r4, r5, r6, r7, lr}
   1df9a:	ed2d 8b02 	vpush	{d8}
	int err, tmp_int;
	uint8_t idx;
	struct at_param_list resp_list = {0};
   1df9e:	2500      	movs	r5, #0
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1dfa0:	2304      	movs	r3, #4
{
   1dfa2:	b08b      	sub	sp, #44	; 0x2c
   1dfa4:	460e      	mov	r6, r1
	float ptw_multiplier;

	if ((at_response == NULL) || (cfg == NULL)) {
   1dfa6:	4607      	mov	r7, r0
	struct at_param_list resp_list = {0};
   1dfa8:	e9cd 5508 	strd	r5, r5, [sp, #32]
	size_t len = sizeof(tmp_buf) - 1;
   1dfac:	9305      	str	r3, [sp, #20]
	if ((at_response == NULL) || (cfg == NULL)) {
   1dfae:	2800      	cmp	r0, #0
   1dfb0:	f000 80bc 	beq.w	1e12c <parse_edrx+0x194>
   1dfb4:	2900      	cmp	r1, #0
   1dfb6:	f000 80b9 	beq.w	1e12c <parse_edrx+0x194>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   1dfba:	2106      	movs	r1, #6
   1dfbc:	a808      	add	r0, sp, #32
   1dfbe:	f013 fdc3 	bl	31b48 <at_params_list_init>
	if (err) {
   1dfc2:	4604      	mov	r4, r0
   1dfc4:	b178      	cbz	r0, 1dfe6 <parse_edrx+0x4e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   1dfc6:	4b5e      	ldr	r3, [pc, #376]	; (1e140 <parse_edrx+0x1a8>)
   1dfc8:	9003      	str	r0, [sp, #12]
   1dfca:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1dfce:	2201      	movs	r2, #1
   1dfd0:	462b      	mov	r3, r5
   1dfd2:	4628      	mov	r0, r5
   1dfd4:	495b      	ldr	r1, [pc, #364]	; (1e144 <parse_edrx+0x1ac>)
   1dfd6:	9500      	str	r5, [sp, #0]
   1dfd8:	f013 ff0c 	bl	31df4 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   1dfdc:	4620      	mov	r0, r4
   1dfde:	b00b      	add	sp, #44	; 0x2c
   1dfe0:	ecbd 8b02 	vpop	{d8}
   1dfe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response,
   1dfe6:	4601      	mov	r1, r0
   1dfe8:	aa08      	add	r2, sp, #32
   1dfea:	4638      	mov	r0, r7
   1dfec:	f013 fd93 	bl	31b16 <at_parser_params_from_str>
	if (err) {
   1dff0:	4604      	mov	r4, r0
   1dff2:	b170      	cbz	r0, 1e012 <parse_edrx+0x7a>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   1dff4:	4b54      	ldr	r3, [pc, #336]	; (1e148 <parse_edrx+0x1b0>)
   1dff6:	9003      	str	r0, [sp, #12]
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1dff8:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1dffc:	462b      	mov	r3, r5
   1dffe:	9500      	str	r5, [sp, #0]
   1e000:	2201      	movs	r2, #1
   1e002:	4618      	mov	r0, r3
   1e004:	494f      	ldr	r1, [pc, #316]	; (1e144 <parse_edrx+0x1ac>)
   1e006:	f013 fef5 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   1e00a:	a808      	add	r0, sp, #32
   1e00c:	f013 fdc7 	bl	31b9e <at_params_list_free>
	return err;
   1e010:	e7e4      	b.n	1dfdc <parse_edrx+0x44>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1e012:	2103      	movs	r1, #3
   1e014:	ab05      	add	r3, sp, #20
   1e016:	aa06      	add	r2, sp, #24
   1e018:	a808      	add	r0, sp, #32
   1e01a:	f013 fe9e 	bl	31d5a <at_params_string_get>
	if (err) {
   1e01e:	4604      	mov	r4, r0
   1e020:	b110      	cbz	r0, 1e028 <parse_edrx+0x90>
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1e022:	4b4a      	ldr	r3, [pc, #296]	; (1e14c <parse_edrx+0x1b4>)
   1e024:	9003      	str	r0, [sp, #12]
   1e026:	e7e7      	b.n	1dff8 <parse_edrx+0x60>
	tmp_buf[len] = '\0';
   1e028:	9b05      	ldr	r3, [sp, #20]
   1e02a:	aa0a      	add	r2, sp, #40	; 0x28
   1e02c:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1e02e:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1e030:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   1e034:	2202      	movs	r2, #2
   1e036:	a806      	add	r0, sp, #24
   1e038:	f010 f8ee 	bl	2e218 <strtoul>
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1e03c:	2101      	movs	r1, #1
	idx = strtoul(tmp_buf, NULL, 2);
   1e03e:	b2c7      	uxtb	r7, r0
	err = at_params_int_get(&resp_list, AT_CEDRXP_ACTT_INDEX, &tmp_int);
   1e040:	aa04      	add	r2, sp, #16
   1e042:	a808      	add	r0, sp, #32
   1e044:	f013 fe5d 	bl	31d02 <at_params_int_get>
	if (err) {
   1e048:	4604      	mov	r4, r0
   1e04a:	b110      	cbz	r0, 1e052 <parse_edrx+0xba>
		LOG_ERR("Failed to get LTE mode, error: %d", err);
   1e04c:	4b40      	ldr	r3, [pc, #256]	; (1e150 <parse_edrx+0x1b8>)
   1e04e:	9003      	str	r0, [sp, #12]
   1e050:	e7d2      	b.n	1dff8 <parse_edrx+0x60>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e052:	9b04      	ldr	r3, [sp, #16]
   1e054:	2b04      	cmp	r3, #4
   1e056:	d01b      	beq.n	1e090 <parse_edrx+0xf8>
   1e058:	2b05      	cmp	r3, #5
   1e05a:	d00c      	beq.n	1e076 <parse_edrx+0xde>
		LOG_WRN("Active LTE mode could not be determined");
   1e05c:	4b3d      	ldr	r3, [pc, #244]	; (1e154 <parse_edrx+0x1bc>)
   1e05e:	2202      	movs	r2, #2
   1e060:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1e064:	4937      	ldr	r1, [pc, #220]	; (1e144 <parse_edrx+0x1ac>)
   1e066:	4603      	mov	r3, r0
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e068:	7030      	strb	r0, [r6, #0]
		LOG_WRN("Active LTE mode could not be determined");
   1e06a:	9000      	str	r0, [sp, #0]
   1e06c:	f013 fec2 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   1e070:	f06f 047f 	mvn.w	r4, #127	; 0x7f
		goto clean_exit;
   1e074:	e7c9      	b.n	1e00a <parse_edrx+0x72>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e076:	2309      	movs	r3, #9
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e078:	2f0f      	cmp	r7, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e07a:	7033      	strb	r3, [r6, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e07c:	d928      	bls.n	1e0d0 <parse_edrx+0x138>
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1e07e:	f06f 0415 	mvn.w	r4, #21
   1e082:	4b35      	ldr	r3, [pc, #212]	; (1e158 <parse_edrx+0x1c0>)
   1e084:	9403      	str	r4, [sp, #12]
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1e086:	9302      	str	r3, [sp, #8]
   1e088:	2300      	movs	r3, #0
   1e08a:	e9cd 3300 	strd	r3, r3, [sp]
   1e08e:	e7b7      	b.n	1e000 <parse_edrx+0x68>
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e090:	2307      	movs	r3, #7
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e092:	2f0f      	cmp	r7, #15
	cfg->mode = tmp_int == 4 ? LTE_LC_LTE_MODE_LTEM :
   1e094:	7033      	strb	r3, [r6, #0]
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1e096:	d8f2      	bhi.n	1e07e <parse_edrx+0xe6>
		*ptw_multiplier = 1.28;
   1e098:	ed9f 8a30 	vldr	s16, [pc, #192]	; 1e15c <parse_edrx+0x1c4>
		multiplier = edrx_lookup_ltem[idx];
   1e09c:	4b30      	ldr	r3, [pc, #192]	; (1e160 <parse_edrx+0x1c8>)
   1e09e:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e0a2:	b1d8      	cbz	r0, 1e0dc <parse_edrx+0x144>
   1e0a4:	f7fe faa2 	bl	1c5ec <__aeabi_i2d>
   1e0a8:	a323      	add	r3, pc, #140	; (adr r3, 1e138 <parse_edrx+0x1a0>)
   1e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e0ae:	f7fe fb07 	bl	1c6c0 <__aeabi_dmul>
   1e0b2:	f7fe fddd 	bl	1cc70 <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1e0b6:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e0b8:	6070      	str	r0, [r6, #4]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e0ba:	ab05      	add	r3, sp, #20
   1e0bc:	aa06      	add	r2, sp, #24
   1e0be:	a808      	add	r0, sp, #32
	len = sizeof(tmp_buf) - 1;
   1e0c0:	9105      	str	r1, [sp, #20]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1e0c2:	f013 fe4a 	bl	31d5a <at_params_string_get>
	if (err) {
   1e0c6:	4604      	mov	r4, r0
   1e0c8:	b150      	cbz	r0, 1e0e0 <parse_edrx+0x148>
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1e0ca:	4b26      	ldr	r3, [pc, #152]	; (1e164 <parse_edrx+0x1cc>)
   1e0cc:	9003      	str	r0, [sp, #12]
   1e0ce:	e7da      	b.n	1e086 <parse_edrx+0xee>
		multiplier = edrx_lookup_nbiot[idx];
   1e0d0:	4b25      	ldr	r3, [pc, #148]	; (1e168 <parse_edrx+0x1d0>)
		*ptw_multiplier = 2.56;
   1e0d2:	ed9f 8a26 	vldr	s16, [pc, #152]	; 1e16c <parse_edrx+0x1d4>
		multiplier = edrx_lookup_nbiot[idx];
   1e0d6:	f833 0017 	ldrh.w	r0, [r3, r7, lsl #1]
		break;
   1e0da:	e7e2      	b.n	1e0a2 <parse_edrx+0x10a>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1e0dc:	4824      	ldr	r0, [pc, #144]	; (1e170 <parse_edrx+0x1d8>)
   1e0de:	e7ea      	b.n	1e0b6 <parse_edrx+0x11e>
	tmp_buf[len] = '\0';
   1e0e0:	9b05      	ldr	r3, [sp, #20]
   1e0e2:	aa0a      	add	r2, sp, #40	; 0x28
   1e0e4:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1e0e6:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1e0e8:	f803 0c10 	strb.w	r0, [r3, #-16]
	idx = strtoul(tmp_buf, NULL, 2);
   1e0ec:	2202      	movs	r2, #2
   1e0ee:	a806      	add	r0, sp, #24
   1e0f0:	f010 f892 	bl	2e218 <strtoul>
   1e0f4:	b2c0      	uxtb	r0, r0
	if (idx > 15) {
   1e0f6:	280f      	cmp	r0, #15
   1e0f8:	d90d      	bls.n	1e116 <parse_edrx+0x17e>
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1e0fa:	4b1e      	ldr	r3, [pc, #120]	; (1e174 <parse_edrx+0x1dc>)
   1e0fc:	9003      	str	r0, [sp, #12]
   1e0fe:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1e102:	4620      	mov	r0, r4
   1e104:	4623      	mov	r3, r4
   1e106:	9400      	str	r4, [sp, #0]
   1e108:	2201      	movs	r2, #1
   1e10a:	490e      	ldr	r1, [pc, #56]	; (1e144 <parse_edrx+0x1ac>)
   1e10c:	f013 fe72 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
		err = -EINVAL;
   1e110:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   1e114:	e779      	b.n	1e00a <parse_edrx+0x72>
	idx += 1;
   1e116:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   1e118:	b2c0      	uxtb	r0, r0
   1e11a:	ee07 0a90 	vmov	s15, r0
   1e11e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1e122:	ee67 7a88 	vmul.f32	s15, s15, s16
   1e126:	edc6 7a02 	vstr	s15, [r6, #8]
	LOG_DBG("eDRX value for %s: %d.%02d, PTW: %d.%02d",
   1e12a:	e76e      	b.n	1e00a <parse_edrx+0x72>
		return -EINVAL;
   1e12c:	f06f 0415 	mvn.w	r4, #21
   1e130:	e754      	b.n	1dfdc <parse_edrx+0x44>
   1e132:	bf00      	nop
   1e134:	f3af 8000 	nop.w
   1e138:	47ae147b 	.word	0x47ae147b
   1e13c:	40247ae1 	.word	0x40247ae1
   1e140:	0003937b 	.word	0x0003937b
   1e144:	00034a98 	.word	0x00034a98
   1e148:	000393a4 	.word	0x000393a4
   1e14c:	000393d0 	.word	0x000393d0
   1e150:	000393fc 	.word	0x000393fc
   1e154:	0003941e 	.word	0x0003941e
   1e158:	00039446 	.word	0x00039446
   1e15c:	3fa3d70a 	.word	0x3fa3d70a
   1e160:	00035404 	.word	0x00035404
   1e164:	0003946a 	.word	0x0003946a
   1e168:	00035424 	.word	0x00035424
   1e16c:	4023d70a 	.word	0x4023d70a
   1e170:	40a3d70a 	.word	0x40a3d70a
   1e174:	00039495 	.word	0x00039495

0001e178 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e178:	4b17      	ldr	r3, [pc, #92]	; (1e1d8 <cJSON_CreateNumber+0x60>)
{
   1e17a:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e17c:	6818      	ldr	r0, [r3, #0]
{
   1e17e:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1e182:	f013 ff62 	bl	3204a <cJSON_New_Item.isra.0>
    if(item)
   1e186:	4604      	mov	r4, r0
   1e188:	b170      	cbz	r0, 1e1a8 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1e18a:	2308      	movs	r3, #8
        item->valuedouble = num;
   1e18c:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1e190:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1e192:	4639      	mov	r1, r7
   1e194:	a30e      	add	r3, pc, #56	; (adr r3, 1e1d0 <cJSON_CreateNumber+0x58>)
   1e196:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e19a:	4630      	mov	r0, r6
   1e19c:	f7fe fd16 	bl	1cbcc <__aeabi_dcmpge>
   1e1a0:	b120      	cbz	r0, 1e1ac <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1e1a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1e1a6:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1e1a8:	4620      	mov	r0, r4
   1e1aa:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1e1ac:	2200      	movs	r2, #0
   1e1ae:	4630      	mov	r0, r6
   1e1b0:	4639      	mov	r1, r7
   1e1b2:	4b0a      	ldr	r3, [pc, #40]	; (1e1dc <cJSON_CreateNumber+0x64>)
   1e1b4:	f7fe fd00 	bl	1cbb8 <__aeabi_dcmple>
   1e1b8:	b110      	cbz	r0, 1e1c0 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1e1ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1e1be:	e7f2      	b.n	1e1a6 <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1e1c0:	4630      	mov	r0, r6
   1e1c2:	4639      	mov	r1, r7
   1e1c4:	f7fe fd2c 	bl	1cc20 <__aeabi_d2iz>
   1e1c8:	6160      	str	r0, [r4, #20]
    return item;
   1e1ca:	e7ed      	b.n	1e1a8 <cJSON_CreateNumber+0x30>
   1e1cc:	f3af 8000 	nop.w
   1e1d0:	ffc00000 	.word	0xffc00000
   1e1d4:	41dfffff 	.word	0x41dfffff
   1e1d8:	2000c5e8 	.word	0x2000c5e8
   1e1dc:	c1e00000 	.word	0xc1e00000

0001e1e0 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1e1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e1e4:	ed2d 8b02 	vpush	{d8}
   1e1e8:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1e1ea:	ed9f 8b47 	vldr	d8, [pc, #284]	; 1e308 <work_queue_main+0x128>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1e1ee:	4e48      	ldr	r6, [pc, #288]	; (1e310 <work_queue_main+0x130>)
{
   1e1f0:	b084      	sub	sp, #16
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1e1f2:	f04f 0320 	mov.w	r3, #32
   1e1f6:	f3ef 8711 	mrs	r7, BASEPRI
   1e1fa:	f383 8812 	msr	BASEPRI_MAX, r3
   1e1fe:	f3bf 8f6f 	isb	sy
   1e202:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1e206:	b98d      	cbnz	r5, 1e22c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1e208:	2102      	movs	r1, #2
   1e20a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   1e20e:	f015 f94f 	bl	334b0 <flag_test_and_clear>
   1e212:	2800      	cmp	r0, #0
   1e214:	d135      	bne.n	1e282 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1e216:	2300      	movs	r3, #0
   1e218:	ed8d 8b00 	vstr	d8, [sp]
   1e21c:	4639      	mov	r1, r7
   1e21e:	9302      	str	r3, [sp, #8]
   1e220:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   1e224:	483b      	ldr	r0, [pc, #236]	; (1e314 <work_queue_main+0x134>)
   1e226:	f00e fe35 	bl	2ce94 <z_sched_wait>
			continue;
   1e22a:	e7e2      	b.n	1e1f2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e22c:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
   1e230:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e232:	4295      	cmp	r5, r2
	list->head = node;
   1e234:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e238:	d101      	bne.n	1e23e <work_queue_main+0x5e>
	list->tail = node;
   1e23a:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
   1e23e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   1e242:	f043 0302 	orr.w	r3, r3, #2
   1e246:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
   1e24a:	68eb      	ldr	r3, [r5, #12]
   1e24c:	f023 0304 	bic.w	r3, r3, #4
   1e250:	f043 0301 	orr.w	r3, r3, #1
   1e254:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1e256:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1e258:	f387 8811 	msr	BASEPRI, r7
   1e25c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1e260:	4628      	mov	r0, r5
   1e262:	4798      	blx	r3
	__asm__ volatile(
   1e264:	f04f 0320 	mov.w	r3, #32
   1e268:	f3ef 8811 	mrs	r8, BASEPRI
   1e26c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e270:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1e274:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e276:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1e278:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1e27c:	d40b      	bmi.n	1e296 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   1e27e:	60ea      	str	r2, [r5, #12]
   1e280:	e00e      	b.n	1e2a0 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1e282:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1e286:	2200      	movs	r2, #0
   1e288:	2101      	movs	r1, #1
   1e28a:	4628      	mov	r0, r5
   1e28c:	f015 fa9d 	bl	337ca <z_sched_wake>
   1e290:	2800      	cmp	r0, #0
   1e292:	d1f8      	bne.n	1e286 <work_queue_main+0xa6>
   1e294:	e7bf      	b.n	1e216 <work_queue_main+0x36>
	return list->head;
   1e296:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1e298:	f023 0303 	bic.w	r3, r3, #3
   1e29c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1e29e:	b970      	cbnz	r0, 1e2be <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   1e2a0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   1e2a4:	f023 0302 	bic.w	r3, r3, #2
   1e2a8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__asm__ volatile(
   1e2ac:	f388 8811 	msr	BASEPRI, r8
   1e2b0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1e2b4:	05d8      	lsls	r0, r3, #23
   1e2b6:	d49c      	bmi.n	1e1f2 <work_queue_main+0x12>
		(void) arch_syscall_invoke0(K_SYSCALL_K_YIELD);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_yield();
   1e2b8:	f00e fce4 	bl	2cc84 <z_impl_k_yield>
}
   1e2bc:	e799      	b.n	1e1f2 <work_queue_main+0x12>
	return node->next;
   1e2be:	2700      	movs	r7, #0
	parent->next = child;
   1e2c0:	46ba      	mov	sl, r7
	return node->next;
   1e2c2:	f8d0 9000 	ldr.w	r9, [r0]
		if (wc->work == work) {
   1e2c6:	6843      	ldr	r3, [r0, #4]
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1e2c8:	4602      	mov	r2, r0
		if (wc->work == work) {
   1e2ca:	429d      	cmp	r5, r3
   1e2cc:	d10b      	bne.n	1e2e6 <work_queue_main+0x106>
   1e2ce:	6802      	ldr	r2, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   1e2d0:	b98f      	cbnz	r7, 1e2f6 <work_queue_main+0x116>
   1e2d2:	6873      	ldr	r3, [r6, #4]
	list->head = node;
   1e2d4:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e2d6:	4283      	cmp	r3, r0
   1e2d8:	d100      	bne.n	1e2dc <work_queue_main+0xfc>
	list->tail = node;
   1e2da:	6072      	str	r2, [r6, #4]
	parent->next = child;
   1e2dc:	f840 ab08 	str.w	sl, [r0], #8
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1e2e0:	f00e f970 	bl	2c5c4 <z_impl_k_sem_give>
}
   1e2e4:	463a      	mov	r2, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1e2e6:	f1b9 0f00 	cmp.w	r9, #0
   1e2ea:	d0d9      	beq.n	1e2a0 <work_queue_main+0xc0>
	return node->next;
   1e2ec:	4648      	mov	r0, r9
   1e2ee:	4617      	mov	r7, r2
   1e2f0:	f8d9 9000 	ldr.w	r9, [r9]
   1e2f4:	e7e7      	b.n	1e2c6 <work_queue_main+0xe6>
	return list->tail;
   1e2f6:	6873      	ldr	r3, [r6, #4]
	parent->next = child;
   1e2f8:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e2fa:	4298      	cmp	r0, r3
	list->tail = node;
   1e2fc:	bf08      	it	eq
   1e2fe:	6077      	streq	r7, [r6, #4]
}
   1e300:	e7ec      	b.n	1e2dc <work_queue_main+0xfc>
   1e302:	bf00      	nop
   1e304:	f3af 8000 	nop.w
   1e308:	ffffffff 	.word	0xffffffff
   1e30c:	ffffffff 	.word	0xffffffff
   1e310:	2000d8e0 	.word	0x2000d8e0
   1e314:	2001079a 	.word	0x2001079a

0001e318 <_dtoa_r>:
   1e318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e31c:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1e31e:	4604      	mov	r4, r0
   1e320:	ee10 aa10 	vmov	sl, s0
   1e324:	ed2d 8b04 	vpush	{d8-d9}
   1e328:	b093      	sub	sp, #76	; 0x4c
   1e32a:	ec57 6b10 	vmov	r6, r7, d0
   1e32e:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   1e332:	46bb      	mov	fp, r7
   1e334:	9106      	str	r1, [sp, #24]
   1e336:	9209      	str	r2, [sp, #36]	; 0x24
   1e338:	930c      	str	r3, [sp, #48]	; 0x30
   1e33a:	b975      	cbnz	r5, 1e35a <_dtoa_r+0x42>
   1e33c:	2010      	movs	r0, #16
   1e33e:	f00e fff1 	bl	2d324 <malloc>
   1e342:	4602      	mov	r2, r0
   1e344:	6260      	str	r0, [r4, #36]	; 0x24
   1e346:	b920      	cbnz	r0, 1e352 <_dtoa_r+0x3a>
   1e348:	4ba7      	ldr	r3, [pc, #668]	; (1e5e8 <_flash_used+0x24>)
   1e34a:	21ea      	movs	r1, #234	; 0xea
   1e34c:	48a7      	ldr	r0, [pc, #668]	; (1e5ec <_flash_used+0x28>)
   1e34e:	f011 f96b 	bl	2f628 <__assert_func>
   1e352:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1e356:	6005      	str	r5, [r0, #0]
   1e358:	60c5      	str	r5, [r0, #12]
   1e35a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e35c:	6819      	ldr	r1, [r3, #0]
   1e35e:	b151      	cbz	r1, 1e376 <_dtoa_r+0x5e>
   1e360:	685a      	ldr	r2, [r3, #4]
   1e362:	2301      	movs	r3, #1
   1e364:	4620      	mov	r0, r4
   1e366:	4093      	lsls	r3, r2
   1e368:	604a      	str	r2, [r1, #4]
   1e36a:	608b      	str	r3, [r1, #8]
   1e36c:	f010 fa9e 	bl	2e8ac <_Bfree>
   1e370:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e372:	2200      	movs	r2, #0
   1e374:	601a      	str	r2, [r3, #0]
   1e376:	1e3b      	subs	r3, r7, #0
   1e378:	bfad      	iteet	ge
   1e37a:	2300      	movge	r3, #0
   1e37c:	2201      	movlt	r2, #1
   1e37e:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
   1e382:	f8c8 3000 	strge.w	r3, [r8]
   1e386:	4b9a      	ldr	r3, [pc, #616]	; (1e5f0 <_flash_used+0x2c>)
   1e388:	bfb8      	it	lt
   1e38a:	f8c8 2000 	strlt.w	r2, [r8]
   1e38e:	ea33 030b 	bics.w	r3, r3, fp
   1e392:	d11b      	bne.n	1e3cc <_dtoa_r+0xb4>
   1e394:	f242 730f 	movw	r3, #9999	; 0x270f
   1e398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1e39a:	6013      	str	r3, [r2, #0]
   1e39c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1e3a0:	4333      	orrs	r3, r6
   1e3a2:	f000 858f 	beq.w	1eec4 <_flash_used+0x900>
   1e3a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1e3a8:	b963      	cbnz	r3, 1e3c4 <_dtoa_r+0xac>
   1e3aa:	4b92      	ldr	r3, [pc, #584]	; (1e5f4 <_flash_used+0x30>)
   1e3ac:	e022      	b.n	1e3f4 <_dtoa_r+0xdc>
   1e3ae:	4b92      	ldr	r3, [pc, #584]	; (1e5f8 <_flash_used+0x34>)
   1e3b0:	9301      	str	r3, [sp, #4]
   1e3b2:	3308      	adds	r3, #8
   1e3b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1e3b6:	6013      	str	r3, [r2, #0]
   1e3b8:	9801      	ldr	r0, [sp, #4]
   1e3ba:	b013      	add	sp, #76	; 0x4c
   1e3bc:	ecbd 8b04 	vpop	{d8-d9}
   1e3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3c4:	4b8b      	ldr	r3, [pc, #556]	; (1e5f4 <_flash_used+0x30>)
   1e3c6:	9301      	str	r3, [sp, #4]
   1e3c8:	3303      	adds	r3, #3
   1e3ca:	e7f3      	b.n	1e3b4 <_dtoa_r+0x9c>
   1e3cc:	2200      	movs	r2, #0
   1e3ce:	2300      	movs	r3, #0
   1e3d0:	4650      	mov	r0, sl
   1e3d2:	4659      	mov	r1, fp
   1e3d4:	f7fe fbdc 	bl	1cb90 <__aeabi_dcmpeq>
   1e3d8:	4680      	mov	r8, r0
   1e3da:	ec4b ab19 	vmov	d9, sl, fp
   1e3de:	b158      	cbz	r0, 1e3f8 <_dtoa_r+0xe0>
   1e3e0:	2301      	movs	r3, #1
   1e3e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1e3e4:	6013      	str	r3, [r2, #0]
   1e3e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1e3e8:	2b00      	cmp	r3, #0
   1e3ea:	f000 8568 	beq.w	1eebe <_flash_used+0x8fa>
   1e3ee:	4883      	ldr	r0, [pc, #524]	; (1e5fc <_flash_used+0x38>)
   1e3f0:	6018      	str	r0, [r3, #0]
   1e3f2:	1e43      	subs	r3, r0, #1
   1e3f4:	9301      	str	r3, [sp, #4]
   1e3f6:	e7df      	b.n	1e3b8 <_dtoa_r+0xa0>
   1e3f8:	f3cb 550a 	ubfx	r5, fp, #20, #11
   1e3fc:	aa10      	add	r2, sp, #64	; 0x40
   1e3fe:	a911      	add	r1, sp, #68	; 0x44
   1e400:	4620      	mov	r0, r4
   1e402:	ec4b ab10 	vmov	d0, sl, fp
   1e406:	f010 fcd3 	bl	2edb0 <__d2b>
   1e40a:	ee08 0a10 	vmov	s16, r0
   1e40e:	2d00      	cmp	r5, #0
   1e410:	f000 8082 	beq.w	1e518 <_dtoa_r+0x200>
   1e414:	ee19 3a90 	vmov	r3, s19
   1e418:	4656      	mov	r6, sl
   1e41a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1e41e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   1e422:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1e426:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1e42a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   1e42e:	2200      	movs	r2, #0
   1e430:	4b73      	ldr	r3, [pc, #460]	; (1e600 <_flash_used+0x3c>)
   1e432:	4630      	mov	r0, r6
   1e434:	4639      	mov	r1, r7
   1e436:	f7fd ff8b 	bl	1c350 <__aeabi_dsub>
   1e43a:	a365      	add	r3, pc, #404	; (adr r3, 1e5d0 <_flash_used+0xc>)
   1e43c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e440:	f7fe f93e 	bl	1c6c0 <__aeabi_dmul>
   1e444:	a364      	add	r3, pc, #400	; (adr r3, 1e5d8 <_flash_used+0x14>)
   1e446:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e44a:	f7fd ff83 	bl	1c354 <__adddf3>
   1e44e:	4606      	mov	r6, r0
   1e450:	460f      	mov	r7, r1
   1e452:	4628      	mov	r0, r5
   1e454:	f7fe f8ca 	bl	1c5ec <__aeabi_i2d>
   1e458:	a361      	add	r3, pc, #388	; (adr r3, 1e5e0 <_flash_used+0x1c>)
   1e45a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e45e:	f7fe f92f 	bl	1c6c0 <__aeabi_dmul>
   1e462:	4602      	mov	r2, r0
   1e464:	460b      	mov	r3, r1
   1e466:	4630      	mov	r0, r6
   1e468:	4639      	mov	r1, r7
   1e46a:	f7fd ff73 	bl	1c354 <__adddf3>
   1e46e:	4606      	mov	r6, r0
   1e470:	460f      	mov	r7, r1
   1e472:	f7fe fbd5 	bl	1cc20 <__aeabi_d2iz>
   1e476:	2200      	movs	r2, #0
   1e478:	9000      	str	r0, [sp, #0]
   1e47a:	2300      	movs	r3, #0
   1e47c:	4630      	mov	r0, r6
   1e47e:	4639      	mov	r1, r7
   1e480:	f7fe fb90 	bl	1cba4 <__aeabi_dcmplt>
   1e484:	b150      	cbz	r0, 1e49c <_dtoa_r+0x184>
   1e486:	9800      	ldr	r0, [sp, #0]
   1e488:	f7fe f8b0 	bl	1c5ec <__aeabi_i2d>
   1e48c:	4632      	mov	r2, r6
   1e48e:	463b      	mov	r3, r7
   1e490:	f7fe fb7e 	bl	1cb90 <__aeabi_dcmpeq>
   1e494:	b910      	cbnz	r0, 1e49c <_dtoa_r+0x184>
   1e496:	9b00      	ldr	r3, [sp, #0]
   1e498:	3b01      	subs	r3, #1
   1e49a:	9300      	str	r3, [sp, #0]
   1e49c:	9b00      	ldr	r3, [sp, #0]
   1e49e:	2b16      	cmp	r3, #22
   1e4a0:	d859      	bhi.n	1e556 <_dtoa_r+0x23e>
   1e4a2:	9a00      	ldr	r2, [sp, #0]
   1e4a4:	4b57      	ldr	r3, [pc, #348]	; (1e604 <_flash_used+0x40>)
   1e4a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1e4aa:	ec51 0b19 	vmov	r0, r1, d9
   1e4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e4b2:	f7fe fb77 	bl	1cba4 <__aeabi_dcmplt>
   1e4b6:	2800      	cmp	r0, #0
   1e4b8:	d04f      	beq.n	1e55a <_dtoa_r+0x242>
   1e4ba:	9b00      	ldr	r3, [sp, #0]
   1e4bc:	3b01      	subs	r3, #1
   1e4be:	9300      	str	r3, [sp, #0]
   1e4c0:	2300      	movs	r3, #0
   1e4c2:	930b      	str	r3, [sp, #44]	; 0x2c
   1e4c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e4c6:	1b5d      	subs	r5, r3, r5
   1e4c8:	1e6b      	subs	r3, r5, #1
   1e4ca:	9305      	str	r3, [sp, #20]
   1e4cc:	bf49      	itett	mi
   1e4ce:	f1c5 0301 	rsbmi	r3, r5, #1
   1e4d2:	2300      	movpl	r3, #0
   1e4d4:	9304      	strmi	r3, [sp, #16]
   1e4d6:	2300      	movmi	r3, #0
   1e4d8:	bf54      	ite	pl
   1e4da:	9304      	strpl	r3, [sp, #16]
   1e4dc:	9305      	strmi	r3, [sp, #20]
   1e4de:	9b00      	ldr	r3, [sp, #0]
   1e4e0:	2b00      	cmp	r3, #0
   1e4e2:	db3c      	blt.n	1e55e <_dtoa_r+0x246>
   1e4e4:	9b05      	ldr	r3, [sp, #20]
   1e4e6:	9a00      	ldr	r2, [sp, #0]
   1e4e8:	4413      	add	r3, r2
   1e4ea:	920a      	str	r2, [sp, #40]	; 0x28
   1e4ec:	9305      	str	r3, [sp, #20]
   1e4ee:	2300      	movs	r3, #0
   1e4f0:	9307      	str	r3, [sp, #28]
   1e4f2:	9b06      	ldr	r3, [sp, #24]
   1e4f4:	2b09      	cmp	r3, #9
   1e4f6:	f200 8089 	bhi.w	1e60c <_flash_used+0x48>
   1e4fa:	2b05      	cmp	r3, #5
   1e4fc:	bfc5      	ittet	gt
   1e4fe:	3b04      	subgt	r3, #4
   1e500:	2500      	movgt	r5, #0
   1e502:	2501      	movle	r5, #1
   1e504:	9306      	strgt	r3, [sp, #24]
   1e506:	9b06      	ldr	r3, [sp, #24]
   1e508:	3b02      	subs	r3, #2
   1e50a:	2b03      	cmp	r3, #3
   1e50c:	f200 8089 	bhi.w	1e622 <_flash_used+0x5e>
   1e510:	e8df f003 	tbb	[pc, r3]
   1e514:	5a393b2e 	.word	0x5a393b2e
   1e518:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
   1e51c:	441d      	add	r5, r3
   1e51e:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1e522:	2b20      	cmp	r3, #32
   1e524:	bfc6      	itte	gt
   1e526:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   1e52a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   1e52e:	f1c3 0320 	rsble	r3, r3, #32
   1e532:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1e536:	bfc5      	ittet	gt
   1e538:	fa0b f303 	lslgt.w	r3, fp, r3
   1e53c:	fa26 f000 	lsrgt.w	r0, r6, r0
   1e540:	fa06 f003 	lslle.w	r0, r6, r3
   1e544:	4318      	orrgt	r0, r3
   1e546:	f7fe f841 	bl	1c5cc <__aeabi_ui2d>
   1e54a:	2301      	movs	r3, #1
   1e54c:	4606      	mov	r6, r0
   1e54e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1e552:	930e      	str	r3, [sp, #56]	; 0x38
   1e554:	e76b      	b.n	1e42e <_dtoa_r+0x116>
   1e556:	2301      	movs	r3, #1
   1e558:	e7b3      	b.n	1e4c2 <_dtoa_r+0x1aa>
   1e55a:	900b      	str	r0, [sp, #44]	; 0x2c
   1e55c:	e7b2      	b.n	1e4c4 <_dtoa_r+0x1ac>
   1e55e:	9b04      	ldr	r3, [sp, #16]
   1e560:	9a00      	ldr	r2, [sp, #0]
   1e562:	1a9b      	subs	r3, r3, r2
   1e564:	9304      	str	r3, [sp, #16]
   1e566:	4253      	negs	r3, r2
   1e568:	9307      	str	r3, [sp, #28]
   1e56a:	2300      	movs	r3, #0
   1e56c:	930a      	str	r3, [sp, #40]	; 0x28
   1e56e:	e7c0      	b.n	1e4f2 <_dtoa_r+0x1da>
   1e570:	2300      	movs	r3, #0
   1e572:	9308      	str	r3, [sp, #32]
   1e574:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e576:	2b00      	cmp	r3, #0
   1e578:	dc56      	bgt.n	1e628 <_flash_used+0x64>
   1e57a:	2301      	movs	r3, #1
   1e57c:	461a      	mov	r2, r3
   1e57e:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1e582:	9209      	str	r2, [sp, #36]	; 0x24
   1e584:	e00c      	b.n	1e5a0 <_dtoa_r+0x288>
   1e586:	2301      	movs	r3, #1
   1e588:	e7f3      	b.n	1e572 <_dtoa_r+0x25a>
   1e58a:	2300      	movs	r3, #0
   1e58c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1e58e:	9308      	str	r3, [sp, #32]
   1e590:	9b00      	ldr	r3, [sp, #0]
   1e592:	4413      	add	r3, r2
   1e594:	9302      	str	r3, [sp, #8]
   1e596:	3301      	adds	r3, #1
   1e598:	2b01      	cmp	r3, #1
   1e59a:	9303      	str	r3, [sp, #12]
   1e59c:	bfb8      	it	lt
   1e59e:	2301      	movlt	r3, #1
   1e5a0:	2200      	movs	r2, #0
   1e5a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1e5a4:	6042      	str	r2, [r0, #4]
   1e5a6:	2204      	movs	r2, #4
   1e5a8:	f102 0614 	add.w	r6, r2, #20
   1e5ac:	6841      	ldr	r1, [r0, #4]
   1e5ae:	429e      	cmp	r6, r3
   1e5b0:	d93e      	bls.n	1e630 <_flash_used+0x6c>
   1e5b2:	4620      	mov	r0, r4
   1e5b4:	f010 f93a 	bl	2e82c <_Balloc>
   1e5b8:	9001      	str	r0, [sp, #4]
   1e5ba:	2800      	cmp	r0, #0
   1e5bc:	d13c      	bne.n	1e638 <_flash_used+0x74>
   1e5be:	4b12      	ldr	r3, [pc, #72]	; (1e608 <_flash_used+0x44>)
   1e5c0:	4602      	mov	r2, r0
   1e5c2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   1e5c6:	e6c1      	b.n	1e34c <_dtoa_r+0x34>
   1e5c8:	2301      	movs	r3, #1
   1e5ca:	e7df      	b.n	1e58c <_dtoa_r+0x274>
   1e5cc:	f3af 8000 	nop.w
   1e5d0:	636f4361 	.word	0x636f4361
   1e5d4:	3fd287a7 	.word	0x3fd287a7
   1e5d8:	8b60c8b3 	.word	0x8b60c8b3
   1e5dc:	3fc68a28 	.word	0x3fc68a28
   1e5e0:	509f79fb 	.word	0x509f79fb
   1e5e4:	3fd34413 	.word	0x3fd34413
   1e5e8:	0003a0bd 	.word	0x0003a0bd
   1e5ec:	0003a0d4 	.word	0x0003a0d4
   1e5f0:	7ff00000 	.word	0x7ff00000
   1e5f4:	0003a0b9 	.word	0x0003a0b9
   1e5f8:	0003a0b0 	.word	0x0003a0b0
   1e5fc:	0003930a 	.word	0x0003930a
   1e600:	3ff80000 	.word	0x3ff80000
   1e604:	00034ba0 	.word	0x00034ba0
   1e608:	0003a130 	.word	0x0003a130
   1e60c:	2501      	movs	r5, #1
   1e60e:	2300      	movs	r3, #0
   1e610:	9508      	str	r5, [sp, #32]
   1e612:	9306      	str	r3, [sp, #24]
   1e614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e618:	2200      	movs	r2, #0
   1e61a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1e61e:	2312      	movs	r3, #18
   1e620:	e7af      	b.n	1e582 <_dtoa_r+0x26a>
   1e622:	2301      	movs	r3, #1
   1e624:	9308      	str	r3, [sp, #32]
   1e626:	e7f5      	b.n	1e614 <_flash_used+0x50>
   1e628:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e62a:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1e62e:	e7b7      	b.n	1e5a0 <_dtoa_r+0x288>
   1e630:	3101      	adds	r1, #1
   1e632:	0052      	lsls	r2, r2, #1
   1e634:	6041      	str	r1, [r0, #4]
   1e636:	e7b7      	b.n	1e5a8 <_dtoa_r+0x290>
   1e638:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e63a:	9a01      	ldr	r2, [sp, #4]
   1e63c:	601a      	str	r2, [r3, #0]
   1e63e:	9b03      	ldr	r3, [sp, #12]
   1e640:	2b0e      	cmp	r3, #14
   1e642:	f200 809d 	bhi.w	1e780 <_flash_used+0x1bc>
   1e646:	2d00      	cmp	r5, #0
   1e648:	f000 809a 	beq.w	1e780 <_flash_used+0x1bc>
   1e64c:	9b00      	ldr	r3, [sp, #0]
   1e64e:	2b00      	cmp	r3, #0
   1e650:	dd32      	ble.n	1e6b8 <_flash_used+0xf4>
   1e652:	f003 030f 	and.w	r3, r3, #15
   1e656:	4ab6      	ldr	r2, [pc, #728]	; (1e930 <_flash_used+0x36c>)
   1e658:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1e65c:	e9d3 8900 	ldrd	r8, r9, [r3]
   1e660:	9b00      	ldr	r3, [sp, #0]
   1e662:	05d8      	lsls	r0, r3, #23
   1e664:	ea4f 1723 	mov.w	r7, r3, asr #4
   1e668:	d516      	bpl.n	1e698 <_flash_used+0xd4>
   1e66a:	4bb2      	ldr	r3, [pc, #712]	; (1e934 <_flash_used+0x370>)
   1e66c:	f007 070f 	and.w	r7, r7, #15
   1e670:	2503      	movs	r5, #3
   1e672:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1e676:	ec51 0b19 	vmov	r0, r1, d9
   1e67a:	f7fe f94b 	bl	1c914 <__aeabi_ddiv>
   1e67e:	4682      	mov	sl, r0
   1e680:	468b      	mov	fp, r1
   1e682:	4eac      	ldr	r6, [pc, #688]	; (1e934 <_flash_used+0x370>)
   1e684:	b957      	cbnz	r7, 1e69c <_flash_used+0xd8>
   1e686:	4642      	mov	r2, r8
   1e688:	464b      	mov	r3, r9
   1e68a:	4650      	mov	r0, sl
   1e68c:	4659      	mov	r1, fp
   1e68e:	f7fe f941 	bl	1c914 <__aeabi_ddiv>
   1e692:	4682      	mov	sl, r0
   1e694:	468b      	mov	fp, r1
   1e696:	e028      	b.n	1e6ea <_flash_used+0x126>
   1e698:	2502      	movs	r5, #2
   1e69a:	e7f2      	b.n	1e682 <_flash_used+0xbe>
   1e69c:	07f9      	lsls	r1, r7, #31
   1e69e:	d508      	bpl.n	1e6b2 <_flash_used+0xee>
   1e6a0:	4640      	mov	r0, r8
   1e6a2:	4649      	mov	r1, r9
   1e6a4:	3501      	adds	r5, #1
   1e6a6:	e9d6 2300 	ldrd	r2, r3, [r6]
   1e6aa:	f7fe f809 	bl	1c6c0 <__aeabi_dmul>
   1e6ae:	4680      	mov	r8, r0
   1e6b0:	4689      	mov	r9, r1
   1e6b2:	107f      	asrs	r7, r7, #1
   1e6b4:	3608      	adds	r6, #8
   1e6b6:	e7e5      	b.n	1e684 <_flash_used+0xc0>
   1e6b8:	f000 809b 	beq.w	1e7f2 <_flash_used+0x22e>
   1e6bc:	9b00      	ldr	r3, [sp, #0]
   1e6be:	2502      	movs	r5, #2
   1e6c0:	4f9c      	ldr	r7, [pc, #624]	; (1e934 <_flash_used+0x370>)
   1e6c2:	425e      	negs	r6, r3
   1e6c4:	4b9a      	ldr	r3, [pc, #616]	; (1e930 <_flash_used+0x36c>)
   1e6c6:	f006 020f 	and.w	r2, r6, #15
   1e6ca:	1136      	asrs	r6, r6, #4
   1e6cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1e6d0:	ec51 0b19 	vmov	r0, r1, d9
   1e6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6d8:	f7fd fff2 	bl	1c6c0 <__aeabi_dmul>
   1e6dc:	2300      	movs	r3, #0
   1e6de:	4682      	mov	sl, r0
   1e6e0:	468b      	mov	fp, r1
   1e6e2:	2e00      	cmp	r6, #0
   1e6e4:	d17a      	bne.n	1e7dc <_flash_used+0x218>
   1e6e6:	2b00      	cmp	r3, #0
   1e6e8:	d1d3      	bne.n	1e692 <_flash_used+0xce>
   1e6ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e6ec:	2b00      	cmp	r3, #0
   1e6ee:	f000 8082 	beq.w	1e7f6 <_flash_used+0x232>
   1e6f2:	2200      	movs	r2, #0
   1e6f4:	4b90      	ldr	r3, [pc, #576]	; (1e938 <_flash_used+0x374>)
   1e6f6:	4650      	mov	r0, sl
   1e6f8:	4659      	mov	r1, fp
   1e6fa:	f7fe fa53 	bl	1cba4 <__aeabi_dcmplt>
   1e6fe:	2800      	cmp	r0, #0
   1e700:	d079      	beq.n	1e7f6 <_flash_used+0x232>
   1e702:	9b03      	ldr	r3, [sp, #12]
   1e704:	2b00      	cmp	r3, #0
   1e706:	d076      	beq.n	1e7f6 <_flash_used+0x232>
   1e708:	9b02      	ldr	r3, [sp, #8]
   1e70a:	2b00      	cmp	r3, #0
   1e70c:	dd36      	ble.n	1e77c <_flash_used+0x1b8>
   1e70e:	9b00      	ldr	r3, [sp, #0]
   1e710:	4650      	mov	r0, sl
   1e712:	4659      	mov	r1, fp
   1e714:	2200      	movs	r2, #0
   1e716:	1e5f      	subs	r7, r3, #1
   1e718:	4b88      	ldr	r3, [pc, #544]	; (1e93c <_flash_used+0x378>)
   1e71a:	f7fd ffd1 	bl	1c6c0 <__aeabi_dmul>
   1e71e:	3501      	adds	r5, #1
   1e720:	4682      	mov	sl, r0
   1e722:	468b      	mov	fp, r1
   1e724:	9e02      	ldr	r6, [sp, #8]
   1e726:	4628      	mov	r0, r5
   1e728:	46d0      	mov	r8, sl
   1e72a:	f7fd ff5f 	bl	1c5ec <__aeabi_i2d>
   1e72e:	4652      	mov	r2, sl
   1e730:	465b      	mov	r3, fp
   1e732:	46d9      	mov	r9, fp
   1e734:	f7fd ffc4 	bl	1c6c0 <__aeabi_dmul>
   1e738:	2200      	movs	r2, #0
   1e73a:	4b81      	ldr	r3, [pc, #516]	; (1e940 <_flash_used+0x37c>)
   1e73c:	f7fd fe0a 	bl	1c354 <__adddf3>
   1e740:	4682      	mov	sl, r0
   1e742:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
   1e746:	2e00      	cmp	r6, #0
   1e748:	d158      	bne.n	1e7fc <_flash_used+0x238>
   1e74a:	2200      	movs	r2, #0
   1e74c:	4b7d      	ldr	r3, [pc, #500]	; (1e944 <_flash_used+0x380>)
   1e74e:	4640      	mov	r0, r8
   1e750:	4649      	mov	r1, r9
   1e752:	f7fd fdfd 	bl	1c350 <__aeabi_dsub>
   1e756:	4652      	mov	r2, sl
   1e758:	465b      	mov	r3, fp
   1e75a:	4680      	mov	r8, r0
   1e75c:	4689      	mov	r9, r1
   1e75e:	f7fe fa3f 	bl	1cbe0 <__aeabi_dcmpgt>
   1e762:	2800      	cmp	r0, #0
   1e764:	f040 8293 	bne.w	1ec8e <_flash_used+0x6ca>
   1e768:	4652      	mov	r2, sl
   1e76a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1e76e:	4640      	mov	r0, r8
   1e770:	4649      	mov	r1, r9
   1e772:	f7fe fa17 	bl	1cba4 <__aeabi_dcmplt>
   1e776:	2800      	cmp	r0, #0
   1e778:	f040 8287 	bne.w	1ec8a <_flash_used+0x6c6>
   1e77c:	ec5b ab19 	vmov	sl, fp, d9
   1e780:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1e782:	2b00      	cmp	r3, #0
   1e784:	f2c0 8148 	blt.w	1ea18 <_flash_used+0x454>
   1e788:	9a00      	ldr	r2, [sp, #0]
   1e78a:	2a0e      	cmp	r2, #14
   1e78c:	f300 8144 	bgt.w	1ea18 <_flash_used+0x454>
   1e790:	4b67      	ldr	r3, [pc, #412]	; (1e930 <_flash_used+0x36c>)
   1e792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1e796:	e9d3 8900 	ldrd	r8, r9, [r3]
   1e79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e79c:	2b00      	cmp	r3, #0
   1e79e:	f280 80d5 	bge.w	1e94c <_flash_used+0x388>
   1e7a2:	9b03      	ldr	r3, [sp, #12]
   1e7a4:	2b00      	cmp	r3, #0
   1e7a6:	f300 80d1 	bgt.w	1e94c <_flash_used+0x388>
   1e7aa:	f040 826d 	bne.w	1ec88 <_flash_used+0x6c4>
   1e7ae:	2200      	movs	r2, #0
   1e7b0:	4b64      	ldr	r3, [pc, #400]	; (1e944 <_flash_used+0x380>)
   1e7b2:	4640      	mov	r0, r8
   1e7b4:	4649      	mov	r1, r9
   1e7b6:	f7fd ff83 	bl	1c6c0 <__aeabi_dmul>
   1e7ba:	4652      	mov	r2, sl
   1e7bc:	465b      	mov	r3, fp
   1e7be:	f7fe fa05 	bl	1cbcc <__aeabi_dcmpge>
   1e7c2:	9e03      	ldr	r6, [sp, #12]
   1e7c4:	4637      	mov	r7, r6
   1e7c6:	2800      	cmp	r0, #0
   1e7c8:	f040 8243 	bne.w	1ec52 <_flash_used+0x68e>
   1e7cc:	2331      	movs	r3, #49	; 0x31
   1e7ce:	9d01      	ldr	r5, [sp, #4]
   1e7d0:	f805 3b01 	strb.w	r3, [r5], #1
   1e7d4:	9b00      	ldr	r3, [sp, #0]
   1e7d6:	3301      	adds	r3, #1
   1e7d8:	9300      	str	r3, [sp, #0]
   1e7da:	e23e      	b.n	1ec5a <_flash_used+0x696>
   1e7dc:	07f2      	lsls	r2, r6, #31
   1e7de:	d505      	bpl.n	1e7ec <_flash_used+0x228>
   1e7e0:	3501      	adds	r5, #1
   1e7e2:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e7e6:	f7fd ff6b 	bl	1c6c0 <__aeabi_dmul>
   1e7ea:	2301      	movs	r3, #1
   1e7ec:	1076      	asrs	r6, r6, #1
   1e7ee:	3708      	adds	r7, #8
   1e7f0:	e777      	b.n	1e6e2 <_flash_used+0x11e>
   1e7f2:	2502      	movs	r5, #2
   1e7f4:	e779      	b.n	1e6ea <_flash_used+0x126>
   1e7f6:	9f00      	ldr	r7, [sp, #0]
   1e7f8:	9e03      	ldr	r6, [sp, #12]
   1e7fa:	e794      	b.n	1e726 <_flash_used+0x162>
   1e7fc:	9901      	ldr	r1, [sp, #4]
   1e7fe:	4b4c      	ldr	r3, [pc, #304]	; (1e930 <_flash_used+0x36c>)
   1e800:	4431      	add	r1, r6
   1e802:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1e806:	910d      	str	r1, [sp, #52]	; 0x34
   1e808:	9908      	ldr	r1, [sp, #32]
   1e80a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1e80e:	2900      	cmp	r1, #0
   1e810:	d043      	beq.n	1e89a <_flash_used+0x2d6>
   1e812:	2000      	movs	r0, #0
   1e814:	494c      	ldr	r1, [pc, #304]	; (1e948 <_flash_used+0x384>)
   1e816:	f7fe f87d 	bl	1c914 <__aeabi_ddiv>
   1e81a:	4652      	mov	r2, sl
   1e81c:	465b      	mov	r3, fp
   1e81e:	f7fd fd97 	bl	1c350 <__aeabi_dsub>
   1e822:	9d01      	ldr	r5, [sp, #4]
   1e824:	4682      	mov	sl, r0
   1e826:	468b      	mov	fp, r1
   1e828:	4649      	mov	r1, r9
   1e82a:	4640      	mov	r0, r8
   1e82c:	f7fe f9f8 	bl	1cc20 <__aeabi_d2iz>
   1e830:	4606      	mov	r6, r0
   1e832:	f7fd fedb 	bl	1c5ec <__aeabi_i2d>
   1e836:	4602      	mov	r2, r0
   1e838:	3630      	adds	r6, #48	; 0x30
   1e83a:	460b      	mov	r3, r1
   1e83c:	4640      	mov	r0, r8
   1e83e:	4649      	mov	r1, r9
   1e840:	f7fd fd86 	bl	1c350 <__aeabi_dsub>
   1e844:	4652      	mov	r2, sl
   1e846:	465b      	mov	r3, fp
   1e848:	f805 6b01 	strb.w	r6, [r5], #1
   1e84c:	4680      	mov	r8, r0
   1e84e:	4689      	mov	r9, r1
   1e850:	f7fe f9a8 	bl	1cba4 <__aeabi_dcmplt>
   1e854:	2800      	cmp	r0, #0
   1e856:	d163      	bne.n	1e920 <_flash_used+0x35c>
   1e858:	4642      	mov	r2, r8
   1e85a:	464b      	mov	r3, r9
   1e85c:	2000      	movs	r0, #0
   1e85e:	4936      	ldr	r1, [pc, #216]	; (1e938 <_flash_used+0x374>)
   1e860:	f7fd fd76 	bl	1c350 <__aeabi_dsub>
   1e864:	4652      	mov	r2, sl
   1e866:	465b      	mov	r3, fp
   1e868:	f7fe f99c 	bl	1cba4 <__aeabi_dcmplt>
   1e86c:	2800      	cmp	r0, #0
   1e86e:	f040 80b5 	bne.w	1e9dc <_flash_used+0x418>
   1e872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e874:	429d      	cmp	r5, r3
   1e876:	d081      	beq.n	1e77c <_flash_used+0x1b8>
   1e878:	2200      	movs	r2, #0
   1e87a:	4b30      	ldr	r3, [pc, #192]	; (1e93c <_flash_used+0x378>)
   1e87c:	4650      	mov	r0, sl
   1e87e:	4659      	mov	r1, fp
   1e880:	f7fd ff1e 	bl	1c6c0 <__aeabi_dmul>
   1e884:	2200      	movs	r2, #0
   1e886:	4682      	mov	sl, r0
   1e888:	468b      	mov	fp, r1
   1e88a:	4640      	mov	r0, r8
   1e88c:	4649      	mov	r1, r9
   1e88e:	4b2b      	ldr	r3, [pc, #172]	; (1e93c <_flash_used+0x378>)
   1e890:	f7fd ff16 	bl	1c6c0 <__aeabi_dmul>
   1e894:	4680      	mov	r8, r0
   1e896:	4689      	mov	r9, r1
   1e898:	e7c6      	b.n	1e828 <_flash_used+0x264>
   1e89a:	4650      	mov	r0, sl
   1e89c:	4659      	mov	r1, fp
   1e89e:	f7fd ff0f 	bl	1c6c0 <__aeabi_dmul>
   1e8a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e8a4:	4682      	mov	sl, r0
   1e8a6:	468b      	mov	fp, r1
   1e8a8:	9d01      	ldr	r5, [sp, #4]
   1e8aa:	930f      	str	r3, [sp, #60]	; 0x3c
   1e8ac:	4649      	mov	r1, r9
   1e8ae:	4640      	mov	r0, r8
   1e8b0:	f7fe f9b6 	bl	1cc20 <__aeabi_d2iz>
   1e8b4:	4606      	mov	r6, r0
   1e8b6:	f7fd fe99 	bl	1c5ec <__aeabi_i2d>
   1e8ba:	4602      	mov	r2, r0
   1e8bc:	460b      	mov	r3, r1
   1e8be:	4640      	mov	r0, r8
   1e8c0:	4649      	mov	r1, r9
   1e8c2:	3630      	adds	r6, #48	; 0x30
   1e8c4:	f7fd fd44 	bl	1c350 <__aeabi_dsub>
   1e8c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e8ca:	f805 6b01 	strb.w	r6, [r5], #1
   1e8ce:	4680      	mov	r8, r0
   1e8d0:	429d      	cmp	r5, r3
   1e8d2:	4689      	mov	r9, r1
   1e8d4:	f04f 0200 	mov.w	r2, #0
   1e8d8:	d124      	bne.n	1e924 <_flash_used+0x360>
   1e8da:	4b1b      	ldr	r3, [pc, #108]	; (1e948 <_flash_used+0x384>)
   1e8dc:	4650      	mov	r0, sl
   1e8de:	4659      	mov	r1, fp
   1e8e0:	f7fd fd38 	bl	1c354 <__adddf3>
   1e8e4:	4602      	mov	r2, r0
   1e8e6:	460b      	mov	r3, r1
   1e8e8:	4640      	mov	r0, r8
   1e8ea:	4649      	mov	r1, r9
   1e8ec:	f7fe f978 	bl	1cbe0 <__aeabi_dcmpgt>
   1e8f0:	2800      	cmp	r0, #0
   1e8f2:	d173      	bne.n	1e9dc <_flash_used+0x418>
   1e8f4:	4652      	mov	r2, sl
   1e8f6:	465b      	mov	r3, fp
   1e8f8:	2000      	movs	r0, #0
   1e8fa:	4913      	ldr	r1, [pc, #76]	; (1e948 <_flash_used+0x384>)
   1e8fc:	f7fd fd28 	bl	1c350 <__aeabi_dsub>
   1e900:	4602      	mov	r2, r0
   1e902:	460b      	mov	r3, r1
   1e904:	4640      	mov	r0, r8
   1e906:	4649      	mov	r1, r9
   1e908:	f7fe f94c 	bl	1cba4 <__aeabi_dcmplt>
   1e90c:	2800      	cmp	r0, #0
   1e90e:	f43f af35 	beq.w	1e77c <_flash_used+0x1b8>
   1e912:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1e914:	1e6b      	subs	r3, r5, #1
   1e916:	930f      	str	r3, [sp, #60]	; 0x3c
   1e918:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1e91c:	2b30      	cmp	r3, #48	; 0x30
   1e91e:	d0f8      	beq.n	1e912 <_flash_used+0x34e>
   1e920:	9700      	str	r7, [sp, #0]
   1e922:	e049      	b.n	1e9b8 <_flash_used+0x3f4>
   1e924:	4b05      	ldr	r3, [pc, #20]	; (1e93c <_flash_used+0x378>)
   1e926:	f7fd fecb 	bl	1c6c0 <__aeabi_dmul>
   1e92a:	4680      	mov	r8, r0
   1e92c:	4689      	mov	r9, r1
   1e92e:	e7bd      	b.n	1e8ac <_flash_used+0x2e8>
   1e930:	00034ba0 	.word	0x00034ba0
   1e934:	00034b78 	.word	0x00034b78
   1e938:	3ff00000 	.word	0x3ff00000
   1e93c:	40240000 	.word	0x40240000
   1e940:	401c0000 	.word	0x401c0000
   1e944:	40140000 	.word	0x40140000
   1e948:	3fe00000 	.word	0x3fe00000
   1e94c:	4656      	mov	r6, sl
   1e94e:	465f      	mov	r7, fp
   1e950:	9d01      	ldr	r5, [sp, #4]
   1e952:	4642      	mov	r2, r8
   1e954:	464b      	mov	r3, r9
   1e956:	4630      	mov	r0, r6
   1e958:	4639      	mov	r1, r7
   1e95a:	f7fd ffdb 	bl	1c914 <__aeabi_ddiv>
   1e95e:	f7fe f95f 	bl	1cc20 <__aeabi_d2iz>
   1e962:	4682      	mov	sl, r0
   1e964:	f7fd fe42 	bl	1c5ec <__aeabi_i2d>
   1e968:	4642      	mov	r2, r8
   1e96a:	464b      	mov	r3, r9
   1e96c:	f7fd fea8 	bl	1c6c0 <__aeabi_dmul>
   1e970:	4602      	mov	r2, r0
   1e972:	4630      	mov	r0, r6
   1e974:	f10a 0630 	add.w	r6, sl, #48	; 0x30
   1e978:	460b      	mov	r3, r1
   1e97a:	4639      	mov	r1, r7
   1e97c:	f7fd fce8 	bl	1c350 <__aeabi_dsub>
   1e980:	f805 6b01 	strb.w	r6, [r5], #1
   1e984:	9e01      	ldr	r6, [sp, #4]
   1e986:	4602      	mov	r2, r0
   1e988:	9f03      	ldr	r7, [sp, #12]
   1e98a:	460b      	mov	r3, r1
   1e98c:	1bae      	subs	r6, r5, r6
   1e98e:	42b7      	cmp	r7, r6
   1e990:	d135      	bne.n	1e9fe <_flash_used+0x43a>
   1e992:	f7fd fcdf 	bl	1c354 <__adddf3>
   1e996:	4642      	mov	r2, r8
   1e998:	464b      	mov	r3, r9
   1e99a:	4606      	mov	r6, r0
   1e99c:	460f      	mov	r7, r1
   1e99e:	f7fe f91f 	bl	1cbe0 <__aeabi_dcmpgt>
   1e9a2:	b9d0      	cbnz	r0, 1e9da <_flash_used+0x416>
   1e9a4:	4642      	mov	r2, r8
   1e9a6:	464b      	mov	r3, r9
   1e9a8:	4630      	mov	r0, r6
   1e9aa:	4639      	mov	r1, r7
   1e9ac:	f7fe f8f0 	bl	1cb90 <__aeabi_dcmpeq>
   1e9b0:	b110      	cbz	r0, 1e9b8 <_flash_used+0x3f4>
   1e9b2:	f01a 0f01 	tst.w	sl, #1
   1e9b6:	d110      	bne.n	1e9da <_flash_used+0x416>
   1e9b8:	4620      	mov	r0, r4
   1e9ba:	ee18 1a10 	vmov	r1, s16
   1e9be:	f00f ff75 	bl	2e8ac <_Bfree>
   1e9c2:	2300      	movs	r3, #0
   1e9c4:	9800      	ldr	r0, [sp, #0]
   1e9c6:	702b      	strb	r3, [r5, #0]
   1e9c8:	3001      	adds	r0, #1
   1e9ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1e9cc:	6018      	str	r0, [r3, #0]
   1e9ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1e9d0:	2b00      	cmp	r3, #0
   1e9d2:	f43f acf1 	beq.w	1e3b8 <_dtoa_r+0xa0>
   1e9d6:	601d      	str	r5, [r3, #0]
   1e9d8:	e4ee      	b.n	1e3b8 <_dtoa_r+0xa0>
   1e9da:	9f00      	ldr	r7, [sp, #0]
   1e9dc:	462b      	mov	r3, r5
   1e9de:	461d      	mov	r5, r3
   1e9e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1e9e4:	2a39      	cmp	r2, #57	; 0x39
   1e9e6:	d106      	bne.n	1e9f6 <_flash_used+0x432>
   1e9e8:	9a01      	ldr	r2, [sp, #4]
   1e9ea:	429a      	cmp	r2, r3
   1e9ec:	d1f7      	bne.n	1e9de <_flash_used+0x41a>
   1e9ee:	2230      	movs	r2, #48	; 0x30
   1e9f0:	9901      	ldr	r1, [sp, #4]
   1e9f2:	3701      	adds	r7, #1
   1e9f4:	700a      	strb	r2, [r1, #0]
   1e9f6:	781a      	ldrb	r2, [r3, #0]
   1e9f8:	3201      	adds	r2, #1
   1e9fa:	701a      	strb	r2, [r3, #0]
   1e9fc:	e790      	b.n	1e920 <_flash_used+0x35c>
   1e9fe:	2200      	movs	r2, #0
   1ea00:	4ba4      	ldr	r3, [pc, #656]	; (1ec94 <_flash_used+0x6d0>)
   1ea02:	f7fd fe5d 	bl	1c6c0 <__aeabi_dmul>
   1ea06:	2200      	movs	r2, #0
   1ea08:	2300      	movs	r3, #0
   1ea0a:	4606      	mov	r6, r0
   1ea0c:	460f      	mov	r7, r1
   1ea0e:	f7fe f8bf 	bl	1cb90 <__aeabi_dcmpeq>
   1ea12:	2800      	cmp	r0, #0
   1ea14:	d09d      	beq.n	1e952 <_flash_used+0x38e>
   1ea16:	e7cf      	b.n	1e9b8 <_flash_used+0x3f4>
   1ea18:	9a08      	ldr	r2, [sp, #32]
   1ea1a:	2a00      	cmp	r2, #0
   1ea1c:	f000 80d5 	beq.w	1ebca <_flash_used+0x606>
   1ea20:	9a06      	ldr	r2, [sp, #24]
   1ea22:	2a01      	cmp	r2, #1
   1ea24:	f300 80b9 	bgt.w	1eb9a <_flash_used+0x5d6>
   1ea28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ea2a:	2a00      	cmp	r2, #0
   1ea2c:	f000 80b1 	beq.w	1eb92 <_flash_used+0x5ce>
   1ea30:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1ea34:	9e07      	ldr	r6, [sp, #28]
   1ea36:	9d04      	ldr	r5, [sp, #16]
   1ea38:	9a04      	ldr	r2, [sp, #16]
   1ea3a:	2101      	movs	r1, #1
   1ea3c:	4620      	mov	r0, r4
   1ea3e:	441a      	add	r2, r3
   1ea40:	9204      	str	r2, [sp, #16]
   1ea42:	9a05      	ldr	r2, [sp, #20]
   1ea44:	441a      	add	r2, r3
   1ea46:	9205      	str	r2, [sp, #20]
   1ea48:	f00f ff9a 	bl	2e980 <__i2b>
   1ea4c:	4607      	mov	r7, r0
   1ea4e:	2d00      	cmp	r5, #0
   1ea50:	dd0c      	ble.n	1ea6c <_flash_used+0x4a8>
   1ea52:	9b05      	ldr	r3, [sp, #20]
   1ea54:	2b00      	cmp	r3, #0
   1ea56:	dd09      	ble.n	1ea6c <_flash_used+0x4a8>
   1ea58:	42ab      	cmp	r3, r5
   1ea5a:	9a04      	ldr	r2, [sp, #16]
   1ea5c:	bfa8      	it	ge
   1ea5e:	462b      	movge	r3, r5
   1ea60:	1ad2      	subs	r2, r2, r3
   1ea62:	1aed      	subs	r5, r5, r3
   1ea64:	9204      	str	r2, [sp, #16]
   1ea66:	9a05      	ldr	r2, [sp, #20]
   1ea68:	1ad3      	subs	r3, r2, r3
   1ea6a:	9305      	str	r3, [sp, #20]
   1ea6c:	9b07      	ldr	r3, [sp, #28]
   1ea6e:	b31b      	cbz	r3, 1eab8 <_flash_used+0x4f4>
   1ea70:	9b08      	ldr	r3, [sp, #32]
   1ea72:	2b00      	cmp	r3, #0
   1ea74:	f000 80ad 	beq.w	1ebd2 <_flash_used+0x60e>
   1ea78:	2e00      	cmp	r6, #0
   1ea7a:	dd13      	ble.n	1eaa4 <_flash_used+0x4e0>
   1ea7c:	4639      	mov	r1, r7
   1ea7e:	4632      	mov	r2, r6
   1ea80:	4620      	mov	r0, r4
   1ea82:	f010 f83b 	bl	2eafc <__pow5mult>
   1ea86:	ee18 2a10 	vmov	r2, s16
   1ea8a:	4601      	mov	r1, r0
   1ea8c:	4607      	mov	r7, r0
   1ea8e:	4620      	mov	r0, r4
   1ea90:	f00f ff8c 	bl	2e9ac <__multiply>
   1ea94:	4680      	mov	r8, r0
   1ea96:	ee18 1a10 	vmov	r1, s16
   1ea9a:	4620      	mov	r0, r4
   1ea9c:	ee08 8a10 	vmov	s16, r8
   1eaa0:	f00f ff04 	bl	2e8ac <_Bfree>
   1eaa4:	9b07      	ldr	r3, [sp, #28]
   1eaa6:	1b9a      	subs	r2, r3, r6
   1eaa8:	d006      	beq.n	1eab8 <_flash_used+0x4f4>
   1eaaa:	ee18 1a10 	vmov	r1, s16
   1eaae:	4620      	mov	r0, r4
   1eab0:	f010 f824 	bl	2eafc <__pow5mult>
   1eab4:	ee08 0a10 	vmov	s16, r0
   1eab8:	2101      	movs	r1, #1
   1eaba:	4620      	mov	r0, r4
   1eabc:	f00f ff60 	bl	2e980 <__i2b>
   1eac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1eac2:	4606      	mov	r6, r0
   1eac4:	2b00      	cmp	r3, #0
   1eac6:	f340 8086 	ble.w	1ebd6 <_flash_used+0x612>
   1eaca:	461a      	mov	r2, r3
   1eacc:	4601      	mov	r1, r0
   1eace:	4620      	mov	r0, r4
   1ead0:	f010 f814 	bl	2eafc <__pow5mult>
   1ead4:	9b06      	ldr	r3, [sp, #24]
   1ead6:	4606      	mov	r6, r0
   1ead8:	2b01      	cmp	r3, #1
   1eada:	dd7f      	ble.n	1ebdc <_flash_used+0x618>
   1eadc:	f04f 0800 	mov.w	r8, #0
   1eae0:	6933      	ldr	r3, [r6, #16]
   1eae2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1eae6:	6918      	ldr	r0, [r3, #16]
   1eae8:	f015 fbf8 	bl	342dc <__hi0bits>
   1eaec:	f1c0 0020 	rsb	r0, r0, #32
   1eaf0:	9b05      	ldr	r3, [sp, #20]
   1eaf2:	4418      	add	r0, r3
   1eaf4:	f010 001f 	ands.w	r0, r0, #31
   1eaf8:	f000 8091 	beq.w	1ec1e <_flash_used+0x65a>
   1eafc:	f1c0 0320 	rsb	r3, r0, #32
   1eb00:	2b04      	cmp	r3, #4
   1eb02:	f340 8089 	ble.w	1ec18 <_flash_used+0x654>
   1eb06:	f1c0 001c 	rsb	r0, r0, #28
   1eb0a:	9b04      	ldr	r3, [sp, #16]
   1eb0c:	4405      	add	r5, r0
   1eb0e:	4403      	add	r3, r0
   1eb10:	9304      	str	r3, [sp, #16]
   1eb12:	9b05      	ldr	r3, [sp, #20]
   1eb14:	4403      	add	r3, r0
   1eb16:	9305      	str	r3, [sp, #20]
   1eb18:	9b04      	ldr	r3, [sp, #16]
   1eb1a:	2b00      	cmp	r3, #0
   1eb1c:	dd07      	ble.n	1eb2e <_flash_used+0x56a>
   1eb1e:	ee18 1a10 	vmov	r1, s16
   1eb22:	461a      	mov	r2, r3
   1eb24:	4620      	mov	r0, r4
   1eb26:	f010 f843 	bl	2ebb0 <__lshift>
   1eb2a:	ee08 0a10 	vmov	s16, r0
   1eb2e:	9b05      	ldr	r3, [sp, #20]
   1eb30:	2b00      	cmp	r3, #0
   1eb32:	dd05      	ble.n	1eb40 <_flash_used+0x57c>
   1eb34:	4631      	mov	r1, r6
   1eb36:	461a      	mov	r2, r3
   1eb38:	4620      	mov	r0, r4
   1eb3a:	f010 f839 	bl	2ebb0 <__lshift>
   1eb3e:	4606      	mov	r6, r0
   1eb40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1eb42:	2b00      	cmp	r3, #0
   1eb44:	d06d      	beq.n	1ec22 <_flash_used+0x65e>
   1eb46:	4631      	mov	r1, r6
   1eb48:	ee18 0a10 	vmov	r0, s16
   1eb4c:	f015 fc15 	bl	3437a <__mcmp>
   1eb50:	2800      	cmp	r0, #0
   1eb52:	da66      	bge.n	1ec22 <_flash_used+0x65e>
   1eb54:	9b00      	ldr	r3, [sp, #0]
   1eb56:	ee18 1a10 	vmov	r1, s16
   1eb5a:	220a      	movs	r2, #10
   1eb5c:	4620      	mov	r0, r4
   1eb5e:	3b01      	subs	r3, #1
   1eb60:	9300      	str	r3, [sp, #0]
   1eb62:	2300      	movs	r3, #0
   1eb64:	f00f fec4 	bl	2e8f0 <__multadd>
   1eb68:	9b08      	ldr	r3, [sp, #32]
   1eb6a:	ee08 0a10 	vmov	s16, r0
   1eb6e:	2b00      	cmp	r3, #0
   1eb70:	f000 81af 	beq.w	1eed2 <_flash_used+0x90e>
   1eb74:	2300      	movs	r3, #0
   1eb76:	4639      	mov	r1, r7
   1eb78:	220a      	movs	r2, #10
   1eb7a:	4620      	mov	r0, r4
   1eb7c:	f00f feb8 	bl	2e8f0 <__multadd>
   1eb80:	9b02      	ldr	r3, [sp, #8]
   1eb82:	4607      	mov	r7, r0
   1eb84:	2b00      	cmp	r3, #0
   1eb86:	f300 808d 	bgt.w	1eca4 <_flash_used+0x6e0>
   1eb8a:	9b06      	ldr	r3, [sp, #24]
   1eb8c:	2b02      	cmp	r3, #2
   1eb8e:	dc50      	bgt.n	1ec32 <_flash_used+0x66e>
   1eb90:	e088      	b.n	1eca4 <_flash_used+0x6e0>
   1eb92:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1eb94:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1eb98:	e74c      	b.n	1ea34 <_flash_used+0x470>
   1eb9a:	9b03      	ldr	r3, [sp, #12]
   1eb9c:	1e5e      	subs	r6, r3, #1
   1eb9e:	9b07      	ldr	r3, [sp, #28]
   1eba0:	42b3      	cmp	r3, r6
   1eba2:	bfb7      	itett	lt
   1eba4:	9b07      	ldrlt	r3, [sp, #28]
   1eba6:	1b9e      	subge	r6, r3, r6
   1eba8:	9607      	strlt	r6, [sp, #28]
   1ebaa:	1af2      	sublt	r2, r6, r3
   1ebac:	bfbf      	itttt	lt
   1ebae:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
   1ebb0:	2600      	movlt	r6, #0
   1ebb2:	189b      	addlt	r3, r3, r2
   1ebb4:	930a      	strlt	r3, [sp, #40]	; 0x28
   1ebb6:	9b03      	ldr	r3, [sp, #12]
   1ebb8:	2b00      	cmp	r3, #0
   1ebba:	bfb7      	itett	lt
   1ebbc:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
   1ebc0:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
   1ebc4:	1a9d      	sublt	r5, r3, r2
   1ebc6:	2300      	movlt	r3, #0
   1ebc8:	e736      	b.n	1ea38 <_flash_used+0x474>
   1ebca:	9e07      	ldr	r6, [sp, #28]
   1ebcc:	9d04      	ldr	r5, [sp, #16]
   1ebce:	9f08      	ldr	r7, [sp, #32]
   1ebd0:	e73d      	b.n	1ea4e <_flash_used+0x48a>
   1ebd2:	9a07      	ldr	r2, [sp, #28]
   1ebd4:	e769      	b.n	1eaaa <_flash_used+0x4e6>
   1ebd6:	9b06      	ldr	r3, [sp, #24]
   1ebd8:	2b01      	cmp	r3, #1
   1ebda:	dc18      	bgt.n	1ec0e <_flash_used+0x64a>
   1ebdc:	f1ba 0f00 	cmp.w	sl, #0
   1ebe0:	d115      	bne.n	1ec0e <_flash_used+0x64a>
   1ebe2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1ebe6:	b993      	cbnz	r3, 1ec0e <_flash_used+0x64a>
   1ebe8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1ebec:	0d1b      	lsrs	r3, r3, #20
   1ebee:	051b      	lsls	r3, r3, #20
   1ebf0:	b183      	cbz	r3, 1ec14 <_flash_used+0x650>
   1ebf2:	9b04      	ldr	r3, [sp, #16]
   1ebf4:	f04f 0801 	mov.w	r8, #1
   1ebf8:	3301      	adds	r3, #1
   1ebfa:	9304      	str	r3, [sp, #16]
   1ebfc:	9b05      	ldr	r3, [sp, #20]
   1ebfe:	3301      	adds	r3, #1
   1ec00:	9305      	str	r3, [sp, #20]
   1ec02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ec04:	2b00      	cmp	r3, #0
   1ec06:	f47f af6b 	bne.w	1eae0 <_flash_used+0x51c>
   1ec0a:	2001      	movs	r0, #1
   1ec0c:	e770      	b.n	1eaf0 <_flash_used+0x52c>
   1ec0e:	f04f 0800 	mov.w	r8, #0
   1ec12:	e7f6      	b.n	1ec02 <_flash_used+0x63e>
   1ec14:	4698      	mov	r8, r3
   1ec16:	e7f4      	b.n	1ec02 <_flash_used+0x63e>
   1ec18:	f43f af7e 	beq.w	1eb18 <_flash_used+0x554>
   1ec1c:	4618      	mov	r0, r3
   1ec1e:	301c      	adds	r0, #28
   1ec20:	e773      	b.n	1eb0a <_flash_used+0x546>
   1ec22:	9b03      	ldr	r3, [sp, #12]
   1ec24:	2b00      	cmp	r3, #0
   1ec26:	dc37      	bgt.n	1ec98 <_flash_used+0x6d4>
   1ec28:	9b06      	ldr	r3, [sp, #24]
   1ec2a:	2b02      	cmp	r3, #2
   1ec2c:	dd34      	ble.n	1ec98 <_flash_used+0x6d4>
   1ec2e:	9b03      	ldr	r3, [sp, #12]
   1ec30:	9302      	str	r3, [sp, #8]
   1ec32:	9b02      	ldr	r3, [sp, #8]
   1ec34:	b96b      	cbnz	r3, 1ec52 <_flash_used+0x68e>
   1ec36:	4631      	mov	r1, r6
   1ec38:	2205      	movs	r2, #5
   1ec3a:	4620      	mov	r0, r4
   1ec3c:	f00f fe58 	bl	2e8f0 <__multadd>
   1ec40:	4601      	mov	r1, r0
   1ec42:	4606      	mov	r6, r0
   1ec44:	ee18 0a10 	vmov	r0, s16
   1ec48:	f015 fb97 	bl	3437a <__mcmp>
   1ec4c:	2800      	cmp	r0, #0
   1ec4e:	f73f adbd 	bgt.w	1e7cc <_flash_used+0x208>
   1ec52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ec54:	9d01      	ldr	r5, [sp, #4]
   1ec56:	43db      	mvns	r3, r3
   1ec58:	9300      	str	r3, [sp, #0]
   1ec5a:	f04f 0800 	mov.w	r8, #0
   1ec5e:	4631      	mov	r1, r6
   1ec60:	4620      	mov	r0, r4
   1ec62:	f00f fe23 	bl	2e8ac <_Bfree>
   1ec66:	2f00      	cmp	r7, #0
   1ec68:	f43f aea6 	beq.w	1e9b8 <_flash_used+0x3f4>
   1ec6c:	f1b8 0f00 	cmp.w	r8, #0
   1ec70:	d005      	beq.n	1ec7e <_flash_used+0x6ba>
   1ec72:	45b8      	cmp	r8, r7
   1ec74:	d003      	beq.n	1ec7e <_flash_used+0x6ba>
   1ec76:	4641      	mov	r1, r8
   1ec78:	4620      	mov	r0, r4
   1ec7a:	f00f fe17 	bl	2e8ac <_Bfree>
   1ec7e:	4639      	mov	r1, r7
   1ec80:	4620      	mov	r0, r4
   1ec82:	f00f fe13 	bl	2e8ac <_Bfree>
   1ec86:	e697      	b.n	1e9b8 <_flash_used+0x3f4>
   1ec88:	2600      	movs	r6, #0
   1ec8a:	4637      	mov	r7, r6
   1ec8c:	e7e1      	b.n	1ec52 <_flash_used+0x68e>
   1ec8e:	9700      	str	r7, [sp, #0]
   1ec90:	4637      	mov	r7, r6
   1ec92:	e59b      	b.n	1e7cc <_flash_used+0x208>
   1ec94:	40240000 	.word	0x40240000
   1ec98:	9b08      	ldr	r3, [sp, #32]
   1ec9a:	2b00      	cmp	r3, #0
   1ec9c:	f000 80ca 	beq.w	1ee34 <_flash_used+0x870>
   1eca0:	9b03      	ldr	r3, [sp, #12]
   1eca2:	9302      	str	r3, [sp, #8]
   1eca4:	2d00      	cmp	r5, #0
   1eca6:	dd05      	ble.n	1ecb4 <_flash_used+0x6f0>
   1eca8:	4639      	mov	r1, r7
   1ecaa:	462a      	mov	r2, r5
   1ecac:	4620      	mov	r0, r4
   1ecae:	f00f ff7f 	bl	2ebb0 <__lshift>
   1ecb2:	4607      	mov	r7, r0
   1ecb4:	f1b8 0f00 	cmp.w	r8, #0
   1ecb8:	d05b      	beq.n	1ed72 <_flash_used+0x7ae>
   1ecba:	6879      	ldr	r1, [r7, #4]
   1ecbc:	4620      	mov	r0, r4
   1ecbe:	f00f fdb5 	bl	2e82c <_Balloc>
   1ecc2:	4605      	mov	r5, r0
   1ecc4:	b928      	cbnz	r0, 1ecd2 <_flash_used+0x70e>
   1ecc6:	4b87      	ldr	r3, [pc, #540]	; (1eee4 <_flash_used+0x920>)
   1ecc8:	4602      	mov	r2, r0
   1ecca:	f240 21ea 	movw	r1, #746	; 0x2ea
   1ecce:	f7ff bb3d 	b.w	1e34c <_dtoa_r+0x34>
   1ecd2:	693a      	ldr	r2, [r7, #16]
   1ecd4:	f107 010c 	add.w	r1, r7, #12
   1ecd8:	300c      	adds	r0, #12
   1ecda:	3202      	adds	r2, #2
   1ecdc:	0092      	lsls	r2, r2, #2
   1ecde:	f014 ffa6 	bl	33c2e <memcpy>
   1ece2:	2201      	movs	r2, #1
   1ece4:	4629      	mov	r1, r5
   1ece6:	4620      	mov	r0, r4
   1ece8:	f00f ff62 	bl	2ebb0 <__lshift>
   1ecec:	9b01      	ldr	r3, [sp, #4]
   1ecee:	46b8      	mov	r8, r7
   1ecf0:	4607      	mov	r7, r0
   1ecf2:	f103 0901 	add.w	r9, r3, #1
   1ecf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   1ecfa:	4413      	add	r3, r2
   1ecfc:	9305      	str	r3, [sp, #20]
   1ecfe:	f00a 0301 	and.w	r3, sl, #1
   1ed02:	9304      	str	r3, [sp, #16]
   1ed04:	4631      	mov	r1, r6
   1ed06:	ee18 0a10 	vmov	r0, s16
   1ed0a:	f015 f9d2 	bl	340b2 <quorem>
   1ed0e:	4641      	mov	r1, r8
   1ed10:	9002      	str	r0, [sp, #8]
   1ed12:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1ed16:	ee18 0a10 	vmov	r0, s16
   1ed1a:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   1ed1e:	f015 fb2c 	bl	3437a <__mcmp>
   1ed22:	463a      	mov	r2, r7
   1ed24:	9003      	str	r0, [sp, #12]
   1ed26:	4631      	mov	r1, r6
   1ed28:	4620      	mov	r0, r4
   1ed2a:	f00f ffb1 	bl	2ec90 <__mdiff>
   1ed2e:	68c2      	ldr	r2, [r0, #12]
   1ed30:	4605      	mov	r5, r0
   1ed32:	bb02      	cbnz	r2, 1ed76 <_flash_used+0x7b2>
   1ed34:	4601      	mov	r1, r0
   1ed36:	ee18 0a10 	vmov	r0, s16
   1ed3a:	f015 fb1e 	bl	3437a <__mcmp>
   1ed3e:	4602      	mov	r2, r0
   1ed40:	4629      	mov	r1, r5
   1ed42:	4620      	mov	r0, r4
   1ed44:	9207      	str	r2, [sp, #28]
   1ed46:	f00f fdb1 	bl	2e8ac <_Bfree>
   1ed4a:	464d      	mov	r5, r9
   1ed4c:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   1ed50:	ea43 0102 	orr.w	r1, r3, r2
   1ed54:	9b04      	ldr	r3, [sp, #16]
   1ed56:	430b      	orrs	r3, r1
   1ed58:	d10f      	bne.n	1ed7a <_flash_used+0x7b6>
   1ed5a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1ed5e:	d02a      	beq.n	1edb6 <_flash_used+0x7f2>
   1ed60:	9b03      	ldr	r3, [sp, #12]
   1ed62:	2b00      	cmp	r3, #0
   1ed64:	dd02      	ble.n	1ed6c <_flash_used+0x7a8>
   1ed66:	9b02      	ldr	r3, [sp, #8]
   1ed68:	f103 0a31 	add.w	sl, r3, #49	; 0x31
   1ed6c:	f88b a000 	strb.w	sl, [fp]
   1ed70:	e775      	b.n	1ec5e <_flash_used+0x69a>
   1ed72:	4638      	mov	r0, r7
   1ed74:	e7ba      	b.n	1ecec <_flash_used+0x728>
   1ed76:	2201      	movs	r2, #1
   1ed78:	e7e2      	b.n	1ed40 <_flash_used+0x77c>
   1ed7a:	9b03      	ldr	r3, [sp, #12]
   1ed7c:	2b00      	cmp	r3, #0
   1ed7e:	db04      	blt.n	1ed8a <_flash_used+0x7c6>
   1ed80:	9906      	ldr	r1, [sp, #24]
   1ed82:	430b      	orrs	r3, r1
   1ed84:	9904      	ldr	r1, [sp, #16]
   1ed86:	430b      	orrs	r3, r1
   1ed88:	d122      	bne.n	1edd0 <_flash_used+0x80c>
   1ed8a:	2a00      	cmp	r2, #0
   1ed8c:	ddee      	ble.n	1ed6c <_flash_used+0x7a8>
   1ed8e:	ee18 1a10 	vmov	r1, s16
   1ed92:	2201      	movs	r2, #1
   1ed94:	4620      	mov	r0, r4
   1ed96:	f00f ff0b 	bl	2ebb0 <__lshift>
   1ed9a:	4631      	mov	r1, r6
   1ed9c:	ee08 0a10 	vmov	s16, r0
   1eda0:	f015 faeb 	bl	3437a <__mcmp>
   1eda4:	2800      	cmp	r0, #0
   1eda6:	dc03      	bgt.n	1edb0 <_flash_used+0x7ec>
   1eda8:	d1e0      	bne.n	1ed6c <_flash_used+0x7a8>
   1edaa:	f01a 0f01 	tst.w	sl, #1
   1edae:	d0dd      	beq.n	1ed6c <_flash_used+0x7a8>
   1edb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1edb4:	d1d7      	bne.n	1ed66 <_flash_used+0x7a2>
   1edb6:	2339      	movs	r3, #57	; 0x39
   1edb8:	f88b 3000 	strb.w	r3, [fp]
   1edbc:	462b      	mov	r3, r5
   1edbe:	461d      	mov	r5, r3
   1edc0:	3b01      	subs	r3, #1
   1edc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1edc6:	2a39      	cmp	r2, #57	; 0x39
   1edc8:	d070      	beq.n	1eeac <_flash_used+0x8e8>
   1edca:	3201      	adds	r2, #1
   1edcc:	701a      	strb	r2, [r3, #0]
   1edce:	e746      	b.n	1ec5e <_flash_used+0x69a>
   1edd0:	2a00      	cmp	r2, #0
   1edd2:	dd07      	ble.n	1ede4 <_flash_used+0x820>
   1edd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   1edd8:	d0ed      	beq.n	1edb6 <_flash_used+0x7f2>
   1edda:	f10a 0301 	add.w	r3, sl, #1
   1edde:	f88b 3000 	strb.w	r3, [fp]
   1ede2:	e73c      	b.n	1ec5e <_flash_used+0x69a>
   1ede4:	9b05      	ldr	r3, [sp, #20]
   1ede6:	f809 ac01 	strb.w	sl, [r9, #-1]
   1edea:	4599      	cmp	r9, r3
   1edec:	d046      	beq.n	1ee7c <_flash_used+0x8b8>
   1edee:	ee18 1a10 	vmov	r1, s16
   1edf2:	2300      	movs	r3, #0
   1edf4:	220a      	movs	r2, #10
   1edf6:	4620      	mov	r0, r4
   1edf8:	f00f fd7a 	bl	2e8f0 <__multadd>
   1edfc:	45b8      	cmp	r8, r7
   1edfe:	ee08 0a10 	vmov	s16, r0
   1ee02:	f04f 0300 	mov.w	r3, #0
   1ee06:	f04f 020a 	mov.w	r2, #10
   1ee0a:	4641      	mov	r1, r8
   1ee0c:	4620      	mov	r0, r4
   1ee0e:	d106      	bne.n	1ee1e <_flash_used+0x85a>
   1ee10:	f00f fd6e 	bl	2e8f0 <__multadd>
   1ee14:	4680      	mov	r8, r0
   1ee16:	4607      	mov	r7, r0
   1ee18:	f109 0901 	add.w	r9, r9, #1
   1ee1c:	e772      	b.n	1ed04 <_flash_used+0x740>
   1ee1e:	f00f fd67 	bl	2e8f0 <__multadd>
   1ee22:	4639      	mov	r1, r7
   1ee24:	4680      	mov	r8, r0
   1ee26:	2300      	movs	r3, #0
   1ee28:	220a      	movs	r2, #10
   1ee2a:	4620      	mov	r0, r4
   1ee2c:	f00f fd60 	bl	2e8f0 <__multadd>
   1ee30:	4607      	mov	r7, r0
   1ee32:	e7f1      	b.n	1ee18 <_flash_used+0x854>
   1ee34:	9b03      	ldr	r3, [sp, #12]
   1ee36:	9302      	str	r3, [sp, #8]
   1ee38:	9d01      	ldr	r5, [sp, #4]
   1ee3a:	4631      	mov	r1, r6
   1ee3c:	ee18 0a10 	vmov	r0, s16
   1ee40:	f015 f937 	bl	340b2 <quorem>
   1ee44:	9b01      	ldr	r3, [sp, #4]
   1ee46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   1ee4a:	f805 ab01 	strb.w	sl, [r5], #1
   1ee4e:	1aea      	subs	r2, r5, r3
   1ee50:	9b02      	ldr	r3, [sp, #8]
   1ee52:	4293      	cmp	r3, r2
   1ee54:	dd09      	ble.n	1ee6a <_flash_used+0x8a6>
   1ee56:	ee18 1a10 	vmov	r1, s16
   1ee5a:	2300      	movs	r3, #0
   1ee5c:	220a      	movs	r2, #10
   1ee5e:	4620      	mov	r0, r4
   1ee60:	f00f fd46 	bl	2e8f0 <__multadd>
   1ee64:	ee08 0a10 	vmov	s16, r0
   1ee68:	e7e7      	b.n	1ee3a <_flash_used+0x876>
   1ee6a:	9b02      	ldr	r3, [sp, #8]
   1ee6c:	f04f 0800 	mov.w	r8, #0
   1ee70:	2b00      	cmp	r3, #0
   1ee72:	bfcc      	ite	gt
   1ee74:	461d      	movgt	r5, r3
   1ee76:	2501      	movle	r5, #1
   1ee78:	9b01      	ldr	r3, [sp, #4]
   1ee7a:	441d      	add	r5, r3
   1ee7c:	ee18 1a10 	vmov	r1, s16
   1ee80:	2201      	movs	r2, #1
   1ee82:	4620      	mov	r0, r4
   1ee84:	f00f fe94 	bl	2ebb0 <__lshift>
   1ee88:	4631      	mov	r1, r6
   1ee8a:	ee08 0a10 	vmov	s16, r0
   1ee8e:	f015 fa74 	bl	3437a <__mcmp>
   1ee92:	2800      	cmp	r0, #0
   1ee94:	dc92      	bgt.n	1edbc <_flash_used+0x7f8>
   1ee96:	d102      	bne.n	1ee9e <_flash_used+0x8da>
   1ee98:	f01a 0f01 	tst.w	sl, #1
   1ee9c:	d18e      	bne.n	1edbc <_flash_used+0x7f8>
   1ee9e:	462b      	mov	r3, r5
   1eea0:	461d      	mov	r5, r3
   1eea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1eea6:	2a30      	cmp	r2, #48	; 0x30
   1eea8:	d0fa      	beq.n	1eea0 <_flash_used+0x8dc>
   1eeaa:	e6d8      	b.n	1ec5e <_flash_used+0x69a>
   1eeac:	9a01      	ldr	r2, [sp, #4]
   1eeae:	429a      	cmp	r2, r3
   1eeb0:	d185      	bne.n	1edbe <_flash_used+0x7fa>
   1eeb2:	9b00      	ldr	r3, [sp, #0]
   1eeb4:	3301      	adds	r3, #1
   1eeb6:	9300      	str	r3, [sp, #0]
   1eeb8:	2331      	movs	r3, #49	; 0x31
   1eeba:	7013      	strb	r3, [r2, #0]
   1eebc:	e6cf      	b.n	1ec5e <_flash_used+0x69a>
   1eebe:	4b0a      	ldr	r3, [pc, #40]	; (1eee8 <_flash_used+0x924>)
   1eec0:	f7ff ba98 	b.w	1e3f4 <_dtoa_r+0xdc>
   1eec4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1eec6:	2b00      	cmp	r3, #0
   1eec8:	f47f aa71 	bne.w	1e3ae <_dtoa_r+0x96>
   1eecc:	4b07      	ldr	r3, [pc, #28]	; (1eeec <_flash_used+0x928>)
   1eece:	f7ff ba91 	b.w	1e3f4 <_dtoa_r+0xdc>
   1eed2:	9b02      	ldr	r3, [sp, #8]
   1eed4:	2b00      	cmp	r3, #0
   1eed6:	dcaf      	bgt.n	1ee38 <_flash_used+0x874>
   1eed8:	9b06      	ldr	r3, [sp, #24]
   1eeda:	2b02      	cmp	r3, #2
   1eedc:	f73f aea9 	bgt.w	1ec32 <_flash_used+0x66e>
   1eee0:	e7aa      	b.n	1ee38 <_flash_used+0x874>
   1eee2:	bf00      	nop
   1eee4:	0003a130 	.word	0x0003a130
   1eee8:	00039309 	.word	0x00039309
   1eeec:	0003a0b0 	.word	0x0003a0b0

0001eef0 <lte_lc_event_handler>:
{
   1eef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	switch (evt->type) {
   1eef2:	7803      	ldrb	r3, [r0, #0]
   1eef4:	b9ab      	cbnz	r3, 1ef22 <lte_lc_event_handler+0x32>
		if ((evt->nw_reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1eef6:	7a04      	ldrb	r4, [r0, #8]
   1eef8:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   1eefc:	2c01      	cmp	r4, #1
   1eefe:	d110      	bne.n	1ef22 <lte_lc_event_handler+0x32>
			LOG_INF("Connected to LTE network");
   1ef00:	4a09      	ldr	r2, [pc, #36]	; (1ef28 <lte_lc_event_handler+0x38>)
   1ef02:	4618      	mov	r0, r3
   1ef04:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1ef08:	9300      	str	r3, [sp, #0]
   1ef0a:	2203      	movs	r2, #3
   1ef0c:	4907      	ldr	r1, [pc, #28]	; (1ef2c <lte_lc_event_handler+0x3c>)
   1ef0e:	f010 fbe6 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
            lte_connected = true;
   1ef12:	4b07      	ldr	r3, [pc, #28]	; (1ef30 <lte_lc_event_handler+0x40>)
   1ef14:	701c      	strb	r4, [r3, #0]
	z_impl_k_sem_give(sem);
   1ef16:	4807      	ldr	r0, [pc, #28]	; (1ef34 <lte_lc_event_handler+0x44>)
}
   1ef18:	b004      	add	sp, #16
   1ef1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ef1e:	f00d bb51 	b.w	2c5c4 <z_impl_k_sem_give>
   1ef22:	b004      	add	sp, #16
   1ef24:	bd10      	pop	{r4, pc}
   1ef26:	bf00      	nop
   1ef28:	00035444 	.word	0x00035444
   1ef2c:	00034a48 	.word	0x00034a48
   1ef30:	2000d966 	.word	0x2000d966
   1ef34:	2000ca20 	.word	0x2000ca20

0001ef38 <cert_provision>:
{
   1ef38:	b513      	push	{r0, r1, r4, lr}
    err = modem_key_mgmt_exists(TLS_SEC_TAG, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN, &exists);
   1ef3a:	2100      	movs	r1, #0
   1ef3c:	202a      	movs	r0, #42	; 0x2a
   1ef3e:	f10d 0207 	add.w	r2, sp, #7
   1ef42:	f009 fa45 	bl	283d0 <modem_key_mgmt_exists>
    if (err) {
   1ef46:	4604      	mov	r4, r0
   1ef48:	b120      	cbz	r0, 1ef54 <cert_provision+0x1c>
        printk("Failed to check for certificates err %d\n", err);
   1ef4a:	4601      	mov	r1, r0
   1ef4c:	4819      	ldr	r0, [pc, #100]	; (1efb4 <cert_provision+0x7c>)
        printk("Failed to provision certificate, err %d\n", err);
   1ef4e:	f010 fc74 	bl	2f83a <printk>
        return err;
   1ef52:	e010      	b.n	1ef76 <cert_provision+0x3e>
    if (exists) {
   1ef54:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1ef58:	b1e3      	cbz	r3, 1ef94 <cert_provision+0x5c>
        mismatch = modem_key_mgmt_cmp(TLS_SEC_TAG,
   1ef5a:	4817      	ldr	r0, [pc, #92]	; (1efb8 <cert_provision+0x80>)
   1ef5c:	f7fe f8a0 	bl	1d0a0 <strlen>
   1ef60:	4621      	mov	r1, r4
   1ef62:	4603      	mov	r3, r0
   1ef64:	4a14      	ldr	r2, [pc, #80]	; (1efb8 <cert_provision+0x80>)
   1ef66:	202a      	movs	r0, #42	; 0x2a
   1ef68:	f009 f9f2 	bl	28350 <modem_key_mgmt_cmp>
        if (!mismatch) {
   1ef6c:	4604      	mov	r4, r0
   1ef6e:	b928      	cbnz	r0, 1ef7c <cert_provision+0x44>
            printk("Certificate match\n");
   1ef70:	4812      	ldr	r0, [pc, #72]	; (1efbc <cert_provision+0x84>)
   1ef72:	f010 fc62 	bl	2f83a <printk>
}
   1ef76:	4620      	mov	r0, r4
   1ef78:	b002      	add	sp, #8
   1ef7a:	bd10      	pop	{r4, pc}
        printk("Certificate mismatch\n");
   1ef7c:	4810      	ldr	r0, [pc, #64]	; (1efc0 <cert_provision+0x88>)
   1ef7e:	f010 fc5c 	bl	2f83a <printk>
        err = modem_key_mgmt_delete(TLS_SEC_TAG, MODEM_KEY_MGMT_CRED_TYPE_CA_CHAIN);
   1ef82:	2100      	movs	r1, #0
   1ef84:	202a      	movs	r0, #42	; 0x2a
   1ef86:	f009 fa05 	bl	28394 <modem_key_mgmt_delete>
        if (err) {
   1ef8a:	4601      	mov	r1, r0
   1ef8c:	b110      	cbz	r0, 1ef94 <cert_provision+0x5c>
            printk("Failed to delete existing certificate, err %d\n", err);
   1ef8e:	480d      	ldr	r0, [pc, #52]	; (1efc4 <cert_provision+0x8c>)
   1ef90:	f010 fc53 	bl	2f83a <printk>
    printk("Provisioning certificate\n");
   1ef94:	480c      	ldr	r0, [pc, #48]	; (1efc8 <cert_provision+0x90>)
   1ef96:	f010 fc50 	bl	2f83a <printk>
    err = modem_key_mgmt_write(TLS_SEC_TAG,
   1ef9a:	f240 533a 	movw	r3, #1338	; 0x53a
   1ef9e:	2100      	movs	r1, #0
   1efa0:	202a      	movs	r0, #42	; 0x2a
   1efa2:	4a05      	ldr	r2, [pc, #20]	; (1efb8 <cert_provision+0x80>)
   1efa4:	f009 f9ac 	bl	28300 <modem_key_mgmt_write>
    if (err) {
   1efa8:	4604      	mov	r4, r0
   1efaa:	2800      	cmp	r0, #0
   1efac:	d0e3      	beq.n	1ef76 <cert_provision+0x3e>
        printk("Failed to provision certificate, err %d\n", err);
   1efae:	4601      	mov	r1, r0
   1efb0:	4806      	ldr	r0, [pc, #24]	; (1efcc <cert_provision+0x94>)
   1efb2:	e7cc      	b.n	1ef4e <cert_provision+0x16>
   1efb4:	0003545d 	.word	0x0003545d
   1efb8:	00035936 	.word	0x00035936
   1efbc:	00035486 	.word	0x00035486
   1efc0:	00035499 	.word	0x00035499
   1efc4:	000354af 	.word	0x000354af
   1efc8:	000354de 	.word	0x000354de
   1efcc:	000354f8 	.word	0x000354f8

0001efd0 <tls_setup>:
{
   1efd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    verify = NONE;
   1efd2:	2300      	movs	r3, #0
   1efd4:	222a      	movs	r2, #42	; 0x2a
{
   1efd6:	4605      	mov	r5, r0
    verify = NONE;
   1efd8:	e9cd 3202 	strd	r3, r2, [sp, #8]
		union { uintptr_t x; socklen_t val; } parm4 = { .val = optlen };
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   1efdc:	2604      	movs	r6, #4
   1efde:	2205      	movs	r2, #5
   1efe0:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1efe4:	9600      	str	r6, [sp, #0]
   1efe6:	ab02      	add	r3, sp, #8
   1efe8:	f011 fc29 	bl	3083e <z_impl_zsock_setsockopt>
    if (err) {
   1efec:	4604      	mov	r4, r0
   1efee:	b140      	cbz	r0, 1f002 <tls_setup+0x32>
        printk("Failed to setup peer verification, err %d\n", errno);
   1eff0:	f011 fe63 	bl	30cba <__errno>
   1eff4:	6801      	ldr	r1, [r0, #0]
   1eff6:	4813      	ldr	r0, [pc, #76]	; (1f044 <tls_setup+0x74>)
        printk("Failed to setup TLS hostname, err %d\n", errno);
   1eff8:	f010 fc1f 	bl	2f83a <printk>
}
   1effc:	4620      	mov	r0, r4
   1effe:	b004      	add	sp, #16
   1f000:	bd70      	pop	{r4, r5, r6, pc}
   1f002:	2201      	movs	r2, #1
   1f004:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1f008:	4628      	mov	r0, r5
   1f00a:	9600      	str	r6, [sp, #0]
   1f00c:	ab03      	add	r3, sp, #12
   1f00e:	f011 fc16 	bl	3083e <z_impl_zsock_setsockopt>
    if (err) {
   1f012:	4604      	mov	r4, r0
   1f014:	b120      	cbz	r0, 1f020 <tls_setup+0x50>
        printk("Failed to setup TLS sec tag, err %d\n", errno);
   1f016:	f011 fe50 	bl	30cba <__errno>
   1f01a:	6801      	ldr	r1, [r0, #0]
   1f01c:	480a      	ldr	r0, [pc, #40]	; (1f048 <tls_setup+0x78>)
   1f01e:	e7eb      	b.n	1eff8 <tls_setup+0x28>
   1f020:	2324      	movs	r3, #36	; 0x24
   1f022:	2202      	movs	r2, #2
   1f024:	9300      	str	r3, [sp, #0]
   1f026:	f44f 718d 	mov.w	r1, #282	; 0x11a
   1f02a:	4628      	mov	r0, r5
   1f02c:	4b07      	ldr	r3, [pc, #28]	; (1f04c <tls_setup+0x7c>)
   1f02e:	f011 fc06 	bl	3083e <z_impl_zsock_setsockopt>
    if (err) {
   1f032:	4604      	mov	r4, r0
   1f034:	2800      	cmp	r0, #0
   1f036:	d0e1      	beq.n	1effc <tls_setup+0x2c>
        printk("Failed to setup TLS hostname, err %d\n", errno);
   1f038:	f011 fe3f 	bl	30cba <__errno>
   1f03c:	6801      	ldr	r1, [r0, #0]
   1f03e:	4804      	ldr	r0, [pc, #16]	; (1f050 <tls_setup+0x80>)
   1f040:	e7da      	b.n	1eff8 <tls_setup+0x28>
   1f042:	bf00      	nop
   1f044:	00035521 	.word	0x00035521
   1f048:	0003554c 	.word	0x0003554c
   1f04c:	00035571 	.word	0x00035571
   1f050:	00035596 	.word	0x00035596

0001f054 <lte_connect>:
{
   1f054:	b530      	push	{r4, r5, lr}
    if (lte_connected == true)
   1f056:	4b1e      	ldr	r3, [pc, #120]	; (1f0d0 <lte_connect+0x7c>)
{
   1f058:	b085      	sub	sp, #20
    if (lte_connected == true)
   1f05a:	781b      	ldrb	r3, [r3, #0]
   1f05c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   1f060:	b9cb      	cbnz	r3, 1f096 <lte_connect+0x42>
	LOG_INF("Connecting to LTE network");
   1f062:	4b1c      	ldr	r3, [pc, #112]	; (1f0d4 <lte_connect+0x80>)
   1f064:	2203      	movs	r2, #3
   1f066:	4628      	mov	r0, r5
   1f068:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1f06c:	491a      	ldr	r1, [pc, #104]	; (1f0d8 <lte_connect+0x84>)
   1f06e:	462b      	mov	r3, r5
   1f070:	9500      	str	r5, [sp, #0]
   1f072:	f010 fb34 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
	err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_ACTIVATE_LTE);
   1f076:	2015      	movs	r0, #21
   1f078:	f008 f970 	bl	2735c <lte_lc_func_mode_set>
	if (err) {
   1f07c:	4604      	mov	r4, r0
   1f07e:	b160      	cbz	r0, 1f09a <lte_connect+0x46>
		LOG_ERR("Failed to activate LTE, error: %d", err);
   1f080:	4b16      	ldr	r3, [pc, #88]	; (1f0dc <lte_connect+0x88>)
   1f082:	9003      	str	r0, [sp, #12]
   1f084:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1f088:	2201      	movs	r2, #1
   1f08a:	462b      	mov	r3, r5
   1f08c:	4628      	mov	r0, r5
   1f08e:	4912      	ldr	r1, [pc, #72]	; (1f0d8 <lte_connect+0x84>)
   1f090:	9500      	str	r5, [sp, #0]
   1f092:	f010 fb24 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
}
   1f096:	b005      	add	sp, #20
   1f098:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   1f09a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   1f09e:	2300      	movs	r3, #0
   1f0a0:	480f      	ldr	r0, [pc, #60]	; (1f0e0 <lte_connect+0x8c>)
   1f0a2:	f00d fab5 	bl	2c610 <z_impl_k_sem_take>
	if(k_sem_take(&lte_ready, K_SECONDS(10)) != 0)
   1f0a6:	b150      	cbz	r0, 1f0be <lte_connect+0x6a>
        LOG_ERR("Connecting timeout");
   1f0a8:	4b0e      	ldr	r3, [pc, #56]	; (1f0e4 <lte_connect+0x90>)
   1f0aa:	2201      	movs	r2, #1
   1f0ac:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f0b0:	4620      	mov	r0, r4
   1f0b2:	4623      	mov	r3, r4
   1f0b4:	4908      	ldr	r1, [pc, #32]	; (1f0d8 <lte_connect+0x84>)
   1f0b6:	9400      	str	r4, [sp, #0]
   1f0b8:	f010 fb11 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
   1f0bc:	e7eb      	b.n	1f096 <lte_connect+0x42>
	return z_impl_k_sleep(timeout);
   1f0be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1f0c2:	2100      	movs	r1, #0
}
   1f0c4:	b005      	add	sp, #20
   1f0c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   1f0ca:	f00d be63 	b.w	2cd94 <z_impl_k_sleep>
   1f0ce:	bf00      	nop
   1f0d0:	2000d966 	.word	0x2000d966
   1f0d4:	000355bc 	.word	0x000355bc
   1f0d8:	00034a48 	.word	0x00034a48
   1f0dc:	000355d6 	.word	0x000355d6
   1f0e0:	2000ca20 	.word	0x2000ca20
   1f0e4:	000355f8 	.word	0x000355f8

0001f0e8 <lte_disconnect>:
{
   1f0e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	err = lte_lc_func_mode_set(LTE_LC_FUNC_MODE_DEACTIVATE_LTE);
   1f0ea:	2014      	movs	r0, #20
   1f0ec:	f008 f936 	bl	2735c <lte_lc_func_mode_set>
	if (err) {
   1f0f0:	4603      	mov	r3, r0
   1f0f2:	b168      	cbz	r0, 1f110 <lte_disconnect+0x28>
		LOG_ERR("Failed to deactivate LTE, error: %d", err);
   1f0f4:	4b0c      	ldr	r3, [pc, #48]	; (1f128 <lte_disconnect+0x40>)
   1f0f6:	9003      	str	r0, [sp, #12]
   1f0f8:	9302      	str	r3, [sp, #8]
   1f0fa:	2300      	movs	r3, #0
   1f0fc:	2201      	movs	r2, #1
   1f0fe:	4618      	mov	r0, r3
   1f100:	e9cd 3300 	strd	r3, r3, [sp]
   1f104:	4909      	ldr	r1, [pc, #36]	; (1f12c <lte_disconnect+0x44>)
   1f106:	f010 faea 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
}
   1f10a:	b005      	add	sp, #20
   1f10c:	f85d fb04 	ldr.w	pc, [sp], #4
    lte_connected = false;
   1f110:	4a07      	ldr	r2, [pc, #28]	; (1f130 <lte_disconnect+0x48>)
	LOG_INF("LTE disconnected");
   1f112:	4906      	ldr	r1, [pc, #24]	; (1f12c <lte_disconnect+0x44>)
    lte_connected = false;
   1f114:	7010      	strb	r0, [r2, #0]
	LOG_INF("LTE disconnected");
   1f116:	4a07      	ldr	r2, [pc, #28]	; (1f134 <lte_disconnect+0x4c>)
   1f118:	9000      	str	r0, [sp, #0]
   1f11a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1f11e:	2203      	movs	r2, #3
   1f120:	f010 fadd 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
   1f124:	e7f1      	b.n	1f10a <lte_disconnect+0x22>
   1f126:	bf00      	nop
   1f128:	0003560b 	.word	0x0003560b
   1f12c:	00034a48 	.word	0x00034a48
   1f130:	2000d966 	.word	0x2000d966
   1f134:	0003562f 	.word	0x0003562f

0001f138 <create_gnss_thread>:
{
   1f138:	b500      	push	{lr}
   1f13a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f13c:	2200      	movs	r2, #0
   1f13e:	2300      	movs	r3, #0
   1f140:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f144:	2300      	movs	r3, #0
   1f146:	2205      	movs	r2, #5
   1f148:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1f14c:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1f150:	9300      	str	r3, [sp, #0]
   1f152:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1f156:	4b04      	ldr	r3, [pc, #16]	; (1f168 <create_gnss_thread+0x30>)
   1f158:	4904      	ldr	r1, [pc, #16]	; (1f16c <create_gnss_thread+0x34>)
   1f15a:	4805      	ldr	r0, [pc, #20]	; (1f170 <create_gnss_thread+0x38>)
   1f15c:	f00c fff4 	bl	2c148 <z_impl_k_thread_create>
}
   1f160:	b009      	add	sp, #36	; 0x24
   1f162:	f85d fb04 	ldr.w	pc, [sp], #4
   1f166:	bf00      	nop
   1f168:	0001f5fd 	.word	0x0001f5fd
   1f16c:	200107a0 	.word	0x200107a0
   1f170:	2000ca90 	.word	0x2000ca90

0001f174 <main>:
    int fd;
    char *p;
    int bytes;
    size_t off;

    struct addrinfo hints = {
   1f174:	2250      	movs	r2, #80	; 0x50
{
   1f176:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        .ai_family = AF_INET,
        .ai_socktype = SOCK_STREAM,
    };

    LOG_INF("Its Personal Build %s", HASH);
   1f17a:	2400      	movs	r4, #0
    struct addrinfo hints = {
   1f17c:	2501      	movs	r5, #1
{
   1f17e:	b0a9      	sub	sp, #164	; 0xa4
    struct addrinfo hints = {
   1f180:	2100      	movs	r1, #0
   1f182:	eb0d 0002 	add.w	r0, sp, r2
   1f186:	f014 fd72 	bl	33c6e <memset>
    LOG_INF("Its Personal Build %s", HASH);
   1f18a:	4bae      	ldr	r3, [pc, #696]	; (1f444 <main+0x2d0>)
   1f18c:	2203      	movs	r2, #3
   1f18e:	9303      	str	r3, [sp, #12]
   1f190:	4bad      	ldr	r3, [pc, #692]	; (1f448 <main+0x2d4>)
   1f192:	4620      	mov	r0, r4
   1f194:	49ad      	ldr	r1, [pc, #692]	; (1f44c <main+0x2d8>)
   1f196:	9302      	str	r3, [sp, #8]
   1f198:	e9cd 4400 	strd	r4, r4, [sp]
   1f19c:	4623      	mov	r3, r4
    struct addrinfo hints = {
   1f19e:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
    LOG_INF("Its Personal Build %s", HASH);
   1f1a2:	f010 fa9c 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
    LOG_INF("Using APN: %s", CONFIG_PDN_DEFAULT_APN);
   1f1a6:	4baa      	ldr	r3, [pc, #680]	; (1f450 <main+0x2dc>)
    int ret_scanf = nrf_modem_at_scanf("AT+CGMR", "%s", &MODEM_FW_VER);
   1f1a8:	4faa      	ldr	r7, [pc, #680]	; (1f454 <main+0x2e0>)
    LOG_INF("Using APN: %s", CONFIG_PDN_DEFAULT_APN);
   1f1aa:	9303      	str	r3, [sp, #12]
   1f1ac:	4baa      	ldr	r3, [pc, #680]	; (1f458 <main+0x2e4>)
   1f1ae:	2203      	movs	r2, #3
   1f1b0:	4620      	mov	r0, r4
   1f1b2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f1b6:	49a5      	ldr	r1, [pc, #660]	; (1f44c <main+0x2d8>)
   1f1b8:	4623      	mov	r3, r4
   1f1ba:	9400      	str	r4, [sp, #0]
   1f1bc:	f010 fa8f 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
    int ret_scanf = nrf_modem_at_scanf("AT+CGMR", "%s", &MODEM_FW_VER);
   1f1c0:	463a      	mov	r2, r7
   1f1c2:	49a6      	ldr	r1, [pc, #664]	; (1f45c <main+0x2e8>)
   1f1c4:	48a6      	ldr	r0, [pc, #664]	; (1f460 <main+0x2ec>)
   1f1c6:	f00c f8ab 	bl	2b320 <nrf_modem_at_scanf>
    if (ret_scanf != 1)
   1f1ca:	42a8      	cmp	r0, r5
    int ret_scanf = nrf_modem_at_scanf("AT+CGMR", "%s", &MODEM_FW_VER);
   1f1cc:	4606      	mov	r6, r0
    if (ret_scanf != 1)
   1f1ce:	d00c      	beq.n	1f1ea <main+0x76>
    {
        LOG_ERR("Failed to read modem firmware version");
   1f1d0:	4ba4      	ldr	r3, [pc, #656]	; (1f464 <main+0x2f0>)
   1f1d2:	462a      	mov	r2, r5
   1f1d4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f1d8:	4623      	mov	r3, r4
   1f1da:	9400      	str	r4, [sp, #0]
        freeaddrinfo(res);
    }
    (void)close(fd);

    lte_lc_power_off();
    LOG_INF("Cleaned up, shutting down ...");
   1f1dc:	4618      	mov	r0, r3
   1f1de:	499b      	ldr	r1, [pc, #620]	; (1f44c <main+0x2d8>)
   1f1e0:	f010 fa7d 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
}
   1f1e4:	b029      	add	sp, #164	; 0xa4
   1f1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LOG_INF("Modem firmware %s", &MODEM_FW_VER);
   1f1ea:	4b9f      	ldr	r3, [pc, #636]	; (1f468 <main+0x2f4>)
   1f1ec:	2203      	movs	r2, #3
   1f1ee:	4620      	mov	r0, r4
   1f1f0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f1f4:	4995      	ldr	r1, [pc, #596]	; (1f44c <main+0x2d8>)
   1f1f6:	4623      	mov	r3, r4
   1f1f8:	9703      	str	r7, [sp, #12]
   1f1fa:	9400      	str	r4, [sp, #0]
   1f1fc:	f010 fa6f 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
    err = cert_provision();
   1f200:	f7ff fe9a 	bl	1ef38 <cert_provision>
    if (err) {
   1f204:	4605      	mov	r5, r0
   1f206:	2800      	cmp	r0, #0
   1f208:	d1ec      	bne.n	1f1e4 <main+0x70>
    LOG_INF("Waiting for network...");
   1f20a:	4b98      	ldr	r3, [pc, #608]	; (1f46c <main+0x2f8>)
   1f20c:	2203      	movs	r2, #3
   1f20e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1f212:	498e      	ldr	r1, [pc, #568]	; (1f44c <main+0x2d8>)
   1f214:	4603      	mov	r3, r0
   1f216:	9000      	str	r0, [sp, #0]
   1f218:	f010 fa61 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
        if (lte_lc_init() != 0) {
   1f21c:	f008 f890 	bl	27340 <lte_lc_init>
   1f220:	4604      	mov	r4, r0
   1f222:	b130      	cbz	r0, 1f232 <main+0xbe>
            LOG_ERR("Failed to initialize LTE link controller");
   1f224:	4b92      	ldr	r3, [pc, #584]	; (1f470 <main+0x2fc>)
   1f226:	9500      	str	r5, [sp, #0]
   1f228:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1f22c:	462b      	mov	r3, r5
        LOG_ERR("Failed to read device uuid");
   1f22e:	4632      	mov	r2, r6
   1f230:	e7d4      	b.n	1f1dc <main+0x68>
        lte_lc_register_handler(lte_lc_event_handler);
   1f232:	4890      	ldr	r0, [pc, #576]	; (1f474 <main+0x300>)
    ret_scanf = nrf_modem_at_scanf("AT%XMODEMUUID", "%%XMODEMUUID: %s", &DEV_UUID);
   1f234:	4d90      	ldr	r5, [pc, #576]	; (1f478 <main+0x304>)
        lte_lc_register_handler(lte_lc_event_handler);
   1f236:	f007 fd25 	bl	26c84 <lte_lc_register_handler>
        lte_lc_psm_req(true);
   1f23a:	4630      	mov	r0, r6
   1f23c:	f007 fd3a 	bl	26cb4 <lte_lc_psm_req>
    ret_scanf = nrf_modem_at_scanf("AT%XMODEMUUID", "%%XMODEMUUID: %s", &DEV_UUID);
   1f240:	462a      	mov	r2, r5
   1f242:	498e      	ldr	r1, [pc, #568]	; (1f47c <main+0x308>)
   1f244:	488e      	ldr	r0, [pc, #568]	; (1f480 <main+0x30c>)
   1f246:	f00c f86b 	bl	2b320 <nrf_modem_at_scanf>
    if (ret_scanf != 1)
   1f24a:	2801      	cmp	r0, #1
   1f24c:	d005      	beq.n	1f25a <main+0xe6>
        LOG_ERR("Failed to read device uuid");
   1f24e:	4b8d      	ldr	r3, [pc, #564]	; (1f484 <main+0x310>)
   1f250:	9400      	str	r4, [sp, #0]
   1f252:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f256:	4623      	mov	r3, r4
   1f258:	e7e9      	b.n	1f22e <main+0xba>
    LOG_INF("Device uuid: %s", DEV_UUID);
   1f25a:	4b8b      	ldr	r3, [pc, #556]	; (1f488 <main+0x314>)
   1f25c:	4620      	mov	r0, r4
   1f25e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f262:	2203      	movs	r2, #3
   1f264:	4623      	mov	r3, r4
   1f266:	4979      	ldr	r1, [pc, #484]	; (1f44c <main+0x2d8>)
   1f268:	9503      	str	r5, [sp, #12]
   1f26a:	9400      	str	r4, [sp, #0]
   1f26c:	f010 fa37 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
    create_gnss_thread();
   1f270:	f7ff ff62 	bl	1f138 <create_gnss_thread>
    while ((fabs(last_latitude - 0) < 0.5) 
   1f274:	4d85      	ldr	r5, [pc, #532]	; (1f48c <main+0x318>)
        && (fabs(last_longtitude - 0) < 0.5))
   1f276:	4c86      	ldr	r4, [pc, #536]	; (1f490 <main+0x31c>)
        LOG_INF("Waiting for first GPS fix ...");
   1f278:	4e86      	ldr	r6, [pc, #536]	; (1f494 <main+0x320>)
    while ((fabs(last_latitude - 0) < 0.5) 
   1f27a:	ed95 0b00 	vldr	d0, [r5]
   1f27e:	f014 fcab 	bl	33bd8 <fabs>
   1f282:	2800      	cmp	r0, #0
   1f284:	dd1e      	ble.n	1f2c4 <main+0x150>
    struct dns_server_lookup dns_servers[] =
   1f286:	4d84      	ldr	r5, [pc, #528]	; (1f498 <main+0x324>)
   1f288:	ac0a      	add	r4, sp, #40	; 0x28
    lte_connect();
   1f28a:	f7ff fee3 	bl	1f054 <lte_connect>
    struct dns_server_lookup dns_servers[] =
   1f28e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f296:	e895 0003 	ldmia.w	r5, {r0, r1}
    struct addrinfo *res = 0;
   1f29a:	2300      	movs	r3, #0
    struct dns_server_lookup dns_servers[] =
   1f29c:	e884 0003 	stmia.w	r4, {r0, r1}
        LOG_INF("Resolving %s using DNS server %d.%d.%d.%d", HTTPS_HOSTNAME, p_ipu8[0],  p_ipu8[1],  p_ipu8[2],  p_ipu8[3]);
   1f2a0:	4f6a      	ldr	r7, [pc, #424]	; (1f44c <main+0x2d8>)
    struct addrinfo *res = 0;
   1f2a2:	9308      	str	r3, [sp, #32]
    while (err != 0 && dns_servers[dns_idx].addr != 0)
   1f2a4:	ad0a      	add	r5, sp, #40	; 0x28
   1f2a6:	682e      	ldr	r6, [r5, #0]
   1f2a8:	bb0e      	cbnz	r6, 1f2ee <main+0x17a>
        LOG_ERR("Resolving %s failed with all DNS servers\n",HTTPS_HOSTNAME);
   1f2aa:	4b7c      	ldr	r3, [pc, #496]	; (1f49c <main+0x328>)
   1f2ac:	2201      	movs	r2, #1
   1f2ae:	9303      	str	r3, [sp, #12]
   1f2b0:	4b7b      	ldr	r3, [pc, #492]	; (1f4a0 <main+0x32c>)
   1f2b2:	4630      	mov	r0, r6
   1f2b4:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1f2b8:	4964      	ldr	r1, [pc, #400]	; (1f44c <main+0x2d8>)
   1f2ba:	4633      	mov	r3, r6
   1f2bc:	9600      	str	r6, [sp, #0]
   1f2be:	f010 fa0e 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
        return;
   1f2c2:	e78f      	b.n	1f1e4 <main+0x70>
        && (fabs(last_longtitude - 0) < 0.5))
   1f2c4:	ed94 0b00 	vldr	d0, [r4]
   1f2c8:	f014 fc86 	bl	33bd8 <fabs>
   1f2cc:	2800      	cmp	r0, #0
   1f2ce:	dcda      	bgt.n	1f286 <main+0x112>
        LOG_INF("Waiting for first GPS fix ...");
   1f2d0:	2300      	movs	r3, #0
   1f2d2:	2203      	movs	r2, #3
   1f2d4:	4618      	mov	r0, r3
   1f2d6:	e9cd 3300 	strd	r3, r3, [sp]
   1f2da:	495c      	ldr	r1, [pc, #368]	; (1f44c <main+0x2d8>)
   1f2dc:	9602      	str	r6, [sp, #8]
   1f2de:	f010 f9fe 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
	return z_impl_k_sleep(timeout);
   1f2e2:	2100      	movs	r1, #0
   1f2e4:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
   1f2e8:	f00d fd54 	bl	2cd94 <z_impl_k_sleep>
   1f2ec:	e7c5      	b.n	1f27a <main+0x106>
        LOG_INF("Resolving %s using DNS server %d.%d.%d.%d", HTTPS_HOSTNAME, p_ipu8[0],  p_ipu8[1],  p_ipu8[2],  p_ipu8[3]);
   1f2ee:	2400      	movs	r4, #0
   1f2f0:	4b6a      	ldr	r3, [pc, #424]	; (1f49c <main+0x328>)
   1f2f2:	f895 8004 	ldrb.w	r8, [r5, #4]
   1f2f6:	f895 9005 	ldrb.w	r9, [r5, #5]
   1f2fa:	f895 a006 	ldrb.w	sl, [r5, #6]
   1f2fe:	f895 b007 	ldrb.w	fp, [r5, #7]
   1f302:	9303      	str	r3, [sp, #12]
   1f304:	4b67      	ldr	r3, [pc, #412]	; (1f4a4 <main+0x330>)
   1f306:	2203      	movs	r2, #3
   1f308:	4639      	mov	r1, r7
   1f30a:	4620      	mov	r0, r4
   1f30c:	9302      	str	r3, [sp, #8]
   1f30e:	e9cd ab06 	strd	sl, fp, [sp, #24]
   1f312:	4623      	mov	r3, r4
   1f314:	e9cd 8904 	strd	r8, r9, [sp, #16]
   1f318:	e9cd 4400 	strd	r4, r4, [sp]
   1f31c:	f010 f9df 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
        int dns_err = nrf_setdnsaddr(NRF_AF_INET, &dns, sizeof(dns));
   1f320:	2204      	movs	r2, #4
   1f322:	a909      	add	r1, sp, #36	; 0x24
   1f324:	2001      	movs	r0, #1
        dns.s_addr = dns_servers[dns_idx].addr; // OpenDNS, 208.67.222.222
   1f326:	9609      	str	r6, [sp, #36]	; 0x24
        int dns_err = nrf_setdnsaddr(NRF_AF_INET, &dns, sizeof(dns));
   1f328:	f013 f996 	bl	32658 <nrf_setdnsaddr>
        LOG_INF("DNS set result %d", dns_err);
   1f32c:	4b5e      	ldr	r3, [pc, #376]	; (1f4a8 <main+0x334>)
   1f32e:	2203      	movs	r2, #3
   1f330:	4639      	mov	r1, r7
   1f332:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f336:	9003      	str	r0, [sp, #12]
   1f338:	4623      	mov	r3, r4
   1f33a:	4620      	mov	r0, r4
   1f33c:	9400      	str	r4, [sp, #0]
   1f33e:	f010 f9ce 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
/** POSIX wrapper for @ref zsock_getaddrinfo */
static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   1f342:	4621      	mov	r1, r4
   1f344:	4855      	ldr	r0, [pc, #340]	; (1f49c <main+0x328>)
   1f346:	ab08      	add	r3, sp, #32
   1f348:	aa14      	add	r2, sp, #80	; 0x50
   1f34a:	f011 f990 	bl	3066e <zsock_getaddrinfo>
        if (err == 0) {
   1f34e:	3508      	adds	r5, #8
   1f350:	4606      	mov	r6, r0
   1f352:	b198      	cbz	r0, 1f37c <main+0x208>
        LOG_INF("DNS server %d.%d.%d.%d failed with err %d", p_ipu8[0],  p_ipu8[1],  p_ipu8[2],  p_ipu8[3], err);
   1f354:	4b55      	ldr	r3, [pc, #340]	; (1f4ac <main+0x338>)
   1f356:	e9cd b006 	strd	fp, r0, [sp, #24]
   1f35a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f35e:	4620      	mov	r0, r4
   1f360:	4623      	mov	r3, r4
   1f362:	2203      	movs	r2, #3
   1f364:	4639      	mov	r1, r7
   1f366:	e9cd 9a04 	strd	r9, sl, [sp, #16]
   1f36a:	f8cd 800c 	str.w	r8, [sp, #12]
   1f36e:	9400      	str	r4, [sp, #0]
   1f370:	f010 f9b5 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
}

/** POSIX wrapper for @ref zsock_freeaddrinfo */
static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   1f374:	9808      	ldr	r0, [sp, #32]
   1f376:	f011 f97c 	bl	30672 <zsock_freeaddrinfo>
    while (err != 0 && dns_servers[dns_idx].addr != 0)
   1f37a:	e794      	b.n	1f2a6 <main+0x132>
    ((struct sockaddr_in *)res->ai_addr)->sin_port = htons(HTTPS_PORT);
   1f37c:	f64b 3201 	movw	r2, #47873	; 0xbb01
   1f380:	9b08      	ldr	r3, [sp, #32]
   1f382:	699b      	ldr	r3, [r3, #24]
   1f384:	805a      	strh	r2, [r3, #2]
	return z_impl_zsock_socket(family, type, proto);
   1f386:	2101      	movs	r1, #1
   1f388:	f44f 7281 	mov.w	r2, #258	; 0x102
   1f38c:	4608      	mov	r0, r1
   1f38e:	f001 fcc1 	bl	20d14 <z_impl_zsock_socket>
    if (fd == -1) {
   1f392:	1c43      	adds	r3, r0, #1
   1f394:	4605      	mov	r5, r0
   1f396:	d123      	bne.n	1f3e0 <main+0x26c>
        LOG_ERR("Failed to open socket!");
   1f398:	4b45      	ldr	r3, [pc, #276]	; (1f4b0 <main+0x33c>)
   1f39a:	2201      	movs	r2, #1
   1f39c:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1f3a0:	4630      	mov	r0, r6
   1f3a2:	4633      	mov	r3, r6
   1f3a4:	4929      	ldr	r1, [pc, #164]	; (1f44c <main+0x2d8>)
   1f3a6:	9600      	str	r6, [sp, #0]
   1f3a8:	f010 f999 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
    LOG_INF("Finished, closing socket.");
   1f3ac:	4b41      	ldr	r3, [pc, #260]	; (1f4b4 <main+0x340>)
   1f3ae:	2203      	movs	r2, #3
   1f3b0:	9302      	str	r3, [sp, #8]
   1f3b2:	2300      	movs	r3, #0
   1f3b4:	4925      	ldr	r1, [pc, #148]	; (1f44c <main+0x2d8>)
   1f3b6:	4618      	mov	r0, r3
   1f3b8:	e9cd 3300 	strd	r3, r3, [sp]
   1f3bc:	f010 f98f 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
    if (res != 0)
   1f3c0:	9808      	ldr	r0, [sp, #32]
   1f3c2:	b108      	cbz	r0, 1f3c8 <main+0x254>
   1f3c4:	f011 f955 	bl	30672 <zsock_freeaddrinfo>
	return z_impl_zsock_close(sock);
   1f3c8:	4628      	mov	r0, r5
   1f3ca:	f011 f958 	bl	3067e <z_impl_zsock_close>
    lte_lc_power_off();
   1f3ce:	f012 fd08 	bl	31de2 <lte_lc_power_off>
    LOG_INF("Cleaned up, shutting down ...");
   1f3d2:	4b39      	ldr	r3, [pc, #228]	; (1f4b8 <main+0x344>)
   1f3d4:	2203      	movs	r2, #3
   1f3d6:	9302      	str	r3, [sp, #8]
   1f3d8:	2300      	movs	r3, #0
   1f3da:	e9cd 3300 	strd	r3, r3, [sp]
   1f3de:	e6fd      	b.n	1f1dc <main+0x68>
    err = tls_setup(fd);
   1f3e0:	f7ff fdf6 	bl	1efd0 <tls_setup>
    if (err) {
   1f3e4:	4604      	mov	r4, r0
   1f3e6:	2800      	cmp	r0, #0
   1f3e8:	d1e0      	bne.n	1f3ac <main+0x238>
    LOG_INF("Connecting to %s", HTTPS_HOSTNAME);
   1f3ea:	4b2c      	ldr	r3, [pc, #176]	; (1f49c <main+0x328>)
   1f3ec:	2203      	movs	r2, #3
   1f3ee:	9303      	str	r3, [sp, #12]
   1f3f0:	4b32      	ldr	r3, [pc, #200]	; (1f4bc <main+0x348>)
   1f3f2:	4916      	ldr	r1, [pc, #88]	; (1f44c <main+0x2d8>)
   1f3f4:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1f3f8:	9000      	str	r0, [sp, #0]
   1f3fa:	4603      	mov	r3, r0
   1f3fc:	f010 f96f 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
    err = connect(fd, res->ai_addr, sizeof(struct sockaddr_in));
   1f400:	9b08      	ldr	r3, [sp, #32]
   1f402:	6999      	ldr	r1, [r3, #24]
	return z_impl_zsock_connect(sock, addr, addrlen);
   1f404:	2208      	movs	r2, #8
   1f406:	4628      	mov	r0, r5
   1f408:	f011 f986 	bl	30718 <z_impl_zsock_connect>
    if (err) {
   1f40c:	4603      	mov	r3, r0
   1f40e:	b170      	cbz	r0, 1f42e <main+0x2ba>
        LOG_ERR("connect() failed, err: %d", errno);
   1f410:	f011 fc53 	bl	30cba <__errno>
   1f414:	6803      	ldr	r3, [r0, #0]
   1f416:	2201      	movs	r2, #1
   1f418:	9303      	str	r3, [sp, #12]
   1f41a:	4b29      	ldr	r3, [pc, #164]	; (1f4c0 <main+0x34c>)
   1f41c:	4620      	mov	r0, r4
   1f41e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f422:	490a      	ldr	r1, [pc, #40]	; (1f44c <main+0x2d8>)
   1f424:	4623      	mov	r3, r4
   1f426:	9400      	str	r4, [sp, #0]
   1f428:	f010 f959 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
        goto clean_up;
   1f42c:	e7be      	b.n	1f3ac <main+0x238>
    LOG_INF("Connected");
   1f42e:	4a25      	ldr	r2, [pc, #148]	; (1f4c4 <main+0x350>)
   1f430:	9000      	str	r0, [sp, #0]
   1f432:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1f436:	4905      	ldr	r1, [pc, #20]	; (1f44c <main+0x2d8>)
   1f438:	2203      	movs	r2, #3
   1f43a:	f010 f950 	bl	2f6de <z_log_msg_runtime_create.constprop.0>
    app_main_handler(fd);
   1f43e:	4628      	mov	r0, r5
   1f440:	f7fd fe36 	bl	1d0b0 <app_main_handler>
   1f444:	000356f9 	.word	0x000356f9
   1f448:	00035709 	.word	0x00035709
   1f44c:	00034a48 	.word	0x00034a48
   1f450:	0003571f 	.word	0x0003571f
   1f454:	2000d934 	.word	0x2000d934
   1f458:	00035728 	.word	0x00035728
   1f45c:	00039015 	.word	0x00039015
   1f460:	00035736 	.word	0x00035736
   1f464:	0003573e 	.word	0x0003573e
   1f468:	00035764 	.word	0x00035764
   1f46c:	00035776 	.word	0x00035776
   1f470:	0003578d 	.word	0x0003578d
   1f474:	0001eef1 	.word	0x0001eef1
   1f478:	2000d90c 	.word	0x2000d90c
   1f47c:	000357b6 	.word	0x000357b6
   1f480:	000357c7 	.word	0x000357c7
   1f484:	000357d5 	.word	0x000357d5
   1f488:	000357f0 	.word	0x000357f0
   1f48c:	2000cc48 	.word	0x2000cc48
   1f490:	2000cc50 	.word	0x2000cc50
   1f494:	00035800 	.word	0x00035800
   1f498:	00034b10 	.word	0x00034b10
   1f49c:	00035571 	.word	0x00035571
   1f4a0:	00035908 	.word	0x00035908
   1f4a4:	0003581e 	.word	0x0003581e
   1f4a8:	00035848 	.word	0x00035848
   1f4ac:	0003585a 	.word	0x0003585a
   1f4b0:	00035884 	.word	0x00035884
   1f4b4:	000358d0 	.word	0x000358d0
   1f4b8:	000358ea 	.word	0x000358ea
   1f4bc:	0003589b 	.word	0x0003589b
   1f4c0:	000358ac 	.word	0x000358ac
   1f4c4:	000358c6 	.word	0x000358c6

0001f4c8 <agps_data_get_work_fn>:
static struct k_work agps_data_get_work;
static volatile bool requesting_assistance;
static struct nrf_modem_gnss_agps_data_frame last_agps;

static void agps_data_get_work_fn(struct k_work *item)
{
   1f4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int err;

    /* With minimal assistance, the request should be ignored if no GPS time or position
     * is requested.
     */
    if (!(last_agps.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) &&
   1f4ca:	4d1c      	ldr	r5, [pc, #112]	; (1f53c <agps_data_get_work_fn+0x74>)
{
   1f4cc:	b087      	sub	sp, #28
    if (!(last_agps.data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) &&
   1f4ce:	68aa      	ldr	r2, [r5, #8]
   1f4d0:	f012 0318 	ands.w	r3, r2, #24
   1f4d4:	d10a      	bne.n	1f4ec <agps_data_get_work_fn+0x24>
        !(last_agps.data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST)) {
        LOG_INF("Ignoring assistance request because no GPS time or position is requested");
   1f4d6:	4a1a      	ldr	r2, [pc, #104]	; (1f540 <agps_data_get_work_fn+0x78>)
   1f4d8:	4618      	mov	r0, r3
   1f4da:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1f4de:	4919      	ldr	r1, [pc, #100]	; (1f544 <agps_data_get_work_fn+0x7c>)
   1f4e0:	2203      	movs	r2, #3
   1f4e2:	9300      	str	r3, [sp, #0]
   1f4e4:	f010 f90a 	bl	2f6fc <z_log_msg_runtime_create.constprop.0>
        LOG_ERR("Failed to request assistance data");
    }
    lte_disconnect();

    requesting_assistance = false;
}
   1f4e8:	b007      	add	sp, #28
   1f4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LOG_INF("Assistance data needed, ephe 0x%08x, alm 0x%08x, flags 0x%02x",
   1f4ec:	2400      	movs	r4, #0
    requesting_assistance = true;
   1f4ee:	2701      	movs	r7, #1
    LOG_INF("Assistance data needed, ephe 0x%08x, alm 0x%08x, flags 0x%02x",
   1f4f0:	686b      	ldr	r3, [r5, #4]
    requesting_assistance = true;
   1f4f2:	4e15      	ldr	r6, [pc, #84]	; (1f548 <agps_data_get_work_fn+0x80>)
    LOG_INF("Assistance data needed, ephe 0x%08x, alm 0x%08x, flags 0x%02x",
   1f4f4:	9304      	str	r3, [sp, #16]
   1f4f6:	682b      	ldr	r3, [r5, #0]
   1f4f8:	4620      	mov	r0, r4
   1f4fa:	9303      	str	r3, [sp, #12]
   1f4fc:	4b13      	ldr	r3, [pc, #76]	; (1f54c <agps_data_get_work_fn+0x84>)
   1f4fe:	4911      	ldr	r1, [pc, #68]	; (1f544 <agps_data_get_work_fn+0x7c>)
   1f500:	9205      	str	r2, [sp, #20]
   1f502:	9302      	str	r3, [sp, #8]
   1f504:	2203      	movs	r2, #3
   1f506:	4623      	mov	r3, r4
   1f508:	e9cd 4400 	strd	r4, r4, [sp]
    requesting_assistance = true;
   1f50c:	7037      	strb	r7, [r6, #0]
    LOG_INF("Assistance data needed, ephe 0x%08x, alm 0x%08x, flags 0x%02x",
   1f50e:	f010 f8f5 	bl	2f6fc <z_log_msg_runtime_create.constprop.0>
    lte_connect();
   1f512:	f7ff fd9f 	bl	1f054 <lte_connect>
    err = assistance_request(&last_agps);
   1f516:	4628      	mov	r0, r5
   1f518:	f000 fa80 	bl	1fa1c <assistance_request>
    if (err) {
   1f51c:	b148      	cbz	r0, 1f532 <agps_data_get_work_fn+0x6a>
        LOG_ERR("Failed to request assistance data");
   1f51e:	4b0c      	ldr	r3, [pc, #48]	; (1f550 <agps_data_get_work_fn+0x88>)
   1f520:	463a      	mov	r2, r7
   1f522:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f526:	4620      	mov	r0, r4
   1f528:	4623      	mov	r3, r4
   1f52a:	4906      	ldr	r1, [pc, #24]	; (1f544 <agps_data_get_work_fn+0x7c>)
   1f52c:	9400      	str	r4, [sp, #0]
   1f52e:	f010 f8e5 	bl	2f6fc <z_log_msg_runtime_create.constprop.0>
    lte_disconnect();
   1f532:	f7ff fdd9 	bl	1f0e8 <lte_disconnect>
    requesting_assistance = false;
   1f536:	2300      	movs	r3, #0
   1f538:	7033      	strb	r3, [r6, #0]
   1f53a:	e7d5      	b.n	1f4e8 <agps_data_get_work_fn+0x20>
   1f53c:	2000d120 	.word	0x2000d120
   1f540:	00035e71 	.word	0x00035e71
   1f544:	00034a78 	.word	0x00034a78
   1f548:	2000e1e7 	.word	0x2000e1e7
   1f54c:	00035eba 	.word	0x00035eba
   1f550:	00035ef8 	.word	0x00035ef8

0001f554 <gnss_event_handler>:
static void gnss_event_handler(int event)
{
    int retval;
    struct nrf_modem_gnss_nmea_data_frame *nmea_data;

    switch (event) {
   1f554:	2803      	cmp	r0, #3
{
   1f556:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1f558:	4602      	mov	r2, r0
    switch (event) {
   1f55a:	d00e      	beq.n	1f57a <gnss_event_handler+0x26>
   1f55c:	2804      	cmp	r0, #4
   1f55e:	d02f      	beq.n	1f5c0 <gnss_event_handler+0x6c>
   1f560:	2801      	cmp	r0, #1
   1f562:	d118      	bne.n	1f596 <gnss_event_handler+0x42>
    case NRF_MODEM_GNSS_EVT_PVT:
        retval = nrf_modem_gnss_read(&last_pvt, sizeof(last_pvt), NRF_MODEM_GNSS_DATA_PVT);
   1f564:	21e8      	movs	r1, #232	; 0xe8
   1f566:	481d      	ldr	r0, [pc, #116]	; (1f5dc <gnss_event_handler+0x88>)
   1f568:	f00c f89c 	bl	2b6a4 <nrf_modem_gnss_read>
        if (retval == 0) {
   1f56c:	b998      	cbnz	r0, 1f596 <gnss_event_handler+0x42>
	z_impl_k_sem_give(sem);
   1f56e:	481c      	ldr	r0, [pc, #112]	; (1f5e0 <gnss_event_handler+0x8c>)
        break;

    default:
        break;
    }
}
   1f570:	b007      	add	sp, #28
   1f572:	f85d eb04 	ldr.w	lr, [sp], #4
   1f576:	f00d b825 	b.w	2c5c4 <z_impl_k_sem_give>
        nmea_data = k_malloc(sizeof(struct nrf_modem_gnss_nmea_data_frame));
   1f57a:	2053      	movs	r0, #83	; 0x53
   1f57c:	f014 fb14 	bl	33ba8 <k_malloc>
   1f580:	4603      	mov	r3, r0
   1f582:	9005      	str	r0, [sp, #20]
        if (nmea_data == NULL) {
   1f584:	b950      	cbnz	r0, 1f59c <gnss_event_handler+0x48>
            LOG_ERR("Failed to allocate memory for NMEA");
   1f586:	4a17      	ldr	r2, [pc, #92]	; (1f5e4 <gnss_event_handler+0x90>)
   1f588:	4917      	ldr	r1, [pc, #92]	; (1f5e8 <gnss_event_handler+0x94>)
   1f58a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1f58e:	9000      	str	r0, [sp, #0]
   1f590:	2201      	movs	r2, #1
   1f592:	f010 f8b3 	bl	2f6fc <z_log_msg_runtime_create.constprop.0>
}
   1f596:	b007      	add	sp, #28
   1f598:	f85d fb04 	ldr.w	pc, [sp], #4
        retval = nrf_modem_gnss_read(nmea_data,
   1f59c:	2202      	movs	r2, #2
   1f59e:	2153      	movs	r1, #83	; 0x53
   1f5a0:	f00c f880 	bl	2b6a4 <nrf_modem_gnss_read>
        if (retval == 0) {
   1f5a4:	b118      	cbz	r0, 1f5ae <gnss_event_handler+0x5a>
            k_free(nmea_data);
   1f5a6:	9805      	ldr	r0, [sp, #20]
   1f5a8:	f014 faf7 	bl	33b9a <k_free>
   1f5ac:	e7f3      	b.n	1f596 <gnss_event_handler+0x42>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
   1f5ae:	2200      	movs	r2, #0
   1f5b0:	2300      	movs	r3, #0
   1f5b2:	480e      	ldr	r0, [pc, #56]	; (1f5ec <gnss_event_handler+0x98>)
   1f5b4:	a905      	add	r1, sp, #20
   1f5b6:	f00c fe6b 	bl	2c290 <z_impl_k_msgq_put>
        if (retval != 0) {
   1f5ba:	2800      	cmp	r0, #0
   1f5bc:	d0eb      	beq.n	1f596 <gnss_event_handler+0x42>
   1f5be:	e7f2      	b.n	1f5a6 <gnss_event_handler+0x52>
        retval = nrf_modem_gnss_read(&last_agps,
   1f5c0:	2203      	movs	r2, #3
   1f5c2:	210c      	movs	r1, #12
   1f5c4:	480a      	ldr	r0, [pc, #40]	; (1f5f0 <gnss_event_handler+0x9c>)
   1f5c6:	f00c f86d 	bl	2b6a4 <nrf_modem_gnss_read>
        if (retval == 0) {
   1f5ca:	2800      	cmp	r0, #0
   1f5cc:	d1e3      	bne.n	1f596 <gnss_event_handler+0x42>
            k_work_submit_to_queue(&gnss_work_q, &agps_data_get_work);
   1f5ce:	4909      	ldr	r1, [pc, #36]	; (1f5f4 <gnss_event_handler+0xa0>)
   1f5d0:	4809      	ldr	r0, [pc, #36]	; (1f5f8 <gnss_event_handler+0xa4>)
}
   1f5d2:	b007      	add	sp, #28
   1f5d4:	f85d eb04 	ldr.w	lr, [sp], #4
            k_work_submit_to_queue(&gnss_work_q, &agps_data_get_work);
   1f5d8:	f013 bff7 	b.w	335ca <k_work_submit_to_queue>
   1f5dc:	2000cc58 	.word	0x2000cc58
   1f5e0:	2000ca38 	.word	0x2000ca38
   1f5e4:	00035f1a 	.word	0x00035f1a
   1f5e8:	00034a78 	.word	0x00034a78
   1f5ec:	2000c9f0 	.word	0x2000c9f0
   1f5f0:	2000d120 	.word	0x2000d120
   1f5f4:	2000d110 	.word	0x2000d110
   1f5f8:	2000cb60 	.word	0x2000cb60

0001f5fc <entrypoint_gnss>:

	LOG_INF("\tTracking: %2d Using: %2d Unhealthy: %d", tracked, in_fix, unhealthy);
}

void entrypoint_gnss(void *arg1, void *arg2, void *arg3)
{
   1f5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f600:	ed2d 8b02 	vpush	{d8}
    struct k_work_queue_config cfg = {
   1f604:	2500      	movs	r5, #0
{
   1f606:	b08d      	sub	sp, #52	; 0x34
    struct k_work_queue_config cfg = {
   1f608:	4b95      	ldr	r3, [pc, #596]	; (1f860 <entrypoint_gnss+0x264>)
    k_work_queue_start(
   1f60a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   1f60e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1f612:	4994      	ldr	r1, [pc, #592]	; (1f864 <entrypoint_gnss+0x268>)
   1f614:	4894      	ldr	r0, [pc, #592]	; (1f868 <entrypoint_gnss+0x26c>)
    struct k_work_queue_config cfg = {
   1f616:	930a      	str	r3, [sp, #40]	; 0x28
    k_work_queue_start(
   1f618:	f8cd 8000 	str.w	r8, [sp]
   1f61c:	2305      	movs	r3, #5
    struct k_work_queue_config cfg = {
   1f61e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    k_work_queue_start(
   1f622:	f00d f873 	bl	2c70c <k_work_queue_start>
    k_work_init(&agps_data_get_work, agps_data_get_work_fn);
   1f626:	4991      	ldr	r1, [pc, #580]	; (1f86c <entrypoint_gnss+0x270>)
   1f628:	4891      	ldr	r0, [pc, #580]	; (1f870 <entrypoint_gnss+0x274>)
   1f62a:	f013 ffb1 	bl	33590 <k_work_init>
    err = assistance_init(&gnss_work_q);
   1f62e:	488e      	ldr	r0, [pc, #568]	; (1f868 <entrypoint_gnss+0x26c>)
   1f630:	f000 f976 	bl	1f920 <assistance_init>
    uint8_t cnt = 0;
    struct nrf_modem_gnss_nmea_data_frame *nmea_data;

    if (sample_init() != 0) {
   1f634:	4604      	mov	r4, r0
   1f636:	b170      	cbz	r0, 1f656 <entrypoint_gnss+0x5a>
        LOG_ERR("Failed to initialize sample");
   1f638:	4b8e      	ldr	r3, [pc, #568]	; (1f874 <entrypoint_gnss+0x278>)
   1f63a:	9500      	str	r5, [sp, #0]
   1f63c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1f640:	462b      	mov	r3, r5
        return -1;
    }

    if (gnss_init_and_start() != 0) {
        LOG_ERR("Failed to initialize and start GNSS");
   1f642:	2201      	movs	r2, #1
   1f644:	4618      	mov	r0, r3
   1f646:	498c      	ldr	r1, [pc, #560]	; (1f878 <entrypoint_gnss+0x27c>)
   1f648:	f010 f858 	bl	2f6fc <z_log_msg_runtime_create.constprop.0>
        events[0].state = K_POLL_STATE_NOT_READY;
        events[1].state = K_POLL_STATE_NOT_READY; 
    }

    return 0;
}
   1f64c:	b00d      	add	sp, #52	; 0x34
   1f64e:	ecbd 8b02 	vpop	{d8}
   1f652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (lte_lc_func_mode_set(LTE_LC_FUNC_MODE_ACTIVATE_GNSS) != 0) {
   1f656:	201f      	movs	r0, #31
   1f658:	f007 fe80 	bl	2735c <lte_lc_func_mode_set>
   1f65c:	4605      	mov	r5, r0
   1f65e:	b128      	cbz	r0, 1f66c <entrypoint_gnss+0x70>
        LOG_ERR("Failed to activate GNSS functional mode");
   1f660:	4b86      	ldr	r3, [pc, #536]	; (1f87c <entrypoint_gnss+0x280>)
        LOG_ERR("Failed to set GNSS fix interval");
   1f662:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f666:	9400      	str	r4, [sp, #0]
   1f668:	4623      	mov	r3, r4
   1f66a:	e009      	b.n	1f680 <entrypoint_gnss+0x84>
    if (nrf_modem_gnss_event_handler_set(gnss_event_handler) != 0) {
   1f66c:	4884      	ldr	r0, [pc, #528]	; (1f880 <entrypoint_gnss+0x284>)
   1f66e:	f00c faa3 	bl	2bbb8 <nrf_modem_gnss_event_handler_set>
   1f672:	4604      	mov	r4, r0
   1f674:	b178      	cbz	r0, 1f696 <entrypoint_gnss+0x9a>
        LOG_ERR("Failed to set GNSS event handler");
   1f676:	4b83      	ldr	r3, [pc, #524]	; (1f884 <entrypoint_gnss+0x288>)
   1f678:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1f67c:	462b      	mov	r3, r5
   1f67e:	9500      	str	r5, [sp, #0]
   1f680:	4618      	mov	r0, r3
   1f682:	2201      	movs	r2, #1
   1f684:	497c      	ldr	r1, [pc, #496]	; (1f878 <entrypoint_gnss+0x27c>)
   1f686:	f010 f839 	bl	2f6fc <z_log_msg_runtime_create.constprop.0>
        LOG_ERR("Failed to initialize and start GNSS");
   1f68a:	4b7f      	ldr	r3, [pc, #508]	; (1f888 <entrypoint_gnss+0x28c>)
   1f68c:	9302      	str	r3, [sp, #8]
   1f68e:	2300      	movs	r3, #0
   1f690:	e9cd 3300 	strd	r3, r3, [sp]
   1f694:	e7d5      	b.n	1f642 <entrypoint_gnss+0x46>
    if (nrf_modem_gnss_use_case_set(use_case) != 0) {
   1f696:	2007      	movs	r0, #7
   1f698:	f00c fa06 	bl	2baa8 <nrf_modem_gnss_use_case_set>
   1f69c:	b148      	cbz	r0, 1f6b2 <entrypoint_gnss+0xb6>
        LOG_WRN("Failed to set GNSS use case");
   1f69e:	4b7b      	ldr	r3, [pc, #492]	; (1f88c <entrypoint_gnss+0x290>)
   1f6a0:	2202      	movs	r2, #2
   1f6a2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f6a6:	4620      	mov	r0, r4
   1f6a8:	4623      	mov	r3, r4
   1f6aa:	4973      	ldr	r1, [pc, #460]	; (1f878 <entrypoint_gnss+0x27c>)
   1f6ac:	9400      	str	r4, [sp, #0]
   1f6ae:	f010 f825 	bl	2f6fc <z_log_msg_runtime_create.constprop.0>
    if (nrf_modem_gnss_power_mode_set(power_mode) != 0) {
   1f6b2:	2000      	movs	r0, #0
   1f6b4:	f00c fa5e 	bl	2bb74 <nrf_modem_gnss_power_mode_set>
   1f6b8:	4605      	mov	r5, r0
   1f6ba:	b128      	cbz	r0, 1f6c8 <entrypoint_gnss+0xcc>
        LOG_ERR("Failed to set GNSS power saving mode");
   1f6bc:	4b74      	ldr	r3, [pc, #464]	; (1f890 <entrypoint_gnss+0x294>)
   1f6be:	9302      	str	r3, [sp, #8]
   1f6c0:	2300      	movs	r3, #0
   1f6c2:	e9cd 3300 	strd	r3, r3, [sp]
   1f6c6:	e7db      	b.n	1f680 <entrypoint_gnss+0x84>
    if (nrf_modem_gnss_fix_retry_set(fix_retry) != 0) {
   1f6c8:	2078      	movs	r0, #120	; 0x78
   1f6ca:	f00c fa31 	bl	2bb30 <nrf_modem_gnss_fix_retry_set>
   1f6ce:	4604      	mov	r4, r0
   1f6d0:	b108      	cbz	r0, 1f6d6 <entrypoint_gnss+0xda>
        LOG_ERR("Failed to set GNSS fix retry");
   1f6d2:	4b70      	ldr	r3, [pc, #448]	; (1f894 <entrypoint_gnss+0x298>)
   1f6d4:	e7d0      	b.n	1f678 <entrypoint_gnss+0x7c>
    if (nrf_modem_gnss_fix_interval_set(fix_interval) != 0) {
   1f6d6:	2078      	movs	r0, #120	; 0x78
   1f6d8:	f00c fa08 	bl	2baec <nrf_modem_gnss_fix_interval_set>
   1f6dc:	4605      	mov	r5, r0
   1f6de:	b108      	cbz	r0, 1f6e4 <entrypoint_gnss+0xe8>
        LOG_ERR("Failed to set GNSS fix interval");
   1f6e0:	4b6d      	ldr	r3, [pc, #436]	; (1f898 <entrypoint_gnss+0x29c>)
   1f6e2:	e7be      	b.n	1f662 <entrypoint_gnss+0x66>
    if (nrf_modem_gnss_start() != 0) {
   1f6e4:	f00c f96e 	bl	2b9c4 <nrf_modem_gnss_start>
   1f6e8:	4604      	mov	r4, r0
   1f6ea:	b108      	cbz	r0, 1f6f0 <entrypoint_gnss+0xf4>
        LOG_ERR("Failed to start GNSS");
   1f6ec:	4b6b      	ldr	r3, [pc, #428]	; (1f89c <entrypoint_gnss+0x2a0>)
   1f6ee:	e7c3      	b.n	1f678 <entrypoint_gnss+0x7c>
    if (nrf_modem_gnss_prio_mode_enable() != 0)
   1f6f0:	f00c f9be 	bl	2ba70 <nrf_modem_gnss_prio_mode_enable>
   1f6f4:	b148      	cbz	r0, 1f70a <entrypoint_gnss+0x10e>
        LOG_ERR("Failed to prioritize GNSS over LTE");
   1f6f6:	4b6a      	ldr	r3, [pc, #424]	; (1f8a0 <entrypoint_gnss+0x2a4>)
   1f6f8:	2201      	movs	r2, #1
   1f6fa:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f6fe:	4620      	mov	r0, r4
   1f700:	4623      	mov	r3, r4
   1f702:	495d      	ldr	r1, [pc, #372]	; (1f878 <entrypoint_gnss+0x27c>)
   1f704:	9400      	str	r4, [sp, #0]
   1f706:	f00f fff9 	bl	2f6fc <z_log_msg_runtime_create.constprop.0>
    bool gnss_prioritized = false;
   1f70a:	2400      	movs	r4, #0
	return z_impl_k_uptime_ticks();
   1f70c:	f014 f8bf 	bl	3388e <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   1f710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    unsigned insuffcient_time_window_cnt = 0;
   1f714:	46a1      	mov	r9, r4
   1f716:	fba0 0302 	umull	r0, r3, r0, r2
   1f71a:	fb02 3101 	mla	r1, r2, r1, r3
    fix_timestamp = k_uptime_get();
   1f71e:	4e61      	ldr	r6, [pc, #388]	; (1f8a4 <entrypoint_gnss+0x2a8>)
   1f720:	0bc0      	lsrs	r0, r0, #15
   1f722:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1f726:	0bc9      	lsrs	r1, r1, #15
   1f728:	e9c6 0100 	strd	r0, r1, [r6]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1f72c:	4d5e      	ldr	r5, [pc, #376]	; (1f8a8 <entrypoint_gnss+0x2ac>)
            if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_DEADLINE_MISSED) {
   1f72e:	4f5f      	ldr	r7, [pc, #380]	; (1f8ac <entrypoint_gnss+0x2b0>)
   1f730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f734:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f738:	2102      	movs	r1, #2
   1f73a:	485b      	ldr	r0, [pc, #364]	; (1f8a8 <entrypoint_gnss+0x2ac>)
   1f73c:	f00d fd0e 	bl	2d15c <z_impl_k_poll>
        if (events[0].state == K_POLL_STATE_SEM_AVAILABLE && k_sem_take(events[0].sem, K_NO_WAIT) == 0) {
   1f740:	68eb      	ldr	r3, [r5, #12]
   1f742:	f403 23fc 	and.w	r3, r3, #516096	; 0x7e000
   1f746:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1f74a:	d16f      	bne.n	1f82c <entrypoint_gnss+0x230>
   1f74c:	6928      	ldr	r0, [r5, #16]
	return z_impl_k_sem_take(sem, timeout);
   1f74e:	2200      	movs	r2, #0
   1f750:	2300      	movs	r3, #0
   1f752:	f00c ff5d 	bl	2c610 <z_impl_k_sem_take>
   1f756:	2800      	cmp	r0, #0
   1f758:	d168      	bne.n	1f82c <entrypoint_gnss+0x230>
            if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_NOT_ENOUGH_WINDOW_TIME) {
   1f75a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   1f75e:	06da      	lsls	r2, r3, #27
   1f760:	d51d      	bpl.n	1f79e <entrypoint_gnss+0x1a2>
                insuffcient_time_window_cnt++;
   1f762:	f109 0901 	add.w	r9, r9, #1
                if(insuffcient_time_window_cnt >= 3)
   1f766:	f1b9 0f02 	cmp.w	r9, #2
   1f76a:	d918      	bls.n	1f79e <entrypoint_gnss+0x1a2>
                    if (gnss_prioritized == false)
   1f76c:	b9bc      	cbnz	r4, 1f79e <entrypoint_gnss+0x1a2>
                        if (nrf_modem_gnss_prio_mode_enable() != 0)
   1f76e:	f00c f97f 	bl	2ba70 <nrf_modem_gnss_prio_mode_enable>
   1f772:	b148      	cbz	r0, 1f788 <entrypoint_gnss+0x18c>
                            LOG_ERR("Failed to prioritize GNSS over LTE");
   1f774:	4b4a      	ldr	r3, [pc, #296]	; (1f8a0 <entrypoint_gnss+0x2a4>)
   1f776:	2201      	movs	r2, #1
   1f778:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f77c:	4620      	mov	r0, r4
   1f77e:	4623      	mov	r3, r4
   1f780:	493d      	ldr	r1, [pc, #244]	; (1f878 <entrypoint_gnss+0x27c>)
   1f782:	9400      	str	r4, [sp, #0]
   1f784:	f00f ffba 	bl	2f6fc <z_log_msg_runtime_create.constprop.0>
                        LOG_INF("Insufficient GNSS time windows, priortizing GNSS over LTE");
   1f788:	4b49      	ldr	r3, [pc, #292]	; (1f8b0 <entrypoint_gnss+0x2b4>)
   1f78a:	2203      	movs	r2, #3
   1f78c:	9302      	str	r3, [sp, #8]
   1f78e:	2300      	movs	r3, #0
   1f790:	4939      	ldr	r1, [pc, #228]	; (1f878 <entrypoint_gnss+0x27c>)
   1f792:	4618      	mov	r0, r3
   1f794:	e9cd 3300 	strd	r3, r3, [sp]
   1f798:	f00f ffb0 	bl	2f6fc <z_log_msg_runtime_create.constprop.0>
                        gnss_prioritized = true;
   1f79c:	2401      	movs	r4, #1
            if (last_pvt.flags & NRF_MODEM_GNSS_PVT_FLAG_FIX_VALID) {
   1f79e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
   1f7a2:	07db      	lsls	r3, r3, #31
   1f7a4:	d542      	bpl.n	1f82c <entrypoint_gnss+0x230>
                LOG_INF("GNSS get a valid fix [%f][%f] after %d", last_pvt.latitude, last_pvt.longitude, (k_uptime_get() - fix_timestamp) / 1000);
   1f7a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
   1f7aa:	ed97 8b02 	vldr	d8, [r7, #8]
	return z_impl_k_uptime_ticks();
   1f7ae:	f014 f86e 	bl	3388e <z_impl_k_uptime_ticks>
   1f7b2:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
   1f7b6:	fba0 0309 	umull	r0, r3, r0, r9
   1f7ba:	fb09 3101 	mla	r1, r9, r1, r3
   1f7be:	e9d6 3200 	ldrd	r3, r2, [r6]
   1f7c2:	0bc0      	lsrs	r0, r0, #15
   1f7c4:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1f7c8:	1ac0      	subs	r0, r0, r3
   1f7ca:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   1f7ce:	eb61 0102 	sbc.w	r1, r1, r2
   1f7d2:	2300      	movs	r3, #0
   1f7d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f7d8:	f7fd faea 	bl	1cdb0 <__aeabi_uldivmod>
   1f7dc:	2400      	movs	r4, #0
   1f7de:	4b35      	ldr	r3, [pc, #212]	; (1f8b4 <entrypoint_gnss+0x2b8>)
   1f7e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1f7e4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f7e8:	ed8d 8b06 	vstr	d8, [sp, #24]
   1f7ec:	4623      	mov	r3, r4
   1f7ee:	2203      	movs	r2, #3
   1f7f0:	4620      	mov	r0, r4
   1f7f2:	e9cd ab04 	strd	sl, fp, [sp, #16]
   1f7f6:	4920      	ldr	r1, [pc, #128]	; (1f878 <entrypoint_gnss+0x27c>)
   1f7f8:	9400      	str	r4, [sp, #0]
   1f7fa:	f00f ff7f 	bl	2f6fc <z_log_msg_runtime_create.constprop.0>
   1f7fe:	f014 f846 	bl	3388e <z_impl_k_uptime_ticks>
   1f802:	fba0 0309 	umull	r0, r3, r0, r9
   1f806:	fb09 3101 	mla	r1, r9, r1, r3
                insuffcient_time_window_cnt = 0;
   1f80a:	46a1      	mov	r9, r4
                last_latitude = last_pvt.latitude;
   1f80c:	4b2a      	ldr	r3, [pc, #168]	; (1f8b8 <entrypoint_gnss+0x2bc>)
   1f80e:	0bc0      	lsrs	r0, r0, #15
   1f810:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
   1f814:	0bc9      	lsrs	r1, r1, #15
                fix_timestamp = k_uptime_get();
   1f816:	e9c6 0100 	strd	r0, r1, [r6]
                last_latitude = last_pvt.latitude;
   1f81a:	e9d7 0100 	ldrd	r0, r1, [r7]
   1f81e:	e9c3 0100 	strd	r0, r1, [r3]
                last_longtitude = last_pvt.longitude;
   1f822:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1f826:	4b25      	ldr	r3, [pc, #148]	; (1f8bc <entrypoint_gnss+0x2c0>)
   1f828:	e9c3 0100 	strd	r0, r1, [r3]
        if (events[1].state == K_POLL_STATE_MSGQ_DATA_AVAILABLE && k_msgq_get(events[1].msgq, &nmea_data, K_NO_WAIT) == 0) {
   1f82c:	6a2b      	ldr	r3, [r5, #32]
   1f82e:	f403 23fc 	and.w	r3, r3, #516096	; 0x7e000
   1f832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   1f836:	d109      	bne.n	1f84c <entrypoint_gnss+0x250>
   1f838:	6a68      	ldr	r0, [r5, #36]	; 0x24
	return z_impl_k_msgq_get(msgq, data, timeout);
   1f83a:	2200      	movs	r2, #0
   1f83c:	2300      	movs	r3, #0
   1f83e:	4641      	mov	r1, r8
   1f840:	f00c fd7e 	bl	2c340 <z_impl_k_msgq_get>
   1f844:	b910      	cbnz	r0, 1f84c <entrypoint_gnss+0x250>
            k_free(nmea_data);
   1f846:	980a      	ldr	r0, [sp, #40]	; 0x28
   1f848:	f014 f9a7 	bl	33b9a <k_free>
        events[0].state = K_POLL_STATE_NOT_READY;
   1f84c:	68eb      	ldr	r3, [r5, #12]
   1f84e:	f36f 3352 	bfc	r3, #13, #6
   1f852:	60eb      	str	r3, [r5, #12]
        events[1].state = K_POLL_STATE_NOT_READY; 
   1f854:	6a2b      	ldr	r3, [r5, #32]
   1f856:	f36f 3352 	bfc	r3, #13, #6
   1f85a:	622b      	str	r3, [r5, #32]
    while (1) {
   1f85c:	e768      	b.n	1f730 <entrypoint_gnss+0x134>
   1f85e:	bf00      	nop
   1f860:	00035f3d 	.word	0x00035f3d
   1f864:	200117a0 	.word	0x200117a0
   1f868:	2000cb60 	.word	0x2000cb60
   1f86c:	0001f4c9 	.word	0x0001f4c9
   1f870:	2000d110 	.word	0x2000d110
   1f874:	00035f49 	.word	0x00035f49
   1f878:	00034a78 	.word	0x00034a78
   1f87c:	00035f65 	.word	0x00035f65
   1f880:	0001f555 	.word	0x0001f555
   1f884:	00035f8d 	.word	0x00035f8d
   1f888:	00036064 	.word	0x00036064
   1f88c:	00035fae 	.word	0x00035fae
   1f890:	00035fca 	.word	0x00035fca
   1f894:	00035fef 	.word	0x00035fef
   1f898:	0003600c 	.word	0x0003600c
   1f89c:	0003602c 	.word	0x0003602c
   1f8a0:	00036041 	.word	0x00036041
   1f8a4:	2000cb58 	.word	0x2000cb58
   1f8a8:	2000c500 	.word	0x2000c500
   1f8ac:	2000cc58 	.word	0x2000cc58
   1f8b0:	00036088 	.word	0x00036088
   1f8b4:	000360c2 	.word	0x000360c2
   1f8b8:	2000cc48 	.word	0x2000cc48
   1f8bc:	2000cc50 	.word	0x2000cc50

0001f8c0 <set>:
#define PLMN_STR_MAX_LEN		8 /* MCC + MNC + quotes */

static char almanac_checksum[64];

static int set(const char *key, size_t len_rd, settings_read_cb read_cb, void *cb_arg)
{
   1f8c0:	b570      	push	{r4, r5, r6, lr}
   1f8c2:	4615      	mov	r5, r2
   1f8c4:	461e      	mov	r6, r3
	int len;
	int key_len;
	const char *next;

	if (!key) {
   1f8c6:	4604      	mov	r4, r0
{
   1f8c8:	b086      	sub	sp, #24
	if (!key) {
   1f8ca:	b920      	cbnz	r0, 1f8d6 <set+0x16>
		return -ENOENT;
   1f8cc:	f06f 0401 	mvn.w	r4, #1

		return 0;
	}

	return -ENOENT;
}
   1f8d0:	4620      	mov	r0, r4
   1f8d2:	b006      	add	sp, #24
   1f8d4:	bd70      	pop	{r4, r5, r6, pc}
	key_len = settings_name_next(key, &next);
   1f8d6:	a905      	add	r1, sp, #20
   1f8d8:	f011 f86d 	bl	309b6 <settings_name_next>
	if (!strncmp(key, "almanac_checksum", key_len)) {
   1f8dc:	490c      	ldr	r1, [pc, #48]	; (1f910 <set+0x50>)
	key_len = settings_name_next(key, &next);
   1f8de:	4602      	mov	r2, r0
	if (!strncmp(key, "almanac_checksum", key_len)) {
   1f8e0:	4620      	mov	r0, r4
   1f8e2:	f014 fb6e 	bl	33fc2 <strncmp>
   1f8e6:	4604      	mov	r4, r0
   1f8e8:	2800      	cmp	r0, #0
   1f8ea:	d1ef      	bne.n	1f8cc <set+0xc>
		len = read_cb(cb_arg, &almanac_checksum, sizeof(almanac_checksum));
   1f8ec:	2240      	movs	r2, #64	; 0x40
   1f8ee:	4630      	mov	r0, r6
   1f8f0:	4908      	ldr	r1, [pc, #32]	; (1f914 <set+0x54>)
   1f8f2:	47a8      	blx	r5
		if (len < sizeof(almanac_checksum)) {
   1f8f4:	283f      	cmp	r0, #63	; 0x3f
   1f8f6:	d8eb      	bhi.n	1f8d0 <set+0x10>
			LOG_ERR("Failed to read almanac checksum from settings");
   1f8f8:	4b07      	ldr	r3, [pc, #28]	; (1f918 <set+0x58>)
   1f8fa:	2201      	movs	r2, #1
   1f8fc:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f900:	4620      	mov	r0, r4
   1f902:	4623      	mov	r3, r4
   1f904:	4905      	ldr	r1, [pc, #20]	; (1f91c <set+0x5c>)
   1f906:	9400      	str	r4, [sp, #0]
   1f908:	f00f ff07 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
   1f90c:	e7e0      	b.n	1f8d0 <set+0x10>
   1f90e:	bf00      	nop
   1f910:	00036a89 	.word	0x00036a89
   1f914:	2000e1e8 	.word	0x2000e1e8
   1f918:	000360f5 	.word	0x000360f5
   1f91c:	00034a78 	.word	0x00034a78

0001f920 <assistance_init>:

	LOG_INF("Injected location lat-long: [%.6f-%.6f] for MCC %u", mcc_info->lat, mcc_info->lon, mcc);
}

int assistance_init(struct k_work_q *assistance_work_q)
{
   1f920:	b530      	push	{r4, r5, lr}
   1f922:	b085      	sub	sp, #20
	ARG_UNUSED(assistance_work_q);

	int err;

	err = settings_subsys_init();
   1f924:	f001 fc0c 	bl	21140 <settings_subsys_init>
	if (err) {
   1f928:	4604      	mov	r4, r0
   1f92a:	b168      	cbz	r0, 1f948 <assistance_init+0x28>
		LOG_ERR("Settings subsystem initialization failed, error %d", err);
   1f92c:	4b2d      	ldr	r3, [pc, #180]	; (1f9e4 <assistance_init+0xc4>)
   1f92e:	9003      	str	r0, [sp, #12]
		return err;
	}

	err = settings_register(&assistance_settings);
	if (err) {
		LOG_ERR("Registering settings handler failed, error %d", err);
   1f930:	9302      	str	r3, [sp, #8]
   1f932:	2300      	movs	r3, #0
   1f934:	2201      	movs	r2, #1
   1f936:	4618      	mov	r0, r3
   1f938:	e9cd 3300 	strd	r3, r3, [sp]
   1f93c:	492a      	ldr	r1, [pc, #168]	; (1f9e8 <assistance_init+0xc8>)
   1f93e:	f00f feec 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
	}

	factory_almanac_write();

	return 0;
}
   1f942:	4620      	mov	r0, r4
   1f944:	b005      	add	sp, #20
   1f946:	bd30      	pop	{r4, r5, pc}
	err = settings_register(&assistance_settings);
   1f948:	4828      	ldr	r0, [pc, #160]	; (1f9ec <assistance_init+0xcc>)
   1f94a:	f001 faf9 	bl	20f40 <settings_register>
	if (err) {
   1f94e:	4604      	mov	r4, r0
   1f950:	b110      	cbz	r0, 1f958 <assistance_init+0x38>
		LOG_ERR("Registering settings handler failed, error %d", err);
   1f952:	4b27      	ldr	r3, [pc, #156]	; (1f9f0 <assistance_init+0xd0>)
   1f954:	9003      	str	r0, [sp, #12]
   1f956:	e7eb      	b.n	1f930 <assistance_init+0x10>
	err = settings_load();
   1f958:	f011 f80a 	bl	30970 <settings_load>
	if (err) {
   1f95c:	4604      	mov	r4, r0
   1f95e:	b110      	cbz	r0, 1f966 <assistance_init+0x46>
		LOG_ERR("Loading settings failed, error %d", err);
   1f960:	4b24      	ldr	r3, [pc, #144]	; (1f9f4 <assistance_init+0xd4>)
   1f962:	9003      	str	r0, [sp, #12]
   1f964:	e7e4      	b.n	1f930 <assistance_init+0x10>
	if (!strncmp(almanac_checksum, FACTORY_ALMANAC_CHECKSUM, sizeof(almanac_checksum))) {
   1f966:	2240      	movs	r2, #64	; 0x40
   1f968:	4923      	ldr	r1, [pc, #140]	; (1f9f8 <assistance_init+0xd8>)
   1f96a:	4824      	ldr	r0, [pc, #144]	; (1f9fc <assistance_init+0xdc>)
   1f96c:	f014 fb29 	bl	33fc2 <strncmp>
   1f970:	b948      	cbnz	r0, 1f986 <assistance_init+0x66>
		LOG_INF("Factory almanac has already been written, skipping writing");
   1f972:	4b23      	ldr	r3, [pc, #140]	; (1fa00 <assistance_init+0xe0>)
   1f974:	2203      	movs	r2, #3
   1f976:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f97a:	4623      	mov	r3, r4
   1f97c:	491a      	ldr	r1, [pc, #104]	; (1f9e8 <assistance_init+0xc8>)
   1f97e:	9400      	str	r4, [sp, #0]
		LOG_ERR("Failed to write factory almanac");
   1f980:	f00f fecb 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
		return;
   1f984:	e7dd      	b.n	1f942 <assistance_init+0x22>
	err = nrf_modem_at_printf("AT%%XFILEWRITE=1,\"%s\",\"%s\"",
   1f986:	4a1c      	ldr	r2, [pc, #112]	; (1f9f8 <assistance_init+0xd8>)
   1f988:	491e      	ldr	r1, [pc, #120]	; (1fa04 <assistance_init+0xe4>)
   1f98a:	481f      	ldr	r0, [pc, #124]	; (1fa08 <assistance_init+0xe8>)
   1f98c:	f00b fbe4 	bl	2b158 <nrf_modem_at_printf>
	if (err != 0) {
   1f990:	4605      	mov	r5, r0
   1f992:	b140      	cbz	r0, 1f9a6 <assistance_init+0x86>
		LOG_ERR("Failed to write factory almanac");
   1f994:	4b1d      	ldr	r3, [pc, #116]	; (1fa0c <assistance_init+0xec>)
   1f996:	2201      	movs	r2, #1
   1f998:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f99c:	4620      	mov	r0, r4
   1f99e:	4623      	mov	r3, r4
   1f9a0:	4911      	ldr	r1, [pc, #68]	; (1f9e8 <assistance_init+0xc8>)
   1f9a2:	9400      	str	r4, [sp, #0]
   1f9a4:	e7ec      	b.n	1f980 <assistance_init+0x60>
	LOG_INF("Wrote factory almanac");
   1f9a6:	4b1a      	ldr	r3, [pc, #104]	; (1fa10 <assistance_init+0xf0>)
   1f9a8:	2203      	movs	r2, #3
   1f9aa:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1f9ae:	490e      	ldr	r1, [pc, #56]	; (1f9e8 <assistance_init+0xc8>)
   1f9b0:	4623      	mov	r3, r4
   1f9b2:	9400      	str	r4, [sp, #0]
   1f9b4:	f00f feb1 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
	err = settings_save_one("assistance/almanac_checksum",
   1f9b8:	2240      	movs	r2, #64	; 0x40
   1f9ba:	490f      	ldr	r1, [pc, #60]	; (1f9f8 <assistance_init+0xd8>)
   1f9bc:	4815      	ldr	r0, [pc, #84]	; (1fa14 <assistance_init+0xf4>)
   1f9be:	f001 fa3d 	bl	20e3c <settings_save_one>
	if (err) {
   1f9c2:	4604      	mov	r4, r0
   1f9c4:	2800      	cmp	r0, #0
   1f9c6:	d0bc      	beq.n	1f942 <assistance_init+0x22>
		LOG_ERR("Failed to write almanac checksum to settings, error %d", err);
   1f9c8:	4b13      	ldr	r3, [pc, #76]	; (1fa18 <assistance_init+0xf8>)
   1f9ca:	9003      	str	r0, [sp, #12]
   1f9cc:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1f9d0:	2201      	movs	r2, #1
   1f9d2:	462b      	mov	r3, r5
   1f9d4:	4628      	mov	r0, r5
   1f9d6:	4904      	ldr	r1, [pc, #16]	; (1f9e8 <assistance_init+0xc8>)
   1f9d8:	9500      	str	r5, [sp, #0]
   1f9da:	f00f fe9e 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
	return 0;
   1f9de:	462c      	mov	r4, r5
   1f9e0:	e7af      	b.n	1f942 <assistance_init+0x22>
   1f9e2:	bf00      	nop
   1f9e4:	00036123 	.word	0x00036123
   1f9e8:	00034a78 	.word	0x00034a78
   1f9ec:	2000c528 	.word	0x2000c528
   1f9f0:	00036156 	.word	0x00036156
   1f9f4:	00036184 	.word	0x00036184
   1f9f8:	000361a6 	.word	0x000361a6
   1f9fc:	2000e1e8 	.word	0x2000e1e8
   1fa00:	000361e7 	.word	0x000361e7
   1fa04:	00036222 	.word	0x00036222
   1fa08:	00036a2d 	.word	0x00036a2d
   1fa0c:	00036a48 	.word	0x00036a48
   1fa10:	00036a68 	.word	0x00036a68
   1fa14:	00036a7e 	.word	0x00036a7e
   1fa18:	00036a9a 	.word	0x00036a9a

0001fa1c <assistance_request>:

int assistance_request(struct nrf_modem_gnss_agps_data_frame *agps_request)
{
   1fa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (agps_request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   1fa20:	6883      	ldr	r3, [r0, #8]
{
   1fa22:	4605      	mov	r5, r0
	if (agps_request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   1fa24:	071a      	lsls	r2, r3, #28
{
   1fa26:	b0b8      	sub	sp, #224	; 0xe0
	if (agps_request->data_flags & NRF_MODEM_GNSS_AGPS_SYS_TIME_AND_SV_TOW_REQUEST) {
   1fa28:	d51f      	bpl.n	1fa6a <assistance_request+0x4e>
	struct nrf_modem_gnss_agps_data_system_time_and_sv_tow gps_time = { 0 };
   1fa2a:	2290      	movs	r2, #144	; 0x90
   1fa2c:	2100      	movs	r1, #0
   1fa2e:	a814      	add	r0, sp, #80	; 0x50
   1fa30:	f014 f91d 	bl	33c6e <memset>
	ret = nrf_modem_at_scanf("AT+CCLK?",
   1fa34:	ab0c      	add	r3, sp, #48	; 0x30
   1fa36:	9302      	str	r3, [sp, #8]
   1fa38:	ab0d      	add	r3, sp, #52	; 0x34
   1fa3a:	9301      	str	r3, [sp, #4]
   1fa3c:	ac0b      	add	r4, sp, #44	; 0x2c
   1fa3e:	ab0e      	add	r3, sp, #56	; 0x38
   1fa40:	9300      	str	r3, [sp, #0]
   1fa42:	4968      	ldr	r1, [pc, #416]	; (1fbe4 <assistance_request+0x1c8>)
   1fa44:	4868      	ldr	r0, [pc, #416]	; (1fbe8 <assistance_request+0x1cc>)
   1fa46:	9403      	str	r4, [sp, #12]
   1fa48:	ab0f      	add	r3, sp, #60	; 0x3c
   1fa4a:	aa10      	add	r2, sp, #64	; 0x40
   1fa4c:	f00b fc68 	bl	2b320 <nrf_modem_at_scanf>
	if (ret != 6) {
   1fa50:	2806      	cmp	r0, #6
	ret = nrf_modem_at_scanf("AT+CCLK?",
   1fa52:	4606      	mov	r6, r0
	if (ret != 6) {
   1fa54:	d029      	beq.n	1faaa <assistance_request+0x8e>
		LOG_WRN("Couldn't read current time from modem, time assistance unavailable");
   1fa56:	4b65      	ldr	r3, [pc, #404]	; (1fbec <assistance_request+0x1d0>)
   1fa58:	2202      	movs	r2, #2
   1fa5a:	9302      	str	r3, [sp, #8]
   1fa5c:	2300      	movs	r3, #0
   1fa5e:	4964      	ldr	r1, [pc, #400]	; (1fbf0 <assistance_request+0x1d4>)
   1fa60:	4618      	mov	r0, r3
   1fa62:	e9cd 3300 	strd	r3, r3, [sp]
   1fa66:	f00f fe58 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
		time_inject();
	}

	if (agps_request->data_flags & NRF_MODEM_GNSS_AGPS_POSITION_REQUEST) {
   1fa6a:	68ab      	ldr	r3, [r5, #8]
   1fa6c:	06db      	lsls	r3, r3, #27
   1fa6e:	d518      	bpl.n	1faa2 <assistance_request+0x86>
	struct nrf_modem_gnss_agps_data_location location = { 0 };
   1fa70:	2210      	movs	r2, #16
   1fa72:	2100      	movs	r1, #0
   1fa74:	a814      	add	r0, sp, #80	; 0x50
   1fa76:	f014 f8fa 	bl	33c6e <memset>
	err = nrf_modem_at_scanf(
   1fa7a:	495e      	ldr	r1, [pc, #376]	; (1fbf4 <assistance_request+0x1d8>)
   1fa7c:	485e      	ldr	r0, [pc, #376]	; (1fbf8 <assistance_request+0x1dc>)
   1fa7e:	aa0b      	add	r2, sp, #44	; 0x2c
   1fa80:	f00b fc4e 	bl	2b320 <nrf_modem_at_scanf>
	if (err != 1) {
   1fa84:	2801      	cmp	r0, #1
	err = nrf_modem_at_scanf(
   1fa86:	4680      	mov	r8, r0
	if (err != 1) {
   1fa88:	f04f 0700 	mov.w	r7, #0
   1fa8c:	d04a      	beq.n	1fb24 <assistance_request+0x108>
		LOG_WRN("Couldn't read PLMN from modem, location assistance unavailable");
   1fa8e:	4b5b      	ldr	r3, [pc, #364]	; (1fbfc <assistance_request+0x1e0>)
   1fa90:	2202      	movs	r2, #2
   1fa92:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1fa96:	4638      	mov	r0, r7
   1fa98:	463b      	mov	r3, r7
   1fa9a:	4955      	ldr	r1, [pc, #340]	; (1fbf0 <assistance_request+0x1d4>)
   1fa9c:	9700      	str	r7, [sp, #0]
   1fa9e:	f00f fe3c 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
		location_inject();
	}

	return 0;
}
   1faa2:	2000      	movs	r0, #0
   1faa4:	b038      	add	sp, #224	; 0xe0
   1faa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	date_time.tm_year = date_time.tm_year + 2000 - 1900; /* years since 1900 */
   1faaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
	utc_sec = timeutil_timegm64(&date_time);
   1faac:	4620      	mov	r0, r4
	date_time.tm_year = date_time.tm_year + 2000 - 1900; /* years since 1900 */
   1faae:	3364      	adds	r3, #100	; 0x64
   1fab0:	9310      	str	r3, [sp, #64]	; 0x40
	date_time.tm_mon--; /* months since January */
   1fab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	return (utc_sec - GPS_TO_UNIX_UTC_OFFSET_SECONDS) + GPS_TO_UTC_LEAP_SECONDS;
   1fab4:	4c52      	ldr	r4, [pc, #328]	; (1fc00 <assistance_request+0x1e4>)
	date_time.tm_mon--; /* months since January */
   1fab6:	3b01      	subs	r3, #1
   1fab8:	930f      	str	r3, [sp, #60]	; 0x3c
	utc_sec = timeutil_timegm64(&date_time);
   1faba:	f000 fced 	bl	20498 <timeutil_timegm64>
	return (utc_sec - GPS_TO_UNIX_UTC_OFFSET_SECONDS) + GPS_TO_UTC_LEAP_SECONDS;
   1fabe:	1904      	adds	r4, r0, r4
   1fac0:	f161 0700 	sbc.w	r7, r1, #0
	*gps_day = (uint16_t)(gps_sec / SEC_PER_DAY);
   1fac4:	2300      	movs	r3, #0
   1fac6:	4a4f      	ldr	r2, [pc, #316]	; (1fc04 <assistance_request+0x1e8>)
   1fac8:	4620      	mov	r0, r4
   1faca:	4639      	mov	r1, r7
   1facc:	f7fd f920 	bl	1cd10 <__aeabi_ldivmod>
	*gps_time_of_day = (uint32_t)(gps_sec % SEC_PER_DAY);
   1fad0:	2300      	movs	r3, #0
	*gps_day = (uint16_t)(gps_sec / SEC_PER_DAY);
   1fad2:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
	*gps_time_of_day = (uint32_t)(gps_sec % SEC_PER_DAY);
   1fad6:	4639      	mov	r1, r7
   1fad8:	4620      	mov	r0, r4
   1fada:	4a4a      	ldr	r2, [pc, #296]	; (1fc04 <assistance_request+0x1e8>)
   1fadc:	f7fd f918 	bl	1cd10 <__aeabi_ldivmod>
	ret = nrf_modem_gnss_agps_write(&gps_time, sizeof(gps_time),
   1fae0:	2190      	movs	r1, #144	; 0x90
	*gps_time_of_day = (uint32_t)(gps_sec % SEC_PER_DAY);
   1fae2:	9215      	str	r2, [sp, #84]	; 0x54
	ret = nrf_modem_gnss_agps_write(&gps_time, sizeof(gps_time),
   1fae4:	a814      	add	r0, sp, #80	; 0x50
   1fae6:	4632      	mov	r2, r6
   1fae8:	f013 fb55 	bl	33196 <nrf_modem_gnss_agps_write>
	if (ret != 0) {
   1faec:	4603      	mov	r3, r0
   1faee:	b158      	cbz	r0, 1fb08 <assistance_request+0xec>
		LOG_ERR("Failed to inject time, error %d", ret);
   1faf0:	4b45      	ldr	r3, [pc, #276]	; (1fc08 <assistance_request+0x1ec>)
   1faf2:	9003      	str	r0, [sp, #12]
   1faf4:	9302      	str	r3, [sp, #8]
   1faf6:	2300      	movs	r3, #0
   1faf8:	2201      	movs	r2, #1
   1fafa:	4618      	mov	r0, r3
   1fafc:	e9cd 3300 	strd	r3, r3, [sp]
   1fb00:	493b      	ldr	r1, [pc, #236]	; (1fbf0 <assistance_request+0x1d4>)
   1fb02:	f00f fe0a 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
		return;
   1fb06:	e7b0      	b.n	1fa6a <assistance_request+0x4e>
	LOG_INF("Injected time (GPS day %u, GPS time of day %u)",
   1fb08:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1fb0a:	4939      	ldr	r1, [pc, #228]	; (1fbf0 <assistance_request+0x1d4>)
   1fb0c:	9204      	str	r2, [sp, #16]
   1fb0e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
   1fb12:	9000      	str	r0, [sp, #0]
   1fb14:	9203      	str	r2, [sp, #12]
   1fb16:	4a3d      	ldr	r2, [pc, #244]	; (1fc0c <assistance_request+0x1f0>)
   1fb18:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1fb1c:	2203      	movs	r2, #3
   1fb1e:	f00f fdfc 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
   1fb22:	e7a2      	b.n	1fa6a <assistance_request+0x4e>
	mcc = strtol(plmn_str + 1, NULL, 10);
   1fb24:	220a      	movs	r2, #10
   1fb26:	4639      	mov	r1, r7
   1fb28:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
	plmn_str[4] = '\0';
   1fb2c:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
	mcc = strtol(plmn_str + 1, NULL, 10);
   1fb30:	f00e fa56 	bl	2dfe0 <strtol>
   1fb34:	4605      	mov	r5, r0
	mcc_info = mcc_lookup(mcc);
   1fb36:	b280      	uxth	r0, r0
   1fb38:	f000 f870 	bl	1fc1c <mcc_lookup>
	if (mcc_info == NULL) {
   1fb3c:	b2ad      	uxth	r5, r5
   1fb3e:	4604      	mov	r4, r0
   1fb40:	b950      	cbnz	r0, 1fb58 <assistance_request+0x13c>
		LOG_WRN("No location found for MCC %u", mcc);
   1fb42:	4b33      	ldr	r3, [pc, #204]	; (1fc10 <assistance_request+0x1f4>)
   1fb44:	2202      	movs	r2, #2
   1fb46:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1fb4a:	4929      	ldr	r1, [pc, #164]	; (1fbf0 <assistance_request+0x1d4>)
   1fb4c:	4603      	mov	r3, r0
   1fb4e:	9503      	str	r5, [sp, #12]
   1fb50:	9000      	str	r0, [sp, #0]
   1fb52:	f00f fde2 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
		return;
   1fb56:	e7a4      	b.n	1faa2 <assistance_request+0x86>
	location.latitude = lat_convert(mcc_info->lat);
   1fb58:	6843      	ldr	r3, [r0, #4]
   1fb5a:	ee00 3a10 	vmov	s0, r3
   1fb5e:	f000 f86f 	bl	1fc40 <lat_convert>
   1fb62:	9014      	str	r0, [sp, #80]	; 0x50
	location.longitude = lon_convert(mcc_info->lon);
   1fb64:	68a3      	ldr	r3, [r4, #8]
   1fb66:	ee00 3a10 	vmov	s0, r3
   1fb6a:	f000 f875 	bl	1fc58 <lon_convert>
   1fb6e:	9015      	str	r0, [sp, #84]	; 0x54
	location.unc_semimajor = mcc_info->unc_semimajor;
   1fb70:	78a3      	ldrb	r3, [r4, #2]
	err = nrf_modem_gnss_agps_write(&location, sizeof(location), NRF_MODEM_GNSS_AGPS_LOCATION);
   1fb72:	2207      	movs	r2, #7
	location.unc_semimajor = mcc_info->unc_semimajor;
   1fb74:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
	location.unc_semiminor = mcc_info->unc_semiminor;
   1fb78:	7863      	ldrb	r3, [r4, #1]
	err = nrf_modem_gnss_agps_write(&location, sizeof(location), NRF_MODEM_GNSS_AGPS_LOCATION);
   1fb7a:	2110      	movs	r1, #16
	location.unc_semiminor = mcc_info->unc_semiminor;
   1fb7c:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
	location.orientation_major = mcc_info->orientation;
   1fb80:	78e3      	ldrb	r3, [r4, #3]
	err = nrf_modem_gnss_agps_write(&location, sizeof(location), NRF_MODEM_GNSS_AGPS_LOCATION);
   1fb82:	a814      	add	r0, sp, #80	; 0x50
	location.orientation_major = mcc_info->orientation;
   1fb84:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	location.confidence = mcc_info->confidence;
   1fb88:	7823      	ldrb	r3, [r4, #0]
   1fb8a:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
		location.unc_altitude = 255; /* altitude not used */
   1fb8e:	23ff      	movs	r3, #255	; 0xff
   1fb90:	f88d 305d 	strb.w	r3, [sp, #93]	; 0x5d
	err = nrf_modem_gnss_agps_write(&location, sizeof(location), NRF_MODEM_GNSS_AGPS_LOCATION);
   1fb94:	f013 faff 	bl	33196 <nrf_modem_gnss_agps_write>
	if (err) {
   1fb98:	4606      	mov	r6, r0
   1fb9a:	b160      	cbz	r0, 1fbb6 <assistance_request+0x19a>
		LOG_ERR("Failed to inject location for MCC %u, error %d", mcc, err);
   1fb9c:	4b1d      	ldr	r3, [pc, #116]	; (1fc14 <assistance_request+0x1f8>)
   1fb9e:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1fba2:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1fba6:	4642      	mov	r2, r8
   1fba8:	463b      	mov	r3, r7
   1fbaa:	4638      	mov	r0, r7
   1fbac:	4910      	ldr	r1, [pc, #64]	; (1fbf0 <assistance_request+0x1d4>)
   1fbae:	9700      	str	r7, [sp, #0]
   1fbb0:	f00f fdb3 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
		return;
   1fbb4:	e775      	b.n	1faa2 <assistance_request+0x86>
	LOG_INF("Injected location lat-long: [%.6f-%.6f] for MCC %u", mcc_info->lat, mcc_info->lon, mcc);
   1fbb6:	9508      	str	r5, [sp, #32]
   1fbb8:	68a0      	ldr	r0, [r4, #8]
   1fbba:	f7fc fd29 	bl	1c610 <__aeabi_f2d>
   1fbbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1fbc2:	6860      	ldr	r0, [r4, #4]
   1fbc4:	f7fc fd24 	bl	1c610 <__aeabi_f2d>
   1fbc8:	4b13      	ldr	r3, [pc, #76]	; (1fc18 <assistance_request+0x1fc>)
   1fbca:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1fbce:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1fbd2:	2203      	movs	r2, #3
   1fbd4:	4633      	mov	r3, r6
   1fbd6:	4630      	mov	r0, r6
   1fbd8:	4905      	ldr	r1, [pc, #20]	; (1fbf0 <assistance_request+0x1d4>)
   1fbda:	9600      	str	r6, [sp, #0]
   1fbdc:	f00f fd9d 	bl	2f71a <z_log_msg_runtime_create.constprop.0>
   1fbe0:	e75f      	b.n	1faa2 <assistance_request+0x86>
   1fbe2:	bf00      	nop
   1fbe4:	00036ad1 	.word	0x00036ad1
   1fbe8:	00036aeb 	.word	0x00036aeb
   1fbec:	00036af4 	.word	0x00036af4
   1fbf0:	00034a78 	.word	0x00034a78
   1fbf4:	00036b86 	.word	0x00036b86
   1fbf8:	00036bab 	.word	0x00036bab
   1fbfc:	00036bb7 	.word	0x00036bb7
   1fc00:	ed2ac292 	.word	0xed2ac292
   1fc04:	00015180 	.word	0x00015180
   1fc08:	00036b37 	.word	0x00036b37
   1fc0c:	00036b57 	.word	0x00036b57
   1fc10:	00036bf6 	.word	0x00036bf6
   1fc14:	00036c13 	.word	0x00036c13
   1fc18:	00036c42 	.word	0x00036c42

0001fc1c <mcc_lookup>:
	{ 100, 119, 119,   0,  -13.46f,   27.77f, 645 }, /* Zambia */
	{ 100, 115, 115,   0,  -19.00f,   29.85f, 648 }, /* Zimbabwe */
};

const struct mcc_table *mcc_lookup(uint16_t mcc)
{
   1fc1c:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(mcc_table); i++) {
   1fc1e:	2200      	movs	r2, #0
		if (mcc_table[i].mcc == mcc) {
   1fc20:	240e      	movs	r4, #14
   1fc22:	4906      	ldr	r1, [pc, #24]	; (1fc3c <mcc_lookup+0x20>)
   1fc24:	fb04 1302 	mla	r3, r4, r2, r1
   1fc28:	899d      	ldrh	r5, [r3, #12]
   1fc2a:	4285      	cmp	r5, r0
   1fc2c:	d101      	bne.n	1fc32 <mcc_lookup+0x16>
			return &mcc_table[i];
   1fc2e:	4618      	mov	r0, r3
		}
	}

	return NULL;
}
   1fc30:	bd30      	pop	{r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(mcc_table); i++) {
   1fc32:	3201      	adds	r2, #1
   1fc34:	2aed      	cmp	r2, #237	; 0xed
   1fc36:	d1f5      	bne.n	1fc24 <mcc_lookup+0x8>
	return NULL;
   1fc38:	2000      	movs	r0, #0
   1fc3a:	e7f9      	b.n	1fc30 <mcc_lookup+0x14>
   1fc3c:	00036c80 	.word	0x00036c80

0001fc40 <lat_convert>:

int32_t lat_convert(float lat)
{
	return (int32_t)(lat * LAT_CONV);
   1fc40:	eddf 7a04 	vldr	s15, [pc, #16]	; 1fc54 <lat_convert+0x14>
   1fc44:	ee20 0a27 	vmul.f32	s0, s0, s15
}
   1fc48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1fc4c:	ee17 0a90 	vmov	r0, s15
   1fc50:	4770      	bx	lr
   1fc52:	bf00      	nop
   1fc54:	47b60b61 	.word	0x47b60b61

0001fc58 <lon_convert>:

int32_t lon_convert(float lon)
{
	return (int32_t)(lon * LON_CONV);
   1fc58:	eddf 7a04 	vldr	s15, [pc, #16]	; 1fc6c <lon_convert+0x14>
   1fc5c:	ee20 0a27 	vmul.f32	s0, s0, s15
}
   1fc60:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   1fc64:	ee17 0a90 	vmov	r0, s15
   1fc68:	4770      	bx	lr
   1fc6a:	bf00      	nop
   1fc6c:	47360b61 	.word	0x47360b61

0001fc70 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   1fc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc74:	b08d      	sub	sp, #52	; 0x34
   1fc76:	461f      	mov	r7, r3
   1fc78:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   1fc7a:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1fc7e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   1fc82:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1fc84:	1c53      	adds	r3, r2, #1
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   1fc86:	0782      	lsls	r2, r0, #30
{
   1fc88:	4605      	mov	r5, r0
   1fc8a:	460e      	mov	r6, r1
   1fc8c:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1fc90:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
   1fc92:	f040 8217 	bne.w	200c4 <cbvprintf_package+0x454>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   1fc96:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   1fc98:	2800      	cmp	r0, #0
   1fc9a:	f040 8216 	bne.w	200ca <cbvprintf_package+0x45a>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   1fc9e:	f001 0607 	and.w	r6, r1, #7
   1fca2:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   1fca4:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   1fca8:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
   1fcac:	f04f 0804 	mov.w	r8, #4
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   1fcb0:	4652      	mov	r2, sl
	bool parsing = false;
   1fcb2:	46d1      	mov	r9, sl
	size = sizeof(char *);
   1fcb4:	4641      	mov	r1, r8
	s = fmt--;
   1fcb6:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   1fcb8:	f8cd a00c 	str.w	sl, [sp, #12]

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
   1fcbc:	b105      	cbz	r5, 1fcc0 <cbvprintf_package+0x50>
				*(const char **)buf = s;
   1fcbe:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1fcc0:	9804      	ldr	r0, [sp, #16]
   1fcc2:	2800      	cmp	r0, #0
   1fcc4:	dc07      	bgt.n	1fcd6 <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   1fcc6:	48cf      	ldr	r0, [pc, #828]	; (20004 <cbvprintf_package+0x394>)
   1fcc8:	4287      	cmp	r7, r0
   1fcca:	f0c0 813f 	bcc.w	1ff4c <cbvprintf_package+0x2dc>
   1fcce:	48ce      	ldr	r0, [pc, #824]	; (20008 <cbvprintf_package+0x398>)
   1fcd0:	4287      	cmp	r7, r0
   1fcd2:	f080 813b 	bcs.w	1ff4c <cbvprintf_package+0x2dc>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
   1fcd6:	9802      	ldr	r0, [sp, #8]
   1fcd8:	f010 0e02 	ands.w	lr, r0, #2
   1fcdc:	f000 814f 	beq.w	1ff7e <cbvprintf_package+0x30e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1fce0:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   1fce4:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1fce6:	f1be 0f00 	cmp.w	lr, #0
   1fcea:	f000 8135 	beq.w	1ff58 <cbvprintf_package+0x2e8>
   1fcee:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1fcf2:	f0c0 8131 	bcc.w	1ff58 <cbvprintf_package+0x2e8>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
   1fcf6:	f06f 0015 	mvn.w	r0, #21
   1fcfa:	e0fb      	b.n	1fef4 <cbvprintf_package+0x284>
			switch (*fmt) {
   1fcfc:	282b      	cmp	r0, #43	; 0x2b
   1fcfe:	d833      	bhi.n	1fd68 <cbvprintf_package+0xf8>
   1fd00:	281f      	cmp	r0, #31
   1fd02:	d811      	bhi.n	1fd28 <cbvprintf_package+0xb8>
				parsing = false;
   1fd04:	f04f 0900 	mov.w	r9, #0
			if (*++fmt == '\0') {
   1fd08:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1fd0c:	2800      	cmp	r0, #0
   1fd0e:	f000 816e 	beq.w	1ffee <cbvprintf_package+0x37e>
			if (!parsing) {
   1fd12:	f1b9 0f00 	cmp.w	r9, #0
   1fd16:	d1f1      	bne.n	1fcfc <cbvprintf_package+0x8c>
				if (*fmt == '%') {
   1fd18:	2825      	cmp	r0, #37	; 0x25
   1fd1a:	d1f5      	bne.n	1fd08 <cbvprintf_package+0x98>
					parsing = true;
   1fd1c:	f04f 0901 	mov.w	r9, #1
				align = VA_STACK_ALIGN(ptrdiff_t);
   1fd20:	f04f 0804 	mov.w	r8, #4
				buf += size;
   1fd24:	4641      	mov	r1, r8
   1fd26:	e7ef      	b.n	1fd08 <cbvprintf_package+0x98>
			switch (*fmt) {
   1fd28:	3820      	subs	r0, #32
   1fd2a:	280b      	cmp	r0, #11
   1fd2c:	d8ea      	bhi.n	1fd04 <cbvprintf_package+0x94>
   1fd2e:	f20f 0c08 	addw	ip, pc, #8
   1fd32:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   1fd36:	bf00      	nop
   1fd38:	0001fd09 	.word	0x0001fd09
   1fd3c:	0001fd05 	.word	0x0001fd05
   1fd40:	0001fd05 	.word	0x0001fd05
   1fd44:	0001fd09 	.word	0x0001fd09
   1fd48:	0001fd05 	.word	0x0001fd05
   1fd4c:	0001fd05 	.word	0x0001fd05
   1fd50:	0001fd05 	.word	0x0001fd05
   1fd54:	0001fd05 	.word	0x0001fd05
   1fd58:	0001fd05 	.word	0x0001fd05
   1fd5c:	0001fd05 	.word	0x0001fd05
   1fd60:	0001ff17 	.word	0x0001ff17
   1fd64:	0001fd09 	.word	0x0001fd09
   1fd68:	382d      	subs	r0, #45	; 0x2d
   1fd6a:	fa5f fc80 	uxtb.w	ip, r0
   1fd6e:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
   1fd72:	d8c7      	bhi.n	1fd04 <cbvprintf_package+0x94>
   1fd74:	284d      	cmp	r0, #77	; 0x4d
   1fd76:	d8c5      	bhi.n	1fd04 <cbvprintf_package+0x94>
   1fd78:	f20f 0c04 	addw	ip, pc, #4
   1fd7c:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   1fd80:	0001fd09 	.word	0x0001fd09
   1fd84:	0001fd09 	.word	0x0001fd09
   1fd88:	0001fd05 	.word	0x0001fd05
   1fd8c:	0001fd09 	.word	0x0001fd09
   1fd90:	0001fd09 	.word	0x0001fd09
   1fd94:	0001fd09 	.word	0x0001fd09
   1fd98:	0001fd09 	.word	0x0001fd09
   1fd9c:	0001fd09 	.word	0x0001fd09
   1fda0:	0001fd09 	.word	0x0001fd09
   1fda4:	0001fd09 	.word	0x0001fd09
   1fda8:	0001fd09 	.word	0x0001fd09
   1fdac:	0001fd09 	.word	0x0001fd09
   1fdb0:	0001fd09 	.word	0x0001fd09
   1fdb4:	0001fd05 	.word	0x0001fd05
   1fdb8:	0001fd05 	.word	0x0001fd05
   1fdbc:	0001fd05 	.word	0x0001fd05
   1fdc0:	0001fd05 	.word	0x0001fd05
   1fdc4:	0001fd05 	.word	0x0001fd05
   1fdc8:	0001fd05 	.word	0x0001fd05
   1fdcc:	0001fd05 	.word	0x0001fd05
   1fdd0:	0001fed5 	.word	0x0001fed5
   1fdd4:	0001fd05 	.word	0x0001fd05
   1fdd8:	0001fd05 	.word	0x0001fd05
   1fddc:	0001fd05 	.word	0x0001fd05
   1fde0:	0001fed5 	.word	0x0001fed5
   1fde4:	0001fed5 	.word	0x0001fed5
   1fde8:	0001fed5 	.word	0x0001fed5
   1fdec:	0001fd05 	.word	0x0001fd05
   1fdf0:	0001fd05 	.word	0x0001fd05
   1fdf4:	0001fd05 	.word	0x0001fd05
   1fdf8:	0001fd05 	.word	0x0001fd05
   1fdfc:	0001fd09 	.word	0x0001fd09
   1fe00:	0001fd05 	.word	0x0001fd05
   1fe04:	0001fd05 	.word	0x0001fd05
   1fe08:	0001fd05 	.word	0x0001fd05
   1fe0c:	0001fd05 	.word	0x0001fd05
   1fe10:	0001fd05 	.word	0x0001fd05
   1fe14:	0001fd05 	.word	0x0001fd05
   1fe18:	0001fd05 	.word	0x0001fd05
   1fe1c:	0001fd05 	.word	0x0001fd05
   1fe20:	0001fd05 	.word	0x0001fd05
   1fe24:	0001fd05 	.word	0x0001fd05
   1fe28:	0001fd05 	.word	0x0001fd05
   1fe2c:	0001feb9 	.word	0x0001feb9
   1fe30:	0001fd05 	.word	0x0001fd05
   1fe34:	0001fd05 	.word	0x0001fd05
   1fe38:	0001fd05 	.word	0x0001fd05
   1fe3c:	0001fd05 	.word	0x0001fd05
   1fe40:	0001fd05 	.word	0x0001fd05
   1fe44:	0001fd05 	.word	0x0001fd05
   1fe48:	0001fd05 	.word	0x0001fd05
   1fe4c:	0001fd05 	.word	0x0001fd05
   1fe50:	0001fed5 	.word	0x0001fed5
   1fe54:	0001fd05 	.word	0x0001fd05
   1fe58:	0001feb9 	.word	0x0001feb9
   1fe5c:	0001feb9 	.word	0x0001feb9
   1fe60:	0001fed5 	.word	0x0001fed5
   1fe64:	0001fed5 	.word	0x0001fed5
   1fe68:	0001fed5 	.word	0x0001fed5
   1fe6c:	0001fd09 	.word	0x0001fd09
   1fe70:	0001feb9 	.word	0x0001feb9
   1fe74:	0001ff05 	.word	0x0001ff05
   1fe78:	0001fd05 	.word	0x0001fd05
   1fe7c:	0001fd09 	.word	0x0001fd09
   1fe80:	0001fd05 	.word	0x0001fd05
   1fe84:	0001ff0b 	.word	0x0001ff0b
   1fe88:	0001feb9 	.word	0x0001feb9
   1fe8c:	0001ff0b 	.word	0x0001ff0b
   1fe90:	0001fd05 	.word	0x0001fd05
   1fe94:	0001fd05 	.word	0x0001fd05
   1fe98:	0001ff13 	.word	0x0001ff13
   1fe9c:	0001fd21 	.word	0x0001fd21
   1fea0:	0001feb9 	.word	0x0001feb9
   1fea4:	0001fd05 	.word	0x0001fd05
   1fea8:	0001fd05 	.word	0x0001fd05
   1feac:	0001feb9 	.word	0x0001feb9
   1feb0:	0001fd05 	.word	0x0001fd05
   1feb4:	0001fd21 	.word	0x0001fd21
				if (fmt[-1] == 'l') {
   1feb8:	f813 0c01 	ldrb.w	r0, [r3, #-1]
   1febc:	286c      	cmp	r0, #108	; 0x6c
   1febe:	d13f      	bne.n	1ff40 <cbvprintf_package+0x2d0>
					if (fmt[-2] == 'l') {
   1fec0:	2000      	movs	r0, #0
   1fec2:	f813 1c02 	ldrb.w	r1, [r3, #-2]
				parsing = false;
   1fec6:	4681      	mov	r9, r0
					if (fmt[-2] == 'l') {
   1fec8:	296c      	cmp	r1, #108	; 0x6c
   1feca:	d03c      	beq.n	1ff46 <cbvprintf_package+0x2d6>
				align = VA_STACK_ALIGN(void *);
   1fecc:	f04f 0804 	mov.w	r8, #4
						size = sizeof(long long);
   1fed0:	4641      	mov	r1, r8
   1fed2:	e021      	b.n	1ff18 <cbvprintf_package+0x2a8>
					v.ld = va_arg(ap, long double);
   1fed4:	f10b 0b07 	add.w	fp, fp, #7
   1fed8:	f02b 0b07 	bic.w	fp, fp, #7
				buf = (void *) ROUND_UP(buf, align);
   1fedc:	3407      	adds	r4, #7
   1fede:	f024 0407 	bic.w	r4, r4, #7
					v.ld = va_arg(ap, long double);
   1fee2:	e8fb 8902 	ldrd	r8, r9, [fp], #8
				if (buf0 != NULL) {
   1fee6:	b155      	cbz	r5, 1fefe <cbvprintf_package+0x28e>
					if (BUF_OFFSET + size > len) {
   1fee8:	eb0e 0004 	add.w	r0, lr, r4
   1feec:	42b0      	cmp	r0, r6
   1feee:	d904      	bls.n	1fefa <cbvprintf_package+0x28a>
						return -ENOSPC;
   1fef0:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   1fef4:	b00d      	add	sp, #52	; 0x34
   1fef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						*(long double *)buf = v.ld;
   1fefa:	e9c4 8900 	strd	r8, r9, [r4]
				parsing = false;
   1fefe:	f04f 0900 	mov.w	r9, #0
				buf += size;
   1ff02:	3408      	adds	r4, #8
   1ff04:	f04f 0808 	mov.w	r8, #8
   1ff08:	e70c      	b.n	1fd24 <cbvprintf_package+0xb4>
			switch (*fmt) {
   1ff0a:	2000      	movs	r0, #0
				parsing = false;
   1ff0c:	f04f 0900 	mov.w	r9, #0
   1ff10:	e7dc      	b.n	1fecc <cbvprintf_package+0x25c>
				is_str_arg = true;
   1ff12:	4648      	mov	r0, r9
   1ff14:	e7fa      	b.n	1ff0c <cbvprintf_package+0x29c>
			switch (*fmt) {
   1ff16:	2000      	movs	r0, #0
		buf = (void *) ROUND_UP(buf, align);
   1ff18:	3c01      	subs	r4, #1
   1ff1a:	4444      	add	r4, r8
   1ff1c:	f1c8 0c00 	rsb	ip, r8, #0
   1ff20:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   1ff24:	b125      	cbz	r5, 1ff30 <cbvprintf_package+0x2c0>
   1ff26:	eba1 0c05 	sub.w	ip, r1, r5
   1ff2a:	44a4      	add	ip, r4
   1ff2c:	4566      	cmp	r6, ip
   1ff2e:	d3df      	bcc.n	1fef0 <cbvprintf_package+0x280>
		if (is_str_arg) {
   1ff30:	2800      	cmp	r0, #0
   1ff32:	d041      	beq.n	1ffb8 <cbvprintf_package+0x348>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1ff34:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
   1ff36:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1ff3a:	3801      	subs	r0, #1
   1ff3c:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
   1ff3e:	e6bd      	b.n	1fcbc <cbvprintf_package+0x4c>
   1ff40:	2000      	movs	r0, #0
				parsing = false;
   1ff42:	4681      	mov	r9, r0
   1ff44:	e7e8      	b.n	1ff18 <cbvprintf_package+0x2a8>
						align = VA_STACK_ALIGN(long long);
   1ff46:	f04f 0808 	mov.w	r8, #8
   1ff4a:	e7c1      	b.n	1fed0 <cbvprintf_package+0x260>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   1ff4c:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1ff4e:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
   1ff52:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
   1ff56:	e6c5      	b.n	1fce4 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   1ff58:	2a0f      	cmp	r2, #15
   1ff5a:	f63f aecc 	bhi.w	1fcf6 <cbvprintf_package+0x86>
				if (buf0 != NULL) {
   1ff5e:	b1c5      	cbz	r5, 1ff92 <cbvprintf_package+0x322>
					str_ptr_pos[s_idx] = s_ptr_idx;
   1ff60:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
   1ff64:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
   1ff68:	4496      	add	lr, r2
   1ff6a:	f1bc 0f00 	cmp.w	ip, #0
   1ff6e:	d00a      	beq.n	1ff86 <cbvprintf_package+0x316>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   1ff70:	f060 007f 	orn	r0, r0, #127	; 0x7f
   1ff74:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
   1ff78:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
   1ff7c:	3201      	adds	r2, #1
			buf += sizeof(char *);
   1ff7e:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   1ff80:	f1c5 0e08 	rsb	lr, r5, #8
   1ff84:	e6c0      	b.n	1fd08 <cbvprintf_package+0x98>
					str_ptr_pos[s_idx] = s_ptr_idx;
   1ff86:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
   1ff8a:	9803      	ldr	r0, [sp, #12]
   1ff8c:	3001      	adds	r0, #1
   1ff8e:	9003      	str	r0, [sp, #12]
   1ff90:	e7f4      	b.n	1ff7c <cbvprintf_package+0x30c>
				} else if (is_ro || rws_pos_en) {
   1ff92:	f1bc 0f00 	cmp.w	ip, #0
   1ff96:	d101      	bne.n	1ff9c <cbvprintf_package+0x32c>
   1ff98:	9801      	ldr	r0, [sp, #4]
   1ff9a:	b108      	cbz	r0, 1ffa0 <cbvprintf_package+0x330>
					len += 1;
   1ff9c:	3601      	adds	r6, #1
   1ff9e:	e7ed      	b.n	1ff7c <cbvprintf_package+0x30c>
					len += strlen(s) + 1 + 1;
   1ffa0:	4638      	mov	r0, r7
   1ffa2:	e9cd 1206 	strd	r1, r2, [sp, #24]
   1ffa6:	9305      	str	r3, [sp, #20]
   1ffa8:	f7fd f87a 	bl	1d0a0 <strlen>
   1ffac:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   1ffb0:	3602      	adds	r6, #2
   1ffb2:	9b05      	ldr	r3, [sp, #20]
   1ffb4:	4406      	add	r6, r0
   1ffb6:	e7e1      	b.n	1ff7c <cbvprintf_package+0x30c>
		} else if (size == sizeof(int)) {
   1ffb8:	2904      	cmp	r1, #4
   1ffba:	d108      	bne.n	1ffce <cbvprintf_package+0x35e>
			int v = va_arg(ap, int);
   1ffbc:	f10b 0c04 	add.w	ip, fp, #4
			if (buf0 != NULL) {
   1ffc0:	b115      	cbz	r5, 1ffc8 <cbvprintf_package+0x358>
			int v = va_arg(ap, int);
   1ffc2:	f8db 0000 	ldr.w	r0, [fp]
   1ffc6:	6020      	str	r0, [r4, #0]
   1ffc8:	46e3      	mov	fp, ip
			buf += sizeof(int);
   1ffca:	3404      	adds	r4, #4
   1ffcc:	e69c      	b.n	1fd08 <cbvprintf_package+0x98>
		} else if (size == sizeof(long long)) {
   1ffce:	2908      	cmp	r1, #8
   1ffd0:	f47f ae91 	bne.w	1fcf6 <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
   1ffd4:	f10b 0b07 	add.w	fp, fp, #7
   1ffd8:	f02b 0007 	bic.w	r0, fp, #7
   1ffdc:	f100 0b08 	add.w	fp, r0, #8
			if (buf0 != NULL) {
   1ffe0:	b11d      	cbz	r5, 1ffea <cbvprintf_package+0x37a>
			long long v = va_arg(ap, long long);
   1ffe2:	ed90 7b00 	vldr	d7, [r0]
					*(long long *)buf = v;
   1ffe6:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
   1ffea:	3408      	adds	r4, #8
   1ffec:	e68c      	b.n	1fd08 <cbvprintf_package+0x98>
	if (BUF_OFFSET / sizeof(int) > 255) {
   1ffee:	1b61      	subs	r1, r4, r5
   1fff0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   1fff4:	f4bf ae7f 	bcs.w	1fcf6 <cbvprintf_package+0x86>
	if (buf0 == NULL) {
   1fff8:	b945      	cbnz	r5, 2000c <cbvprintf_package+0x39c>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   1fffa:	f1a6 0408 	sub.w	r4, r6, #8
   1fffe:	1860      	adds	r0, r4, r1
   20000:	e778      	b.n	1fef4 <cbvprintf_package+0x284>
   20002:	bf00      	nop
   20004:	000346dc 	.word	0x000346dc
   20008:	0003a220 	.word	0x0003a220
	if (rws_pos_en) {
   2000c:	9b01      	ldr	r3, [sp, #4]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   2000e:	0889      	lsrs	r1, r1, #2
	*(char **)buf0 = NULL;
   20010:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   20012:	7029      	strb	r1, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   20014:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
   20018:	b1a3      	cbz	r3, 20044 <cbvprintf_package+0x3d4>
		pkg_hdr->desc.str_cnt = 0;
   2001a:	7068      	strb	r0, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   2001c:	70e9      	strb	r1, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   2001e:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
   20022:	f1ba 0f00 	cmp.w	sl, #0
   20026:	d006      	beq.n	20036 <cbvprintf_package+0x3c6>
		for (i = 0; i < s_idx; i++) {
   20028:	f04f 0c00 	mov.w	ip, #0
   2002c:	a808      	add	r0, sp, #32
			if (BUF_OFFSET + 1 > len) {
   2002e:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
   20032:	4562      	cmp	r2, ip
   20034:	d10a      	bne.n	2004c <cbvprintf_package+0x3dc>
   20036:	f10d 0820 	add.w	r8, sp, #32
   2003a:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
   2003e:	f1c5 0b01 	rsb	fp, r5, #1
   20042:	e039      	b.n	200b8 <cbvprintf_package+0x448>
		pkg_hdr->desc.rw_str_cnt = 0;
   20044:	9b01      	ldr	r3, [sp, #4]
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   20046:	7069      	strb	r1, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   20048:	70eb      	strb	r3, [r5, #3]
   2004a:	e7e8      	b.n	2001e <cbvprintf_package+0x3ae>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   2004c:	f810 1b01 	ldrb.w	r1, [r0], #1
   20050:	060b      	lsls	r3, r1, #24
   20052:	d508      	bpl.n	20066 <cbvprintf_package+0x3f6>
			if (BUF_OFFSET + 1 > len) {
   20054:	eb04 080e 	add.w	r8, r4, lr
   20058:	4546      	cmp	r6, r8
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   2005a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   2005e:	f4ff af47 	bcc.w	1fef0 <cbvprintf_package+0x280>
			*buf++ = pos;
   20062:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
   20066:	f10c 0c01 	add.w	ip, ip, #1
   2006a:	e7e2      	b.n	20032 <cbvprintf_package+0x3c2>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   2006c:	f1ba 0f00 	cmp.w	sl, #0
   20070:	d003      	beq.n	2007a <cbvprintf_package+0x40a>
   20072:	f998 2000 	ldrsb.w	r2, [r8]
   20076:	2a00      	cmp	r2, #0
   20078:	db1c      	blt.n	200b4 <cbvprintf_package+0x444>
		if (rws_pos_en) {
   2007a:	9b01      	ldr	r3, [sp, #4]
   2007c:	bb03      	cbnz	r3, 200c0 <cbvprintf_package+0x450>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   2007e:	f898 2000 	ldrb.w	r2, [r8]
   20082:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   20086:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   2008a:	4638      	mov	r0, r7
   2008c:	f7fd f808 	bl	1d0a0 <strlen>
   20090:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
   20092:	eb04 010b 	add.w	r1, r4, fp
   20096:	4411      	add	r1, r2
   20098:	428e      	cmp	r6, r1
   2009a:	f4ff af29 	bcc.w	1fef0 <cbvprintf_package+0x280>
		*buf++ = str_ptr_pos[i];
   2009e:	f898 1000 	ldrb.w	r1, [r8]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   200a2:	9202      	str	r2, [sp, #8]
   200a4:	f804 1b01 	strb.w	r1, [r4], #1
   200a8:	4620      	mov	r0, r4
   200aa:	4639      	mov	r1, r7
   200ac:	f013 fdbf 	bl	33c2e <memcpy>
		buf += size;
   200b0:	9a02      	ldr	r2, [sp, #8]
   200b2:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   200b4:	f108 0801 	add.w	r8, r8, #1
   200b8:	45c1      	cmp	r9, r8
   200ba:	d1d7      	bne.n	2006c <cbvprintf_package+0x3fc>
	return BUF_OFFSET;
   200bc:	1b60      	subs	r0, r4, r5
   200be:	e719      	b.n	1fef4 <cbvprintf_package+0x284>
			size = 0;
   200c0:	2200      	movs	r2, #0
   200c2:	e7e6      	b.n	20092 <cbvprintf_package+0x422>
		return -EFAULT;
   200c4:	f06f 000d 	mvn.w	r0, #13
   200c8:	e714      	b.n	1fef4 <cbvprintf_package+0x284>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   200ca:	2907      	cmp	r1, #7
   200cc:	f63f adec 	bhi.w	1fca8 <cbvprintf_package+0x38>
   200d0:	e70e      	b.n	1fef0 <cbvprintf_package+0x280>
   200d2:	bf00      	nop

000200d4 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   200d4:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   200d6:	4c0a      	ldr	r4, [pc, #40]	; (20100 <crc8_ccitt+0x2c>)
   200d8:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   200da:	4291      	cmp	r1, r2
   200dc:	d100      	bne.n	200e0 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   200de:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   200e0:	f811 3b01 	ldrb.w	r3, [r1], #1
   200e4:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   200e6:	0903      	lsrs	r3, r0, #4
   200e8:	5ce3      	ldrb	r3, [r4, r3]
   200ea:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   200ee:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   200f0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   200f4:	5ce0      	ldrb	r0, [r4, r3]
   200f6:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   200fa:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   200fc:	e7ed      	b.n	200da <crc8_ccitt+0x6>
   200fe:	bf00      	nop
   20100:	00037976 	.word	0x00037976

00020104 <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   20104:	2803      	cmp	r0, #3
{
   20106:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   20108:	d906      	bls.n	20118 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   2010a:	f010 fdd6 	bl	30cba <__errno>
   2010e:	2309      	movs	r3, #9
   20110:	6003      	str	r3, [r0, #0]
   20112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return -1;
	}

	return 0;
}
   20116:	bd08      	pop	{r3, pc}
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20118:	4b04      	ldr	r3, [pc, #16]	; (2012c <_check_fd+0x28>)
   2011a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   2011e:	3008      	adds	r0, #8
   20120:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   20124:	2b00      	cmp	r3, #0
   20126:	d0f0      	beq.n	2010a <_check_fd+0x6>
	return 0;
   20128:	2000      	movs	r0, #0
   2012a:	e7f4      	b.n	20116 <_check_fd+0x12>
   2012c:	2000d12c 	.word	0x2000d12c

00020130 <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   20130:	b570      	push	{r4, r5, r6, lr}
   20132:	4604      	mov	r4, r0
   20134:	460d      	mov	r5, r1
   20136:	4616      	mov	r6, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   20138:	f7ff ffe4 	bl	20104 <_check_fd>
   2013c:	2800      	cmp	r0, #0
   2013e:	db09      	blt.n	20154 <z_get_fd_obj+0x24>
		return NULL;
	}

	entry = &fdtable[fd];

	if (vtable != NULL && entry->vtable != vtable) {
   20140:	4b06      	ldr	r3, [pc, #24]	; (2015c <z_get_fd_obj+0x2c>)
   20142:	0160      	lsls	r0, r4, #5
   20144:	b145      	cbz	r5, 20158 <z_get_fd_obj+0x28>
   20146:	181a      	adds	r2, r3, r0
   20148:	6852      	ldr	r2, [r2, #4]
   2014a:	42aa      	cmp	r2, r5
   2014c:	d004      	beq.n	20158 <z_get_fd_obj+0x28>
		errno = err;
   2014e:	f010 fdb4 	bl	30cba <__errno>
   20152:	6006      	str	r6, [r0, #0]
		return NULL;
   20154:	2000      	movs	r0, #0
   20156:	e000      	b.n	2015a <z_get_fd_obj+0x2a>
		return NULL;
	}

	return entry->obj;
   20158:	5818      	ldr	r0, [r3, r0]
}
   2015a:	bd70      	pop	{r4, r5, r6, pc}
   2015c:	2000d12c 	.word	0x2000d12c

00020160 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable,
			      struct k_mutex **lock)
{
   20160:	b570      	push	{r4, r5, r6, lr}
   20162:	4604      	mov	r4, r0
   20164:	460e      	mov	r6, r1
   20166:	4615      	mov	r5, r2
	struct fd_entry *entry;

	if (_check_fd(fd) < 0) {
   20168:	f7ff ffcc 	bl	20104 <_check_fd>
   2016c:	2800      	cmp	r0, #0
   2016e:	db0c      	blt.n	2018a <z_get_fd_obj_and_vtable+0x2a>
		return NULL;
	}

	entry = &fdtable[fd];
	*vtable = entry->vtable;
   20170:	4b07      	ldr	r3, [pc, #28]	; (20190 <z_get_fd_obj_and_vtable+0x30>)
   20172:	0161      	lsls	r1, r4, #5
   20174:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   20178:	6862      	ldr	r2, [r4, #4]
   2017a:	6032      	str	r2, [r6, #0]

	if (lock) {
   2017c:	b11d      	cbz	r5, 20186 <z_get_fd_obj_and_vtable+0x26>
		*lock = &entry->lock;
   2017e:	f101 020c 	add.w	r2, r1, #12
   20182:	441a      	add	r2, r3
   20184:	602a      	str	r2, [r5, #0]
	}

	return entry->obj;
   20186:	5858      	ldr	r0, [r3, r1]
}
   20188:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   2018a:	2000      	movs	r0, #0
   2018c:	e7fc      	b.n	20188 <z_get_fd_obj_and_vtable+0x28>
   2018e:	bf00      	nop
   20190:	2000d12c 	.word	0x2000d12c

00020194 <z_reserve_fd>:

int z_reserve_fd(void)
{
   20194:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   20196:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   20198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2019c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   201a0:	4814      	ldr	r0, [pc, #80]	; (201f4 <z_reserve_fd+0x60>)
   201a2:	f00c f927 	bl	2c3f4 <z_impl_k_mutex_lock>
   201a6:	4a14      	ldr	r2, [pc, #80]	; (201f8 <z_reserve_fd+0x64>)
		if (!atomic_get(&fdtable[fd].refcount)) {
   201a8:	0163      	lsls	r3, r4, #5
   201aa:	e8d2 1faf 	lda	r1, [r2]
   201ae:	b179      	cbz	r1, 201d0 <z_reserve_fd+0x3c>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   201b0:	3401      	adds	r4, #1
   201b2:	2c04      	cmp	r4, #4
   201b4:	f102 0220 	add.w	r2, r2, #32
   201b8:	d1f6      	bne.n	201a8 <z_reserve_fd+0x14>
	errno = ENFILE;
   201ba:	f010 fd7e 	bl	30cba <__errno>
   201be:	2317      	movs	r3, #23
	return -1;
   201c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = ENFILE;
   201c4:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   201c6:	480b      	ldr	r0, [pc, #44]	; (201f4 <z_reserve_fd+0x60>)
   201c8:	f00c f98c 	bl	2c4e4 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   201cc:	4620      	mov	r0, r4
   201ce:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   201d0:	e8d2 0fef 	ldaex	r0, [r2]
   201d4:	3001      	adds	r0, #1
   201d6:	e8c2 0fec 	stlex	ip, r0, [r2]
   201da:	f1bc 0f00 	cmp.w	ip, #0
   201de:	d1f7      	bne.n	201d0 <z_reserve_fd+0x3c>
		fdtable[fd].obj = NULL;
   201e0:	4806      	ldr	r0, [pc, #24]	; (201fc <z_reserve_fd+0x68>)
   201e2:	18c2      	adds	r2, r0, r3
   201e4:	50c1      	str	r1, [r0, r3]
		fdtable[fd].vtable = NULL;
   201e6:	6051      	str	r1, [r2, #4]
		k_mutex_init(&fdtable[fd].lock);
   201e8:	330c      	adds	r3, #12
	return z_impl_k_mutex_init(mutex);
   201ea:	4418      	add	r0, r3
   201ec:	f013 f8ce 	bl	3338c <z_impl_k_mutex_init>
   201f0:	e7e9      	b.n	201c6 <z_reserve_fd+0x32>
   201f2:	bf00      	nop
   201f4:	2000c964 	.word	0x2000c964
   201f8:	2000d134 	.word	0x2000d134
   201fc:	2000d12c 	.word	0x2000d12c

00020200 <z_finalize_fd>:

void z_finalize_fd(int fd, void *obj, const struct fd_op_vtable *vtable)
{
   20200:	b410      	push	{r4}
   20202:	4604      	mov	r4, r0
   20204:	4610      	mov	r0, r2
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   20206:	4b0a      	ldr	r3, [pc, #40]	; (20230 <z_finalize_fd+0x30>)
   20208:	0162      	lsls	r2, r4, #5
   2020a:	eb03 1444 	add.w	r4, r3, r4, lsl #5
   2020e:	5099      	str	r1, [r3, r2]
	fdtable[fd].vtable = vtable;
   20210:	6060      	str	r0, [r4, #4]

	/* Let the object know about the lock just in case it needs it
	 * for something. For BSD sockets, the lock is used with condition
	 * variables to avoid keeping the lock for a long period of time.
	 */
	if (vtable && vtable->ioctl) {
   20212:	b148      	cbz	r0, 20228 <z_finalize_fd+0x28>
   20214:	68c4      	ldr	r4, [r0, #12]
   20216:	b13c      	cbz	r4, 20228 <z_finalize_fd+0x28>
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   20218:	320c      	adds	r2, #12
   2021a:	4413      	add	r3, r2
					   &fdtable[fd].lock);
	}
}
   2021c:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)z_fdtable_call_ioctl(vtable, obj, ZFD_IOCTL_SET_LOCK,
   20220:	f240 1205 	movw	r2, #261	; 0x105
   20224:	f00f bab8 	b.w	2f798 <z_fdtable_call_ioctl.constprop.0>
}
   20228:	f85d 4b04 	ldr.w	r4, [sp], #4
   2022c:	4770      	bx	lr
   2022e:	bf00      	nop
   20230:	2000d12c 	.word	0x2000d12c

00020234 <z_free_fd>:

void z_free_fd(int fd)
{
   20234:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   20236:	490d      	ldr	r1, [pc, #52]	; (2026c <z_free_fd+0x38>)
   20238:	0140      	lsls	r0, r0, #5
   2023a:	f100 0308 	add.w	r3, r0, #8
   2023e:	440b      	add	r3, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20240:	e8d3 2faf 	lda	r2, [r3]
		if (!old_rc) {
   20244:	b182      	cbz	r2, 20268 <z_free_fd+0x34>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   20246:	1e54      	subs	r4, r2, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   20248:	e8d3 5fef 	ldaex	r5, [r3]
   2024c:	4295      	cmp	r5, r2
   2024e:	d104      	bne.n	2025a <z_free_fd+0x26>
   20250:	e8c3 4fec 	stlex	ip, r4, [r3]
   20254:	f1bc 0f00 	cmp.w	ip, #0
   20258:	d1f6      	bne.n	20248 <z_free_fd+0x14>
   2025a:	d1f1      	bne.n	20240 <z_free_fd+0xc>
	if (old_rc != 1) {
   2025c:	2a01      	cmp	r2, #1
	fdtable[fd].obj = NULL;
   2025e:	bf01      	itttt	eq
   20260:	2300      	moveq	r3, #0
   20262:	180a      	addeq	r2, r1, r0
   20264:	500b      	streq	r3, [r1, r0]
	fdtable[fd].vtable = NULL;
   20266:	6053      	streq	r3, [r2, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   20268:	bd30      	pop	{r4, r5, pc}
   2026a:	bf00      	nop
   2026c:	2000d12c 	.word	0x2000d12c

00020270 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
   20270:	4b01      	ldr	r3, [pc, #4]	; (20278 <char_out+0x8>)
   20272:	681b      	ldr	r3, [r3, #0]
   20274:	4718      	bx	r3
   20276:	bf00      	nop
   20278:	2000c540 	.word	0x2000c540

0002027c <__printk_hook_install>:
	_char_out = fn;
   2027c:	4b01      	ldr	r3, [pc, #4]	; (20284 <__printk_hook_install+0x8>)
   2027e:	6018      	str	r0, [r3, #0]
}
   20280:	4770      	bx	lr
   20282:	bf00      	nop
   20284:	2000c540 	.word	0x2000c540

00020288 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
   20288:	b507      	push	{r0, r1, r2, lr}
   2028a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2028c:	2100      	movs	r1, #0
   2028e:	4602      	mov	r2, r0
   20290:	9100      	str	r1, [sp, #0]
   20292:	4803      	ldr	r0, [pc, #12]	; (202a0 <vprintk+0x18>)
   20294:	f7fd f814 	bl	1d2c0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
   20298:	b003      	add	sp, #12
   2029a:	f85d fb04 	ldr.w	pc, [sp], #4
   2029e:	bf00      	nop
   202a0:	00020271 	.word	0x00020271

000202a4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   202a4:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   202a6:	2500      	movs	r5, #0
{
   202a8:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   202aa:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   202ae:	4604      	mov	r4, r0
   202b0:	9500      	str	r5, [sp, #0]
   202b2:	a903      	add	r1, sp, #12
   202b4:	4805      	ldr	r0, [pc, #20]	; (202cc <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   202b6:	9505      	str	r5, [sp, #20]
   202b8:	f7fd f802 	bl	1d2c0 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   202bc:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   202c0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   202c2:	bfb8      	it	lt
   202c4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   202c6:	b007      	add	sp, #28
   202c8:	bd30      	pop	{r4, r5, pc}
   202ca:	bf00      	nop
   202cc:	0002f815 	.word	0x0002f815

000202d0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   202d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   202d4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   202d8:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   202da:	f019 0808 	ands.w	r8, r9, #8
{
   202de:	4693      	mov	fp, r2
	if (processing) {
   202e0:	d00e      	beq.n	20300 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
   202e2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   202e4:	bf0c      	ite	eq
   202e6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   202ea:	f049 0920 	orrne.w	r9, r9, #32
   202ee:	f8a0 9018 	strh.w	r9, [r0, #24]
   202f2:	f38b 8811 	msr	BASEPRI, fp
   202f6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   202fa:	b003      	add	sp, #12
   202fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
   20300:	f8df a190 	ldr.w	sl, [pc, #400]	; 20494 <process_event+0x1c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20304:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   20308:	2902      	cmp	r1, #2
   2030a:	d107      	bne.n	2031c <process_event+0x4c>
			evt = process_recheck(mgr);
   2030c:	4620      	mov	r0, r4
   2030e:	f00f faae 	bl	2f86e <process_recheck>
		if (evt == EVT_NOP) {
   20312:	2800      	cmp	r0, #0
   20314:	d0ed      	beq.n	202f2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   20316:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20318:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   2031a:	d14b      	bne.n	203b4 <process_event+0xe4>
			res = mgr->last_res;
   2031c:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2031e:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   20320:	2f00      	cmp	r7, #0
   20322:	da15      	bge.n	20350 <process_event+0x80>
		*clients = mgr->clients;
   20324:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20326:	f021 0107 	bic.w	r1, r1, #7
	list->tail = NULL;
   2032a:	e9c4 8800 	strd	r8, r8, [r4]
   2032e:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   20332:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   20334:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   20336:	8b21      	ldrh	r1, [r4, #24]
   20338:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   2033c:	454a      	cmp	r2, r9
   2033e:	d002      	beq.n	20346 <process_event+0x76>
		if (do_monitors
   20340:	68a3      	ldr	r3, [r4, #8]
   20342:	2b00      	cmp	r3, #0
   20344:	d157      	bne.n	203f6 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   20346:	b90d      	cbnz	r5, 2034c <process_event+0x7c>
		    || (transit != NULL)) {
   20348:	2e00      	cmp	r6, #0
   2034a:	d06f      	beq.n	2042c <process_event+0x15c>
   2034c:	2300      	movs	r3, #0
   2034e:	e053      	b.n	203f8 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   20350:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   20354:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   20356:	2a01      	cmp	r2, #1
   20358:	d81d      	bhi.n	20396 <process_event+0xc6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2035a:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   2035e:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   20360:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   20362:	b289      	uxth	r1, r1
   20364:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   20368:	d10a      	bne.n	20380 <process_event+0xb0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   2036a:	b13d      	cbz	r5, 2037c <process_event+0xac>
   2036c:	462a      	mov	r2, r5
   2036e:	8b63      	ldrh	r3, [r4, #26]
	return node->next;
   20370:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   20372:	3301      	adds	r3, #1
   20374:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   20376:	2a00      	cmp	r2, #0
   20378:	d1fa      	bne.n	20370 <process_event+0xa0>
   2037a:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2037c:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   20380:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   20382:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   20384:	f00f fa73 	bl	2f86e <process_recheck>
   20388:	2800      	cmp	r0, #0
   2038a:	d0d3      	beq.n	20334 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   2038c:	8b23      	ldrh	r3, [r4, #24]
   2038e:	f043 0320 	orr.w	r3, r3, #32
   20392:	8323      	strh	r3, [r4, #24]
   20394:	e7ce      	b.n	20334 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
   20396:	2b04      	cmp	r3, #4
   20398:	d10a      	bne.n	203b0 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   2039a:	f021 0107 	bic.w	r1, r1, #7
   2039e:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   203a0:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   203a2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   203a4:	f00f fa63 	bl	2f86e <process_recheck>
   203a8:	b110      	cbz	r0, 203b0 <process_event+0xe0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   203aa:	f041 0120 	orr.w	r1, r1, #32
   203ae:	8321      	strh	r1, [r4, #24]
   203b0:	2500      	movs	r5, #0
   203b2:	e7bf      	b.n	20334 <process_event+0x64>
		} else if (evt == EVT_START) {
   203b4:	2803      	cmp	r0, #3
   203b6:	d109      	bne.n	203cc <process_event+0xfc>
			transit = mgr->transitions->start;
   203b8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   203ba:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   203be:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   203c0:	f043 0306 	orr.w	r3, r3, #6
}
   203c4:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   203c6:	8323      	strh	r3, [r4, #24]
		res = 0;
   203c8:	462f      	mov	r7, r5
   203ca:	e7b4      	b.n	20336 <process_event+0x66>
		} else if (evt == EVT_STOP) {
   203cc:	2804      	cmp	r0, #4
   203ce:	d106      	bne.n	203de <process_event+0x10e>
			transit = mgr->transitions->stop;
   203d0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   203d2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   203d6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   203d8:	f043 0304 	orr.w	r3, r3, #4
   203dc:	e7f2      	b.n	203c4 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   203de:	2805      	cmp	r0, #5
   203e0:	d106      	bne.n	203f0 <process_event+0x120>
			transit = mgr->transitions->reset;
   203e2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   203e4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   203e8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   203ea:	f043 0305 	orr.w	r3, r3, #5
   203ee:	e7e9      	b.n	203c4 <process_event+0xf4>
   203f0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   203f2:	462e      	mov	r6, r5
   203f4:	e7e8      	b.n	203c8 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   203f6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   203f8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   203fc:	8321      	strh	r1, [r4, #24]
   203fe:	f38b 8811 	msr	BASEPRI, fp
   20402:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   20406:	bb03      	cbnz	r3, 2044a <process_event+0x17a>
	while (!sys_slist_is_empty(list)) {
   20408:	2d00      	cmp	r5, #0
   2040a:	d131      	bne.n	20470 <process_event+0x1a0>
			if (transit != NULL) {
   2040c:	b116      	cbz	r6, 20414 <process_event+0x144>
				transit(mgr, transition_complete);
   2040e:	4651      	mov	r1, sl
   20410:	4620      	mov	r0, r4
   20412:	47b0      	blx	r6
	__asm__ volatile(
   20414:	f04f 0320 	mov.w	r3, #32
   20418:	f3ef 8b11 	mrs	fp, BASEPRI
   2041c:	f383 8812 	msr	BASEPRI_MAX, r3
   20420:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   20424:	8b23      	ldrh	r3, [r4, #24]
   20426:	f023 0308 	bic.w	r3, r3, #8
   2042a:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   2042c:	8b23      	ldrh	r3, [r4, #24]
   2042e:	06da      	lsls	r2, r3, #27
   20430:	d527      	bpl.n	20482 <process_event+0x1b2>
			evt = EVT_COMPLETE;
   20432:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   20434:	f023 0310 	bic.w	r3, r3, #16
   20438:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   2043a:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   2043e:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   20442:	2900      	cmp	r1, #0
   20444:	f47f af60 	bne.w	20308 <process_event+0x38>
out:
   20448:	e753      	b.n	202f2 <process_event+0x22>
	return list->head;
   2044a:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2044c:	2900      	cmp	r1, #0
   2044e:	d0db      	beq.n	20408 <process_event+0x138>
	return node->next;
   20450:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   20454:	463b      	mov	r3, r7
   20456:	4620      	mov	r0, r4
   20458:	f8d1 b004 	ldr.w	fp, [r1, #4]
   2045c:	9201      	str	r2, [sp, #4]
   2045e:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   20460:	9a01      	ldr	r2, [sp, #4]
   20462:	f1b9 0f00 	cmp.w	r9, #0
   20466:	d0cf      	beq.n	20408 <process_event+0x138>
   20468:	4649      	mov	r1, r9
   2046a:	f8d9 9000 	ldr.w	r9, [r9]
   2046e:	e7f1      	b.n	20454 <process_event+0x184>
   20470:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   20472:	463b      	mov	r3, r7
   20474:	4620      	mov	r0, r4
   20476:	9201      	str	r2, [sp, #4]
   20478:	682d      	ldr	r5, [r5, #0]
   2047a:	f00f fa14 	bl	2f8a6 <notify_one>
	while (!sys_slist_is_empty(list)) {
   2047e:	9a01      	ldr	r2, [sp, #4]
   20480:	e7c2      	b.n	20408 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   20482:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   20486:	bf1e      	ittt	ne
   20488:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   2048c:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   2048e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   20490:	e7d3      	b.n	2043a <process_event+0x16a>
   20492:	bf00      	nop
   20494:	0002f8d3 	.word	0x0002f8d3

00020498 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   20498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
	unsigned int d = tm->tm_mday - 1;
   2049c:	68c3      	ldr	r3, [r0, #12]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   2049e:	6944      	ldr	r4, [r0, #20]
	unsigned int d = tm->tm_mday - 1;
   204a0:	1e5f      	subs	r7, r3, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   204a2:	f240 736c 	movw	r3, #1900	; 0x76c
	unsigned int m = tm->tm_mon + 1;
   204a6:	6905      	ldr	r5, [r0, #16]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   204a8:	17e1      	asrs	r1, r4, #31
	unsigned int m = tm->tm_mon + 1;
   204aa:	3501      	adds	r5, #1
	int64_t y = 1900 + (int64_t)tm->tm_year;
   204ac:	18e4      	adds	r4, r4, r3
   204ae:	f141 0100 	adc.w	r1, r1, #0
	y -= m <= 2;
   204b2:	2d02      	cmp	r5, #2
   204b4:	bf8c      	ite	hi
   204b6:	2300      	movhi	r3, #0
   204b8:	2301      	movls	r3, #1
   204ba:	1ae4      	subs	r4, r4, r3
   204bc:	f161 0100 	sbc.w	r1, r1, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   204c0:	2900      	cmp	r1, #0
{
   204c2:	4680      	mov	r8, r0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   204c4:	da55      	bge.n	20572 <timeutil_timegm64+0xda>
   204c6:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   204ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
   204ce:	2300      	movs	r3, #0
   204d0:	1820      	adds	r0, r4, r0
   204d2:	f161 0100 	sbc.w	r1, r1, #0
   204d6:	f7fc fc1b 	bl	1cd10 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   204da:	4b28      	ldr	r3, [pc, #160]	; (2057c <timeutil_timegm64+0xe4>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   204dc:	4602      	mov	r2, r0
	unsigned int yoe = y - era * 400;
   204de:	fb03 4400 	mla	r4, r3, r0, r4
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   204e2:	e9d8 9000 	ldrd	r9, r0, [r8]
   204e6:	233c      	movs	r3, #60	; 0x3c
   204e8:	f8d8 8008 	ldr.w	r8, [r8, #8]
   204ec:	17c6      	asrs	r6, r0, #31
   204ee:	fbc8 0603 	smlal	r0, r6, r8, r3
   204f2:	46b4      	mov	ip, r6
   204f4:	fba0 0603 	umull	r0, r6, r0, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   204f8:	2d02      	cmp	r5, #2
   204fa:	bf8c      	ite	hi
   204fc:	f06f 0e02 	mvnhi.w	lr, #2
   20500:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   20504:	fb03 660c 	mla	r6, r3, ip, r6
   20508:	eb10 0c09 	adds.w	ip, r0, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   2050c:	f240 106d 	movw	r0, #365	; 0x16d
   20510:	ea4f 0394 	mov.w	r3, r4, lsr #2
   20514:	fb00 3304 	mla	r3, r0, r4, r3
   20518:	f04f 0064 	mov.w	r0, #100	; 0x64
   2051c:	fbb4 f4f0 	udiv	r4, r4, r0
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   20520:	eb05 000e 	add.w	r0, r5, lr
   20524:	f04f 0599 	mov.w	r5, #153	; 0x99
   20528:	fb05 f000 	mul.w	r0, r5, r0
   2052c:	f04f 0505 	mov.w	r5, #5
   20530:	f100 0002 	add.w	r0, r0, #2
   20534:	fbb0 f0f5 	udiv	r0, r0, r5
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   20538:	443b      	add	r3, r7
   2053a:	eba3 0304 	sub.w	r3, r3, r4
	return era * 146097 + (time_t)doe - 719468;
   2053e:	4c10      	ldr	r4, [pc, #64]	; (20580 <timeutil_timegm64+0xe8>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   20540:	4403      	add	r3, r0
	return era * 146097 + (time_t)doe - 719468;
   20542:	fba2 0204 	umull	r0, r2, r2, r4
   20546:	fb04 2101 	mla	r1, r4, r1, r2
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   2054a:	eb46 76e9 	adc.w	r6, r6, r9, asr #31
	return era * 146097 + (time_t)doe - 719468;
   2054e:	181b      	adds	r3, r3, r0
   20550:	480c      	ldr	r0, [pc, #48]	; (20584 <timeutil_timegm64+0xec>)
	time += 86400LL * ndays;
   20552:	4a0d      	ldr	r2, [pc, #52]	; (20588 <timeutil_timegm64+0xf0>)
	return era * 146097 + (time_t)doe - 719468;
   20554:	f141 0100 	adc.w	r1, r1, #0
   20558:	181b      	adds	r3, r3, r0
	time += 86400LL * ndays;
   2055a:	fba3 0302 	umull	r0, r3, r3, r2
	return era * 146097 + (time_t)doe - 719468;
   2055e:	f161 0100 	sbc.w	r1, r1, #0
	time += 86400LL * ndays;
   20562:	fb02 3101 	mla	r1, r2, r1, r3
   20566:	eb10 000c 	adds.w	r0, r0, ip

	return time;
}
   2056a:	eb41 0106 	adc.w	r1, r1, r6
   2056e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   20572:	f44f 72c8 	mov.w	r2, #400	; 0x190
   20576:	2300      	movs	r3, #0
   20578:	4620      	mov	r0, r4
   2057a:	e7ac      	b.n	204d6 <timeutil_timegm64+0x3e>
   2057c:	fffffe70 	.word	0xfffffe70
   20580:	00023ab1 	.word	0x00023ab1
   20584:	fff50594 	.word	0xfff50594
   20588:	00015180 	.word	0x00015180

0002058c <extract_decimal>:
{
   2058c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2058e:	4602      	mov	r2, r0
   20590:	6801      	ldr	r1, [r0, #0]
		val = 10U * val + *sp++ - '0';
   20592:	270a      	movs	r7, #10
	size_t val = 0;
   20594:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   20596:	4e07      	ldr	r6, [pc, #28]	; (205b4 <extract_decimal+0x28>)
   20598:	460c      	mov	r4, r1
   2059a:	7823      	ldrb	r3, [r4, #0]
   2059c:	3101      	adds	r1, #1
   2059e:	5d9d      	ldrb	r5, [r3, r6]
   205a0:	076d      	lsls	r5, r5, #29
   205a2:	d401      	bmi.n	205a8 <extract_decimal+0x1c>
	*str = sp;
   205a4:	6014      	str	r4, [r2, #0]
}
   205a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   205a8:	fb07 3300 	mla	r3, r7, r0, r3
   205ac:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   205b0:	e7f2      	b.n	20598 <extract_decimal+0xc>
   205b2:	bf00      	nop
   205b4:	00039f71 	.word	0x00039f71

000205b8 <encode_uint>:
{
   205b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205bc:	4615      	mov	r5, r2
   205be:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   205c0:	78d3      	ldrb	r3, [r2, #3]
   205c2:	4a22      	ldr	r2, [pc, #136]	; (2064c <encode_uint+0x94>)
	switch (specifier) {
   205c4:	2b6f      	cmp	r3, #111	; 0x6f
   205c6:	f813 b002 	ldrb.w	fp, [r3, r2]
{
   205ca:	4680      	mov	r8, r0
   205cc:	460f      	mov	r7, r1
   205ce:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   205d2:	d029      	beq.n	20628 <encode_uint+0x70>
   205d4:	d824      	bhi.n	20620 <encode_uint+0x68>
		return 16;
   205d6:	2b58      	cmp	r3, #88	; 0x58
   205d8:	bf14      	ite	ne
   205da:	260a      	movne	r6, #10
   205dc:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   205de:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   205e2:	4632      	mov	r2, r6
   205e4:	2300      	movs	r3, #0
   205e6:	4640      	mov	r0, r8
   205e8:	4639      	mov	r1, r7
   205ea:	f7fc fbe1 	bl	1cdb0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   205ee:	2a09      	cmp	r2, #9
   205f0:	b2d4      	uxtb	r4, r2
   205f2:	d81e      	bhi.n	20632 <encode_uint+0x7a>
   205f4:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   205f6:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   205f8:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   205fa:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   205fe:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   20602:	d301      	bcc.n	20608 <encode_uint+0x50>
   20604:	45d1      	cmp	r9, sl
   20606:	d811      	bhi.n	2062c <encode_uint+0x74>
	if (conv->flag_hash) {
   20608:	782b      	ldrb	r3, [r5, #0]
   2060a:	069b      	lsls	r3, r3, #26
   2060c:	d505      	bpl.n	2061a <encode_uint+0x62>
		if (radix == 8) {
   2060e:	2e08      	cmp	r6, #8
   20610:	d115      	bne.n	2063e <encode_uint+0x86>
			conv->altform_0 = true;
   20612:	78ab      	ldrb	r3, [r5, #2]
   20614:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   20618:	70ab      	strb	r3, [r5, #2]
}
   2061a:	4648      	mov	r0, r9
   2061c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   20620:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   20624:	2b70      	cmp	r3, #112	; 0x70
   20626:	e7d7      	b.n	205d8 <encode_uint+0x20>
	switch (specifier) {
   20628:	2608      	movs	r6, #8
   2062a:	e7d8      	b.n	205de <encode_uint+0x26>
		value /= radix;
   2062c:	4680      	mov	r8, r0
   2062e:	460f      	mov	r7, r1
   20630:	e7d7      	b.n	205e2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   20632:	f1bb 0f01 	cmp.w	fp, #1
   20636:	bf0c      	ite	eq
   20638:	3437      	addeq	r4, #55	; 0x37
   2063a:	3457      	addne	r4, #87	; 0x57
   2063c:	e7db      	b.n	205f6 <encode_uint+0x3e>
		} else if (radix == 16) {
   2063e:	2e10      	cmp	r6, #16
   20640:	d1eb      	bne.n	2061a <encode_uint+0x62>
			conv->altform_0c = true;
   20642:	78ab      	ldrb	r3, [r5, #2]
   20644:	f043 0310 	orr.w	r3, r3, #16
   20648:	e7e6      	b.n	20618 <encode_uint+0x60>
   2064a:	bf00      	nop
   2064c:	00039f71 	.word	0x00039f71

00020650 <nordicsemi_nrf91_init>:
   20650:	f04f 0220 	mov.w	r2, #32
   20654:	f3ef 8311 	mrs	r3, BASEPRI
   20658:	f382 8812 	msr	BASEPRI_MAX, r2
   2065c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   20660:	2101      	movs	r1, #1
   20662:	4a04      	ldr	r2, [pc, #16]	; (20674 <nordicsemi_nrf91_init+0x24>)
   20664:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   20668:	f383 8811 	msr	BASEPRI, r3
   2066c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   20670:	2000      	movs	r0, #0
   20672:	4770      	bx	lr
   20674:	40039000 	.word	0x40039000

00020678 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   20678:	b120      	cbz	r0, 20684 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   2067a:	4b03      	ldr	r3, [pc, #12]	; (20688 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   2067c:	0180      	lsls	r0, r0, #6
   2067e:	f043 0301 	orr.w	r3, r3, #1
   20682:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   20684:	4770      	bx	lr
   20686:	bf00      	nop
   20688:	00034b70 	.word	0x00034b70

0002068c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2068c:	f008 bddc 	b.w	29248 <SystemInit>

00020690 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
   20690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20694:	4682      	mov	sl, r0
   20696:	460f      	mov	r7, r1
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20698:	4b32      	ldr	r3, [pc, #200]	; (20764 <z_log_init.isra.0+0xd4>)
   2069a:	e8d3 5fef 	ldaex	r5, [r3]
   2069e:	1c6a      	adds	r2, r5, #1
   206a0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   206a4:	2900      	cmp	r1, #0
   206a6:	d1f8      	bne.n	2069a <z_log_init.isra.0+0xa>
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
	int i;

	if (atomic_inc(&initialized) != 0) {
   206a8:	b97d      	cbnz	r5, 206ca <z_log_init.isra.0+0x3a>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   206aa:	4c2f      	ldr	r4, [pc, #188]	; (20768 <z_log_init.isra.0+0xd8>)
		return 0;
	}

	/* Assign ids to backends. */
	for (i = 0; i < log_backend_count_get(); i++) {
   206ac:	46a9      	mov	r9, r5
   206ae:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
   206b0:	f04f 0b01 	mov.w	fp, #1
   206b4:	4e2d      	ldr	r6, [pc, #180]	; (2076c <z_log_init.isra.0+0xdc>)
   206b6:	1b36      	subs	r6, r6, r4
   206b8:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   206ba:	45b1      	cmp	r9, r6
   206bc:	db08      	blt.n	206d0 <z_log_init.isra.0+0x40>
			}
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
   206be:	f1ba 0f00 	cmp.w	sl, #0
   206c2:	d002      	beq.n	206ca <z_log_init.isra.0+0x3a>
		mask_cpy &= ~BIT(i);
   206c4:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
   206c8:	b9fd      	cbnz	r5, 2070a <z_log_init.isra.0+0x7a>
			}
		}
	}

	return mask;
}
   206ca:	b003      	add	sp, #12
   206cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
   206d0:	7b23      	ldrb	r3, [r4, #12]
   206d2:	b173      	cbz	r3, 206f2 <z_log_init.isra.0+0x62>
	if (backend->api->init) {
   206d4:	6823      	ldr	r3, [r4, #0]
   206d6:	68da      	ldr	r2, [r3, #12]
   206d8:	b11a      	cbz	r2, 206e2 <z_log_init.isra.0+0x52>
		backend->api->init(backend);
   206da:	4620      	mov	r0, r4
   206dc:	9301      	str	r3, [sp, #4]
   206de:	4790      	blx	r2
   206e0:	9b01      	ldr	r3, [sp, #4]
	if (backend->api->is_ready != NULL) {
   206e2:	691b      	ldr	r3, [r3, #16]
   206e4:	b94b      	cbnz	r3, 206fa <z_log_init.isra.0+0x6a>
				log_backend_enable(backend,
   206e6:	6863      	ldr	r3, [r4, #4]
   206e8:	2204      	movs	r2, #4
   206ea:	4620      	mov	r0, r4
   206ec:	6819      	ldr	r1, [r3, #0]
   206ee:	f000 f8bf 	bl	20870 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   206f2:	f109 0901 	add.w	r9, r9, #1
   206f6:	3410      	adds	r4, #16
   206f8:	e7df      	b.n	206ba <z_log_init.isra.0+0x2a>
		return backend->api->is_ready(backend);
   206fa:	4620      	mov	r0, r4
   206fc:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   206fe:	2800      	cmp	r0, #0
   20700:	d0f1      	beq.n	206e6 <z_log_init.isra.0+0x56>
				mask |= BIT(i);
   20702:	fa0b f309 	lsl.w	r3, fp, r9
   20706:	431d      	orrs	r5, r3
   20708:	e7f3      	b.n	206f2 <z_log_init.isra.0+0x62>
   2070a:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
   2070c:	fa95 f4a5 	rbit	r4, r5
   20710:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
   20714:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   20718:	0126      	lsls	r6, r4, #4
   2071a:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
   2071e:	ea6f 0b03 	mvn.w	fp, r3
   20722:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   20726:	7b23      	ldrb	r3, [r4, #12]
   20728:	b163      	cbz	r3, 20744 <z_log_init.isra.0+0xb4>
	if (backend->api->is_ready != NULL) {
   2072a:	f858 3006 	ldr.w	r3, [r8, r6]
   2072e:	691b      	ldr	r3, [r3, #16]
   20730:	b993      	cbnz	r3, 20758 <z_log_init.isra.0+0xc8>
					   backend->cb->ctx,
   20732:	4446      	add	r6, r8
			log_backend_enable(backend,
   20734:	6873      	ldr	r3, [r6, #4]
   20736:	2204      	movs	r2, #4
   20738:	4620      	mov	r0, r4
   2073a:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   2073c:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
   20740:	f000 f896 	bl	20870 <log_backend_enable>
	while (mask_cpy) {
   20744:	2d00      	cmp	r5, #0
   20746:	d1e1      	bne.n	2070c <z_log_init.isra.0+0x7c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   20748:	b127      	cbz	r7, 20754 <z_log_init.isra.0+0xc4>
	return z_impl_k_sleep(timeout);
   2074a:	f44f 70a4 	mov.w	r0, #328	; 0x148
   2074e:	2100      	movs	r1, #0
   20750:	f00c fb20 	bl	2cd94 <z_impl_k_sleep>
   20754:	464d      	mov	r5, r9
   20756:	e7b7      	b.n	206c8 <z_log_init.isra.0+0x38>
		return backend->api->is_ready(backend);
   20758:	4620      	mov	r0, r4
   2075a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   2075c:	2800      	cmp	r0, #0
   2075e:	d1f1      	bne.n	20744 <z_log_init.isra.0+0xb4>
   20760:	e7e7      	b.n	20732 <z_log_init.isra.0+0xa2>
   20762:	bf00      	nop
   20764:	2000d1b4 	.word	0x2000d1b4
   20768:	00034b00 	.word	0x00034b00
   2076c:	00034b10 	.word	0x00034b10

00020770 <log_format_func_t_get>:
}
   20770:	4b01      	ldr	r3, [pc, #4]	; (20778 <log_format_func_t_get+0x8>)
   20772:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   20776:	4770      	bx	lr
   20778:	00034c68 	.word	0x00034c68

0002077c <log_core_init>:
	panic_mode = false;
   2077c:	2300      	movs	r3, #0
   2077e:	4a05      	ldr	r2, [pc, #20]	; (20794 <log_core_init+0x18>)
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
   20780:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	panic_mode = false;
   20784:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   20786:	4a04      	ldr	r2, [pc, #16]	; (20798 <log_core_init+0x1c>)
   20788:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   2078a:	4b04      	ldr	r3, [pc, #16]	; (2079c <log_core_init+0x20>)
   2078c:	4a04      	ldr	r2, [pc, #16]	; (207a0 <log_core_init+0x24>)
   2078e:	601a      	str	r2, [r3, #0]
		log_output_timestamp_freq_set(freq);
   20790:	f000 ba6c 	b.w	20c6c <log_output_timestamp_freq_set>
   20794:	2000e228 	.word	0x2000e228
   20798:	2000d1b0 	.word	0x2000d1b0
   2079c:	2000c544 	.word	0x2000c544
   207a0:	0002fe63 	.word	0x0002fe63

000207a4 <z_impl_log_panic>:

	return 0;
}

void z_impl_log_panic(void)
{
   207a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct log_backend const *backend;

	if (panic_mode) {
   207a6:	4f0d      	ldr	r7, [pc, #52]	; (207dc <z_impl_log_panic+0x38>)
   207a8:	783d      	ldrb	r5, [r7, #0]
   207aa:	b95d      	cbnz	r5, 207c4 <z_impl_log_panic+0x20>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
   207ac:	4629      	mov	r1, r5
   207ae:	2001      	movs	r0, #1
   207b0:	f7ff ff6e 	bl	20690 <z_log_init.isra.0>
	return __log_backends_end - __log_backends_start;
   207b4:	4c0a      	ldr	r4, [pc, #40]	; (207e0 <z_impl_log_panic+0x3c>)
   207b6:	4e0b      	ldr	r6, [pc, #44]	; (207e4 <z_impl_log_panic+0x40>)
   207b8:	1b36      	subs	r6, r6, r4
   207ba:	1136      	asrs	r6, r6, #4
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	for (int i = 0; i < log_backend_count_get(); i++) {
   207bc:	42b5      	cmp	r5, r6
   207be:	db02      	blt.n	207c6 <z_impl_log_panic+0x22>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
   207c0:	2301      	movs	r3, #1
   207c2:	703b      	strb	r3, [r7, #0]
}
   207c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   207c6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   207c8:	795b      	ldrb	r3, [r3, #5]
   207ca:	b11b      	cbz	r3, 207d4 <z_impl_log_panic+0x30>
	backend->api->panic(backend);
   207cc:	6823      	ldr	r3, [r4, #0]
   207ce:	4620      	mov	r0, r4
   207d0:	689b      	ldr	r3, [r3, #8]
   207d2:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   207d4:	3501      	adds	r5, #1
   207d6:	3410      	adds	r4, #16
   207d8:	e7f0      	b.n	207bc <z_impl_log_panic+0x18>
   207da:	bf00      	nop
   207dc:	2000e228 	.word	0x2000e228
   207e0:	00034b00 	.word	0x00034b00
   207e4:	00034b10 	.word	0x00034b10

000207e8 <z_log_dropped>:
   207e8:	4b08      	ldr	r3, [pc, #32]	; (2080c <z_log_dropped+0x24>)
   207ea:	e8d3 2fef 	ldaex	r2, [r3]
   207ee:	3201      	adds	r2, #1
   207f0:	e8c3 2fe1 	stlex	r1, r2, [r3]
   207f4:	2900      	cmp	r1, #0
   207f6:	d1f8      	bne.n	207ea <z_log_dropped+0x2>
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
   207f8:	b138      	cbz	r0, 2080a <z_log_dropped+0x22>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   207fa:	4b05      	ldr	r3, [pc, #20]	; (20810 <z_log_dropped+0x28>)
   207fc:	e8d3 2fef 	ldaex	r2, [r3]
   20800:	3a01      	subs	r2, #1
   20802:	e8c3 2fe1 	stlex	r1, r2, [r3]
   20806:	2900      	cmp	r1, #0
   20808:	d1f8      	bne.n	207fc <z_log_dropped+0x14>
		atomic_dec(&buffered_cnt);
	}
}
   2080a:	4770      	bx	lr
   2080c:	2000d1b0 	.word	0x2000d1b0
   20810:	2000d1ac 	.word	0x2000d1ac

00020814 <z_log_msg_commit>:
	return (struct log_msg *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg_commit(struct log_msg *msg)
{
   20814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	union log_msg_generic *m = (union log_msg_generic *)msg;

	msg->hdr.timestamp = timestamp_func();
   20816:	4b0c      	ldr	r3, [pc, #48]	; (20848 <z_log_msg_commit+0x34>)
{
   20818:	4606      	mov	r6, r0
	msg->hdr.timestamp = timestamp_func();
   2081a:	681b      	ldr	r3, [r3, #0]
   2081c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   2081e:	2700      	movs	r7, #0
	return __log_backends_end - __log_backends_start;
   20820:	4c0a      	ldr	r4, [pc, #40]	; (2084c <z_log_msg_commit+0x38>)
   20822:	4d0b      	ldr	r5, [pc, #44]	; (20850 <z_log_msg_commit+0x3c>)
	msg->hdr.timestamp = timestamp_func();
   20824:	60b0      	str	r0, [r6, #8]
   20826:	1b2d      	subs	r5, r5, r4
   20828:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   2082a:	42af      	cmp	r7, r5
   2082c:	db00      	blt.n	20830 <z_log_msg_commit+0x1c>
		return;
	}

	mpsc_pbuf_commit(&log_buffer, &m->buf);
	z_log_msg_post_finalize();
}
   2082e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   20830:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   20832:	795b      	ldrb	r3, [r3, #5]
   20834:	b123      	cbz	r3, 20840 <z_log_msg_commit+0x2c>
	backend->api->process(backend, msg);
   20836:	6823      	ldr	r3, [r4, #0]
   20838:	4631      	mov	r1, r6
   2083a:	4620      	mov	r0, r4
   2083c:	681b      	ldr	r3, [r3, #0]
   2083e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   20840:	3701      	adds	r7, #1
   20842:	3410      	adds	r4, #16
   20844:	e7f1      	b.n	2082a <z_log_msg_commit+0x16>
   20846:	bf00      	nop
   20848:	2000c544 	.word	0x2000c544
   2084c:	00034b00 	.word	0x00034b00
   20850:	00034b10 	.word	0x00034b10

00020854 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   20854:	4a04      	ldr	r2, [pc, #16]	; (20868 <log_source_name_get+0x14>)
   20856:	4b05      	ldr	r3, [pc, #20]	; (2086c <log_source_name_get+0x18>)
   20858:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   2085a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   2085e:	bf34      	ite	cc
   20860:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   20864:	2000      	movcs	r0, #0
}
   20866:	4770      	bx	lr
   20868:	00034a48 	.word	0x00034a48
   2086c:	00034b00 	.word	0x00034b00

00020870 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   20870:	4a05      	ldr	r2, [pc, #20]	; (20888 <log_backend_enable+0x18>)
	backend->cb->id = id;
   20872:	6843      	ldr	r3, [r0, #4]
   20874:	1a80      	subs	r0, r0, r2
	backend->cb->active = true;
   20876:	2201      	movs	r2, #1
   20878:	1100      	asrs	r0, r0, #4
   2087a:	3001      	adds	r0, #1

	log_backend_id_set(backend, id);
   2087c:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
   2087e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   20880:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   20882:	f00f baf7 	b.w	2fe74 <z_log_notify_backend_enabled>
   20886:	bf00      	nop
   20888:	00034b00 	.word	0x00034b00

0002088c <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   2088c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20890:	b085      	sub	sp, #20
   20892:	af02      	add	r7, sp, #8
   20894:	4699      	mov	r9, r3
   20896:	e9d7 6b0c 	ldrd	r6, fp, [r7, #48]	; 0x30
   2089a:	e9d7 3a0e 	ldrd	r3, sl, [r7, #56]	; 0x38
   2089e:	4605      	mov	r5, r0
   208a0:	4688      	mov	r8, r1
   208a2:	4614      	mov	r4, r2
	int plen;

	if (fmt) {
   208a4:	b393      	cbz	r3, 2090c <z_impl_z_log_msg_runtime_vcreate+0x80>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   208a6:	2110      	movs	r1, #16
   208a8:	465a      	mov	r2, fp
   208aa:	2000      	movs	r0, #0
   208ac:	f8cd a000 	str.w	sl, [sp]
		va_copy(ap2, ap);
   208b0:	f8c7 a004 	str.w	sl, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   208b4:	f7ff f9dc 	bl	1fc70 <cbvprintf_package>
   208b8:	4601      	mov	r1, r0
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
		va_end(ap2);
   208ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   208bc:	f004 0207 	and.w	r2, r4, #7
   208c0:	f005 0407 	and.w	r4, r5, #7
   208c4:	00e4      	lsls	r4, r4, #3
   208c6:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
   208ca:	4a11      	ldr	r2, [pc, #68]	; (20910 <z_impl_z_log_msg_runtime_vcreate+0x84>)
   208cc:	4d11      	ldr	r5, [pc, #68]	; (20914 <z_impl_z_log_msg_runtime_vcreate+0x88>)
   208ce:	ea02 42c6 	and.w	r2, r2, r6, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   208d2:	3617      	adds	r6, #23
   208d4:	440e      	add	r6, r1
	struct log_msg_desc desc =
   208d6:	ea05 2541 	and.w	r5, r5, r1, lsl #9
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
   208da:	f026 0607 	bic.w	r6, r6, #7
	struct log_msg_desc desc =
   208de:	432c      	orrs	r4, r5
		msg = alloca(msg_wlen * sizeof(int));
   208e0:	ebad 0d06 	sub.w	sp, sp, r6
	struct log_msg_desc desc =
   208e4:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
   208e6:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
   208e8:	b133      	cbz	r3, 208f8 <z_impl_z_log_msg_runtime_vcreate+0x6c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   208ea:	465a      	mov	r2, fp
   208ec:	f8cd a000 	str.w	sl, [sp]
   208f0:	f105 0010 	add.w	r0, r5, #16
   208f4:	f7ff f9bc 	bl	1fc70 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   208f8:	464b      	mov	r3, r9
   208fa:	4622      	mov	r2, r4
   208fc:	4641      	mov	r1, r8
   208fe:	4628      	mov	r0, r5
   20900:	f00f fabb 	bl	2fe7a <z_log_msg_finalize>
	}
}
   20904:	370c      	adds	r7, #12
   20906:	46bd      	mov	sp, r7
   20908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   2090c:	4619      	mov	r1, r3
   2090e:	e7d5      	b.n	208bc <z_impl_z_log_msg_runtime_vcreate+0x30>
   20910:	7ff80000 	.word	0x7ff80000
   20914:	0007fe00 	.word	0x0007fe00

00020918 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   20918:	b40e      	push	{r1, r2, r3}
   2091a:	b503      	push	{r0, r1, lr}
   2091c:	ab03      	add	r3, sp, #12
   2091e:	f853 2b04 	ldr.w	r2, [r3], #4
   20922:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   20924:	4804      	ldr	r0, [pc, #16]	; (20938 <print_formatted+0x20>)
	va_start(args, fmt);
   20926:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   20928:	f00f faea 	bl	2ff00 <cbvprintf>
	va_end(args);

	return length;
}
   2092c:	b002      	add	sp, #8
   2092e:	f85d eb04 	ldr.w	lr, [sp], #4
   20932:	b003      	add	sp, #12
   20934:	4770      	bx	lr
   20936:	bf00      	nop
   20938:	0002feb1 	.word	0x0002feb1

0002093c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   2093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20940:	b08b      	sub	sp, #44	; 0x2c
   20942:	469a      	mov	sl, r3
   20944:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   20948:	4604      	mov	r4, r0
   2094a:	9305      	str	r3, [sp, #20]
   2094c:	e9dd 8315 	ldrd	r8, r3, [sp, #84]	; 0x54
   20950:	9307      	str	r3, [sp, #28]
   20952:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   20954:	460f      	mov	r7, r1
   20956:	9306      	str	r3, [sp, #24]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
   20958:	9b05      	ldr	r3, [sp, #20]
{
   2095a:	4693      	mov	fp, r2
   2095c:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (!raw_string) {
   2095e:	2b00      	cmp	r3, #0
   20960:	f000 8114 	beq.w	20b8c <log_output_process+0x250>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   20964:	f006 0301 	and.w	r3, r6, #1
   20968:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   2096a:	f006 0308 	and.w	r3, r6, #8
   2096e:	9308      	str	r3, [sp, #32]
	const char *tag = z_log_get_tag();
   20970:	f00f fa81 	bl	2fe76 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   20974:	f006 0502 	and.w	r5, r6, #2
	if (tag) {
   20978:	4602      	mov	r2, r0
   2097a:	2800      	cmp	r0, #0
   2097c:	f000 80b1 	beq.w	20ae2 <log_output_process+0x1a6>
		length += print_formatted(output, "%s ", tag);
   20980:	4620      	mov	r0, r4
   20982:	4988      	ldr	r1, [pc, #544]	; (20ba4 <log_output_process+0x268>)
   20984:	f7ff ffc8 	bl	20918 <print_formatted>
   20988:	4681      	mov	r9, r0
	if (stamp) {
   2098a:	b14d      	cbz	r5, 209a0 <log_output_process+0x64>
	if (!format) {
   2098c:	f016 0f44 	tst.w	r6, #68	; 0x44
   20990:	f040 80a9 	bne.w	20ae6 <log_output_process+0x1aa>
		length = print_formatted(output, "[%08lu] ", timestamp);
   20994:	463a      	mov	r2, r7
   20996:	4620      	mov	r0, r4
   20998:	4983      	ldr	r1, [pc, #524]	; (20ba8 <log_output_process+0x26c>)
   2099a:	f7ff ffbd 	bl	20918 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   2099e:	4481      	add	r9, r0
	if (color) {
   209a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   209a2:	b15b      	cbz	r3, 209bc <log_output_process+0x80>
		const char *log_color = start && (colors[level] != NULL) ?
   209a4:	4b81      	ldr	r3, [pc, #516]	; (20bac <log_output_process+0x270>)
   209a6:	9a05      	ldr	r2, [sp, #20]
		print_formatted(output, "%s", log_color);
   209a8:	4620      	mov	r0, r4
		const char *log_color = start && (colors[level] != NULL) ?
   209aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   209ae:	4b80      	ldr	r3, [pc, #512]	; (20bb0 <log_output_process+0x274>)
   209b0:	4980      	ldr	r1, [pc, #512]	; (20bb4 <log_output_process+0x278>)
   209b2:	2a00      	cmp	r2, #0
   209b4:	bf08      	it	eq
   209b6:	461a      	moveq	r2, r3
   209b8:	f7ff ffae 	bl	20918 <print_formatted>
	if (level_on) {
   209bc:	9b08      	ldr	r3, [sp, #32]
   209be:	2b00      	cmp	r3, #0
   209c0:	f000 80bd 	beq.w	20b3e <log_output_process+0x202>
		total += print_formatted(output, "<%s> ", severity[level]);
   209c4:	4b7c      	ldr	r3, [pc, #496]	; (20bb8 <log_output_process+0x27c>)
   209c6:	9a05      	ldr	r2, [sp, #20]
   209c8:	4620      	mov	r0, r4
   209ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   209ce:	497b      	ldr	r1, [pc, #492]	; (20bbc <log_output_process+0x280>)
   209d0:	f7ff ffa2 	bl	20918 <print_formatted>
   209d4:	4605      	mov	r5, r0
	if (domain) {
   209d6:	f1bb 0f00 	cmp.w	fp, #0
   209da:	d005      	beq.n	209e8 <log_output_process+0xac>
		total += print_formatted(output, "%s/", domain);
   209dc:	465a      	mov	r2, fp
   209de:	4620      	mov	r0, r4
   209e0:	4977      	ldr	r1, [pc, #476]	; (20bc0 <log_output_process+0x284>)
   209e2:	f7ff ff99 	bl	20918 <print_formatted>
   209e6:	4405      	add	r5, r0
	if (source) {
   209e8:	f1ba 0f00 	cmp.w	sl, #0
   209ec:	d005      	beq.n	209fa <log_output_process+0xbe>
		total += print_formatted(output,
   209ee:	4652      	mov	r2, sl
   209f0:	4620      	mov	r0, r4
   209f2:	4974      	ldr	r1, [pc, #464]	; (20bc4 <log_output_process+0x288>)
   209f4:	f7ff ff90 	bl	20918 <print_formatted>
   209f8:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   209fa:	444d      	add	r5, r9
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
	} else {
		prefix_offset = 0;
	}

	if (package) {
   209fc:	f1b8 0f00 	cmp.w	r8, #0
   20a00:	f000 80cc 	beq.w	20b9c <log_output_process+0x260>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   20a04:	4870      	ldr	r0, [pc, #448]	; (20bc8 <log_output_process+0x28c>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   20a06:	4643      	mov	r3, r8
   20a08:	4622      	mov	r2, r4
   20a0a:	4970      	ldr	r1, [pc, #448]	; (20bcc <log_output_process+0x290>)
   20a0c:	f00e fe94 	bl	2f738 <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   20a10:	9b06      	ldr	r3, [sp, #24]
   20a12:	2b00      	cmp	r3, #0
   20a14:	d04d      	beq.n	20ab2 <log_output_process+0x176>
		print_formatted(output, " ");
   20a16:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 20bf0 <log_output_process+0x2b4>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   20a1a:	9f06      	ldr	r7, [sp, #24]
   20a1c:	2f10      	cmp	r7, #16
   20a1e:	bf28      	it	cs
   20a20:	2710      	movcs	r7, #16
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   20a22:	06f3      	lsls	r3, r6, #27
   20a24:	d407      	bmi.n	20a36 <log_output_process+0xfa>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   20a26:	06b0      	lsls	r0, r6, #26
		print_formatted(ctx, "\n");
   20a28:	bf48      	it	mi
   20a2a:	4969      	ldrmi	r1, [pc, #420]	; (20bd0 <log_output_process+0x294>)
		print_formatted(ctx, "\r\n");
   20a2c:	4620      	mov	r0, r4
   20a2e:	bf58      	it	pl
   20a30:	4968      	ldrpl	r1, [pc, #416]	; (20bd4 <log_output_process+0x298>)
   20a32:	f7ff ff71 	bl	20918 <print_formatted>
		prefix_offset = 0;
   20a36:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < prefix_offset; i++) {
   20a3a:	4555      	cmp	r5, sl
   20a3c:	f300 8084 	bgt.w	20b48 <log_output_process+0x20c>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20a40:	f04f 0900 	mov.w	r9, #0
			print_formatted(output, "   ");
   20a44:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 20bf4 <log_output_process+0x2b8>
			print_formatted(output, "%02x ", data[i]);
   20a48:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 20bf8 <log_output_process+0x2bc>
		if (i < length) {
   20a4c:	45b9      	cmp	r9, r7
   20a4e:	f080 808b 	bcs.w	20b68 <log_output_process+0x22c>
			print_formatted(output, "%02x ", data[i]);
   20a52:	9b07      	ldr	r3, [sp, #28]
   20a54:	4659      	mov	r1, fp
   20a56:	4620      	mov	r0, r4
   20a58:	f813 2009 	ldrb.w	r2, [r3, r9]
   20a5c:	f7ff ff5c 	bl	20918 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20a60:	f109 0901 	add.w	r9, r9, #1
   20a64:	f1b9 0f10 	cmp.w	r9, #16
   20a68:	d175      	bne.n	20b56 <log_output_process+0x21a>
	print_formatted(output, "|");
   20a6a:	4620      	mov	r0, r4
   20a6c:	495a      	ldr	r1, [pc, #360]	; (20bd8 <log_output_process+0x29c>)
   20a6e:	f7ff ff53 	bl	20918 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20a72:	f04f 0b00 	mov.w	fp, #0
			print_formatted(output, "%c",
   20a76:	f8df a184 	ldr.w	sl, [pc, #388]	; 20bfc <log_output_process+0x2c0>
		if (i < length) {
   20a7a:	455f      	cmp	r7, fp
   20a7c:	f240 8081 	bls.w	20b82 <log_output_process+0x246>
			char c = (char)data[i];
   20a80:	9b07      	ldr	r3, [sp, #28]
			print_formatted(output, "%c",
   20a82:	4651      	mov	r1, sl
			char c = (char)data[i];
   20a84:	f813 200b 	ldrb.w	r2, [r3, fp]
			print_formatted(output, "%c",
   20a88:	4b54      	ldr	r3, [pc, #336]	; (20bdc <log_output_process+0x2a0>)
   20a8a:	4620      	mov	r0, r4
   20a8c:	5cd3      	ldrb	r3, [r2, r3]
   20a8e:	f013 0f97 	tst.w	r3, #151	; 0x97
   20a92:	bf08      	it	eq
   20a94:	222e      	moveq	r2, #46	; 0x2e
   20a96:	f7ff ff3f 	bl	20918 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   20a9a:	f10b 0b01 	add.w	fp, fp, #1
   20a9e:	f1bb 0f10 	cmp.w	fp, #16
   20aa2:	d166      	bne.n	20b72 <log_output_process+0x236>
		data += length;
   20aa4:	9b07      	ldr	r3, [sp, #28]
   20aa6:	443b      	add	r3, r7
   20aa8:	9307      	str	r3, [sp, #28]
	} while (len);
   20aaa:	9b06      	ldr	r3, [sp, #24]
   20aac:	1bdb      	subs	r3, r3, r7
   20aae:	9306      	str	r3, [sp, #24]
   20ab0:	d1b3      	bne.n	20a1a <log_output_process+0xde>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   20ab2:	9b05      	ldr	r3, [sp, #20]
   20ab4:	b17b      	cbz	r3, 20ad6 <log_output_process+0x19a>
	if (color) {
   20ab6:	07f1      	lsls	r1, r6, #31
   20ab8:	d504      	bpl.n	20ac4 <log_output_process+0x188>
		print_formatted(output, "%s", log_color);
   20aba:	4620      	mov	r0, r4
   20abc:	4a3c      	ldr	r2, [pc, #240]	; (20bb0 <log_output_process+0x274>)
   20abe:	493d      	ldr	r1, [pc, #244]	; (20bb4 <log_output_process+0x278>)
   20ac0:	f7ff ff2a 	bl	20918 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   20ac4:	06f2      	lsls	r2, r6, #27
   20ac6:	d406      	bmi.n	20ad6 <log_output_process+0x19a>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   20ac8:	06b3      	lsls	r3, r6, #26
		print_formatted(ctx, "\r\n");
   20aca:	4620      	mov	r0, r4
		print_formatted(ctx, "\n");
   20acc:	bf4c      	ite	mi
   20ace:	4940      	ldrmi	r1, [pc, #256]	; (20bd0 <log_output_process+0x294>)
		print_formatted(ctx, "\r\n");
   20ad0:	4940      	ldrpl	r1, [pc, #256]	; (20bd4 <log_output_process+0x298>)
   20ad2:	f7ff ff21 	bl	20918 <print_formatted>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   20ad6:	4620      	mov	r0, r4
}
   20ad8:	b00b      	add	sp, #44	; 0x2c
   20ada:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   20ade:	f00f ba16 	b.w	2ff0e <log_output_flush>
	uint32_t length = 0U;
   20ae2:	4681      	mov	r9, r0
   20ae4:	e751      	b.n	2098a <log_output_process+0x4e>
	} else if (freq != 0U) {
   20ae6:	4b3e      	ldr	r3, [pc, #248]	; (20be0 <log_output_process+0x2a4>)
   20ae8:	6818      	ldr	r0, [r3, #0]
   20aea:	2800      	cmp	r0, #0
   20aec:	f43f af57 	beq.w	2099e <log_output_process+0x62>
		timestamp /= timestamp_div;
   20af0:	4b3c      	ldr	r3, [pc, #240]	; (20be4 <log_output_process+0x2a8>)
   20af2:	f44f 6561 	mov.w	r5, #3600	; 0xe10
   20af6:	6819      	ldr	r1, [r3, #0]
		ms = (remainder * 1000U) / freq;
   20af8:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   20afc:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   20b00:	fbb7 f1f0 	udiv	r1, r7, r0
		seconds -= hours * 3600U;
   20b04:	fbb1 f2f5 	udiv	r2, r1, r5
		remainder = timestamp % freq;
   20b08:	fb00 7711 	mls	r7, r0, r1, r7
		ms = (remainder * 1000U) / freq;
   20b0c:	fb0e f707 	mul.w	r7, lr, r7
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   20b10:	fbb7 fcf0 	udiv	ip, r7, r0
   20b14:	fb05 1512 	mls	r5, r5, r2, r1
		mins = seconds / 60U;
   20b18:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   20b1a:	fb00 771c 	mls	r7, r0, ip, r7
		mins = seconds / 60U;
   20b1e:	fbb5 f3f1 	udiv	r3, r5, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   20b22:	fb0e f707 	mul.w	r7, lr, r7
   20b26:	fbb7 f7f0 	udiv	r7, r7, r0
				length = print_formatted(output,
   20b2a:	fb01 5113 	mls	r1, r1, r3, r5
   20b2e:	4620      	mov	r0, r4
   20b30:	9100      	str	r1, [sp, #0]
   20b32:	e9cd c701 	strd	ip, r7, [sp, #4]
   20b36:	492c      	ldr	r1, [pc, #176]	; (20be8 <log_output_process+0x2ac>)
   20b38:	f7ff feee 	bl	20918 <print_formatted>
   20b3c:	e72f      	b.n	2099e <log_output_process+0x62>
	int total = 0;
   20b3e:	9d08      	ldr	r5, [sp, #32]
   20b40:	e749      	b.n	209d6 <log_output_process+0x9a>
		prefix_offset = 0;
   20b42:	9d05      	ldr	r5, [sp, #20]
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   20b44:	4829      	ldr	r0, [pc, #164]	; (20bec <log_output_process+0x2b0>)
   20b46:	e75e      	b.n	20a06 <log_output_process+0xca>
		print_formatted(output, " ");
   20b48:	4641      	mov	r1, r8
   20b4a:	4620      	mov	r0, r4
   20b4c:	f7ff fee4 	bl	20918 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   20b50:	f10a 0a01 	add.w	sl, sl, #1
   20b54:	e771      	b.n	20a3a <log_output_process+0xfe>
		if (i > 0 && !(i % 8)) {
   20b56:	f019 0f07 	tst.w	r9, #7
   20b5a:	f47f af77 	bne.w	20a4c <log_output_process+0x110>
			print_formatted(output, " ");
   20b5e:	4641      	mov	r1, r8
   20b60:	4620      	mov	r0, r4
   20b62:	f7ff fed9 	bl	20918 <print_formatted>
   20b66:	e771      	b.n	20a4c <log_output_process+0x110>
			print_formatted(output, "   ");
   20b68:	4651      	mov	r1, sl
   20b6a:	4620      	mov	r0, r4
   20b6c:	f7ff fed4 	bl	20918 <print_formatted>
   20b70:	e776      	b.n	20a60 <log_output_process+0x124>
		if (i > 0 && !(i % 8)) {
   20b72:	f01b 0f07 	tst.w	fp, #7
   20b76:	d180      	bne.n	20a7a <log_output_process+0x13e>
			print_formatted(output, " ");
   20b78:	4641      	mov	r1, r8
   20b7a:	4620      	mov	r0, r4
   20b7c:	f7ff fecc 	bl	20918 <print_formatted>
   20b80:	e77b      	b.n	20a7a <log_output_process+0x13e>
			print_formatted(output, " ");
   20b82:	4641      	mov	r1, r8
   20b84:	4620      	mov	r0, r4
   20b86:	f7ff fec7 	bl	20918 <print_formatted>
   20b8a:	e786      	b.n	20a9a <log_output_process+0x15e>
	if (package) {
   20b8c:	f1b8 0f00 	cmp.w	r8, #0
   20b90:	d1d7      	bne.n	20b42 <log_output_process+0x206>
	if (data_len) {
   20b92:	9b06      	ldr	r3, [sp, #24]
   20b94:	2b00      	cmp	r3, #0
   20b96:	d09e      	beq.n	20ad6 <log_output_process+0x19a>
		prefix_offset = 0;
   20b98:	9d05      	ldr	r5, [sp, #20]
   20b9a:	e73c      	b.n	20a16 <log_output_process+0xda>
	if (data_len) {
   20b9c:	9b06      	ldr	r3, [sp, #24]
   20b9e:	2b00      	cmp	r3, #0
   20ba0:	d089      	beq.n	20ab6 <log_output_process+0x17a>
   20ba2:	e738      	b.n	20a16 <log_output_process+0xda>
   20ba4:	00037999 	.word	0x00037999
   20ba8:	0003799d 	.word	0x0003799d
   20bac:	00034c74 	.word	0x00034c74
   20bb0:	00037994 	.word	0x00037994
   20bb4:	00039015 	.word	0x00039015
   20bb8:	00034c88 	.word	0x00034c88
   20bbc:	000379c2 	.word	0x000379c2
   20bc0:	000379c8 	.word	0x000379c8
   20bc4:	000379cc 	.word	0x000379cc
   20bc8:	0002feb1 	.word	0x0002feb1
   20bcc:	0002ff01 	.word	0x0002ff01
   20bd0:	00039841 	.word	0x00039841
   20bd4:	00039840 	.word	0x00039840
   20bd8:	000379db 	.word	0x000379db
   20bdc:	00039f71 	.word	0x00039f71
   20be0:	2000d1b8 	.word	0x2000d1b8
   20be4:	2000d1bc 	.word	0x2000d1bc
   20be8:	000379a6 	.word	0x000379a6
   20bec:	0002fecd 	.word	0x0002fecd
   20bf0:	000379d9 	.word	0x000379d9
   20bf4:	000379d7 	.word	0x000379d7
   20bf8:	000379d1 	.word	0x000379d1
   20bfc:	00039143 	.word	0x00039143

00020c00 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   20c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   20c04:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.level;
   20c06:	880f      	ldrh	r7, [r1, #0]
   20c08:	4605      	mov	r5, r0
   20c0a:	460c      	mov	r4, r1
   20c0c:	4690      	mov	r8, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   20c0e:	688e      	ldr	r6, [r1, #8]
   20c10:	b086      	sub	sp, #24
	return msg->hdr.desc.level;
   20c12:	f3c7 1782 	ubfx	r7, r7, #6, #3
	log_timestamp_t timestamp = log_msg_get_timestamp(msg);
	uint8_t level = log_msg_get_level(msg);
	void *source = (void *)log_msg_get_source(msg);
	uint8_t domain_id = log_msg_get_domain(msg);
	int16_t source_id = source ?
   20c16:	b15b      	cbz	r3, 20c30 <log_output_msg_process+0x30>
   20c18:	4913      	ldr	r1, [pc, #76]	; (20c68 <log_output_msg_process+0x68>)
   20c1a:	1a5b      	subs	r3, r3, r1
   20c1c:	f343 01cf 	sbfx	r1, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   20c20:	2900      	cmp	r1, #0
   20c22:	db1f      	blt.n	20c64 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   20c24:	7820      	ldrb	r0, [r4, #0]
   20c26:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   20c2a:	f7ff fe13 	bl	20854 <log_source_name_get>
   20c2e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   20c30:	4621      	mov	r1, r4
   20c32:	f851 2b10 	ldr.w	r2, [r1], #16
	*len = msg->hdr.desc.data_len;
   20c36:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   20c38:	f3c2 2249 	ubfx	r2, r2, #9, #10
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   20c3c:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   20c3e:	eb01 0402 	add.w	r4, r1, r2
   20c42:	bf08      	it	eq
   20c44:	2100      	moveq	r1, #0
	*len = msg->hdr.desc.data_len;
   20c46:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   20c4a:	e9cd 0803 	strd	r0, r8, [sp, #12]
   20c4e:	e9cd 1401 	strd	r1, r4, [sp, #4]
   20c52:	2200      	movs	r2, #0
   20c54:	4631      	mov	r1, r6
   20c56:	4628      	mov	r0, r5
   20c58:	9700      	str	r7, [sp, #0]
   20c5a:	f7ff fe6f 	bl	2093c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   20c5e:	b006      	add	sp, #24
   20c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   20c64:	2300      	movs	r3, #0
   20c66:	e7e3      	b.n	20c30 <log_output_msg_process+0x30>
   20c68:	00034a48 	.word	0x00034a48

00020c6c <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   20c6c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   20c6e:	2100      	movs	r1, #0
	timestamp_div = 1U;
   20c70:	4a07      	ldr	r2, [pc, #28]	; (20c90 <log_output_timestamp_freq_set+0x24>)
{
   20c72:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   20c74:	4c07      	ldr	r4, [pc, #28]	; (20c94 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   20c76:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   20c78:	42a0      	cmp	r0, r4
   20c7a:	d804      	bhi.n	20c86 <log_output_timestamp_freq_set+0x1a>
   20c7c:	b101      	cbz	r1, 20c80 <log_output_timestamp_freq_set+0x14>
   20c7e:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   20c80:	4b05      	ldr	r3, [pc, #20]	; (20c98 <log_output_timestamp_freq_set+0x2c>)
   20c82:	6018      	str	r0, [r3, #0]
}
   20c84:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   20c86:	2101      	movs	r1, #1
		frequency /= 2U;
   20c88:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   20c8a:	005b      	lsls	r3, r3, #1
   20c8c:	e7f4      	b.n	20c78 <log_output_timestamp_freq_set+0xc>
   20c8e:	bf00      	nop
   20c90:	2000d1bc 	.word	0x2000d1bc
   20c94:	000f4240 	.word	0x000f4240
   20c98:	2000d1b8 	.word	0x2000d1b8

00020c9c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   20c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20c9e:	460d      	mov	r5, r1
   20ca0:	4604      	mov	r4, r0
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
   20ca2:	4f06      	ldr	r7, [pc, #24]	; (20cbc <char_out+0x20>)
   20ca4:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   20ca6:	42b4      	cmp	r4, r6
   20ca8:	d101      	bne.n	20cae <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   20caa:	4628      	mov	r0, r5
   20cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   20cae:	6838      	ldr	r0, [r7, #0]
   20cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   20cb4:	6883      	ldr	r3, [r0, #8]
   20cb6:	685b      	ldr	r3, [r3, #4]
   20cb8:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   20cba:	e7f4      	b.n	20ca6 <char_out+0xa>
   20cbc:	2000d1d8 	.word	0x2000d1d8

00020cc0 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   20cc0:	4b01      	ldr	r3, [pc, #4]	; (20cc8 <format_set+0x8>)
	return 0;
}
   20cc2:	2000      	movs	r0, #0
	log_format_current = log_type;
   20cc4:	6019      	str	r1, [r3, #0]
}
   20cc6:	4770      	bx	lr
   20cc8:	2000d1c8 	.word	0x2000d1c8

00020ccc <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   20ccc:	4b01      	ldr	r3, [pc, #4]	; (20cd4 <log_backend_uart_init+0x8>)
   20cce:	4a02      	ldr	r2, [pc, #8]	; (20cd8 <log_backend_uart_init+0xc>)
   20cd0:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   20cd2:	4770      	bx	lr
   20cd4:	2000d1d8 	.word	0x2000d1d8
   20cd8:	000347c4 	.word	0x000347c4

00020cdc <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
   20cdc:	2201      	movs	r2, #1
   20cde:	4b02      	ldr	r3, [pc, #8]	; (20ce8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   20ce0:	4802      	ldr	r0, [pc, #8]	; (20cec <panic+0x10>)
   20ce2:	701a      	strb	r2, [r3, #0]
   20ce4:	f00f b913 	b.w	2ff0e <log_output_flush>
   20ce8:	2000e229 	.word	0x2000e229
   20cec:	00034cb8 	.word	0x00034cb8

00020cf0 <process>:
{
   20cf0:	b507      	push	{r0, r1, r2, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   20cf2:	4b06      	ldr	r3, [pc, #24]	; (20d0c <process+0x1c>)
{
   20cf4:	9101      	str	r1, [sp, #4]
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   20cf6:	6818      	ldr	r0, [r3, #0]
   20cf8:	f7ff fd3a 	bl	20770 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   20cfc:	220f      	movs	r2, #15
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   20cfe:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
   20d00:	9901      	ldr	r1, [sp, #4]
   20d02:	4803      	ldr	r0, [pc, #12]	; (20d10 <process+0x20>)
}
   20d04:	b003      	add	sp, #12
   20d06:	f85d eb04 	ldr.w	lr, [sp], #4
	log_output_func(&log_output_uart, &msg->log, flags);
   20d0a:	4718      	bx	r3
   20d0c:	2000d1c8 	.word	0x2000d1c8
   20d10:	00034cb8 	.word	0x00034cb8

00020d14 <z_impl_zsock_socket>:
	return fd;
}
#endif /* CONFIG_NET_NATIVE */

int z_impl_zsock_socket(int family, int type, int proto)
{
   20d14:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20d16:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   20d18:	4c0f      	ldr	r4, [pc, #60]	; (20d58 <z_impl_zsock_socket+0x44>)
   20d1a:	4e10      	ldr	r6, [pc, #64]	; (20d5c <z_impl_zsock_socket+0x48>)
   20d1c:	42b4      	cmp	r4, r6
   20d1e:	d307      	bcc.n	20d30 <z_impl_zsock_socket+0x1c>
		}

		return sock_family->handler(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   20d20:	f00f ffcb 	bl	30cba <__errno>
   20d24:	236a      	movs	r3, #106	; 0x6a
   20d26:	6003      	str	r3, [r0, #0]
	return -1;
}
   20d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20d2c:	b002      	add	sp, #8
   20d2e:	bd70      	pop	{r4, r5, r6, pc}
		if (sock_family->family != family &&
   20d30:	6823      	ldr	r3, [r4, #0]
   20d32:	42ab      	cmp	r3, r5
   20d34:	d000      	beq.n	20d38 <z_impl_zsock_socket+0x24>
   20d36:	b96b      	cbnz	r3, 20d54 <z_impl_zsock_socket+0x40>
		if (!sock_family->is_supported(family, type, proto)) {
   20d38:	4628      	mov	r0, r5
   20d3a:	68a3      	ldr	r3, [r4, #8]
   20d3c:	e9cd 1200 	strd	r1, r2, [sp]
   20d40:	4798      	blx	r3
   20d42:	e9dd 1200 	ldrd	r1, r2, [sp]
   20d46:	b128      	cbz	r0, 20d54 <z_impl_zsock_socket+0x40>
		return sock_family->handler(family, type, proto);
   20d48:	4628      	mov	r0, r5
   20d4a:	68e3      	ldr	r3, [r4, #12]
}
   20d4c:	b002      	add	sp, #8
   20d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return sock_family->handler(family, type, proto);
   20d52:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   20d54:	3410      	adds	r4, #16
   20d56:	e7e1      	b.n	20d1c <z_impl_zsock_socket+0x8>
   20d58:	00034a38 	.word	0x00034a38
   20d5c:	00034a48 	.word	0x00034a48

00020d60 <socket_offload_dns_register>:
void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
	__ASSERT_NO_MSG(ops);
	__ASSERT_NO_MSG(dns_offload == NULL);

	dns_offload = ops;
   20d60:	4b01      	ldr	r3, [pc, #4]	; (20d68 <socket_offload_dns_register+0x8>)
   20d62:	6018      	str	r0, [r3, #0]
}
   20d64:	4770      	bx	lr
   20d66:	bf00      	nop
   20d68:	2000d1dc 	.word	0x2000d1dc

00020d6c <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   20d6c:	b410      	push	{r4}
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);

	return dns_offload->getaddrinfo(node, service, hints, res);
   20d6e:	4c03      	ldr	r4, [pc, #12]	; (20d7c <socket_offload_getaddrinfo+0x10>)
   20d70:	6824      	ldr	r4, [r4, #0]
   20d72:	6824      	ldr	r4, [r4, #0]
   20d74:	46a4      	mov	ip, r4
}
   20d76:	f85d 4b04 	ldr.w	r4, [sp], #4
	return dns_offload->getaddrinfo(node, service, hints, res);
   20d7a:	4760      	bx	ip
   20d7c:	2000d1dc 	.word	0x2000d1dc

00020d80 <socket_offload_freeaddrinfo>:
void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
	__ASSERT_NO_MSG(dns_offload);
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);

	return dns_offload->freeaddrinfo(res);
   20d80:	4b01      	ldr	r3, [pc, #4]	; (20d88 <socket_offload_freeaddrinfo+0x8>)
   20d82:	681b      	ldr	r3, [r3, #0]
   20d84:	685b      	ldr	r3, [r3, #4]
   20d86:	4718      	bx	r3
   20d88:	2000d1dc 	.word	0x2000d1dc

00020d8c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   20d8c:	4b11      	ldr	r3, [pc, #68]	; (20dd4 <flash_area_open+0x48>)
{
   20d8e:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
   20d90:	681b      	ldr	r3, [r3, #0]
{
   20d92:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   20d94:	b18b      	cbz	r3, 20dba <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   20d96:	4a10      	ldr	r2, [pc, #64]	; (20dd8 <flash_area_open+0x4c>)
   20d98:	6811      	ldr	r1, [r2, #0]
   20d9a:	2200      	movs	r2, #0
   20d9c:	428a      	cmp	r2, r1
   20d9e:	db02      	blt.n	20da6 <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
   20da0:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
   20da4:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
   20da6:	461d      	mov	r5, r3
   20da8:	f813 6b10 	ldrb.w	r6, [r3], #16
   20dac:	4286      	cmp	r6, r0
   20dae:	d007      	beq.n	20dc0 <flash_area_open+0x34>
	for (int i = 0; i < flash_map_entries; i++) {
   20db0:	3201      	adds	r2, #1
   20db2:	e7f3      	b.n	20d9c <flash_area_open+0x10>
	return 0;
   20db4:	2000      	movs	r0, #0
	*fap = area;
   20db6:	6025      	str	r5, [r4, #0]
	return 0;
   20db8:	e7f4      	b.n	20da4 <flash_area_open+0x18>
		return -EACCES;
   20dba:	f06f 000c 	mvn.w	r0, #12
   20dbe:	e7f1      	b.n	20da4 <flash_area_open+0x18>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
   20dc0:	68e8      	ldr	r0, [r5, #12]
   20dc2:	b118      	cbz	r0, 20dcc <flash_area_open+0x40>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   20dc4:	f012 fa37 	bl	33236 <z_device_is_ready>
   20dc8:	2800      	cmp	r0, #0
   20dca:	d1f3      	bne.n	20db4 <flash_area_open+0x28>
		return -ENODEV;
   20dcc:	f06f 0012 	mvn.w	r0, #18
   20dd0:	e7e8      	b.n	20da4 <flash_area_open+0x18>
   20dd2:	bf00      	nop
   20dd4:	2000c594 	.word	0x2000c594
   20dd8:	00034dbc 	.word	0x00034dbc

00020ddc <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   20ddc:	b570      	push	{r4, r5, r6, lr}
   20dde:	b088      	sub	sp, #32
   20de0:	4605      	mov	r5, r0
   20de2:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
   20de4:	b2c0      	uxtb	r0, r0
   20de6:	4669      	mov	r1, sp
{
   20de8:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
   20dea:	f7ff ffcf 	bl	20d8c <flash_area_open>
	if (rc < 0 || fa == NULL) {
   20dee:	2800      	cmp	r0, #0
   20df0:	db1b      	blt.n	20e2a <flash_area_get_sectors+0x4e>
   20df2:	9800      	ldr	r0, [sp, #0]
   20df4:	b1c8      	cbz	r0, 20e2a <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
   20df6:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
   20df8:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
   20dfa:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   20dfc:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
   20dfe:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
   20e00:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
   20e04:	2300      	movs	r3, #0
	flash_dev = fa->fa_dev;
   20e06:	68c5      	ldr	r5, [r0, #12]
	cb_data->status = 0;
   20e08:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   20e0c:	9305      	str	r3, [sp, #20]
	flash_area_close(fa);
   20e0e:	f00f fd48 	bl	308a2 <flash_area_close>
	if (flash_dev == NULL) {
   20e12:	b16d      	cbz	r5, 20e30 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
   20e14:	4628      	mov	r0, r5
   20e16:	4908      	ldr	r1, [pc, #32]	; (20e38 <flash_area_get_sectors+0x5c>)
   20e18:	aa01      	add	r2, sp, #4
   20e1a:	f010 fa73 	bl	31304 <flash_page_foreach>
	if (cb_data->status == 0) {
   20e1e:	9807      	ldr	r0, [sp, #28]
   20e20:	b908      	cbnz	r0, 20e26 <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
   20e22:	9b05      	ldr	r3, [sp, #20]
   20e24:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   20e26:	b008      	add	sp, #32
   20e28:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   20e2a:	f06f 0015 	mvn.w	r0, #21
   20e2e:	e7fa      	b.n	20e26 <flash_area_get_sectors+0x4a>
		return -ENODEV;
   20e30:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   20e34:	e7f7      	b.n	20e26 <flash_area_get_sectors+0x4a>
   20e36:	bf00      	nop
   20e38:	00030935 	.word	0x00030935

00020e3c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   20e3c:	4b10      	ldr	r3, [pc, #64]	; (20e80 <settings_save_one+0x44>)
{
   20e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   20e42:	681c      	ldr	r4, [r3, #0]
{
   20e44:	4605      	mov	r5, r0
   20e46:	460e      	mov	r6, r1
   20e48:	4617      	mov	r7, r2
	if (!cs) {
   20e4a:	b1ac      	cbz	r4, 20e78 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   20e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20e54:	480b      	ldr	r0, [pc, #44]	; (20e84 <settings_save_one+0x48>)
   20e56:	f00b facd 	bl	2c3f4 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   20e5a:	6863      	ldr	r3, [r4, #4]
   20e5c:	4632      	mov	r2, r6
   20e5e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   20e62:	4629      	mov	r1, r5
   20e64:	463b      	mov	r3, r7
   20e66:	4620      	mov	r0, r4
   20e68:	47c0      	blx	r8
   20e6a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   20e6c:	4805      	ldr	r0, [pc, #20]	; (20e84 <settings_save_one+0x48>)
   20e6e:	f00b fb39 	bl	2c4e4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   20e72:	4620      	mov	r0, r4
   20e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   20e78:	f06f 0401 	mvn.w	r4, #1
   20e7c:	e7f9      	b.n	20e72 <settings_save_one+0x36>
   20e7e:	bf00      	nop
   20e80:	2000d1e8 	.word	0x2000d1e8
   20e84:	2000c9c8 	.word	0x2000c9c8

00020e88 <settings_src_register>:
	parent->next = child;
   20e88:	2300      	movs	r3, #0
   20e8a:	6003      	str	r3, [r0, #0]
	return list->tail;
   20e8c:	4b04      	ldr	r3, [pc, #16]	; (20ea0 <settings_src_register+0x18>)
   20e8e:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   20e90:	b912      	cbnz	r2, 20e98 <settings_src_register+0x10>
	list->head = node;
   20e92:	e9c3 0000 	strd	r0, r0, [r3]
}
   20e96:	4770      	bx	lr
	parent->next = child;
   20e98:	6010      	str	r0, [r2, #0]
	list->tail = node;
   20e9a:	6058      	str	r0, [r3, #4]
}
   20e9c:	4770      	bx	lr
   20e9e:	bf00      	nop
   20ea0:	2000d1e0 	.word	0x2000d1e0

00020ea4 <settings_dst_register>:
	settings_save_dst = cs;
   20ea4:	4b01      	ldr	r3, [pc, #4]	; (20eac <settings_dst_register+0x8>)
   20ea6:	6018      	str	r0, [r3, #0]
}
   20ea8:	4770      	bx	lr
   20eaa:	bf00      	nop
   20eac:	2000d1e8 	.word	0x2000d1e8

00020eb0 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   20eb0:	2300      	movs	r3, #0
{
   20eb2:	b530      	push	{r4, r5, lr}
   20eb4:	b085      	sub	sp, #20
   20eb6:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   20eb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   20ebc:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   20ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20ec6:	480b      	ldr	r0, [pc, #44]	; (20ef4 <settings_load_subtree+0x44>)
   20ec8:	f00b fa94 	bl	2c3f4 <z_impl_k_mutex_lock>
	return list->head;
   20ecc:	4b0a      	ldr	r3, [pc, #40]	; (20ef8 <settings_load_subtree+0x48>)
   20ece:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   20ed0:	b134      	cbz	r4, 20ee0 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
   20ed2:	6863      	ldr	r3, [r4, #4]
   20ed4:	4620      	mov	r0, r4
   20ed6:	681b      	ldr	r3, [r3, #0]
   20ed8:	a901      	add	r1, sp, #4
   20eda:	4798      	blx	r3
	return node->next;
   20edc:	6824      	ldr	r4, [r4, #0]
   20ede:	e7f7      	b.n	20ed0 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
   20ee0:	4628      	mov	r0, r5
   20ee2:	f000 f8f5 	bl	210d0 <settings_commit_subtree>
   20ee6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   20ee8:	4802      	ldr	r0, [pc, #8]	; (20ef4 <settings_load_subtree+0x44>)
   20eea:	f00b fafb 	bl	2c4e4 <z_impl_k_mutex_unlock>
}
   20eee:	4620      	mov	r0, r4
   20ef0:	b005      	add	sp, #20
   20ef2:	bd30      	pop	{r4, r5, pc}
   20ef4:	2000c9c8 	.word	0x2000c9c8
   20ef8:	2000d1e0 	.word	0x2000d1e0

00020efc <settings_store_init>:
	list->head = NULL;
   20efc:	2200      	movs	r2, #0
   20efe:	4b02      	ldr	r3, [pc, #8]	; (20f08 <settings_store_init+0xc>)
	list->tail = NULL;
   20f00:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   20f04:	4770      	bx	lr
   20f06:	bf00      	nop
   20f08:	2000d1e0 	.word	0x2000d1e0

00020f0c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   20f0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   20f0e:	ab0b      	add	r3, sp, #44	; 0x2c
   20f10:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   20f12:	9303      	str	r3, [sp, #12]
   20f14:	4b05      	ldr	r3, [pc, #20]	; (20f2c <z_log_msg_runtime_create.constprop.0+0x20>)
   20f16:	2201      	movs	r2, #1
   20f18:	9302      	str	r3, [sp, #8]
   20f1a:	2300      	movs	r3, #0
   20f1c:	4618      	mov	r0, r3
   20f1e:	e9cd 3300 	strd	r3, r3, [sp]
   20f22:	f7ff fcb3 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   20f26:	b007      	add	sp, #28
   20f28:	f85d fb04 	ldr.w	pc, [sp], #4
   20f2c:	00037a17 	.word	0x00037a17

00020f30 <settings_init>:
	list->head = NULL;
   20f30:	2200      	movs	r2, #0
   20f32:	4b02      	ldr	r3, [pc, #8]	; (20f3c <settings_init+0xc>)
	list->tail = NULL;
   20f34:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   20f38:	f7ff bfe0 	b.w	20efc <settings_store_init>
   20f3c:	2000d1ec 	.word	0x2000d1ec

00020f40 <settings_register>:
}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
int settings_register(struct settings_handler *handler)
{
   20f40:	b570      	push	{r4, r5, r6, lr}
   20f42:	4605      	mov	r5, r0
	int rc = 0;

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   20f44:	4c1a      	ldr	r4, [pc, #104]	; (20fb0 <settings_register+0x70>)
   20f46:	4e1b      	ldr	r6, [pc, #108]	; (20fb4 <settings_register+0x74>)
   20f48:	42b4      	cmp	r4, r6
   20f4a:	d312      	bcc.n	20f72 <settings_register+0x32>
	return list->head;
   20f4c:	4e1a      	ldr	r6, [pc, #104]	; (20fb8 <settings_register+0x78>)
	return z_impl_k_mutex_lock(mutex, timeout);
   20f4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20f56:	4819      	ldr	r0, [pc, #100]	; (20fbc <settings_register+0x7c>)
   20f58:	f00b fa4c 	bl	2c3f4 <z_impl_k_mutex_lock>
   20f5c:	6834      	ldr	r4, [r6, #0]
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   20f5e:	b17c      	cbz	r4, 20f80 <settings_register+0x40>
		if (strcmp(handler->name, ch->name) == 0) {
   20f60:	6828      	ldr	r0, [r5, #0]
   20f62:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   20f66:	3c14      	subs	r4, #20
		if (strcmp(handler->name, ch->name) == 0) {
   20f68:	f7fc f890 	bl	1d08c <strcmp>
   20f6c:	b1c8      	cbz	r0, 20fa2 <settings_register+0x62>
	return node->next;
   20f6e:	6964      	ldr	r4, [r4, #20]
   20f70:	e7f5      	b.n	20f5e <settings_register+0x1e>
		if (strcmp(handler->name, ch->name) == 0) {
   20f72:	6821      	ldr	r1, [r4, #0]
   20f74:	6828      	ldr	r0, [r5, #0]
   20f76:	f7fc f889 	bl	1d08c <strcmp>
   20f7a:	b1a8      	cbz	r0, 20fa8 <settings_register+0x68>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   20f7c:	3414      	adds	r4, #20
   20f7e:	e7e3      	b.n	20f48 <settings_register+0x8>
	parent->next = child;
   20f80:	2400      	movs	r4, #0
	return list->tail;
   20f82:	6872      	ldr	r2, [r6, #4]
			rc = -EEXIST;
			goto end;
		}
	}
	sys_slist_append(&settings_handlers, &handler->node);
   20f84:	f105 0314 	add.w	r3, r5, #20
	parent->next = child;
   20f88:	616c      	str	r4, [r5, #20]
Z_GENLIST_APPEND(slist, snode)
   20f8a:	b93a      	cbnz	r2, 20f9c <settings_register+0x5c>
	int rc = 0;
   20f8c:	4614      	mov	r4, r2
	list->head = node;
   20f8e:	e9c6 3300 	strd	r3, r3, [r6]
	return z_impl_k_mutex_unlock(mutex);
   20f92:	480a      	ldr	r0, [pc, #40]	; (20fbc <settings_register+0x7c>)
   20f94:	f00b faa6 	bl	2c4e4 <z_impl_k_mutex_unlock>

end:
	k_mutex_unlock(&settings_lock);
	return rc;
}
   20f98:	4620      	mov	r0, r4
   20f9a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   20f9c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   20f9e:	6073      	str	r3, [r6, #4]
}
   20fa0:	e7f7      	b.n	20f92 <settings_register+0x52>
			rc = -EEXIST;
   20fa2:	f06f 0410 	mvn.w	r4, #16
   20fa6:	e7f4      	b.n	20f92 <settings_register+0x52>
			return -EEXIST;
   20fa8:	f06f 0410 	mvn.w	r4, #16
   20fac:	e7f4      	b.n	20f98 <settings_register+0x58>
   20fae:	bf00      	nop
   20fb0:	00034b10 	.word	0x00034b10
   20fb4:	00034b10 	.word	0x00034b10
   20fb8:	2000d1ec 	.word	0x2000d1ec
   20fbc:	2000c9c8 	.word	0x2000c9c8

00020fc0 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   20fc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20fc4:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   20fc6:	460e      	mov	r6, r1
   20fc8:	b109      	cbz	r1, 20fce <settings_parse_and_lookup+0xe>
		*next = NULL;
   20fca:	2300      	movs	r3, #0
   20fcc:	600b      	str	r3, [r1, #0]
   20fce:	2500      	movs	r5, #0
   20fd0:	4c1b      	ldr	r4, [pc, #108]	; (21040 <settings_parse_and_lookup+0x80>)
	}

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   20fd2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 21048 <settings_parse_and_lookup+0x88>
   20fd6:	4544      	cmp	r4, r8
   20fd8:	d310      	bcc.n	20ffc <settings_parse_and_lookup+0x3c>
	return list->head;
   20fda:	4b1a      	ldr	r3, [pc, #104]	; (21044 <settings_parse_and_lookup+0x84>)
   20fdc:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   20fde:	b35c      	cbz	r4, 21038 <settings_parse_and_lookup+0x78>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   20fe0:	4638      	mov	r0, r7
   20fe2:	aa01      	add	r2, sp, #4
   20fe4:	f854 1c14 	ldr.w	r1, [r4, #-20]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   20fe8:	3c14      	subs	r4, #20
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   20fea:	f00f fcc4 	bl	30976 <settings_name_steq>
   20fee:	b308      	cbz	r0, 21034 <settings_parse_and_lookup+0x74>
			continue;
		}
		if (!bestmatch) {
   20ff0:	b9cd      	cbnz	r5, 21026 <settings_parse_and_lookup+0x66>
			}
			continue;
		}
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
			bestmatch = (struct settings_handler_static *)ch;
			if (next) {
   20ff2:	b10e      	cbz	r6, 20ff8 <settings_parse_and_lookup+0x38>
				*next = tmpnext;
   20ff4:	9b01      	ldr	r3, [sp, #4]
   20ff6:	6033      	str	r3, [r6, #0]
   20ff8:	4625      	mov	r5, r4
   20ffa:	e01b      	b.n	21034 <settings_parse_and_lookup+0x74>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   20ffc:	4638      	mov	r0, r7
   20ffe:	6821      	ldr	r1, [r4, #0]
   21000:	aa01      	add	r2, sp, #4
   21002:	f00f fcb8 	bl	30976 <settings_name_steq>
   21006:	b160      	cbz	r0, 21022 <settings_parse_and_lookup+0x62>
		if (!bestmatch) {
   21008:	b925      	cbnz	r5, 21014 <settings_parse_and_lookup+0x54>
			if (next) {
   2100a:	b10e      	cbz	r6, 21010 <settings_parse_and_lookup+0x50>
				*next = tmpnext;
   2100c:	9b01      	ldr	r3, [sp, #4]
   2100e:	6033      	str	r3, [r6, #0]
   21010:	4625      	mov	r5, r4
   21012:	e006      	b.n	21022 <settings_parse_and_lookup+0x62>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   21014:	2200      	movs	r2, #0
   21016:	6829      	ldr	r1, [r5, #0]
   21018:	6820      	ldr	r0, [r4, #0]
   2101a:	f00f fcac 	bl	30976 <settings_name_steq>
   2101e:	2800      	cmp	r0, #0
   21020:	d1f3      	bne.n	2100a <settings_parse_and_lookup+0x4a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   21022:	3414      	adds	r4, #20
   21024:	e7d7      	b.n	20fd6 <settings_parse_and_lookup+0x16>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   21026:	2200      	movs	r2, #0
   21028:	6829      	ldr	r1, [r5, #0]
   2102a:	6820      	ldr	r0, [r4, #0]
   2102c:	f00f fca3 	bl	30976 <settings_name_steq>
   21030:	2800      	cmp	r0, #0
   21032:	d1de      	bne.n	20ff2 <settings_parse_and_lookup+0x32>
	return node->next;
   21034:	6964      	ldr	r4, [r4, #20]
   21036:	e7d2      	b.n	20fde <settings_parse_and_lookup+0x1e>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   21038:	4628      	mov	r0, r5
   2103a:	b002      	add	sp, #8
   2103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21040:	00034b10 	.word	0x00034b10
   21044:	2000d1ec 	.word	0x2000d1ec
   21048:	00034b10 	.word	0x00034b10

0002104c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   2104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21050:	b08a      	sub	sp, #40	; 0x28
   21052:	9f10      	ldr	r7, [sp, #64]	; 0x40
   21054:	4604      	mov	r4, r0
   21056:	460d      	mov	r5, r1
   21058:	4616      	mov	r6, r2
	int rc;
	const char *name_key = name;
   2105a:	9009      	str	r0, [sp, #36]	; 0x24

	if (load_arg && load_arg->subtree &&
   2105c:	b1bf      	cbz	r7, 2108e <settings_call_set_handler+0x42>
   2105e:	6839      	ldr	r1, [r7, #0]
   21060:	b181      	cbz	r1, 21084 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   21062:	aa09      	add	r2, sp, #36	; 0x24
   21064:	9307      	str	r3, [sp, #28]
   21066:	f00f fc86 	bl	30976 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   2106a:	9b07      	ldr	r3, [sp, #28]
   2106c:	b950      	cbnz	r0, 21084 <settings_call_set_handler+0x38>
		return 0;
   2106e:	2000      	movs	r0, #0
			LOG_DBG("set-value OK. key: %s",
				name);
		}
	}
	return rc;
}
   21070:	b00a      	add	sp, #40	; 0x28
   21072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   21076:	68ba      	ldr	r2, [r7, #8]
   21078:	4629      	mov	r1, r5
   2107a:	9200      	str	r2, [sp, #0]
   2107c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2107e:	4632      	mov	r2, r6
   21080:	47c0      	blx	r8
   21082:	e7f5      	b.n	21070 <settings_call_set_handler+0x24>
	if (load_arg && load_arg->cb) {
   21084:	f8d7 8004 	ldr.w	r8, [r7, #4]
   21088:	f1b8 0f00 	cmp.w	r8, #0
   2108c:	d1f3      	bne.n	21076 <settings_call_set_handler+0x2a>
		ch = settings_parse_and_lookup(name, &name_key);
   2108e:	4620      	mov	r0, r4
   21090:	a909      	add	r1, sp, #36	; 0x24
   21092:	9307      	str	r3, [sp, #28]
   21094:	f7ff ff94 	bl	20fc0 <settings_parse_and_lookup>
		if (!ch) {
   21098:	2800      	cmp	r0, #0
   2109a:	d0e8      	beq.n	2106e <settings_call_set_handler+0x22>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   2109c:	6887      	ldr	r7, [r0, #8]
   2109e:	4632      	mov	r2, r6
   210a0:	4629      	mov	r1, r5
   210a2:	9b07      	ldr	r3, [sp, #28]
   210a4:	9809      	ldr	r0, [sp, #36]	; 0x24
   210a6:	47b8      	blx	r7
		if (rc != 0) {
   210a8:	2800      	cmp	r0, #0
   210aa:	d0e0      	beq.n	2106e <settings_call_set_handler+0x22>
			LOG_ERR("set-value failure. key: %s error(%d)",
   210ac:	e9cd 4003 	strd	r4, r0, [sp, #12]
   210b0:	2400      	movs	r4, #0
   210b2:	4b05      	ldr	r3, [pc, #20]	; (210c8 <settings_call_set_handler+0x7c>)
   210b4:	2201      	movs	r2, #1
   210b6:	9302      	str	r3, [sp, #8]
   210b8:	4620      	mov	r0, r4
   210ba:	4623      	mov	r3, r4
   210bc:	e9cd 4400 	strd	r4, r4, [sp]
   210c0:	4902      	ldr	r1, [pc, #8]	; (210cc <settings_call_set_handler+0x80>)
   210c2:	f7ff ff23 	bl	20f0c <z_log_msg_runtime_create.constprop.0>
			rc = 0;
   210c6:	e7d2      	b.n	2106e <settings_call_set_handler+0x22>
   210c8:	00037a17 	.word	0x00037a17
   210cc:	00034ae8 	.word	0x00034ae8

000210d0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   210d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   210d2:	4606      	mov	r6, r0
	int rc;
	int rc2;

	rc = 0;
   210d4:	2500      	movs	r5, #0

	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   210d6:	4c17      	ldr	r4, [pc, #92]	; (21134 <settings_commit_subtree+0x64>)
   210d8:	4f17      	ldr	r7, [pc, #92]	; (21138 <settings_commit_subtree+0x68>)
   210da:	42bc      	cmp	r4, r7
   210dc:	d308      	bcc.n	210f0 <settings_commit_subtree+0x20>
	return list->head;
   210de:	4b17      	ldr	r3, [pc, #92]	; (2113c <settings_commit_subtree+0x6c>)
   210e0:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   210e2:	b324      	cbz	r4, 2112e <settings_commit_subtree+0x5e>
   210e4:	3c14      	subs	r4, #20
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   210e6:	b9ae      	cbnz	r6, 21114 <settings_commit_subtree+0x44>
			continue;
		}
		if (ch->h_commit) {
   210e8:	68e3      	ldr	r3, [r4, #12]
   210ea:	b9db      	cbnz	r3, 21124 <settings_commit_subtree+0x54>
	return node->next;
   210ec:	6964      	ldr	r4, [r4, #20]
   210ee:	e7f8      	b.n	210e2 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   210f0:	b91e      	cbnz	r6, 210fa <settings_commit_subtree+0x2a>
		if (ch->h_commit) {
   210f2:	68e3      	ldr	r3, [r4, #12]
   210f4:	b94b      	cbnz	r3, 2110a <settings_commit_subtree+0x3a>
	STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   210f6:	3414      	adds	r4, #20
   210f8:	e7ef      	b.n	210da <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   210fa:	2200      	movs	r2, #0
   210fc:	4631      	mov	r1, r6
   210fe:	6820      	ldr	r0, [r4, #0]
   21100:	f00f fc39 	bl	30976 <settings_name_steq>
   21104:	2800      	cmp	r0, #0
   21106:	d1f4      	bne.n	210f2 <settings_commit_subtree+0x22>
   21108:	e7f5      	b.n	210f6 <settings_commit_subtree+0x26>
			rc2 = ch->h_commit();
   2110a:	4798      	blx	r3
				rc = rc2;
   2110c:	2d00      	cmp	r5, #0
   2110e:	bf08      	it	eq
   21110:	4605      	moveq	r5, r0
   21112:	e7f0      	b.n	210f6 <settings_commit_subtree+0x26>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   21114:	2200      	movs	r2, #0
   21116:	4631      	mov	r1, r6
   21118:	6820      	ldr	r0, [r4, #0]
   2111a:	f00f fc2c 	bl	30976 <settings_name_steq>
   2111e:	2800      	cmp	r0, #0
   21120:	d1e2      	bne.n	210e8 <settings_commit_subtree+0x18>
   21122:	e7e3      	b.n	210ec <settings_commit_subtree+0x1c>
			rc2 = ch->h_commit();
   21124:	4798      	blx	r3
			if (!rc) {
				rc = rc2;
   21126:	2d00      	cmp	r5, #0
   21128:	bf08      	it	eq
   2112a:	4605      	moveq	r5, r0
   2112c:	e7de      	b.n	210ec <settings_commit_subtree+0x1c>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   2112e:	4628      	mov	r0, r5
   21130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21132:	bf00      	nop
   21134:	00034b10 	.word	0x00034b10
   21138:	00034b10 	.word	0x00034b10
   2113c:	2000d1ec 	.word	0x2000d1ec

00021140 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   21140:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   21142:	4c06      	ldr	r4, [pc, #24]	; (2115c <settings_subsys_init+0x1c>)
   21144:	7823      	ldrb	r3, [r4, #0]
   21146:	b93b      	cbnz	r3, 21158 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   21148:	f7ff fef2 	bl	20f30 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   2114c:	f000 fab8 	bl	216c0 <settings_backend_init>

	if (!err) {
   21150:	b908      	cbnz	r0, 21156 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   21152:	2301      	movs	r3, #1
   21154:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   21156:	bd10      	pop	{r4, pc}
		return 0;
   21158:	2000      	movs	r0, #0
   2115a:	e7fc      	b.n	21156 <settings_subsys_init+0x16>
   2115c:	2000e22b 	.word	0x2000e22b

00021160 <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   21160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
   21164:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 21218 <settings_line_raw_read_until+0xb8>
{
   21168:	b08b      	sub	sp, #44	; 0x2c
   2116a:	9302      	str	r3, [sp, #8]
	uint8_t rbs = settings_io_cb.rwbs;
   2116c:	f89a 300c 	ldrb.w	r3, [sl, #12]
{
   21170:	4606      	mov	r6, r0
   21172:	4688      	mov	r8, r1
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
   21174:	4615      	mov	r5, r2
	uint8_t rbs = settings_io_cb.rwbs;
   21176:	9301      	str	r3, [sp, #4]
	if (len_req == 0) {
   21178:	2a00      	cmp	r2, #0
   2117a:	d046      	beq.n	2120a <settings_line_raw_read_until+0xaa>
   2117c:	4617      	mov	r7, r2
	rem_size = len_req;

	while (rem_size) {
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
   2117e:	2310      	movs	r3, #16
   21180:	9305      	str	r3, [sp, #20]
		off = seek / rbs * rbs;
   21182:	9b01      	ldr	r3, [sp, #4]
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   21184:	f8da 4000 	ldr.w	r4, [sl]
		off = seek / rbs * rbs;
   21188:	fb96 fbf3 	sdiv	fp, r6, r3
   2118c:	fb03 fb0b 	mul.w	fp, r3, fp
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   21190:	9815      	ldr	r0, [sp, #84]	; 0x54
   21192:	4659      	mov	r1, fp
   21194:	ab05      	add	r3, sp, #20
   21196:	aa06      	add	r2, sp, #24
   21198:	47a0      	blx	r4
		if (rc) {
   2119a:	4604      	mov	r4, r0
   2119c:	2800      	cmp	r0, #0
   2119e:	d137      	bne.n	21210 <settings_line_raw_read_until+0xb0>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   211a0:	9a05      	ldr	r2, [sp, #20]
   211a2:	eba6 0b0b 	sub.w	fp, r6, fp
   211a6:	eba2 020b 	sub.w	r2, r2, fp
		len = MIN(rem_size, len);
   211aa:	42ba      	cmp	r2, r7
   211ac:	bf28      	it	cs
   211ae:	463a      	movcs	r2, r7

		if (until_char != NULL) {
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   211b0:	ab06      	add	r3, sp, #24
   211b2:	449b      	add	fp, r3
		if (until_char != NULL) {
   211b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   211b6:	4691      	mov	r9, r2
		if (until_char != NULL) {
   211b8:	b31b      	cbz	r3, 21202 <settings_line_raw_read_until+0xa2>
			pend = memchr(&temp_buf[off], *until_char, len);
   211ba:	4658      	mov	r0, fp
   211bc:	7819      	ldrb	r1, [r3, #0]
   211be:	f012 fd18 	bl	33bf2 <memchr>
			if (pend != NULL) {
   211c2:	b300      	cbz	r0, 21206 <settings_line_raw_read_until+0xa6>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   211c4:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   211c6:	eba0 090b 	sub.w	r9, r0, fp
   211ca:	4659      	mov	r1, fp
   211cc:	464a      	mov	r2, r9
   211ce:	4640      	mov	r0, r8
   211d0:	9303      	str	r3, [sp, #12]
   211d2:	f012 fd2c 	bl	33c2e <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   211d6:	9905      	ldr	r1, [sp, #20]
   211d8:	9b03      	ldr	r3, [sp, #12]
   211da:	290f      	cmp	r1, #15
		rem_size -= len;
   211dc:	eba7 0709 	sub.w	r7, r7, r9
		if (exp_size > read_size || rc) {
   211e0:	d904      	bls.n	211ec <settings_line_raw_read_until+0x8c>
   211e2:	b91b      	cbnz	r3, 211ec <settings_line_raw_read_until+0x8c>
			break;
		}

		out += len;
   211e4:	44c8      	add	r8, r9
		seek += len;
   211e6:	444e      	add	r6, r9
	while (rem_size) {
   211e8:	2f00      	cmp	r7, #0
   211ea:	d1c8      	bne.n	2117e <settings_line_raw_read_until+0x1e>
	}

	*len_read = len_req - rem_size;
   211ec:	9a02      	ldr	r2, [sp, #8]
   211ee:	1bed      	subs	r5, r5, r7
   211f0:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   211f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   211f4:	b10a      	cbz	r2, 211fa <settings_line_raw_read_until+0x9a>
		return (rc) ? 0 : 1;
   211f6:	f083 0401 	eor.w	r4, r3, #1
	}

	return 0;
}
   211fa:	4620      	mov	r0, r4
   211fc:	b00b      	add	sp, #44	; 0x2c
   211fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   21202:	9b14      	ldr	r3, [sp, #80]	; 0x50
   21204:	e7e1      	b.n	211ca <settings_line_raw_read_until+0x6a>
   21206:	4623      	mov	r3, r4
   21208:	e7df      	b.n	211ca <settings_line_raw_read_until+0x6a>
		return -EINVAL;
   2120a:	f06f 0415 	mvn.w	r4, #21
   2120e:	e7f4      	b.n	211fa <settings_line_raw_read_until+0x9a>
			return -EIO;
   21210:	f06f 0404 	mvn.w	r4, #4
   21214:	e7f1      	b.n	211fa <settings_line_raw_read_until+0x9a>
   21216:	bf00      	nop
   21218:	2000d1f4 	.word	0x2000d1f4

0002121c <settings_line_write>:
{
   2121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
   21220:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 212e0 <settings_line_write+0xc4>
{
   21224:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
   21226:	f899 800c 	ldrb.w	r8, [r9, #12]
{
   2122a:	4682      	mov	sl, r0
   2122c:	468b      	mov	fp, r1
   2122e:	4617      	mov	r7, r2
   21230:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   21232:	f7fb ff35 	bl	1d0a0 <strlen>
	w_size = rem - rem % wbs;
   21236:	fbb0 f4f8 	udiv	r4, r0, r8
   2123a:	fb08 0414 	mls	r4, r8, r4, r0
   2123e:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   21240:	462b      	mov	r3, r5
   21242:	f8d9 6004 	ldr.w	r6, [r9, #4]
   21246:	4652      	mov	r2, sl
   21248:	9901      	ldr	r1, [sp, #4]
   2124a:	9810      	ldr	r0, [sp, #64]	; 0x40
   2124c:	47b0      	blx	r6
	w_loc += w_size;
   2124e:	9b01      	ldr	r3, [sp, #4]
   21250:	442b      	add	r3, r5
   21252:	461e      	mov	r6, r3
	if (rem) {
   21254:	b134      	cbz	r4, 21264 <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   21256:	2310      	movs	r3, #16
   21258:	4622      	mov	r2, r4
   2125a:	eb0a 0105 	add.w	r1, sl, r5
   2125e:	a802      	add	r0, sp, #8
   21260:	f012 fcf2 	bl	33c48 <__memcpy_chk>
	w_buf[rem] = '=';
   21264:	223d      	movs	r2, #61	; 0x3d
   21266:	ab06      	add	r3, sp, #24
   21268:	4423      	add	r3, r4
   2126a:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   2126e:	f104 0a01 	add.w	sl, r4, #1
		while (w_size < sizeof(w_buf)) {
   21272:	f1ba 0f0f 	cmp.w	sl, #15
   21276:	d90b      	bls.n	21290 <settings_line_write+0x74>
   21278:	2400      	movs	r4, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   2127a:	4653      	mov	r3, sl
   2127c:	4631      	mov	r1, r6
   2127e:	f8d9 5004 	ldr.w	r5, [r9, #4]
   21282:	9810      	ldr	r0, [sp, #64]	; 0x40
   21284:	aa02      	add	r2, sp, #8
   21286:	47a8      	blx	r5
		if (rc) {
   21288:	bb20      	cbnz	r0, 212d4 <settings_line_write+0xb8>
		if (done) {
   2128a:	bb2c      	cbnz	r4, 212d8 <settings_line_write+0xbc>
		w_loc += w_size;
   2128c:	4456      	add	r6, sl
		w_size = 0;
   2128e:	46a2      	mov	sl, r4
			if (rem) {
   21290:	b17f      	cbz	r7, 212b2 <settings_line_write+0x96>
				add = MIN(rem, sizeof(w_buf) - w_size);
   21292:	f1ca 0410 	rsb	r4, sl, #16
   21296:	42bc      	cmp	r4, r7
   21298:	bf28      	it	cs
   2129a:	463c      	movcs	r4, r7
   2129c:	ab02      	add	r3, sp, #8
   2129e:	4659      	mov	r1, fp
   212a0:	eb03 000a 	add.w	r0, r3, sl
   212a4:	4622      	mov	r2, r4
   212a6:	f012 fcc2 	bl	33c2e <memcpy>
				value += add;
   212aa:	44a3      	add	fp, r4
				rem -= add;
   212ac:	1b3f      	subs	r7, r7, r4
				w_size += add;
   212ae:	44a2      	add	sl, r4
   212b0:	e7df      	b.n	21272 <settings_line_write+0x56>
				add = (w_size) % wbs;
   212b2:	fbba f4f8 	udiv	r4, sl, r8
   212b6:	fb08 a414 	mls	r4, r8, r4, sl
				if (add) {
   212ba:	b14c      	cbz	r4, 212d0 <settings_line_write+0xb4>
					add = wbs - add;
   212bc:	eba8 0404 	sub.w	r4, r8, r4
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   212c0:	ab02      	add	r3, sp, #8
   212c2:	eb03 000a 	add.w	r0, r3, sl
   212c6:	4622      	mov	r2, r4
   212c8:	4639      	mov	r1, r7
   212ca:	f012 fcd0 	bl	33c6e <memset>
					w_size += add;
   212ce:	44a2      	add	sl, r4
				done = true;
   212d0:	2401      	movs	r4, #1
   212d2:	e7d2      	b.n	2127a <settings_line_write+0x5e>
			return -EIO;
   212d4:	f06f 0004 	mvn.w	r0, #4
}
   212d8:	b007      	add	sp, #28
   212da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212de:	bf00      	nop
   212e0:	2000d1f4 	.word	0x2000d1f4

000212e4 <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   212e4:	4b03      	ldr	r3, [pc, #12]	; (212f4 <settings_line_val_get_len+0x10>)
{
   212e6:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   212e8:	689b      	ldr	r3, [r3, #8]
{
   212ea:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   212ec:	4608      	mov	r0, r1
   212ee:	4798      	blx	r3

	return len - val_off;
}
   212f0:	1b00      	subs	r0, r0, r4
   212f2:	bd10      	pop	{r4, pc}
   212f4:	2000d1f4 	.word	0x2000d1f4

000212f8 <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   212f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   212fc:	4680      	mov	r8, r0
   212fe:	468a      	mov	sl, r1
   21300:	4691      	mov	r9, r2
   21302:	461d      	mov	r5, r3
	int rc = -EINVAL;
   21304:	f06f 0015 	mvn.w	r0, #21
{
   21308:	b086      	sub	sp, #24
   2130a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   2130c:	4f13      	ldr	r7, [pc, #76]	; (2135c <settings_line_entry_copy+0x64>)
	while (len) {
   2130e:	b916      	cbnz	r6, 21316 <settings_line_entry_copy+0x1e>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   21310:	b006      	add	sp, #24
   21312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   21316:	2e10      	cmp	r6, #16
   21318:	4633      	mov	r3, r6
   2131a:	bf28      	it	cs
   2131c:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   2131e:	4629      	mov	r1, r5
		chunk_size = MIN(len, sizeof(buf));
   21320:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   21322:	4648      	mov	r0, r9
   21324:	683c      	ldr	r4, [r7, #0]
   21326:	ab01      	add	r3, sp, #4
   21328:	aa02      	add	r2, sp, #8
   2132a:	47a0      	blx	r4
		if (rc) {
   2132c:	2800      	cmp	r0, #0
   2132e:	d1ef      	bne.n	21310 <settings_line_entry_copy+0x18>
		size_t write_size = chunk_size;
   21330:	9b01      	ldr	r3, [sp, #4]
		if (chunk_size % settings_io_cb.rwbs) {
   21332:	7b39      	ldrb	r1, [r7, #12]
   21334:	fbb3 f2f1 	udiv	r2, r3, r1
   21338:	fb01 3212 	mls	r2, r1, r2, r3
   2133c:	b10a      	cbz	r2, 21342 <settings_line_entry_copy+0x4a>
			write_size += settings_io_cb.rwbs -
   2133e:	440b      	add	r3, r1
   21340:	1a9b      	subs	r3, r3, r2
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, write_size);
   21342:	4651      	mov	r1, sl
   21344:	4640      	mov	r0, r8
   21346:	687c      	ldr	r4, [r7, #4]
   21348:	aa02      	add	r2, sp, #8
   2134a:	47a0      	blx	r4
		if (rc) {
   2134c:	2800      	cmp	r0, #0
   2134e:	d1df      	bne.n	21310 <settings_line_entry_copy+0x18>
		src_off += chunk_size;
   21350:	9b01      	ldr	r3, [sp, #4]
   21352:	441d      	add	r5, r3
		dst_off += chunk_size;
   21354:	449a      	add	sl, r3
		len -= chunk_size;
   21356:	1af6      	subs	r6, r6, r3
   21358:	e7d9      	b.n	2130e <settings_line_entry_copy+0x16>
   2135a:	bf00      	nop
   2135c:	2000d1f4 	.word	0x2000d1f4

00021360 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
   21360:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   21362:	4c03      	ldr	r4, [pc, #12]	; (21370 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   21364:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   21368:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   2136a:	7323      	strb	r3, [r4, #12]
}
   2136c:	bd10      	pop	{r4, pc}
   2136e:	bf00      	nop
   21370:	2000d1f4 	.word	0x2000d1f4

00021374 <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   21374:	b530      	push	{r4, r5, lr}
   21376:	4604      	mov	r4, r0
   21378:	b085      	sub	sp, #20
   2137a:	4610      	mov	r0, r2
   2137c:	461d      	mov	r5, r3
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
   2137e:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   21382:	f7ff ffaf 	bl	212e4 <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   21386:	4a04      	ldr	r2, [pc, #16]	; (21398 <settings_line_load_cb+0x24>)
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   21388:	4601      	mov	r1, r0
	return settings_call_set_handler(name, len, settings_line_read_cb,
   2138a:	9500      	str	r5, [sp, #0]
   2138c:	4620      	mov	r0, r4
   2138e:	ab02      	add	r3, sp, #8
   21390:	f7ff fe5c 	bl	2104c <settings_call_set_handler>
					 &value_ctx, arg);
}
   21394:	b005      	add	sp, #20
   21396:	bd30      	pop	{r4, r5, pc}
   21398:	00030a03 	.word	0x00030a03

0002139c <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   2139c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   213a0:	4605      	mov	r5, r0
   213a2:	b0b7      	sub	sp, #220	; 0xdc
   213a4:	460e      	mov	r6, r1
   213a6:	4617      	mov	r7, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   213a8:	2100      	movs	r1, #0
   213aa:	2210      	movs	r2, #16
   213ac:	a806      	add	r0, sp, #24
{
   213ae:	4698      	mov	r8, r3
	struct fcb_entry_ctx entry_ctx = {
   213b0:	f012 fc5d 	bl	33c6e <memset>
   213b4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
			LOG_ERR("failed to load line");
   213b6:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 21484 <settings_fcb_load_priv+0xe8>
   213ba:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 21488 <settings_fcb_load_priv+0xec>
	struct fcb_entry_ctx entry_ctx = {
   213be:	930a      	str	r3, [sp, #40]	; 0x28
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   213c0:	f105 0908 	add.w	r9, r5, #8
   213c4:	4648      	mov	r0, r9
   213c6:	a906      	add	r1, sp, #24
   213c8:	f00f f8f5 	bl	305b6 <fcb_getnext>
   213cc:	4604      	mov	r4, r0
   213ce:	b118      	cbz	r0, 213d8 <settings_fcb_load_priv+0x3c>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   213d0:	2000      	movs	r0, #0
   213d2:	b037      	add	sp, #220	; 0xdc
   213d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   213d8:	214a      	movs	r1, #74	; 0x4a
   213da:	ab06      	add	r3, sp, #24
   213dc:	aa04      	add	r2, sp, #16
   213de:	a810      	add	r0, sp, #64	; 0x40
   213e0:	f00f fb1e 	bl	30a20 <settings_line_name_read>
		if (rc) {
   213e4:	b158      	cbz	r0, 213fe <settings_fcb_load_priv+0x62>
			LOG_ERR("Failed to load line name: %d", rc);
   213e6:	4b26      	ldr	r3, [pc, #152]	; (21480 <settings_fcb_load_priv+0xe4>)
   213e8:	9003      	str	r0, [sp, #12]
   213ea:	e9cd 4301 	strd	r4, r3, [sp, #4]
   213ee:	2201      	movs	r2, #1
   213f0:	4623      	mov	r3, r4
   213f2:	4651      	mov	r1, sl
   213f4:	4620      	mov	r0, r4
   213f6:	9400      	str	r4, [sp, #0]
   213f8:	f00f fb87 	bl	30b0a <z_log_msg_runtime_create.constprop.0>
			continue;
   213fc:	e7e0      	b.n	213c0 <settings_fcb_load_priv+0x24>
		name[name_len] = '\0';
   213fe:	9b04      	ldr	r3, [sp, #16]
   21400:	aa36      	add	r2, sp, #216	; 0xd8
   21402:	441a      	add	r2, r3
   21404:	f802 0c98 	strb.w	r0, [r2, #-152]
		if (filter_duplicates &&
   21408:	f1b8 0f00 	cmp.w	r8, #0
   2140c:	d013      	beq.n	21436 <settings_fcb_load_priv+0x9a>
	if (off >= entry_ctx->loc.fe_data_len) {
   2140e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
		    (!read_entry_len(&entry_ctx, name_len+1) ||
   21412:	3301      	adds	r3, #1
	if (off >= entry_ctx->loc.fe_data_len) {
   21414:	4293      	cmp	r3, r2
   21416:	dad3      	bge.n	213c0 <settings_fcb_load_priv+0x24>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   21418:	ac0b      	add	r4, sp, #44	; 0x2c
   2141a:	f10d 0c18 	add.w	ip, sp, #24
   2141e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   21422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21424:	f8dc 3000 	ldr.w	r3, [ip]
   21428:	6023      	str	r3, [r4, #0]
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   2142a:	4648      	mov	r0, r9
   2142c:	a90b      	add	r1, sp, #44	; 0x2c
   2142e:	f00f f8c2 	bl	305b6 <fcb_getnext>
   21432:	4604      	mov	r4, r0
   21434:	b130      	cbz	r0, 21444 <settings_fcb_load_priv+0xa8>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   21436:	9a04      	ldr	r2, [sp, #16]
   21438:	463b      	mov	r3, r7
   2143a:	3201      	adds	r2, #1
   2143c:	a906      	add	r1, sp, #24
   2143e:	a810      	add	r0, sp, #64	; 0x40
   21440:	47b0      	blx	r6
   21442:	e7bd      	b.n	213c0 <settings_fcb_load_priv+0x24>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   21444:	214a      	movs	r1, #74	; 0x4a
   21446:	ab0b      	add	r3, sp, #44	; 0x2c
   21448:	aa05      	add	r2, sp, #20
   2144a:	a823      	add	r0, sp, #140	; 0x8c
   2144c:	f00f fae8 	bl	30a20 <settings_line_name_read>
   21450:	b148      	cbz	r0, 21466 <settings_fcb_load_priv+0xca>
			LOG_ERR("failed to load line");
   21452:	4623      	mov	r3, r4
   21454:	2201      	movs	r2, #1
   21456:	4651      	mov	r1, sl
   21458:	4620      	mov	r0, r4
   2145a:	e9cd 4b01 	strd	r4, fp, [sp, #4]
   2145e:	9400      	str	r4, [sp, #0]
   21460:	f00f fb53 	bl	30b0a <z_log_msg_runtime_create.constprop.0>
			continue;
   21464:	e7e1      	b.n	2142a <settings_fcb_load_priv+0x8e>
		name2[name2_len] = '\0';
   21466:	9b05      	ldr	r3, [sp, #20]
   21468:	aa36      	add	r2, sp, #216	; 0xd8
   2146a:	4413      	add	r3, r2
   2146c:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   21470:	a923      	add	r1, sp, #140	; 0x8c
   21472:	a810      	add	r0, sp, #64	; 0x40
   21474:	f7fb fe0a 	bl	1d08c <strcmp>
   21478:	2800      	cmp	r0, #0
   2147a:	d1d6      	bne.n	2142a <settings_fcb_load_priv+0x8e>
   2147c:	e7a0      	b.n	213c0 <settings_fcb_load_priv+0x24>
   2147e:	bf00      	nop
   21480:	00037a3c 	.word	0x00037a3c
   21484:	00037a59 	.word	0x00037a59
   21488:	00034ae8 	.word	0x00034ae8

0002148c <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   2148c:	460a      	mov	r2, r1
	return settings_fcb_load_priv(
   2148e:	2301      	movs	r3, #1
   21490:	4901      	ldr	r1, [pc, #4]	; (21498 <settings_fcb_load+0xc>)
   21492:	f7ff bf83 	b.w	2139c <settings_fcb_load_priv>
   21496:	bf00      	nop
   21498:	00021375 	.word	0x00021375

0002149c <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   2149c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   214a0:	4605      	mov	r5, r0
   214a2:	460f      	mov	r7, r1
   214a4:	4691      	mov	r9, r2
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   214a6:	4698      	mov	r8, r3
{
   214a8:	b0c3      	sub	sp, #268	; 0x10c
	if (val_len > 0 && value == NULL) {
   214aa:	b103      	cbz	r3, 214ae <settings_fcb_save+0x12>
   214ac:	b17a      	cbz	r2, 214ce <settings_fcb_save+0x32>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   214ae:	2400      	movs	r4, #0
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   214b0:	4628      	mov	r0, r5
   214b2:	4623      	mov	r3, r4
   214b4:	4962      	ldr	r1, [pc, #392]	; (21640 <settings_fcb_save+0x1a4>)
   214b6:	aa09      	add	r2, sp, #36	; 0x24
	cdca.val = (char *)value;
   214b8:	e9cd 7909 	strd	r7, r9, [sp, #36]	; 0x24
	cdca.val_len = val_len;
   214bc:	e9cd 840b 	strd	r8, r4, [sp, #44]	; 0x2c
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   214c0:	f7ff ff6c 	bl	2139c <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   214c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   214c6:	2b01      	cmp	r3, #1
   214c8:	f000 80b6 	beq.w	21638 <settings_fcb_save+0x19c>
	if (!name) {
   214cc:	b917      	cbnz	r7, 214d4 <settings_fcb_save+0x38>
		return -EINVAL;
   214ce:	f06f 0415 	mvn.w	r4, #21
   214d2:	e0b1      	b.n	21638 <settings_fcb_save+0x19c>
	len = settings_line_len_calc(name, val_len);
   214d4:	4641      	mov	r1, r8
   214d6:	4638      	mov	r0, r7
   214d8:	f00f fa83 	bl	309e2 <settings_line_len_calc>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   214dc:	f8df b16c 	ldr.w	fp, [pc, #364]	; 2164c <settings_fcb_save+0x1b0>
	len = settings_line_len_calc(name, val_len);
   214e0:	9005      	str	r0, [sp, #20]
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   214e2:	7b6b      	ldrb	r3, [r5, #13]
   214e4:	429c      	cmp	r4, r3
   214e6:	daf2      	bge.n	214ce <settings_fcb_save+0x32>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   214e8:	f105 0608 	add.w	r6, r5, #8
   214ec:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
   214f0:	4652      	mov	r2, sl
   214f2:	4630      	mov	r0, r6
   214f4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   214f8:	f00e fd42 	bl	2ff80 <fcb_append>
		if (rc != -ENOSPC) {
   214fc:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   21500:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   21502:	f040 8083 	bne.w	2160c <settings_fcb_save+0x170>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
   21506:	7b6b      	ldrb	r3, [r5, #13]
   21508:	3b01      	subs	r3, #1
   2150a:	42a3      	cmp	r3, r4
   2150c:	dd1f      	ble.n	2154e <settings_fcb_save+0xb2>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   2150e:	4630      	mov	r0, r6
   21510:	f00e fd14 	bl	2ff3c <fcb_append_to_scratch>
	if (rc) {
   21514:	4682      	mov	sl, r0
   21516:	b9d0      	cbnz	r0, 2154e <settings_fcb_save+0xb2>
	rbs = flash_area_align(cf->cf_fcb.fap);
   21518:	6c28      	ldr	r0, [r5, #64]	; 0x40
   2151a:	f00f fa04 	bl	30926 <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   2151e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   21520:	e9cd aa12 	strd	sl, sl, [sp, #72]	; 0x48
	loc1.fap = cf->cf_fcb.fap;
   21524:	9316      	str	r3, [sp, #88]	; 0x58
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   21526:	4630      	mov	r0, r6
   21528:	a912      	add	r1, sp, #72	; 0x48
   2152a:	f00f f844 	bl	305b6 <fcb_getnext>
   2152e:	b180      	cbz	r0, 21552 <settings_fcb_save+0xb6>
	rc = fcb_rotate(&cf->cf_fcb);
   21530:	4630      	mov	r0, r6
   21532:	f00f f85b 	bl	305ec <fcb_rotate>
	if (rc != 0) {
   21536:	b150      	cbz	r0, 2154e <settings_fcb_save+0xb2>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   21538:	4b42      	ldr	r3, [pc, #264]	; (21644 <settings_fcb_save+0x1a8>)
   2153a:	9003      	str	r0, [sp, #12]
   2153c:	9302      	str	r3, [sp, #8]
   2153e:	2300      	movs	r3, #0
   21540:	2201      	movs	r2, #1
   21542:	4659      	mov	r1, fp
   21544:	4618      	mov	r0, r3
   21546:	e9cd 3300 	strd	r3, r3, [sp]
   2154a:	f00f fade 	bl	30b0a <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   2154e:	3401      	adds	r4, #1
   21550:	e7c7      	b.n	214e2 <settings_fcb_save+0x46>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   21552:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21554:	9a12      	ldr	r2, [sp, #72]	; 0x48
   21556:	429a      	cmp	r2, r3
   21558:	d1ea      	bne.n	21530 <settings_fcb_save+0x94>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   2155a:	2149      	movs	r1, #73	; 0x49
   2155c:	ab12      	add	r3, sp, #72	; 0x48
   2155e:	aa07      	add	r2, sp, #28
   21560:	a81c      	add	r0, sp, #112	; 0x70
   21562:	f00f fa5d 	bl	30a20 <settings_line_name_read>
		if (rc) {
   21566:	2800      	cmp	r0, #0
   21568:	d1dd      	bne.n	21526 <settings_fcb_save+0x8a>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   2156a:	9b07      	ldr	r3, [sp, #28]
   2156c:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
   21570:	3301      	adds	r3, #1
   21572:	4293      	cmp	r3, r2
   21574:	d0d7      	beq.n	21526 <settings_fcb_save+0x8a>
		loc2 = loc1;
   21576:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
   2157a:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   2157e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   21582:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21586:	f8de 3000 	ldr.w	r3, [lr]
   2158a:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   2158e:	4630      	mov	r0, r6
   21590:	a917      	add	r1, sp, #92	; 0x5c
   21592:	f00f f810 	bl	305b6 <fcb_getnext>
   21596:	b330      	cbz	r0, 215e6 <settings_fcb_save+0x14a>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   21598:	4630      	mov	r0, r6
   2159a:	f8bd 1054 	ldrh.w	r1, [sp, #84]	; 0x54
   2159e:	aa17      	add	r2, sp, #92	; 0x5c
   215a0:	f00e fcee 	bl	2ff80 <fcb_append>
		if (rc) {
   215a4:	2800      	cmp	r0, #0
   215a6:	d1be      	bne.n	21526 <settings_fcb_save+0x8a>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   215a8:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
   215ac:	4601      	mov	r1, r0
   215ae:	9300      	str	r3, [sp, #0]
   215b0:	aa12      	add	r2, sp, #72	; 0x48
   215b2:	4603      	mov	r3, r0
   215b4:	a817      	add	r0, sp, #92	; 0x5c
   215b6:	f7ff fe9f 	bl	212f8 <settings_line_entry_copy>
		if (rc) {
   215ba:	4682      	mov	sl, r0
   215bc:	2800      	cmp	r0, #0
   215be:	d1b2      	bne.n	21526 <settings_fcb_save+0x8a>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   215c0:	4630      	mov	r0, r6
   215c2:	a917      	add	r1, sp, #92	; 0x5c
   215c4:	f00e fd7d 	bl	300c2 <fcb_append_finish>
		if (rc != 0) {
   215c8:	2800      	cmp	r0, #0
   215ca:	d0ac      	beq.n	21526 <settings_fcb_save+0x8a>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   215cc:	4b1e      	ldr	r3, [pc, #120]	; (21648 <settings_fcb_save+0x1ac>)
   215ce:	9003      	str	r0, [sp, #12]
   215d0:	e9cd a301 	strd	sl, r3, [sp, #4]
   215d4:	2201      	movs	r2, #1
   215d6:	4653      	mov	r3, sl
   215d8:	4659      	mov	r1, fp
   215da:	4650      	mov	r0, sl
   215dc:	f8cd a000 	str.w	sl, [sp]
   215e0:	f00f fa93 	bl	30b0a <z_log_msg_runtime_create.constprop.0>
   215e4:	e79f      	b.n	21526 <settings_fcb_save+0x8a>
			rc = settings_line_name_read(name2, sizeof(name2),
   215e6:	2149      	movs	r1, #73	; 0x49
   215e8:	ab17      	add	r3, sp, #92	; 0x5c
   215ea:	aa08      	add	r2, sp, #32
   215ec:	a82f      	add	r0, sp, #188	; 0xbc
   215ee:	f00f fa17 	bl	30a20 <settings_line_name_read>
			if (rc) {
   215f2:	2800      	cmp	r0, #0
   215f4:	d1cb      	bne.n	2158e <settings_fcb_save+0xf2>
			if ((val1_off == val2_off) &&
   215f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
   215fa:	429a      	cmp	r2, r3
   215fc:	d1c7      	bne.n	2158e <settings_fcb_save+0xf2>
			    !memcmp(name1, name2, val1_off)) {
   215fe:	a92f      	add	r1, sp, #188	; 0xbc
   21600:	a81c      	add	r0, sp, #112	; 0x70
   21602:	f012 fb04 	bl	33c0e <memcmp>
			if ((val1_off == val2_off) &&
   21606:	2800      	cmp	r0, #0
   21608:	d1c1      	bne.n	2158e <settings_fcb_save+0xf2>
   2160a:	e78c      	b.n	21526 <settings_fcb_save+0x8a>
	if (rc) {
   2160c:	2800      	cmp	r0, #0
   2160e:	f47f af5e 	bne.w	214ce <settings_fcb_save+0x32>
	loc.fap = cf->cf_fcb.fap;
   21612:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   21614:	4649      	mov	r1, r9
	loc.fap = cf->cf_fcb.fap;
   21616:	9211      	str	r2, [sp, #68]	; 0x44
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   21618:	4638      	mov	r0, r7
   2161a:	4642      	mov	r2, r8
   2161c:	f8cd a000 	str.w	sl, [sp]
   21620:	f7ff fdfc 	bl	2121c <settings_line_write>
	if (rc != -EIO) {
   21624:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   21626:	4604      	mov	r4, r0
	if (rc != -EIO) {
   21628:	d006      	beq.n	21638 <settings_fcb_save+0x19c>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   2162a:	4651      	mov	r1, sl
   2162c:	4630      	mov	r0, r6
   2162e:	f00e fd48 	bl	300c2 <fcb_append_finish>
			rc = i;
   21632:	2c00      	cmp	r4, #0
   21634:	bf08      	it	eq
   21636:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   21638:	4620      	mov	r0, r4
   2163a:	b043      	add	sp, #268	; 0x10c
   2163c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21640:	00030a41 	.word	0x00030a41
   21644:	00037a8e 	.word	0x00037a8e
   21648:	00037a6d 	.word	0x00037a6d
   2164c:	00034ae8 	.word	0x00034ae8

00021650 <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   21650:	2301      	movs	r3, #1
{
   21652:	b570      	push	{r4, r5, r6, lr}
   21654:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   21656:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   21658:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(SETTINGS_PARTITION, &cf->cf_fcb);
   2165a:	f100 0608 	add.w	r6, r0, #8
   2165e:	4631      	mov	r1, r6
   21660:	200c      	movs	r0, #12
   21662:	f00e fe30 	bl	302c6 <fcb_init>
		if (rc) {
   21666:	4605      	mov	r5, r0
   21668:	b9b0      	cbnz	r0, 21698 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   2166a:	4630      	mov	r0, r6
   2166c:	f00e fd91 	bl	30192 <fcb_free_sector_cnt>
   21670:	2800      	cmp	r0, #0
   21672:	dc0a      	bgt.n	2168a <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   21674:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   21676:	6c20      	ldr	r0, [r4, #64]	; 0x40
   21678:	e9d3 1200 	ldrd	r1, r2, [r3]
   2167c:	f00f f93c 	bl	308f8 <flash_area_erase>
			if (rc) {
   21680:	2800      	cmp	r0, #0
   21682:	d0ec      	beq.n	2165e <settings_fcb_src+0xe>
				return -EIO;
   21684:	f06f 0504 	mvn.w	r5, #4
   21688:	e004      	b.n	21694 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2168a:	4b05      	ldr	r3, [pc, #20]	; (216a0 <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   2168c:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2168e:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   21690:	f7ff fbfa 	bl	20e88 <settings_src_register>
}
   21694:	4628      	mov	r0, r5
   21696:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   21698:	f06f 0515 	mvn.w	r5, #21
   2169c:	e7fa      	b.n	21694 <settings_fcb_src+0x44>
   2169e:	bf00      	nop
   216a0:	00034cc8 	.word	0x00034cc8

000216a4 <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   216a4:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   216a8:	4a02      	ldr	r2, [pc, #8]	; (216b4 <settings_mount_fcb_backend+0x10>)
   216aa:	4903      	ldr	r1, [pc, #12]	; (216b8 <settings_mount_fcb_backend+0x14>)
   216ac:	4803      	ldr	r0, [pc, #12]	; (216bc <settings_mount_fcb_backend+0x18>)
   216ae:	f7ff be57 	b.w	21360 <settings_line_io_init>
   216b2:	bf00      	nop
   216b4:	00030abf 	.word	0x00030abf
   216b8:	00030ac7 	.word	0x00030ac7
   216bc:	00030adb 	.word	0x00030adb

000216c0 <settings_backend_init>:
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
   216c0:	2309      	movs	r3, #9
{
   216c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(SETTINGS_PARTITION, &cnt,
   216c4:	200c      	movs	r0, #12
   216c6:	4669      	mov	r1, sp
   216c8:	4a21      	ldr	r2, [pc, #132]	; (21750 <settings_backend_init+0x90>)
	uint32_t cnt = sizeof(settings_fcb_area) /
   216ca:	9300      	str	r3, [sp, #0]
	rc = flash_area_get_sectors(SETTINGS_PARTITION, &cnt,
   216cc:	f7ff fb86 	bl	20ddc <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   216d0:	f110 0f13 	cmn.w	r0, #19
   216d4:	d03a      	beq.n	2174c <settings_backend_init+0x8c>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   216d6:	b138      	cbz	r0, 216e8 <settings_backend_init+0x28>
   216d8:	300c      	adds	r0, #12
   216da:	d005      	beq.n	216e8 <settings_backend_init+0x28>
		k_panic();
   216dc:	4040      	eors	r0, r0
   216de:	f380 8811 	msr	BASEPRI, r0
   216e2:	f04f 0004 	mov.w	r0, #4
   216e6:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   216e8:	4c1a      	ldr	r4, [pc, #104]	; (21754 <settings_backend_init+0x94>)
   216ea:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   216ec:	4620      	mov	r0, r4
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   216ee:	7363      	strb	r3, [r4, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   216f0:	f7ff ffae 	bl	21650 <settings_fcb_src>

	if (rc != 0) {
   216f4:	b308      	cbz	r0, 2173a <settings_backend_init+0x7a>
		rc = flash_area_open(SETTINGS_PARTITION, &fap);
   216f6:	a901      	add	r1, sp, #4
   216f8:	200c      	movs	r0, #12
   216fa:	f7ff fb47 	bl	20d8c <flash_area_open>

		if (rc == 0) {
   216fe:	4601      	mov	r1, r0
   21700:	b160      	cbz	r0, 2171c <settings_backend_init+0x5c>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   21702:	4040      	eors	r0, r0
   21704:	f380 8811 	msr	BASEPRI, r0
   21708:	f04f 0004 	mov.w	r0, #4
   2170c:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   2170e:	4040      	eors	r0, r0
   21710:	f380 8811 	msr	BASEPRI, r0
   21714:	f04f 0004 	mov.w	r0, #4
   21718:	df02      	svc	2
   2171a:	e00e      	b.n	2173a <settings_backend_init+0x7a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   2171c:	9801      	ldr	r0, [sp, #4]
   2171e:	6882      	ldr	r2, [r0, #8]
   21720:	f00f f8ea 	bl	308f8 <flash_area_erase>
   21724:	4605      	mov	r5, r0
			flash_area_close(fap);
   21726:	9801      	ldr	r0, [sp, #4]
   21728:	f00f f8bb 	bl	308a2 <flash_area_close>
		if (rc != 0) {
   2172c:	2d00      	cmp	r5, #0
   2172e:	d1e8      	bne.n	21702 <settings_backend_init+0x42>
			rc = settings_fcb_src(&config_init_settings_fcb);
   21730:	4620      	mov	r0, r4
   21732:	f7ff ff8d 	bl	21650 <settings_fcb_src>
	if (rc != 0) {
   21736:	2800      	cmp	r0, #0
   21738:	d1e9      	bne.n	2170e <settings_backend_init+0x4e>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2173a:	4b07      	ldr	r3, [pc, #28]	; (21758 <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   2173c:	4805      	ldr	r0, [pc, #20]	; (21754 <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   2173e:	6063      	str	r3, [r4, #4]
	settings_dst_register(&cf->cf_store);
   21740:	f7ff fbb0 	bl	20ea4 <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   21744:	4803      	ldr	r0, [pc, #12]	; (21754 <settings_backend_init+0x94>)
   21746:	f7ff ffad 	bl	216a4 <settings_mount_fcb_backend>

	return rc;
   2174a:	2000      	movs	r0, #0
}
   2174c:	b003      	add	sp, #12
   2174e:	bd30      	pop	{r4, r5, pc}
   21750:	2000d204 	.word	0x2000d204
   21754:	2000c548 	.word	0x2000c548
   21758:	00034cc8 	.word	0x00034cc8

0002175c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   2175c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21760:	4605      	mov	r5, r0
	__asm__ volatile(
   21762:	f04f 0320 	mov.w	r3, #32
   21766:	f3ef 8611 	mrs	r6, BASEPRI
   2176a:	f383 8812 	msr	BASEPRI_MAX, r3
   2176e:	f3bf 8f6f 	isb	sy
	return list->head;
   21772:	4b0e      	ldr	r3, [pc, #56]	; (217ac <pm_state_notify+0x50>)
   21774:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   21776:	b19c      	cbz	r4, 217a0 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   21778:	f04f 090c 	mov.w	r9, #12
   2177c:	4f0c      	ldr	r7, [pc, #48]	; (217b0 <pm_state_notify+0x54>)
   2177e:	f8df 8034 	ldr.w	r8, [pc, #52]	; 217b4 <pm_state_notify+0x58>
			callback = notifier->state_exit;
   21782:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   21786:	2d00      	cmp	r5, #0
   21788:	bf08      	it	eq
   2178a:	4613      	moveq	r3, r2
		if (callback) {
   2178c:	b12b      	cbz	r3, 2179a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   2178e:	f898 2014 	ldrb.w	r2, [r8, #20]
   21792:	fb09 f202 	mul.w	r2, r9, r2
   21796:	5cb8      	ldrb	r0, [r7, r2]
   21798:	4798      	blx	r3
	return node->next;
   2179a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   2179c:	2c00      	cmp	r4, #0
   2179e:	d1f0      	bne.n	21782 <pm_state_notify+0x26>
	__asm__ volatile(
   217a0:	f386 8811 	msr	BASEPRI, r6
   217a4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   217a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   217ac:	2000d24c 	.word	0x2000d24c
   217b0:	2000d260 	.word	0x2000d260
   217b4:	2000d8b0 	.word	0x2000d8b0

000217b8 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   217b8:	2201      	movs	r2, #1

void pm_system_resume(void)
{
   217ba:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
   217bc:	4b17      	ldr	r3, [pc, #92]	; (2181c <pm_system_resume+0x64>)
   217be:	7d1c      	ldrb	r4, [r3, #20]
   217c0:	f004 031f 	and.w	r3, r4, #31
   217c4:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   217c6:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   217c8:	4b15      	ldr	r3, [pc, #84]	; (21820 <pm_system_resume+0x68>)
   217ca:	0961      	lsrs	r1, r4, #5
   217cc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   217d0:	e8d3 1fef 	ldaex	r1, [r3]
   217d4:	ea01 0500 	and.w	r5, r1, r0
   217d8:	e8c3 5fec 	stlex	ip, r5, [r3]
   217dc:	f1bc 0f00 	cmp.w	ip, #0
   217e0:	d1f6      	bne.n	217d0 <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   217e2:	4211      	tst	r1, r2
   217e4:	d013      	beq.n	2180e <pm_system_resume+0x56>
	if (pm_state_exit_post_ops != NULL) {
   217e6:	4b0f      	ldr	r3, [pc, #60]	; (21824 <pm_system_resume+0x6c>)
   217e8:	4d0f      	ldr	r5, [pc, #60]	; (21828 <pm_system_resume+0x70>)
   217ea:	b18b      	cbz	r3, 21810 <pm_system_resume+0x58>
		pm_state_exit_post_ops(info->state, info->substate_id);
   217ec:	230c      	movs	r3, #12
   217ee:	4363      	muls	r3, r4
   217f0:	18ea      	adds	r2, r5, r3
   217f2:	7851      	ldrb	r1, [r2, #1]
   217f4:	5ce8      	ldrb	r0, [r5, r3]
   217f6:	f00e fb12 	bl	2fe1e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   217fa:	2000      	movs	r0, #0
   217fc:	f7ff ffae 	bl	2175c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   21800:	230c      	movs	r3, #12
   21802:	435c      	muls	r4, r3
   21804:	2300      	movs	r3, #0
   21806:	192a      	adds	r2, r5, r4
   21808:	512b      	str	r3, [r5, r4]
   2180a:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   2180e:	bd38      	pop	{r3, r4, r5, pc}
   21810:	f383 8811 	msr	BASEPRI, r3
   21814:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   21818:	e7ef      	b.n	217fa <pm_system_resume+0x42>
   2181a:	bf00      	nop
   2181c:	2000d8b0 	.word	0x2000d8b0
   21820:	2000d26c 	.word	0x2000d26c
   21824:	0002fe1f 	.word	0x0002fe1f
   21828:	2000d260 	.word	0x2000d260

0002182c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   2182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   21830:	4b31      	ldr	r3, [pc, #196]	; (218f8 <pm_system_suspend+0xcc>)
{
   21832:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   21834:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   21836:	f04f 0320 	mov.w	r3, #32
   2183a:	f3ef 8811 	mrs	r8, BASEPRI
   2183e:	f383 8812 	msr	BASEPRI_MAX, r3
   21842:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   21846:	240c      	movs	r4, #12
   21848:	436c      	muls	r4, r5
   2184a:	4b2c      	ldr	r3, [pc, #176]	; (218fc <pm_system_suspend+0xd0>)
   2184c:	4e2c      	ldr	r6, [pc, #176]	; (21900 <pm_system_suspend+0xd4>)
   2184e:	5d19      	ldrb	r1, [r3, r4]
   21850:	191a      	adds	r2, r3, r4
   21852:	2900      	cmp	r1, #0
   21854:	d045      	beq.n	218e2 <pm_system_suspend+0xb6>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   21856:	ca07      	ldmia	r2, {r0, r1, r2}
   21858:	eb06 0c04 	add.w	ip, r6, r4
   2185c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   21860:	2200      	movs	r2, #0
   21862:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   21864:	f388 8811 	msr	BASEPRI, r8
   21868:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   2186c:	230c      	movs	r3, #12
   2186e:	436b      	muls	r3, r5
   21870:	5cf0      	ldrb	r0, [r6, r3]
   21872:	18f2      	adds	r2, r6, r3
   21874:	b398      	cbz	r0, 218de <pm_system_suspend+0xb2>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   21876:	1c7b      	adds	r3, r7, #1
   21878:	d00f      	beq.n	2189a <pm_system_suspend+0x6e>
			return (uint32_t)((t * to_hz + off) / from_hz);
   2187a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
   2187e:	2100      	movs	r1, #0
   21880:	f8d2 c008 	ldr.w	ip, [r2, #8]
   21884:	481f      	ldr	r0, [pc, #124]	; (21904 <pm_system_suspend+0xd8>)
   21886:	2300      	movs	r3, #0
   21888:	fbec 0104 	umlal	r0, r1, ip, r4
   2188c:	4a1e      	ldr	r2, [pc, #120]	; (21908 <pm_system_suspend+0xdc>)
   2188e:	f7fb fa8f 	bl	1cdb0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   21892:	2101      	movs	r1, #1
   21894:	1a38      	subs	r0, r7, r0
   21896:	f011 ffdb 	bl	33850 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   2189a:	f00a fffb 	bl	2c894 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   2189e:	2001      	movs	r0, #1
   218a0:	f7ff ff5c 	bl	2175c <pm_state_notify>
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   218a4:	2101      	movs	r1, #1
   218a6:	f005 021f 	and.w	r2, r5, #31
   218aa:	4091      	lsls	r1, r2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   218ac:	4a17      	ldr	r2, [pc, #92]	; (2190c <pm_system_suspend+0xe0>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   218ae:	096b      	lsrs	r3, r5, #5
   218b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   218b4:	e8d3 2fef 	ldaex	r2, [r3]
   218b8:	430a      	orrs	r2, r1
   218ba:	e8c3 2fe0 	stlex	r0, r2, [r3]
   218be:	2800      	cmp	r0, #0
   218c0:	d1f8      	bne.n	218b4 <pm_system_suspend+0x88>
	if (pm_state_set != NULL) {
   218c2:	4b13      	ldr	r3, [pc, #76]	; (21910 <pm_system_suspend+0xe4>)
   218c4:	b133      	cbz	r3, 218d4 <pm_system_suspend+0xa8>
		pm_state_set(info->state, info->substate_id);
   218c6:	200c      	movs	r0, #12
   218c8:	4368      	muls	r0, r5
   218ca:	1833      	adds	r3, r6, r0
   218cc:	7859      	ldrb	r1, [r3, #1]
   218ce:	5c30      	ldrb	r0, [r6, r0]
   218d0:	f00e fa99 	bl	2fe06 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   218d4:	f7ff ff70 	bl	217b8 <pm_system_resume>
	k_sched_unlock();
   218d8:	f00b f9ac 	bl	2cc34 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   218dc:	2001      	movs	r0, #1
}
   218de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   218e2:	4601      	mov	r1, r0
   218e4:	4628      	mov	r0, r5
   218e6:	f000 f815 	bl	21914 <pm_policy_next_state>
		if (info != NULL) {
   218ea:	2800      	cmp	r0, #0
   218ec:	d0ba      	beq.n	21864 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   218ee:	c807      	ldmia	r0, {r0, r1, r2}
   218f0:	4434      	add	r4, r6
   218f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   218f6:	e7b5      	b.n	21864 <pm_system_suspend+0x38>
   218f8:	2000d8b0 	.word	0x2000d8b0
   218fc:	2000d254 	.word	0x2000d254
   21900:	2000d260 	.word	0x2000d260
   21904:	000f423f 	.word	0x000f423f
   21908:	000f4240 	.word	0x000f4240
   2190c:	2000d26c 	.word	0x2000d26c
   21910:	0002fe07 	.word	0x0002fe07

00021914 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   21914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21918:	b085      	sub	sp, #20
   2191a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   2191c:	a903      	add	r1, sp, #12
   2191e:	f000 f841 	bl	219a4 <pm_state_cpu_get_all>
   21922:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   21926:	f04f 0b00 	mov.w	fp, #0

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
   2192a:	9b03      	ldr	r3, [sp, #12]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2192c:	3801      	subs	r0, #1
		const struct pm_state_info *state = &cpu_states[i];
   2192e:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   21930:	4b19      	ldr	r3, [pc, #100]	; (21998 <pm_policy_next_state+0x84>)
   21932:	f8df 806c 	ldr.w	r8, [pc, #108]	; 219a0 <pm_policy_next_state+0x8c>
   21936:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   2193a:	b204      	sxth	r4, r0
   2193c:	1c63      	adds	r3, r4, #1
   2193e:	d104      	bne.n	2194a <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   21940:	2500      	movs	r5, #0
}
   21942:	4628      	mov	r0, r5
   21944:	b005      	add	sp, #20
   21946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2194a:	46c4      	mov	ip, r8
   2194c:	4659      	mov	r1, fp
		const struct pm_state_info *state = &cpu_states[i];
   2194e:	9b01      	ldr	r3, [sp, #4]
   21950:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   21954:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   21958:	6868      	ldr	r0, [r5, #4]
   2195a:	2300      	movs	r3, #0
   2195c:	fbe0 c107 	umlal	ip, r1, r0, r7
   21960:	4a0e      	ldr	r2, [pc, #56]	; (2199c <pm_policy_next_state+0x88>)
   21962:	4660      	mov	r0, ip
   21964:	f7fb fa24 	bl	1cdb0 <__aeabi_uldivmod>
   21968:	46c4      	mov	ip, r8
   2196a:	4659      	mov	r1, fp
   2196c:	4681      	mov	r9, r0
   2196e:	68a8      	ldr	r0, [r5, #8]
   21970:	2300      	movs	r3, #0
   21972:	fbe0 c107 	umlal	ip, r1, r0, r7
   21976:	4a09      	ldr	r2, [pc, #36]	; (2199c <pm_policy_next_state+0x88>)
   21978:	4660      	mov	r0, ip
   2197a:	f7fb fa19 	bl	1cdb0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   2197e:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   21982:	d001      	beq.n	21988 <pm_policy_next_state+0x74>
   21984:	4582      	cmp	sl, r0
   21986:	d904      	bls.n	21992 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   21988:	1c72      	adds	r2, r6, #1
   2198a:	d0da      	beq.n	21942 <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
   2198c:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
   2198e:	42b0      	cmp	r0, r6
   21990:	d9d7      	bls.n	21942 <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   21992:	3c01      	subs	r4, #1
   21994:	b224      	sxth	r4, r4
   21996:	e7d1      	b.n	2193c <pm_policy_next_state+0x28>
   21998:	2000c590 	.word	0x2000c590
   2199c:	000f4240 	.word	0x000f4240
   219a0:	000f423f 	.word	0x000f423f

000219a4 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   219a4:	b908      	cbnz	r0, 219aa <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   219a6:	4b02      	ldr	r3, [pc, #8]	; (219b0 <pm_state_cpu_get_all+0xc>)
   219a8:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   219aa:	2000      	movs	r0, #0
   219ac:	4770      	bx	lr
   219ae:	bf00      	nop
   219b0:	00034cdc 	.word	0x00034cdc

000219b4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   219b4:	4901      	ldr	r1, [pc, #4]	; (219bc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   219b6:	2210      	movs	r2, #16
	str	r2, [r1]
   219b8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   219ba:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   219bc:	e000ed10 	.word	0xe000ed10

000219c0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   219c0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   219c2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   219c4:	f380 8811 	msr	BASEPRI, r0
	isb
   219c8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   219cc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   219d0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   219d2:	b662      	cpsie	i
	isb
   219d4:	f3bf 8f6f 	isb	sy

	bx	lr
   219d8:	4770      	bx	lr
   219da:	bf00      	nop

000219dc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   219dc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   219de:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   219e0:	f381 8811 	msr	BASEPRI, r1

	wfe
   219e4:	bf20      	wfe

	msr	BASEPRI, r0
   219e6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   219ea:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   219ec:	4770      	bx	lr
   219ee:	bf00      	nop

000219f0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   219f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   219f4:	4680      	mov	r8, r0

	if (esf != NULL) {
   219f6:	460d      	mov	r5, r1
{
   219f8:	b08c      	sub	sp, #48	; 0x30
	if (esf != NULL) {
   219fa:	2900      	cmp	r1, #0
   219fc:	d077      	beq.n	21aee <z_arm_fatal_error+0xfe>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   219fe:	2400      	movs	r4, #0
   21a00:	688b      	ldr	r3, [r1, #8]
   21a02:	2201      	movs	r2, #1
   21a04:	9305      	str	r3, [sp, #20]
   21a06:	684b      	ldr	r3, [r1, #4]
   21a08:	4620      	mov	r0, r4
   21a0a:	9304      	str	r3, [sp, #16]
   21a0c:	680b      	ldr	r3, [r1, #0]
   21a0e:	493b      	ldr	r1, [pc, #236]	; (21afc <z_arm_fatal_error+0x10c>)
   21a10:	9303      	str	r3, [sp, #12]
   21a12:	4b3b      	ldr	r3, [pc, #236]	; (21b00 <z_arm_fatal_error+0x110>)
   21a14:	e9cd 4400 	strd	r4, r4, [sp]
   21a18:	9302      	str	r3, [sp, #8]
   21a1a:	4623      	mov	r3, r4
   21a1c:	f00f f885 	bl	30b2a <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   21a20:	696b      	ldr	r3, [r5, #20]
   21a22:	2201      	movs	r2, #1
   21a24:	9305      	str	r3, [sp, #20]
   21a26:	692b      	ldr	r3, [r5, #16]
   21a28:	4620      	mov	r0, r4
   21a2a:	9304      	str	r3, [sp, #16]
   21a2c:	68eb      	ldr	r3, [r5, #12]
   21a2e:	4933      	ldr	r1, [pc, #204]	; (21afc <z_arm_fatal_error+0x10c>)
   21a30:	9303      	str	r3, [sp, #12]
   21a32:	4b34      	ldr	r3, [pc, #208]	; (21b04 <z_arm_fatal_error+0x114>)
   21a34:	9400      	str	r4, [sp, #0]
   21a36:	e9cd 4301 	strd	r4, r3, [sp, #4]
   21a3a:	4623      	mov	r3, r4
   21a3c:	f00f f875 	bl	30b2a <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   21a40:	69eb      	ldr	r3, [r5, #28]
   21a42:	2201      	movs	r2, #1
   21a44:	9303      	str	r3, [sp, #12]
   21a46:	4b30      	ldr	r3, [pc, #192]	; (21b08 <z_arm_fatal_error+0x118>)
   21a48:	4620      	mov	r0, r4
   21a4a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   21a4e:	492b      	ldr	r1, [pc, #172]	; (21afc <z_arm_fatal_error+0x10c>)
   21a50:	4623      	mov	r3, r4
   21a52:	9400      	str	r4, [sp, #0]
   21a54:	f00f f869 	bl	30b2a <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   21a58:	462f      	mov	r7, r5
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   21a5a:	4626      	mov	r6, r4
   21a5c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 21b14 <z_arm_fatal_error+0x124>
   21a60:	f8df a098 	ldr.w	sl, [pc, #152]	; 21afc <z_arm_fatal_error+0x10c>
   21a64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   21a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   21a6c:	1ce3      	adds	r3, r4, #3
   21a6e:	9309      	str	r3, [sp, #36]	; 0x24
   21a70:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
   21a74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   21a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   21a7c:	1ca3      	adds	r3, r4, #2
   21a7e:	9307      	str	r3, [sp, #28]
   21a80:	edcd 7a08 	vstr	s15, [sp, #32]
   21a84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   21a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   21a8c:	1c63      	adds	r3, r4, #1
   21a8e:	9305      	str	r3, [sp, #20]
   21a90:	edcd 7a06 	vstr	s15, [sp, #24]
   21a94:	edd7 7a08 	vldr	s15, [r7, #32]
   21a98:	2300      	movs	r3, #0
   21a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   21a9e:	e9cd 9402 	strd	r9, r4, [sp, #8]
   21aa2:	edcd 7a04 	vstr	s15, [sp, #16]
   21aa6:	2201      	movs	r2, #1
   21aa8:	4651      	mov	r1, sl
   21aaa:	4618      	mov	r0, r3
   21aac:	e9cd 6600 	strd	r6, r6, [sp]
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   21ab0:	3404      	adds	r4, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   21ab2:	f00f f83a 	bl	30b2a <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   21ab6:	2c10      	cmp	r4, #16
   21ab8:	f107 0710 	add.w	r7, r7, #16
   21abc:	d1d2      	bne.n	21a64 <z_arm_fatal_error+0x74>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
   21abe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   21ac0:	2201      	movs	r2, #1
   21ac2:	9303      	str	r3, [sp, #12]
   21ac4:	4b11      	ldr	r3, [pc, #68]	; (21b0c <z_arm_fatal_error+0x11c>)
   21ac6:	490d      	ldr	r1, [pc, #52]	; (21afc <z_arm_fatal_error+0x10c>)
   21ac8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   21acc:	2300      	movs	r3, #0
   21ace:	9600      	str	r6, [sp, #0]
   21ad0:	4618      	mov	r0, r3
   21ad2:	f00f f82a 	bl	30b2a <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   21ad6:	69ab      	ldr	r3, [r5, #24]
   21ad8:	2201      	movs	r2, #1
   21ada:	9303      	str	r3, [sp, #12]
   21adc:	4b0c      	ldr	r3, [pc, #48]	; (21b10 <z_arm_fatal_error+0x120>)
   21ade:	4907      	ldr	r1, [pc, #28]	; (21afc <z_arm_fatal_error+0x10c>)
   21ae0:	e9cd 6301 	strd	r6, r3, [sp, #4]
   21ae4:	2300      	movs	r3, #0
   21ae6:	9600      	str	r6, [sp, #0]
   21ae8:	4618      	mov	r0, r3
   21aea:	f00f f81e 	bl	30b2a <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   21aee:	4629      	mov	r1, r5
   21af0:	4640      	mov	r0, r8
}
   21af2:	b00c      	add	sp, #48	; 0x30
   21af4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
   21af8:	f00a b9b8 	b.w	2be6c <z_fatal_error>
   21afc:	00034ac8 	.word	0x00034ac8
   21b00:	00037aab 	.word	0x00037aab
   21b04:	00037ada 	.word	0x00037ada
   21b08:	00037b09 	.word	0x00037b09
   21b0c:	00037b5b 	.word	0x00037b5b
   21b10:	00037b6a 	.word	0x00037b6a
   21b14:	00037b18 	.word	0x00037b18

00021b18 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   21b18:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   21b1a:	2b00      	cmp	r3, #0
   21b1c:	db08      	blt.n	21b30 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21b1e:	2201      	movs	r2, #1
   21b20:	f000 001f 	and.w	r0, r0, #31
   21b24:	fa02 f000 	lsl.w	r0, r2, r0
   21b28:	4a02      	ldr	r2, [pc, #8]	; (21b34 <arch_irq_enable+0x1c>)
   21b2a:	095b      	lsrs	r3, r3, #5
   21b2c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   21b30:	4770      	bx	lr
   21b32:	bf00      	nop
   21b34:	e000e100 	.word	0xe000e100

00021b38 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   21b38:	4b05      	ldr	r3, [pc, #20]	; (21b50 <arch_irq_is_enabled+0x18>)
   21b3a:	0942      	lsrs	r2, r0, #5
   21b3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   21b40:	2301      	movs	r3, #1
   21b42:	f000 001f 	and.w	r0, r0, #31
   21b46:	fa03 f000 	lsl.w	r0, r3, r0
}
   21b4a:	4010      	ands	r0, r2
   21b4c:	4770      	bx	lr
   21b4e:	bf00      	nop
   21b50:	e000e100 	.word	0xe000e100

00021b54 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   21b54:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   21b56:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
   21b58:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b5c:	bfac      	ite	ge
   21b5e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b62:	4b06      	ldrlt	r3, [pc, #24]	; (21b7c <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b64:	ea4f 1141 	mov.w	r1, r1, lsl #5
   21b68:	b2c9      	uxtb	r1, r1
   21b6a:	bfab      	itete	ge
   21b6c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b70:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b74:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21b78:	5419      	strblt	r1, [r3, r0]
}
   21b7a:	4770      	bx	lr
   21b7c:	e000ed14 	.word	0xe000ed14

00021b80 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   21b80:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   21b82:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   21b84:	4b04      	ldr	r3, [pc, #16]	; (21b98 <_arch_isr_direct_pm+0x18>)
   21b86:	69da      	ldr	r2, [r3, #28]
   21b88:	b11a      	cbz	r2, 21b92 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   21b8a:	2200      	movs	r2, #0
   21b8c:	61da      	str	r2, [r3, #28]
		z_pm_save_idle_exit();
   21b8e:	f011 fbee 	bl	3336e <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   21b92:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   21b94:	bd08      	pop	{r3, pc}
   21b96:	bf00      	nop
   21b98:	2000d8b0 	.word	0x2000d8b0

00021b9c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   21b9c:	bf30      	wfi
    b z_SysNmiOnReset
   21b9e:	f7ff bffd 	b.w	21b9c <z_SysNmiOnReset>
   21ba2:	bf00      	nop

00021ba4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   21ba4:	4a14      	ldr	r2, [pc, #80]	; (21bf8 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   21ba6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   21ba8:	4b14      	ldr	r3, [pc, #80]	; (21bfc <z_arm_prep_c+0x58>)
   21baa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   21bae:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   21bb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21bb4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   21bb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   21bbc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   21bc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   21bc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   21bc8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   21bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   21bd0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   21bd4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   21bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   21bdc:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   21be0:	2300      	movs	r3, #0
   21be2:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   21be6:	f00a f9bf 	bl	2bf68 <z_bss_zero>
	z_data_copy();
   21bea:	f00b f965 	bl	2ceb8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   21bee:	f000 fbaf 	bl	22350 <z_arm_interrupt_init>
	z_cstart();
   21bf2:	f00a f9f9 	bl	2bfe8 <z_cstart>
   21bf6:	bf00      	nop
   21bf8:	0001c200 	.word	0x0001c200
   21bfc:	e000ed00 	.word	0xe000ed00

00021c00 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   21c00:	4a09      	ldr	r2, [pc, #36]	; (21c28 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   21c02:	490a      	ldr	r1, [pc, #40]	; (21c2c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   21c04:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   21c06:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   21c08:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   21c0a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   21c0c:	4908      	ldr	r1, [pc, #32]	; (21c30 <arch_swap+0x30>)
   21c0e:	684b      	ldr	r3, [r1, #4]
   21c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   21c14:	604b      	str	r3, [r1, #4]
   21c16:	2300      	movs	r3, #0
   21c18:	f383 8811 	msr	BASEPRI, r3
   21c1c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   21c20:	6893      	ldr	r3, [r2, #8]
}
   21c22:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   21c24:	4770      	bx	lr
   21c26:	bf00      	nop
   21c28:	2000d8b0 	.word	0x2000d8b0
   21c2c:	0003537c 	.word	0x0003537c
   21c30:	e000ed00 	.word	0xe000ed00

00021c34 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   21c34:	4922      	ldr	r1, [pc, #136]	; (21cc0 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
   21c36:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   21c38:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   21c3c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   21c40:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   21c42:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   21c46:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   21c4a:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   21c4e:	d103      	bne.n	21c58 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   21c50:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   21c54:	ec80 8a10 	vstmia	r0, {s16-s31}

00021c58 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   21c58:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
   21c5a:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   21c5e:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   21c62:	4f18      	ldr	r7, [pc, #96]	; (21cc4 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   21c64:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   21c68:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
   21c6a:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   21c6c:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   21c6e:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   21c72:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   21c74:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   21c76:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   21c78:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   21c7c:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   21c80:	d003      	beq.n	21c8a <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   21c82:	2300      	movs	r3, #0
    vmsr fpscr, r3
   21c84:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   21c88:	e003      	b.n	21c92 <in_fp_endif>

00021c8a <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   21c8a:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   21c8e:	ec90 8a10 	vldmia	r0, {s16-s31}

00021c92 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   21c92:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   21c96:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   21c9a:	f383 8814 	msr	CONTROL, r3
    isb
   21c9e:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   21ca2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   21ca6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   21caa:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   21cae:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   21cb2:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   21cb4:	f00e ff58 	bl	30b68 <configure_builtin_stack_guard>
    pop {r2, lr}
   21cb8:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   21cbc:	4770      	bx	lr
   21cbe:	0000      	.short	0x0000
    ldr r1, =_kernel
   21cc0:	2000d8b0 	.word	0x2000d8b0
    ldr v4, =_SCS_ICSR
   21cc4:	e000ed04 	.word	0xe000ed04

00021cc8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   21cc8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   21ccc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   21cce:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   21cd2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   21cd6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   21cd8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   21cdc:	2902      	cmp	r1, #2
    beq _oops
   21cde:	d0ff      	beq.n	21ce0 <_oops>

00021ce0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   21ce0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   21ce2:	f00e ff32 	bl	30b4a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   21ce6:	bd01      	pop	{r0, pc}

00021ce8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   21ce8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   21cec:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   21cee:	490d      	ldr	r1, [pc, #52]	; (21d24 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
   21cf0:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   21cf4:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   21cf6:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   21cfa:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   21cfe:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   21d00:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   21d04:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   21d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   21d0c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   21d10:	2300      	movs	r3, #0
   21d12:	6783      	str	r3, [r0, #120]	; 0x78

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
   21d14:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   21d18:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   21d1a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
   21d1c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   21d20:	4770      	bx	lr
   21d22:	bf00      	nop
   21d24:	0002f9c7 	.word	0x0002f9c7

00021d28 <arch_switch_to_main_thread>:
   21d28:	2300      	movs	r3, #0
   21d2a:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   21d2e:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_CPU_CORTEX_M) && defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   21d32:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   21d36:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   21d3a:	f3bf 8f6f 	isb	sy
   21d3e:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   21d42:	4b09      	ldr	r3, [pc, #36]	; (21d68 <arch_switch_to_main_thread+0x40>)
   21d44:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   21d46:	6e83      	ldr	r3, [r0, #104]	; 0x68
   21d48:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   21d4c:	4610      	mov	r0, r2
   21d4e:	f381 8809 	msr	PSP, r1
   21d52:	2100      	movs	r1, #0
   21d54:	b663      	cpsie	if
   21d56:	f381 8811 	msr	BASEPRI, r1
   21d5a:	f3bf 8f6f 	isb	sy
   21d5e:	2200      	movs	r2, #0
   21d60:	2300      	movs	r3, #0
   21d62:	f00d fe30 	bl	2f9c6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   21d66:	bf00      	nop
   21d68:	2000d8b0 	.word	0x2000d8b0

00021d6c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   21d6c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   21d6e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   21d70:	4a0b      	ldr	r2, [pc, #44]	; (21da0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   21d72:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
   21d74:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   21d76:	bf1e      	ittt	ne
	movne	r1, #0
   21d78:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   21d7a:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
   21d7c:	f011 faf7 	blne	3336e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   21d80:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   21d82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   21d86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   21d8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   21d8e:	4905      	ldr	r1, [pc, #20]	; (21da4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   21d90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   21d92:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   21d94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   21d96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   21d9a:	4903      	ldr	r1, [pc, #12]	; (21da8 <_isr_wrapper+0x3c>)
	bx r1
   21d9c:	4708      	bx	r1
   21d9e:	0000      	.short	0x0000
	ldr r2, =_kernel
   21da0:	2000d8b0 	.word	0x2000d8b0
	ldr r1, =_sw_isr_table
   21da4:	0003480c 	.word	0x0003480c
	ldr r1, =z_arm_int_exit
   21da8:	00021dad 	.word	0x00021dad

00021dac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   21dac:	4b04      	ldr	r3, [pc, #16]	; (21dc0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   21dae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   21db0:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
   21db2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   21db4:	d003      	beq.n	21dbe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   21db6:	4903      	ldr	r1, [pc, #12]	; (21dc4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   21db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   21dbc:	600a      	str	r2, [r1, #0]

00021dbe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   21dbe:	4770      	bx	lr
	ldr r3, =_kernel
   21dc0:	2000d8b0 	.word	0x2000d8b0
	ldr r1, =_SCS_ICSR
   21dc4:	e000ed04 	.word	0xe000ed04

00021dc8 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   21dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   21dca:	2400      	movs	r4, #0
   21dcc:	4b3e      	ldr	r3, [pc, #248]	; (21ec8 <mem_manage_fault.constprop.0+0x100>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   21dce:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   21dd0:	9302      	str	r3, [sp, #8]
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   21dd2:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
   21dd4:	4623      	mov	r3, r4
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   21dd6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   21dd8:	2201      	movs	r2, #1
   21dda:	4620      	mov	r0, r4
   21ddc:	e9cd 4400 	strd	r4, r4, [sp]
   21de0:	493a      	ldr	r1, [pc, #232]	; (21ecc <mem_manage_fault.constprop.0+0x104>)
   21de2:	f00e fec5 	bl	30b70 <z_log_msg_runtime_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   21de6:	4b3a      	ldr	r3, [pc, #232]	; (21ed0 <mem_manage_fault.constprop.0+0x108>)
   21de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21dea:	06dd      	lsls	r5, r3, #27
   21dec:	d509      	bpl.n	21e02 <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
   21dee:	4b39      	ldr	r3, [pc, #228]	; (21ed4 <mem_manage_fault.constprop.0+0x10c>)
   21df0:	2201      	movs	r2, #1
   21df2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   21df6:	4620      	mov	r0, r4
   21df8:	4623      	mov	r3, r4
   21dfa:	4934      	ldr	r1, [pc, #208]	; (21ecc <mem_manage_fault.constprop.0+0x104>)
   21dfc:	9400      	str	r4, [sp, #0]
   21dfe:	f00e feb7 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   21e02:	4b33      	ldr	r3, [pc, #204]	; (21ed0 <mem_manage_fault.constprop.0+0x108>)
   21e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21e06:	0718      	lsls	r0, r3, #28
   21e08:	d509      	bpl.n	21e1e <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   21e0a:	4b33      	ldr	r3, [pc, #204]	; (21ed8 <mem_manage_fault.constprop.0+0x110>)
   21e0c:	2201      	movs	r2, #1
   21e0e:	9302      	str	r3, [sp, #8]
   21e10:	2300      	movs	r3, #0
   21e12:	492e      	ldr	r1, [pc, #184]	; (21ecc <mem_manage_fault.constprop.0+0x104>)
   21e14:	4618      	mov	r0, r3
   21e16:	e9cd 3300 	strd	r3, r3, [sp]
   21e1a:	f00e fea9 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   21e1e:	4d2c      	ldr	r5, [pc, #176]	; (21ed0 <mem_manage_fault.constprop.0+0x108>)
   21e20:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21e22:	0799      	lsls	r1, r3, #30
   21e24:	d51e      	bpl.n	21e64 <mem_manage_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Data Access Violation");
   21e26:	2400      	movs	r4, #0
   21e28:	4b2c      	ldr	r3, [pc, #176]	; (21edc <mem_manage_fault.constprop.0+0x114>)
   21e2a:	2201      	movs	r2, #1
   21e2c:	9302      	str	r3, [sp, #8]
   21e2e:	4620      	mov	r0, r4
   21e30:	4623      	mov	r3, r4
   21e32:	e9cd 4400 	strd	r4, r4, [sp]
   21e36:	4925      	ldr	r1, [pc, #148]	; (21ecc <mem_manage_fault.constprop.0+0x104>)
   21e38:	f00e fe9a 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   21e3c:	6b6b      	ldr	r3, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   21e3e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21e40:	0612      	lsls	r2, r2, #24
   21e42:	d50f      	bpl.n	21e64 <mem_manage_fault.constprop.0+0x9c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   21e44:	9303      	str	r3, [sp, #12]
   21e46:	4b26      	ldr	r3, [pc, #152]	; (21ee0 <mem_manage_fault.constprop.0+0x118>)
   21e48:	2201      	movs	r2, #1
   21e4a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   21e4e:	4620      	mov	r0, r4
   21e50:	4623      	mov	r3, r4
   21e52:	491e      	ldr	r1, [pc, #120]	; (21ecc <mem_manage_fault.constprop.0+0x104>)
   21e54:	9400      	str	r4, [sp, #0]
   21e56:	f00e fe8b 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   21e5a:	b11f      	cbz	r7, 21e64 <mem_manage_fault.constprop.0+0x9c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   21e5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   21e62:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   21e64:	4b1a      	ldr	r3, [pc, #104]	; (21ed0 <mem_manage_fault.constprop.0+0x108>)
   21e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21e68:	07dc      	lsls	r4, r3, #31
   21e6a:	d509      	bpl.n	21e80 <mem_manage_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Instruction Access Violation");
   21e6c:	4b1d      	ldr	r3, [pc, #116]	; (21ee4 <mem_manage_fault.constprop.0+0x11c>)
   21e6e:	2201      	movs	r2, #1
   21e70:	9302      	str	r3, [sp, #8]
   21e72:	2300      	movs	r3, #0
   21e74:	4915      	ldr	r1, [pc, #84]	; (21ecc <mem_manage_fault.constprop.0+0x104>)
   21e76:	4618      	mov	r0, r3
   21e78:	e9cd 3300 	strd	r3, r3, [sp]
   21e7c:	f00e fe78 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   21e80:	4b13      	ldr	r3, [pc, #76]	; (21ed0 <mem_manage_fault.constprop.0+0x108>)
   21e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21e84:	0698      	lsls	r0, r3, #26
   21e86:	d509      	bpl.n	21e9c <mem_manage_fault.constprop.0+0xd4>
		PR_FAULT_INFO(
   21e88:	4b17      	ldr	r3, [pc, #92]	; (21ee8 <mem_manage_fault.constprop.0+0x120>)
   21e8a:	2201      	movs	r2, #1
   21e8c:	9302      	str	r3, [sp, #8]
   21e8e:	2300      	movs	r3, #0
   21e90:	490e      	ldr	r1, [pc, #56]	; (21ecc <mem_manage_fault.constprop.0+0x104>)
   21e92:	4618      	mov	r0, r3
   21e94:	e9cd 3300 	strd	r3, r3, [sp]
   21e98:	f00e fe6a 	bl	30b70 <z_log_msg_runtime_create.constprop.0>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   21e9c:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   21e9e:	4b0c      	ldr	r3, [pc, #48]	; (21ed0 <mem_manage_fault.constprop.0+0x108>)
   21ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   21ea2:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   21ea4:	bf58      	it	pl
   21ea6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   21ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   21eaa:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   21eac:	bf42      	ittt	mi
   21eae:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   21eb0:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   21eb4:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   21eb6:	4a06      	ldr	r2, [pc, #24]	; (21ed0 <mem_manage_fault.constprop.0+0x108>)
   21eb8:	6a93      	ldr	r3, [r2, #40]	; 0x28
   21eba:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   21ebe:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   21ec0:	7030      	strb	r0, [r6, #0]

	return reason;
}
   21ec2:	b005      	add	sp, #20
   21ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21ec6:	bf00      	nop
   21ec8:	00037b98 	.word	0x00037b98
   21ecc:	00034ac8 	.word	0x00034ac8
   21ed0:	e000ed00 	.word	0xe000ed00
   21ed4:	00037bae 	.word	0x00037bae
   21ed8:	00037be1 	.word	0x00037be1
   21edc:	00037bf4 	.word	0x00037bf4
   21ee0:	00037c0c 	.word	0x00037c0c
   21ee4:	00037c22 	.word	0x00037c22
   21ee8:	00037c41 	.word	0x00037c41

00021eec <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   21eec:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   21eee:	2400      	movs	r4, #0
   21ef0:	4b3b      	ldr	r3, [pc, #236]	; (21fe0 <bus_fault.constprop.0+0xf4>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   21ef2:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** BUS FAULT *****");
   21ef4:	9302      	str	r3, [sp, #8]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   21ef6:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   21ef8:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   21efa:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   21efc:	2201      	movs	r2, #1
   21efe:	4620      	mov	r0, r4
   21f00:	e9cd 4400 	strd	r4, r4, [sp]
   21f04:	4937      	ldr	r1, [pc, #220]	; (21fe4 <bus_fault.constprop.0+0xf8>)
   21f06:	f00e fe33 	bl	30b70 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   21f0a:	4b37      	ldr	r3, [pc, #220]	; (21fe8 <bus_fault.constprop.0+0xfc>)
   21f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21f0e:	04db      	lsls	r3, r3, #19
   21f10:	d509      	bpl.n	21f26 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   21f12:	4b36      	ldr	r3, [pc, #216]	; (21fec <bus_fault.constprop.0+0x100>)
   21f14:	2201      	movs	r2, #1
   21f16:	e9cd 4301 	strd	r4, r3, [sp, #4]
   21f1a:	4620      	mov	r0, r4
   21f1c:	4623      	mov	r3, r4
   21f1e:	4931      	ldr	r1, [pc, #196]	; (21fe4 <bus_fault.constprop.0+0xf8>)
   21f20:	9400      	str	r4, [sp, #0]
   21f22:	f00e fe25 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   21f26:	4b30      	ldr	r3, [pc, #192]	; (21fe8 <bus_fault.constprop.0+0xfc>)
   21f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21f2a:	051d      	lsls	r5, r3, #20
   21f2c:	d509      	bpl.n	21f42 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   21f2e:	4b30      	ldr	r3, [pc, #192]	; (21ff0 <bus_fault.constprop.0+0x104>)
   21f30:	2201      	movs	r2, #1
   21f32:	9302      	str	r3, [sp, #8]
   21f34:	2300      	movs	r3, #0
   21f36:	492b      	ldr	r1, [pc, #172]	; (21fe4 <bus_fault.constprop.0+0xf8>)
   21f38:	4618      	mov	r0, r3
   21f3a:	e9cd 3300 	strd	r3, r3, [sp]
   21f3e:	f00e fe17 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   21f42:	4d29      	ldr	r5, [pc, #164]	; (21fe8 <bus_fault.constprop.0+0xfc>)
   21f44:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21f46:	059c      	lsls	r4, r3, #22
   21f48:	d51e      	bpl.n	21f88 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   21f4a:	2400      	movs	r4, #0
   21f4c:	4b29      	ldr	r3, [pc, #164]	; (21ff4 <bus_fault.constprop.0+0x108>)
   21f4e:	2201      	movs	r2, #1
   21f50:	4620      	mov	r0, r4
   21f52:	9302      	str	r3, [sp, #8]
   21f54:	e9cd 4400 	strd	r4, r4, [sp]
   21f58:	4623      	mov	r3, r4
   21f5a:	4922      	ldr	r1, [pc, #136]	; (21fe4 <bus_fault.constprop.0+0xf8>)
   21f5c:	f00e fe08 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   21f60:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   21f62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21f64:	0410      	lsls	r0, r2, #16
   21f66:	d50f      	bpl.n	21f88 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   21f68:	9303      	str	r3, [sp, #12]
   21f6a:	4b23      	ldr	r3, [pc, #140]	; (21ff8 <bus_fault.constprop.0+0x10c>)
   21f6c:	2201      	movs	r2, #1
   21f6e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   21f72:	4620      	mov	r0, r4
   21f74:	4623      	mov	r3, r4
   21f76:	491b      	ldr	r1, [pc, #108]	; (21fe4 <bus_fault.constprop.0+0xf8>)
   21f78:	9400      	str	r4, [sp, #0]
   21f7a:	f00e fdf9 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   21f7e:	b11f      	cbz	r7, 21f88 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   21f80:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21f82:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   21f86:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   21f88:	4b17      	ldr	r3, [pc, #92]	; (21fe8 <bus_fault.constprop.0+0xfc>)
   21f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21f8c:	0559      	lsls	r1, r3, #21
   21f8e:	d509      	bpl.n	21fa4 <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   21f90:	4b1a      	ldr	r3, [pc, #104]	; (21ffc <bus_fault.constprop.0+0x110>)
   21f92:	2201      	movs	r2, #1
   21f94:	9302      	str	r3, [sp, #8]
   21f96:	2300      	movs	r3, #0
   21f98:	4912      	ldr	r1, [pc, #72]	; (21fe4 <bus_fault.constprop.0+0xf8>)
   21f9a:	4618      	mov	r0, r3
   21f9c:	e9cd 3300 	strd	r3, r3, [sp]
   21fa0:	f00e fde6 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   21fa4:	4a10      	ldr	r2, [pc, #64]	; (21fe8 <bus_fault.constprop.0+0xfc>)
   21fa6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   21fa8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   21fac:	d012      	beq.n	21fd4 <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   21fae:	4b14      	ldr	r3, [pc, #80]	; (22000 <bus_fault.constprop.0+0x114>)
   21fb0:	9302      	str	r3, [sp, #8]
   21fb2:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   21fb4:	2201      	movs	r2, #1
   21fb6:	4618      	mov	r0, r3
   21fb8:	e9cd 3300 	strd	r3, r3, [sp]
   21fbc:	4909      	ldr	r1, [pc, #36]	; (21fe4 <bus_fault.constprop.0+0xf8>)
   21fbe:	f00e fdd7 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf, true);
   21fc2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   21fc4:	4a08      	ldr	r2, [pc, #32]	; (21fe8 <bus_fault.constprop.0+0xfc>)
   21fc6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   21fc8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   21fcc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   21fce:	7030      	strb	r0, [r6, #0]

	return reason;
}
   21fd0:	b005      	add	sp, #20
   21fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   21fd4:	6a92      	ldr	r2, [r2, #40]	; 0x28
   21fd6:	0492      	lsls	r2, r2, #18
   21fd8:	d5f3      	bpl.n	21fc2 <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   21fda:	4a0a      	ldr	r2, [pc, #40]	; (22004 <bus_fault.constprop.0+0x118>)
   21fdc:	9202      	str	r2, [sp, #8]
   21fde:	e7e9      	b.n	21fb4 <bus_fault.constprop.0+0xc8>
   21fe0:	00037c70 	.word	0x00037c70
   21fe4:	00034ac8 	.word	0x00034ac8
   21fe8:	e000ed00 	.word	0xe000ed00
   21fec:	00037c86 	.word	0x00037c86
   21ff0:	00037be1 	.word	0x00037be1
   21ff4:	00037c97 	.word	0x00037c97
   21ff8:	00037cb0 	.word	0x00037cb0
   21ffc:	00037cc5 	.word	0x00037cc5
   22000:	00037ce0 	.word	0x00037ce0
   22004:	00037c41 	.word	0x00037c41

00022008 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   22008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   2200a:	2400      	movs	r4, #0
   2200c:	4b3b      	ldr	r3, [pc, #236]	; (220fc <usage_fault.constprop.0+0xf4>)
   2200e:	2201      	movs	r2, #1
   22010:	9302      	str	r3, [sp, #8]
   22012:	4620      	mov	r0, r4
   22014:	4623      	mov	r3, r4
   22016:	e9cd 4400 	strd	r4, r4, [sp]
   2201a:	4939      	ldr	r1, [pc, #228]	; (22100 <usage_fault.constprop.0+0xf8>)
   2201c:	f00e fda8 	bl	30b70 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   22020:	4b38      	ldr	r3, [pc, #224]	; (22104 <usage_fault.constprop.0+0xfc>)
   22022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22024:	019b      	lsls	r3, r3, #6
   22026:	d509      	bpl.n	2203c <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   22028:	4b37      	ldr	r3, [pc, #220]	; (22108 <usage_fault.constprop.0+0x100>)
   2202a:	2201      	movs	r2, #1
   2202c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   22030:	4620      	mov	r0, r4
   22032:	4623      	mov	r3, r4
   22034:	4932      	ldr	r1, [pc, #200]	; (22100 <usage_fault.constprop.0+0xf8>)
   22036:	9400      	str	r4, [sp, #0]
   22038:	f00e fd9a 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   2203c:	4b31      	ldr	r3, [pc, #196]	; (22104 <usage_fault.constprop.0+0xfc>)
   2203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22040:	01dc      	lsls	r4, r3, #7
   22042:	d509      	bpl.n	22058 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   22044:	4b31      	ldr	r3, [pc, #196]	; (2210c <usage_fault.constprop.0+0x104>)
   22046:	2201      	movs	r2, #1
   22048:	9302      	str	r3, [sp, #8]
   2204a:	2300      	movs	r3, #0
   2204c:	492c      	ldr	r1, [pc, #176]	; (22100 <usage_fault.constprop.0+0xf8>)
   2204e:	4618      	mov	r0, r3
   22050:	e9cd 3300 	strd	r3, r3, [sp]
   22054:	f00e fd8c 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   22058:	4b2a      	ldr	r3, [pc, #168]	; (22104 <usage_fault.constprop.0+0xfc>)
   2205a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   2205c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
   22060:	d00a      	beq.n	22078 <usage_fault.constprop.0+0x70>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   22062:	4b2b      	ldr	r3, [pc, #172]	; (22110 <usage_fault.constprop.0+0x108>)
   22064:	2201      	movs	r2, #1
   22066:	9302      	str	r3, [sp, #8]
   22068:	2300      	movs	r3, #0
   2206a:	4925      	ldr	r1, [pc, #148]	; (22100 <usage_fault.constprop.0+0xf8>)
   2206c:	4618      	mov	r0, r3
   2206e:	e9cd 3300 	strd	r3, r3, [sp]
   22072:	f00e fd7d 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   22076:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   22078:	4b22      	ldr	r3, [pc, #136]	; (22104 <usage_fault.constprop.0+0xfc>)
   2207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2207c:	0318      	lsls	r0, r3, #12
   2207e:	d509      	bpl.n	22094 <usage_fault.constprop.0+0x8c>
		PR_FAULT_INFO("  No coprocessor instructions");
   22080:	4b24      	ldr	r3, [pc, #144]	; (22114 <usage_fault.constprop.0+0x10c>)
   22082:	2201      	movs	r2, #1
   22084:	9302      	str	r3, [sp, #8]
   22086:	2300      	movs	r3, #0
   22088:	491d      	ldr	r1, [pc, #116]	; (22100 <usage_fault.constprop.0+0xf8>)
   2208a:	4618      	mov	r0, r3
   2208c:	e9cd 3300 	strd	r3, r3, [sp]
   22090:	f00e fd6e 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   22094:	4b1b      	ldr	r3, [pc, #108]	; (22104 <usage_fault.constprop.0+0xfc>)
   22096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22098:	0359      	lsls	r1, r3, #13
   2209a:	d509      	bpl.n	220b0 <usage_fault.constprop.0+0xa8>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   2209c:	4b1e      	ldr	r3, [pc, #120]	; (22118 <usage_fault.constprop.0+0x110>)
   2209e:	2201      	movs	r2, #1
   220a0:	9302      	str	r3, [sp, #8]
   220a2:	2300      	movs	r3, #0
   220a4:	4916      	ldr	r1, [pc, #88]	; (22100 <usage_fault.constprop.0+0xf8>)
   220a6:	4618      	mov	r0, r3
   220a8:	e9cd 3300 	strd	r3, r3, [sp]
   220ac:	f00e fd60 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   220b0:	4b14      	ldr	r3, [pc, #80]	; (22104 <usage_fault.constprop.0+0xfc>)
   220b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   220b4:	039a      	lsls	r2, r3, #14
   220b6:	d509      	bpl.n	220cc <usage_fault.constprop.0+0xc4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   220b8:	4b18      	ldr	r3, [pc, #96]	; (2211c <usage_fault.constprop.0+0x114>)
   220ba:	2201      	movs	r2, #1
   220bc:	9302      	str	r3, [sp, #8]
   220be:	2300      	movs	r3, #0
   220c0:	490f      	ldr	r1, [pc, #60]	; (22100 <usage_fault.constprop.0+0xf8>)
   220c2:	4618      	mov	r0, r3
   220c4:	e9cd 3300 	strd	r3, r3, [sp]
   220c8:	f00e fd52 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   220cc:	4b0d      	ldr	r3, [pc, #52]	; (22104 <usage_fault.constprop.0+0xfc>)
   220ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   220d0:	03db      	lsls	r3, r3, #15
   220d2:	d509      	bpl.n	220e8 <usage_fault.constprop.0+0xe0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   220d4:	4b12      	ldr	r3, [pc, #72]	; (22120 <usage_fault.constprop.0+0x118>)
   220d6:	2201      	movs	r2, #1
   220d8:	9302      	str	r3, [sp, #8]
   220da:	2300      	movs	r3, #0
   220dc:	4908      	ldr	r1, [pc, #32]	; (22100 <usage_fault.constprop.0+0xf8>)
   220de:	4618      	mov	r0, r3
   220e0:	e9cd 3300 	strd	r3, r3, [sp]
   220e4:	f00e fd44 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   220e8:	4a06      	ldr	r2, [pc, #24]	; (22104 <usage_fault.constprop.0+0xfc>)

	return reason;
}
   220ea:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   220ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
   220ee:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   220f2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   220f6:	6293      	str	r3, [r2, #40]	; 0x28
}
   220f8:	b004      	add	sp, #16
   220fa:	bd10      	pop	{r4, pc}
   220fc:	00037cf8 	.word	0x00037cf8
   22100:	00034ac8 	.word	0x00034ac8
   22104:	e000ed00 	.word	0xe000ed00
   22108:	00037d10 	.word	0x00037d10
   2210c:	00037d23 	.word	0x00037d23
   22110:	00037d3d 	.word	0x00037d3d
   22114:	00037d67 	.word	0x00037d67
   22118:	00037d85 	.word	0x00037d85
   2211c:	00037daa 	.word	0x00037daa
   22120:	00037dc4 	.word	0x00037dc4

00022124 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   22124:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   22128:	4b72      	ldr	r3, [pc, #456]	; (222f4 <z_arm_fault+0x1d0>)
{
   2212a:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2212c:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
   22130:	460f      	mov	r7, r1
   22132:	4614      	mov	r4, r2
   22134:	f04f 0800 	mov.w	r8, #0
   22138:	b0a3      	sub	sp, #140	; 0x8c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2213a:	f3c9 0608 	ubfx	r6, r9, #0, #9
   2213e:	f388 8811 	msr	BASEPRI, r8
   22142:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   22146:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   2214a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   2214e:	d128      	bne.n	221a2 <z_arm_fault+0x7e>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   22150:	f012 0301 	ands.w	r3, r2, #1
   22154:	d125      	bne.n	221a2 <z_arm_fault+0x7e>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   22156:	0651      	lsls	r1, r2, #25
   22158:	d405      	bmi.n	22166 <z_arm_fault+0x42>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   2215a:	0722      	lsls	r2, r4, #28
   2215c:	d40f      	bmi.n	2217e <z_arm_fault+0x5a>
			ptr_esf = (z_arch_esf_t *)msp;
   2215e:	4607      	mov	r7, r0
			*nested_exc = true;
   22160:	f04f 0801 	mov.w	r8, #1
   22164:	e00d      	b.n	22182 <z_arm_fault+0x5e>
		PR_FAULT_INFO("Exception occurred in Secure State");
   22166:	4a64      	ldr	r2, [pc, #400]	; (222f8 <z_arm_fault+0x1d4>)
   22168:	4618      	mov	r0, r3
   2216a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2216e:	4963      	ldr	r1, [pc, #396]	; (222fc <z_arm_fault+0x1d8>)
   22170:	2201      	movs	r2, #1
   22172:	9300      	str	r3, [sp, #0]
   22174:	f00e fcfc 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   22178:	f014 0404 	ands.w	r4, r4, #4
   2217c:	d00f      	beq.n	2219e <z_arm_fault+0x7a>
	*nested_exc = false;
   2217e:	f04f 0800 	mov.w	r8, #0
	*recoverable = false;
   22182:	2500      	movs	r5, #0
	switch (fault) {
   22184:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
   22186:	f88d 501f 	strb.w	r5, [sp, #31]
	switch (fault) {
   2218a:	2b09      	cmp	r3, #9
   2218c:	f200 8098 	bhi.w	222c0 <z_arm_fault+0x19c>
   22190:	e8df f003 	tbb	[pc, r3]
   22194:	89908c09 	.word	0x89908c09
   22198:	96969696 	.word	0x96969696
   2219c:	9496      	.short	0x9496
			ptr_esf = (z_arch_esf_t *)msp;
   2219e:	462f      	mov	r7, r5
	if (!alternative_state_exc) {
   221a0:	e7ed      	b.n	2217e <z_arm_fault+0x5a>
		return NULL;
   221a2:	4647      	mov	r7, r8
   221a4:	e7ed      	b.n	22182 <z_arm_fault+0x5e>
	PR_FAULT_INFO("***** HARD FAULT *****");
   221a6:	4b56      	ldr	r3, [pc, #344]	; (22300 <z_arm_fault+0x1dc>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   221a8:	4e52      	ldr	r6, [pc, #328]	; (222f4 <z_arm_fault+0x1d0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   221aa:	e9cd 5301 	strd	r5, r3, [sp, #4]
   221ae:	2300      	movs	r3, #0
   221b0:	2201      	movs	r2, #1
   221b2:	4618      	mov	r0, r3
   221b4:	4951      	ldr	r1, [pc, #324]	; (222fc <z_arm_fault+0x1d8>)
   221b6:	9500      	str	r5, [sp, #0]
   221b8:	f00e fcda 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   221bc:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
   221be:	f88d 501f 	strb.w	r5, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   221c2:	f014 0402 	ands.w	r4, r4, #2
   221c6:	d00b      	beq.n	221e0 <z_arm_fault+0xbc>
		PR_EXC("  Bus fault on vector table read");
   221c8:	4b4e      	ldr	r3, [pc, #312]	; (22304 <z_arm_fault+0x1e0>)
	PR_FAULT_INFO(
   221ca:	e9cd 5301 	strd	r5, r3, [sp, #4]
   221ce:	2300      	movs	r3, #0
   221d0:	2201      	movs	r2, #1
   221d2:	4618      	mov	r0, r3
   221d4:	4949      	ldr	r1, [pc, #292]	; (222fc <z_arm_fault+0x1d8>)
   221d6:	9500      	str	r5, [sp, #0]
   221d8:	f00e fcca 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   221dc:	2400      	movs	r4, #0
}
   221de:	e00c      	b.n	221fa <z_arm_fault+0xd6>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   221e0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   221e2:	2b00      	cmp	r3, #0
   221e4:	da24      	bge.n	22230 <z_arm_fault+0x10c>
		PR_EXC("  Debug event");
   221e6:	4b48      	ldr	r3, [pc, #288]	; (22308 <z_arm_fault+0x1e4>)
   221e8:	2201      	movs	r2, #1
   221ea:	e9cd 4301 	strd	r4, r3, [sp, #4]
   221ee:	4620      	mov	r0, r4
   221f0:	4623      	mov	r3, r4
   221f2:	4942      	ldr	r1, [pc, #264]	; (222fc <z_arm_fault+0x1d8>)
   221f4:	9400      	str	r4, [sp, #0]
   221f6:	f00e fcbb 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   221fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
   221fe:	b9a3      	cbnz	r3, 2222a <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   22200:	2268      	movs	r2, #104	; 0x68
   22202:	4639      	mov	r1, r7
   22204:	a808      	add	r0, sp, #32
   22206:	f011 fd12 	bl	33c2e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   2220a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2220c:	f1b8 0f00 	cmp.w	r8, #0
   22210:	d06b      	beq.n	222ea <z_arm_fault+0x1c6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   22212:	f3c3 0208 	ubfx	r2, r3, #0, #9
   22216:	b922      	cbnz	r2, 22222 <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   22218:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   2221c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   22220:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   22222:	4620      	mov	r0, r4
   22224:	a908      	add	r1, sp, #32
   22226:	f7ff fbe3 	bl	219f0 <z_arm_fatal_error>
}
   2222a:	b023      	add	sp, #140	; 0x8c
   2222c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   22230:	6af3      	ldr	r3, [r6, #44]	; 0x2c
   22232:	005b      	lsls	r3, r3, #1
   22234:	d5e1      	bpl.n	221fa <z_arm_fault+0xd6>
		PR_EXC("  Fault escalation (see below)");
   22236:	4b35      	ldr	r3, [pc, #212]	; (2230c <z_arm_fault+0x1e8>)
   22238:	2201      	movs	r2, #1
   2223a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2223e:	4620      	mov	r0, r4
   22240:	4623      	mov	r3, r4
   22242:	492e      	ldr	r1, [pc, #184]	; (222fc <z_arm_fault+0x1d8>)
   22244:	9400      	str	r4, [sp, #0]
   22246:	f00e fc93 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
   2224a:	69bb      	ldr	r3, [r7, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   2224c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   22250:	f64d 7302 	movw	r3, #57090	; 0xdf02
   22254:	429a      	cmp	r2, r3
   22256:	d10d      	bne.n	22274 <z_arm_fault+0x150>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   22258:	683b      	ldr	r3, [r7, #0]
   2225a:	4620      	mov	r0, r4
   2225c:	9303      	str	r3, [sp, #12]
   2225e:	4b2c      	ldr	r3, [pc, #176]	; (22310 <z_arm_fault+0x1ec>)
   22260:	9400      	str	r4, [sp, #0]
   22262:	e9cd 4301 	strd	r4, r3, [sp, #4]
   22266:	2201      	movs	r2, #1
   22268:	4623      	mov	r3, r4
   2226a:	4924      	ldr	r1, [pc, #144]	; (222fc <z_arm_fault+0x1d8>)
   2226c:	f00e fc80 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   22270:	683c      	ldr	r4, [r7, #0]
   22272:	e7c2      	b.n	221fa <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   22274:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   22276:	b2db      	uxtb	r3, r3
   22278:	b133      	cbz	r3, 22288 <z_arm_fault+0x164>
			reason = mem_manage_fault(esf, 1, recoverable);
   2227a:	2001      	movs	r0, #1
   2227c:	f10d 011f 	add.w	r1, sp, #31
		reason = mem_manage_fault(esf, 0, recoverable);
   22280:	f7ff fda2 	bl	21dc8 <mem_manage_fault.constprop.0>
   22284:	4604      	mov	r4, r0
		break;
   22286:	e7b8      	b.n	221fa <z_arm_fault+0xd6>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   22288:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   2228a:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   2228e:	d005      	beq.n	2229c <z_arm_fault+0x178>
			reason = bus_fault(esf, 1, recoverable);
   22290:	2001      	movs	r0, #1
   22292:	f10d 011f 	add.w	r1, sp, #31
		reason = bus_fault(esf, 0, recoverable);
   22296:	f7ff fe29 	bl	21eec <bus_fault.constprop.0>
   2229a:	e7f3      	b.n	22284 <z_arm_fault+0x160>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   2229c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   2229e:	0c1b      	lsrs	r3, r3, #16
   222a0:	041b      	lsls	r3, r3, #16
   222a2:	2b00      	cmp	r3, #0
   222a4:	d0a9      	beq.n	221fa <z_arm_fault+0xd6>
		reason = usage_fault(esf);
   222a6:	f7ff feaf 	bl	22008 <usage_fault.constprop.0>
   222aa:	e7eb      	b.n	22284 <z_arm_fault+0x160>
		reason = mem_manage_fault(esf, 0, recoverable);
   222ac:	2000      	movs	r0, #0
   222ae:	f10d 011f 	add.w	r1, sp, #31
   222b2:	e7e5      	b.n	22280 <z_arm_fault+0x15c>
		reason = bus_fault(esf, 0, recoverable);
   222b4:	2000      	movs	r0, #0
   222b6:	f10d 011f 	add.w	r1, sp, #31
   222ba:	e7ec      	b.n	22296 <z_arm_fault+0x172>
	PR_FAULT_INFO(
   222bc:	4b15      	ldr	r3, [pc, #84]	; (22314 <z_arm_fault+0x1f0>)
   222be:	e784      	b.n	221ca <z_arm_fault+0xa6>
	PR_FAULT_INFO("***** %s %d) *****",
   222c0:	4a15      	ldr	r2, [pc, #84]	; (22318 <z_arm_fault+0x1f4>)
   222c2:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
   222c6:	4b15      	ldr	r3, [pc, #84]	; (2231c <z_arm_fault+0x1f8>)
   222c8:	bf18      	it	ne
   222ca:	4613      	movne	r3, r2
   222cc:	2400      	movs	r4, #0
   222ce:	3e10      	subs	r6, #16
   222d0:	e9cd 3603 	strd	r3, r6, [sp, #12]
   222d4:	4b12      	ldr	r3, [pc, #72]	; (22320 <z_arm_fault+0x1fc>)
   222d6:	2201      	movs	r2, #1
   222d8:	9302      	str	r3, [sp, #8]
   222da:	4620      	mov	r0, r4
   222dc:	4623      	mov	r3, r4
   222de:	e9cd 4400 	strd	r4, r4, [sp]
   222e2:	4906      	ldr	r1, [pc, #24]	; (222fc <z_arm_fault+0x1d8>)
   222e4:	f00e fc44 	bl	30b70 <z_log_msg_runtime_create.constprop.0>
}
   222e8:	e787      	b.n	221fa <z_arm_fault+0xd6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   222ea:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   222ee:	f023 0301 	bic.w	r3, r3, #1
   222f2:	e795      	b.n	22220 <z_arm_fault+0xfc>
   222f4:	e000ed00 	.word	0xe000ed00
   222f8:	00037e1d 	.word	0x00037e1d
   222fc:	00034ac8 	.word	0x00034ac8
   22300:	00037e40 	.word	0x00037e40
   22304:	00037e57 	.word	0x00037e57
   22308:	00037e78 	.word	0x00037e78
   2230c:	00037e86 	.word	0x00037e86
   22310:	00037ea5 	.word	0x00037ea5
   22314:	00037ec1 	.word	0x00037ec1
   22318:	00037e04 	.word	0x00037e04
   2231c:	00037def 	.word	0x00037def
   22320:	00037ee5 	.word	0x00037ee5

00022324 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   22324:	4b04      	ldr	r3, [pc, #16]	; (22338 <z_arm_fault_init+0x14>)
   22326:	695a      	ldr	r2, [r3, #20]
   22328:	f042 0210 	orr.w	r2, r2, #16
   2232c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   2232e:	695a      	ldr	r2, [r3, #20]
   22330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   22334:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   22336:	4770      	bx	lr
   22338:	e000ed00 	.word	0xe000ed00

0002233c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   2233c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   22340:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   22344:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   22346:	4672      	mov	r2, lr
	bl z_arm_fault
   22348:	f7ff feec 	bl	22124 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   2234c:	bd01      	pop	{r0, pc}
   2234e:	bf00      	nop

00022350 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   22350:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   22352:	2120      	movs	r1, #32
   22354:	4803      	ldr	r0, [pc, #12]	; (22364 <z_arm_interrupt_init+0x14>)
   22356:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   22358:	3301      	adds	r3, #1
   2235a:	2b41      	cmp	r3, #65	; 0x41
   2235c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   22360:	d1f9      	bne.n	22356 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   22362:	4770      	bx	lr
   22364:	e000e100 	.word	0xe000e100

00022368 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   22368:	2000      	movs	r0, #0
    msr CONTROL, r0
   2236a:	f380 8814 	msr	CONTROL, r0
    isb
   2236e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   22372:	2000      	movs	r0, #0
    msr MSPLIM, r0
   22374:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   22378:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   2237c:	f7fe f986 	bl	2068c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   22380:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   22382:	490e      	ldr	r1, [pc, #56]	; (223bc <__start+0x54>)
    str r0, [r1]
   22384:	6008      	str	r0, [r1, #0]
    dsb
   22386:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   2238a:	480d      	ldr	r0, [pc, #52]	; (223c0 <__start+0x58>)
    msr msp, r0
   2238c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   22390:	f000 f83e 	bl	22410 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   22394:	2020      	movs	r0, #32
    msr BASEPRI, r0
   22396:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2239a:	480a      	ldr	r0, [pc, #40]	; (223c4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2239c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   223a0:	1840      	adds	r0, r0, r1
    msr PSP, r0
   223a2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   223a6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   223aa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   223ac:	4308      	orrs	r0, r1
    msr CONTROL, r0
   223ae:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   223b2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   223b6:	f7ff fbf5 	bl	21ba4 <z_arm_prep_c>
   223ba:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   223bc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   223c0:	200135a0 	.word	0x200135a0
    ldr r0, =z_interrupt_stacks
   223c4:	200136e0 	.word	0x200136e0

000223c8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   223c8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   223cc:	4905      	ldr	r1, [pc, #20]	; (223e4 <sys_arch_reboot+0x1c>)
   223ce:	4b06      	ldr	r3, [pc, #24]	; (223e8 <sys_arch_reboot+0x20>)
   223d0:	68ca      	ldr	r2, [r1, #12]
   223d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   223d6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   223d8:	60cb      	str	r3, [r1, #12]
   223da:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   223de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   223e0:	e7fd      	b.n	223de <sys_arch_reboot+0x16>
   223e2:	bf00      	nop
   223e4:	e000ed00 	.word	0xe000ed00
   223e8:	05fa0004 	.word	0x05fa0004

000223ec <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   223ec:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   223ee:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   223f0:	4906      	ldr	r1, [pc, #24]	; (2240c <z_arm_clear_arm_mpu_config+0x20>)
   223f2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
   223f6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
   223fa:	4293      	cmp	r3, r2
   223fc:	d100      	bne.n	22400 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   223fe:	4770      	bx	lr
  mpu->RNR = rnr;
   22400:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
   22404:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   22408:	3301      	adds	r3, #1
   2240a:	e7f6      	b.n	223fa <z_arm_clear_arm_mpu_config+0xe>
   2240c:	e000ed00 	.word	0xe000ed00

00022410 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   22410:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   22412:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   22414:	2400      	movs	r4, #0
   22416:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   2241a:	f7ff ffe7 	bl	223ec <z_arm_clear_arm_mpu_config>
   2241e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   22420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22424:	4a0b      	ldr	r2, [pc, #44]	; (22454 <z_arm_init_arch_hw_at_boot+0x44>)
   22426:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   2242a:	3301      	adds	r3, #1
   2242c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   2242e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   22432:	d1f8      	bne.n	22426 <z_arm_init_arch_hw_at_boot+0x16>
   22434:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   22436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2243a:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   2243e:	3301      	adds	r3, #1
   22440:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   22442:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   22446:	d1f8      	bne.n	2243a <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
   22448:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   2244a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2244e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   22452:	bd10      	pop	{r4, pc}
   22454:	e000e100 	.word	0xe000e100

00022458 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   22458:	4b08      	ldr	r3, [pc, #32]	; (2247c <z_impl_k_thread_abort+0x24>)
   2245a:	689b      	ldr	r3, [r3, #8]
   2245c:	4283      	cmp	r3, r0
   2245e:	d10b      	bne.n	22478 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22460:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   22464:	b143      	cbz	r3, 22478 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   22466:	4b06      	ldr	r3, [pc, #24]	; (22480 <z_impl_k_thread_abort+0x28>)
   22468:	685a      	ldr	r2, [r3, #4]
   2246a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   2246e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   22470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   22472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   22476:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   22478:	f00a bcac 	b.w	2cdd4 <z_thread_abort>
   2247c:	2000d8b0 	.word	0x2000d8b0
   22480:	e000ed00 	.word	0xe000ed00

00022484 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   22484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   22486:	4c09      	ldr	r4, [pc, #36]	; (224ac <z_arm_configure_static_mpu_regions+0x28>)
   22488:	4a09      	ldr	r2, [pc, #36]	; (224b0 <z_arm_configure_static_mpu_regions+0x2c>)
   2248a:	4623      	mov	r3, r4
   2248c:	2101      	movs	r1, #1
   2248e:	4809      	ldr	r0, [pc, #36]	; (224b4 <z_arm_configure_static_mpu_regions+0x30>)
   22490:	f000 f920 	bl	226d4 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   22494:	2300      	movs	r3, #0
   22496:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   22498:	4b07      	ldr	r3, [pc, #28]	; (224b8 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2249a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   2249c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   2249e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   224a0:	9301      	str	r3, [sp, #4]
   224a2:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   224a4:	f000 f920 	bl	226e8 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   224a8:	b004      	add	sp, #16
   224aa:	bd10      	pop	{r4, pc}
   224ac:	20040000 	.word	0x20040000
   224b0:	2000c500 	.word	0x2000c500
   224b4:	00034dc0 	.word	0x00034dc0
   224b8:	2000ca90 	.word	0x2000ca90

000224bc <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   224bc:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   224be:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   224c0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   224c2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   224c6:	f004 031f 	and.w	r3, r4, #31
   224ca:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   224cc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   224ce:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   224d0:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   224d4:	4905      	ldr	r1, [pc, #20]	; (224ec <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   224d6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   224da:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
   224de:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
   224e2:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
   224e6:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   224ea:	bd10      	pop	{r4, pc}
   224ec:	e000ed00 	.word	0xe000ed00

000224f0 <region_allocate_and_init>:

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   224f0:	280f      	cmp	r0, #15
{
   224f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   224f4:	4604      	mov	r4, r0
	if (index > (get_num_regions() - 1U)) {
   224f6:	d90f      	bls.n	22518 <region_allocate_and_init+0x28>

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   224f8:	4b09      	ldr	r3, [pc, #36]	; (22520 <region_allocate_and_init+0x30>)
   224fa:	9003      	str	r0, [sp, #12]
   224fc:	9302      	str	r3, [sp, #8]
   224fe:	2300      	movs	r3, #0
   22500:	2201      	movs	r2, #1
   22502:	4618      	mov	r0, r3
   22504:	e9cd 3300 	strd	r3, r3, [sp]
   22508:	4906      	ldr	r1, [pc, #24]	; (22524 <region_allocate_and_init+0x34>)
   2250a:	f00e fb79 	bl	30c00 <z_log_msg_runtime_create.constprop.0>
   2250e:	f06f 0415 	mvn.w	r4, #21

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   22512:	4620      	mov	r0, r4
   22514:	b004      	add	sp, #16
   22516:	bd10      	pop	{r4, pc}
	region_init(index, region_conf);
   22518:	f7ff ffd0 	bl	224bc <region_init>
	return index;
   2251c:	e7f9      	b.n	22512 <region_allocate_and_init+0x22>
   2251e:	bf00      	nop
   22520:	00037efc 	.word	0x00037efc
   22524:	00034ab0 	.word	0x00034ab0

00022528 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   22528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2252c:	4689      	mov	r9, r1
   2252e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   22530:	4606      	mov	r6, r0
   22532:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
   22536:	4d58      	ldr	r5, [pc, #352]	; (22698 <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   22538:	b089      	sub	sp, #36	; 0x24
	for (i = 0; i < regions_num; i++) {
   2253a:	45c8      	cmp	r8, r9
   2253c:	da2d      	bge.n	2259a <mpu_configure_regions_and_partition.constprop.0+0x72>
		if (regions[i].size == 0U) {
   2253e:	f8d6 a004 	ldr.w	sl, [r6, #4]
   22542:	f1ba 0f00 	cmp.w	sl, #0
   22546:	d04a      	beq.n	225de <mpu_configure_regions_and_partition.constprop.0+0xb6>
		&&
   22548:	f1ba 0f1f 	cmp.w	sl, #31
   2254c:	d917      	bls.n	2257e <mpu_configure_regions_and_partition.constprop.0+0x56>
		&&
   2254e:	f01a 0f1f 	tst.w	sl, #31
   22552:	d114      	bne.n	2257e <mpu_configure_regions_and_partition.constprop.0+0x56>
		((part->start &
   22554:	f8d6 b000 	ldr.w	fp, [r6]
		&&
   22558:	f01b 0f1f 	tst.w	fp, #31
   2255c:	d10f      	bne.n	2257e <mpu_configure_regions_and_partition.constprop.0+0x56>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2255e:	4658      	mov	r0, fp
   22560:	f00e fb44 	bl	30bec <arm_cmse_mpu_region_get>
   22564:	4607      	mov	r7, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   22566:	eb0a 000b 	add.w	r0, sl, fp
   2256a:	3801      	subs	r0, #1
   2256c:	f00e fb3e 	bl	30bec <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   22570:	4287      	cmp	r7, r0
   22572:	d016      	beq.n	225a2 <mpu_configure_regions_and_partition.constprop.0+0x7a>
	return -EINVAL;
   22574:	f06f 0715 	mvn.w	r7, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   22578:	4b48      	ldr	r3, [pc, #288]	; (2269c <mpu_configure_regions_and_partition.constprop.0+0x174>)
   2257a:	9703      	str	r7, [sp, #12]
   2257c:	e002      	b.n	22584 <mpu_configure_regions_and_partition.constprop.0+0x5c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   2257e:	4b48      	ldr	r3, [pc, #288]	; (226a0 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   22580:	f8cd 800c 	str.w	r8, [sp, #12]
			LOG_ERR("Invalid underlying region index %u",
   22584:	9302      	str	r3, [sp, #8]
   22586:	2300      	movs	r3, #0
   22588:	2201      	movs	r2, #1
   2258a:	4618      	mov	r0, r3
   2258c:	e9cd 3300 	strd	r3, r3, [sp]
   22590:	4944      	ldr	r1, [pc, #272]	; (226a4 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   22592:	f00e fb35 	bl	30c00 <z_log_msg_runtime_create.constprop.0>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   22596:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   2259a:	4620      	mov	r0, r4
   2259c:	b009      	add	sp, #36	; 0x24
   2259e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   225a2:	f117 0f16 	cmn.w	r7, #22
   225a6:	d0e7      	beq.n	22578 <mpu_configure_regions_and_partition.constprop.0+0x50>
   225a8:	42bc      	cmp	r4, r7
   225aa:	dde5      	ble.n	22578 <mpu_configure_regions_and_partition.constprop.0+0x50>
	MPU->RNR = rnr;
   225ac:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   225b0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
   225b4:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RLAR;
   225b8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   225bc:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   225c0:	f043 0b1f 	orr.w	fp, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   225c4:	e9d6 3200 	ldrd	r3, r2, [r6]
   225c8:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   225ca:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   225cc:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
   225d0:	d11d      	bne.n	2260e <mpu_configure_regions_and_partition.constprop.0+0xe6>
   225d2:	45d3      	cmp	fp, sl
   225d4:	d107      	bne.n	225e6 <mpu_configure_regions_and_partition.constprop.0+0xbe>
			mpu_configure_region(u_reg_index, &regions[i]);
   225d6:	4631      	mov	r1, r6
   225d8:	b2f8      	uxtb	r0, r7
   225da:	f00e fb21 	bl	30c20 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   225de:	f108 0801 	add.w	r8, r8, #1
   225e2:	360c      	adds	r6, #12
   225e4:	e7a9      	b.n	2253a <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   225e6:	4631      	mov	r1, r6
	MPU->RNR = rnr;
   225e8:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   225ec:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
   225f0:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
   225f4:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
   225f8:	431a      	orrs	r2, r3
	MPU->RBAR = rbar;
   225fa:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
   225fe:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   22600:	f00e fb0e 	bl	30c20 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   22604:	f110 0f16 	cmn.w	r0, #22
   22608:	d0c5      	beq.n	22596 <mpu_configure_regions_and_partition.constprop.0+0x6e>
			reg_index++;
   2260a:	1c44      	adds	r4, r0, #1
   2260c:	e7e7      	b.n	225de <mpu_configure_regions_and_partition.constprop.0+0xb6>
				regions[i].start - 1);
   2260e:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
   22610:	45d3      	cmp	fp, sl
				mpu_configure_region(reg_index, &regions[i]);
   22612:	b2e0      	uxtb	r0, r4
		     | (limit & MPU_RLAR_LIMIT_Msk));
   22614:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
   22618:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
   2261c:	d108      	bne.n	22630 <mpu_configure_regions_and_partition.constprop.0+0x108>
	return MPU->RLAR;
   2261e:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   22622:	4631      	mov	r1, r6
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   22624:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   22628:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
   2262a:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
   2262e:	e7e7      	b.n	22600 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	return MPU->RLAR;
   22630:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
   22634:	f001 011f 	and.w	r1, r1, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
   22638:	430b      	orrs	r3, r1
	MPU->RLAR = rlar;
   2263a:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
   2263e:	4631      	mov	r1, r6
   22640:	f00e faee 	bl	30c20 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   22644:	f110 0f16 	cmn.w	r0, #22
   22648:	d0a5      	beq.n	22596 <mpu_configure_regions_and_partition.constprop.0+0x6e>
	MPU->RNR = rnr;
   2264a:	f8c5 7098 	str.w	r7, [r5, #152]	; 0x98
	return MPU->RBAR;
   2264e:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   22652:	f89d 3018 	ldrb.w	r3, [sp, #24]
			REGION_LIMIT_ADDR((regions[i].start +
   22656:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
   2265a:	f362 0304 	bfi	r3, r2, #0, #5
   2265e:	f88d 3018 	strb.w	r3, [sp, #24]
	return MPU->RLAR;
   22662:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   22666:	f89d 2018 	ldrb.w	r2, [sp, #24]
   2266a:	085b      	lsrs	r3, r3, #1
   2266c:	f363 1247 	bfi	r2, r3, #5, #3
   22670:	f88d 2018 	strb.w	r2, [sp, #24]
			fill_region.base = regions[i].start +
   22674:	e9d6 3200 	ldrd	r3, r2, [r6]
   22678:	4413      	add	r3, r2
   2267a:	9304      	str	r3, [sp, #16]
			REGION_LIMIT_ADDR((regions[i].start +
   2267c:	f023 031f 	bic.w	r3, r3, #31
   22680:	445b      	add	r3, fp
   22682:	eba3 030a 	sub.w	r3, r3, sl
			reg_index++;
   22686:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   22688:	f023 031f 	bic.w	r3, r3, #31
				region_allocate_and_init(reg_index,
   2268c:	a904      	add	r1, sp, #16
   2268e:	b2c0      	uxtb	r0, r0
			fill_region.attr.r_limit =
   22690:	9307      	str	r3, [sp, #28]
				region_allocate_and_init(reg_index,
   22692:	f7ff ff2d 	bl	224f0 <region_allocate_and_init>
   22696:	e7b5      	b.n	22604 <mpu_configure_regions_and_partition.constprop.0+0xdc>
   22698:	e000ed00 	.word	0xe000ed00
   2269c:	00037f45 	.word	0x00037f45
   226a0:	00037f22 	.word	0x00037f22
   226a4:	00034ab0 	.word	0x00034ab0

000226a8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   226a8:	2205      	movs	r2, #5
   226aa:	4b04      	ldr	r3, [pc, #16]	; (226bc <arm_core_mpu_enable+0x14>)
   226ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   226b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   226b4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   226b8:	4770      	bx	lr
   226ba:	bf00      	nop
   226bc:	e000ed00 	.word	0xe000ed00

000226c0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   226c0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   226c4:	2200      	movs	r2, #0
   226c6:	4b02      	ldr	r3, [pc, #8]	; (226d0 <arm_core_mpu_disable+0x10>)
   226c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   226cc:	4770      	bx	lr
   226ce:	bf00      	nop
   226d0:	e000ed00 	.word	0xe000ed00

000226d4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   226d4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   226d6:	4c03      	ldr	r4, [pc, #12]	; (226e4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   226d8:	7822      	ldrb	r2, [r4, #0]
   226da:	f7ff ff25 	bl	22528 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   226de:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   226e0:	bd10      	pop	{r4, pc}
   226e2:	bf00      	nop
   226e4:	2000e22c 	.word	0x2000e22c

000226e8 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
   226e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226ec:	4d29      	ldr	r5, [pc, #164]	; (22794 <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
   226ee:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
   226f0:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   226f2:	f04f 0800 	mov.w	r8, #0
   226f6:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
   226f8:	4f27      	ldr	r7, [pc, #156]	; (22798 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   226fa:	45d0      	cmp	r8, sl
   226fc:	da1b      	bge.n	22736 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   226fe:	f8d6 9004 	ldr.w	r9, [r6, #4]
   22702:	f1b9 0f00 	cmp.w	r9, #0
   22706:	d03f      	beq.n	22788 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   22708:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2270a:	4608      	mov	r0, r1
   2270c:	9101      	str	r1, [sp, #4]
   2270e:	f00e fa6d 	bl	30bec <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   22712:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   22714:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   22716:	eb09 0001 	add.w	r0, r9, r1
   2271a:	3801      	subs	r0, #1
   2271c:	f00e fa66 	bl	30bec <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   22720:	4284      	cmp	r4, r0
   22722:	f04f 0214 	mov.w	r2, #20
   22726:	4b1d      	ldr	r3, [pc, #116]	; (2279c <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
   22728:	d008      	beq.n	2273c <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   2272a:	f06f 0315 	mvn.w	r3, #21
   2272e:	fb02 f808 	mul.w	r8, r2, r8
   22732:	f84b 3008 	str.w	r3, [fp, r8]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
   22736:	b003      	add	sp, #12
   22738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   2273c:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   22740:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   22742:	d0f8      	beq.n	22736 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   22744:	7819      	ldrb	r1, [r3, #0]
   22746:	42a1      	cmp	r1, r4
   22748:	ddf5      	ble.n	22736 <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
   2274a:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
   2274e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
   22752:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
   22756:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
   2275a:	f100 0108 	add.w	r1, r0, #8
   2275e:	7b00      	ldrb	r0, [r0, #12]
   22760:	f364 0004 	bfi	r0, r4, #0, #5
   22764:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
   22766:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
   2276a:	790c      	ldrb	r4, [r1, #4]
   2276c:	0840      	lsrs	r0, r0, #1
   2276e:	f360 1447 	bfi	r4, r0, #5, #3
   22772:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
   22774:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
   22778:	f021 011f 	bic.w	r1, r1, #31
   2277c:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
   2277e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
   22782:	f021 011f 	bic.w	r1, r1, #31
   22786:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   22788:	f108 0801 	add.w	r8, r8, #1
   2278c:	3514      	adds	r5, #20
   2278e:	360c      	adds	r6, #12
   22790:	e7b3      	b.n	226fa <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   22792:	bf00      	nop
   22794:	2000d270 	.word	0x2000d270
   22798:	e000ed00 	.word	0xe000ed00
   2279c:	2000e22c 	.word	0x2000e22c

000227a0 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   227a0:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   227a2:	4d0e      	ldr	r5, [pc, #56]	; (227dc <z_arm_mpu_init+0x3c>)
   227a4:	682c      	ldr	r4, [r5, #0]
   227a6:	2c10      	cmp	r4, #16
   227a8:	d815      	bhi.n	227d6 <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   227aa:	2000      	movs	r0, #0
	arm_core_mpu_disable();
   227ac:	f7ff ff88 	bl	226c0 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
   227b0:	4b0b      	ldr	r3, [pc, #44]	; (227e0 <z_arm_mpu_init+0x40>)
   227b2:	4a0c      	ldr	r2, [pc, #48]	; (227e4 <z_arm_mpu_init+0x44>)
   227b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   227b8:	4284      	cmp	r4, r0
   227ba:	d105      	bne.n	227c8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   227bc:	4b0a      	ldr	r3, [pc, #40]	; (227e8 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   227be:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
   227c0:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   227c2:	f7ff ff71 	bl	226a8 <arm_core_mpu_enable>
}
   227c6:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   227c8:	6869      	ldr	r1, [r5, #4]
   227ca:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   227ce:	f7ff fe75 	bl	224bc <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   227d2:	3001      	adds	r0, #1
   227d4:	e7f0      	b.n	227b8 <z_arm_mpu_init+0x18>
		return -1;
   227d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   227da:	e7f4      	b.n	227c6 <z_arm_mpu_init+0x26>
   227dc:	00034dcc 	.word	0x00034dcc
   227e0:	e000ed00 	.word	0xe000ed00
   227e4:	0044ffaa 	.word	0x0044ffaa
   227e8:	2000e22c 	.word	0x2000e22c

000227ec <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   227ec:	4b01      	ldr	r3, [pc, #4]	; (227f4 <__stdout_hook_install+0x8>)
   227ee:	6018      	str	r0, [r3, #0]
}
   227f0:	4770      	bx	lr
   227f2:	bf00      	nop
   227f4:	2000c59c 	.word	0x2000c59c

000227f8 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   227f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   227fa:	4606      	mov	r6, r0
   227fc:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   227fe:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   22800:	4f06      	ldr	r7, [pc, #24]	; (2281c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   22802:	42ac      	cmp	r4, r5
   22804:	da08      	bge.n	22818 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   22806:	683b      	ldr	r3, [r7, #0]
   22808:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   2280a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   2280c:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
   2280e:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   22812:	d001      	beq.n	22818 <z_impl_zephyr_read_stdin+0x20>
   22814:	280d      	cmp	r0, #13
   22816:	d1f4      	bne.n	22802 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   22818:	4620      	mov	r0, r4
   2281a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2281c:	2000c598 	.word	0x2000c598

00022820 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   22820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22822:	460d      	mov	r5, r1
   22824:	4f09      	ldr	r7, [pc, #36]	; (2284c <z_impl_zephyr_write_stdout+0x2c>)
   22826:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   22828:	f1c0 0401 	rsb	r4, r0, #1
   2282c:	19a3      	adds	r3, r4, r6
   2282e:	429d      	cmp	r5, r3
   22830:	dc01      	bgt.n	22836 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   22832:	4628      	mov	r0, r5
   22834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   22836:	7873      	ldrb	r3, [r6, #1]
   22838:	2b0a      	cmp	r3, #10
   2283a:	d102      	bne.n	22842 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   2283c:	200d      	movs	r0, #13
   2283e:	683b      	ldr	r3, [r7, #0]
   22840:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   22842:	683b      	ldr	r3, [r7, #0]
   22844:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   22848:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   2284a:	e7ef      	b.n	2282c <z_impl_zephyr_write_stdout+0xc>
   2284c:	2000c59c 	.word	0x2000c59c

00022850 <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   22850:	b508      	push	{r3, lr}
		union { uintptr_t x; int val; } parm1 = { .val = nbytes };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   22852:	2105      	movs	r1, #5
   22854:	4801      	ldr	r0, [pc, #4]	; (2285c <_exit+0xc>)
   22856:	f7ff ffe3 	bl	22820 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   2285a:	e7fe      	b.n	2285a <_exit+0xa>
   2285c:	00037f68 	.word	0x00037f68

00022860 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   22860:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   22862:	4c07      	ldr	r4, [pc, #28]	; (22880 <_sbrk+0x20>)
   22864:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   22866:	18c2      	adds	r2, r0, r3
   22868:	4806      	ldr	r0, [pc, #24]	; (22884 <_sbrk+0x24>)
   2286a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   2286e:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   22872:	428a      	cmp	r2, r1

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   22874:	bf2e      	itee	cs
   22876:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   2287a:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   2287c:	6022      	strcc	r2, [r4, #0]
	}

	return ret;
}
   2287e:	bd10      	pop	{r4, pc}
   22880:	2000d284 	.word	0x2000d284
   22884:	20014d08 	.word	0x20014d08

00022888 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   22888:	b508      	push	{r3, lr}
   2288a:	211d      	movs	r1, #29
   2288c:	4804      	ldr	r0, [pc, #16]	; (228a0 <__chk_fail+0x18>)
   2288e:	f7ff ffc7 	bl	22820 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   22892:	4040      	eors	r0, r0
   22894:	f380 8811 	msr	BASEPRI, r0
   22898:	f04f 0003 	mov.w	r0, #3
   2289c:	df02      	svc	2
	CODE_UNREACHABLE;
   2289e:	bf00      	nop
   228a0:	00037f6e 	.word	0x00037f6e

000228a4 <k_mutex_lock.constprop.0.isra.0>:
static inline int k_mutex_lock(struct k_mutex * mutex, k_timeout_t timeout)
   228a4:	4602      	mov	r2, r0
   228a6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   228a8:	4801      	ldr	r0, [pc, #4]	; (228b0 <k_mutex_lock.constprop.0.isra.0+0xc>)
   228aa:	f009 bda3 	b.w	2c3f4 <z_impl_k_mutex_lock>
   228ae:	bf00      	nop
   228b0:	2000c9a0 	.word	0x2000c9a0

000228b4 <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   228b4:	4801      	ldr	r0, [pc, #4]	; (228bc <k_mutex_unlock.constprop.0.isra.0+0x8>)
   228b6:	f009 be15 	b.w	2c4e4 <z_impl_k_mutex_unlock>
   228ba:	bf00      	nop
   228bc:	2000c9a0 	.word	0x2000c9a0

000228c0 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   228c0:	b538      	push	{r3, r4, r5, lr}
	int if_count = 0;

	NET_DBG("");

	k_mutex_lock(&lock, K_FOREVER);
   228c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   228c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   228ca:	f7ff ffeb 	bl	228a4 <k_mutex_lock.constprop.0.isra.0>

	net_tc_tx_init();

	STRUCT_SECTION_FOREACH(net_if, iface) {
   228ce:	4c0a      	ldr	r4, [pc, #40]	; (228f8 <net_if_init+0x38>)
   228d0:	4d0a      	ldr	r5, [pc, #40]	; (228fc <net_if_init+0x3c>)
   228d2:	42ac      	cmp	r4, r5
   228d4:	4620      	mov	r0, r4
   228d6:	d303      	bcc.n	228e0 <net_if_init+0x20>
	}
#endif

out:
	k_mutex_unlock(&lock);
}
   228d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&lock);
   228dc:	f7ff bfea 	b.w	228b4 <k_mutex_unlock.constprop.0.isra.0>
 *
 * @return a pointer to the device driver instance
 */
static inline const struct device *net_if_get_device(struct net_if *iface)
{
	return iface->if_dev->dev;
   228e0:	6803      	ldr	r3, [r0, #0]
   228e2:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   228e4:	681b      	ldr	r3, [r3, #0]
   228e6:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   228e8:	2b00      	cmp	r3, #0
   228ea:	d0f2      	beq.n	228d2 <net_if_init+0x12>
   228ec:	681b      	ldr	r3, [r3, #0]
   228ee:	2b00      	cmp	r3, #0
   228f0:	d0ef      	beq.n	228d2 <net_if_init+0x12>
	api->init(iface);
   228f2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(net_if, iface) {
   228f4:	e7ed      	b.n	228d2 <net_if_init+0x12>
   228f6:	bf00      	nop
   228f8:	2000ca68 	.word	0x2000ca68
   228fc:	2000ca6c 	.word	0x2000ca6c

00022900 <net_if_post_init>:

void net_if_post_init(void)
{
   22900:	b538      	push	{r3, r4, r5, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	STRUCT_SECTION_FOREACH(net_if, iface) {
   22902:	4c07      	ldr	r4, [pc, #28]	; (22920 <net_if_post_init+0x20>)
   22904:	4d07      	ldr	r5, [pc, #28]	; (22924 <net_if_post_init+0x24>)
   22906:	42ac      	cmp	r4, r5
   22908:	d300      	bcc.n	2290c <net_if_post_init+0xc>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   2290a:	bd38      	pop	{r3, r4, r5, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   2290c:	2103      	movs	r1, #3
   2290e:	4620      	mov	r0, r4
   22910:	f00e f9e1 	bl	30cd6 <net_if_flag_is_set>
   22914:	b910      	cbnz	r0, 2291c <net_if_post_init+0x1c>
			net_if_up(iface);
   22916:	4620      	mov	r0, r4
   22918:	f00e fa03 	bl	30d22 <net_if_up>
	STRUCT_SECTION_FOREACH(net_if, iface) {
   2291c:	3404      	adds	r4, #4
   2291e:	e7f2      	b.n	22906 <net_if_post_init+0x6>
   22920:	2000ca68 	.word	0x2000ca68
   22924:	2000ca6c 	.word	0x2000ca6c

00022928 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   22928:	2300      	movs	r3, #0
{
   2292a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   2292e:	2802      	cmp	r0, #2
{
   22930:	b089      	sub	sp, #36	; 0x24
   22932:	4607      	mov	r7, r0
   22934:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   22936:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   2293a:	9103      	str	r1, [sp, #12]
	if (family == AF_INET6) {
   2293c:	d13e      	bne.n	229bc <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   2293e:	a806      	add	r0, sp, #24
   22940:	9105      	str	r1, [sp, #20]
   22942:	4601      	mov	r1, r0
{
   22944:	461a      	mov	r2, r3
   22946:	e006      	b.n	22956 <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   22948:	780c      	ldrb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   2294a:	3201      	adds	r2, #1
				zeros[i]++;
   2294c:	3401      	adds	r4, #1
   2294e:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   22950:	b2d4      	uxtb	r4, r2
   22952:	2c07      	cmp	r4, #7
   22954:	d804      	bhi.n	22960 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   22956:	9c03      	ldr	r4, [sp, #12]
   22958:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   2295c:	2c00      	cmp	r4, #0
   2295e:	d0f3      	beq.n	22948 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   22960:	3301      	adds	r3, #1
   22962:	2b08      	cmp	r3, #8
   22964:	f101 0101 	add.w	r1, r1, #1
   22968:	d1ec      	bne.n	22944 <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   2296a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   2296e:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   22972:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   22974:	f810 2b01 	ldrb.w	r2, [r0], #1
   22978:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   2297a:	bf88      	it	hi
   2297c:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   22980:	f103 0301 	add.w	r3, r3, #1
   22984:	b2db      	uxtb	r3, r3
				pos = i;
   22986:	bf88      	it	hi
   22988:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   2298a:	2b08      	cmp	r3, #8
   2298c:	d1f2      	bne.n	22974 <z_impl_net_addr_ntop+0x4c>
		len = 8;
   2298e:	469b      	mov	fp, r3
   22990:	f1b9 0f01 	cmp.w	r9, #1
   22994:	f04f 033a 	mov.w	r3, #58	; 0x3a
   22998:	bf08      	it	eq
   2299a:	f04f 38ff 	moveq.w	r8, #4294967295	; 0xffffffff
   2299e:	9302      	str	r3, [sp, #8]
	bool needcolon = false;
   229a0:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   229a2:	4634      	mov	r4, r6
   229a4:	460d      	mov	r5, r1
   229a6:	455d      	cmp	r5, fp
   229a8:	db17      	blt.n	229da <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   229aa:	42b4      	cmp	r4, r6
   229ac:	d008      	beq.n	229c0 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   229ae:	2300      	movs	r3, #0
   229b0:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   229b2:	bf0c      	ite	eq
   229b4:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   229b8:	7023      	strbne	r3, [r4, #0]
   229ba:	e002      	b.n	229c2 <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   229bc:	2801      	cmp	r0, #1
   229be:	d004      	beq.n	229ca <z_impl_net_addr_ntop+0xa2>
		return NULL;
   229c0:	2600      	movs	r6, #0
	}

	return dst;
}
   229c2:	4630      	mov	r0, r6
   229c4:	b009      	add	sp, #36	; 0x24
   229c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   229ca:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   229cc:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   229d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	uint8_t i, bl, bh, longest = 1U;
   229d4:	4681      	mov	r9, r0
		delim = '.';
   229d6:	9302      	str	r3, [sp, #8]
   229d8:	e7e2      	b.n	229a0 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   229da:	f1bb 0f04 	cmp.w	fp, #4
   229de:	d135      	bne.n	22a4c <z_impl_net_addr_ntop+0x124>
			value = (uint32_t)addr->s4_addr[i];
   229e0:	9b03      	ldr	r3, [sp, #12]
   229e2:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   229e4:	b94a      	cbnz	r2, 229fa <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   229e6:	2330      	movs	r3, #48	; 0x30
   229e8:	4620      	mov	r0, r4
   229ea:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   229ee:	9b02      	ldr	r3, [sp, #8]
   229f0:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   229f2:	3501      	adds	r5, #1
   229f4:	4604      	mov	r4, r0
   229f6:	b2ed      	uxtb	r5, r5
   229f8:	e7d5      	b.n	229a6 <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   229fa:	4623      	mov	r3, r4
   229fc:	2009      	movs	r0, #9
   229fe:	f04f 0a00 	mov.w	sl, #0
   22a02:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 22ae0 <z_impl_net_addr_ntop+0x1b8>
   22a06:	9201      	str	r2, [sp, #4]
		temp = value / divisor;
   22a08:	9a01      	ldr	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   22a0a:	4582      	cmp	sl, r0
		temp = value / divisor;
   22a0c:	fbb2 fefc 	udiv	lr, r2, ip
		value = value % divisor;
   22a10:	9204      	str	r2, [sp, #16]
   22a12:	fb0c 221e 	mls	r2, ip, lr, r2
   22a16:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   22a18:	dc02      	bgt.n	22a20 <z_impl_net_addr_ntop+0xf8>
   22a1a:	9a04      	ldr	r2, [sp, #16]
   22a1c:	4562      	cmp	r2, ip
   22a1e:	d304      	bcc.n	22a2a <z_impl_net_addr_ntop+0x102>
			*buf++ = (char) (temp + '0');
   22a20:	4682      	mov	sl, r0
   22a22:	f10e 0e30 	add.w	lr, lr, #48	; 0x30
   22a26:	f803 eb01 	strb.w	lr, [r3], #1
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   22a2a:	220a      	movs	r2, #10
   22a2c:	3801      	subs	r0, #1
   22a2e:	fbbc fcf2 	udiv	ip, ip, r2
   22a32:	1c42      	adds	r2, r0, #1
   22a34:	d1e8      	bne.n	22a08 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   22a36:	f04f 0200 	mov.w	r2, #0
   22a3a:	701a      	strb	r2, [r3, #0]
	return buf - start;
   22a3c:	1b1b      	subs	r3, r3, r4
			ptr += l;
   22a3e:	b2da      	uxtb	r2, r3
   22a40:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   22a44:	1c58      	adds	r0, r3, #1
   22a46:	9b02      	ldr	r3, [sp, #8]
   22a48:	54a3      	strb	r3, [r4, r2]
			continue;
   22a4a:	e7d2      	b.n	229f2 <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   22a4c:	45a8      	cmp	r8, r5
   22a4e:	d110      	bne.n	22a72 <z_impl_net_addr_ntop+0x14a>
			if (needcolon || i == 0U) {
   22a50:	b911      	cbnz	r1, 22a58 <z_impl_net_addr_ntop+0x130>
   22a52:	f1b8 0f00 	cmp.w	r8, #0
   22a56:	d102      	bne.n	22a5e <z_impl_net_addr_ntop+0x136>
				*ptr++ = ':';
   22a58:	233a      	movs	r3, #58	; 0x3a
   22a5a:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   22a5e:	233a      	movs	r3, #58	; 0x3a
   22a60:	4620      	mov	r0, r4
   22a62:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   22a66:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   22a6a:	441d      	add	r5, r3
			needcolon = false;
   22a6c:	2100      	movs	r1, #0
			i += longest - 1U;
   22a6e:	b2ed      	uxtb	r5, r5
			continue;
   22a70:	e7bf      	b.n	229f2 <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   22a72:	b111      	cbz	r1, 22a7a <z_impl_net_addr_ntop+0x152>
			*ptr++ = ':';
   22a74:	233a      	movs	r3, #58	; 0x3a
   22a76:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   22a7a:	9b05      	ldr	r3, [sp, #20]
   22a7c:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
   22a80:	ba52      	rev16	r2, r2
		if (bh) {
   22a82:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
		bh = value >> 8;
   22a86:	f3c2 2307 	ubfx	r3, r2, #8, #8
		bl = value & 0xff;
   22a8a:	fa5f fa82 	uxtb.w	sl, r2
		if (bh) {
   22a8e:	d015      	beq.n	22abc <z_impl_net_addr_ntop+0x194>
			if (bh > 0x0f) {
   22a90:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   22a92:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   22a94:	d90b      	bls.n	22aae <z_impl_net_addr_ntop+0x186>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   22a96:	2300      	movs	r3, #0
   22a98:	2261      	movs	r2, #97	; 0x61
   22a9a:	4620      	mov	r0, r4
   22a9c:	f00e f971 	bl	30d82 <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   22aa0:	2301      	movs	r3, #1
   22aa2:	2261      	movs	r2, #97	; 0x61
   22aa4:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   22aa6:	f00e f96c 	bl	30d82 <net_byte_to_hex>
		needcolon = true;
   22aaa:	2101      	movs	r1, #1
   22aac:	e7a1      	b.n	229f2 <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   22aae:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   22ab0:	bf94      	ite	ls
   22ab2:	3130      	addls	r1, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   22ab4:	3157      	addhi	r1, #87	; 0x57
					*ptr++ = (char)(bh + '0');
   22ab6:	1c60      	adds	r0, r4, #1
					*ptr++ = (char) (bh - 10 + 'a');
   22ab8:	7021      	strb	r1, [r4, #0]
   22aba:	e7f1      	b.n	22aa0 <z_impl_net_addr_ntop+0x178>
		} else if (bl > 0x0f) {
   22abc:	f1ba 0f0f 	cmp.w	sl, #15
   22ac0:	d903      	bls.n	22aca <z_impl_net_addr_ntop+0x1a2>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   22ac2:	2261      	movs	r2, #97	; 0x61
   22ac4:	4651      	mov	r1, sl
   22ac6:	4620      	mov	r0, r4
   22ac8:	e7ed      	b.n	22aa6 <z_impl_net_addr_ntop+0x17e>
			if (bl < 10) {
   22aca:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   22ace:	bf94      	ite	ls
   22ad0:	f10a 0a30 	addls.w	sl, sl, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   22ad4:	f10a 0a57 	addhi.w	sl, sl, #87	; 0x57
					*ptr++ = (char)(bh + '0');
   22ad8:	1c60      	adds	r0, r4, #1
				*ptr++ = (char) (bl - 10 + 'a');
   22ada:	f884 a000 	strb.w	sl, [r4]
   22ade:	e7e4      	b.n	22aaa <z_impl_net_addr_ntop+0x182>
   22ae0:	3b9aca00 	.word	0x3b9aca00

00022ae4 <http_parser_execute>:
}

size_t http_parser_execute(struct http_parser *parser,
			   const struct http_parser_settings *settings,
			   const char *data, size_t len)
{
   22ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ae8:	b091      	sub	sp, #68	; 0x44
   22aea:	9305      	str	r3, [sp, #20]
	const unsigned int lenient = parser->lenient_http_headers;
   22aec:	78c3      	ldrb	r3, [r0, #3]
{
   22aee:	4617      	mov	r7, r2
	const unsigned int lenient = parser->lenient_http_headers;
   22af0:	09db      	lsrs	r3, r3, #7
   22af2:	9306      	str	r3, [sp, #24]
	enum state p_state = (enum state) parser->state;
   22af4:	6803      	ldr	r3, [r0, #0]
{
   22af6:	4604      	mov	r4, r0
	enum state p_state = (enum state) parser->state;
   22af8:	f3c3 2286 	ubfx	r2, r3, #10, #7
   22afc:	4613      	mov	r3, r2
   22afe:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
	const char *header_field_mark = 0;
   22b02:	2200      	movs	r2, #0
	const char *header_value_mark = 0;
   22b04:	e9cd 220a 	strd	r2, r2, [sp, #40]	; 0x28
	const char *body_mark = 0;
   22b08:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
	const char *status_mark = 0;
   22b0c:	920e      	str	r2, [sp, #56]	; 0x38
	*parsed = 0;
   22b0e:	9209      	str	r2, [sp, #36]	; 0x24
	if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   22b10:	7dc2      	ldrb	r2, [r0, #23]
{
   22b12:	4689      	mov	r9, r1
	if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   22b14:	0655      	lsls	r5, r2, #25
   22b16:	d10a      	bne.n	22b2e <http_parser_execute+0x4a>
	if (len == 0) {
   22b18:	9a05      	ldr	r2, [sp, #20]
   22b1a:	b9fa      	cbnz	r2, 22b5c <http_parser_execute+0x78>
		switch (CURRENT_STATE()) {
   22b1c:	2b12      	cmp	r3, #18
   22b1e:	d80a      	bhi.n	22b36 <http_parser_execute+0x52>
   22b20:	b1b3      	cbz	r3, 22b50 <http_parser_execute+0x6c>
   22b22:	2201      	movs	r2, #1
   22b24:	fa02 f303 	lsl.w	r3, r2, r3
   22b28:	4a90      	ldr	r2, [pc, #576]	; (22d6c <http_parser_execute+0x288>)
   22b2a:	401a      	ands	r2, r3
   22b2c:	b182      	cbz	r2, 22b50 <http_parser_execute+0x6c>
	size_t parsed;

	parser_execute(parser, settings, data, len, &parsed);
	return parsed;
   22b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
}
   22b30:	b011      	add	sp, #68	; 0x44
   22b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (CURRENT_STATE()) {
   22b36:	2b3d      	cmp	r3, #61	; 0x3d
   22b38:	d10a      	bne.n	22b50 <http_parser_execute+0x6c>
			cb_notify(parser, &p_state,
   22b3a:	9b05      	ldr	r3, [sp, #20]
   22b3c:	9301      	str	r3, [sp, #4]
   22b3e:	ab09      	add	r3, sp, #36	; 0x24
   22b40:	9300      	str	r3, [sp, #0]
   22b42:	69ca      	ldr	r2, [r1, #28]
   22b44:	2307      	movs	r3, #7
   22b46:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   22b4a:	f00e f938 	bl	30dbe <cb_notify>
			return 0;
   22b4e:	e7ee      	b.n	22b2e <http_parser_execute+0x4a>
			SET_ERRNO(HPE_INVALID_EOF_STATE);
   22b50:	220b      	movs	r2, #11
   22b52:	7de3      	ldrb	r3, [r4, #23]
   22b54:	f362 0306 	bfi	r3, r2, #0, #7
   22b58:	75e3      	strb	r3, [r4, #23]
			return 1;
   22b5a:	e7e8      	b.n	22b2e <http_parser_execute+0x4a>
	if (CURRENT_STATE() == s_header_field) {
   22b5c:	2b2b      	cmp	r3, #43	; 0x2b
   22b5e:	d102      	bne.n	22b66 <http_parser_execute+0x82>
		header_field_mark = data;
   22b60:	970a      	str	r7, [sp, #40]	; 0x28
	switch (CURRENT_STATE()) {
   22b62:	463e      	mov	r6, r7
   22b64:	e116      	b.n	22d94 <http_parser_execute+0x2b0>
	if (CURRENT_STATE() == s_header_value) {
   22b66:	2b30      	cmp	r3, #48	; 0x30
   22b68:	d008      	beq.n	22b7c <http_parser_execute+0x98>
	switch (CURRENT_STATE()) {
   22b6a:	2b10      	cmp	r3, #16
   22b6c:	d008      	beq.n	22b80 <http_parser_execute+0x9c>
   22b6e:	336b      	adds	r3, #107	; 0x6b
   22b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22b74:	2b0a      	cmp	r3, #10
   22b76:	d8f4      	bhi.n	22b62 <http_parser_execute+0x7e>
		url_mark = data;
   22b78:	970c      	str	r7, [sp, #48]	; 0x30
		break;
   22b7a:	e7f2      	b.n	22b62 <http_parser_execute+0x7e>
		header_value_mark = data;
   22b7c:	970b      	str	r7, [sp, #44]	; 0x2c
	switch (CURRENT_STATE()) {
   22b7e:	e7f0      	b.n	22b62 <http_parser_execute+0x7e>
		status_mark = data;
   22b80:	970e      	str	r7, [sp, #56]	; 0x38
		break;
   22b82:	e7ee      	b.n	22b62 <http_parser_execute+0x7e>
		if (PARSING_HEADER(CURRENT_STATE())) {
   22b84:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
		ch = *p;
   22b88:	7835      	ldrb	r5, [r6, #0]
		if (PARSING_HEADER(CURRENT_STATE())) {
   22b8a:	2b38      	cmp	r3, #56	; 0x38
   22b8c:	d85b      	bhi.n	22c46 <http_parser_execute+0x162>
	parser->nread += bytes;
   22b8e:	6863      	ldr	r3, [r4, #4]
   22b90:	3301      	adds	r3, #1
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   22b92:	f5b3 3fa0 	cmp.w	r3, #81920	; 0x14000
	parser->nread += bytes;
   22b96:	6063      	str	r3, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   22b98:	d955      	bls.n	22c46 <http_parser_execute+0x162>
		parser->http_errno = HPE_HEADER_OVERFLOW;
   22b9a:	220c      	movs	r2, #12
   22b9c:	7de3      	ldrb	r3, [r4, #23]
			SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
   22b9e:	f362 0306 	bfi	r3, r2, #0, #7
   22ba2:	75e3      	strb	r3, [r4, #23]
			goto error;
   22ba4:	e022      	b.n	22bec <http_parser_execute+0x108>
   22ba6:	4630      	mov	r0, r6
			parser->header_state = h_upgrade;
   22ba8:	f04f 0c0c 	mov.w	ip, #12
			parser->header_state = h_transfer_encoding;
   22bac:	f04f 0e0b 	mov.w	lr, #11
		if (cond1 || c != CONTENT_LENGTH[parser->index]) {
   22bb0:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 22d74 <http_parser_execute+0x290>
			for (; p != data + len; p++) {
   22bb4:	4583      	cmp	fp, r0
   22bb6:	4680      	mov	r8, r0
   22bb8:	d009      	beq.n	22bce <http_parser_execute+0xea>
				ch = *p;
   22bba:	f810 5b01 	ldrb.w	r5, [r0], #1
				c = TOKEN(ch);
   22bbe:	2d20      	cmp	r5, #32
   22bc0:	f000 8412 	beq.w	233e8 <http_parser_execute+0x904>
   22bc4:	4b6a      	ldr	r3, [pc, #424]	; (22d70 <http_parser_execute+0x28c>)
   22bc6:	5d5b      	ldrb	r3, [r3, r5]
				if (!c) {
   22bc8:	2b00      	cmp	r3, #0
   22bca:	f040 840e 	bne.w	233ea <http_parser_execute+0x906>
	parser->nread += bytes;
   22bce:	6863      	ldr	r3, [r4, #4]
			rc = count_header_size(parser, p - start);
   22bd0:	eba8 0606 	sub.w	r6, r8, r6
	parser->nread += bytes;
   22bd4:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   22bd6:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   22bda:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   22bdc:	f240 84c3 	bls.w	23566 <http_parser_execute+0xa82>
		parser->http_errno = HPE_HEADER_OVERFLOW;
   22be0:	220c      	movs	r2, #12
   22be2:	7de3      	ldrb	r3, [r4, #23]
			goto error;
   22be4:	4646      	mov	r6, r8
			SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   22be6:	f362 0306 	bfi	r3, r2, #0, #7
   22bea:	75e3      	strb	r3, [r4, #23]
	if (HTTP_PARSER_ERRNO(parser) == HPE_OK) {
   22bec:	7de3      	ldrb	r3, [r4, #23]
   22bee:	065a      	lsls	r2, r3, #25
   22bf0:	f040 8768 	bne.w	23ac4 <http_parser_execute+0xfe0>
		SET_ERRNO(HPE_UNKNOWN);
   22bf4:	2220      	movs	r2, #32
   22bf6:	f000 bf86 	b.w	23b06 <http_parser_execute+0x1022>
			if (LIKELY(ch == CR || ch == LF)) {
   22bfa:	2d0d      	cmp	r5, #13
   22bfc:	f000 80c9 	beq.w	22d92 <http_parser_execute+0x2ae>
   22c00:	2d0a      	cmp	r5, #10
   22c02:	f000 80c6 	beq.w	22d92 <http_parser_execute+0x2ae>
			SET_ERRNO(HPE_CLOSED_CONNECTION);
   22c06:	220d      	movs	r2, #13
   22c08:	7de3      	ldrb	r3, [r4, #23]
   22c0a:	e7c8      	b.n	22b9e <http_parser_execute+0xba>
			if (ch == CR || ch == LF) {
   22c0c:	2d0d      	cmp	r5, #13
   22c0e:	f000 80c0 	beq.w	22d92 <http_parser_execute+0x2ae>
   22c12:	2d0a      	cmp	r5, #10
   22c14:	f000 80bd 	beq.w	22d92 <http_parser_execute+0x2ae>
			parser->flags = 0U;
   22c18:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   22c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			parser->flags = 0U;
   22c1e:	f36f 0389 	bfc	r3, #2, #8
   22c22:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   22c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
			if (ch == 'H') {
   22c28:	2d48      	cmp	r5, #72	; 0x48
			parser->content_length = ULLONG_MAX;
   22c2a:	e9c4 2302 	strd	r2, r3, [r4, #8]
			if (ch == 'H') {
   22c2e:	d103      	bne.n	22c38 <http_parser_execute+0x154>
				UPDATE_STATE(s_res_or_resp_H);
   22c30:	2303      	movs	r3, #3
			UPDATE_STATE(s_req_method);
   22c32:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   22c36:	e129      	b.n	22e8c <http_parser_execute+0x3a8>
				parser->type = HTTP_REQUEST;
   22c38:	7823      	ldrb	r3, [r4, #0]
   22c3a:	f36f 0301 	bfc	r3, #0, #2
   22c3e:	7023      	strb	r3, [r4, #0]
				UPDATE_STATE(s_start_req);
   22c40:	2312      	movs	r3, #18
				UPDATE_STATE(s_headers_almost_done);
   22c42:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		switch (CURRENT_STATE()) {
   22c46:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   22c4a:	1e43      	subs	r3, r0, #1
   22c4c:	2b3d      	cmp	r3, #61	; 0x3d
   22c4e:	f201 80d4 	bhi.w	23dfa <http_parser_execute+0x1316>
   22c52:	a201      	add	r2, pc, #4	; (adr r2, 22c58 <http_parser_execute+0x174>)
   22c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22c58:	00022bfb 	.word	0x00022bfb
   22c5c:	00022c0d 	.word	0x00022c0d
   22c60:	00022d51 	.word	0x00022d51
   22c64:	00022e6b 	.word	0x00022e6b
   22c68:	00022d5f 	.word	0x00022d5f
   22c6c:	00022ead 	.word	0x00022ead
   22c70:	00022eb1 	.word	0x00022eb1
   22c74:	00022eb5 	.word	0x00022eb5
   22c78:	00022eb9 	.word	0x00022eb9
   22c7c:	00022ecd 	.word	0x00022ecd
   22c80:	00022ed7 	.word	0x00022ed7
   22c84:	00022ee5 	.word	0x00022ee5
   22c88:	00022eef 	.word	0x00022eef
   22c8c:	00022f0b 	.word	0x00022f0b
   22c90:	00022f75 	.word	0x00022f75
   22c94:	00022fcf 	.word	0x00022fcf
   22c98:	00022f53 	.word	0x00022f53
   22c9c:	0002300f 	.word	0x0002300f
   22ca0:	000230e5 	.word	0x000230e5
   22ca4:	0002324b 	.word	0x0002324b
   22ca8:	00023279 	.word	0x00023279
   22cac:	00023279 	.word	0x00023279
   22cb0:	00023279 	.word	0x00023279
   22cb4:	00023279 	.word	0x00023279
   22cb8:	00023295 	.word	0x00023295
   22cbc:	00023295 	.word	0x00023295
   22cc0:	00023295 	.word	0x00023295
   22cc4:	00023295 	.word	0x00023295
   22cc8:	00023295 	.word	0x00023295
   22ccc:	00023295 	.word	0x00023295
   22cd0:	00023295 	.word	0x00023295
   22cd4:	000232dd 	.word	0x000232dd
   22cd8:	000232ed 	.word	0x000232ed
   22cdc:	000232f1 	.word	0x000232f1
   22ce0:	000232f5 	.word	0x000232f5
   22ce4:	000232f9 	.word	0x000232f9
   22ce8:	000232fd 	.word	0x000232fd
   22cec:	0002330f 	.word	0x0002330f
   22cf0:	0002333b 	.word	0x0002333b
   22cf4:	0002334b 	.word	0x0002334b
   22cf8:	00023375 	.word	0x00023375
   22cfc:	00023381 	.word	0x00023381
   22d00:	00022ba7 	.word	0x00022ba7
   22d04:	000235b7 	.word	0x000235b7
   22d08:	000235d1 	.word	0x000235d1
   22d0c:	000239db 	.word	0x000239db
   22d10:	000235d7 	.word	0x000235d7
   22d14:	00023683 	.word	0x00023683
   22d18:	00023995 	.word	0x00023995
   22d1c:	00023989 	.word	0x00023989
   22d20:	00023ce1 	.word	0x00023ce1
   22d24:	00023cfd 	.word	0x00023cfd
   22d28:	00023d43 	.word	0x00023d43
   22d2c:	00023d4b 	.word	0x00023d4b
   22d30:	00023a4b 	.word	0x00023a4b
   22d34:	00023b0f 	.word	0x00023b0f
   22d38:	00023d7d 	.word	0x00023d7d
   22d3c:	00023db5 	.word	0x00023db5
   22d40:	00023ddd 	.word	0x00023ddd
   22d44:	00023c2b 	.word	0x00023c2b
   22d48:	00023c85 	.word	0x00023c85
   22d4c:	00023c95 	.word	0x00023c95
			if (ch == 'T') {
   22d50:	2d54      	cmp	r5, #84	; 0x54
   22d52:	d106      	bne.n	22d62 <http_parser_execute+0x27e>
				parser->type = HTTP_RESPONSE;
   22d54:	2201      	movs	r2, #1
   22d56:	7823      	ldrb	r3, [r4, #0]
   22d58:	f362 0301 	bfi	r3, r2, #0, #2
   22d5c:	7023      	strb	r3, [r4, #0]
			UPDATE_STATE(s_res_HT);
   22d5e:	2306      	movs	r3, #6
   22d60:	e015      	b.n	22d8e <http_parser_execute+0x2aa>
				if (UNLIKELY(ch != 'E')) {
   22d62:	2d45      	cmp	r5, #69	; 0x45
   22d64:	d008      	beq.n	22d78 <http_parser_execute+0x294>
				SET_ERRNO(HPE_INVALID_CONSTANT);
   22d66:	221c      	movs	r2, #28
   22d68:	7de3      	ldrb	r3, [r4, #23]
   22d6a:	e718      	b.n	22b9e <http_parser_execute+0xba>
   22d6c:	00040016 	.word	0x00040016
   22d70:	000386ec 	.word	0x000386ec
   22d74:	00037fa3 	.word	0x00037fa3
				parser->method = HTTP_HEAD;
   22d78:	2302      	movs	r3, #2
   22d7a:	75a3      	strb	r3, [r4, #22]
				parser->type = HTTP_REQUEST;
   22d7c:	6823      	ldr	r3, [r4, #0]
   22d7e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
   22d82:	f023 0303 	bic.w	r3, r3, #3
   22d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   22d8a:	6023      	str	r3, [r4, #0]
				UPDATE_STATE(s_req_method);
   22d8c:	2313      	movs	r3, #19
   22d8e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	for (p = data; p != data + len; p++) {
   22d92:	3601      	adds	r6, #1
   22d94:	9b05      	ldr	r3, [sp, #20]
   22d96:	eb07 0b03 	add.w	fp, r7, r3
   22d9a:	45b3      	cmp	fp, r6
   22d9c:	f47f aef2 	bne.w	22b84 <http_parser_execute+0xa0>
		     p - header_field_mark);
   22da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		     &p_state, parsed, p - data, &header_field_mark,
   22da2:	1bf7      	subs	r7, r6, r7
		     p - header_field_mark);
   22da4:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_header_field, HPE_CB_header_field,
   22da6:	9303      	str	r3, [sp, #12]
   22da8:	ad09      	add	r5, sp, #36	; 0x24
   22daa:	ab0a      	add	r3, sp, #40	; 0x28
   22dac:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22db0:	2203      	movs	r2, #3
   22db2:	4620      	mov	r0, r4
   22db4:	f8d9 100c 	ldr.w	r1, [r9, #12]
   22db8:	9500      	str	r5, [sp, #0]
   22dba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   22dbe:	f00e f81f 	bl	30e00 <cb_data>
	if (rc != 0) {
   22dc2:	2800      	cmp	r0, #0
   22dc4:	f47f aeb3 	bne.w	22b2e <http_parser_execute+0x4a>
		     p - header_value_mark);
   22dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	rc = cb_data(parser, settings->on_header_value, HPE_CB_header_value,
   22dca:	2204      	movs	r2, #4
		     p - header_value_mark);
   22dcc:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_header_value, HPE_CB_header_value,
   22dce:	9303      	str	r3, [sp, #12]
   22dd0:	ab0b      	add	r3, sp, #44	; 0x2c
   22dd2:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22dd6:	4620      	mov	r0, r4
   22dd8:	f8d9 1010 	ldr.w	r1, [r9, #16]
   22ddc:	9500      	str	r5, [sp, #0]
   22dde:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   22de2:	f00e f80d 	bl	30e00 <cb_data>
	if (rc != 0) {
   22de6:	2800      	cmp	r0, #0
   22de8:	f47f aea1 	bne.w	22b2e <http_parser_execute+0x4a>
		     p - data, &url_mark, p - url_mark);
   22dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	rc = cb_data(parser, settings->on_url, HPE_CB_url, &p_state, parsed,
   22dee:	2202      	movs	r2, #2
		     p - data, &url_mark, p - url_mark);
   22df0:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_url, HPE_CB_url, &p_state, parsed,
   22df2:	9303      	str	r3, [sp, #12]
   22df4:	ab0c      	add	r3, sp, #48	; 0x30
   22df6:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22dfa:	4620      	mov	r0, r4
   22dfc:	f8d9 1004 	ldr.w	r1, [r9, #4]
   22e00:	9500      	str	r5, [sp, #0]
   22e02:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   22e06:	f00d fffb 	bl	30e00 <cb_data>
	if (rc != 0) {
   22e0a:	2800      	cmp	r0, #0
   22e0c:	f47f ae8f 	bne.w	22b2e <http_parser_execute+0x4a>
		     p - data, &body_mark, p - body_mark);
   22e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	rc = cb_data(parser, settings->on_body, HPE_CB_body, &p_state, parsed,
   22e12:	2206      	movs	r2, #6
		     p - data, &body_mark, p - body_mark);
   22e14:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_body, HPE_CB_body, &p_state, parsed,
   22e16:	9303      	str	r3, [sp, #12]
   22e18:	ab0d      	add	r3, sp, #52	; 0x34
   22e1a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22e1e:	4620      	mov	r0, r4
   22e20:	f8d9 1018 	ldr.w	r1, [r9, #24]
   22e24:	9500      	str	r5, [sp, #0]
   22e26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   22e2a:	f00d ffe9 	bl	30e00 <cb_data>
	if (rc != 0) {
   22e2e:	2800      	cmp	r0, #0
   22e30:	f47f ae7d 	bne.w	22b2e <http_parser_execute+0x4a>
		     parsed, p - data, &status_mark, p - status_mark);
   22e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	rc = cb_data(parser, settings->on_status, HPE_CB_status, &p_state,
   22e36:	2208      	movs	r2, #8
		     parsed, p - data, &status_mark, p - status_mark);
   22e38:	1af3      	subs	r3, r6, r3
	rc = cb_data(parser, settings->on_status, HPE_CB_status, &p_state,
   22e3a:	9303      	str	r3, [sp, #12]
   22e3c:	ab0e      	add	r3, sp, #56	; 0x38
   22e3e:	e9cd 7301 	strd	r7, r3, [sp, #4]
   22e42:	4620      	mov	r0, r4
   22e44:	f8d9 1008 	ldr.w	r1, [r9, #8]
   22e48:	9500      	str	r5, [sp, #0]
   22e4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   22e4e:	f00d ffd7 	bl	30e00 <cb_data>
	if (rc != 0) {
   22e52:	2800      	cmp	r0, #0
   22e54:	f47f ae6b 	bne.w	22b2e <http_parser_execute+0x4a>
	parser->state = CURRENT_STATE();
   22e58:	6823      	ldr	r3, [r4, #0]
   22e5a:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   22e5e:	f362 2390 	bfi	r3, r2, #10, #7
   22e62:	6023      	str	r3, [r4, #0]
	*parsed = len;
   22e64:	9b05      	ldr	r3, [sp, #20]
   22e66:	9309      	str	r3, [sp, #36]	; 0x24
	return 0;
   22e68:	e661      	b.n	22b2e <http_parser_execute+0x4a>
			parser->flags = 0U;
   22e6a:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   22e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			parser->flags = 0U;
   22e70:	f36f 0389 	bfc	r3, #2, #8
   22e74:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   22e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22e7a:	2d0d      	cmp	r5, #13
   22e7c:	e9c4 2302 	strd	r2, r3, [r4, #8]
			switch (ch) {
   22e80:	d004      	beq.n	22e8c <http_parser_execute+0x3a8>
   22e82:	2d48      	cmp	r5, #72	; 0x48
   22e84:	d010      	beq.n	22ea8 <http_parser_execute+0x3c4>
   22e86:	2d0a      	cmp	r5, #10
   22e88:	f47f af6d 	bne.w	22d66 <http_parser_execute+0x282>
				       p - data + 1);
   22e8c:	1bf3      	subs	r3, r6, r7
   22e8e:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   22e90:	9301      	str	r3, [sp, #4]
   22e92:	ab09      	add	r3, sp, #36	; 0x24
   22e94:	9300      	str	r3, [sp, #0]
   22e96:	2301      	movs	r3, #1
   22e98:	f8d9 2000 	ldr.w	r2, [r9]
			rc = cb_notify(parser, &p_state,
   22e9c:	4620      	mov	r0, r4
   22e9e:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   22ea2:	f00d ff8c 	bl	30dbe <cb_notify>
   22ea6:	e0a9      	b.n	22ffc <http_parser_execute+0x518>
				UPDATE_STATE(s_res_H);
   22ea8:	2305      	movs	r3, #5
   22eaa:	e6c2      	b.n	22c32 <http_parser_execute+0x14e>
			UPDATE_STATE(s_res_HTT);
   22eac:	2307      	movs	r3, #7
   22eae:	e76e      	b.n	22d8e <http_parser_execute+0x2aa>
			UPDATE_STATE(s_res_HTTP);
   22eb0:	2308      	movs	r3, #8
   22eb2:	e76c      	b.n	22d8e <http_parser_execute+0x2aa>
			UPDATE_STATE(s_res_first_http_major);
   22eb4:	2309      	movs	r3, #9
   22eb6:	e76a      	b.n	22d8e <http_parser_execute+0x2aa>
			if (UNLIKELY(ch < '0' || ch > '9')) {
   22eb8:	3d30      	subs	r5, #48	; 0x30
   22eba:	b2eb      	uxtb	r3, r5
   22ebc:	2b09      	cmp	r3, #9
   22ebe:	d902      	bls.n	22ec6 <http_parser_execute+0x3e2>
				SET_ERRNO(HPE_INVALID_VERSION);
   22ec0:	220e      	movs	r2, #14
   22ec2:	7de3      	ldrb	r3, [r4, #23]
   22ec4:	e66b      	b.n	22b9e <http_parser_execute+0xba>
			UPDATE_STATE(s_res_http_major);
   22ec6:	230a      	movs	r3, #10
			parser->http_major = ch - '0';
   22ec8:	8225      	strh	r5, [r4, #16]
			UPDATE_STATE(s_res_http_major);
   22eca:	e760      	b.n	22d8e <http_parser_execute+0x2aa>
			if (ch == '.') {
   22ecc:	2d2e      	cmp	r5, #46	; 0x2e
   22ece:	f040 8222 	bne.w	23316 <http_parser_execute+0x832>
				UPDATE_STATE(s_res_first_http_minor);
   22ed2:	230b      	movs	r3, #11
   22ed4:	e75b      	b.n	22d8e <http_parser_execute+0x2aa>
			if (UNLIKELY(!IS_NUM(ch))) {
   22ed6:	3d30      	subs	r5, #48	; 0x30
   22ed8:	b2eb      	uxtb	r3, r5
   22eda:	2b09      	cmp	r3, #9
   22edc:	d8f0      	bhi.n	22ec0 <http_parser_execute+0x3dc>
			UPDATE_STATE(s_res_http_minor);
   22ede:	230c      	movs	r3, #12
			parser->http_minor = ch - '0';
   22ee0:	8265      	strh	r5, [r4, #18]
			UPDATE_STATE(s_res_http_minor);
   22ee2:	e754      	b.n	22d8e <http_parser_execute+0x2aa>
			if (ch == ' ') {
   22ee4:	2d20      	cmp	r5, #32
   22ee6:	f040 8237 	bne.w	23358 <http_parser_execute+0x874>
				UPDATE_STATE(s_res_first_status_code);
   22eea:	230d      	movs	r3, #13
   22eec:	e74f      	b.n	22d8e <http_parser_execute+0x2aa>
			if (!IS_NUM(ch)) {
   22eee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   22ef2:	b2da      	uxtb	r2, r3
   22ef4:	2a09      	cmp	r2, #9
   22ef6:	d905      	bls.n	22f04 <http_parser_execute+0x420>
				if (ch == ' ') {
   22ef8:	2d20      	cmp	r5, #32
   22efa:	f43f af4a 	beq.w	22d92 <http_parser_execute+0x2ae>
				SET_ERRNO(HPE_INVALID_STATUS);
   22efe:	220f      	movs	r2, #15
   22f00:	7de3      	ldrb	r3, [r4, #23]
   22f02:	e64c      	b.n	22b9e <http_parser_execute+0xba>
			parser->status_code = ch - '0';
   22f04:	82a3      	strh	r3, [r4, #20]
			UPDATE_STATE(s_res_status_code);
   22f06:	230e      	movs	r3, #14
   22f08:	e741      	b.n	22d8e <http_parser_execute+0x2aa>
			if (!IS_NUM(ch)) {
   22f0a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   22f0e:	2b09      	cmp	r3, #9
   22f10:	d923      	bls.n	22f5a <http_parser_execute+0x476>
				if ((ch == CR) || (ch == LF)) {
   22f12:	2d0d      	cmp	r5, #13
   22f14:	d001      	beq.n	22f1a <http_parser_execute+0x436>
   22f16:	2d0a      	cmp	r5, #10
   22f18:	d117      	bne.n	22f4a <http_parser_execute+0x466>
					const char *no_status_txt = "";
   22f1a:	4bac      	ldr	r3, [pc, #688]	; (231cc <http_parser_execute+0x6e8>)
					rc = cb_data(parser,
   22f1c:	2208      	movs	r2, #8
					const char *no_status_txt = "";
   22f1e:	930f      	str	r3, [sp, #60]	; 0x3c
					rc = cb_data(parser,
   22f20:	2300      	movs	r3, #0
   22f22:	9303      	str	r3, [sp, #12]
   22f24:	ab0f      	add	r3, sp, #60	; 0x3c
   22f26:	9302      	str	r3, [sp, #8]
					     p - data + 1, &no_status_txt, 0);
   22f28:	1bf3      	subs	r3, r6, r7
   22f2a:	3301      	adds	r3, #1
					rc = cb_data(parser,
   22f2c:	9301      	str	r3, [sp, #4]
   22f2e:	ab09      	add	r3, sp, #36	; 0x24
   22f30:	9300      	str	r3, [sp, #0]
   22f32:	4620      	mov	r0, r4
   22f34:	f8d9 1008 	ldr.w	r1, [r9, #8]
   22f38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   22f3c:	f00d ff60 	bl	30e00 <cb_data>
					if (rc != 0) {
   22f40:	2800      	cmp	r0, #0
   22f42:	f47f adf4 	bne.w	22b2e <http_parser_execute+0x4a>
				switch (ch) {
   22f46:	2d0d      	cmp	r5, #13
   22f48:	d032      	beq.n	22fb0 <http_parser_execute+0x4cc>
   22f4a:	2d20      	cmp	r5, #32
   22f4c:	d003      	beq.n	22f56 <http_parser_execute+0x472>
   22f4e:	2d0a      	cmp	r5, #10
   22f50:	d1d5      	bne.n	22efe <http_parser_execute+0x41a>
			UPDATE_STATE(s_header_field_start);
   22f52:	232a      	movs	r3, #42	; 0x2a
   22f54:	e71b      	b.n	22d8e <http_parser_execute+0x2aa>
					UPDATE_STATE(s_res_status_start);
   22f56:	230f      	movs	r3, #15
   22f58:	e719      	b.n	22d8e <http_parser_execute+0x2aa>
			parser->status_code *= 10U;
   22f5a:	8aa3      	ldrh	r3, [r4, #20]
   22f5c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->status_code += ch - '0';
   22f60:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   22f64:	3d30      	subs	r5, #48	; 0x30
   22f66:	b2ad      	uxth	r5, r5
			if (UNLIKELY(parser->status_code > 999)) {
   22f68:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
			parser->status_code += ch - '0';
   22f6c:	82a5      	strh	r5, [r4, #20]
			if (UNLIKELY(parser->status_code > 999)) {
   22f6e:	f4ff af10 	bcc.w	22d92 <http_parser_execute+0x2ae>
   22f72:	e7c4      	b.n	22efe <http_parser_execute+0x41a>
			if (!status_mark && ((ch == CR) || (ch == LF))) {
   22f74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22f76:	b9cb      	cbnz	r3, 22fac <http_parser_execute+0x4c8>
   22f78:	2d0d      	cmp	r5, #13
   22f7a:	d001      	beq.n	22f80 <http_parser_execute+0x49c>
   22f7c:	2d0a      	cmp	r5, #10
   22f7e:	d11d      	bne.n	22fbc <http_parser_execute+0x4d8>
				const char *no_status_txt = "";
   22f80:	4b92      	ldr	r3, [pc, #584]	; (231cc <http_parser_execute+0x6e8>)
				rc = cb_data(parser,
   22f82:	2208      	movs	r2, #8
				const char *no_status_txt = "";
   22f84:	930f      	str	r3, [sp, #60]	; 0x3c
				rc = cb_data(parser,
   22f86:	2300      	movs	r3, #0
   22f88:	9303      	str	r3, [sp, #12]
   22f8a:	ab0f      	add	r3, sp, #60	; 0x3c
   22f8c:	9302      	str	r3, [sp, #8]
					p - data + 1, &no_status_txt, 0);
   22f8e:	1bf3      	subs	r3, r6, r7
   22f90:	3301      	adds	r3, #1
				rc = cb_data(parser,
   22f92:	9301      	str	r3, [sp, #4]
   22f94:	ab09      	add	r3, sp, #36	; 0x24
   22f96:	9300      	str	r3, [sp, #0]
   22f98:	4620      	mov	r0, r4
   22f9a:	f8d9 1008 	ldr.w	r1, [r9, #8]
   22f9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   22fa2:	f00d ff2d 	bl	30e00 <cb_data>
				if (rc != 0) {
   22fa6:	2800      	cmp	r0, #0
   22fa8:	f47f adc1 	bne.w	22b2e <http_parser_execute+0x4a>
			if (ch == CR) {
   22fac:	2d0d      	cmp	r5, #13
   22fae:	d101      	bne.n	22fb4 <http_parser_execute+0x4d0>
				UPDATE_STATE(s_res_line_almost_done);
   22fb0:	2311      	movs	r3, #17
   22fb2:	e6ec      	b.n	22d8e <http_parser_execute+0x2aa>
			if (ch == LF) {
   22fb4:	2d0a      	cmp	r5, #10
   22fb6:	d0cc      	beq.n	22f52 <http_parser_execute+0x46e>
			MARK(status);
   22fb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22fba:	b903      	cbnz	r3, 22fbe <http_parser_execute+0x4da>
   22fbc:	960e      	str	r6, [sp, #56]	; 0x38
			UPDATE_STATE(s_res_status);
   22fbe:	2310      	movs	r3, #16
   22fc0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			parser->index = 0U;
   22fc4:	78e3      	ldrb	r3, [r4, #3]
   22fc6:	f36f 0306 	bfc	r3, #0, #7
			++parser->index;
   22fca:	70e3      	strb	r3, [r4, #3]
			break;
   22fcc:	e6e1      	b.n	22d92 <http_parser_execute+0x2ae>
			if (ch == CR) {
   22fce:	2d0d      	cmp	r5, #13
   22fd0:	d118      	bne.n	23004 <http_parser_execute+0x520>
				UPDATE_STATE(s_res_line_almost_done);
   22fd2:	2311      	movs	r3, #17
				rc = cb_data(parser, settings->on_status,
   22fd4:	2208      	movs	r2, #8
				UPDATE_STATE(s_header_field_start);
   22fd6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					     p - status_mark);
   22fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
				rc = cb_data(parser, settings->on_status,
   22fdc:	f8d9 1008 	ldr.w	r1, [r9, #8]
					     p - status_mark);
   22fe0:	1af3      	subs	r3, r6, r3
				rc = cb_data(parser, settings->on_status,
   22fe2:	9303      	str	r3, [sp, #12]
   22fe4:	ab0e      	add	r3, sp, #56	; 0x38
   22fe6:	9302      	str	r3, [sp, #8]
					     p - data + 1, &status_mark,
   22fe8:	1bf3      	subs	r3, r6, r7
   22fea:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_status,
   22fec:	9301      	str	r3, [sp, #4]
   22fee:	ab09      	add	r3, sp, #36	; 0x24
   22ff0:	9300      	str	r3, [sp, #0]
   22ff2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   22ff6:	4620      	mov	r0, r4
   22ff8:	f00d ff02 	bl	30e00 <cb_data>
			if (rc != 0) {
   22ffc:	2800      	cmp	r0, #0
   22ffe:	f43f aec8 	beq.w	22d92 <http_parser_execute+0x2ae>
   23002:	e594      	b.n	22b2e <http_parser_execute+0x4a>
			if (ch == LF) {
   23004:	2d0a      	cmp	r5, #10
   23006:	f47f aec4 	bne.w	22d92 <http_parser_execute+0x2ae>
				UPDATE_STATE(s_header_field_start);
   2300a:	232a      	movs	r3, #42	; 0x2a
   2300c:	e7e2      	b.n	22fd4 <http_parser_execute+0x4f0>
			if (ch == CR || ch == LF) {
   2300e:	2d0d      	cmp	r5, #13
   23010:	f43f aebf 	beq.w	22d92 <http_parser_execute+0x2ae>
   23014:	2d0a      	cmp	r5, #10
   23016:	f43f aebc 	beq.w	22d92 <http_parser_execute+0x2ae>
			parser->flags = 0U;
   2301a:	8823      	ldrh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   2301c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			parser->flags = 0U;
   23020:	f36f 0389 	bfc	r3, #2, #8
   23024:	8023      	strh	r3, [r4, #0]
			parser->content_length = ULLONG_MAX;
   23026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2302a:	e9c4 2302 	strd	r2, r3, [r4, #8]
			if (UNLIKELY(!IS_ALPHA(ch))) {
   2302e:	f045 0320 	orr.w	r3, r5, #32
   23032:	3b61      	subs	r3, #97	; 0x61
   23034:	2b19      	cmp	r3, #25
   23036:	d902      	bls.n	2303e <http_parser_execute+0x55a>
				SET_ERRNO(HPE_INVALID_METHOD);
   23038:	2210      	movs	r2, #16
   2303a:	7de3      	ldrb	r3, [r4, #23]
   2303c:	e5af      	b.n	22b9e <http_parser_execute+0xba>
			parser->method = (enum http_method) 0;
   2303e:	2300      	movs	r3, #0
   23040:	75a3      	strb	r3, [r4, #22]
			parser->index = 1U;
   23042:	2301      	movs	r3, #1
   23044:	78e2      	ldrb	r2, [r4, #3]
   23046:	3d41      	subs	r5, #65	; 0x41
   23048:	f363 0206 	bfi	r2, r3, #0, #7
   2304c:	70e2      	strb	r2, [r4, #3]
			switch (ch) {
   2304e:	2d14      	cmp	r5, #20
   23050:	d8f2      	bhi.n	23038 <http_parser_execute+0x554>
   23052:	a201      	add	r2, pc, #4	; (adr r2, 23058 <http_parser_execute+0x574>)
   23054:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
   23058:	000230ad 	.word	0x000230ad
   2305c:	000230b5 	.word	0x000230b5
   23060:	000230b9 	.word	0x000230b9
   23064:	000230b1 	.word	0x000230b1
   23068:	00023039 	.word	0x00023039
   2306c:	00023039 	.word	0x00023039
   23070:	000230af 	.word	0x000230af
   23074:	000230bd 	.word	0x000230bd
   23078:	00023039 	.word	0x00023039
   2307c:	00023039 	.word	0x00023039
   23080:	00023039 	.word	0x00023039
   23084:	000230c1 	.word	0x000230c1
   23088:	000230c5 	.word	0x000230c5
   2308c:	000230c9 	.word	0x000230c9
   23090:	000230cd 	.word	0x000230cd
   23094:	000230d1 	.word	0x000230d1
   23098:	00023039 	.word	0x00023039
   2309c:	000230d5 	.word	0x000230d5
   230a0:	000230d9 	.word	0x000230d9
   230a4:	000230dd 	.word	0x000230dd
   230a8:	000230e1 	.word	0x000230e1
				parser->method = HTTP_ACL;
   230ac:	2313      	movs	r3, #19
				parser->method = HTTP_UNLOCK;
   230ae:	75a3      	strb	r3, [r4, #22]
			UPDATE_STATE(s_req_method);
   230b0:	2313      	movs	r3, #19
   230b2:	e5be      	b.n	22c32 <http_parser_execute+0x14e>
				parser->method = HTTP_BIND;
   230b4:	2310      	movs	r3, #16
   230b6:	e7fa      	b.n	230ae <http_parser_execute+0x5ca>
				parser->method = HTTP_CONNECT;
   230b8:	2305      	movs	r3, #5
   230ba:	e7f8      	b.n	230ae <http_parser_execute+0x5ca>
				parser->method = HTTP_HEAD;
   230bc:	2302      	movs	r3, #2
   230be:	e7f6      	b.n	230ae <http_parser_execute+0x5ca>
				parser->method = HTTP_LOCK; /* or LINK */
   230c0:	2309      	movs	r3, #9
   230c2:	e7f4      	b.n	230ae <http_parser_execute+0x5ca>
				parser->method =
   230c4:	230a      	movs	r3, #10
   230c6:	e7f2      	b.n	230ae <http_parser_execute+0x5ca>
				parser->method = HTTP_NOTIFY;
   230c8:	2319      	movs	r3, #25
   230ca:	e7f0      	b.n	230ae <http_parser_execute+0x5ca>
				parser->method = HTTP_OPTIONS;
   230cc:	2306      	movs	r3, #6
   230ce:	e7ee      	b.n	230ae <http_parser_execute+0x5ca>
				parser->method = HTTP_POST;
   230d0:	2303      	movs	r3, #3
   230d2:	e7ec      	b.n	230ae <http_parser_execute+0x5ca>
				parser->method = HTTP_REPORT; /* or REBIND */
   230d4:	2314      	movs	r3, #20
   230d6:	e7ea      	b.n	230ae <http_parser_execute+0x5ca>
				parser->method = HTTP_SUBSCRIBE; /* or SEARCH */
   230d8:	231a      	movs	r3, #26
   230da:	e7e8      	b.n	230ae <http_parser_execute+0x5ca>
				parser->method = HTTP_TRACE;
   230dc:	2307      	movs	r3, #7
   230de:	e7e6      	b.n	230ae <http_parser_execute+0x5ca>
				parser->method = HTTP_UNLOCK;
   230e0:	230f      	movs	r3, #15
   230e2:	e7e4      	b.n	230ae <http_parser_execute+0x5ca>
			if (UNLIKELY(ch == '\0')) {
   230e4:	2d00      	cmp	r5, #0
   230e6:	d0a7      	beq.n	23038 <http_parser_execute+0x554>
			matcher = method_strings[parser->method];
   230e8:	7da0      	ldrb	r0, [r4, #22]
   230ea:	4a39      	ldr	r2, [pc, #228]	; (231d0 <http_parser_execute+0x6ec>)
			if (ch == ' ' && matcher[parser->index] == '\0') {
   230ec:	78e3      	ldrb	r3, [r4, #3]
   230ee:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   230f2:	f003 017f 	and.w	r1, r3, #127	; 0x7f
   230f6:	2d20      	cmp	r5, #32
   230f8:	5c52      	ldrb	r2, [r2, r1]
   230fa:	d10a      	bne.n	23112 <http_parser_execute+0x62e>
   230fc:	2a00      	cmp	r2, #0
   230fe:	f040 868c 	bne.w	23e1a <http_parser_execute+0x1336>
				UPDATE_STATE(s_req_spaces_before_url);
   23102:	2314      	movs	r3, #20
   23104:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			++parser->index;
   23108:	78e3      	ldrb	r3, [r4, #3]
   2310a:	3101      	adds	r1, #1
   2310c:	f361 0306 	bfi	r3, r1, #0, #7
   23110:	e75b      	b.n	22fca <http_parser_execute+0x4e6>
			} else if (ch == matcher[parser->index]) {
   23112:	4295      	cmp	r5, r2
   23114:	d0f8      	beq.n	23108 <http_parser_execute+0x624>
			} else if (IS_ALPHA(ch)) {
   23116:	f045 0220 	orr.w	r2, r5, #32
   2311a:	3a61      	subs	r2, #97	; 0x61
   2311c:	2a19      	cmp	r2, #25
   2311e:	f200 8087 	bhi.w	23230 <http_parser_execute+0x74c>
						     parser->index << 8 | ch;
   23122:	020b      	lsls	r3, r1, #8
				uint64_t sw_option = parser->method << 16 |
   23124:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
						     parser->index << 8 | ch;
   23128:	431d      	orrs	r5, r3
				switch (sw_option) {
   2312a:	4b2a      	ldr	r3, [pc, #168]	; (231d4 <http_parser_execute+0x6f0>)
   2312c:	429d      	cmp	r5, r3
   2312e:	d06f      	beq.n	23210 <http_parser_execute+0x72c>
   23130:	dc22      	bgt.n	23178 <http_parser_execute+0x694>
   23132:	4b29      	ldr	r3, [pc, #164]	; (231d8 <http_parser_execute+0x6f4>)
   23134:	429d      	cmp	r5, r3
   23136:	d069      	beq.n	2320c <http_parser_execute+0x728>
   23138:	dc12      	bgt.n	23160 <http_parser_execute+0x67c>
   2313a:	4b28      	ldr	r3, [pc, #160]	; (231dc <http_parser_execute+0x6f8>)
   2313c:	429d      	cmp	r5, r3
   2313e:	d03f      	beq.n	231c0 <http_parser_execute+0x6dc>
   23140:	dc08      	bgt.n	23154 <http_parser_execute+0x670>
   23142:	3b14      	subs	r3, #20
   23144:	429d      	cmp	r5, r3
   23146:	d03e      	beq.n	231c6 <http_parser_execute+0x6e2>
   23148:	3311      	adds	r3, #17
   2314a:	429d      	cmp	r5, r3
   2314c:	f47f af74 	bne.w	23038 <http_parser_execute+0x554>
					parser->method = HTTP_PROPFIND;
   23150:	230c      	movs	r3, #12
   23152:	e036      	b.n	231c2 <http_parser_execute+0x6de>
   23154:	4b22      	ldr	r3, [pc, #136]	; (231e0 <http_parser_execute+0x6fc>)
   23156:	429d      	cmp	r5, r3
   23158:	f47f af6e 	bne.w	23038 <http_parser_execute+0x554>
					parser->method = HTTP_PURGE;
   2315c:	231d      	movs	r3, #29
   2315e:	e030      	b.n	231c2 <http_parser_execute+0x6de>
   23160:	4b20      	ldr	r3, [pc, #128]	; (231e4 <http_parser_execute+0x700>)
   23162:	429d      	cmp	r5, r3
   23164:	d060      	beq.n	23228 <http_parser_execute+0x744>
   23166:	4b20      	ldr	r3, [pc, #128]	; (231e8 <http_parser_execute+0x704>)
   23168:	429d      	cmp	r5, r3
   2316a:	d053      	beq.n	23214 <http_parser_execute+0x730>
   2316c:	4b1f      	ldr	r3, [pc, #124]	; (231ec <http_parser_execute+0x708>)
   2316e:	429d      	cmp	r5, r3
   23170:	f47f af62 	bne.w	23038 <http_parser_execute+0x554>
					parser->method = HTTP_COPY;
   23174:	2308      	movs	r3, #8
   23176:	e024      	b.n	231c2 <http_parser_execute+0x6de>
   23178:	4b1d      	ldr	r3, [pc, #116]	; (231f0 <http_parser_execute+0x70c>)
   2317a:	429d      	cmp	r5, r3
   2317c:	d056      	beq.n	2322c <http_parser_execute+0x748>
   2317e:	dc13      	bgt.n	231a8 <http_parser_execute+0x6c4>
   23180:	4b1c      	ldr	r3, [pc, #112]	; (231f4 <http_parser_execute+0x710>)
   23182:	429d      	cmp	r5, r3
   23184:	d04e      	beq.n	23224 <http_parser_execute+0x740>
   23186:	dc09      	bgt.n	2319c <http_parser_execute+0x6b8>
   23188:	4b1b      	ldr	r3, [pc, #108]	; (231f8 <http_parser_execute+0x714>)
   2318a:	429d      	cmp	r5, r3
   2318c:	d044      	beq.n	23218 <http_parser_execute+0x734>
   2318e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   23192:	429d      	cmp	r5, r3
   23194:	f47f af50 	bne.w	23038 <http_parser_execute+0x554>
					parser->method = HTTP_MKCALENDAR;
   23198:	231e      	movs	r3, #30
   2319a:	e012      	b.n	231c2 <http_parser_execute+0x6de>
   2319c:	4b17      	ldr	r3, [pc, #92]	; (231fc <http_parser_execute+0x718>)
   2319e:	429d      	cmp	r5, r3
   231a0:	f47f af4a 	bne.w	23038 <http_parser_execute+0x554>
					parser->method = HTTP_UNBIND;
   231a4:	2312      	movs	r3, #18
   231a6:	e00c      	b.n	231c2 <http_parser_execute+0x6de>
   231a8:	4b15      	ldr	r3, [pc, #84]	; (23200 <http_parser_execute+0x71c>)
   231aa:	429d      	cmp	r5, r3
   231ac:	d038      	beq.n	23220 <http_parser_execute+0x73c>
   231ae:	4b15      	ldr	r3, [pc, #84]	; (23204 <http_parser_execute+0x720>)
   231b0:	429d      	cmp	r5, r3
   231b2:	d033      	beq.n	2321c <http_parser_execute+0x738>
   231b4:	4b14      	ldr	r3, [pc, #80]	; (23208 <http_parser_execute+0x724>)
   231b6:	429d      	cmp	r5, r3
   231b8:	f47f af3e 	bne.w	23038 <http_parser_execute+0x554>
					parser->method = HTTP_UNLINK;
   231bc:	2320      	movs	r3, #32
   231be:	e000      	b.n	231c2 <http_parser_execute+0x6de>
					parser->method = HTTP_PUT;
   231c0:	2304      	movs	r3, #4
				parser->method = HTTP_MSEARCH;
   231c2:	75a3      	strb	r3, [r4, #22]
   231c4:	e7a0      	b.n	23108 <http_parser_execute+0x624>
					parser->method = HTTP_PATCH;
   231c6:	231c      	movs	r3, #28
   231c8:	e7fb      	b.n	231c2 <http_parser_execute+0x6de>
   231ca:	bf00      	nop
   231cc:	00039842 	.word	0x00039842
   231d0:	00034df4 	.word	0x00034df4
   231d4:	000a014f 	.word	0x000a014f
   231d8:	00050148 	.word	0x00050148
   231dc:	00030155 	.word	0x00030155
   231e0:	00040252 	.word	0x00040252
   231e4:	00090149 	.word	0x00090149
   231e8:	000a0145 	.word	0x000a0145
   231ec:	00050250 	.word	0x00050250
   231f0:	000f0253 	.word	0x000f0253
   231f4:	000c0450 	.word	0x000c0450
   231f8:	000a0241 	.word	0x000a0241
   231fc:	000f0242 	.word	0x000f0242
   23200:	00140242 	.word	0x00140242
   23204:	001a0145 	.word	0x001a0145
   23208:	000f0349 	.word	0x000f0349
					parser->method = HTTP_CHECKOUT;
   2320c:	2316      	movs	r3, #22
   2320e:	e7d8      	b.n	231c2 <http_parser_execute+0x6de>
					parser->method = HTTP_MOVE;
   23210:	230b      	movs	r3, #11
   23212:	e7d6      	b.n	231c2 <http_parser_execute+0x6de>
					parser->method = HTTP_MERGE;
   23214:	2317      	movs	r3, #23
   23216:	e7d4      	b.n	231c2 <http_parser_execute+0x6de>
					parser->method = HTTP_MKACTIVITY;
   23218:	2315      	movs	r3, #21
   2321a:	e7d2      	b.n	231c2 <http_parser_execute+0x6de>
					parser->method = HTTP_SEARCH;
   2321c:	230e      	movs	r3, #14
   2321e:	e7d0      	b.n	231c2 <http_parser_execute+0x6de>
					parser->method = HTTP_REBIND;
   23220:	2311      	movs	r3, #17
   23222:	e7ce      	b.n	231c2 <http_parser_execute+0x6de>
					parser->method = HTTP_PROPPATCH;
   23224:	230d      	movs	r3, #13
   23226:	e7cc      	b.n	231c2 <http_parser_execute+0x6de>
					parser->method = HTTP_LINK;
   23228:	231f      	movs	r3, #31
   2322a:	e7ca      	b.n	231c2 <http_parser_execute+0x6de>
					parser->method = HTTP_UNSUBSCRIBE;
   2322c:	231b      	movs	r3, #27
   2322e:	e7c8      	b.n	231c2 <http_parser_execute+0x6de>
			} else if (ch == '-' &&
   23230:	2d2d      	cmp	r5, #45	; 0x2d
   23232:	f47f af01 	bne.w	23038 <http_parser_execute+0x554>
   23236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2323a:	2b01      	cmp	r3, #1
   2323c:	f47f aefc 	bne.w	23038 <http_parser_execute+0x554>
					parser->index == 1U &&
   23240:	280a      	cmp	r0, #10
   23242:	f47f aef9 	bne.w	23038 <http_parser_execute+0x554>
				parser->method = HTTP_MSEARCH;
   23246:	2318      	movs	r3, #24
   23248:	e7bb      	b.n	231c2 <http_parser_execute+0x6de>
			if (ch == ' ') {
   2324a:	2d20      	cmp	r5, #32
   2324c:	f43f ada1 	beq.w	22d92 <http_parser_execute+0x2ae>
			MARK(url);
   23250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23252:	b903      	cbnz	r3, 23256 <http_parser_execute+0x772>
   23254:	960c      	str	r6, [sp, #48]	; 0x30
			if (parser->method == HTTP_CONNECT) {
   23256:	7da3      	ldrb	r3, [r4, #22]
			UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));
   23258:	4629      	mov	r1, r5
			if (parser->method == HTTP_CONNECT) {
   2325a:	2b05      	cmp	r3, #5
				UPDATE_STATE(s_req_server_start);
   2325c:	bf04      	itt	eq
   2325e:	2318      	moveq	r3, #24
   23260:	f88d 3023 	strbeq.w	r3, [sp, #35]	; 0x23
			UPDATE_STATE(parse_url_char(CURRENT_STATE(), ch));
   23264:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
				UPDATE_STATE
   23268:	f000 fdea 	bl	23e40 <parse_url_char>
				if (UNLIKELY(CURRENT_STATE() == s_dead)) {
   2326c:	2801      	cmp	r0, #1
				UPDATE_STATE
   2326e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
				if (UNLIKELY(CURRENT_STATE() == s_dead)) {
   23272:	f47f ad8e 	bne.w	22d92 <http_parser_execute+0x2ae>
   23276:	e00a      	b.n	2328e <http_parser_execute+0x7aa>
			switch (ch) {
   23278:	f1a5 030a 	sub.w	r3, r5, #10
   2327c:	b2db      	uxtb	r3, r3
   2327e:	2b16      	cmp	r3, #22
   23280:	d82a      	bhi.n	232d8 <http_parser_execute+0x7f4>
   23282:	2201      	movs	r2, #1
   23284:	fa02 f303 	lsl.w	r3, r2, r3
   23288:	4aa4      	ldr	r2, [pc, #656]	; (2351c <http_parser_execute+0xa38>)
   2328a:	401a      	ands	r2, r3
   2328c:	b322      	cbz	r2, 232d8 <http_parser_execute+0x7f4>
					SET_ERRNO(HPE_INVALID_URL);
   2328e:	2211      	movs	r2, #17
   23290:	7de3      	ldrb	r3, [r4, #23]
   23292:	e484      	b.n	22b9e <http_parser_execute+0xba>
			switch (ch) {
   23294:	2d0d      	cmp	r5, #13
   23296:	d003      	beq.n	232a0 <http_parser_execute+0x7bc>
   23298:	2d20      	cmp	r5, #32
   2329a:	d00b      	beq.n	232b4 <http_parser_execute+0x7d0>
   2329c:	2d0a      	cmp	r5, #10
   2329e:	d11b      	bne.n	232d8 <http_parser_execute+0x7f4>
				parser->http_major = 0U;
   232a0:	f44f 2310 	mov.w	r3, #589824	; 0x90000
				UPDATE_STATE((ch == CR) ?
   232a4:	2d0d      	cmp	r5, #13
				parser->http_major = 0U;
   232a6:	6123      	str	r3, [r4, #16]
				UPDATE_STATE((ch == CR) ?
   232a8:	bf0c      	ite	eq
   232aa:	2329      	moveq	r3, #41	; 0x29
   232ac:	232a      	movne	r3, #42	; 0x2a
   232ae:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   232b2:	e001      	b.n	232b8 <http_parser_execute+0x7d4>
				UPDATE_STATE(s_req_http_start);
   232b4:	f88d 5023 	strb.w	r5, [sp, #35]	; 0x23
					     p - url_mark);
   232b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
				rc = cb_data(parser, settings->on_url,
   232ba:	2202      	movs	r2, #2
					     p - url_mark);
   232bc:	1af3      	subs	r3, r6, r3
				rc = cb_data(parser, settings->on_url,
   232be:	9303      	str	r3, [sp, #12]
   232c0:	ab0c      	add	r3, sp, #48	; 0x30
   232c2:	9302      	str	r3, [sp, #8]
					     p - data + 1, &url_mark,
   232c4:	1bf3      	subs	r3, r6, r7
   232c6:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_url,
   232c8:	9301      	str	r3, [sp, #4]
   232ca:	ab09      	add	r3, sp, #36	; 0x24
   232cc:	9300      	str	r3, [sp, #0]
   232ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
   232d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   232d6:	e68e      	b.n	22ff6 <http_parser_execute+0x512>
				UPDATE_STATE
   232d8:	4629      	mov	r1, r5
   232da:	e7c5      	b.n	23268 <http_parser_execute+0x784>
			switch (ch) {
   232dc:	2d20      	cmp	r5, #32
   232de:	f43f ad58 	beq.w	22d92 <http_parser_execute+0x2ae>
   232e2:	2d48      	cmp	r5, #72	; 0x48
   232e4:	f47f ad3f 	bne.w	22d66 <http_parser_execute+0x282>
				UPDATE_STATE(s_req_http_H);
   232e8:	2321      	movs	r3, #33	; 0x21
   232ea:	e550      	b.n	22d8e <http_parser_execute+0x2aa>
			UPDATE_STATE(s_req_http_HT);
   232ec:	2322      	movs	r3, #34	; 0x22
   232ee:	e54e      	b.n	22d8e <http_parser_execute+0x2aa>
			UPDATE_STATE(s_req_http_HTT);
   232f0:	2323      	movs	r3, #35	; 0x23
   232f2:	e54c      	b.n	22d8e <http_parser_execute+0x2aa>
			UPDATE_STATE(s_req_http_HTTP);
   232f4:	2324      	movs	r3, #36	; 0x24
   232f6:	e54a      	b.n	22d8e <http_parser_execute+0x2aa>
			UPDATE_STATE(s_req_first_http_major);
   232f8:	2325      	movs	r3, #37	; 0x25
   232fa:	e548      	b.n	22d8e <http_parser_execute+0x2aa>
			if (UNLIKELY(ch < '1' || ch > '9')) {
   232fc:	f1a5 0331 	sub.w	r3, r5, #49	; 0x31
   23300:	2b08      	cmp	r3, #8
   23302:	f63f addd 	bhi.w	22ec0 <http_parser_execute+0x3dc>
			parser->http_major = ch - '0';
   23306:	3d30      	subs	r5, #48	; 0x30
			UPDATE_STATE(s_req_http_major);
   23308:	2326      	movs	r3, #38	; 0x26
			parser->http_major = ch - '0';
   2330a:	8225      	strh	r5, [r4, #16]
			UPDATE_STATE(s_req_http_major);
   2330c:	e53f      	b.n	22d8e <http_parser_execute+0x2aa>
			if (ch == '.') {
   2330e:	2d2e      	cmp	r5, #46	; 0x2e
   23310:	d101      	bne.n	23316 <http_parser_execute+0x832>
				UPDATE_STATE(s_req_first_http_minor);
   23312:	2327      	movs	r3, #39	; 0x27
   23314:	e53b      	b.n	22d8e <http_parser_execute+0x2aa>
			if (UNLIKELY(!IS_NUM(ch))) {
   23316:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   2331a:	2b09      	cmp	r3, #9
   2331c:	f63f add0 	bhi.w	22ec0 <http_parser_execute+0x3dc>
			parser->http_major *= 10U;
   23320:	8a23      	ldrh	r3, [r4, #16]
   23322:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->http_major += ch - '0';
   23326:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   2332a:	3d30      	subs	r5, #48	; 0x30
   2332c:	b2ad      	uxth	r5, r5
   2332e:	8225      	strh	r5, [r4, #16]
			if (UNLIKELY(parser->http_minor > 999)) {
   23330:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
   23334:	f4ff ad2d 	bcc.w	22d92 <http_parser_execute+0x2ae>
   23338:	e5c2      	b.n	22ec0 <http_parser_execute+0x3dc>
			if (UNLIKELY(!IS_NUM(ch))) {
   2333a:	3d30      	subs	r5, #48	; 0x30
   2333c:	b2eb      	uxtb	r3, r5
   2333e:	2b09      	cmp	r3, #9
   23340:	f63f adbe 	bhi.w	22ec0 <http_parser_execute+0x3dc>
			UPDATE_STATE(s_req_http_minor);
   23344:	2328      	movs	r3, #40	; 0x28
			parser->http_minor = ch - '0';
   23346:	8265      	strh	r5, [r4, #18]
			UPDATE_STATE(s_req_http_minor);
   23348:	e521      	b.n	22d8e <http_parser_execute+0x2aa>
			if (ch == CR) {
   2334a:	2d0d      	cmp	r5, #13
   2334c:	d101      	bne.n	23352 <http_parser_execute+0x86e>
				UPDATE_STATE(s_req_line_almost_done);
   2334e:	2329      	movs	r3, #41	; 0x29
   23350:	e51d      	b.n	22d8e <http_parser_execute+0x2aa>
			if (ch == LF) {
   23352:	2d0a      	cmp	r5, #10
   23354:	f43f adfd 	beq.w	22f52 <http_parser_execute+0x46e>
			if (UNLIKELY(!IS_NUM(ch))) {
   23358:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
   2335c:	2b09      	cmp	r3, #9
   2335e:	f63f adaf 	bhi.w	22ec0 <http_parser_execute+0x3dc>
			parser->http_minor *= 10U;
   23362:	8a63      	ldrh	r3, [r4, #18]
   23364:	eb03 0383 	add.w	r3, r3, r3, lsl #2
			parser->http_minor += ch - '0';
   23368:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   2336c:	3d30      	subs	r5, #48	; 0x30
   2336e:	b2ad      	uxth	r5, r5
   23370:	8265      	strh	r5, [r4, #18]
   23372:	e7dd      	b.n	23330 <http_parser_execute+0x84c>
			if (UNLIKELY(ch != LF)) {
   23374:	2d0a      	cmp	r5, #10
   23376:	f43f adec 	beq.w	22f52 <http_parser_execute+0x46e>
				SET_ERRNO(HPE_LF_EXPECTED);
   2337a:	2217      	movs	r2, #23
   2337c:	7de3      	ldrb	r3, [r4, #23]
   2337e:	e40e      	b.n	22b9e <http_parser_execute+0xba>
			if (ch == CR) {
   23380:	2d0d      	cmp	r5, #13
   23382:	d101      	bne.n	23388 <http_parser_execute+0x8a4>
				UPDATE_STATE(s_headers_almost_done);
   23384:	2337      	movs	r3, #55	; 0x37
   23386:	e502      	b.n	22d8e <http_parser_execute+0x2aa>
			if (ch == LF) {
   23388:	2d0a      	cmp	r5, #10
   2338a:	d101      	bne.n	23390 <http_parser_execute+0x8ac>
				UPDATE_STATE(s_headers_almost_done);
   2338c:	2337      	movs	r3, #55	; 0x37
   2338e:	e458      	b.n	22c42 <http_parser_execute+0x15e>
			c = TOKEN(ch);
   23390:	2d20      	cmp	r5, #32
   23392:	d006      	beq.n	233a2 <http_parser_execute+0x8be>
   23394:	4b62      	ldr	r3, [pc, #392]	; (23520 <http_parser_execute+0xa3c>)
   23396:	5d5d      	ldrb	r5, [r3, r5]
			if (UNLIKELY(!c)) {
   23398:	b91d      	cbnz	r5, 233a2 <http_parser_execute+0x8be>
				SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   2339a:	2218      	movs	r2, #24
   2339c:	7de3      	ldrb	r3, [r4, #23]
   2339e:	f7ff bbfe 	b.w	22b9e <http_parser_execute+0xba>
			MARK(header_field);
   233a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   233a4:	b903      	cbnz	r3, 233a8 <http_parser_execute+0x8c4>
   233a6:	960a      	str	r6, [sp, #40]	; 0x28
			parser->index = 0U;
   233a8:	78e3      	ldrb	r3, [r4, #3]
   233aa:	2d74      	cmp	r5, #116	; 0x74
   233ac:	f36f 0306 	bfc	r3, #0, #7
   233b0:	70e3      	strb	r3, [r4, #3]
			UPDATE_STATE(s_header_field);
   233b2:	f04f 032b 	mov.w	r3, #43	; 0x2b
   233b6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			switch (c) {
   233ba:	78a3      	ldrb	r3, [r4, #2]
   233bc:	d012      	beq.n	233e4 <http_parser_execute+0x900>
   233be:	d806      	bhi.n	233ce <http_parser_execute+0x8ea>
   233c0:	2d63      	cmp	r5, #99	; 0x63
   233c2:	d008      	beq.n	233d6 <http_parser_execute+0x8f2>
   233c4:	2d70      	cmp	r5, #112	; 0x70
   233c6:	d00b      	beq.n	233e0 <http_parser_execute+0x8fc>
				parser->header_state = h_general;
   233c8:	f36f 0347 	bfc	r3, #1, #7
   233cc:	e006      	b.n	233dc <http_parser_execute+0x8f8>
   233ce:	2d75      	cmp	r5, #117	; 0x75
   233d0:	d1fa      	bne.n	233c8 <http_parser_execute+0x8e4>
				parser->header_state = h_matching_upgrade;
   233d2:	2208      	movs	r2, #8
   233d4:	e000      	b.n	233d8 <http_parser_execute+0x8f4>
				parser->header_state = h_C;
   233d6:	2201      	movs	r2, #1
					parser->header_state =
   233d8:	f362 0347 	bfi	r3, r2, #1, #7
				parser->header_state = h_general;
   233dc:	70a3      	strb	r3, [r4, #2]
				break;
   233de:	e4d8      	b.n	22d92 <http_parser_execute+0x2ae>
				parser->header_state =
   233e0:	2205      	movs	r2, #5
   233e2:	e7f9      	b.n	233d8 <http_parser_execute+0x8f4>
				parser->header_state =
   233e4:	2207      	movs	r2, #7
   233e6:	e7f7      	b.n	233d8 <http_parser_execute+0x8f4>
				c = TOKEN(ch);
   233e8:	462b      	mov	r3, r5
	switch (parser->header_state) {
   233ea:	78a2      	ldrb	r2, [r4, #2]
   233ec:	0852      	lsrs	r2, r2, #1
   233ee:	3a01      	subs	r2, #1
   233f0:	2a0b      	cmp	r2, #11
   233f2:	f63f abdf 	bhi.w	22bb4 <http_parser_execute+0xd0>
   233f6:	e8df f002 	tbb	[pc, r2]
   233fa:	1706      	.short	0x1706
   233fc:	63513721 	.word	0x63513721
   23400:	b2b29b79 	.word	0xb2b29b79
   23404:	b2b2      	.short	0xb2b2
		parser->index++;
   23406:	78e2      	ldrb	r2, [r4, #3]
		parser->header_state = (c == 'o' ? h_CO : h_general);
   23408:	2b6f      	cmp	r3, #111	; 0x6f
		parser->index++;
   2340a:	f102 0101 	add.w	r1, r2, #1
   2340e:	f361 0206 	bfi	r2, r1, #0, #7
   23412:	70e2      	strb	r2, [r4, #3]
		parser->header_state = (c == 'o' ? h_CO : h_general);
   23414:	bf08      	it	eq
   23416:	2202      	moveq	r2, #2
		parser->header_state = (c == 'n' ? h_CON : h_general);
   23418:	bf18      	it	ne
   2341a:	2200      	movne	r2, #0
   2341c:	78a3      	ldrb	r3, [r4, #2]
   2341e:	f362 0347 	bfi	r3, r2, #1, #7
   23422:	70a3      	strb	r3, [r4, #2]
		break;
   23424:	f7ff bbc6 	b.w	22bb4 <http_parser_execute+0xd0>
		parser->index++;
   23428:	78e2      	ldrb	r2, [r4, #3]
		parser->header_state = (c == 'n' ? h_CON : h_general);
   2342a:	2b6e      	cmp	r3, #110	; 0x6e
		parser->index++;
   2342c:	f102 0101 	add.w	r1, r2, #1
   23430:	f361 0206 	bfi	r2, r1, #0, #7
   23434:	70e2      	strb	r2, [r4, #3]
		parser->header_state = (c == 'n' ? h_CON : h_general);
   23436:	bf08      	it	eq
   23438:	2203      	moveq	r2, #3
   2343a:	e7ed      	b.n	23418 <http_parser_execute+0x934>
		parser->index++;
   2343c:	78e2      	ldrb	r2, [r4, #3]
   2343e:	2b6e      	cmp	r3, #110	; 0x6e
   23440:	f102 0101 	add.w	r1, r2, #1
   23444:	f361 0206 	bfi	r2, r1, #0, #7
   23448:	70e2      	strb	r2, [r4, #3]
		switch (c) {
   2344a:	78a2      	ldrb	r2, [r4, #2]
   2344c:	d004      	beq.n	23458 <http_parser_execute+0x974>
   2344e:	2b74      	cmp	r3, #116	; 0x74
   23450:	d008      	beq.n	23464 <http_parser_execute+0x980>
			parser->header_state = h_general;
   23452:	f36f 0247 	bfc	r2, #1, #7
   23456:	e002      	b.n	2345e <http_parser_execute+0x97a>
			parser->header_state = h_matching_connection;
   23458:	2304      	movs	r3, #4
			parser->header_state = h_matching_content_length;
   2345a:	f363 0247 	bfi	r2, r3, #1, #7
   2345e:	70a2      	strb	r2, [r4, #2]
			break;
   23460:	f7ff bba8 	b.w	22bb4 <http_parser_execute+0xd0>
			parser->header_state = h_matching_content_length;
   23464:	2306      	movs	r3, #6
   23466:	e7f8      	b.n	2345a <http_parser_execute+0x976>
		parser->index++;
   23468:	78e1      	ldrb	r1, [r4, #3]
   2346a:	1c4a      	adds	r2, r1, #1
   2346c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23470:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != CONNECTION[parser->index]) {
   23474:	2a0a      	cmp	r2, #10
		parser->index++;
   23476:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != CONNECTION[parser->index]) {
   23478:	d803      	bhi.n	23482 <http_parser_execute+0x99e>
   2347a:	492a      	ldr	r1, [pc, #168]	; (23524 <http_parser_execute+0xa40>)
   2347c:	5c8a      	ldrb	r2, [r1, r2]
   2347e:	429a      	cmp	r2, r3
   23480:	d003      	beq.n	2348a <http_parser_execute+0x9a6>
			parser->header_state = h_general;
   23482:	78a3      	ldrb	r3, [r4, #2]
   23484:	f36f 0347 	bfc	r3, #1, #7
   23488:	e7cb      	b.n	23422 <http_parser_execute+0x93e>
		} else if (parser->index == sizeof(CONNECTION) - 2) {
   2348a:	78e3      	ldrb	r3, [r4, #3]
   2348c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23490:	2b09      	cmp	r3, #9
   23492:	f47f ab8f 	bne.w	22bb4 <http_parser_execute+0xd0>
			parser->header_state = h_connection;
   23496:	2209      	movs	r2, #9
   23498:	78a3      	ldrb	r3, [r4, #2]
   2349a:	e7c0      	b.n	2341e <http_parser_execute+0x93a>
		parser->index++;
   2349c:	78e1      	ldrb	r1, [r4, #3]
   2349e:	1c4a      	adds	r2, r1, #1
   234a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   234a4:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
   234a8:	2a10      	cmp	r2, #16
		parser->index++;
   234aa:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != PROXY_CONNECTION[parser->index]) {
   234ac:	d8e9      	bhi.n	23482 <http_parser_execute+0x99e>
   234ae:	491e      	ldr	r1, [pc, #120]	; (23528 <http_parser_execute+0xa44>)
   234b0:	5c8a      	ldrb	r2, [r1, r2]
   234b2:	429a      	cmp	r2, r3
   234b4:	d1e5      	bne.n	23482 <http_parser_execute+0x99e>
		} else if (parser->index == sizeof(PROXY_CONNECTION) - 2) {
   234b6:	78e3      	ldrb	r3, [r4, #3]
   234b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   234bc:	2b0f      	cmp	r3, #15
   234be:	e7e8      	b.n	23492 <http_parser_execute+0x9ae>
		parser->index++;
   234c0:	78e1      	ldrb	r1, [r4, #3]
   234c2:	1c4a      	adds	r2, r1, #1
   234c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   234c8:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != CONTENT_LENGTH[parser->index]) {
   234cc:	2a0e      	cmp	r2, #14
		parser->index++;
   234ce:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != CONTENT_LENGTH[parser->index]) {
   234d0:	d8d7      	bhi.n	23482 <http_parser_execute+0x99e>
   234d2:	f81a 2002 	ldrb.w	r2, [sl, r2]
   234d6:	429a      	cmp	r2, r3
   234d8:	d1d3      	bne.n	23482 <http_parser_execute+0x99e>
		} else if (parser->index == sizeof(CONTENT_LENGTH) - 2) {
   234da:	b2cb      	uxtb	r3, r1
   234dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   234e0:	2b0d      	cmp	r3, #13
   234e2:	f47f ab67 	bne.w	22bb4 <http_parser_execute+0xd0>
			parser->header_state = h_content_length;
   234e6:	220a      	movs	r2, #10
   234e8:	78a3      	ldrb	r3, [r4, #2]
   234ea:	e798      	b.n	2341e <http_parser_execute+0x93a>
		parser->index++;
   234ec:	78e1      	ldrb	r1, [r4, #3]
   234ee:	1c4a      	adds	r2, r1, #1
   234f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   234f4:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != TRANSFER_ENCODING[parser->index]) {
   234f8:	2a11      	cmp	r2, #17
		parser->index++;
   234fa:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != TRANSFER_ENCODING[parser->index]) {
   234fc:	d8c1      	bhi.n	23482 <http_parser_execute+0x99e>
   234fe:	490b      	ldr	r1, [pc, #44]	; (2352c <http_parser_execute+0xa48>)
   23500:	5c8a      	ldrb	r2, [r1, r2]
   23502:	429a      	cmp	r2, r3
   23504:	d1bd      	bne.n	23482 <http_parser_execute+0x99e>
		} else if (parser->index == sizeof(TRANSFER_ENCODING) - 2) {
   23506:	78e3      	ldrb	r3, [r4, #3]
   23508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2350c:	2b10      	cmp	r3, #16
   2350e:	f47f ab51 	bne.w	22bb4 <http_parser_execute+0xd0>
			parser->header_state = h_transfer_encoding;
   23512:	78a3      	ldrb	r3, [r4, #2]
   23514:	f36e 0347 	bfi	r3, lr, #1, #7
   23518:	e783      	b.n	23422 <http_parser_execute+0x93e>
   2351a:	bf00      	nop
   2351c:	00400009 	.word	0x00400009
   23520:	000386ec 	.word	0x000386ec
   23524:	00037fb8 	.word	0x00037fb8
   23528:	00037fb2 	.word	0x00037fb2
   2352c:	00037fc3 	.word	0x00037fc3
		parser->index++;
   23530:	78e1      	ldrb	r1, [r4, #3]
   23532:	1c4a      	adds	r2, r1, #1
   23534:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   23538:	f362 0106 	bfi	r1, r2, #0, #7
		if (cond1 || c != UPGRADE[parser->index]) {
   2353c:	2a07      	cmp	r2, #7
		parser->index++;
   2353e:	70e1      	strb	r1, [r4, #3]
		if (cond1 || c != UPGRADE[parser->index]) {
   23540:	d89f      	bhi.n	23482 <http_parser_execute+0x99e>
   23542:	49a8      	ldr	r1, [pc, #672]	; (237e4 <http_parser_execute+0xd00>)
   23544:	5c8a      	ldrb	r2, [r1, r2]
   23546:	429a      	cmp	r2, r3
   23548:	d19b      	bne.n	23482 <http_parser_execute+0x99e>
		} else if (parser->index == sizeof(UPGRADE) - 2) {
   2354a:	78e3      	ldrb	r3, [r4, #3]
   2354c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   23550:	2b06      	cmp	r3, #6
   23552:	f47f ab2f 	bne.w	22bb4 <http_parser_execute+0xd0>
			parser->header_state = h_upgrade;
   23556:	78a3      	ldrb	r3, [r4, #2]
   23558:	f36c 0347 	bfi	r3, ip, #1, #7
   2355c:	e761      	b.n	23422 <http_parser_execute+0x93e>
		if (ch != ' ') {
   2355e:	2d20      	cmp	r5, #32
   23560:	d18f      	bne.n	23482 <http_parser_execute+0x99e>
   23562:	f7ff bb27 	b.w	22bb4 <http_parser_execute+0xd0>
			if (p == data + len) {
   23566:	45c3      	cmp	fp, r8
   23568:	d102      	bne.n	23570 <http_parser_execute+0xa8c>
				--p;
   2356a:	f10b 36ff 	add.w	r6, fp, #4294967295	; 0xffffffff
   2356e:	e410      	b.n	22d92 <http_parser_execute+0x2ae>
			if (ch == ':') {
   23570:	2d3a      	cmp	r5, #58	; 0x3a
					     parsed, p - data + 1,
   23572:	eba8 0307 	sub.w	r3, r8, r7
			if (ch == ':') {
   23576:	d11a      	bne.n	235ae <http_parser_execute+0xaca>
				UPDATE_STATE(s_header_value_discard_ws);
   23578:	222c      	movs	r2, #44	; 0x2c
   2357a:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
					     p - header_field_mark);
   2357e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
					     parsed, p - data + 1,
   23580:	3301      	adds	r3, #1
					     p - header_field_mark);
   23582:	eba8 0202 	sub.w	r2, r8, r2
				rc = cb_data(parser, settings->on_header_field,
   23586:	9203      	str	r2, [sp, #12]
   23588:	9301      	str	r3, [sp, #4]
   2358a:	aa0a      	add	r2, sp, #40	; 0x28
   2358c:	ab09      	add	r3, sp, #36	; 0x24
   2358e:	9202      	str	r2, [sp, #8]
   23590:	9300      	str	r3, [sp, #0]
   23592:	2203      	movs	r2, #3
   23594:	4620      	mov	r0, r4
   23596:	f8d9 100c 	ldr.w	r1, [r9, #12]
   2359a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   2359e:	f00d fc2f 	bl	30e00 <cb_data>
				if (rc != 0) {
   235a2:	2800      	cmp	r0, #0
   235a4:	f47f aac3 	bne.w	22b2e <http_parser_execute+0x4a>
   235a8:	4646      	mov	r6, r8
   235aa:	f7ff bbf2 	b.w	22d92 <http_parser_execute+0x2ae>
			SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   235ae:	2218      	movs	r2, #24
   235b0:	7de3      	ldrb	r3, [r4, #23]
   235b2:	f7ff bb17 	b.w	22be4 <http_parser_execute+0x100>
			if (ch == ' ' || ch == '\t') {
   235b6:	2d20      	cmp	r5, #32
   235b8:	f43f abeb 	beq.w	22d92 <http_parser_execute+0x2ae>
   235bc:	2d09      	cmp	r5, #9
   235be:	f43f abe8 	beq.w	22d92 <http_parser_execute+0x2ae>
			if (ch == CR) {
   235c2:	2d0d      	cmp	r5, #13
   235c4:	d102      	bne.n	235cc <http_parser_execute+0xae8>
				UPDATE_STATE
   235c6:	232d      	movs	r3, #45	; 0x2d
   235c8:	f7ff bbe1 	b.w	22d8e <http_parser_execute+0x2aa>
			if (ch == LF) {
   235cc:	2d0a      	cmp	r5, #10
   235ce:	d102      	bne.n	235d6 <http_parser_execute+0xaf2>
			UPDATE_STATE(s_header_value_discard_lws);
   235d0:	232e      	movs	r3, #46	; 0x2e
   235d2:	f7ff bbdc 	b.w	22d8e <http_parser_execute+0x2aa>
			MARK(header_value);
   235d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   235d8:	b903      	cbnz	r3, 235dc <http_parser_execute+0xaf8>
   235da:	960b      	str	r6, [sp, #44]	; 0x2c
			UPDATE_STATE(s_header_value);
   235dc:	2330      	movs	r3, #48	; 0x30
   235de:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			parser->index = 0U;
   235e2:	78e3      	ldrb	r3, [r4, #3]
			c = LOWER(ch);
   235e4:	f045 0220 	orr.w	r2, r5, #32
			parser->index = 0U;
   235e8:	f36f 0306 	bfc	r3, #0, #7
   235ec:	70e3      	strb	r3, [r4, #3]
			switch (parser->header_state) {
   235ee:	78a3      	ldrb	r3, [r4, #2]
   235f0:	085b      	lsrs	r3, r3, #1
   235f2:	3b09      	subs	r3, #9
   235f4:	2b05      	cmp	r3, #5
   235f6:	d813      	bhi.n	23620 <http_parser_execute+0xb3c>
   235f8:	a101      	add	r1, pc, #4	; (adr r1, 23600 <http_parser_execute+0xb1c>)
   235fa:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   235fe:	bf00      	nop
   23600:	00023667 	.word	0x00023667
   23604:	00023631 	.word	0x00023631
   23608:	00023625 	.word	0x00023625
   2360c:	00023619 	.word	0x00023619
   23610:	00023621 	.word	0x00023621
   23614:	00022d93 	.word	0x00022d93
				parser->flags |= F_UPGRADE;
   23618:	8823      	ldrh	r3, [r4, #0]
   2361a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2361e:	8023      	strh	r3, [r4, #0]
				parser->header_state = h_general;
   23620:	78a3      	ldrb	r3, [r4, #2]
   23622:	e6d1      	b.n	233c8 <http_parser_execute+0x8e4>
				if ('c' == c) {
   23624:	2a63      	cmp	r2, #99	; 0x63
   23626:	78a3      	ldrb	r3, [r4, #2]
   23628:	f47f aece 	bne.w	233c8 <http_parser_execute+0x8e4>
					parser->header_state =
   2362c:	220d      	movs	r2, #13
   2362e:	e6d3      	b.n	233d8 <http_parser_execute+0x8f4>
				if (UNLIKELY(!IS_NUM(ch))) {
   23630:	3d30      	subs	r5, #48	; 0x30
   23632:	b2eb      	uxtb	r3, r5
   23634:	2b09      	cmp	r3, #9
   23636:	d903      	bls.n	23640 <http_parser_execute+0xb5c>
				SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   23638:	2219      	movs	r2, #25
   2363a:	7de3      	ldrb	r3, [r4, #23]
   2363c:	f7ff baaf 	b.w	22b9e <http_parser_execute+0xba>
				if (parser->flags & F_CONTENTLENGTH) {
   23640:	8823      	ldrh	r3, [r4, #0]
   23642:	0599      	lsls	r1, r3, #22
   23644:	f3c3 0287 	ubfx	r2, r3, #2, #8
   23648:	d503      	bpl.n	23652 <http_parser_execute+0xb6e>
					SET_ERRNO
   2364a:	7de3      	ldrb	r3, [r4, #23]
				SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);
   2364c:	221a      	movs	r2, #26
   2364e:	f7ff baa6 	b.w	22b9e <http_parser_execute+0xba>
				parser->flags |= F_CONTENTLENGTH;
   23652:	f062 027f 	orn	r2, r2, #127	; 0x7f
   23656:	f362 0389 	bfi	r3, r2, #2, #8
   2365a:	8023      	strh	r3, [r4, #0]
				parser->content_length = ch - '0';
   2365c:	60a5      	str	r5, [r4, #8]
   2365e:	17eb      	asrs	r3, r5, #31
			parser->content_length = t;
   23660:	60e3      	str	r3, [r4, #12]
			break;
   23662:	f7ff bb96 	b.w	22d92 <http_parser_execute+0x2ae>
				if (c == 'k') {
   23666:	2a6b      	cmp	r2, #107	; 0x6b
   23668:	78a3      	ldrb	r3, [r4, #2]
   2366a:	d101      	bne.n	23670 <http_parser_execute+0xb8c>
					parser->header_state =
   2366c:	220f      	movs	r2, #15
   2366e:	e6b3      	b.n	233d8 <http_parser_execute+0x8f4>
				} else if (c == 'c') {
   23670:	2a63      	cmp	r2, #99	; 0x63
   23672:	d101      	bne.n	23678 <http_parser_execute+0xb94>
					parser->header_state =
   23674:	2210      	movs	r2, #16
   23676:	e6af      	b.n	233d8 <http_parser_execute+0x8f4>
				} else if (c == 'u') {
   23678:	2a75      	cmp	r2, #117	; 0x75
					parser->header_state =
   2367a:	bf0c      	ite	eq
   2367c:	2211      	moveq	r2, #17
					parser->header_state =
   2367e:	2212      	movne	r2, #18
   23680:	e6aa      	b.n	233d8 <http_parser_execute+0x8f4>
			for (; p != data + len; p++) {
   23682:	46b2      	mov	sl, r6
				(enum header_states)parser->header_state;
   23684:	f894 8002 	ldrb.w	r8, [r4, #2]
   23688:	ea4f 0858 	mov.w	r8, r8, lsr #1
			for (; p != data + len; p++) {
   2368c:	45d3      	cmp	fp, sl
   2368e:	d021      	beq.n	236d4 <http_parser_execute+0xbf0>
				ch = *p;
   23690:	f89a 5000 	ldrb.w	r5, [sl]
				if (ch == CR) {
   23694:	2d0d      	cmp	r5, #13
   23696:	d12d      	bne.n	236f4 <http_parser_execute+0xc10>
					UPDATE_STATE(s_header_almost_done);
   23698:	2332      	movs	r3, #50	; 0x32
   2369a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					parser->header_state = h_state;
   2369e:	78a3      	ldrb	r3, [r4, #2]
					rc = cb_data(parser,
   236a0:	2204      	movs	r2, #4
					parser->header_state = h_state;
   236a2:	f368 0347 	bfi	r3, r8, #1, #7
   236a6:	70a3      	strb	r3, [r4, #2]
						     p - header_value_mark);
   236a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					rc = cb_data(parser,
   236aa:	4620      	mov	r0, r4
						     p - header_value_mark);
   236ac:	ebaa 0303 	sub.w	r3, sl, r3
					rc = cb_data(parser,
   236b0:	9303      	str	r3, [sp, #12]
   236b2:	ab0b      	add	r3, sp, #44	; 0x2c
   236b4:	9302      	str	r3, [sp, #8]
						     p - data + 1,
   236b6:	ebaa 0307 	sub.w	r3, sl, r7
   236ba:	3301      	adds	r3, #1
					rc = cb_data(parser,
   236bc:	9301      	str	r3, [sp, #4]
   236be:	ab09      	add	r3, sp, #36	; 0x24
   236c0:	9300      	str	r3, [sp, #0]
   236c2:	f8d9 1010 	ldr.w	r1, [r9, #16]
   236c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   236ca:	f00d fb99 	bl	30e00 <cb_data>
					if (rc != 0) {
   236ce:	2800      	cmp	r0, #0
   236d0:	f47f aa2d 	bne.w	22b2e <http_parser_execute+0x4a>
			parser->header_state = h_state;
   236d4:	78a3      	ldrb	r3, [r4, #2]
			rc = count_header_size(parser, p - start);
   236d6:	ebaa 0606 	sub.w	r6, sl, r6
			parser->header_state = h_state;
   236da:	f368 0347 	bfi	r3, r8, #1, #7
   236de:	70a3      	strb	r3, [r4, #2]
	parser->nread += bytes;
   236e0:	6863      	ldr	r3, [r4, #4]
   236e2:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   236e4:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   236e8:	6066      	str	r6, [r4, #4]
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   236ea:	f240 8147 	bls.w	2397c <http_parser_execute+0xe98>
		parser->http_errno = HPE_HEADER_OVERFLOW;
   236ee:	220c      	movs	r2, #12
   236f0:	7de3      	ldrb	r3, [r4, #23]
   236f2:	e033      	b.n	2375c <http_parser_execute+0xc78>
				if (ch == LF) {
   236f4:	2d0a      	cmp	r5, #10
   236f6:	d127      	bne.n	23748 <http_parser_execute+0xc64>
					UPDATE_STATE(s_header_almost_done);
   236f8:	2332      	movs	r3, #50	; 0x32
   236fa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	parser->nread += bytes;
   236fe:	6863      	ldr	r3, [r4, #4]
					rc = count_header_size(parser,
   23700:	ebaa 0606 	sub.w	r6, sl, r6
	parser->nread += bytes;
   23704:	441e      	add	r6, r3
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   23706:	f5b6 3fa0 	cmp.w	r6, #81920	; 0x14000
	parser->nread += bytes;
   2370a:	6066      	str	r6, [r4, #4]
						     p - data + 1,
   2370c:	ebaa 0207 	sub.w	r2, sl, r7
	if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {
   23710:	d8ed      	bhi.n	236ee <http_parser_execute+0xc0a>
					parser->header_state = h_state;
   23712:	78a3      	ldrb	r3, [r4, #2]
					rc = cb_data(parser,
   23714:	4620      	mov	r0, r4
					parser->header_state = h_state;
   23716:	f368 0347 	bfi	r3, r8, #1, #7
   2371a:	70a3      	strb	r3, [r4, #2]
						     p - header_value_mark);
   2371c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
					rc = cb_data(parser,
   2371e:	f8d9 1010 	ldr.w	r1, [r9, #16]
						     p - header_value_mark);
   23722:	ebaa 0303 	sub.w	r3, sl, r3
					rc = cb_data(parser,
   23726:	9303      	str	r3, [sp, #12]
   23728:	ab0b      	add	r3, sp, #44	; 0x2c
   2372a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2372e:	ab09      	add	r3, sp, #36	; 0x24
   23730:	9300      	str	r3, [sp, #0]
   23732:	2204      	movs	r2, #4
   23734:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   23738:	f00d fb62 	bl	30e00 <cb_data>
					if (rc != 0) {
   2373c:	2800      	cmp	r0, #0
   2373e:	f47f a9f6 	bne.w	22b2e <http_parser_execute+0x4a>
   23742:	4656      	mov	r6, sl
   23744:	f7ff ba7f 	b.w	22c46 <http_parser_execute+0x162>
				if (!lenient && !IS_HEADER_CHAR(ch)) {
   23748:	9b06      	ldr	r3, [sp, #24]
   2374a:	b95b      	cbnz	r3, 23764 <http_parser_execute+0xc80>
   2374c:	2d09      	cmp	r5, #9
   2374e:	d009      	beq.n	23764 <http_parser_execute+0xc80>
   23750:	2d1f      	cmp	r5, #31
   23752:	d901      	bls.n	23758 <http_parser_execute+0xc74>
   23754:	2d7f      	cmp	r5, #127	; 0x7f
   23756:	d105      	bne.n	23764 <http_parser_execute+0xc80>
					SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
   23758:	2218      	movs	r2, #24
   2375a:	7de3      	ldrb	r3, [r4, #23]
		parser->http_errno = HPE_HEADER_OVERFLOW;
   2375c:	f362 0306 	bfi	r3, r2, #0, #7
   23760:	75e3      	strb	r3, [r4, #23]
   23762:	e051      	b.n	23808 <http_parser_execute+0xd24>
				c = LOWER(ch);
   23764:	f045 0220 	orr.w	r2, r5, #32
	switch (h_state) {
   23768:	f1b8 0f16 	cmp.w	r8, #22
   2376c:	f200 8100 	bhi.w	23970 <http_parser_execute+0xe8c>
   23770:	e8df f018 	tbh	[pc, r8, lsl #1]
   23774:	00fe0017 	.word	0x00fe0017
   23778:	00fe00fe 	.word	0x00fe00fe
   2377c:	00fe00fe 	.word	0x00fe00fe
   23780:	00fe00fe 	.word	0x00fe00fe
   23784:	003000fe 	.word	0x003000fe
   23788:	0030003a 	.word	0x0030003a
   2378c:	006800fe 	.word	0x006800fe
   23790:	0092007f 	.word	0x0092007f
   23794:	00c000a9 	.word	0x00c000a9
   23798:	00e100d7 	.word	0x00e100d7
   2379c:	00e300e3 	.word	0x00e300e3
   237a0:	00e3      	.short	0x00e3
		size_t limit = data + len - p;
   237a2:	ebab 020a 	sub.w	r2, fp, sl
		limit = MIN(limit, HTTP_MAX_HEADER_SIZE);
   237a6:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   237aa:	bf28      	it	cs
   237ac:	f44f 32a0 	movcs.w	r2, #81920	; 0x14000
		p_cr = (const char *)memchr(p, CR, limit);
   237b0:	210d      	movs	r1, #13
   237b2:	4650      	mov	r0, sl
   237b4:	9207      	str	r2, [sp, #28]
   237b6:	f010 fa1c 	bl	33bf2 <memchr>
   237ba:	4605      	mov	r5, r0
		p_lf = (const char *)memchr(p, LF, limit);
   237bc:	210a      	movs	r1, #10
   237be:	4650      	mov	r0, sl
   237c0:	9a07      	ldr	r2, [sp, #28]
   237c2:	f010 fa16 	bl	33bf2 <memchr>
		if (p_cr != NULL) {
   237c6:	b145      	cbz	r5, 237da <http_parser_execute+0xcf6>
			if (p_lf != NULL && p_cr >= p_lf) {
   237c8:	b110      	cbz	r0, 237d0 <http_parser_execute+0xcec>
   237ca:	4285      	cmp	r5, r0
   237cc:	bf28      	it	cs
   237ce:	4605      	movcs	r5, r0
		--p;
   237d0:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
			for (; p != data + len; p++) {
   237d4:	f10a 0a01 	add.w	sl, sl, #1
   237d8:	e758      	b.n	2368c <http_parser_execute+0xba8>
		} else if (UNLIKELY(p_lf != NULL)) {
   237da:	2800      	cmp	r0, #0
   237dc:	bf14      	ite	ne
   237de:	4605      	movne	r5, r0
   237e0:	465d      	moveq	r5, fp
   237e2:	e7f5      	b.n	237d0 <http_parser_execute+0xcec>
   237e4:	00037fd5 	.word	0x00037fd5
		if (ch == ' ') {
   237e8:	2d20      	cmp	r5, #32
   237ea:	d0f3      	beq.n	237d4 <http_parser_execute+0xcf0>
		if (UNLIKELY(!IS_NUM(ch))) {
   237ec:	3d30      	subs	r5, #48	; 0x30
   237ee:	b2ea      	uxtb	r2, r5
   237f0:	2a09      	cmp	r2, #9
   237f2:	d90c      	bls.n	2380e <http_parser_execute+0xd2a>
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   237f4:	2219      	movs	r2, #25
   237f6:	7de3      	ldrb	r3, [r4, #23]
   237f8:	f362 0306 	bfi	r3, r2, #0, #7
			parser->header_state = h_state;
   237fc:	220a      	movs	r2, #10
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   237fe:	75e3      	strb	r3, [r4, #23]
			parser->header_state = h_state;
   23800:	78a3      	ldrb	r3, [r4, #2]
   23802:	f362 0347 	bfi	r3, r2, #1, #7
			parser->header_state = h_state;
   23806:	70a3      	strb	r3, [r4, #2]
		parser->http_errno = HPE_HEADER_OVERFLOW;
   23808:	4656      	mov	r6, sl
   2380a:	f7ff b9ef 	b.w	22bec <http_parser_execute+0x108>
		t *= 10U;
   2380e:	200a      	movs	r0, #10
		t = parser->content_length;
   23810:	e9d4 c302 	ldrd	ip, r3, [r4, #8]
		t *= 10U;
   23814:	fbac 1200 	umull	r1, r2, ip, r0
   23818:	fb00 2203 	mla	r2, r0, r3, r2
		t += ch - '0';
   2381c:	1869      	adds	r1, r5, r1
   2381e:	eb42 75e5 	adc.w	r5, r2, r5, asr #31
		if (UNLIKELY(value < parser->content_length)) {
   23822:	4aad      	ldr	r2, [pc, #692]	; (23ad8 <http_parser_execute+0xff4>)
   23824:	f1bc 3f99 	cmp.w	ip, #2576980377	; 0x99999999
   23828:	4193      	sbcs	r3, r2
   2382a:	d308      	bcc.n	2383e <http_parser_execute+0xd5a>
			SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
   2382c:	2219      	movs	r2, #25
   2382e:	7de3      	ldrb	r3, [r4, #23]
   23830:	f362 0306 	bfi	r3, r2, #0, #7
   23834:	75e3      	strb	r3, [r4, #23]
			parser->header_state = h_state;
   23836:	78a3      	ldrb	r3, [r4, #2]
   23838:	f360 0347 	bfi	r3, r0, #1, #7
   2383c:	e7e3      	b.n	23806 <http_parser_execute+0xd22>
		parser->content_length = t;
   2383e:	e9c4 1502 	strd	r1, r5, [r4, #8]
		break;
   23842:	e7c7      	b.n	237d4 <http_parser_execute+0xcf0>
		parser->index++;
   23844:	78e0      	ldrb	r0, [r4, #3]
   23846:	1c41      	adds	r1, r0, #1
   23848:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   2384c:	f361 0006 	bfi	r0, r1, #0, #7
		if (cond1 || c != CHUNKED[parser->index]) {
   23850:	2907      	cmp	r1, #7
		parser->index++;
   23852:	70e0      	strb	r0, [r4, #3]
		if (cond1 || c != CHUNKED[parser->index]) {
   23854:	f200 808f 	bhi.w	23976 <http_parser_execute+0xe92>
   23858:	48a0      	ldr	r0, [pc, #640]	; (23adc <http_parser_execute+0xff8>)
   2385a:	5c41      	ldrb	r1, [r0, r1]
   2385c:	4291      	cmp	r1, r2
   2385e:	f040 808a 	bne.w	23976 <http_parser_execute+0xe92>
		} else if (parser->index == sizeof(CHUNKED) - 2) {
   23862:	78e2      	ldrb	r2, [r4, #3]
   23864:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			h_state = h_transfer_encoding_chunked;
   23868:	2a06      	cmp	r2, #6
   2386a:	bf08      	it	eq
   2386c:	f04f 0813 	moveq.w	r8, #19
   23870:	e7b0      	b.n	237d4 <http_parser_execute+0xcf0>
		if (c == 'k') {
   23872:	2a6b      	cmp	r2, #107	; 0x6b
   23874:	f000 82c5 	beq.w	23e02 <http_parser_execute+0x131e>
		} else if (c == 'c') {
   23878:	2a63      	cmp	r2, #99	; 0x63
   2387a:	f000 82c5 	beq.w	23e08 <http_parser_execute+0x1324>
		} else if (c == 'u') {
   2387e:	2a75      	cmp	r2, #117	; 0x75
   23880:	f000 82c5 	beq.w	23e0e <http_parser_execute+0x132a>
		} else if (STRICT_TOKEN(c)) {
   23884:	4996      	ldr	r1, [pc, #600]	; (23ae0 <http_parser_execute+0xffc>)
   23886:	5c89      	ldrb	r1, [r1, r2]
   23888:	2900      	cmp	r1, #0
   2388a:	f040 82c3 	bne.w	23e14 <http_parser_execute+0x1330>
			h_state = h_general;
   2388e:	2a20      	cmp	r2, #32
			h_state = h_general;
   23890:	bf18      	it	ne
   23892:	f04f 0800 	movne.w	r8, #0
   23896:	e79d      	b.n	237d4 <http_parser_execute+0xcf0>
		parser->index++;
   23898:	78e0      	ldrb	r0, [r4, #3]
   2389a:	1c41      	adds	r1, r0, #1
   2389c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   238a0:	f361 0006 	bfi	r0, r1, #0, #7
		if (cond1 || c != KEEP_ALIVE[parser->index]) {
   238a4:	290a      	cmp	r1, #10
		parser->index++;
   238a6:	70e0      	strb	r0, [r4, #3]
		if (cond1 || c != KEEP_ALIVE[parser->index]) {
   238a8:	f200 82b4 	bhi.w	23e14 <http_parser_execute+0x1330>
   238ac:	4b8d      	ldr	r3, [pc, #564]	; (23ae4 <http_parser_execute+0x1000>)
   238ae:	5c59      	ldrb	r1, [r3, r1]
   238b0:	4291      	cmp	r1, r2
   238b2:	f040 82af 	bne.w	23e14 <http_parser_execute+0x1330>
		} else if (parser->index == sizeof(KEEP_ALIVE) - 2) {
   238b6:	b2c2      	uxtb	r2, r0
   238b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			h_state = h_connection_keep_alive;
   238bc:	2a09      	cmp	r2, #9
   238be:	bf08      	it	eq
   238c0:	f04f 0814 	moveq.w	r8, #20
   238c4:	e786      	b.n	237d4 <http_parser_execute+0xcf0>
		parser->index++;
   238c6:	78e0      	ldrb	r0, [r4, #3]
   238c8:	1c41      	adds	r1, r0, #1
   238ca:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   238ce:	f361 0006 	bfi	r0, r1, #0, #7
		if (cond1 || c != CLOSE[parser->index]) {
   238d2:	2905      	cmp	r1, #5
		parser->index++;
   238d4:	70e0      	strb	r0, [r4, #3]
		if (cond1 || c != CLOSE[parser->index]) {
   238d6:	f200 829d 	bhi.w	23e14 <http_parser_execute+0x1330>
   238da:	4b83      	ldr	r3, [pc, #524]	; (23ae8 <http_parser_execute+0x1004>)
   238dc:	5c59      	ldrb	r1, [r3, r1]
   238de:	4291      	cmp	r1, r2
   238e0:	f040 8298 	bne.w	23e14 <http_parser_execute+0x1330>
		} else if (parser->index == sizeof(CLOSE) - 2) {
   238e4:	b2c2      	uxtb	r2, r0
   238e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			h_state = h_connection_close;
   238ea:	2a04      	cmp	r2, #4
   238ec:	bf08      	it	eq
   238ee:	f04f 0815 	moveq.w	r8, #21
   238f2:	e76f      	b.n	237d4 <http_parser_execute+0xcf0>
		parser->index++;
   238f4:	78e0      	ldrb	r0, [r4, #3]
   238f6:	1c41      	adds	r1, r0, #1
   238f8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   238fc:	f361 0006 	bfi	r0, r1, #0, #7
		if (cond1 || c != UPGRADE[parser->index]) {
   23900:	2907      	cmp	r1, #7
		parser->index++;
   23902:	70e0      	strb	r0, [r4, #3]
		if (cond1 || c != UPGRADE[parser->index]) {
   23904:	f200 8286 	bhi.w	23e14 <http_parser_execute+0x1330>
   23908:	4b78      	ldr	r3, [pc, #480]	; (23aec <http_parser_execute+0x1008>)
   2390a:	5c59      	ldrb	r1, [r3, r1]
   2390c:	4291      	cmp	r1, r2
   2390e:	f040 8281 	bne.w	23e14 <http_parser_execute+0x1330>
		} else if (parser->index == sizeof(UPGRADE) - 2) {
   23912:	b2c2      	uxtb	r2, r0
   23914:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			h_state = h_connection_upgrade;
   23918:	2a06      	cmp	r2, #6
   2391a:	bf08      	it	eq
   2391c:	f04f 0816 	moveq.w	r8, #22
   23920:	e758      	b.n	237d4 <http_parser_execute+0xcf0>
		if (ch == ',') {
   23922:	2d2c      	cmp	r5, #44	; 0x2c
   23924:	f47f af56 	bne.w	237d4 <http_parser_execute+0xcf0>
			parser->index = 0U;
   23928:	78e2      	ldrb	r2, [r4, #3]
			h_state = h_matching_connection_token_start;
   2392a:	f04f 080e 	mov.w	r8, #14
			parser->index = 0U;
   2392e:	f36f 0206 	bfc	r2, #0, #7
   23932:	70e2      	strb	r2, [r4, #3]
   23934:	e74e      	b.n	237d4 <http_parser_execute+0xcf0>
			h_state = h_general;
   23936:	2d20      	cmp	r5, #32
   23938:	e7aa      	b.n	23890 <http_parser_execute+0xdac>
		if (ch == ',') {
   2393a:	2d2c      	cmp	r5, #44	; 0x2c
   2393c:	d113      	bne.n	23966 <http_parser_execute+0xe82>
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   2393e:	8822      	ldrh	r2, [r4, #0]
			if (h_state == h_connection_keep_alive) {
   23940:	f1b8 0f14 	cmp.w	r8, #20
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   23944:	f3c2 0187 	ubfx	r1, r2, #2, #8
			if (h_state == h_connection_keep_alive) {
   23948:	d105      	bne.n	23956 <http_parser_execute+0xe72>
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   2394a:	f041 0102 	orr.w	r1, r1, #2
				parser->flags |= F_CONNECTION_UPGRADE;
   2394e:	f361 0289 	bfi	r2, r1, #2, #8
   23952:	8022      	strh	r2, [r4, #0]
   23954:	e7e8      	b.n	23928 <http_parser_execute+0xe44>
			} else if (h_state == h_connection_close) {
   23956:	f1b8 0f15 	cmp.w	r8, #21
				parser->flags |= F_CONNECTION_CLOSE;
   2395a:	bf0c      	ite	eq
   2395c:	f041 0104 	orreq.w	r1, r1, #4
				parser->flags |= F_CONNECTION_UPGRADE;
   23960:	f041 0108 	orrne.w	r1, r1, #8
   23964:	e7f3      	b.n	2394e <http_parser_execute+0xe6a>
			h_state = h_matching_connection_token;
   23966:	2d20      	cmp	r5, #32
   23968:	bf18      	it	ne
   2396a:	f04f 0812 	movne.w	r8, #18
   2396e:	e731      	b.n	237d4 <http_parser_execute+0xcf0>
		*p_state = s_header_value;
   23970:	2230      	movs	r2, #48	; 0x30
   23972:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
			h_state = h_general;
   23976:	f04f 0800 	mov.w	r8, #0
   2397a:	e72b      	b.n	237d4 <http_parser_execute+0xcf0>
			if (p == data + len) {
   2397c:	45d3      	cmp	fp, sl
   2397e:	f43f adf4 	beq.w	2356a <http_parser_execute+0xa86>
   23982:	4656      	mov	r6, sl
   23984:	f7ff ba05 	b.w	22d92 <http_parser_execute+0x2ae>
			if (UNLIKELY(ch != LF)) {
   23988:	2d0a      	cmp	r5, #10
   2398a:	f47f acf6 	bne.w	2337a <http_parser_execute+0x896>
			UPDATE_STATE(s_header_value_lws);
   2398e:	2331      	movs	r3, #49	; 0x31
   23990:	f7ff b9fd 	b.w	22d8e <http_parser_execute+0x2aa>
			if (ch == ' ' || ch == '\t') {
   23994:	2d20      	cmp	r5, #32
   23996:	d001      	beq.n	2399c <http_parser_execute+0xeb8>
   23998:	2d09      	cmp	r5, #9
   2399a:	d102      	bne.n	239a2 <http_parser_execute+0xebe>
				UPDATE_STATE(s_header_value_start);
   2399c:	232f      	movs	r3, #47	; 0x2f
   2399e:	f7ff b950 	b.w	22c42 <http_parser_execute+0x15e>
			switch (parser->header_state) {
   239a2:	78a3      	ldrb	r3, [r4, #2]
   239a4:	085b      	lsrs	r3, r3, #1
   239a6:	3b13      	subs	r3, #19
   239a8:	2b03      	cmp	r3, #3
   239aa:	d807      	bhi.n	239bc <http_parser_execute+0xed8>
   239ac:	e8df f003 	tbb	[pc, r3]
   239b0:	1109020d 	.word	0x1109020d
				parser->flags |= F_CONNECTION_KEEP_ALIVE;
   239b4:	8823      	ldrh	r3, [r4, #0]
   239b6:	f043 0308 	orr.w	r3, r3, #8
				parser->flags |= F_CONNECTION_UPGRADE;
   239ba:	8023      	strh	r3, [r4, #0]
			UPDATE_STATE(s_header_field_start);
   239bc:	232a      	movs	r3, #42	; 0x2a
   239be:	f7ff b940 	b.w	22c42 <http_parser_execute+0x15e>
				parser->flags |= F_CONNECTION_CLOSE;
   239c2:	8823      	ldrh	r3, [r4, #0]
   239c4:	f043 0310 	orr.w	r3, r3, #16
   239c8:	e7f7      	b.n	239ba <http_parser_execute+0xed6>
				parser->flags |= F_CHUNKED;
   239ca:	8823      	ldrh	r3, [r4, #0]
   239cc:	f043 0304 	orr.w	r3, r3, #4
   239d0:	e7f3      	b.n	239ba <http_parser_execute+0xed6>
				parser->flags |= F_CONNECTION_UPGRADE;
   239d2:	8823      	ldrh	r3, [r4, #0]
   239d4:	f043 0320 	orr.w	r3, r3, #32
   239d8:	e7ef      	b.n	239ba <http_parser_execute+0xed6>
			if (ch == ' ' || ch == '\t') {
   239da:	2d20      	cmp	r5, #32
   239dc:	d001      	beq.n	239e2 <http_parser_execute+0xefe>
   239de:	2d09      	cmp	r5, #9
   239e0:	d102      	bne.n	239e8 <http_parser_execute+0xf04>
				UPDATE_STATE(s_header_value_discard_ws);
   239e2:	232c      	movs	r3, #44	; 0x2c
   239e4:	f7ff b9d3 	b.w	22d8e <http_parser_execute+0x2aa>
			switch (parser->header_state) {
   239e8:	78a3      	ldrb	r3, [r4, #2]
   239ea:	085b      	lsrs	r3, r3, #1
   239ec:	3b13      	subs	r3, #19
   239ee:	2b03      	cmp	r3, #3
   239f0:	d807      	bhi.n	23a02 <http_parser_execute+0xf1e>
   239f2:	e8df f003 	tbb	[pc, r3]
   239f6:	0226      	.short	0x0226
   239f8:	221e      	.short	0x221e
				parser->flags |=
   239fa:	8823      	ldrh	r3, [r4, #0]
   239fc:	f043 0308 	orr.w	r3, r3, #8
				parser->flags |= F_CHUNKED;
   23a00:	8023      	strh	r3, [r4, #0]
			MARK(header_value);
   23a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23a04:	b903      	cbnz	r3, 23a08 <http_parser_execute+0xf24>
   23a06:	960b      	str	r6, [sp, #44]	; 0x2c
			UPDATE_STATE(s_header_field_start);
   23a08:	232a      	movs	r3, #42	; 0x2a
			rc = cb_data(parser, settings->on_header_value,
   23a0a:	2204      	movs	r2, #4
			UPDATE_STATE(s_header_field_start);
   23a0c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				     p - header_value_mark);
   23a10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			rc = cb_data(parser, settings->on_header_value,
   23a12:	f8d9 1010 	ldr.w	r1, [r9, #16]
				     p - header_value_mark);
   23a16:	1af3      	subs	r3, r6, r3
			rc = cb_data(parser, settings->on_header_value,
   23a18:	9303      	str	r3, [sp, #12]
   23a1a:	ab0b      	add	r3, sp, #44	; 0x2c
   23a1c:	9302      	str	r3, [sp, #8]
				     p - data, &header_value_mark,
   23a1e:	1bf3      	subs	r3, r6, r7
			rc = cb_data(parser, settings->on_header_value,
   23a20:	9301      	str	r3, [sp, #4]
   23a22:	ab09      	add	r3, sp, #36	; 0x24
   23a24:	9300      	str	r3, [sp, #0]
   23a26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
				rc = cb_data(parser, settings->on_body,
   23a2a:	4620      	mov	r0, r4
   23a2c:	f00d f9e8 	bl	30e00 <cb_data>
   23a30:	e020      	b.n	23a74 <http_parser_execute+0xf90>
				parser->flags |= F_CONNECTION_CLOSE;
   23a32:	8823      	ldrh	r3, [r4, #0]
   23a34:	f043 0310 	orr.w	r3, r3, #16
   23a38:	e7e2      	b.n	23a00 <http_parser_execute+0xf1c>
				parser->flags |= F_CONNECTION_UPGRADE;
   23a3a:	8823      	ldrh	r3, [r4, #0]
   23a3c:	f043 0320 	orr.w	r3, r3, #32
   23a40:	e7de      	b.n	23a00 <http_parser_execute+0xf1c>
				parser->flags |= F_CHUNKED;
   23a42:	8823      	ldrh	r3, [r4, #0]
   23a44:	f043 0304 	orr.w	r3, r3, #4
   23a48:	e7da      	b.n	23a00 <http_parser_execute+0xf1c>
			if (parser->flags & F_TRAILING) {
   23a4a:	8823      	ldrh	r3, [r4, #0]
   23a4c:	f3c3 0187 	ubfx	r1, r3, #2, #8
   23a50:	065b      	lsls	r3, r3, #25
   23a52:	460a      	mov	r2, r1
   23a54:	d513      	bpl.n	23a7e <http_parser_execute+0xf9a>
				UPDATE_STATE(s_message_done);
   23a56:	233e      	movs	r3, #62	; 0x3e
   23a58:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					       p - data);
   23a5c:	1bf3      	subs	r3, r6, r7
				rc = cb_notify(parser, &p_state,
   23a5e:	9301      	str	r3, [sp, #4]
   23a60:	ab09      	add	r3, sp, #36	; 0x24
   23a62:	9300      	str	r3, [sp, #0]
   23a64:	4620      	mov	r0, r4
   23a66:	230a      	movs	r3, #10
   23a68:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
   23a6c:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   23a70:	f00d f9a5 	bl	30dbe <cb_notify>
				if (rc != 0) {
   23a74:	2800      	cmp	r0, #0
   23a76:	f43f a8e6 	beq.w	22c46 <http_parser_execute+0x162>
   23a7a:	f7ff b858 	b.w	22b2e <http_parser_execute+0x4a>
			if ((parser->flags & F_CHUNKED) &&
   23a7e:	f011 0f01 	tst.w	r1, #1
   23a82:	7de3      	ldrb	r3, [r4, #23]
   23a84:	d002      	beq.n	23a8c <http_parser_execute+0xfa8>
   23a86:	0608      	lsls	r0, r1, #24
   23a88:	f53f ade0 	bmi.w	2364c <http_parser_execute+0xb68>
			UPDATE_STATE(s_headers_done);
   23a8c:	2138      	movs	r1, #56	; 0x38
				((parser->flags & flags) == flags ||
   23a8e:	f002 0228 	and.w	r2, r2, #40	; 0x28
   23a92:	2a28      	cmp	r2, #40	; 0x28
			UPDATE_STATE(s_headers_done);
   23a94:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
				((parser->flags & flags) == flags ||
   23a98:	d01c      	beq.n	23ad4 <http_parser_execute+0xff0>
   23a9a:	7da2      	ldrb	r2, [r4, #22]
   23a9c:	1f51      	subs	r1, r2, #5
   23a9e:	424a      	negs	r2, r1
   23aa0:	414a      	adcs	r2, r1
			parser->upgrade =
   23aa2:	f362 13c7 	bfi	r3, r2, #7, #1
   23aa6:	75e3      	strb	r3, [r4, #23]
			if (settings->on_headers_complete) {
   23aa8:	f8d9 3014 	ldr.w	r3, [r9, #20]
   23aac:	b133      	cbz	r3, 23abc <http_parser_execute+0xfd8>
				switch (settings->on_headers_complete(parser)) {
   23aae:	4620      	mov	r0, r4
   23ab0:	4798      	blx	r3
   23ab2:	2801      	cmp	r0, #1
   23ab4:	d020      	beq.n	23af8 <http_parser_execute+0x1014>
   23ab6:	2802      	cmp	r0, #2
   23ab8:	d01a      	beq.n	23af0 <http_parser_execute+0x100c>
   23aba:	bb10      	cbnz	r0, 23b02 <http_parser_execute+0x101e>
			if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
   23abc:	7de3      	ldrb	r3, [r4, #23]
   23abe:	065b      	lsls	r3, r3, #25
   23ac0:	f43f a8c1 	beq.w	22c46 <http_parser_execute+0x162>
	parser->state = CURRENT_STATE();
   23ac4:	6823      	ldr	r3, [r4, #0]
   23ac6:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
	*parsed = p - data; /* Error */
   23aca:	1bf6      	subs	r6, r6, r7
	parser->state = CURRENT_STATE();
   23acc:	f362 2390 	bfi	r3, r2, #10, #7
   23ad0:	6023      	str	r3, [r4, #0]
	*parsed = p - data; /* Error */
   23ad2:	e059      	b.n	23b88 <http_parser_execute+0x10a4>
				((parser->flags & flags) == flags ||
   23ad4:	2201      	movs	r2, #1
   23ad6:	e7e4      	b.n	23aa2 <http_parser_execute+0xfbe>
   23ad8:	19999999 	.word	0x19999999
   23adc:	00037fdd 	.word	0x00037fdd
   23ae0:	000386ec 	.word	0x000386ec
   23ae4:	00037fe5 	.word	0x00037fe5
   23ae8:	00037ff0 	.word	0x00037ff0
   23aec:	00037fd5 	.word	0x00037fd5
					parser->upgrade = 1U;
   23af0:	7de3      	ldrb	r3, [r4, #23]
   23af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23af6:	75e3      	strb	r3, [r4, #23]
					parser->flags |= F_SKIPBODY;
   23af8:	8823      	ldrh	r3, [r4, #0]
   23afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23afe:	8023      	strh	r3, [r4, #0]
					break;
   23b00:	e7dc      	b.n	23abc <http_parser_execute+0xfd8>
					SET_ERRNO(HPE_CB_headers_complete);
   23b02:	2205      	movs	r2, #5
   23b04:	7de3      	ldrb	r3, [r4, #23]
		SET_ERRNO(HPE_UNKNOWN);
   23b06:	f362 0306 	bfi	r3, r2, #0, #7
   23b0a:	75e3      	strb	r3, [r4, #23]
   23b0c:	e7da      	b.n	23ac4 <http_parser_execute+0xfe0>
			parser->nread = 0U;
   23b0e:	2300      	movs	r3, #0
   23b10:	6063      	str	r3, [r4, #4]
			hasBody = parser->flags & F_CHUNKED ||
   23b12:	8823      	ldrh	r3, [r4, #0]
   23b14:	075d      	lsls	r5, r3, #29
   23b16:	f3c3 0187 	ubfx	r1, r3, #2, #8
   23b1a:	f3c3 0080 	ubfx	r0, r3, #2, #1
   23b1e:	d436      	bmi.n	23b8e <http_parser_execute+0x10aa>
				  (parser->content_length > 0 &&
   23b20:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   23b24:	3b01      	subs	r3, #1
   23b26:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
			hasBody = parser->flags & F_CHUNKED ||
   23b2a:	3302      	adds	r3, #2
   23b2c:	f172 33ff 	sbcs.w	r3, r2, #4294967295	; 0xffffffff
   23b30:	bf34      	ite	cc
   23b32:	2301      	movcc	r3, #1
   23b34:	2300      	movcs	r3, #0
			if (parser->upgrade &&
   23b36:	f994 2017 	ldrsb.w	r2, [r4, #23]
   23b3a:	2a00      	cmp	r2, #0
   23b3c:	da29      	bge.n	23b92 <http_parser_execute+0x10ae>
   23b3e:	7da2      	ldrb	r2, [r4, #22]
   23b40:	2a05      	cmp	r2, #5
   23b42:	d003      	beq.n	23b4c <http_parser_execute+0x1068>
				(parser->method == HTTP_CONNECT ||
   23b44:	064a      	lsls	r2, r1, #25
   23b46:	d401      	bmi.n	23b4c <http_parser_execute+0x1068>
				 (parser->flags & F_SKIPBODY) || !hasBody)) {
   23b48:	2b00      	cmp	r3, #0
   23b4a:	d136      	bne.n	23bba <http_parser_execute+0x10d6>
				UPDATE_STATE(NEW_MESSAGE());
   23b4c:	7823      	ldrb	r3, [r4, #0]
					       p - data + 1);
   23b4e:	1bf6      	subs	r6, r6, r7
				UPDATE_STATE(NEW_MESSAGE());
   23b50:	f013 0f03 	tst.w	r3, #3
   23b54:	bf0c      	ite	eq
   23b56:	2312      	moveq	r3, #18
   23b58:	2304      	movne	r3, #4
					       p - data + 1);
   23b5a:	3601      	adds	r6, #1
				UPDATE_STATE(NEW_MESSAGE());
   23b5c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				rc = cb_notify(parser, &p_state,
   23b60:	ab09      	add	r3, sp, #36	; 0x24
   23b62:	9300      	str	r3, [sp, #0]
   23b64:	4620      	mov	r0, r4
   23b66:	2307      	movs	r3, #7
   23b68:	f8d9 201c 	ldr.w	r2, [r9, #28]
   23b6c:	9601      	str	r6, [sp, #4]
   23b6e:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   23b72:	f00d f924 	bl	30dbe <cb_notify>
				if (rc != 0) {
   23b76:	2800      	cmp	r0, #0
   23b78:	f47e afd9 	bne.w	22b2e <http_parser_execute+0x4a>
				parser->state = CURRENT_STATE();
   23b7c:	6823      	ldr	r3, [r4, #0]
   23b7e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   23b82:	f362 2390 	bfi	r3, r2, #10, #7
   23b86:	6023      	str	r3, [r4, #0]
				*parsed = p - data + 1;
   23b88:	9609      	str	r6, [sp, #36]	; 0x24
				return 0;
   23b8a:	f7fe bfd0 	b.w	22b2e <http_parser_execute+0x4a>
			hasBody = parser->flags & F_CHUNKED ||
   23b8e:	2301      	movs	r3, #1
   23b90:	e7d1      	b.n	23b36 <http_parser_execute+0x1052>
			if (parser->flags & F_SKIPBODY) {
   23b92:	064d      	lsls	r5, r1, #25
   23b94:	d511      	bpl.n	23bba <http_parser_execute+0x10d6>
				UPDATE_STATE(NEW_MESSAGE());
   23b96:	7823      	ldrb	r3, [r4, #0]
				rc = cb_notify(parser, &p_state,
   23b98:	f8d9 201c 	ldr.w	r2, [r9, #28]
				UPDATE_STATE(NEW_MESSAGE());
   23b9c:	f013 0f03 	tst.w	r3, #3
   23ba0:	bf0c      	ite	eq
   23ba2:	2312      	moveq	r3, #18
   23ba4:	2304      	movne	r3, #4
   23ba6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					       p - data + 1);
   23baa:	1bf3      	subs	r3, r6, r7
   23bac:	3301      	adds	r3, #1
				rc = cb_notify(parser, &p_state,
   23bae:	9301      	str	r3, [sp, #4]
   23bb0:	ab09      	add	r3, sp, #36	; 0x24
   23bb2:	9300      	str	r3, [sp, #0]
   23bb4:	2307      	movs	r3, #7
   23bb6:	f7ff b971 	b.w	22e9c <http_parser_execute+0x3b8>
			} else if (parser->flags & F_CHUNKED) {
   23bba:	b110      	cbz	r0, 23bc2 <http_parser_execute+0x10de>
				UPDATE_STATE(s_chunk_size_start);
   23bbc:	2333      	movs	r3, #51	; 0x33
   23bbe:	f7ff b8e6 	b.w	22d8e <http_parser_execute+0x2aa>
	enum state p_state = *current_state;
   23bc2:	2338      	movs	r3, #56	; 0x38
   23bc4:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	if (parser->content_length == 0U) {
   23bc8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   23bcc:	ea52 0103 	orrs.w	r1, r2, r3
   23bd0:	d11a      	bne.n	23c08 <http_parser_execute+0x1124>
			UPDATE_STATE(NEW_MESSAGE());
   23bd2:	7823      	ldrb	r3, [r4, #0]
			rc = cb_notify(parser, &p_state,
   23bd4:	4620      	mov	r0, r4
			UPDATE_STATE(NEW_MESSAGE());
   23bd6:	f013 0f03 	tst.w	r3, #3
   23bda:	bf0c      	ite	eq
   23bdc:	2312      	moveq	r3, #18
   23bde:	2304      	movne	r3, #4
   23be0:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
				       p - data + 1);
   23be4:	1bf3      	subs	r3, r6, r7
   23be6:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   23be8:	9301      	str	r3, [sp, #4]
   23bea:	ab09      	add	r3, sp, #36	; 0x24
   23bec:	9300      	str	r3, [sp, #0]
   23bee:	f8d9 201c 	ldr.w	r2, [r9, #28]
   23bf2:	2307      	movs	r3, #7
   23bf4:	a90f      	add	r1, sp, #60	; 0x3c
   23bf6:	f00d f8e2 	bl	30dbe <cb_notify>
			if (rc != 0) {
   23bfa:	2800      	cmp	r0, #0
   23bfc:	f47e af97 	bne.w	22b2e <http_parser_execute+0x4a>
	*current_state = p_state;
   23c00:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   23c04:	f7ff b8c3 	b.w	22d8e <http_parser_execute+0x2aa>
	} else if (parser->content_length != ULLONG_MAX) {
   23c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23c0c:	bf08      	it	eq
   23c0e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   23c12:	d003      	beq.n	23c1c <http_parser_execute+0x1138>
		UPDATE_STATE(s_body_identity);
   23c14:	233c      	movs	r3, #60	; 0x3c
			UPDATE_STATE(s_body_identity_eof);
   23c16:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   23c1a:	e7f1      	b.n	23c00 <http_parser_execute+0x111c>
		if (!http_message_needs_eof(parser)) {
   23c1c:	4620      	mov	r0, r4
   23c1e:	f00d f91f 	bl	30e60 <http_message_needs_eof>
   23c22:	2800      	cmp	r0, #0
   23c24:	d0d5      	beq.n	23bd2 <http_parser_execute+0x10ee>
			UPDATE_STATE(s_body_identity_eof);
   23c26:	233d      	movs	r3, #61	; 0x3d
   23c28:	e7f5      	b.n	23c16 <http_parser_execute+0x1132>
			uint64_t to_read = MIN(parser->content_length,
   23c2a:	ebab 0306 	sub.w	r3, fp, r6
   23c2e:	e9d4 c002 	ldrd	ip, r0, [r4, #8]
   23c32:	17d9      	asrs	r1, r3, #31
   23c34:	459c      	cmp	ip, r3
   23c36:	eb70 0201 	sbcs.w	r2, r0, r1
			MARK(body);
   23c3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
			uint64_t to_read = MIN(parser->content_length,
   23c3c:	bf3c      	itt	cc
   23c3e:	4663      	movcc	r3, ip
   23c40:	4601      	movcc	r1, r0
			MARK(body);
   23c42:	b902      	cbnz	r2, 23c46 <http_parser_execute+0x1162>
   23c44:	960d      	str	r6, [sp, #52]	; 0x34
			parser->content_length -= to_read;
   23c46:	ebbc 0203 	subs.w	r2, ip, r3
   23c4a:	eb60 0101 	sbc.w	r1, r0, r1
			p += to_read - 1;
   23c4e:	3b01      	subs	r3, #1
   23c50:	441e      	add	r6, r3
			if (parser->content_length == 0U) {
   23c52:	ea52 0301 	orrs.w	r3, r2, r1
			parser->content_length -= to_read;
   23c56:	e9c4 2102 	strd	r2, r1, [r4, #8]
			if (parser->content_length == 0U) {
   23c5a:	f47f a89a 	bne.w	22d92 <http_parser_execute+0x2ae>
				UPDATE_STATE(s_message_done);
   23c5e:	233e      	movs	r3, #62	; 0x3e
   23c60:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
					     p - body_mark + 1);
   23c64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
				rc = cb_data(parser, settings->on_body,
   23c66:	2206      	movs	r2, #6
					     p - body_mark + 1);
   23c68:	1af3      	subs	r3, r6, r3
   23c6a:	3301      	adds	r3, #1
				rc = cb_data(parser, settings->on_body,
   23c6c:	9303      	str	r3, [sp, #12]
   23c6e:	ab0d      	add	r3, sp, #52	; 0x34
   23c70:	9302      	str	r3, [sp, #8]
					     p - data, &body_mark,
   23c72:	1bf3      	subs	r3, r6, r7
				rc = cb_data(parser, settings->on_body,
   23c74:	9301      	str	r3, [sp, #4]
   23c76:	ab09      	add	r3, sp, #36	; 0x24
   23c78:	9300      	str	r3, [sp, #0]
   23c7a:	f8d9 1018 	ldr.w	r1, [r9, #24]
   23c7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   23c82:	e6d2      	b.n	23a2a <http_parser_execute+0xf46>
			MARK(body);
   23c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23c86:	b903      	cbnz	r3, 23c8a <http_parser_execute+0x11a6>
   23c88:	960d      	str	r6, [sp, #52]	; 0x34
			p = data + len - 1;
   23c8a:	9b05      	ldr	r3, [sp, #20]
   23c8c:	1e5e      	subs	r6, r3, #1
   23c8e:	443e      	add	r6, r7
			break;
   23c90:	f7ff b87f 	b.w	22d92 <http_parser_execute+0x2ae>
			UPDATE_STATE(NEW_MESSAGE());
   23c94:	7823      	ldrb	r3, [r4, #0]
				       p - data + 1);
   23c96:	1bf5      	subs	r5, r6, r7
			UPDATE_STATE(NEW_MESSAGE());
   23c98:	f013 0f03 	tst.w	r3, #3
   23c9c:	bf0c      	ite	eq
   23c9e:	2312      	moveq	r3, #18
   23ca0:	2304      	movne	r3, #4
				       p - data + 1);
   23ca2:	3501      	adds	r5, #1
			UPDATE_STATE(NEW_MESSAGE());
   23ca4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
			rc = cb_notify(parser, &p_state,
   23ca8:	ab09      	add	r3, sp, #36	; 0x24
   23caa:	9300      	str	r3, [sp, #0]
   23cac:	4620      	mov	r0, r4
   23cae:	2307      	movs	r3, #7
   23cb0:	f8d9 201c 	ldr.w	r2, [r9, #28]
   23cb4:	9501      	str	r5, [sp, #4]
   23cb6:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   23cba:	f00d f880 	bl	30dbe <cb_notify>
			if (rc != 0) {
   23cbe:	2800      	cmp	r0, #0
   23cc0:	f47e af35 	bne.w	22b2e <http_parser_execute+0x4a>
			if (parser->upgrade) {
   23cc4:	f994 3017 	ldrsb.w	r3, [r4, #23]
   23cc8:	2b00      	cmp	r3, #0
   23cca:	f6bf a862 	bge.w	22d92 <http_parser_execute+0x2ae>
				parser->state = CURRENT_STATE();
   23cce:	6823      	ldr	r3, [r4, #0]
   23cd0:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
				*parsed = p - data + 1;
   23cd4:	9509      	str	r5, [sp, #36]	; 0x24
				parser->state = CURRENT_STATE();
   23cd6:	f362 2390 	bfi	r3, r2, #10, #7
   23cda:	6023      	str	r3, [r4, #0]
				return 0;
   23cdc:	f7fe bf27 	b.w	22b2e <http_parser_execute+0x4a>
			unhex_val = unhex[(unsigned char)ch];
   23ce0:	4b50      	ldr	r3, [pc, #320]	; (23e24 <http_parser_execute+0x1340>)
   23ce2:	575b      	ldrsb	r3, [r3, r5]
			if (UNLIKELY(unhex_val == -1)) {
   23ce4:	1c58      	adds	r0, r3, #1
   23ce6:	d103      	bne.n	23cf0 <http_parser_execute+0x120c>
				SET_ERRNO(HPE_INVALID_CHUNK_SIZE);
   23ce8:	221b      	movs	r2, #27
   23cea:	7de3      	ldrb	r3, [r4, #23]
   23cec:	f7fe bf57 	b.w	22b9e <http_parser_execute+0xba>
			parser->content_length = unhex_val;
   23cf0:	17da      	asrs	r2, r3, #31
   23cf2:	e9c4 3202 	strd	r3, r2, [r4, #8]
			UPDATE_STATE(s_chunk_size);
   23cf6:	2334      	movs	r3, #52	; 0x34
   23cf8:	f7ff b849 	b.w	22d8e <http_parser_execute+0x2aa>
			if (ch == CR) {
   23cfc:	2d0d      	cmp	r5, #13
   23cfe:	d102      	bne.n	23d06 <http_parser_execute+0x1222>
				UPDATE_STATE(s_chunk_size_almost_done);
   23d00:	2336      	movs	r3, #54	; 0x36
   23d02:	f7ff b844 	b.w	22d8e <http_parser_execute+0x2aa>
			unhex_val = unhex[(unsigned char)ch];
   23d06:	4b47      	ldr	r3, [pc, #284]	; (23e24 <http_parser_execute+0x1340>)
   23d08:	575a      	ldrsb	r2, [r3, r5]
			if (unhex_val == -1) {
   23d0a:	1c51      	adds	r1, r2, #1
   23d0c:	d106      	bne.n	23d1c <http_parser_execute+0x1238>
				if (ch == ';' || ch == ' ') {
   23d0e:	2d3b      	cmp	r5, #59	; 0x3b
   23d10:	d001      	beq.n	23d16 <http_parser_execute+0x1232>
   23d12:	2d20      	cmp	r5, #32
   23d14:	d1e8      	bne.n	23ce8 <http_parser_execute+0x1204>
					UPDATE_STATE(s_chunk_parameters);
   23d16:	2335      	movs	r3, #53	; 0x35
   23d18:	f7ff b839 	b.w	22d8e <http_parser_execute+0x2aa>
			t = parser->content_length;
   23d1c:	e9d4 0502 	ldrd	r0, r5, [r4, #8]
			t *= 16U;
   23d20:	012b      	lsls	r3, r5, #4
   23d22:	0101      	lsls	r1, r0, #4
			t += unhex_val;
   23d24:	1851      	adds	r1, r2, r1
			t *= 16U;
   23d26:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
			t += unhex_val;
   23d2a:	eb43 73e2 	adc.w	r3, r3, r2, asr #31
			if (UNLIKELY(ulong_value < parser->content_length)) {
   23d2e:	f06f 0201 	mvn.w	r2, #1
   23d32:	4282      	cmp	r2, r0
   23d34:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   23d38:	41aa      	sbcs	r2, r5
   23d3a:	f4ff ac7d 	bcc.w	23638 <http_parser_execute+0xb54>
			parser->content_length = t;
   23d3e:	60a1      	str	r1, [r4, #8]
   23d40:	e48e      	b.n	23660 <http_parser_execute+0xb7c>
			if (ch == CR) {
   23d42:	2d0d      	cmp	r5, #13
   23d44:	f47f a825 	bne.w	22d92 <http_parser_execute+0x2ae>
   23d48:	e7da      	b.n	23d00 <http_parser_execute+0x121c>
			parser->nread = 0U;
   23d4a:	2300      	movs	r3, #0
   23d4c:	6063      	str	r3, [r4, #4]
			if (parser->content_length == 0U) {
   23d4e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   23d52:	4313      	orrs	r3, r2
				parser->flags |= F_TRAILING;
   23d54:	bf09      	itett	eq
   23d56:	8823      	ldrheq	r3, [r4, #0]
				UPDATE_STATE(s_chunk_data);
   23d58:	2339      	movne	r3, #57	; 0x39
				parser->flags |= F_TRAILING;
   23d5a:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   23d5e:	8023      	strheq	r3, [r4, #0]
				UPDATE_STATE(s_header_field_start);
   23d60:	bf08      	it	eq
   23d62:	232a      	moveq	r3, #42	; 0x2a
				UPDATE_STATE(s_chunk_data);
   23d64:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				       p - data + 1);
   23d68:	1bf3      	subs	r3, r6, r7
   23d6a:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   23d6c:	9301      	str	r3, [sp, #4]
   23d6e:	ab09      	add	r3, sp, #36	; 0x24
   23d70:	9300      	str	r3, [sp, #0]
   23d72:	f8d9 2020 	ldr.w	r2, [r9, #32]
   23d76:	2309      	movs	r3, #9
   23d78:	f7ff b890 	b.w	22e9c <http_parser_execute+0x3b8>
			uint64_t to_read = MIN(parser->content_length,
   23d7c:	ebab 0306 	sub.w	r3, fp, r6
   23d80:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   23d84:	17dd      	asrs	r5, r3, #31
   23d86:	429a      	cmp	r2, r3
   23d88:	eb71 0005 	sbcs.w	r0, r1, r5
			MARK(body);
   23d8c:	980d      	ldr	r0, [sp, #52]	; 0x34
			uint64_t to_read = MIN(parser->content_length,
   23d8e:	bf3c      	itt	cc
   23d90:	4613      	movcc	r3, r2
   23d92:	460d      	movcc	r5, r1
			MARK(body);
   23d94:	b900      	cbnz	r0, 23d98 <http_parser_execute+0x12b4>
   23d96:	960d      	str	r6, [sp, #52]	; 0x34
			parser->content_length -= to_read;
   23d98:	1ad2      	subs	r2, r2, r3
   23d9a:	eb61 0105 	sbc.w	r1, r1, r5
			p += to_read - 1;
   23d9e:	3b01      	subs	r3, #1
   23da0:	441e      	add	r6, r3
			if (parser->content_length == 0U) {
   23da2:	ea52 0301 	orrs.w	r3, r2, r1
			parser->content_length -= to_read;
   23da6:	e9c4 2102 	strd	r2, r1, [r4, #8]
			if (parser->content_length == 0U) {
   23daa:	f47e aff2 	bne.w	22d92 <http_parser_execute+0x2ae>
				UPDATE_STATE(s_chunk_data_almost_done);
   23dae:	233a      	movs	r3, #58	; 0x3a
   23db0:	f7fe bfed 	b.w	22d8e <http_parser_execute+0x2aa>
			UPDATE_STATE(s_chunk_data_done);
   23db4:	233b      	movs	r3, #59	; 0x3b
   23db6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				     p - body_mark);
   23dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   23dbc:	2206      	movs	r2, #6
				     p - body_mark);
   23dbe:	1af3      	subs	r3, r6, r3
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   23dc0:	9303      	str	r3, [sp, #12]
   23dc2:	ab0d      	add	r3, sp, #52	; 0x34
   23dc4:	9302      	str	r3, [sp, #8]
				     &p_state, parsed, p - data + 1, &body_mark,
   23dc6:	1bf3      	subs	r3, r6, r7
   23dc8:	3301      	adds	r3, #1
			rc = cb_data(parser, settings->on_body, HPE_CB_body,
   23dca:	9301      	str	r3, [sp, #4]
   23dcc:	ab09      	add	r3, sp, #36	; 0x24
   23dce:	9300      	str	r3, [sp, #0]
   23dd0:	f8d9 1018 	ldr.w	r1, [r9, #24]
   23dd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   23dd8:	f7ff b90d 	b.w	22ff6 <http_parser_execute+0x512>
			parser->nread = 0U;
   23ddc:	2300      	movs	r3, #0
   23dde:	6063      	str	r3, [r4, #4]
			UPDATE_STATE(s_chunk_size_start);
   23de0:	2333      	movs	r3, #51	; 0x33
   23de2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
				       p - data + 1);
   23de6:	1bf3      	subs	r3, r6, r7
   23de8:	3301      	adds	r3, #1
			rc = cb_notify(parser, &p_state,
   23dea:	9301      	str	r3, [sp, #4]
   23dec:	ab09      	add	r3, sp, #36	; 0x24
   23dee:	9300      	str	r3, [sp, #0]
   23df0:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
   23df4:	230a      	movs	r3, #10
   23df6:	f7ff b851 	b.w	22e9c <http_parser_execute+0x3b8>
			SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
   23dfa:	221d      	movs	r2, #29
   23dfc:	7de3      	ldrb	r3, [r4, #23]
   23dfe:	f7fe bece 	b.w	22b9e <http_parser_execute+0xba>
			h_state = h_matching_connection_keep_alive;
   23e02:	f04f 080f 	mov.w	r8, #15
   23e06:	e4e5      	b.n	237d4 <http_parser_execute+0xcf0>
			h_state = h_matching_connection_close;
   23e08:	f04f 0810 	mov.w	r8, #16
   23e0c:	e4e2      	b.n	237d4 <http_parser_execute+0xcf0>
			h_state = h_matching_connection_upgrade;
   23e0e:	f04f 0811 	mov.w	r8, #17
   23e12:	e4df      	b.n	237d4 <http_parser_execute+0xcf0>
			h_state = h_matching_connection_token;
   23e14:	f04f 0812 	mov.w	r8, #18
   23e18:	e4dc      	b.n	237d4 <http_parser_execute+0xcf0>
			} else if (ch == matcher[parser->index]) {
   23e1a:	2a20      	cmp	r2, #32
   23e1c:	f43f a974 	beq.w	23108 <http_parser_execute+0x624>
   23e20:	f7ff b90a 	b.w	23038 <http_parser_execute+0x554>
   23e24:	000387ec 	.word	0x000387ec

00023e28 <http_method_str>:
}


const char *http_method_str(enum http_method m)
{
	return ELEM_AT(method_strings, m, "<unknown>");
   23e28:	2820      	cmp	r0, #32
   23e2a:	bf9a      	itte	ls
   23e2c:	4b02      	ldrls	r3, [pc, #8]	; (23e38 <http_method_str+0x10>)
   23e2e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   23e32:	4802      	ldrhi	r0, [pc, #8]	; (23e3c <http_method_str+0x14>)
}
   23e34:	4770      	bx	lr
   23e36:	bf00      	nop
   23e38:	00034df4 	.word	0x00034df4
   23e3c:	00037ff6 	.word	0x00037ff6

00023e40 <parse_url_char>:
 * assumed that the caller cares about (and can detect) the transition between
 * URL and non-URL states by looking for these.
 */
enum state parse_url_char(enum state s, const char ch)
{
	if (ch == ' ' || ch == '\r' || ch == '\n') {
   23e40:	f1a1 030a 	sub.w	r3, r1, #10
   23e44:	b2db      	uxtb	r3, r3
   23e46:	2b16      	cmp	r3, #22
   23e48:	d90a      	bls.n	23e60 <parse_url_char+0x20>
	if (ch == '\t' || ch == '\f') {
		return s_dead;
	}
#endif

	switch (s) {
   23e4a:	3814      	subs	r0, #20
   23e4c:	280b      	cmp	r0, #11
   23e4e:	d80d      	bhi.n	23e6c <parse_url_char+0x2c>
   23e50:	e8df f000 	tbb	[pc, r0]
   23e54:	2b261c0e 	.word	0x2b261c0e
   23e58:	54303232 	.word	0x54303232
   23e5c:	8a786666 	.word	0x8a786666
	if (ch == ' ' || ch == '\r' || ch == '\n') {
   23e60:	4a5e      	ldr	r2, [pc, #376]	; (23fdc <parse_url_char+0x19c>)
   23e62:	fa22 f303 	lsr.w	r3, r2, r3
   23e66:	07da      	lsls	r2, r3, #31
   23e68:	f140 8099 	bpl.w	23f9e <parse_url_char+0x15e>
	switch (s) {
   23e6c:	2001      	movs	r0, #1

	/* We should never fall out of the switch above unless there's
	 * an error
	 */
	return s_dead;
}
   23e6e:	4770      	bx	lr
		if (ch == '/' || ch == '*') {
   23e70:	292f      	cmp	r1, #47	; 0x2f
   23e72:	f000 808e 	beq.w	23f92 <parse_url_char+0x152>
   23e76:	292a      	cmp	r1, #42	; 0x2a
   23e78:	f000 808b 	beq.w	23f92 <parse_url_char+0x152>
		if (IS_ALPHA(ch)) {
   23e7c:	f041 0120 	orr.w	r1, r1, #32
   23e80:	3961      	subs	r1, #97	; 0x61
			return s_req_schema;
   23e82:	2919      	cmp	r1, #25
   23e84:	bf8c      	ite	hi
   23e86:	2001      	movhi	r0, #1
   23e88:	2015      	movls	r0, #21
   23e8a:	4770      	bx	lr
		if (IS_ALPHA(ch)) {
   23e8c:	f041 0320 	orr.w	r3, r1, #32
   23e90:	3b61      	subs	r3, #97	; 0x61
   23e92:	2b19      	cmp	r3, #25
   23e94:	d977      	bls.n	23f86 <parse_url_char+0x146>
			return s_req_schema_slash;
   23e96:	293a      	cmp	r1, #58	; 0x3a
   23e98:	bf14      	ite	ne
   23e9a:	2001      	movne	r0, #1
   23e9c:	2016      	moveq	r0, #22
   23e9e:	4770      	bx	lr
			return s_req_schema_slash_slash;
   23ea0:	292f      	cmp	r1, #47	; 0x2f
   23ea2:	bf14      	ite	ne
   23ea4:	2001      	movne	r0, #1
   23ea6:	2017      	moveq	r0, #23
   23ea8:	4770      	bx	lr
			return s_req_server_start;
   23eaa:	292f      	cmp	r1, #47	; 0x2f
   23eac:	bf14      	ite	ne
   23eae:	2001      	movne	r0, #1
   23eb0:	2018      	moveq	r0, #24
   23eb2:	4770      	bx	lr
		if (ch == '@') {
   23eb4:	2940      	cmp	r1, #64	; 0x40
   23eb6:	d0d9      	beq.n	23e6c <parse_url_char+0x2c>
		if (ch == '/') {
   23eb8:	292f      	cmp	r1, #47	; 0x2f
   23eba:	d06a      	beq.n	23f92 <parse_url_char+0x152>
		if (ch == '?') {
   23ebc:	293f      	cmp	r1, #63	; 0x3f
   23ebe:	d064      	beq.n	23f8a <parse_url_char+0x14a>
		if (ch == '@') {
   23ec0:	2940      	cmp	r1, #64	; 0x40
   23ec2:	d064      	beq.n	23f8e <parse_url_char+0x14e>
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
   23ec4:	f041 0320 	orr.w	r3, r1, #32
   23ec8:	3b61      	subs	r3, #97	; 0x61
   23eca:	2b19      	cmp	r3, #25
   23ecc:	d906      	bls.n	23edc <parse_url_char+0x9c>
   23ece:	f1a1 0321 	sub.w	r3, r1, #33	; 0x21
   23ed2:	b2db      	uxtb	r3, r3
   23ed4:	2b1c      	cmp	r3, #28
   23ed6:	d903      	bls.n	23ee0 <parse_url_char+0xa0>
   23ed8:	297e      	cmp	r1, #126	; 0x7e
   23eda:	d106      	bne.n	23eea <parse_url_char+0xaa>
			return s_req_server;
   23edc:	2019      	movs	r0, #25
   23ede:	4770      	bx	lr
		if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
   23ee0:	4a3f      	ldr	r2, [pc, #252]	; (23fe0 <parse_url_char+0x1a0>)
   23ee2:	fa22 f303 	lsr.w	r3, r2, r3
   23ee6:	07db      	lsls	r3, r3, #31
   23ee8:	d4f8      	bmi.n	23edc <parse_url_char+0x9c>
   23eea:	f001 03fb 	and.w	r3, r1, #251	; 0xfb
   23eee:	2b5b      	cmp	r3, #91	; 0x5b
   23ef0:	d0f4      	beq.n	23edc <parse_url_char+0x9c>
			return s_req_server;
   23ef2:	295d      	cmp	r1, #93	; 0x5d
   23ef4:	bf14      	ite	ne
   23ef6:	2001      	movne	r0, #1
   23ef8:	2019      	moveq	r0, #25
   23efa:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   23efc:	4a39      	ldr	r2, [pc, #228]	; (23fe4 <parse_url_char+0x1a4>)
   23efe:	08cb      	lsrs	r3, r1, #3
   23f00:	5cd2      	ldrb	r2, [r2, r3]
   23f02:	2301      	movs	r3, #1
   23f04:	f001 0007 	and.w	r0, r1, #7
   23f08:	4083      	lsls	r3, r0
   23f0a:	421a      	tst	r2, r3
   23f0c:	d141      	bne.n	23f92 <parse_url_char+0x152>
   23f0e:	060a      	lsls	r2, r1, #24
   23f10:	d43f      	bmi.n	23f92 <parse_url_char+0x152>
		switch (ch) {
   23f12:	2923      	cmp	r1, #35	; 0x23
   23f14:	d041      	beq.n	23f9a <parse_url_char+0x15a>
			return s_req_query_string_start;
   23f16:	293f      	cmp	r1, #63	; 0x3f
   23f18:	bf14      	ite	ne
   23f1a:	2001      	movne	r0, #1
   23f1c:	201c      	moveq	r0, #28
   23f1e:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   23f20:	4a30      	ldr	r2, [pc, #192]	; (23fe4 <parse_url_char+0x1a4>)
   23f22:	08cb      	lsrs	r3, r1, #3
   23f24:	5cd2      	ldrb	r2, [r2, r3]
   23f26:	2301      	movs	r3, #1
   23f28:	f001 0007 	and.w	r0, r1, #7
   23f2c:	4083      	lsls	r3, r0
   23f2e:	421a      	tst	r2, r3
   23f30:	d131      	bne.n	23f96 <parse_url_char+0x156>
   23f32:	060b      	lsls	r3, r1, #24
   23f34:	d42f      	bmi.n	23f96 <parse_url_char+0x156>
		switch (ch) {
   23f36:	2923      	cmp	r1, #35	; 0x23
   23f38:	d02f      	beq.n	23f9a <parse_url_char+0x15a>
			return s_req_query_string;
   23f3a:	293f      	cmp	r1, #63	; 0x3f
   23f3c:	bf14      	ite	ne
   23f3e:	2001      	movne	r0, #1
   23f40:	201d      	moveq	r0, #29
   23f42:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   23f44:	4a27      	ldr	r2, [pc, #156]	; (23fe4 <parse_url_char+0x1a4>)
   23f46:	08cb      	lsrs	r3, r1, #3
   23f48:	5cd2      	ldrb	r2, [r2, r3]
   23f4a:	2301      	movs	r3, #1
   23f4c:	f001 0007 	and.w	r0, r1, #7
   23f50:	4083      	lsls	r3, r0
   23f52:	421a      	tst	r2, r3
   23f54:	d115      	bne.n	23f82 <parse_url_char+0x142>
   23f56:	060a      	lsls	r2, r1, #24
   23f58:	d413      	bmi.n	23f82 <parse_url_char+0x142>
		switch (ch) {
   23f5a:	2923      	cmp	r1, #35	; 0x23
   23f5c:	d01d      	beq.n	23f9a <parse_url_char+0x15a>
			return s_req_fragment;
   23f5e:	293f      	cmp	r1, #63	; 0x3f
   23f60:	bf14      	ite	ne
   23f62:	2001      	movne	r0, #1
   23f64:	201f      	moveq	r0, #31
   23f66:	4770      	bx	lr
		if (IS_URL_CHAR(ch)) {
   23f68:	4a1e      	ldr	r2, [pc, #120]	; (23fe4 <parse_url_char+0x1a4>)
   23f6a:	08cb      	lsrs	r3, r1, #3
   23f6c:	5cd2      	ldrb	r2, [r2, r3]
   23f6e:	2301      	movs	r3, #1
   23f70:	f001 0007 	and.w	r0, r1, #7
   23f74:	4083      	lsls	r3, r0
   23f76:	421a      	tst	r2, r3
   23f78:	d103      	bne.n	23f82 <parse_url_char+0x142>
   23f7a:	060b      	lsls	r3, r1, #24
   23f7c:	d401      	bmi.n	23f82 <parse_url_char+0x142>
		switch (ch) {
   23f7e:	2923      	cmp	r1, #35	; 0x23
   23f80:	d1ed      	bne.n	23f5e <parse_url_char+0x11e>
			return s_req_fragment;
   23f82:	201f      	movs	r0, #31
   23f84:	4770      	bx	lr
			return s_req_schema;
   23f86:	2015      	movs	r0, #21
   23f88:	4770      	bx	lr
			return s_req_query_string_start;
   23f8a:	201c      	movs	r0, #28
   23f8c:	4770      	bx	lr
			return s_req_server_with_at;
   23f8e:	201a      	movs	r0, #26
   23f90:	4770      	bx	lr
			return s_req_path;
   23f92:	201b      	movs	r0, #27
   23f94:	4770      	bx	lr
			return s_req_query_string;
   23f96:	201d      	movs	r0, #29
   23f98:	4770      	bx	lr
			return s_req_fragment_start;
   23f9a:	201e      	movs	r0, #30
   23f9c:	4770      	bx	lr
	switch (s) {
   23f9e:	3814      	subs	r0, #20
   23fa0:	280b      	cmp	r0, #11
   23fa2:	f63f af63 	bhi.w	23e6c <parse_url_char+0x2c>
   23fa6:	a301      	add	r3, pc, #4	; (adr r3, 23fac <parse_url_char+0x16c>)
   23fa8:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   23fac:	00023e7d 	.word	0x00023e7d
   23fb0:	00023e8d 	.word	0x00023e8d
   23fb4:	00023ea1 	.word	0x00023ea1
   23fb8:	00023eab 	.word	0x00023eab
   23fbc:	00023eb9 	.word	0x00023eb9
   23fc0:	00023eb9 	.word	0x00023eb9
   23fc4:	00023eb5 	.word	0x00023eb5
   23fc8:	00023efd 	.word	0x00023efd
   23fcc:	00023f21 	.word	0x00023f21
   23fd0:	00023f21 	.word	0x00023f21
   23fd4:	00023f45 	.word	0x00023f45
   23fd8:	00023f69 	.word	0x00023f69
   23fdc:	00400009 	.word	0x00400009
   23fe0:	17ffbff9 	.word	0x17ffbff9
   23fe4:	000388ec 	.word	0x000388ec

00023fe8 <on_header_field>:
	return 0;
}

static int on_header_field(struct http_parser *parser, const char *at,
			   size_t length)
{
   23fe8:	b570      	push	{r4, r5, r6, lr}
   23fea:	4604      	mov	r4, r0
						struct http_request,
						internal.parser);
	const char *content_len = "Content-Length";
	uint16_t len;

	len = strlen(content_len);
   23fec:	480e      	ldr	r0, [pc, #56]	; (24028 <on_header_field+0x40>)
{
   23fee:	4616      	mov	r6, r2
   23ff0:	460d      	mov	r5, r1
	len = strlen(content_len);
   23ff2:	f7f9 f855 	bl	1d0a0 <strlen>
	if (length >= len && strncasecmp(at, content_len, len) == 0) {
   23ff6:	b282      	uxth	r2, r0
   23ff8:	42b2      	cmp	r2, r6
   23ffa:	d80a      	bhi.n	24012 <on_header_field+0x2a>
   23ffc:	4628      	mov	r0, r5
   23ffe:	490a      	ldr	r1, [pc, #40]	; (24028 <on_header_field+0x40>)
   24000:	f009 ff4a 	bl	2de98 <strncasecmp>
   24004:	b928      	cbnz	r0, 24012 <on_header_field+0x2a>
		req->internal.response.cl_present = true;
   24006:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   2400a:	f043 0301 	orr.w	r3, r3, #1
   2400e:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	}

	print_header_field(length, at);

	if (req->internal.response.http_cb &&
   24012:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   24014:	b12b      	cbz	r3, 24022 <on_header_field+0x3a>
	    req->internal.response.http_cb->on_header_field) {
   24016:	68db      	ldr	r3, [r3, #12]
	if (req->internal.response.http_cb &&
   24018:	b11b      	cbz	r3, 24022 <on_header_field+0x3a>
		req->internal.response.http_cb->on_header_field(parser, at,
   2401a:	4632      	mov	r2, r6
   2401c:	4629      	mov	r1, r5
   2401e:	4620      	mov	r0, r4
   24020:	4798      	blx	r3
								length);
	}

	return 0;
}
   24022:	2000      	movs	r0, #0
   24024:	bd70      	pop	{r4, r5, r6, pc}
   24026:	bf00      	nop
   24028:	0003890c 	.word	0x0003890c

0002402c <http_client_req>:
	(void)zsock_shutdown(data->sock, ZSOCK_SHUT_RD);
}

int http_client_req(int sock, struct http_request *req,
		    int32_t timeout, void *user_data)
{
   2402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	/* Utilize the network usage by sending data in bigger blocks */
	char send_buf[MAX_SEND_BUF_LEN];
	const size_t send_buf_max_len = sizeof(send_buf);
	size_t send_buf_pos = 0;
   24030:	2600      	movs	r6, #0
{
   24032:	b0bf      	sub	sp, #252	; 0xfc
	int total_sent = 0;
	int ret, total_recv, i;
	const char *method;

	if (sock < 0 || req == NULL || req->response == NULL ||
   24034:	1e07      	subs	r7, r0, #0
{
   24036:	460c      	mov	r4, r1
   24038:	4615      	mov	r5, r2
   2403a:	469a      	mov	sl, r3
	size_t send_buf_pos = 0;
   2403c:	960a      	str	r6, [sp, #40]	; 0x28
	if (sock < 0 || req == NULL || req->response == NULL ||
   2403e:	f2c0 8223 	blt.w	24488 <http_client_req+0x45c>
   24042:	2900      	cmp	r1, #0
   24044:	f000 8220 	beq.w	24488 <http_client_req+0x45c>
   24048:	f8d1 b0d4 	ldr.w	fp, [r1, #212]	; 0xd4
   2404c:	f1bb 0f00 	cmp.w	fp, #0
   24050:	f000 821a 	beq.w	24488 <http_client_req+0x45c>
	    req->recv_buf == NULL || req->recv_buf_len == 0) {
   24054:	f8d1 90dc 	ldr.w	r9, [r1, #220]	; 0xdc
	if (sock < 0 || req == NULL || req->response == NULL ||
   24058:	f1b9 0f00 	cmp.w	r9, #0
   2405c:	f000 8214 	beq.w	24488 <http_client_req+0x45c>
	    req->recv_buf == NULL || req->recv_buf_len == 0) {
   24060:	f8d1 80e0 	ldr.w	r8, [r1, #224]	; 0xe0
   24064:	f1b8 0f00 	cmp.w	r8, #0
   24068:	f000 820e 	beq.w	24488 <http_client_req+0x45c>
   2406c:	2240      	movs	r2, #64	; 0x40
   2406e:	4631      	mov	r1, r6
   24070:	f104 0080 	add.w	r0, r4, #128	; 0x80
   24074:	f00f fdfb 	bl	33c6e <memset>
		return -EINVAL;
	}

	memset(&req->internal.response, 0, sizeof(req->internal.response));

	req->internal.response.http_cb = req->http_cb;
   24078:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	req->internal.response.cb = req->response;
	req->internal.response.recv_buf = req->recv_buf;
	req->internal.response.recv_buf_len = req->recv_buf_len;
	req->internal.user_data = user_data;
	req->internal.sock = sock;
	req->internal.timeout = SYS_TIMEOUT_MS(timeout);
   2407c:	1c6a      	adds	r2, r5, #1
	req->internal.response.cb = req->response;
   2407e:	e9c4 3b1e 	strd	r3, fp, [r4, #120]	; 0x78
	req->internal.response.recv_buf_len = req->recv_buf_len;
   24082:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
	req->internal.sock = sock;
   24086:	e9c4 a730 	strd	sl, r7, [r4, #192]	; 0xc0
	req->internal.timeout = SYS_TIMEOUT_MS(timeout);
   2408a:	f000 809b 	beq.w	241c4 <http_client_req+0x198>
			return ((t * to_hz + off) / from_hz);
   2408e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   24092:	f240 30e7 	movw	r0, #999	; 0x3e7
   24096:	4631      	mov	r1, r6
   24098:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   2409c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   240a0:	2300      	movs	r3, #0
   240a2:	fbc5 010c 	smlal	r0, r1, r5, ip
   240a6:	f7f8 fe83 	bl	1cdb0 <__aeabi_uldivmod>
   240aa:	e9c4 0132 	strd	r0, r1, [r4, #200]	; 0xc8

	method = http_method_str(req->method);
   240ae:	f894 00d0 	ldrb.w	r0, [r4, #208]	; 0xd0
   240b2:	f7ff feb9 	bl	23e28 <http_method_str>

	ret = http_send_data(sock, send_buf, send_buf_max_len, &send_buf_pos,
   240b6:	2500      	movs	r5, #0
   240b8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   240bc:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
   240c0:	9304      	str	r3, [sp, #16]
   240c2:	f8df 8314 	ldr.w	r8, [pc, #788]	; 243d8 <http_client_req+0x3ac>
   240c6:	4bb3      	ldr	r3, [pc, #716]	; (24394 <http_client_req+0x368>)
   240c8:	9000      	str	r0, [sp, #0]
   240ca:	e9cd 3201 	strd	r3, r2, [sp, #4]
   240ce:	9303      	str	r3, [sp, #12]
   240d0:	22c0      	movs	r2, #192	; 0xc0
   240d2:	4638      	mov	r0, r7
   240d4:	9506      	str	r5, [sp, #24]
   240d6:	f8cd 8014 	str.w	r8, [sp, #20]
   240da:	ab0a      	add	r3, sp, #40	; 0x28
   240dc:	a90e      	add	r1, sp, #56	; 0x38
   240de:	f00c ffc8 	bl	31072 <http_send_data.constprop.0>
			     method, " ", req->url, " ", req->protocol,
			     HTTP_CRLF, NULL);
	if (ret < 0) {
   240e2:	1e06      	subs	r6, r0, #0
   240e4:	f2c0 81d3 	blt.w	2448e <http_client_req+0x462>
	}

	total_sent += ret;

	if (req->port) {
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   240e8:	e9d4 233d 	ldrd	r2, r3, [r4, #244]	; 0xf4
   240ec:	f8df b2ec 	ldr.w	fp, [pc, #748]	; 243dc <http_client_req+0x3b0>
	if (req->port) {
   240f0:	2b00      	cmp	r3, #0
   240f2:	d06b      	beq.n	241cc <http_client_req+0x1a0>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   240f4:	9304      	str	r3, [sp, #16]
   240f6:	4ba8      	ldr	r3, [pc, #672]	; (24398 <http_client_req+0x36c>)
   240f8:	4638      	mov	r0, r7
   240fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
   240fe:	4ba7      	ldr	r3, [pc, #668]	; (2439c <http_client_req+0x370>)
   24100:	22c0      	movs	r2, #192	; 0xc0
   24102:	9300      	str	r3, [sp, #0]
   24104:	e9cd 8505 	strd	r8, r5, [sp, #20]
   24108:	f8cd b004 	str.w	fp, [sp, #4]
   2410c:	ab0a      	add	r3, sp, #40	; 0x28
   2410e:	a90e      	add	r1, sp, #56	; 0x38
   24110:	f00c ffaf 	bl	31072 <http_send_data.constprop.0>
	} else {
		ret = http_send_data(sock, send_buf, send_buf_max_len,
				     &send_buf_pos, "Host", ": ", req->host,
				     HTTP_CRLF, NULL);

		if (ret < 0) {
   24114:	1e05      	subs	r5, r0, #0
   24116:	db51      	blt.n	241bc <http_client_req+0x190>
		}

		total_sent += ret;
	}

	if (req->optional_headers_cb) {
   24118:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
		total_sent += ret;
   2411c:	442e      	add	r6, r5
	if (req->optional_headers_cb) {
   2411e:	2b00      	cmp	r3, #0
   24120:	d078      	beq.n	24214 <http_client_req+0x1e8>
		ret = http_flush_data(sock, send_buf, send_buf_pos);
   24122:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
	ret = sendall(sock, send_buf, send_buf_len);
   24126:	4638      	mov	r0, r7
   24128:	464a      	mov	r2, r9
   2412a:	a90e      	add	r1, sp, #56	; 0x38
   2412c:	f00c ff86 	bl	3103c <sendall>
	if (ret < 0) {
   24130:	1e05      	subs	r5, r0, #0
   24132:	db43      	blt.n	241bc <http_client_req+0x190>
		if (ret < 0) {
   24134:	f1b9 0f00 	cmp.w	r9, #0
   24138:	f2c0 81ab 	blt.w	24492 <http_client_req+0x466>
			goto out;
		}

		send_buf_pos = 0;
   2413c:	2300      	movs	r3, #0
		total_sent += ret;

		ret = req->optional_headers_cb(sock, req, user_data);
   2413e:	4652      	mov	r2, sl
		send_buf_pos = 0;
   24140:	930a      	str	r3, [sp, #40]	; 0x28
		ret = req->optional_headers_cb(sock, req, user_data);
   24142:	4621      	mov	r1, r4
   24144:	4638      	mov	r0, r7
   24146:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2414a:	4798      	blx	r3
		if (ret < 0) {
   2414c:	1e05      	subs	r5, r0, #0
   2414e:	db35      	blt.n	241bc <http_client_req+0x190>
		total_sent += ret;
   24150:	444e      	add	r6, r9
			goto out;
		}

		total_sent += ret;
   24152:	442e      	add	r6, r5
   24154:	f04f 0900 	mov.w	r9, #0

			total_sent += ret;
		}
	}

	for (i = 0; req->header_fields && req->header_fields[i]; i++) {
   24158:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   2415c:	b11b      	cbz	r3, 24166 <http_client_req+0x13a>
   2415e:	f853 3009 	ldr.w	r3, [r3, r9]
   24162:	2b00      	cmp	r3, #0
   24164:	d158      	bne.n	24218 <http_client_req+0x1ec>
		}

		total_sent += ret;
	}

	if (req->content_type_value) {
   24166:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2416a:	b17b      	cbz	r3, 2418c <http_client_req+0x160>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   2416c:	2200      	movs	r2, #0
   2416e:	e9cd b301 	strd	fp, r3, [sp, #4]
   24172:	4b8b      	ldr	r3, [pc, #556]	; (243a0 <http_client_req+0x374>)
   24174:	e9cd 8203 	strd	r8, r2, [sp, #12]
   24178:	9300      	str	r3, [sp, #0]
   2417a:	22c0      	movs	r2, #192	; 0xc0
   2417c:	4638      	mov	r0, r7
   2417e:	ab0a      	add	r3, sp, #40	; 0x28
   24180:	a90e      	add	r1, sp, #56	; 0x38
   24182:	f00c ff76 	bl	31072 <http_send_data.constprop.0>
				     &send_buf_pos, "Content-Type", ": ",
				     req->content_type_value, HTTP_CRLF, NULL);
		if (ret < 0) {
   24186:	1e05      	subs	r5, r0, #0
   24188:	db18      	blt.n	241bc <http_client_req+0x190>
			goto out;
		}

		total_sent += ret;
   2418a:	442e      	add	r6, r5
	}

	if (req->payload || req->payload_cb) {
   2418c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   24190:	b923      	cbnz	r3, 2419c <http_client_req+0x170>
   24192:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   24196:	2b00      	cmp	r3, #0
   24198:	f000 8135 	beq.w	24406 <http_client_req+0x3da>
		if (req->payload_len) {
   2419c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   241a0:	2b00      	cmp	r3, #0
   241a2:	f000 80ed 	beq.w	24380 <http_client_req+0x354>
			char content_len_str[HTTP_CONTENT_LEN_SIZE];

			ret = snprintk(content_len_str, HTTP_CONTENT_LEN_SIZE,
   241a6:	ad0b      	add	r5, sp, #44	; 0x2c
   241a8:	210b      	movs	r1, #11
   241aa:	4628      	mov	r0, r5
   241ac:	4a7d      	ldr	r2, [pc, #500]	; (243a4 <http_client_req+0x378>)
   241ae:	f00b fb51 	bl	2f854 <snprintk>
				       "%zd", req->payload_len);
			if (ret <= 0 || ret >= HTTP_CONTENT_LEN_SIZE) {
   241b2:	3801      	subs	r0, #1
   241b4:	2809      	cmp	r0, #9
   241b6:	d93e      	bls.n	24236 <http_client_req+0x20a>
				ret = -ENOMEM;
   241b8:	f06f 050b 	mvn.w	r5, #11

	return total_sent;

out:
	return ret;
}
   241bc:	4628      	mov	r0, r5
   241be:	b03f      	add	sp, #252	; 0xfc
   241c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	req->internal.timeout = SYS_TIMEOUT_MS(timeout);
   241c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   241c8:	4601      	mov	r1, r0
   241ca:	e76e      	b.n	240aa <http_client_req+0x7e>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   241cc:	e9cd 8303 	strd	r8, r3, [sp, #12]
   241d0:	4b72      	ldr	r3, [pc, #456]	; (2439c <http_client_req+0x370>)
   241d2:	e9cd b201 	strd	fp, r2, [sp, #4]
   241d6:	9300      	str	r3, [sp, #0]
   241d8:	22c0      	movs	r2, #192	; 0xc0
   241da:	4638      	mov	r0, r7
   241dc:	ab0a      	add	r3, sp, #40	; 0x28
   241de:	a90e      	add	r1, sp, #56	; 0x38
   241e0:	f00c ff47 	bl	31072 <http_send_data.constprop.0>
   241e4:	e796      	b.n	24114 <http_client_req+0xe8>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   241e6:	2200      	movs	r2, #0
   241e8:	4638      	mov	r0, r7
   241ea:	e9cd 3200 	strd	r3, r2, [sp]
   241ee:	a90e      	add	r1, sp, #56	; 0x38
   241f0:	22c0      	movs	r2, #192	; 0xc0
   241f2:	ab0a      	add	r3, sp, #40	; 0x28
   241f4:	f00c ff3d 	bl	31072 <http_send_data.constprop.0>
			if (ret < 0) {
   241f8:	1e05      	subs	r5, r0, #0
   241fa:	f109 0904 	add.w	r9, r9, #4
   241fe:	dbdd      	blt.n	241bc <http_client_req+0x190>
			total_sent += ret;
   24200:	442e      	add	r6, r5
		for (i = 0; req->optional_headers && req->optional_headers[i];
   24202:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
   24206:	2b00      	cmp	r3, #0
   24208:	d0a4      	beq.n	24154 <http_client_req+0x128>
   2420a:	f853 3009 	ldr.w	r3, [r3, r9]
   2420e:	2b00      	cmp	r3, #0
   24210:	d1e9      	bne.n	241e6 <http_client_req+0x1ba>
   24212:	e79f      	b.n	24154 <http_client_req+0x128>
   24214:	4699      	mov	r9, r3
   24216:	e7f4      	b.n	24202 <http_client_req+0x1d6>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   24218:	2200      	movs	r2, #0
   2421a:	4638      	mov	r0, r7
   2421c:	e9cd 3200 	strd	r3, r2, [sp]
   24220:	a90e      	add	r1, sp, #56	; 0x38
   24222:	22c0      	movs	r2, #192	; 0xc0
   24224:	ab0a      	add	r3, sp, #40	; 0x28
   24226:	f00c ff24 	bl	31072 <http_send_data.constprop.0>
		if (ret < 0) {
   2422a:	1e05      	subs	r5, r0, #0
   2422c:	f109 0904 	add.w	r9, r9, #4
   24230:	dbc4      	blt.n	241bc <http_client_req+0x190>
		total_sent += ret;
   24232:	442e      	add	r6, r5
	for (i = 0; req->header_fields && req->header_fields[i]; i++) {
   24234:	e790      	b.n	24158 <http_client_req+0x12c>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   24236:	2300      	movs	r3, #0
   24238:	e9cd 8304 	strd	r8, r3, [sp, #16]
   2423c:	4b5a      	ldr	r3, [pc, #360]	; (243a8 <http_client_req+0x37c>)
   2423e:	22c0      	movs	r2, #192	; 0xc0
   24240:	9300      	str	r3, [sp, #0]
   24242:	4638      	mov	r0, r7
   24244:	e9cd 5802 	strd	r5, r8, [sp, #8]
   24248:	f8cd b004 	str.w	fp, [sp, #4]
   2424c:	ab0a      	add	r3, sp, #40	; 0x28
   2424e:	a90e      	add	r1, sp, #56	; 0x38
   24250:	f00c ff0f 	bl	31072 <http_send_data.constprop.0>
		if (ret < 0) {
   24254:	2800      	cmp	r0, #0
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   24256:	4680      	mov	r8, r0
		if (ret < 0) {
   24258:	f2c0 811d 	blt.w	24496 <http_client_req+0x46a>
		ret = http_flush_data(sock, send_buf, send_buf_pos);
   2425c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
	ret = sendall(sock, send_buf, send_buf_len);
   24260:	4638      	mov	r0, r7
   24262:	464a      	mov	r2, r9
   24264:	a90e      	add	r1, sp, #56	; 0x38
   24266:	f00c fee9 	bl	3103c <sendall>
	if (ret < 0) {
   2426a:	1e05      	subs	r5, r0, #0
   2426c:	dba6      	blt.n	241bc <http_client_req+0x190>
		if (ret < 0) {
   2426e:	f1b9 0f00 	cmp.w	r9, #0
	return (int)send_buf_len;
   24272:	464d      	mov	r5, r9
		if (ret < 0) {
   24274:	dba2      	blt.n	241bc <http_client_req+0x190>
		send_buf_pos = 0;
   24276:	2300      	movs	r3, #0
   24278:	930a      	str	r3, [sp, #40]	; 0x28
		if (req->payload_cb) {
   2427a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
		total_sent += ret;
   2427e:	4446      	add	r6, r8
		total_sent += ret;
   24280:	44b1      	add	r9, r6
		if (req->payload_cb) {
   24282:	2b00      	cmp	r3, #0
   24284:	f000 80ac 	beq.w	243e0 <http_client_req+0x3b4>
			ret = req->payload_cb(sock, req, user_data);
   24288:	4652      	mov	r2, sl
   2428a:	4621      	mov	r1, r4
   2428c:	4638      	mov	r0, r7
   2428e:	4798      	blx	r3
			if (ret < 0) {
   24290:	1e05      	subs	r5, r0, #0
   24292:	db93      	blt.n	241bc <http_client_req+0x190>
			total_sent += ret;
   24294:	eb09 0605 	add.w	r6, r9, r5
	if (send_buf_pos > 0) {
   24298:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2429c:	f1b8 0f00 	cmp.w	r8, #0
   242a0:	f000 80be 	beq.w	24420 <http_client_req+0x3f4>
	ret = sendall(sock, send_buf, send_buf_len);
   242a4:	4642      	mov	r2, r8
   242a6:	4638      	mov	r0, r7
   242a8:	a90e      	add	r1, sp, #56	; 0x38
   242aa:	f00c fec7 	bl	3103c <sendall>
	if (ret < 0) {
   242ae:	1e05      	subs	r5, r0, #0
   242b0:	db84      	blt.n	241bc <http_client_req+0x190>
		if (ret < 0) {
   242b2:	f1b8 0500 	subs.w	r5, r8, #0
   242b6:	db81      	blt.n	241bc <http_client_req+0x190>
		total_sent += ret;
   242b8:	4435      	add	r5, r6
	http_client_init_parser(&req->internal.parser,
   242ba:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	http_parser_init(parser, HTTP_RESPONSE);
   242be:	2101      	movs	r1, #1
   242c0:	4650      	mov	r0, sl
   242c2:	f00c fdea 	bl	30e9a <http_parser_init>
	settings->on_body = on_body;
   242c6:	4b39      	ldr	r3, [pc, #228]	; (243ac <http_client_req+0x380>)
	http_client_init_parser(&req->internal.parser,
   242c8:	f104 0b50 	add.w	fp, r4, #80	; 0x50
	settings->on_body = on_body;
   242cc:	66a3      	str	r3, [r4, #104]	; 0x68
	settings->on_chunk_complete = on_chunk_complete;
   242ce:	4b38      	ldr	r3, [pc, #224]	; (243b0 <http_client_req+0x384>)
   242d0:	6763      	str	r3, [r4, #116]	; 0x74
	settings->on_chunk_header = on_chunk_header;
   242d2:	4b38      	ldr	r3, [pc, #224]	; (243b4 <http_client_req+0x388>)
   242d4:	6723      	str	r3, [r4, #112]	; 0x70
	settings->on_headers_complete = on_headers_complete;
   242d6:	4b38      	ldr	r3, [pc, #224]	; (243b8 <http_client_req+0x38c>)
   242d8:	6663      	str	r3, [r4, #100]	; 0x64
	settings->on_header_field = on_header_field;
   242da:	4b38      	ldr	r3, [pc, #224]	; (243bc <http_client_req+0x390>)
   242dc:	65e3      	str	r3, [r4, #92]	; 0x5c
	settings->on_header_value = on_header_value;
   242de:	4b38      	ldr	r3, [pc, #224]	; (243c0 <http_client_req+0x394>)
   242e0:	6623      	str	r3, [r4, #96]	; 0x60
	settings->on_message_begin = on_message_begin;
   242e2:	4b38      	ldr	r3, [pc, #224]	; (243c4 <http_client_req+0x398>)
   242e4:	6523      	str	r3, [r4, #80]	; 0x50
	settings->on_message_complete = on_message_complete;
   242e6:	4b38      	ldr	r3, [pc, #224]	; (243c8 <http_client_req+0x39c>)
   242e8:	66e3      	str	r3, [r4, #108]	; 0x6c
	settings->on_status = on_status;
   242ea:	4b38      	ldr	r3, [pc, #224]	; (243cc <http_client_req+0x3a0>)
   242ec:	65a3      	str	r3, [r4, #88]	; 0x58
	settings->on_url = on_url;
   242ee:	4b38      	ldr	r3, [pc, #224]	; (243d0 <http_client_req+0x3a4>)
   242f0:	6563      	str	r3, [r4, #84]	; 0x54
	if (!K_TIMEOUT_EQ(req->internal.timeout, K_FOREVER) &&
   242f2:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
   242f6:	3301      	adds	r3, #1
   242f8:	f142 0200 	adc.w	r2, r2, #0
   242fc:	2b02      	cmp	r3, #2
   242fe:	f172 0300 	sbcs.w	r3, r2, #0
   24302:	d308      	bcc.n	24316 <http_client_req+0x2ea>
		k_work_init_delayable(&req->internal.work, http_timeout);
   24304:	4620      	mov	r0, r4
   24306:	4933      	ldr	r1, [pc, #204]	; (243d4 <http_client_req+0x3a8>)
   24308:	f00f f970 	bl	335ec <k_work_init_delayable>
		(void)k_work_reschedule(&req->internal.work,
   2430c:	e9d4 2332 	ldrd	r2, r3, [r4, #200]	; 0xc8
   24310:	4620      	mov	r0, r4
   24312:	f008 fa61 	bl	2c7d8 <k_work_reschedule>
	memset(&req->internal.response, 0, sizeof(req->internal.response));
   24316:	2600      	movs	r6, #0
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   24318:	46b0      	mov	r8, r6
   2431a:	f104 0978 	add.w	r9, r4, #120	; 0x78
		received = zsock_recv(sock, req->internal.response.recv_buf + offset,
   2431e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   24322:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   24326:	4431      	add	r1, r6
   24328:	1b92      	subs	r2, r2, r6
   2432a:	2300      	movs	r3, #0
   2432c:	4638      	mov	r0, r7
   2432e:	e9cd 8800 	strd	r8, r8, [sp]
   24332:	f00c fa50 	bl	307d6 <z_impl_zsock_recvfrom>
		if (received == 0) {
   24336:	1e03      	subs	r3, r0, #0
   24338:	d174      	bne.n	24424 <http_client_req+0x3f8>
			if (req->internal.response.cb) {
   2433a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
   2433c:	b196      	cbz	r6, 24364 <http_client_req+0x338>
   2433e:	2220      	movs	r2, #32
   24340:	4619      	mov	r1, r3
				req->internal.response.content_length = 0;
   24342:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90
				req->internal.response.http_status_code = 0;
   24346:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
				req->internal.response.processed = 0;
   2434a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
				req->internal.response.body_frag_start = NULL;
   2434e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   24352:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   24356:	f00f fc8a 	bl	33c6e <memset>
				req->internal.response.cb(&req->internal.response,
   2435a:	2101      	movs	r1, #1
   2435c:	4648      	mov	r0, r9
   2435e:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   24362:	47b0      	blx	r6
	if (!K_TIMEOUT_EQ(req->internal.timeout, K_FOREVER) &&
   24364:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	; 0xc8
   24368:	3301      	adds	r3, #1
   2436a:	f142 0200 	adc.w	r2, r2, #0
   2436e:	2b02      	cmp	r3, #2
   24370:	f172 0300 	sbcs.w	r3, r2, #0
   24374:	f4ff af22 	bcc.w	241bc <http_client_req+0x190>
		(void)k_work_cancel_delayable(&req->internal.work);
   24378:	4620      	mov	r0, r4
   2437a:	f00f f943 	bl	33604 <k_work_cancel_delayable>
   2437e:	e71d      	b.n	241bc <http_client_req+0x190>
			ret = http_send_data(sock, send_buf, send_buf_max_len,
   24380:	e9cd 8300 	strd	r8, r3, [sp]
   24384:	22c0      	movs	r2, #192	; 0xc0
   24386:	4638      	mov	r0, r7
   24388:	ab0a      	add	r3, sp, #40	; 0x28
   2438a:	a90e      	add	r1, sp, #56	; 0x38
   2438c:	f00c fe71 	bl	31072 <http_send_data.constprop.0>
   24390:	e760      	b.n	24254 <http_client_req+0x228>
   24392:	bf00      	nop
   24394:	000379d9 	.word	0x000379d9
   24398:	00039e5c 	.word	0x00039e5c
   2439c:	0003891b 	.word	0x0003891b
   243a0:	00038920 	.word	0x00038920
   243a4:	0003892d 	.word	0x0003892d
   243a8:	0003890c 	.word	0x0003890c
   243ac:	00030edf 	.word	0x00030edf
   243b0:	00030f55 	.word	0x00030f55
   243b4:	00030f45 	.word	0x00030f45
   243b8:	00030fcb 	.word	0x00030fcb
   243bc:	00023fe9 	.word	0x00023fe9
   243c0:	00030f65 	.word	0x00030f65
   243c4:	00030f17 	.word	0x00030f17
   243c8:	00030f27 	.word	0x00030f27
   243cc:	00031003 	.word	0x00031003
   243d0:	00030ecf 	.word	0x00030ecf
   243d4:	000310f9 	.word	0x000310f9
   243d8:	00039840 	.word	0x00039840
   243dc:	000398fe 	.word	0x000398fe
			if (req->payload_len == 0) {
   243e0:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
   243e4:	b926      	cbnz	r6, 243f0 <http_client_req+0x3c4>
				length = strlen(req->payload);
   243e6:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
   243ea:	f7f8 fe59 	bl	1d0a0 <strlen>
   243ee:	4606      	mov	r6, r0
			ret = sendall(sock, req->payload, length);
   243f0:	4632      	mov	r2, r6
   243f2:	4638      	mov	r0, r7
   243f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   243f8:	f00c fe20 	bl	3103c <sendall>
			if (ret < 0) {
   243fc:	1e05      	subs	r5, r0, #0
   243fe:	f6ff aedd 	blt.w	241bc <http_client_req+0x190>
			total_sent += length;
   24402:	444e      	add	r6, r9
   24404:	e748      	b.n	24298 <http_client_req+0x26c>
		ret = http_send_data(sock, send_buf, send_buf_max_len,
   24406:	e9cd 8300 	strd	r8, r3, [sp]
   2440a:	22c0      	movs	r2, #192	; 0xc0
   2440c:	4638      	mov	r0, r7
   2440e:	ab0a      	add	r3, sp, #40	; 0x28
   24410:	a90e      	add	r1, sp, #56	; 0x38
   24412:	f00c fe2e 	bl	31072 <http_send_data.constprop.0>
		if (ret < 0) {
   24416:	1e05      	subs	r5, r0, #0
   24418:	f6ff aed0 	blt.w	241bc <http_client_req+0x190>
		total_sent += ret;
   2441c:	442e      	add	r6, r5
   2441e:	e73b      	b.n	24298 <http_client_req+0x26c>
   24420:	4635      	mov	r5, r6
   24422:	e74a      	b.n	242ba <http_client_req+0x28e>
		} else if (received < 0) {
   24424:	da02      	bge.n	2442c <http_client_req+0x400>
			ret = -errno;
   24426:	f00c fc48 	bl	30cba <__errno>
			break;
   2442a:	e79b      	b.n	24364 <http_client_req+0x338>
			req->internal.response.data_len += received;
   2442c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
			(void)http_parser_execute(
   24430:	4659      	mov	r1, fp
			req->internal.response.data_len += received;
   24432:	441a      	add	r2, r3
   24434:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
				req->internal.response.recv_buf + offset,
   24438:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
			(void)http_parser_execute(
   2443c:	4650      	mov	r0, sl
   2443e:	4432      	add	r2, r6
   24440:	9309      	str	r3, [sp, #36]	; 0x24
   24442:	f7fe fb4f 	bl	22ae4 <http_parser_execute>
		offset += received;
   24446:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24448:	441e      	add	r6, r3
		if (offset >= req->internal.response.recv_buf_len) {
   2444a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
			offset = 0;
   2444e:	429e      	cmp	r6, r3
   24450:	bf28      	it	cs
   24452:	2600      	movcs	r6, #0
		if (req->internal.response.cb) {
   24454:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   24456:	b17b      	cbz	r3, 24478 <http_client_req+0x44c>
			if (req->internal.response.message_complete) {
   24458:	f894 10be 	ldrb.w	r1, [r4, #190]	; 0xbe
   2445c:	f011 0104 	ands.w	r1, r1, #4
   24460:	d110      	bne.n	24484 <http_client_req+0x458>
			} else if (offset == 0) {
   24462:	2e00      	cmp	r6, #0
   24464:	f47f af5b 	bne.w	2431e <http_client_req+0x2f2>
				req->internal.response.cb(&req->internal.response,
   24468:	4648      	mov	r0, r9
   2446a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   2446e:	4798      	blx	r3
				req->internal.response.body_frag_len = 0;
   24470:	e9c4 8820 	strd	r8, r8, [r4, #128]	; 0x80
				req->internal.response.data_len = 0;
   24474:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
		if (req->internal.response.message_complete) {
   24478:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
   2447c:	075b      	lsls	r3, r3, #29
   2447e:	f57f af4e 	bpl.w	2431e <http_client_req+0x2f2>
   24482:	e76f      	b.n	24364 <http_client_req+0x338>
				event = HTTP_DATA_FINAL;
   24484:	2101      	movs	r1, #1
   24486:	e7ef      	b.n	24468 <http_client_req+0x43c>
		return -EINVAL;
   24488:	f06f 0515 	mvn.w	r5, #21
   2448c:	e696      	b.n	241bc <http_client_req+0x190>
   2448e:	4635      	mov	r5, r6
   24490:	e694      	b.n	241bc <http_client_req+0x190>
   24492:	464d      	mov	r5, r9
   24494:	e692      	b.n	241bc <http_client_req+0x190>
   24496:	4605      	mov	r5, r0
   24498:	e690      	b.n	241bc <http_client_req+0x190>
   2449a:	bf00      	nop

0002449c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   2449c:	4b08      	ldr	r3, [pc, #32]	; (244c0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2449e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   244a0:	1ac3      	subs	r3, r0, r3
{
   244a2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   244a4:	4907      	ldr	r1, [pc, #28]	; (244c4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   244a6:	109b      	asrs	r3, r3, #2
{
   244a8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   244aa:	4359      	muls	r1, r3
   244ac:	2240      	movs	r2, #64	; 0x40
   244ae:	4806      	ldr	r0, [pc, #24]	; (244c8 <onoff_stop+0x2c>)
   244b0:	f00c fe43 	bl	3113a <stop>
	notify(mgr, res);
   244b4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   244b6:	4601      	mov	r1, r0
	notify(mgr, res);
   244b8:	4620      	mov	r0, r4
}
   244ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   244be:	4718      	bx	r3
   244c0:	2000d298 	.word	0x2000d298
   244c4:	b6db6db7 	.word	0xb6db6db7
   244c8:	0003477c 	.word	0x0003477c

000244cc <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   244cc:	2340      	movs	r3, #64	; 0x40
{
   244ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   244d0:	4c0b      	ldr	r4, [pc, #44]	; (24500 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   244d2:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
   244d4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   244d6:	460b      	mov	r3, r1
{
   244d8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   244da:	490a      	ldr	r1, [pc, #40]	; (24504 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
   244dc:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   244de:	4361      	muls	r1, r4
{
   244e0:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   244e2:	4a09      	ldr	r2, [pc, #36]	; (24508 <onoff_start+0x3c>)
   244e4:	4809      	ldr	r0, [pc, #36]	; (2450c <onoff_start+0x40>)
   244e6:	f00c fe55 	bl	31194 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   244ea:	1e01      	subs	r1, r0, #0
   244ec:	da05      	bge.n	244fa <onoff_start+0x2e>
		notify(mgr, err);
   244ee:	4630      	mov	r0, r6
   244f0:	462b      	mov	r3, r5
	}
}
   244f2:	b002      	add	sp, #8
   244f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   244f8:	4718      	bx	r3
}
   244fa:	b002      	add	sp, #8
   244fc:	bd70      	pop	{r4, r5, r6, pc}
   244fe:	bf00      	nop
   24500:	2000d298 	.word	0x2000d298
   24504:	b6db6db7 	.word	0xb6db6db7
   24508:	00031201 	.word	0x00031201
   2450c:	0003477c 	.word	0x0003477c

00024510 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   24510:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   24512:	2200      	movs	r2, #0
   24514:	2101      	movs	r1, #1
{
   24516:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   24518:	2005      	movs	r0, #5
   2451a:	f7fd fb1b 	bl	21b54 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   2451e:	480f      	ldr	r0, [pc, #60]	; (2455c <clk_init+0x4c>)
   24520:	f004 ff34 	bl	2938c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   24524:	4b0e      	ldr	r3, [pc, #56]	; (24560 <clk_init+0x50>)
   24526:	4298      	cmp	r0, r3
   24528:	d115      	bne.n	24556 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   2452a:	f004 ff3f 	bl	293ac <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   2452e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   24530:	490c      	ldr	r1, [pc, #48]	; (24564 <clk_init+0x54>)
   24532:	4630      	mov	r0, r6
   24534:	f00b f9eb 	bl	2f90e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   24538:	2800      	cmp	r0, #0
   2453a:	db0b      	blt.n	24554 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   2453c:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
   2453e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   24540:	4908      	ldr	r1, [pc, #32]	; (24564 <clk_init+0x54>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   24542:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   24544:	f104 001c 	add.w	r0, r4, #28
   24548:	f00b f9e1 	bl	2f90e <onoff_manager_init>
		if (err < 0) {
   2454c:	2800      	cmp	r0, #0
   2454e:	db01      	blt.n	24554 <clk_init+0x44>
	}

	return 0;
   24550:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   24552:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   24554:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   24556:	f06f 0004 	mvn.w	r0, #4
   2455a:	e7fb      	b.n	24554 <clk_init+0x44>
   2455c:	000245a5 	.word	0x000245a5
   24560:	0bad0000 	.word	0x0bad0000
   24564:	00034eac 	.word	0x00034eac

00024568 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   24568:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   2456a:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   2456c:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   2456e:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   24570:	434b      	muls	r3, r1
   24572:	480a      	ldr	r0, [pc, #40]	; (2459c <clkstarted_handle.constprop.0+0x34>)
   24574:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   24576:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   24578:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   2457c:	4418      	add	r0, r3
	sub_data->cb = NULL;
   2457e:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
   24580:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   24582:	f00c fdc7 	bl	31114 <set_on_state>
	if (callback) {
   24586:	b135      	cbz	r5, 24596 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   24588:	462b      	mov	r3, r5
   2458a:	9a01      	ldr	r2, [sp, #4]
   2458c:	4804      	ldr	r0, [pc, #16]	; (245a0 <clkstarted_handle.constprop.0+0x38>)
}
   2458e:	b002      	add	sp, #8
   24590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   24594:	4718      	bx	r3
}
   24596:	b002      	add	sp, #8
   24598:	bd70      	pop	{r4, r5, r6, pc}
   2459a:	bf00      	nop
   2459c:	2000d298 	.word	0x2000d298
   245a0:	0003477c 	.word	0x0003477c

000245a4 <clock_event_handler>:
	switch (event) {
   245a4:	b110      	cbz	r0, 245ac <clock_event_handler+0x8>
   245a6:	2801      	cmp	r0, #1
   245a8:	d004      	beq.n	245b4 <clock_event_handler+0x10>
   245aa:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   245ac:	4b03      	ldr	r3, [pc, #12]	; (245bc <clock_event_handler+0x18>)
   245ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   245b0:	075b      	lsls	r3, r3, #29
   245b2:	d101      	bne.n	245b8 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   245b4:	f7ff bfd8 	b.w	24568 <clkstarted_handle.constprop.0>
}
   245b8:	4770      	bx	lr
   245ba:	bf00      	nop
   245bc:	2000d298 	.word	0x2000d298

000245c0 <generic_hfclk_start>:
{
   245c0:	b508      	push	{r3, lr}
	__asm__ volatile(
   245c2:	f04f 0320 	mov.w	r3, #32
   245c6:	f3ef 8111 	mrs	r1, BASEPRI
   245ca:	f383 8812 	msr	BASEPRI_MAX, r3
   245ce:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   245d2:	4a11      	ldr	r2, [pc, #68]	; (24618 <generic_hfclk_start+0x58>)
   245d4:	6813      	ldr	r3, [r2, #0]
   245d6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   245da:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   245de:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   245e0:	d00b      	beq.n	245fa <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   245e2:	4a0e      	ldr	r2, [pc, #56]	; (2461c <generic_hfclk_start+0x5c>)
   245e4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   245e8:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   245ec:	f013 0301 	ands.w	r3, r3, #1
   245f0:	d003      	beq.n	245fa <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   245f2:	480b      	ldr	r0, [pc, #44]	; (24620 <generic_hfclk_start+0x60>)
   245f4:	f00c fd8e 	bl	31114 <set_on_state>
			already_started = true;
   245f8:	2301      	movs	r3, #1
	__asm__ volatile(
   245fa:	f381 8811 	msr	BASEPRI, r1
   245fe:	f3bf 8f6f 	isb	sy
	if (already_started) {
   24602:	b123      	cbz	r3, 2460e <generic_hfclk_start+0x4e>
}
   24604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   24608:	2000      	movs	r0, #0
   2460a:	f7ff bfad 	b.w	24568 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2460e:	2001      	movs	r0, #1
}
   24610:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24614:	f004 beda 	b.w	293cc <nrfx_clock_start>
   24618:	2000d2e8 	.word	0x2000d2e8
   2461c:	40005000 	.word	0x40005000
   24620:	2000d2d8 	.word	0x2000d2d8

00024624 <api_blocking_start>:
{
   24624:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   24626:	2200      	movs	r2, #0
   24628:	2301      	movs	r3, #1
   2462a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2462e:	ab04      	add	r3, sp, #16
   24630:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   24634:	4a09      	ldr	r2, [pc, #36]	; (2465c <api_blocking_start+0x38>)
   24636:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   24638:	f8cd d000 	str.w	sp, [sp]
   2463c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   24640:	f00c fdd7 	bl	311f2 <api_start>
	if (err < 0) {
   24644:	2800      	cmp	r0, #0
   24646:	db05      	blt.n	24654 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   24648:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2464c:	2300      	movs	r3, #0
   2464e:	4668      	mov	r0, sp
   24650:	f007 ffde 	bl	2c610 <z_impl_k_sem_take>
}
   24654:	b007      	add	sp, #28
   24656:	f85d fb04 	ldr.w	pc, [sp], #4
   2465a:	bf00      	nop
   2465c:	00031221 	.word	0x00031221

00024660 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24660:	4b07      	ldr	r3, [pc, #28]	; (24680 <generic_hfclk_stop+0x20>)
   24662:	e8d3 2fef 	ldaex	r2, [r3]
   24666:	f022 0102 	bic.w	r1, r2, #2
   2466a:	e8c3 1fe0 	stlex	r0, r1, [r3]
   2466e:	2800      	cmp	r0, #0
   24670:	d1f7      	bne.n	24662 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   24672:	07d3      	lsls	r3, r2, #31
   24674:	d402      	bmi.n	2467c <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   24676:	2001      	movs	r0, #1
   24678:	f00d bd22 	b.w	320c0 <nrfx_clock_stop>
}
   2467c:	4770      	bx	lr
   2467e:	bf00      	nop
   24680:	2000d2e8 	.word	0x2000d2e8

00024684 <z_nrf_clock_control_lf_on>:
{
   24684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   24688:	2201      	movs	r2, #1
   2468a:	4607      	mov	r7, r0
   2468c:	4935      	ldr	r1, [pc, #212]	; (24764 <z_nrf_clock_control_lf_on+0xe0>)
   2468e:	e8d1 3fef 	ldaex	r3, [r1]
   24692:	e8c1 2fe0 	stlex	r0, r2, [r1]
   24696:	2800      	cmp	r0, #0
   24698:	d1f9      	bne.n	2468e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   2469a:	b933      	cbnz	r3, 246aa <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   2469c:	4932      	ldr	r1, [pc, #200]	; (24768 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
   2469e:	4833      	ldr	r0, [pc, #204]	; (2476c <z_nrf_clock_control_lf_on+0xe8>)
   246a0:	604b      	str	r3, [r1, #4]
   246a2:	60cb      	str	r3, [r1, #12]
   246a4:	608a      	str	r2, [r1, #8]
   246a6:	f00b f945 	bl	2f934 <onoff_request>
	switch (start_mode) {
   246aa:	1e7b      	subs	r3, r7, #1
   246ac:	2b01      	cmp	r3, #1
   246ae:	d82d      	bhi.n	2470c <z_nrf_clock_control_lf_on+0x88>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   246b0:	2f01      	cmp	r7, #1
   246b2:	d106      	bne.n	246c2 <z_nrf_clock_control_lf_on+0x3e>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   246b4:	4b2e      	ldr	r3, [pc, #184]	; (24770 <z_nrf_clock_control_lf_on+0xec>)
   246b6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   246ba:	f003 0303 	and.w	r3, r3, #3
   246be:	2b02      	cmp	r3, #2
   246c0:	d024      	beq.n	2470c <z_nrf_clock_control_lf_on+0x88>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   246c2:	f00e fe47 	bl	33354 <k_is_in_isr>
   246c6:	4604      	mov	r4, r0
   246c8:	b918      	cbnz	r0, 246d2 <z_nrf_clock_control_lf_on+0x4e>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   246ca:	4b2a      	ldr	r3, [pc, #168]	; (24774 <z_nrf_clock_control_lf_on+0xf0>)
	int key = isr_mode ? irq_lock() : 0;
   246cc:	781b      	ldrb	r3, [r3, #0]
   246ce:	2b00      	cmp	r3, #0
   246d0:	d141      	bne.n	24756 <z_nrf_clock_control_lf_on+0xd2>
	__asm__ volatile(
   246d2:	f04f 0320 	mov.w	r3, #32
   246d6:	f3ef 8611 	mrs	r6, BASEPRI
   246da:	f383 8812 	msr	BASEPRI_MAX, r3
   246de:	f3bf 8f6f 	isb	sy
   246e2:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   246e4:	4d22      	ldr	r5, [pc, #136]	; (24770 <z_nrf_clock_control_lf_on+0xec>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   246e6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 24778 <z_nrf_clock_control_lf_on+0xf4>
   246ea:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   246ee:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   246f2:	03d2      	lsls	r2, r2, #15
   246f4:	d50c      	bpl.n	24710 <z_nrf_clock_control_lf_on+0x8c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   246f6:	f003 0303 	and.w	r3, r3, #3
   246fa:	2b02      	cmp	r3, #2
   246fc:	d001      	beq.n	24702 <z_nrf_clock_control_lf_on+0x7e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   246fe:	2f01      	cmp	r7, #1
   24700:	d106      	bne.n	24710 <z_nrf_clock_control_lf_on+0x8c>
	if (isr_mode) {
   24702:	b324      	cbz	r4, 2474e <z_nrf_clock_control_lf_on+0xca>
	__asm__ volatile(
   24704:	f386 8811 	msr	BASEPRI, r6
   24708:	f3bf 8f6f 	isb	sy
}
   2470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   24710:	b1c4      	cbz	r4, 24744 <z_nrf_clock_control_lf_on+0xc0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   24712:	4630      	mov	r0, r6
   24714:	f7fd f962 	bl	219dc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   24718:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   2471c:	b2db      	uxtb	r3, r3
   2471e:	2b01      	cmp	r3, #1
   24720:	d1e3      	bne.n	246ea <z_nrf_clock_control_lf_on+0x66>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   24722:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   24726:	2a00      	cmp	r2, #0
   24728:	d0df      	beq.n	246ea <z_nrf_clock_control_lf_on+0x66>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2472a:	2200      	movs	r2, #0
   2472c:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   24730:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   24734:	2202      	movs	r2, #2
   24736:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   2473a:	2220      	movs	r2, #32
   2473c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24740:	60ab      	str	r3, [r5, #8]
}
   24742:	e7d2      	b.n	246ea <z_nrf_clock_control_lf_on+0x66>
	return z_impl_k_sleep(timeout);
   24744:	2100      	movs	r1, #0
   24746:	2021      	movs	r0, #33	; 0x21
   24748:	f008 fb24 	bl	2cd94 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2474c:	e7e4      	b.n	24718 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENSET = mask;
   2474e:	2302      	movs	r3, #2
   24750:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   24754:	e7da      	b.n	2470c <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
   24756:	2202      	movs	r2, #2
   24758:	4b05      	ldr	r3, [pc, #20]	; (24770 <z_nrf_clock_control_lf_on+0xec>)
	int key = isr_mode ? irq_lock() : 0;
   2475a:	4606      	mov	r6, r0
   2475c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   24760:	e7c0      	b.n	246e4 <z_nrf_clock_control_lf_on+0x60>
   24762:	bf00      	nop
   24764:	2000d2ec 	.word	0x2000d2ec
   24768:	2000d288 	.word	0x2000d288
   2476c:	2000d2b4 	.word	0x2000d2b4
   24770:	40005000 	.word	0x40005000
   24774:	20010799 	.word	0x20010799
   24778:	e000e100 	.word	0xe000e100

0002477c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   2477c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   2477e:	4808      	ldr	r0, [pc, #32]	; (247a0 <uart_console_init+0x24>)
   24780:	4b08      	ldr	r3, [pc, #32]	; (247a4 <uart_console_init+0x28>)
   24782:	6018      	str	r0, [r3, #0]
   24784:	f00e fd57 	bl	33236 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   24788:	b138      	cbz	r0, 2479a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   2478a:	4807      	ldr	r0, [pc, #28]	; (247a8 <uart_console_init+0x2c>)
   2478c:	f7fe f82e 	bl	227ec <__stdout_hook_install>
	__printk_hook_install(console_out);
   24790:	4805      	ldr	r0, [pc, #20]	; (247a8 <uart_console_init+0x2c>)
   24792:	f7fb fd73 	bl	2027c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   24796:	2000      	movs	r0, #0
}
   24798:	bd08      	pop	{r3, pc}
		return -ENODEV;
   2479a:	f06f 0012 	mvn.w	r0, #18
   2479e:	e7fb      	b.n	24798 <uart_console_init+0x1c>
   247a0:	000347c4 	.word	0x000347c4
   247a4:	2000d2f0 	.word	0x2000d2f0
   247a8:	000247ad 	.word	0x000247ad

000247ac <console_out>:
	if ('\n' == c) {
   247ac:	280a      	cmp	r0, #10
{
   247ae:	b538      	push	{r3, r4, r5, lr}
   247b0:	4604      	mov	r4, r0
   247b2:	4d07      	ldr	r5, [pc, #28]	; (247d0 <console_out+0x24>)
	if ('\n' == c) {
   247b4:	d104      	bne.n	247c0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
   247b6:	6828      	ldr	r0, [r5, #0]
   247b8:	6883      	ldr	r3, [r0, #8]
   247ba:	210d      	movs	r1, #13
   247bc:	685b      	ldr	r3, [r3, #4]
   247be:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   247c0:	6828      	ldr	r0, [r5, #0]
   247c2:	6883      	ldr	r3, [r0, #8]
   247c4:	b2e1      	uxtb	r1, r4
   247c6:	685b      	ldr	r3, [r3, #4]
   247c8:	4798      	blx	r3
}
   247ca:	4620      	mov	r0, r4
   247cc:	bd38      	pop	{r3, r4, r5, pc}
   247ce:	bf00      	nop
   247d0:	2000d2f0 	.word	0x2000d2f0

000247d4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   247d4:	b530      	push	{r4, r5, lr}
	return port->config;
   247d6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   247d8:	f001 051f 	and.w	r5, r1, #31
   247dc:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   247de:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   247e2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   247e6:	b085      	sub	sp, #20
   247e8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   247ec:	d105      	bne.n	247fa <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
   247ee:	4628      	mov	r0, r5
   247f0:	f005 f8aa 	bl	29948 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   247f4:	2000      	movs	r0, #0
}
   247f6:	b005      	add	sp, #20
   247f8:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
   247fa:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   247fe:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   24802:	d12e      	bne.n	24862 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   24804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   24808:	bf0c      	ite	eq
   2480a:	2304      	moveq	r3, #4
   2480c:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   2480e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   24812:	6883      	ldr	r3, [r0, #8]
   24814:	fa23 f101 	lsr.w	r1, r3, r1
   24818:	07c9      	lsls	r1, r1, #31
   2481a:	d414      	bmi.n	24846 <gpio_nrfx_pin_interrupt_configure+0x72>
   2481c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   24820:	d111      	bne.n	24846 <gpio_nrfx_pin_interrupt_configure+0x72>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   24822:	4a1b      	ldr	r2, [pc, #108]	; (24890 <gpio_nrfx_pin_interrupt_configure+0xbc>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   24824:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   24828:	3380      	adds	r3, #128	; 0x80
   2482a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   2482e:	07db      	lsls	r3, r3, #31
   24830:	d409      	bmi.n	24846 <gpio_nrfx_pin_interrupt_configure+0x72>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   24832:	f10d 0407 	add.w	r4, sp, #7
   24836:	4621      	mov	r1, r4
   24838:	4628      	mov	r0, r5
   2483a:	f004 ffed 	bl	29818 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   2483e:	4b15      	ldr	r3, [pc, #84]	; (24894 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   24840:	4298      	cmp	r0, r3
   24842:	d019      	beq.n	24878 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
   24844:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   24846:	2300      	movs	r3, #0
   24848:	4628      	mov	r0, r5
   2484a:	4619      	mov	r1, r3
   2484c:	aa02      	add	r2, sp, #8
   2484e:	f004 feb9 	bl	295c4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   24852:	4b11      	ldr	r3, [pc, #68]	; (24898 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   24854:	4298      	cmp	r0, r3
   24856:	d118      	bne.n	2488a <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   24858:	2101      	movs	r1, #1
   2485a:	4628      	mov	r0, r5
   2485c:	f005 f830 	bl	298c0 <nrfx_gpiote_trigger_enable>
   24860:	e7c8      	b.n	247f4 <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   24862:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   24866:	d005      	beq.n	24874 <gpio_nrfx_pin_interrupt_configure+0xa0>
   24868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   2486c:	bf0c      	ite	eq
   2486e:	2302      	moveq	r3, #2
   24870:	2301      	movne	r3, #1
   24872:	e7cc      	b.n	2480e <gpio_nrfx_pin_interrupt_configure+0x3a>
   24874:	2303      	movs	r3, #3
   24876:	e7ca      	b.n	2480e <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
   24878:	4620      	mov	r0, r4
   2487a:	f005 f81b 	bl	298b4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   2487e:	4b06      	ldr	r3, [pc, #24]	; (24898 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   24880:	4298      	cmp	r0, r3
   24882:	d0df      	beq.n	24844 <gpio_nrfx_pin_interrupt_configure+0x70>
				return -ENOMEM;
   24884:	f06f 000b 	mvn.w	r0, #11
   24888:	e7b5      	b.n	247f6 <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
   2488a:	f06f 0015 	mvn.w	r0, #21
   2488e:	e7b2      	b.n	247f6 <gpio_nrfx_pin_interrupt_configure+0x22>
   24890:	40842500 	.word	0x40842500
   24894:	0bad0004 	.word	0x0bad0004
   24898:	0bad0000 	.word	0x0bad0000

0002489c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   2489c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   2489e:	f004 fff9 	bl	29894 <nrfx_gpiote_is_init>
   248a2:	4604      	mov	r4, r0
   248a4:	b968      	cbnz	r0, 248c2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   248a6:	f004 ffcd 	bl	29844 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   248aa:	4b08      	ldr	r3, [pc, #32]	; (248cc <gpio_nrfx_init+0x30>)
   248ac:	4298      	cmp	r0, r3
   248ae:	d10a      	bne.n	248c6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   248b0:	4621      	mov	r1, r4
   248b2:	4807      	ldr	r0, [pc, #28]	; (248d0 <gpio_nrfx_init+0x34>)
   248b4:	f004 ffaa 	bl	2980c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   248b8:	4622      	mov	r2, r4
   248ba:	2105      	movs	r1, #5
   248bc:	2031      	movs	r0, #49	; 0x31
   248be:	f7fd f949 	bl	21b54 <z_arm_irq_priority_set>
		return 0;
   248c2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   248c4:	bd10      	pop	{r4, pc}
		return -EIO;
   248c6:	f06f 0004 	mvn.w	r0, #4
   248ca:	e7fb      	b.n	248c4 <gpio_nrfx_init+0x28>
   248cc:	0bad0000 	.word	0x0bad0000
   248d0:	000248d5 	.word	0x000248d5

000248d4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   248d4:	0943      	lsrs	r3, r0, #5
{
   248d6:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   248d8:	d111      	bne.n	248fe <nrfx_gpio_handler+0x2a>
	return list->head;
   248da:	4b09      	ldr	r3, [pc, #36]	; (24900 <nrfx_gpio_handler+0x2c>)
   248dc:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   248de:	b171      	cbz	r1, 248fe <nrfx_gpio_handler+0x2a>
	gpio_fire_callbacks(list, port, BIT(pin));
   248e0:	2301      	movs	r3, #1
	return node->next;
   248e2:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   248e4:	4e07      	ldr	r6, [pc, #28]	; (24904 <nrfx_gpio_handler+0x30>)
   248e6:	fa03 f500 	lsl.w	r5, r3, r0
		if (cb->pin_mask & pins) {
   248ea:	688a      	ldr	r2, [r1, #8]
   248ec:	402a      	ands	r2, r5
   248ee:	d002      	beq.n	248f6 <nrfx_gpio_handler+0x22>
			cb->handler(port, cb, cb->pin_mask & pins);
   248f0:	4630      	mov	r0, r6
   248f2:	684b      	ldr	r3, [r1, #4]
   248f4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   248f6:	b114      	cbz	r4, 248fe <nrfx_gpio_handler+0x2a>
   248f8:	4621      	mov	r1, r4
   248fa:	6824      	ldr	r4, [r4, #0]
   248fc:	e7f5      	b.n	248ea <nrfx_gpio_handler+0x16>
}
   248fe:	bd70      	pop	{r4, r5, r6, pc}
   24900:	2000d2f4 	.word	0x2000d2f4
   24904:	00034794 	.word	0x00034794

00024908 <gpio_nrfx_pin_configure>:
{
   24908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   2490c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   24910:	f001 061f 	and.w	r6, r1, #31
   24914:	f898 300c 	ldrb.w	r3, [r8, #12]
{
   24918:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2491a:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
   2491e:	4614      	mov	r4, r2
   24920:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   24922:	4630      	mov	r0, r6
   24924:	f10d 0103 	add.w	r1, sp, #3
   24928:	f004 ff76 	bl	29818 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   2492c:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   24930:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   24932:	d10b      	bne.n	2494c <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   24934:	4630      	mov	r0, r6
   24936:	f005 f82f 	bl	29998 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   2493a:	4b42      	ldr	r3, [pc, #264]	; (24a44 <gpio_nrfx_pin_configure+0x13c>)
   2493c:	4599      	cmp	r9, r3
   2493e:	d103      	bne.n	24948 <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
   24940:	f89d 0003 	ldrb.w	r0, [sp, #3]
   24944:	f004 ffb0 	bl	298a8 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   24948:	2000      	movs	r0, #0
   2494a:	e056      	b.n	249fa <gpio_nrfx_pin_configure+0xf2>
	nrfx_gpiote_trigger_config_t trigger_config = {
   2494c:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   2494e:	4630      	mov	r0, r6
   24950:	4619      	mov	r1, r3
   24952:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
   24954:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   24958:	f004 fe34 	bl	295c4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   2495c:	4b39      	ldr	r3, [pc, #228]	; (24a44 <gpio_nrfx_pin_configure+0x13c>)
   2495e:	4298      	cmp	r0, r3
   24960:	d002      	beq.n	24968 <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   24962:	f06f 0015 	mvn.w	r0, #21
   24966:	e048      	b.n	249fa <gpio_nrfx_pin_configure+0xf2>
	if (free_ch) {
   24968:	4581      	cmp	r9, r0
   2496a:	d103      	bne.n	24974 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
   2496c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   24970:	f004 ff9a 	bl	298a8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   24974:	03a5      	lsls	r5, r4, #14
   24976:	d552      	bpl.n	24a1e <gpio_nrfx_pin_configure+0x116>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   24978:	f240 3306 	movw	r3, #774	; 0x306
   2497c:	4023      	ands	r3, r4
   2497e:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   24982:	d03d      	beq.n	24a00 <gpio_nrfx_pin_configure+0xf8>
   24984:	d80c      	bhi.n	249a0 <gpio_nrfx_pin_configure+0x98>
   24986:	2b06      	cmp	r3, #6
   24988:	d015      	beq.n	249b6 <gpio_nrfx_pin_configure+0xae>
   2498a:	d804      	bhi.n	24996 <gpio_nrfx_pin_configure+0x8e>
   2498c:	b19b      	cbz	r3, 249b6 <gpio_nrfx_pin_configure+0xae>
   2498e:	2b02      	cmp	r3, #2
   24990:	d1e7      	bne.n	24962 <gpio_nrfx_pin_configure+0x5a>
   24992:	2304      	movs	r3, #4
   24994:	e00f      	b.n	249b6 <gpio_nrfx_pin_configure+0xae>
   24996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   2499a:	d1e2      	bne.n	24962 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
   2499c:	2301      	movs	r3, #1
   2499e:	e00a      	b.n	249b6 <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   249a0:	f240 2202 	movw	r2, #514	; 0x202
   249a4:	4293      	cmp	r3, r2
   249a6:	d02d      	beq.n	24a04 <gpio_nrfx_pin_configure+0xfc>
   249a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   249ac:	d02c      	beq.n	24a08 <gpio_nrfx_pin_configure+0x100>
   249ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   249b2:	d1d6      	bne.n	24962 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
   249b4:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   249b6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   249ba:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   249be:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   249c2:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   249c4:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
   249c8:	bf4c      	ite	mi
   249ca:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
   249cc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   249d0:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   249d2:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   249d6:	d519      	bpl.n	24a0c <gpio_nrfx_pin_configure+0x104>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   249d8:	2101      	movs	r1, #1
   249da:	f8d8 3004 	ldr.w	r3, [r8, #4]
   249de:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
   249e2:	609f      	str	r7, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   249e4:	2200      	movs	r2, #0
   249e6:	4630      	mov	r0, r6
   249e8:	a901      	add	r1, sp, #4
   249ea:	f004 fe95 	bl	29718 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   249ee:	4b15      	ldr	r3, [pc, #84]	; (24a44 <gpio_nrfx_pin_configure+0x13c>)
   249f0:	4298      	cmp	r0, r3
   249f2:	bf14      	ite	ne
   249f4:	f06f 0015 	mvnne.w	r0, #21
   249f8:	2000      	moveq	r0, #0
}
   249fa:	b005      	add	sp, #20
   249fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
   24a00:	2307      	movs	r3, #7
   24a02:	e7d8      	b.n	249b6 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
   24a04:	2305      	movs	r3, #5
   24a06:	e7d6      	b.n	249b6 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
   24a08:	2303      	movs	r3, #3
   24a0a:	e7d4      	b.n	249b6 <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   24a0c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   24a0e:	bf41      	itttt	mi
   24a10:	2101      	movmi	r1, #1
   24a12:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
   24a16:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
   24a1a:	60df      	strmi	r7, [r3, #12]
}
   24a1c:	e7e2      	b.n	249e4 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   24a1e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   24a20:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   24a24:	bf4c      	ite	mi
   24a26:	2403      	movmi	r4, #3
   24a28:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   24a2c:	461a      	mov	r2, r3
   24a2e:	4630      	mov	r0, r6
   24a30:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
   24a32:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   24a36:	f004 fdc5 	bl	295c4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   24a3a:	4b02      	ldr	r3, [pc, #8]	; (24a44 <gpio_nrfx_pin_configure+0x13c>)
   24a3c:	4298      	cmp	r0, r3
   24a3e:	d083      	beq.n	24948 <gpio_nrfx_pin_configure+0x40>
   24a40:	e78f      	b.n	24962 <gpio_nrfx_pin_configure+0x5a>
   24a42:	bf00      	nop
   24a44:	0bad0000 	.word	0x0bad0000

00024a48 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   24a48:	4b02      	ldr	r3, [pc, #8]	; (24a54 <flash_nrf_pages_layout+0xc>)
   24a4a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   24a4c:	2301      	movs	r3, #1
   24a4e:	6013      	str	r3, [r2, #0]
}
   24a50:	4770      	bx	lr
   24a52:	bf00      	nop
   24a54:	2000d300 	.word	0x2000d300

00024a58 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   24a58:	4800      	ldr	r0, [pc, #0]	; (24a5c <flash_nrf_get_parameters+0x4>)
   24a5a:	4770      	bx	lr
   24a5c:	00034f00 	.word	0x00034f00

00024a60 <flash_nrf_read>:
{
   24a60:	b570      	push	{r4, r5, r6, lr}
   24a62:	460d      	mov	r5, r1
   24a64:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   24a66:	4619      	mov	r1, r3
   24a68:	4628      	mov	r0, r5
{
   24a6a:	461c      	mov	r4, r3
   24a6c:	4616      	mov	r6, r2
	if (is_regular_addr_valid(addr, len)) {
   24a6e:	f00c fc28 	bl	312c2 <is_regular_addr_valid>
   24a72:	4603      	mov	r3, r0
   24a74:	b968      	cbnz	r0, 24a92 <flash_nrf_read+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24a76:	4a10      	ldr	r2, [pc, #64]	; (24ab8 <flash_nrf_read+0x58>)
   24a78:	9000      	str	r0, [sp, #0]
   24a7a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   24a7e:	e9cd 5403 	strd	r5, r4, [sp, #12]
   24a82:	2201      	movs	r2, #1
   24a84:	490d      	ldr	r1, [pc, #52]	; (24abc <flash_nrf_read+0x5c>)
   24a86:	f00c fc2d 	bl	312e4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   24a8a:	f06f 0015 	mvn.w	r0, #21
}
   24a8e:	b006      	add	sp, #24
   24a90:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   24a92:	b174      	cbz	r4, 24ab2 <flash_nrf_read+0x52>
	if (addr < PM_APP_ADDRESS) {
   24a94:	f5b5 3fe1 	cmp.w	r5, #115200	; 0x1c200
		return soc_secure_mem_read(data, (void *)addr, len);
   24a98:	4622      	mov	r2, r4
   24a9a:	4629      	mov	r1, r5
   24a9c:	4630      	mov	r0, r6
	if (addr < PM_APP_ADDRESS) {
   24a9e:	da04      	bge.n	24aaa <flash_nrf_read+0x4a>
}
   24aa0:	b006      	add	sp, #24
   24aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return soc_secure_mem_read(data, (void *)addr, len);
   24aa6:	f00b b9c0 	b.w	2fe2a <soc_secure_mem_read>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24aaa:	f00f f8c0 	bl	33c2e <memcpy>
	return 0;
   24aae:	2000      	movs	r0, #0
   24ab0:	e7ed      	b.n	24a8e <flash_nrf_read+0x2e>
		return 0;
   24ab2:	4620      	mov	r0, r4
   24ab4:	e7eb      	b.n	24a8e <flash_nrf_read+0x2e>
   24ab6:	bf00      	nop
   24ab8:	00038962 	.word	0x00038962
   24abc:	00034a70 	.word	0x00034a70

00024ac0 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   24ac0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   24ac2:	2201      	movs	r2, #1
   24ac4:	4806      	ldr	r0, [pc, #24]	; (24ae0 <nrf_flash_init+0x20>)
   24ac6:	4611      	mov	r1, r2
   24ac8:	f00e fce2 	bl	33490 <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   24acc:	f00d fb00 	bl	320d0 <nrfx_nvmc_flash_page_count_get>
   24ad0:	4c04      	ldr	r4, [pc, #16]	; (24ae4 <nrf_flash_init+0x24>)
   24ad2:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   24ad4:	f00d faf9 	bl	320ca <nrfx_nvmc_flash_page_size_get>
   24ad8:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   24ada:	2000      	movs	r0, #0
   24adc:	bd10      	pop	{r4, pc}
   24ade:	bf00      	nop
   24ae0:	2000d308 	.word	0x2000d308
   24ae4:	2000d300 	.word	0x2000d300

00024ae8 <flash_nrf_erase>:
{
   24ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   24aea:	b087      	sub	sp, #28
   24aec:	460e      	mov	r6, r1
   24aee:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24af0:	f00d faeb 	bl	320ca <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   24af4:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24af6:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
   24af8:	4630      	mov	r0, r6
   24afa:	f00c fbe2 	bl	312c2 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   24afe:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
   24b00:	4603      	mov	r3, r0
   24b02:	b380      	cbz	r0, 24b66 <flash_nrf_erase+0x7e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   24b04:	fbb6 f3f5 	udiv	r3, r6, r5
   24b08:	fb05 6313 	mls	r3, r5, r3, r6
   24b0c:	b923      	cbnz	r3, 24b18 <flash_nrf_erase+0x30>
   24b0e:	fbb4 f2f5 	udiv	r2, r4, r5
   24b12:	fb05 4012 	mls	r0, r5, r2, r4
   24b16:	b170      	cbz	r0, 24b36 <flash_nrf_erase+0x4e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   24b18:	4b17      	ldr	r3, [pc, #92]	; (24b78 <flash_nrf_erase+0x90>)
   24b1a:	2201      	movs	r2, #1
   24b1c:	9302      	str	r3, [sp, #8]
   24b1e:	2300      	movs	r3, #0
   24b20:	4618      	mov	r0, r3
   24b22:	e9cd 6403 	strd	r6, r4, [sp, #12]
   24b26:	e9cd 3300 	strd	r3, r3, [sp]
   24b2a:	4914      	ldr	r1, [pc, #80]	; (24b7c <flash_nrf_erase+0x94>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24b2c:	f00c fbda 	bl	312e4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   24b30:	f06f 0015 	mvn.w	r0, #21
   24b34:	e015      	b.n	24b62 <flash_nrf_erase+0x7a>
		if (!n_pages) {
   24b36:	42a5      	cmp	r5, r4
   24b38:	d813      	bhi.n	24b62 <flash_nrf_erase+0x7a>
	return z_impl_k_sem_take(sem, timeout);
   24b3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24b42:	480f      	ldr	r0, [pc, #60]	; (24b80 <flash_nrf_erase+0x98>)
   24b44:	f007 fd64 	bl	2c610 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   24b48:	f00d fabf 	bl	320ca <nrfx_nvmc_flash_page_size_get>
   24b4c:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   24b4e:	4638      	mov	r0, r7
   24b50:	f005 f894 	bl	29c7c <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   24b54:	1b64      	subs	r4, r4, r5
   24b56:	442f      	add	r7, r5
   24b58:	d1f9      	bne.n	24b4e <flash_nrf_erase+0x66>
	z_impl_k_sem_give(sem);
   24b5a:	4809      	ldr	r0, [pc, #36]	; (24b80 <flash_nrf_erase+0x98>)
   24b5c:	f007 fd32 	bl	2c5c4 <z_impl_k_sem_give>
	return ret;
   24b60:	4620      	mov	r0, r4
}
   24b62:	b007      	add	sp, #28
   24b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24b66:	4a07      	ldr	r2, [pc, #28]	; (24b84 <flash_nrf_erase+0x9c>)
   24b68:	e9cd 6403 	strd	r6, r4, [sp, #12]
   24b6c:	e9cd 0201 	strd	r0, r2, [sp, #4]
   24b70:	4902      	ldr	r1, [pc, #8]	; (24b7c <flash_nrf_erase+0x94>)
   24b72:	2201      	movs	r2, #1
   24b74:	9000      	str	r0, [sp, #0]
   24b76:	e7d9      	b.n	24b2c <flash_nrf_erase+0x44>
   24b78:	0003897f 	.word	0x0003897f
   24b7c:	00034a70 	.word	0x00034a70
   24b80:	2000d308 	.word	0x2000d308
   24b84:	00038962 	.word	0x00038962

00024b88 <flash_nrf_write>:
{
   24b88:	b5f0      	push	{r4, r5, r6, r7, lr}
   24b8a:	460e      	mov	r6, r1
   24b8c:	b087      	sub	sp, #28
	if (is_regular_addr_valid(addr, len)) {
   24b8e:	4619      	mov	r1, r3
   24b90:	4630      	mov	r0, r6
{
   24b92:	461c      	mov	r4, r3
   24b94:	4617      	mov	r7, r2
	if (is_regular_addr_valid(addr, len)) {
   24b96:	f00c fb94 	bl	312c2 <is_regular_addr_valid>
   24b9a:	4603      	mov	r3, r0
   24b9c:	b968      	cbnz	r0, 24bba <flash_nrf_write+0x32>
		LOG_ERR("invalid address: 0x%08lx:%zu",
   24b9e:	4a1e      	ldr	r2, [pc, #120]	; (24c18 <flash_nrf_write+0x90>)
   24ba0:	e9cd 6403 	strd	r6, r4, [sp, #12]
   24ba4:	e9cd 0201 	strd	r0, r2, [sp, #4]
   24ba8:	2201      	movs	r2, #1
   24baa:	491c      	ldr	r1, [pc, #112]	; (24c1c <flash_nrf_write+0x94>)
   24bac:	9000      	str	r0, [sp, #0]
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   24bae:	f00c fb99 	bl	312e4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   24bb2:	f06f 0015 	mvn.w	r0, #21
}
   24bb6:	b007      	add	sp, #28
   24bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   24bba:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   24bbe:	f015 0503 	ands.w	r5, r5, #3
   24bc2:	d00a      	beq.n	24bda <flash_nrf_write+0x52>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   24bc4:	4b16      	ldr	r3, [pc, #88]	; (24c20 <flash_nrf_write+0x98>)
   24bc6:	2201      	movs	r2, #1
   24bc8:	9302      	str	r3, [sp, #8]
   24bca:	2300      	movs	r3, #0
   24bcc:	e9cd 6403 	strd	r6, r4, [sp, #12]
   24bd0:	4618      	mov	r0, r3
   24bd2:	e9cd 3300 	strd	r3, r3, [sp]
   24bd6:	4911      	ldr	r1, [pc, #68]	; (24c1c <flash_nrf_write+0x94>)
   24bd8:	e7e9      	b.n	24bae <flash_nrf_write+0x26>
	if (!len) {
   24bda:	b1dc      	cbz	r4, 24c14 <flash_nrf_write+0x8c>
	return z_impl_k_sem_take(sem, timeout);
   24bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24be4:	480f      	ldr	r0, [pc, #60]	; (24c24 <flash_nrf_write+0x9c>)
   24be6:	f007 fd13 	bl	2c610 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   24bea:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   24bee:	42ac      	cmp	r4, r5
   24bf0:	eb05 0006 	add.w	r0, r5, r6
   24bf4:	d109      	bne.n	24c0a <flash_nrf_write+0x82>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   24bf6:	4a0c      	ldr	r2, [pc, #48]	; (24c28 <flash_nrf_write+0xa0>)
   24bf8:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   24bfc:	07db      	lsls	r3, r3, #31
   24bfe:	d5fb      	bpl.n	24bf8 <flash_nrf_write+0x70>
	z_impl_k_sem_give(sem);
   24c00:	4808      	ldr	r0, [pc, #32]	; (24c24 <flash_nrf_write+0x9c>)
   24c02:	f007 fcdf 	bl	2c5c4 <z_impl_k_sem_give>
	return ret;
   24c06:	2000      	movs	r0, #0
}
   24c08:	e7d5      	b.n	24bb6 <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   24c0a:	5979      	ldr	r1, [r7, r5]
   24c0c:	f005 f852 	bl	29cb4 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   24c10:	3504      	adds	r5, #4
}
   24c12:	e7ec      	b.n	24bee <flash_nrf_write+0x66>
		return 0;
   24c14:	4620      	mov	r0, r4
   24c16:	e7ce      	b.n	24bb6 <flash_nrf_write+0x2e>
   24c18:	00038962 	.word	0x00038962
   24c1c:	00034a70 	.word	0x00034a70
   24c20:	0003899e 	.word	0x0003899e
   24c24:	2000d308 	.word	0x2000d308
   24c28:	40039000 	.word	0x40039000

00024c2c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   24c2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   24c2e:	ab0b      	add	r3, sp, #44	; 0x2c
   24c30:	9305      	str	r3, [sp, #20]
   24c32:	9303      	str	r3, [sp, #12]
   24c34:	4b05      	ldr	r3, [pc, #20]	; (24c4c <z_log_msg_runtime_create.constprop.0+0x20>)
   24c36:	2201      	movs	r2, #1
   24c38:	9302      	str	r3, [sp, #8]
   24c3a:	2300      	movs	r3, #0
   24c3c:	4618      	mov	r0, r3
   24c3e:	e9cd 3300 	strd	r3, r3, [sp]
   24c42:	f7fb fe23 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   24c46:	b007      	add	sp, #28
   24c48:	f85d fb04 	ldr.w	pc, [sp], #4
   24c4c:	000389dd 	.word	0x000389dd

00024c50 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   24c50:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   24c52:	794b      	ldrb	r3, [r1, #5]
   24c54:	2b01      	cmp	r3, #1
   24c56:	d026      	beq.n	24ca6 <uarte_nrfx_configure+0x56>
   24c58:	2b03      	cmp	r3, #3
   24c5a:	d121      	bne.n	24ca0 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   24c5c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   24c5e:	798b      	ldrb	r3, [r1, #6]
   24c60:	2b03      	cmp	r3, #3
   24c62:	d11d      	bne.n	24ca0 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   24c64:	79cc      	ldrb	r4, [r1, #7]
   24c66:	b10c      	cbz	r4, 24c6c <uarte_nrfx_configure+0x1c>
   24c68:	2c01      	cmp	r4, #1
   24c6a:	d119      	bne.n	24ca0 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   24c6c:	790a      	ldrb	r2, [r1, #4]
   24c6e:	b112      	cbz	r2, 24c76 <uarte_nrfx_configure+0x26>
   24c70:	2a02      	cmp	r2, #2
   24c72:	d115      	bne.n	24ca0 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   24c74:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   24c76:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   24c78:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   24c7a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   24c7e:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   24c80:	d065      	beq.n	24d4e <uarte_nrfx_configure+0xfe>
   24c82:	d82d      	bhi.n	24ce0 <uarte_nrfx_configure+0x90>
   24c84:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   24c88:	d064      	beq.n	24d54 <uarte_nrfx_configure+0x104>
   24c8a:	d816      	bhi.n	24cba <uarte_nrfx_configure+0x6a>
   24c8c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   24c90:	d062      	beq.n	24d58 <uarte_nrfx_configure+0x108>
   24c92:	d80a      	bhi.n	24caa <uarte_nrfx_configure+0x5a>
   24c94:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   24c98:	d061      	beq.n	24d5e <uarte_nrfx_configure+0x10e>
   24c9a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   24c9e:	d061      	beq.n	24d64 <uarte_nrfx_configure+0x114>
   24ca0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   24ca4:	e052      	b.n	24d4c <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   24ca6:	2600      	movs	r6, #0
   24ca8:	e7d9      	b.n	24c5e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   24caa:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   24cae:	d05c      	beq.n	24d6a <uarte_nrfx_configure+0x11a>
   24cb0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   24cb4:	d1f4      	bne.n	24ca0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   24cb6:	4b37      	ldr	r3, [pc, #220]	; (24d94 <uarte_nrfx_configure+0x144>)
   24cb8:	e03c      	b.n	24d34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24cba:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   24cbe:	d057      	beq.n	24d70 <uarte_nrfx_configure+0x120>
   24cc0:	d807      	bhi.n	24cd2 <uarte_nrfx_configure+0x82>
   24cc2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   24cc6:	d055      	beq.n	24d74 <uarte_nrfx_configure+0x124>
   24cc8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   24ccc:	d1e8      	bne.n	24ca0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   24cce:	4b32      	ldr	r3, [pc, #200]	; (24d98 <uarte_nrfx_configure+0x148>)
   24cd0:	e030      	b.n	24d34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24cd2:	f647 2712 	movw	r7, #31250	; 0x7a12
   24cd6:	42bb      	cmp	r3, r7
   24cd8:	d1e2      	bne.n	24ca0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   24cda:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   24cde:	e029      	b.n	24d34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24ce0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   24ce4:	d048      	beq.n	24d78 <uarte_nrfx_configure+0x128>
   24ce6:	d813      	bhi.n	24d10 <uarte_nrfx_configure+0xc0>
   24ce8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   24cec:	d047      	beq.n	24d7e <uarte_nrfx_configure+0x12e>
   24cee:	d809      	bhi.n	24d04 <uarte_nrfx_configure+0xb4>
   24cf0:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   24cf4:	42bb      	cmp	r3, r7
   24cf6:	d044      	beq.n	24d82 <uarte_nrfx_configure+0x132>
   24cf8:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   24cfc:	d1d0      	bne.n	24ca0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   24cfe:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   24d02:	e017      	b.n	24d34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24d04:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   24d08:	d1ca      	bne.n	24ca0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   24d0a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   24d0e:	e011      	b.n	24d34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24d10:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   24d14:	d038      	beq.n	24d88 <uarte_nrfx_configure+0x138>
   24d16:	d808      	bhi.n	24d2a <uarte_nrfx_configure+0xda>
   24d18:	4f20      	ldr	r7, [pc, #128]	; (24d9c <uarte_nrfx_configure+0x14c>)
   24d1a:	42bb      	cmp	r3, r7
   24d1c:	d037      	beq.n	24d8e <uarte_nrfx_configure+0x13e>
   24d1e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   24d22:	d1bd      	bne.n	24ca0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   24d24:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   24d28:	e004      	b.n	24d34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24d2a:	4f1d      	ldr	r7, [pc, #116]	; (24da0 <uarte_nrfx_configure+0x150>)
   24d2c:	42bb      	cmp	r3, r7
   24d2e:	d1b7      	bne.n	24ca0 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   24d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   24d34:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
   24d36:	4334      	orrs	r4, r6
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   24d38:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   24d3c:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   24d3e:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   24d40:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   24d44:	c903      	ldmia	r1, {r0, r1}
   24d46:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   24d4a:	2000      	movs	r0, #0
}
   24d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   24d4e:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   24d52:	e7ef      	b.n	24d34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   24d54:	4b13      	ldr	r3, [pc, #76]	; (24da4 <uarte_nrfx_configure+0x154>)
   24d56:	e7ed      	b.n	24d34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   24d58:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   24d5c:	e7ea      	b.n	24d34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   24d5e:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   24d62:	e7e7      	b.n	24d34 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   24d64:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   24d68:	e7e4      	b.n	24d34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   24d6a:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   24d6e:	e7e1      	b.n	24d34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   24d70:	4b0d      	ldr	r3, [pc, #52]	; (24da8 <uarte_nrfx_configure+0x158>)
   24d72:	e7df      	b.n	24d34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   24d74:	4b0d      	ldr	r3, [pc, #52]	; (24dac <uarte_nrfx_configure+0x15c>)
   24d76:	e7dd      	b.n	24d34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   24d78:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   24d7c:	e7da      	b.n	24d34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   24d7e:	4b0c      	ldr	r3, [pc, #48]	; (24db0 <uarte_nrfx_configure+0x160>)
   24d80:	e7d8      	b.n	24d34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   24d82:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   24d86:	e7d5      	b.n	24d34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   24d88:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   24d8c:	e7d2      	b.n	24d34 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   24d8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   24d92:	e7cf      	b.n	24d34 <uarte_nrfx_configure+0xe4>
   24d94:	0013b000 	.word	0x0013b000
   24d98:	004ea000 	.word	0x004ea000
   24d9c:	0003d090 	.word	0x0003d090
   24da0:	000f4240 	.word	0x000f4240
   24da4:	00275000 	.word	0x00275000
   24da8:	0075c000 	.word	0x0075c000
   24dac:	003af000 	.word	0x003af000
   24db0:	013a9000 	.word	0x013a9000

00024db4 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   24db4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24db8:	4607      	mov	r7, r0
   24dba:	b087      	sub	sp, #28
   24dbc:	2200      	movs	r2, #0
   24dbe:	2101      	movs	r1, #1
   24dc0:	2008      	movs	r0, #8
   24dc2:	f7fc fec7 	bl	21b54 <z_arm_irq_priority_set>
   24dc6:	2008      	movs	r0, #8
   24dc8:	f7fc fea6 	bl	21b18 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   24dcc:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
   24dce:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   24dd2:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   24dd4:	f8d8 5000 	ldr.w	r5, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   24dd8:	f8d8 900c 	ldr.w	r9, [r8, #12]
   24ddc:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   24de0:	4648      	mov	r0, r9
	data->dev = dev;
   24de2:	6037      	str	r7, [r6, #0]
   24de4:	aa05      	add	r2, sp, #20
   24de6:	f00c fc3f 	bl	31668 <pinctrl_lookup_state>
	if (ret < 0) {
   24dea:	1e04      	subs	r4, r0, #0
   24dec:	db25      	blt.n	24e3a <uarte_0_init+0x86>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   24dee:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   24df0:	f8d9 2000 	ldr.w	r2, [r9]
   24df4:	7919      	ldrb	r1, [r3, #4]
   24df6:	6818      	ldr	r0, [r3, #0]
   24df8:	f000 fb0e 	bl	25418 <pinctrl_configure_pins>
	if (err < 0) {
   24dfc:	1e04      	subs	r4, r0, #0
   24dfe:	db1c      	blt.n	24e3a <uarte_0_init+0x86>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   24e00:	4638      	mov	r0, r7
   24e02:	1d31      	adds	r1, r6, #4
   24e04:	f7ff ff24 	bl	24c50 <uarte_nrfx_configure>
	if (err) {
   24e08:	4604      	mov	r4, r0
   24e0a:	b9b0      	cbnz	r0, 24e3a <uarte_0_init+0x86>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   24e0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   24e10:	0799      	lsls	r1, r3, #30
   24e12:	d522      	bpl.n	24e5a <uarte_0_init+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   24e14:	f106 001c 	add.w	r0, r6, #28
   24e18:	f004 fb4c 	bl	294b4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   24e1c:	4b23      	ldr	r3, [pc, #140]	; (24eac <uarte_0_init+0xf8>)
   24e1e:	4298      	cmp	r0, r3
   24e20:	d00f      	beq.n	24e42 <uarte_0_init+0x8e>
		LOG_ERR("Failed to allocate PPI Channel");
   24e22:	4b23      	ldr	r3, [pc, #140]	; (24eb0 <uarte_0_init+0xfc>)
   24e24:	4620      	mov	r0, r4
   24e26:	e9cd 4301 	strd	r4, r3, [sp, #4]
   24e2a:	9400      	str	r4, [sp, #0]
   24e2c:	4623      	mov	r3, r4
   24e2e:	2201      	movs	r2, #1
   24e30:	4920      	ldr	r1, [pc, #128]	; (24eb4 <uarte_0_init+0x100>)
   24e32:	f7ff fefb 	bl	24c2c <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   24e36:	f06f 0404 	mvn.w	r4, #4
UART_NRF_UARTE_DEVICE(0);
   24e3a:	4620      	mov	r0, r4
   24e3c:	b007      	add	sp, #28
   24e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   24e42:	7f32      	ldrb	r2, [r6, #28]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   24e44:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
   24e48:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   24e4c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   24e50:	2301      	movs	r3, #1
   24e52:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   24e54:	4a18      	ldr	r2, [pc, #96]	; (24eb8 <uarte_0_init+0x104>)
   24e56:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   24e5a:	2308      	movs	r3, #8
   24e5c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
   24e60:	f898 3008 	ldrb.w	r3, [r8, #8]
   24e64:	b953      	cbnz	r3, 24e7c <uarte_0_init+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24e66:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   24e6a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   24e6e:	69b3      	ldr	r3, [r6, #24]
   24e70:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   24e74:	2301      	movs	r3, #1
   24e76:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24e7a:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   24e7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   24e80:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   24e82:	bf5c      	itt	pl
   24e84:	f44f 7280 	movpl.w	r2, #256	; 0x100
   24e88:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   24e8c:	06db      	lsls	r3, r3, #27
   24e8e:	bf44      	itt	mi
   24e90:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   24e94:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   24e98:	6973      	ldr	r3, [r6, #20]
   24e9a:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24e9e:	2300      	movs	r3, #0
   24ea0:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24ea4:	2301      	movs	r3, #1
   24ea6:	60ab      	str	r3, [r5, #8]
   24ea8:	60eb      	str	r3, [r5, #12]
UART_NRF_UARTE_DEVICE(0);
   24eaa:	e7c6      	b.n	24e3a <uarte_0_init+0x86>
   24eac:	0bad0000 	.word	0x0bad0000
   24eb0:	000389dd 	.word	0x000389dd
   24eb4:	00034af8 	.word	0x00034af8
   24eb8:	40017000 	.word	0x40017000

00024ebc <uarte_nrfx_poll_out>:
{
   24ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24ec0:	4604      	mov	r4, r0
   24ec2:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
   24ec4:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   24ec6:	f00e fa45 	bl	33354 <k_is_in_isr>
   24eca:	b910      	cbnz	r0, 24ed2 <uarte_nrfx_poll_out+0x16>
	return !z_sys_post_kernel;
   24ecc:	4b21      	ldr	r3, [pc, #132]	; (24f54 <uarte_nrfx_poll_out+0x98>)
	if (isr_mode) {
   24ece:	781b      	ldrb	r3, [r3, #0]
   24ed0:	b98b      	cbnz	r3, 24ef6 <uarte_nrfx_poll_out+0x3a>
	__asm__ volatile(
   24ed2:	f04f 0320 	mov.w	r3, #32
   24ed6:	f3ef 8811 	mrs	r8, BASEPRI
   24eda:	f383 8812 	msr	BASEPRI_MAX, r3
   24ede:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   24ee2:	6860      	ldr	r0, [r4, #4]
   24ee4:	4646      	mov	r6, r8
   24ee6:	f00c fb01 	bl	314ec <is_tx_ready.isra.0>
   24eea:	bb30      	cbnz	r0, 24f3a <uarte_nrfx_poll_out+0x7e>
	__asm__ volatile(
   24eec:	f388 8811 	msr	BASEPRI, r8
   24ef0:	f3bf 8f6f 	isb	sy
}
   24ef4:	e7ed      	b.n	24ed2 <uarte_nrfx_poll_out+0x16>
{
   24ef6:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   24ef8:	6860      	ldr	r0, [r4, #4]
   24efa:	f00c faf7 	bl	314ec <is_tx_ready.isra.0>
   24efe:	b970      	cbnz	r0, 24f1e <uarte_nrfx_poll_out+0x62>
   24f00:	2001      	movs	r0, #1
   24f02:	f00d f8db 	bl	320bc <nrfx_busy_wait>
   24f06:	3e01      	subs	r6, #1
   24f08:	d1f6      	bne.n	24ef8 <uarte_nrfx_poll_out+0x3c>
	return z_impl_k_sleep(timeout);
   24f0a:	2100      	movs	r1, #0
   24f0c:	2021      	movs	r0, #33	; 0x21
   24f0e:	f007 ff41 	bl	2cd94 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   24f12:	e7f0      	b.n	24ef6 <uarte_nrfx_poll_out+0x3a>
	__asm__ volatile(
   24f14:	f388 8811 	msr	BASEPRI, r8
   24f18:	f3bf 8f6f 	isb	sy
}
   24f1c:	e7f5      	b.n	24f0a <uarte_nrfx_poll_out+0x4e>
	__asm__ volatile(
   24f1e:	f04f 0320 	mov.w	r3, #32
   24f22:	f3ef 8811 	mrs	r8, BASEPRI
   24f26:	f383 8812 	msr	BASEPRI_MAX, r3
   24f2a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   24f2e:	6860      	ldr	r0, [r4, #4]
   24f30:	4646      	mov	r6, r8
   24f32:	f00c fadb 	bl	314ec <is_tx_ready.isra.0>
   24f36:	2800      	cmp	r0, #0
   24f38:	d0ec      	beq.n	24f14 <uarte_nrfx_poll_out+0x58>
	*data->char_out = c;
   24f3a:	697b      	ldr	r3, [r7, #20]
	tx_start(dev, data->char_out, 1);
   24f3c:	2201      	movs	r2, #1
	*data->char_out = c;
   24f3e:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
   24f40:	6979      	ldr	r1, [r7, #20]
   24f42:	6860      	ldr	r0, [r4, #4]
   24f44:	f00c fab7 	bl	314b6 <tx_start.isra.0>
	__asm__ volatile(
   24f48:	f386 8811 	msr	BASEPRI, r6
   24f4c:	f3bf 8f6f 	isb	sy
}
   24f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24f54:	20010799 	.word	0x20010799

00024f58 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   24f58:	2301      	movs	r3, #1
   24f5a:	4083      	lsls	r3, r0
{
   24f5c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   24f5e:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24f60:	4a0c      	ldr	r2, [pc, #48]	; (24f94 <compare_int_lock+0x3c>)
   24f62:	e8d2 1fef 	ldaex	r1, [r2]
   24f66:	ea01 0c04 	and.w	ip, r1, r4
   24f6a:	e8c2 cfee 	stlex	lr, ip, [r2]
   24f6e:	f1be 0f00 	cmp.w	lr, #0
   24f72:	d1f6      	bne.n	24f62 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   24f74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   24f78:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   24f7c:	4a06      	ldr	r2, [pc, #24]	; (24f98 <compare_int_lock+0x40>)
   24f7e:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
   24f82:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   24f86:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   24f8a:	420b      	tst	r3, r1
}
   24f8c:	bf14      	ite	ne
   24f8e:	2001      	movne	r0, #1
   24f90:	2000      	moveq	r0, #0
   24f92:	bd10      	pop	{r4, pc}
   24f94:	2000d324 	.word	0x2000d324
   24f98:	40015000 	.word	0x40015000

00024f9c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   24f9c:	4919      	ldr	r1, [pc, #100]	; (25004 <sys_clock_timeout_handler+0x68>)
{
   24f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24fa0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   24fa2:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   24fa6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   24fa8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   24fac:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   24fb0:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   24fb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   24fb6:	d222      	bcs.n	24ffe <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   24fb8:	4b13      	ldr	r3, [pc, #76]	; (25008 <sys_clock_timeout_handler+0x6c>)
   24fba:	681b      	ldr	r3, [r3, #0]
   24fbc:	0a1a      	lsrs	r2, r3, #8
   24fbe:	061b      	lsls	r3, r3, #24
   24fc0:	195e      	adds	r6, r3, r5
   24fc2:	4b12      	ldr	r3, [pc, #72]	; (2500c <sys_clock_timeout_handler+0x70>)
   24fc4:	f142 0700 	adc.w	r7, r2, #0
   24fc8:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   24fcc:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   24fce:	f008 f84f 	bl	2d070 <sys_clock_announce>
    return p_reg->CC[ch];
   24fd2:	00a3      	lsls	r3, r4, #2
   24fd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24fd8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
   24fdc:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   24fe0:	42aa      	cmp	r2, r5
   24fe2:	d10b      	bne.n	24ffc <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   24fe4:	b91e      	cbnz	r6, 24fee <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   24fe6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   24fea:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   24fee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   24ff2:	4b07      	ldr	r3, [pc, #28]	; (25010 <sys_clock_timeout_handler+0x74>)
   24ff4:	fa00 f404 	lsl.w	r4, r0, r4
   24ff8:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   24ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   24ffe:	2600      	movs	r6, #0
   25000:	e7e5      	b.n	24fce <sys_clock_timeout_handler+0x32>
   25002:	bf00      	nop
   25004:	2000cd58 	.word	0x2000cd58
   25008:	2000d328 	.word	0x2000d328
   2500c:	2000cd40 	.word	0x2000cd40
   25010:	40015000 	.word	0x40015000

00025014 <compare_int_unlock>:
	if (key) {
   25014:	b1e1      	cbz	r1, 25050 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
   25016:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25018:	4a0e      	ldr	r2, [pc, #56]	; (25054 <compare_int_unlock+0x40>)
   2501a:	4083      	lsls	r3, r0
   2501c:	e8d2 1fef 	ldaex	r1, [r2]
   25020:	4319      	orrs	r1, r3
   25022:	e8c2 1fec 	stlex	ip, r1, [r2]
   25026:	f1bc 0f00 	cmp.w	ip, #0
   2502a:	d1f7      	bne.n	2501c <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   2502c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
   25030:	4a09      	ldr	r2, [pc, #36]	; (25058 <compare_int_unlock+0x44>)
   25032:	4083      	lsls	r3, r0
   25034:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25038:	4b08      	ldr	r3, [pc, #32]	; (2505c <compare_int_unlock+0x48>)
   2503a:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   2503e:	fa23 f000 	lsr.w	r0, r3, r0
   25042:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25044:	bf42      	ittt	mi
   25046:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
   2504a:	4b05      	ldrmi	r3, [pc, #20]	; (25060 <compare_int_unlock+0x4c>)
   2504c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   25050:	4770      	bx	lr
   25052:	bf00      	nop
   25054:	2000d324 	.word	0x2000d324
   25058:	40015000 	.word	0x40015000
   2505c:	2000d320 	.word	0x2000d320
   25060:	e000e100 	.word	0xe000e100

00025064 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   25064:	4b0d      	ldr	r3, [pc, #52]	; (2509c <z_nrf_rtc_timer_read+0x38>)
   25066:	6818      	ldr	r0, [r3, #0]
   25068:	0a01      	lsrs	r1, r0, #8
   2506a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   2506c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   25070:	4b0b      	ldr	r3, [pc, #44]	; (250a0 <z_nrf_rtc_timer_read+0x3c>)
   25072:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   25076:	1818      	adds	r0, r3, r0
   25078:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   2507c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   25080:	d20a      	bcs.n	25098 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   25082:	4b08      	ldr	r3, [pc, #32]	; (250a4 <z_nrf_rtc_timer_read+0x40>)
   25084:	e9d3 2300 	ldrd	r2, r3, [r3]
   25088:	4290      	cmp	r0, r2
   2508a:	eb71 0303 	sbcs.w	r3, r1, r3
   2508e:	d203      	bcs.n	25098 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   25090:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   25094:	f141 0100 	adc.w	r1, r1, #0
}
   25098:	4770      	bx	lr
   2509a:	bf00      	nop
   2509c:	2000d328 	.word	0x2000d328
   250a0:	40015000 	.word	0x40015000
   250a4:	2000cd40 	.word	0x2000cd40

000250a8 <compare_set>:
{
   250a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250ac:	ed2d 8b02 	vpush	{d8}
   250b0:	b085      	sub	sp, #20
   250b2:	4616      	mov	r6, r2
   250b4:	4698      	mov	r8, r3
   250b6:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   250b8:	f7ff ff4e 	bl	24f58 <compare_int_lock>
   250bc:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   250c0:	f7ff ffd0 	bl	25064 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   250c4:	42b0      	cmp	r0, r6
   250c6:	eb71 0308 	sbcs.w	r3, r1, r8
   250ca:	d279      	bcs.n	251c0 <compare_set+0x118>
		if (target_time - curr_time > COUNTER_SPAN) {
   250cc:	4b44      	ldr	r3, [pc, #272]	; (251e0 <compare_set+0x138>)
   250ce:	1a30      	subs	r0, r6, r0
   250d0:	eb68 0101 	sbc.w	r1, r8, r1
   250d4:	4298      	cmp	r0, r3
   250d6:	f171 0300 	sbcs.w	r3, r1, #0
   250da:	d27e      	bcs.n	251da <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   250dc:	4b41      	ldr	r3, [pc, #260]	; (251e4 <compare_set+0x13c>)
   250de:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   250e2:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   250e6:	45d8      	cmp	r8, fp
   250e8:	bf08      	it	eq
   250ea:	4556      	cmpeq	r6, sl
   250ec:	d050      	beq.n	25190 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   250ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
   250f2:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   250f6:	4614      	mov	r4, r2
   250f8:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   250fc:	f105 0750 	add.w	r7, r5, #80	; 0x50
   25100:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
   25104:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   25106:	40ab      	lsls	r3, r5
   25108:	f509 39a8 	add.w	r9, r9, #86016	; 0x15000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2510c:	b2bf      	uxth	r7, r7
   2510e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   25112:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   25114:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   25118:	4b33      	ldr	r3, [pc, #204]	; (251e8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2511a:	f507 37a8 	add.w	r7, r7, #86016	; 0x15000
     return p_reg->COUNTER;
   2511e:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   25122:	1a40      	subs	r0, r0, r1
   25124:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   25128:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   2512c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   2512e:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   25132:	d107      	bne.n	25144 <compare_set+0x9c>
   25134:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   25138:	2013      	movs	r0, #19
   2513a:	f00e fbaa 	bl	33892 <z_impl_k_busy_wait>
   2513e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   25142:	4b29      	ldr	r3, [pc, #164]	; (251e8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   25144:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   25148:	eba4 000c 	sub.w	r0, r4, ip
   2514c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   25150:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25154:	bf88      	it	hi
   25156:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25158:	2000      	movs	r0, #0
   2515a:	6038      	str	r0, [r7, #0]
   2515c:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   2515e:	9801      	ldr	r0, [sp, #4]
   25160:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   25164:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   25168:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   2516c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   25170:	4281      	cmp	r1, r0
   25172:	d006      	beq.n	25182 <compare_set+0xda>
	return (a - b) & COUNTER_MAX;
   25174:	1a20      	subs	r0, r4, r0
   25176:	3802      	subs	r0, #2
   25178:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   2517c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25180:	d81c      	bhi.n	251bc <compare_set+0x114>
	return (a - b) & COUNTER_MAX;
   25182:	1aa4      	subs	r4, r4, r2
   25184:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   25188:	eb14 0a06 	adds.w	sl, r4, r6
   2518c:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
   25190:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
   25192:	4914      	ldr	r1, [pc, #80]	; (251e4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   25194:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
   25196:	012b      	lsls	r3, r5, #4
   25198:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
   2519c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
   2519e:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
   251a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   251a4:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
   251a6:	4628      	mov	r0, r5
   251a8:	ee18 1a10 	vmov	r1, s16
   251ac:	f7ff ff32 	bl	25014 <compare_int_unlock>
}
   251b0:	4620      	mov	r0, r4
   251b2:	b005      	add	sp, #20
   251b4:	ecbd 8b02 	vpop	{d8}
   251b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   251bc:	4620      	mov	r0, r4
   251be:	e7ae      	b.n	2511e <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
   251c0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   251c2:	4a0a      	ldr	r2, [pc, #40]	; (251ec <compare_set+0x144>)
   251c4:	40ab      	lsls	r3, r5
   251c6:	e8d2 1fef 	ldaex	r1, [r2]
   251ca:	4319      	orrs	r1, r3
   251cc:	e8c2 1fe0 	stlex	r0, r1, [r2]
   251d0:	2800      	cmp	r0, #0
   251d2:	d1f8      	bne.n	251c6 <compare_set+0x11e>
   251d4:	46b2      	mov	sl, r6
   251d6:	46c3      	mov	fp, r8
   251d8:	e7da      	b.n	25190 <compare_set+0xe8>
			return -EINVAL;
   251da:	f06f 0415 	mvn.w	r4, #21
   251de:	e7e2      	b.n	251a6 <compare_set+0xfe>
   251e0:	01000001 	.word	0x01000001
   251e4:	2000cd48 	.word	0x2000cd48
   251e8:	40015000 	.word	0x40015000
   251ec:	2000d320 	.word	0x2000d320

000251f0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   251f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
   251f2:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   251f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   251f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   251fc:	4d16      	ldr	r5, [pc, #88]	; (25258 <sys_clock_driver_init+0x68>)
   251fe:	4b17      	ldr	r3, [pc, #92]	; (2525c <sys_clock_driver_init+0x6c>)
   25200:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   25204:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   25208:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2520c:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2520e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   25212:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   25216:	4b12      	ldr	r3, [pc, #72]	; (25260 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   25218:	2101      	movs	r1, #1
   2521a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   2521e:	2015      	movs	r0, #21
   25220:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   25224:	4622      	mov	r2, r4
   25226:	f7fc fc95 	bl	21b54 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   2522a:	2015      	movs	r0, #21
   2522c:	f7fc fc74 	bl	21b18 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   25230:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   25232:	4a0c      	ldr	r2, [pc, #48]	; (25264 <sys_clock_driver_init+0x74>)
   25234:	60ab      	str	r3, [r5, #8]
   25236:	602b      	str	r3, [r5, #0]
   25238:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   2523a:	4b0b      	ldr	r3, [pc, #44]	; (25268 <sys_clock_driver_init+0x78>)
   2523c:	4a0b      	ldr	r2, [pc, #44]	; (2526c <sys_clock_driver_init+0x7c>)
   2523e:	9300      	str	r3, [sp, #0]
   25240:	4620      	mov	r0, r4
   25242:	2300      	movs	r3, #0
   25244:	9401      	str	r4, [sp, #4]
   25246:	f7ff ff2f 	bl	250a8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   2524a:	4630      	mov	r0, r6
   2524c:	f7ff fa1a 	bl	24684 <z_nrf_clock_control_lf_on>

	return 0;
}
   25250:	4620      	mov	r0, r4
   25252:	b002      	add	sp, #8
   25254:	bd70      	pop	{r4, r5, r6, pc}
   25256:	bf00      	nop
   25258:	40015000 	.word	0x40015000
   2525c:	2000cd48 	.word	0x2000cd48
   25260:	e000e100 	.word	0xe000e100
   25264:	2000d324 	.word	0x2000d324
   25268:	00024f9d 	.word	0x00024f9d
   2526c:	007fffff 	.word	0x007fffff

00025270 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
   25270:	4b35      	ldr	r3, [pc, #212]	; (25348 <rtc_nrf_isr+0xd8>)
{
   25272:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25276:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   2527a:	0791      	lsls	r1, r2, #30
   2527c:	d50b      	bpl.n	25296 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2527e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   25282:	b142      	cbz	r2, 25296 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25284:	2200      	movs	r2, #0
   25286:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
   2528a:	4a30      	ldr	r2, [pc, #192]	; (2534c <rtc_nrf_isr+0xdc>)
   2528c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   25290:	6813      	ldr	r3, [r2, #0]
   25292:	3301      	adds	r3, #1
   25294:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   25296:	f04f 0320 	mov.w	r3, #32
   2529a:	f3ef 8111 	mrs	r1, BASEPRI
   2529e:	f383 8812 	msr	BASEPRI_MAX, r3
   252a2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   252a6:	4b28      	ldr	r3, [pc, #160]	; (25348 <rtc_nrf_isr+0xd8>)
   252a8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   252ac:	03d2      	lsls	r2, r2, #15
   252ae:	d50d      	bpl.n	252cc <rtc_nrf_isr+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   252b0:	4a27      	ldr	r2, [pc, #156]	; (25350 <rtc_nrf_isr+0xe0>)
   252b2:	e8d2 0fef 	ldaex	r0, [r2]
   252b6:	f020 0401 	bic.w	r4, r0, #1
   252ba:	e8c2 4fe5 	stlex	r5, r4, [r2]
   252be:	2d00      	cmp	r5, #0
   252c0:	d1f7      	bne.n	252b2 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   252c2:	2800      	cmp	r0, #0
   252c4:	d136      	bne.n	25334 <rtc_nrf_isr+0xc4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   252c6:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
   252ca:	bb9a      	cbnz	r2, 25334 <rtc_nrf_isr+0xc4>
{
   252cc:	2300      	movs	r3, #0
	__asm__ volatile(
   252ce:	f381 8811 	msr	BASEPRI, r1
   252d2:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   252d6:	b353      	cbz	r3, 2532e <rtc_nrf_isr+0xbe>
		curr_time = z_nrf_rtc_timer_read();
   252d8:	f7ff fec4 	bl	25064 <z_nrf_rtc_timer_read>
	__asm__ volatile(
   252dc:	f04f 0320 	mov.w	r3, #32
   252e0:	f3ef 8711 	mrs	r7, BASEPRI
   252e4:	f383 8812 	msr	BASEPRI_MAX, r3
   252e8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   252ec:	4b19      	ldr	r3, [pc, #100]	; (25354 <rtc_nrf_isr+0xe4>)
   252ee:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
   252f2:	42a0      	cmp	r0, r4
   252f4:	eb71 0205 	sbcs.w	r2, r1, r5
   252f8:	f04f 0200 	mov.w	r2, #0
   252fc:	d321      	bcc.n	25342 <rtc_nrf_isr+0xd2>
			user_context = cc_data[chan].user_context;
   252fe:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   25302:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   25306:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
   2530a:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   2530c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   25310:	e9c3 8902 	strd	r8, r9, [r3, #8]
   25314:	4b0c      	ldr	r3, [pc, #48]	; (25348 <rtc_nrf_isr+0xd8>)
   25316:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
   2531a:	f387 8811 	msr	BASEPRI, r7
   2531e:	f3bf 8f6f 	isb	sy
		if (handler) {
   25322:	b121      	cbz	r1, 2532e <rtc_nrf_isr+0xbe>
			handler(chan, expire_time, user_context);
   25324:	4622      	mov	r2, r4
   25326:	462b      	mov	r3, r5
   25328:	2000      	movs	r0, #0
   2532a:	9600      	str	r6, [sp, #0]
   2532c:	4788      	blx	r1
}
   2532e:	b003      	add	sp, #12
   25330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   25334:	2200      	movs	r2, #0
   25336:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
   2533a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   2533e:	2301      	movs	r3, #1
}
   25340:	e7c5      	b.n	252ce <rtc_nrf_isr+0x5e>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   25342:	4611      	mov	r1, r2
   25344:	e7e9      	b.n	2531a <rtc_nrf_isr+0xaa>
   25346:	bf00      	nop
   25348:	40015000 	.word	0x40015000
   2534c:	2000d328 	.word	0x2000d328
   25350:	2000d320 	.word	0x2000d320
   25354:	2000cd48 	.word	0x2000cd48

00025358 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   25358:	1c43      	adds	r3, r0, #1
{
   2535a:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   2535c:	d020      	beq.n	253a0 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2535e:	2801      	cmp	r0, #1
   25360:	dd20      	ble.n	253a4 <sys_clock_set_timeout+0x4c>
   25362:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   25366:	da1f      	bge.n	253a8 <sys_clock_set_timeout+0x50>
   25368:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   2536a:	f7ff fe7b 	bl	25064 <z_nrf_rtc_timer_read>
   2536e:	4b0f      	ldr	r3, [pc, #60]	; (253ac <sys_clock_set_timeout+0x54>)
   25370:	e9d3 1300 	ldrd	r1, r3, [r3]
   25374:	1a40      	subs	r0, r0, r1
		ticks = 0;
   25376:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2537a:	bf28      	it	cs
   2537c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   2537e:	3001      	adds	r0, #1
   25380:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   25382:	480b      	ldr	r0, [pc, #44]	; (253b0 <sys_clock_set_timeout+0x58>)
   25384:	4282      	cmp	r2, r0
   25386:	bf28      	it	cs
   25388:	4602      	movcs	r2, r0
   2538a:	2000      	movs	r0, #0
   2538c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   2538e:	4909      	ldr	r1, [pc, #36]	; (253b4 <sys_clock_set_timeout+0x5c>)
   25390:	9001      	str	r0, [sp, #4]
   25392:	9100      	str	r1, [sp, #0]
   25394:	f143 0300 	adc.w	r3, r3, #0
   25398:	f7ff fe86 	bl	250a8 <compare_set>
}
   2539c:	b002      	add	sp, #8
   2539e:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   253a0:	4803      	ldr	r0, [pc, #12]	; (253b0 <sys_clock_set_timeout+0x58>)
   253a2:	e7e1      	b.n	25368 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   253a4:	2400      	movs	r4, #0
   253a6:	e7e0      	b.n	2536a <sys_clock_set_timeout+0x12>
   253a8:	4c01      	ldr	r4, [pc, #4]	; (253b0 <sys_clock_set_timeout+0x58>)
   253aa:	e7de      	b.n	2536a <sys_clock_set_timeout+0x12>
   253ac:	2000cd58 	.word	0x2000cd58
   253b0:	007fffff 	.word	0x007fffff
   253b4:	00024f9d 	.word	0x00024f9d

000253b8 <sys_clock_elapsed>:
{
   253b8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   253ba:	f7ff fe53 	bl	25064 <z_nrf_rtc_timer_read>
   253be:	4b02      	ldr	r3, [pc, #8]	; (253c8 <sys_clock_elapsed+0x10>)
   253c0:	681b      	ldr	r3, [r3, #0]
}
   253c2:	1ac0      	subs	r0, r0, r3
   253c4:	bd08      	pop	{r3, pc}
   253c6:	bf00      	nop
   253c8:	2000cd58 	.word	0x2000cd58

000253cc <nrf_gpio_pin_write>:
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   253cc:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
   253ce:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   253d2:	fa03 f000 	lsl.w	r0, r3, r0
   253d6:	4b03      	ldr	r3, [pc, #12]	; (253e4 <nrf_gpio_pin_write+0x18>)
    if (value == 0)
   253d8:	b909      	cbnz	r1, 253de <nrf_gpio_pin_write+0x12>
    p_reg->OUTCLR = clr_mask;
   253da:	60d8      	str	r0, [r3, #12]
}
   253dc:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
   253de:	6098      	str	r0, [r3, #8]
}
   253e0:	4770      	bx	lr
   253e2:	bf00      	nop
   253e4:	40842500 	.word	0x40842500

000253e8 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
   253e8:	b510      	push	{r4, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
   253ea:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   253ee:	2c00      	cmp	r4, #0
   253f0:	bf1c      	itt	ne
   253f2:	2100      	movne	r1, #0
   253f4:	2201      	movne	r2, #1
    *p_pin = pin_number & 0x1F;
   253f6:	f000 041f 	and.w	r4, r0, #31
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   253fa:	021b      	lsls	r3, r3, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   253fc:	f3c0 1081 	ubfx	r0, r0, #6, #2
   25400:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
   25404:	430b      	orrs	r3, r1
   25406:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   2540a:	4b02      	ldr	r3, [pc, #8]	; (25414 <nrf_pin_configure+0x2c>)
   2540c:	3480      	adds	r4, #128	; 0x80
   2540e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
		     NRF_GPIO_PIN_NOSENSE);
}
   25412:	bd10      	pop	{r4, pc}
   25414:	40842500 	.word	0x40842500

00025418 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   25418:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2541c:	4616      	mov	r6, r2
   2541e:	4605      	mov	r5, r0
			break;
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   25420:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
   25422:	f8df 8114 	ldr.w	r8, [pc, #276]	; 25538 <pinctrl_configure_pins+0x120>
   25426:	eb00 0981 	add.w	r9, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   2542a:	454d      	cmp	r5, r9
   2542c:	d103      	bne.n	25436 <pinctrl_configure_pins+0x1e>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
   2542e:	2000      	movs	r0, #0
}
   25430:	b003      	add	sp, #12
   25432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   25436:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
   25438:	0c22      	lsrs	r2, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   2543a:	f3c4 2303 	ubfx	r3, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
   2543e:	2a19      	cmp	r2, #25
   25440:	d877      	bhi.n	25532 <pinctrl_configure_pins+0x11a>
   25442:	e8df f002 	tbb	[pc, r2]
   25446:	1a0d      	.short	0x1a0d
   25448:	38264421 	.word	0x38264421
   2544c:	76767644 	.word	0x76767644
   25450:	76514976 	.word	0x76514976
   25454:	76767676 	.word	0x76767676
   25458:	76767676 	.word	0x76767676
   2545c:	706a6456 	.word	0x706a6456
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
   25460:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   25464:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   25468:	682a      	ldr	r2, [r5, #0]
   2546a:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2546e:	fa07 f202 	lsl.w	r2, r7, r2
    p_reg->OUTSET = set_mask;
   25472:	f8c8 2008 	str.w	r2, [r8, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   25476:	2201      	movs	r2, #1
   25478:	e004      	b.n	25484 <pinctrl_configure_pins+0x6c>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
   2547a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2547e:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   25482:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   25484:	4611      	mov	r1, r2
   25486:	e011      	b.n	254ac <pinctrl_configure_pins+0x94>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
   25488:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2548c:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
   25490:	e7ea      	b.n	25468 <pinctrl_configure_pins+0x50>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
   25492:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   25496:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   2549a:	682a      	ldr	r2, [r5, #0]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2549c:	2101      	movs	r1, #1
   2549e:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   254a2:	fa07 f202 	lsl.w	r2, r7, r2
    p_reg->OUTCLR = clr_mask;
   254a6:	f8c8 200c 	str.w	r2, [r8, #12]
   254aa:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   254ac:	6828      	ldr	r0, [r5, #0]
   254ae:	f7ff ff9b 	bl	253e8 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   254b2:	3504      	adds	r5, #4
   254b4:	e7b9      	b.n	2542a <pinctrl_configure_pins+0x12>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
   254b6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   254ba:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   254be:	682a      	ldr	r2, [r5, #0]
   254c0:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   254c4:	fa07 f202 	lsl.w	r2, r7, r2
    p_reg->OUTCLR = clr_mask;
   254c8:	f8c8 200c 	str.w	r2, [r8, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   254cc:	e7d3      	b.n	25476 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
   254ce:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   254d2:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   254d6:	e7d4      	b.n	25482 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
   254d8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   254dc:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
   254e0:	2b00      	cmp	r3, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
   254e2:	bf08      	it	eq
   254e4:	2306      	moveq	r3, #6
   254e6:	e7cc      	b.n	25482 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
   254e8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   254ec:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
   254f0:	e7f6      	b.n	254e0 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
   254f2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   254f6:	9301      	str	r3, [sp, #4]
   254f8:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   254fc:	6828      	ldr	r0, [r5, #0]
   254fe:	f3c0 3140 	ubfx	r1, r0, #13, #1
   25502:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   25506:	f7ff ff61 	bl	253cc <nrf_gpio_pin_write>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
   2550a:	9b01      	ldr	r3, [sp, #4]
   2550c:	e7b3      	b.n	25476 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
   2550e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   25512:	9301      	str	r3, [sp, #4]
   25514:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   25518:	e7f0      	b.n	254fc <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
   2551a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2551e:	9301      	str	r3, [sp, #4]
   25520:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
   25524:	e7ea      	b.n	254fc <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
   25526:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   2552a:	9301      	str	r3, [sp, #4]
   2552c:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
   25530:	e7e4      	b.n	254fc <pinctrl_configure_pins+0xe4>
		switch (NRF_GET_FUN(pins[i])) {
   25532:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25536:	e77b      	b.n	25430 <pinctrl_configure_pins+0x18>
   25538:	40842500 	.word	0x40842500

0002553c <_nrf_modem_lib_init>:
			nrf_modem_at_err(err), nrf_modem_at_err_type(err));
	}
}

static int _nrf_modem_lib_init(const struct device *unused)
{
   2553c:	b570      	push	{r4, r5, r6, lr}
	int err;
	(void) err;

	if (!first_time_init) {
   2553e:	4d1b      	ldr	r5, [pc, #108]	; (255ac <_nrf_modem_lib_init+0x70>)
   25540:	4c1b      	ldr	r4, [pc, #108]	; (255b0 <_nrf_modem_lib_init+0x74>)
   25542:	782b      	ldrb	r3, [r5, #0]
   25544:	b933      	cbnz	r3, 25554 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   25546:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   2554a:	481a      	ldr	r0, [pc, #104]	; (255b4 <_nrf_modem_lib_init+0x78>)
   2554c:	f00d ff1e 	bl	3338c <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   25550:	2301      	movs	r3, #1
   25552:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   25554:	2200      	movs	r2, #0
   25556:	202a      	movs	r0, #42	; 0x2a
   25558:	4611      	mov	r1, r2
   2555a:	f7fc fafb 	bl	21b54 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   2555e:	2100      	movs	r1, #0
   25560:	4815      	ldr	r0, [pc, #84]	; (255b8 <_nrf_modem_lib_init+0x7c>)
   25562:	f006 fbe3 	bl	2bd2c <nrf_modem_init>
   25566:	4d15      	ldr	r5, [pc, #84]	; (255bc <_nrf_modem_lib_init+0x80>)
   25568:	6028      	str	r0, [r5, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   2556a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2556e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25572:	4810      	ldr	r0, [pc, #64]	; (255b4 <_nrf_modem_lib_init+0x78>)
   25574:	f006 ff3e 	bl	2c3f4 <z_impl_k_mutex_lock>
	return list->head;
   25578:	6820      	ldr	r0, [r4, #0]
	if (IS_ENABLED(CONFIG_NRF_MODEM_LIB_LOG_FW_VERSION_UUID)) {
		log_fw_version_uuid();
	}

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   2557a:	b180      	cbz	r0, 2559e <_nrf_modem_lib_init+0x62>
	return node->next;
   2557c:	6804      	ldr	r4, [r0, #0]
	z_impl_k_sem_give(sem);
   2557e:	3004      	adds	r0, #4
   25580:	f007 f820 	bl	2c5c4 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   25584:	b15c      	cbz	r4, 2559e <_nrf_modem_lib_init+0x62>
   25586:	4620      	mov	r0, r4
   25588:	6824      	ldr	r4, [r4, #0]
   2558a:	e7f8      	b.n	2557e <_nrf_modem_lib_init+0x42>
	k_mutex_unlock(&slist_mutex);

	LOG_DBG("Modem library has initialized, ret %d", init_ret);
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
		LOG_DBG("Modem init callback: %p", e->callback);
		e->callback(init_ret, e->context);
   2558c:	e9d4 3100 	ldrd	r3, r1, [r4]
   25590:	6828      	ldr	r0, [r5, #0]
   25592:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   25594:	3408      	adds	r4, #8
   25596:	42b4      	cmp	r4, r6
   25598:	d3f8      	bcc.n	2558c <_nrf_modem_lib_init+0x50>
		 */
		return 0;
	}

	return init_ret;
}
   2559a:	2000      	movs	r0, #0
   2559c:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_mutex_unlock(mutex);
   2559e:	4805      	ldr	r0, [pc, #20]	; (255b4 <_nrf_modem_lib_init+0x78>)
   255a0:	f006 ffa0 	bl	2c4e4 <z_impl_k_mutex_unlock>
	STRUCT_SECTION_FOREACH(nrf_modem_lib_init_cb, e) {
   255a4:	4c06      	ldr	r4, [pc, #24]	; (255c0 <_nrf_modem_lib_init+0x84>)
   255a6:	4e07      	ldr	r6, [pc, #28]	; (255c4 <_nrf_modem_lib_init+0x88>)
   255a8:	e7f5      	b.n	25596 <_nrf_modem_lib_init+0x5a>
   255aa:	bf00      	nop
   255ac:	2000e24f 	.word	0x2000e24f
   255b0:	2000d330 	.word	0x2000d330
   255b4:	2000d338 	.word	0x2000d338
   255b8:	00034f90 	.word	0x00034f90
   255bc:	2000d32c 	.word	0x2000d32c
   255c0:	0003a200 	.word	0x0003a200
   255c4:	0003a218 	.word	0x0003a218

000255c8 <thread_monitor_entry_get>:
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   255c8:	4b10      	ldr	r3, [pc, #64]	; (2560c <thread_monitor_entry_get+0x44>)
{
   255ca:	b5f0      	push	{r4, r5, r6, r7, lr}
		entry_age = rpc_event_cnt - entry->cnt;
   255cc:	681a      	ldr	r2, [r3, #0]
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   255ce:	4b10      	ldr	r3, [pc, #64]	; (25610 <thread_monitor_entry_get+0x48>)
{
   255d0:	4601      	mov	r1, r0
		entry_age = rpc_event_cnt - entry->cnt;
   255d2:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   255d4:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   255d6:	4618      	mov	r0, r3
   255d8:	461f      	mov	r7, r3
		if (entry->id == id) {
   255da:	6804      	ldr	r4, [r0, #0]
   255dc:	428c      	cmp	r4, r1
   255de:	d011      	beq.n	25604 <thread_monitor_entry_get+0x3c>
		} else if (entry->id == 0) {
   255e0:	b18c      	cbz	r4, 25606 <thread_monitor_entry_get+0x3e>
		entry_age = rpc_event_cnt - entry->cnt;
   255e2:	6844      	ldr	r4, [r0, #4]
   255e4:	1b14      	subs	r4, r2, r4
		if (entry_age > oldest_entry_age) {
   255e6:	42b4      	cmp	r4, r6
   255e8:	bfc8      	it	gt
   255ea:	4603      	movgt	r3, r0
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   255ec:	f100 0008 	add.w	r0, r0, #8
		if (entry_age > oldest_entry_age) {
   255f0:	bfc8      	it	gt
   255f2:	4626      	movgt	r6, r4
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   255f4:	42b8      	cmp	r0, r7
   255f6:	d301      	bcc.n	255fc <thread_monitor_entry_get+0x34>
   255f8:	3d01      	subs	r5, #1
   255fa:	d1ee      	bne.n	255da <thread_monitor_entry_get+0x12>
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;

	return new_entry;
   255fc:	4618      	mov	r0, r3
	new_entry->cnt = rpc_event_cnt - 1;
   255fe:	3a01      	subs	r2, #1
	new_entry->id = id;
   25600:	6019      	str	r1, [r3, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   25602:	605a      	str	r2, [r3, #4]
}
   25604:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25606:	4603      	mov	r3, r0
   25608:	e7f8      	b.n	255fc <thread_monitor_entry_get+0x34>
   2560a:	bf00      	nop
   2560c:	2000d3ec 	.word	0x2000d3ec
   25610:	2000d3f8 	.word	0x2000d3f8

00025614 <on_init>:
	list->head = NULL;
   25614:	2000      	movs	r0, #0
   25616:	4b05      	ldr	r3, [pc, #20]	; (2562c <on_init+0x18>)
	list->tail = NULL;
   25618:	e9c3 0000 	strd	r0, r0, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2561c:	4b04      	ldr	r3, [pc, #16]	; (25630 <on_init+0x1c>)
   2561e:	e8d3 2fef 	ldaex	r2, [r3]
   25622:	e8c3 0fe1 	stlex	r1, r0, [r3]
   25626:	2900      	cmp	r1, #0
   25628:	d1f9      	bne.n	2561e <on_init+0xa>
	 */
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	return 0;
}
   2562a:	4770      	bx	lr
   2562c:	2000d3f0 	.word	0x2000d3f0
   25630:	2000d3ec 	.word	0x2000d3ec

00025634 <nrf_modem_os_timedwait>:
{
   25634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25638:	b088      	sub	sp, #32
   2563a:	460c      	mov	r4, r1
	if (!nrf_modem_is_initialized()) {
   2563c:	f00d fdf8 	bl	33230 <nrf_modem_is_initialized>
   25640:	4681      	mov	r9, r0
   25642:	b920      	cbnz	r0, 2564e <nrf_modem_os_timedwait+0x1a>
		return -NRF_ESHUTDOWN;
   25644:	f06f 006d 	mvn.w	r0, #109	; 0x6d
}
   25648:	b008      	add	sp, #32
   2564a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return z_impl_k_uptime_ticks();
   2564e:	f00e f91e 	bl	3388e <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   25652:	6823      	ldr	r3, [r4, #0]
   25654:	4605      	mov	r5, r0
   25656:	2b00      	cmp	r3, #0
   25658:	460f      	mov	r7, r1
   2565a:	d104      	bne.n	25666 <nrf_modem_os_timedwait+0x32>
	z_impl_k_yield();
   2565c:	f007 fb12 	bl	2cc84 <z_impl_k_yield>
		return -NRF_EAGAIN;
   25660:	f06f 000a 	mvn.w	r0, #10
   25664:	e7f0      	b.n	25648 <nrf_modem_os_timedwait+0x14>
		*timeout = SYS_FOREVER_MS;
   25666:	bfbc      	itt	lt
   25668:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2566c:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2566e:	2201      	movs	r2, #1
   25670:	2100      	movs	r1, #0
   25672:	a802      	add	r0, sp, #8
   25674:	f00d ff0c 	bl	33490 <z_impl_k_sem_init>
   25678:	ae01      	add	r6, sp, #4
	__asm__ volatile(
   2567a:	f04f 0320 	mov.w	r3, #32
   2567e:	f3ef 8a11 	mrs	sl, BASEPRI
   25682:	f383 8812 	msr	BASEPRI_MAX, r3
   25686:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2568a:	f007 fb9d 	bl	2cdc8 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   2568e:	f7ff ff9b 	bl	255c8 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   25692:	f8df 8120 	ldr.w	r8, [pc, #288]	; 257b4 <nrf_modem_os_timedwait+0x180>
   25696:	6843      	ldr	r3, [r0, #4]
   25698:	f8d8 2000 	ldr.w	r2, [r8]
   2569c:	4293      	cmp	r3, r2
   2569e:	f04f 0300 	mov.w	r3, #0
   256a2:	d107      	bne.n	256b4 <nrf_modem_os_timedwait+0x80>
	parent->next = child;
   256a4:	9301      	str	r3, [sp, #4]
	return list->tail;
   256a6:	4b42      	ldr	r3, [pc, #264]	; (257b0 <nrf_modem_os_timedwait+0x17c>)
   256a8:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   256aa:	2a00      	cmp	r2, #0
   256ac:	d170      	bne.n	25790 <nrf_modem_os_timedwait+0x15c>
	list->head = node;
   256ae:	e9c3 6600 	strd	r6, r6, [r3]
}
   256b2:	e001      	b.n	256b8 <nrf_modem_os_timedwait+0x84>
	bool allow_to_sleep = false;
   256b4:	4699      	mov	r9, r3
	entry->cnt = rpc_event_cnt;
   256b6:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   256b8:	f38a 8811 	msr	BASEPRI, sl
   256bc:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   256c0:	f1b9 0f00 	cmp.w	r9, #0
   256c4:	d062      	beq.n	2578c <nrf_modem_os_timedwait+0x158>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   256c6:	6823      	ldr	r3, [r4, #0]
   256c8:	1c5a      	adds	r2, r3, #1
   256ca:	d064      	beq.n	25796 <nrf_modem_os_timedwait+0x162>
   256cc:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   256d0:	f240 30e7 	movw	r0, #999	; 0x3e7
   256d4:	2100      	movs	r1, #0
   256d6:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   256da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   256de:	2300      	movs	r3, #0
   256e0:	fbcc 010e 	smlal	r0, r1, ip, lr
   256e4:	f7f7 fb64 	bl	1cdb0 <__aeabi_uldivmod>
   256e8:	4602      	mov	r2, r0
   256ea:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   256ec:	a802      	add	r0, sp, #8
   256ee:	f006 ff8f 	bl	2c610 <z_impl_k_sem_take>
	__asm__ volatile(
   256f2:	f04f 0320 	mov.w	r3, #32
   256f6:	f3ef 8911 	mrs	r9, BASEPRI
   256fa:	f383 8812 	msr	BASEPRI_MAX, r3
   256fe:	f3bf 8f6f 	isb	sy
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25702:	2100      	movs	r1, #0
	return list->head;
   25704:	4a2a      	ldr	r2, [pc, #168]	; (257b0 <nrf_modem_os_timedwait+0x17c>)
   25706:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25708:	b15b      	cbz	r3, 25722 <nrf_modem_os_timedwait+0xee>
   2570a:	42b3      	cmp	r3, r6
   2570c:	d14c      	bne.n	257a8 <nrf_modem_os_timedwait+0x174>
	return node->next;
   2570e:	9801      	ldr	r0, [sp, #4]
	return list->tail;
   25710:	6856      	ldr	r6, [r2, #4]
Z_GENLIST_REMOVE(slist, snode)
   25712:	2900      	cmp	r1, #0
   25714:	d143      	bne.n	2579e <nrf_modem_os_timedwait+0x16a>
   25716:	429e      	cmp	r6, r3
	list->head = node;
   25718:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2571a:	d100      	bne.n	2571e <nrf_modem_os_timedwait+0xea>
	list->tail = node;
   2571c:	6050      	str	r0, [r2, #4]
	parent->next = child;
   2571e:	2300      	movs	r3, #0
   25720:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   25722:	f007 fb51 	bl	2cdc8 <z_impl_z_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   25726:	f7ff ff4f 	bl	255c8 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   2572a:	f8d8 3000 	ldr.w	r3, [r8]
   2572e:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   25730:	f389 8811 	msr	BASEPRI, r9
   25734:	f3bf 8f6f 	isb	sy
	if (!nrf_modem_is_initialized()) {
   25738:	f00d fd7a 	bl	33230 <nrf_modem_is_initialized>
   2573c:	2800      	cmp	r0, #0
   2573e:	d081      	beq.n	25644 <nrf_modem_os_timedwait+0x10>
	if (*timeout == SYS_FOREVER_MS) {
   25740:	6826      	ldr	r6, [r4, #0]
   25742:	1c73      	adds	r3, r6, #1
   25744:	d022      	beq.n	2578c <nrf_modem_os_timedwait+0x158>
	return z_impl_k_uptime_ticks();
   25746:	f00e f8a2 	bl	3388e <z_impl_k_uptime_ticks>
   2574a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
   2574e:	fba0 300e 	umull	r3, r0, r0, lr
   25752:	fba5 250e 	umull	r2, r5, r5, lr
   25756:	fb0e 0101 	mla	r1, lr, r1, r0
   2575a:	fb0e 5707 	mla	r7, lr, r7, r5
   2575e:	0bdb      	lsrs	r3, r3, #15
   25760:	0bd2      	lsrs	r2, r2, #15
   25762:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   25766:	ea42 4247 	orr.w	r2, r2, r7, lsl #17
	delta = uptime - *reftime;
   2576a:	1a9b      	subs	r3, r3, r2
   2576c:	ea4f 31d1 	mov.w	r1, r1, lsr #15
   25770:	eb61 31d7 	sbc.w	r1, r1, r7, lsr #15
	remaining = *timeout - k_uptime_delta(&start);
   25774:	ea4f 7ce6 	mov.w	ip, r6, asr #31
   25778:	1af3      	subs	r3, r6, r3
   2577a:	eb6c 0101 	sbc.w	r1, ip, r1
	*timeout = remaining > 0 ? remaining : 0;
   2577e:	2900      	cmp	r1, #0
   25780:	bfb8      	it	lt
   25782:	2300      	movlt	r3, #0
   25784:	6023      	str	r3, [r4, #0]
	if (*timeout == 0) {
   25786:	2b00      	cmp	r3, #0
   25788:	f43f af6a 	beq.w	25660 <nrf_modem_os_timedwait+0x2c>
	return 0;
   2578c:	2000      	movs	r0, #0
   2578e:	e75b      	b.n	25648 <nrf_modem_os_timedwait+0x14>
   25790:	6016      	str	r6, [r2, #0]
	list->tail = node;
   25792:	605e      	str	r6, [r3, #4]
}
   25794:	e790      	b.n	256b8 <nrf_modem_os_timedwait+0x84>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   25796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2579a:	4613      	mov	r3, r2
   2579c:	e7a6      	b.n	256ec <nrf_modem_os_timedwait+0xb8>
Z_GENLIST_REMOVE(slist, snode)
   2579e:	429e      	cmp	r6, r3
	parent->next = child;
   257a0:	6008      	str	r0, [r1, #0]
	list->tail = node;
   257a2:	bf08      	it	eq
   257a4:	6051      	streq	r1, [r2, #4]
}
   257a6:	e7ba      	b.n	2571e <nrf_modem_os_timedwait+0xea>
	return node->next;
   257a8:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   257aa:	681b      	ldr	r3, [r3, #0]
   257ac:	e7ac      	b.n	25708 <nrf_modem_os_timedwait+0xd4>
   257ae:	bf00      	nop
   257b0:	2000d3f0 	.word	0x2000d3f0
   257b4:	2000d3ec 	.word	0x2000d3ec

000257b8 <nrf_modem_os_sem_init>:
{
   257b8:	b470      	push	{r4, r5, r6}
	if (PART_OF_ARRAY(nrf_modem_os_sems, (struct k_sem *)*sem)) {
   257ba:	6804      	ldr	r4, [r0, #0]
   257bc:	4b0a      	ldr	r3, [pc, #40]	; (257e8 <nrf_modem_os_sem_init+0x30>)
   257be:	b12c      	cbz	r4, 257cc <nrf_modem_os_sem_init+0x14>
   257c0:	429c      	cmp	r4, r3
   257c2:	d303      	bcc.n	257cc <nrf_modem_os_sem_init+0x14>
   257c4:	f103 0578 	add.w	r5, r3, #120	; 0x78
   257c8:	42ac      	cmp	r4, r5
   257ca:	d308      	bcc.n	257de <nrf_modem_os_sem_init+0x26>
	*sem = &nrf_modem_os_sems[used++];
   257cc:	4d07      	ldr	r5, [pc, #28]	; (257ec <nrf_modem_os_sem_init+0x34>)
   257ce:	782c      	ldrb	r4, [r5, #0]
   257d0:	1c66      	adds	r6, r4, #1
   257d2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   257d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   257da:	702e      	strb	r6, [r5, #0]
   257dc:	6003      	str	r3, [r0, #0]
	return k_sem_init((struct k_sem *)*sem, initial_count, limit);
   257de:	6800      	ldr	r0, [r0, #0]
}
   257e0:	bc70      	pop	{r4, r5, r6}
	return z_impl_k_sem_init(sem, initial_count, limit);
   257e2:	f00d be55 	b.w	33490 <z_impl_k_sem_init>
   257e6:	bf00      	nop
   257e8:	2000d374 	.word	0x2000d374
   257ec:	2000e650 	.word	0x2000e650

000257f0 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   257f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   257f4:	4b01      	ldr	r3, [pc, #4]	; (257fc <nrf_modem_os_application_irq_set+0xc>)
   257f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   257fa:	4770      	bx	lr
   257fc:	e000e100 	.word	0xe000e100

00025800 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   25804:	4b01      	ldr	r3, [pc, #4]	; (2580c <nrf_modem_os_application_irq_clear+0xc>)
   25806:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2580a:	4770      	bx	lr
   2580c:	e000e100 	.word	0xe000e100

00025810 <nrf_modem_os_event_notify>:
{
   25810:	b510      	push	{r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   25812:	4b08      	ldr	r3, [pc, #32]	; (25834 <nrf_modem_os_event_notify+0x24>)
   25814:	e8d3 2fef 	ldaex	r2, [r3]
   25818:	3201      	adds	r2, #1
   2581a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2581e:	2900      	cmp	r1, #0
   25820:	d1f8      	bne.n	25814 <nrf_modem_os_event_notify+0x4>
	return list->head;
   25822:	4b05      	ldr	r3, [pc, #20]	; (25838 <nrf_modem_os_event_notify+0x28>)
   25824:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   25826:	b124      	cbz	r4, 25832 <nrf_modem_os_event_notify+0x22>
	z_impl_k_sem_give(sem);
   25828:	1d20      	adds	r0, r4, #4
   2582a:	f006 fecb 	bl	2c5c4 <z_impl_k_sem_give>
	return node->next;
   2582e:	6824      	ldr	r4, [r4, #0]
   25830:	e7f9      	b.n	25826 <nrf_modem_os_event_notify+0x16>
}
   25832:	bd10      	pop	{r4, pc}
   25834:	2000d3ec 	.word	0x2000d3ec
   25838:	2000d3f0 	.word	0x2000d3f0

0002583c <nrf_modem_os_alloc>:
{
   2583c:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_heap, bytes, K_NO_WAIT);
   2583e:	2200      	movs	r2, #0
   25840:	2300      	movs	r3, #0
   25842:	4801      	ldr	r0, [pc, #4]	; (25848 <nrf_modem_os_alloc+0xc>)
   25844:	f00d bd5f 	b.w	33306 <k_heap_alloc>
   25848:	2000d34c 	.word	0x2000d34c

0002584c <nrf_modem_os_free>:
{
   2584c:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_heap, mem);
   2584e:	4801      	ldr	r0, [pc, #4]	; (25854 <nrf_modem_os_free+0x8>)
   25850:	f00d bd63 	b.w	3331a <k_heap_free>
   25854:	2000d34c 	.word	0x2000d34c

00025858 <nrf_modem_os_shm_tx_alloc>:
{
   25858:	4601      	mov	r1, r0
	void * const addr = k_heap_alloc(&nrf_modem_lib_shmem_heap, bytes, K_NO_WAIT);
   2585a:	2200      	movs	r2, #0
   2585c:	2300      	movs	r3, #0
   2585e:	4801      	ldr	r0, [pc, #4]	; (25864 <nrf_modem_os_shm_tx_alloc+0xc>)
   25860:	f00d bd51 	b.w	33306 <k_heap_alloc>
   25864:	2000d360 	.word	0x2000d360

00025868 <nrf_modem_os_shm_tx_free>:
{
   25868:	4601      	mov	r1, r0
	k_heap_free(&nrf_modem_lib_shmem_heap, mem);
   2586a:	4801      	ldr	r0, [pc, #4]	; (25870 <nrf_modem_os_shm_tx_free+0x8>)
   2586c:	f00d bd55 	b.w	3331a <k_heap_free>
   25870:	2000d360 	.word	0x2000d360

00025874 <nrf_modem_os_init>:

/* On modem initialization.
 * This function is called by nrf_modem_init()
 */
void nrf_modem_os_init(void)
{
   25874:	b508      	push	{r3, lr}
	read_task_create();
   25876:	f00b ff4c 	bl	31712 <read_task_create>

	/* Initialize heaps */
	k_heap_init(&nrf_modem_lib_heap, library_heap_buf, sizeof(library_heap_buf));
   2587a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2587e:	4906      	ldr	r1, [pc, #24]	; (25898 <nrf_modem_os_init+0x24>)
   25880:	4806      	ldr	r0, [pc, #24]	; (2589c <nrf_modem_os_init+0x28>)
   25882:	f00d fcf6 	bl	33272 <k_heap_init>
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
		    CONFIG_NRF_MODEM_LIB_SHMEM_TX_SIZE);
}
   25886:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_heap_init(&nrf_modem_lib_shmem_heap, (void *)PM_NRF_MODEM_LIB_TX_ADDRESS,
   2588a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2588e:	4904      	ldr	r1, [pc, #16]	; (258a0 <nrf_modem_os_init+0x2c>)
   25890:	4804      	ldr	r0, [pc, #16]	; (258a4 <nrf_modem_os_init+0x30>)
   25892:	f00d bcee 	b.w	33272 <k_heap_init>
   25896:	bf00      	nop
   25898:	2000e250 	.word	0x2000e250
   2589c:	2000d34c 	.word	0x2000d34c
   258a0:	200084e8 	.word	0x200084e8
   258a4:	2000d360 	.word	0x2000d360

000258a8 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   258a8:	2801      	cmp	r0, #1
   258aa:	d020      	beq.n	258ee <z_to_nrf_optname+0x46>
   258ac:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   258b0:	d125      	bne.n	258fe <z_to_nrf_optname+0x56>
	case SOL_TLS:
		switch (z_in_optname) {
   258b2:	3901      	subs	r1, #1
   258b4:	290d      	cmp	r1, #13
   258b6:	d822      	bhi.n	258fe <z_to_nrf_optname+0x56>
   258b8:	e8df f001 	tbb	[pc, r1]
   258bc:	210d0b07 	.word	0x210d0b07
   258c0:	2121110f 	.word	0x2121110f
   258c4:	13212121 	.word	0x13212121
   258c8:	1715      	.short	0x1715
		case TLS_SEC_TAG_LIST:
			*nrf_out_optname = NRF_SO_SEC_TAG_LIST;
   258ca:	2301      	movs	r3, #1
			break;
		case TLS_HOSTNAME:
			*nrf_out_optname = NRF_SO_SEC_HOSTNAME;
   258cc:	6013      	str	r3, [r2, #0]
	int retval = 0;
   258ce:	2000      	movs	r0, #0
			break;
   258d0:	4770      	bx	lr
			*nrf_out_optname = NRF_SO_SEC_HOSTNAME;
   258d2:	2302      	movs	r3, #2
   258d4:	e7fa      	b.n	258cc <z_to_nrf_optname+0x24>
		case TLS_CIPHERSUITE_LIST:
			*nrf_out_optname = NRF_SO_SEC_CIPHERSUITE_LIST;
   258d6:	2303      	movs	r3, #3
   258d8:	e7f8      	b.n	258cc <z_to_nrf_optname+0x24>
			break;
		case TLS_PEER_VERIFY:
			*nrf_out_optname = NRF_SO_SEC_PEER_VERIFY;
   258da:	2305      	movs	r3, #5
   258dc:	e7f6      	b.n	258cc <z_to_nrf_optname+0x24>
			break;
		case TLS_DTLS_ROLE:
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   258de:	2306      	movs	r3, #6
   258e0:	e7f4      	b.n	258cc <z_to_nrf_optname+0x24>
			break;
		case TLS_SESSION_CACHE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE;
   258e2:	230c      	movs	r3, #12
   258e4:	e7f2      	b.n	258cc <z_to_nrf_optname+0x24>
			break;
		case TLS_SESSION_CACHE_PURGE:
			*nrf_out_optname = NRF_SO_SEC_SESSION_CACHE_PURGE;
   258e6:	230d      	movs	r3, #13
   258e8:	e7f0      	b.n	258cc <z_to_nrf_optname+0x24>
			break;
		case TLS_DTLS_HANDSHAKE_TIMEO:
			*nrf_out_optname = NRF_SO_SEC_DTLS_HANDSHAKE_TIMEO;
   258ea:	230e      	movs	r3, #14
   258ec:	e7ee      	b.n	258cc <z_to_nrf_optname+0x24>
			break;
		}
		break;

	case SOL_SOCKET:
		switch (z_in_optname) {
   258ee:	2937      	cmp	r1, #55	; 0x37
   258f0:	dc05      	bgt.n	258fe <z_to_nrf_optname+0x56>
   258f2:	2913      	cmp	r1, #19
   258f4:	dc06      	bgt.n	25904 <z_to_nrf_optname+0x5c>
   258f6:	2902      	cmp	r1, #2
   258f8:	d058      	beq.n	259ac <z_to_nrf_optname+0x104>
   258fa:	2904      	cmp	r1, #4
   258fc:	d056      	beq.n	259ac <z_to_nrf_optname+0x104>
   258fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		retval = -1;
		break;
	}

	return retval;
}
   25902:	4770      	bx	lr
   25904:	3914      	subs	r1, #20
   25906:	2923      	cmp	r1, #35	; 0x23
   25908:	d8f9      	bhi.n	258fe <z_to_nrf_optname+0x56>
   2590a:	a301      	add	r3, pc, #4	; (adr r3, 25910 <z_to_nrf_optname+0x68>)
   2590c:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   25910:	000259a1 	.word	0x000259a1
   25914:	000259a5 	.word	0x000259a5
   25918:	000258ff 	.word	0x000258ff
   2591c:	000258ff 	.word	0x000258ff
   25920:	000258ff 	.word	0x000258ff
   25924:	000259a9 	.word	0x000259a9
   25928:	000258ff 	.word	0x000258ff
   2592c:	000258ff 	.word	0x000258ff
   25930:	000258ff 	.word	0x000258ff
   25934:	000258ff 	.word	0x000258ff
   25938:	000259b1 	.word	0x000259b1
   2593c:	000259b5 	.word	0x000259b5
   25940:	000259b9 	.word	0x000259b9
   25944:	000258ff 	.word	0x000258ff
   25948:	000258ff 	.word	0x000258ff
   2594c:	000258ff 	.word	0x000258ff
   25950:	000258ff 	.word	0x000258ff
   25954:	000258ff 	.word	0x000258ff
   25958:	000258ff 	.word	0x000258ff
   2595c:	000258ff 	.word	0x000258ff
   25960:	000258ff 	.word	0x000258ff
   25964:	000258ff 	.word	0x000258ff
   25968:	000258ff 	.word	0x000258ff
   2596c:	000258ff 	.word	0x000258ff
   25970:	000258ff 	.word	0x000258ff
   25974:	000258ff 	.word	0x000258ff
   25978:	000258ff 	.word	0x000258ff
   2597c:	000258ff 	.word	0x000258ff
   25980:	000258ff 	.word	0x000258ff
   25984:	000258ff 	.word	0x000258ff
   25988:	000259c5 	.word	0x000259c5
   2598c:	000259c1 	.word	0x000259c1
   25990:	000259c9 	.word	0x000259c9
   25994:	000259cd 	.word	0x000259cd
   25998:	000259d1 	.word	0x000259d1
   2599c:	000259bd 	.word	0x000259bd
			*nrf_out_optname = NRF_SO_RCVTIMEO;
   259a0:	2314      	movs	r3, #20
   259a2:	e793      	b.n	258cc <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   259a4:	2315      	movs	r3, #21
   259a6:	e791      	b.n	258cc <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   259a8:	2319      	movs	r3, #25
   259aa:	e78f      	b.n	258cc <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   259ac:	6011      	str	r1, [r2, #0]
			break;
   259ae:	e78e      	b.n	258ce <z_to_nrf_optname+0x26>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   259b0:	231e      	movs	r3, #30
   259b2:	e78b      	b.n	258cc <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_IP_ECHO_REPLY;
   259b4:	231f      	movs	r3, #31
   259b6:	e789      	b.n	258cc <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_IPV6_ECHO_REPLY;
   259b8:	2320      	movs	r3, #32
   259ba:	e787      	b.n	258cc <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_TCP_SRV_SESSTIMEO;
   259bc:	2337      	movs	r3, #55	; 0x37
   259be:	e785      	b.n	258cc <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_RAI_LAST;
   259c0:	2333      	movs	r3, #51	; 0x33
   259c2:	e783      	b.n	258cc <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_RAI_NO_DATA;
   259c4:	2332      	movs	r3, #50	; 0x32
   259c6:	e781      	b.n	258cc <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_RAI_ONE_RESP;
   259c8:	2334      	movs	r3, #52	; 0x34
   259ca:	e77f      	b.n	258cc <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_RAI_ONGOING;
   259cc:	2335      	movs	r3, #53	; 0x35
   259ce:	e77d      	b.n	258cc <z_to_nrf_optname+0x24>
			*nrf_out_optname = NRF_SO_RAI_WAIT_MORE;
   259d0:	2336      	movs	r3, #54	; 0x36
   259d2:	e77b      	b.n	258cc <z_to_nrf_optname+0x24>

000259d4 <nrf91_nrf_modem_lib_socket_offload_init>:
static int nrf91_nrf_modem_lib_socket_offload_init(const struct device *arg)
{
	ARG_UNUSED(arg);

	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
		offload_ctx[i].nrf_fd = -1;
   259d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   259d8:	4b05      	ldr	r3, [pc, #20]	; (259f0 <nrf91_nrf_modem_lib_socket_offload_init+0x1c>)
	}

	return 0;
}
   259da:	2000      	movs	r0, #0
		offload_ctx[i].nrf_fd = -1;
   259dc:	601a      	str	r2, [r3, #0]
   259de:	609a      	str	r2, [r3, #8]
   259e0:	611a      	str	r2, [r3, #16]
   259e2:	619a      	str	r2, [r3, #24]
   259e4:	621a      	str	r2, [r3, #32]
   259e6:	629a      	str	r2, [r3, #40]	; 0x28
   259e8:	631a      	str	r2, [r3, #48]	; 0x30
   259ea:	639a      	str	r2, [r3, #56]	; 0x38
}
   259ec:	4770      	bx	lr
   259ee:	bf00      	nop
   259f0:	2000d44c 	.word	0x2000d44c

000259f4 <nrf91_socket_offload_ioctl>:
{
   259f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   259f8:	f5a1 7381 	sub.w	r3, r1, #258	; 0x102
{
   259fc:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   259fe:	2b03      	cmp	r3, #3
   25a00:	d852      	bhi.n	25aa8 <nrf91_socket_offload_ioctl+0xb4>
   25a02:	e8df f003 	tbb	[pc, r3]
   25a06:	026e      	.short	0x026e
   25a08:	4d08      	.short	0x4d08
   25a0a:	f06f 045e 	mvn.w	r4, #94	; 0x5e
}
   25a0e:	4620      	mov	r0, r4
   25a10:	b011      	add	sp, #68	; 0x44
   25a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < nfds; i++) {
   25a16:	2700      	movs	r7, #0
		nfds = va_arg(args, int);
   25a18:	e9d2 9800 	ldrd	r9, r8, [r2]
		timeout = va_arg(args, int);
   25a1c:	466e      	mov	r6, sp
   25a1e:	464d      	mov	r5, r9
	int retval = 0;
   25a20:	463c      	mov	r4, r7
		tmp[i].events = 0;
   25a22:	46bb      	mov	fp, r7
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   25a24:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   25a26:	f8d2 a008 	ldr.w	sl, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   25a2a:	4668      	mov	r0, sp
   25a2c:	2240      	movs	r2, #64	; 0x40
   25a2e:	f00e f91e 	bl	33c6e <memset>
			obj = z_get_fd_obj(fds[i].fd,
   25a32:	492d      	ldr	r1, [pc, #180]	; (25ae8 <nrf91_socket_offload_ioctl+0xf4>)
	for (int i = 0; i < nfds; i++) {
   25a34:	45b8      	cmp	r8, r7
   25a36:	dc0c      	bgt.n	25a52 <nrf91_socket_offload_ioctl+0x5e>
	if (retval > 0) {
   25a38:	2c00      	cmp	r4, #0
   25a3a:	d1e8      	bne.n	25a0e <nrf91_socket_offload_ioctl+0x1a>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   25a3c:	4652      	mov	r2, sl
   25a3e:	4641      	mov	r1, r8
   25a40:	4668      	mov	r0, sp
   25a42:	f00d fa75 	bl	32f30 <nrf_poll>
		fds[i].revents = tmp[i].revents;
   25a46:	f109 0306 	add.w	r3, r9, #6
	for (int i = 0; i < nfds; i++) {
   25a4a:	45a0      	cmp	r8, r4
   25a4c:	dc1c      	bgt.n	25a88 <nrf91_socket_offload_ioctl+0x94>
	return retval;
   25a4e:	4604      	mov	r4, r0
		return nrf91_socket_offload_poll(fds, nfds, timeout);
   25a50:	e7dd      	b.n	25a0e <nrf91_socket_offload_ioctl+0x1a>
		if (fds[i].fd < 0) {
   25a52:	6828      	ldr	r0, [r5, #0]
		tmp[i].events = 0;
   25a54:	f8a6 b004 	strh.w	fp, [r6, #4]
		if (fds[i].fd < 0) {
   25a58:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   25a5a:	f8a5 b006 	strh.w	fp, [r5, #6]
		if (fds[i].fd < 0) {
   25a5e:	da04      	bge.n	25a6a <nrf91_socket_offload_ioctl+0x76>
			tmp[i].fd = fds[i].fd;
   25a60:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   25a62:	3701      	adds	r7, #1
   25a64:	3608      	adds	r6, #8
   25a66:	3508      	adds	r5, #8
   25a68:	e7e4      	b.n	25a34 <nrf91_socket_offload_ioctl+0x40>
			obj = z_get_fd_obj(fds[i].fd,
   25a6a:	2286      	movs	r2, #134	; 0x86
   25a6c:	f7fa fb60 	bl	20130 <z_get_fd_obj>
			if (obj != NULL) {
   25a70:	491d      	ldr	r1, [pc, #116]	; (25ae8 <nrf91_socket_offload_ioctl+0xf4>)
   25a72:	b128      	cbz	r0, 25a80 <nrf91_socket_offload_ioctl+0x8c>
				tmp[i].fd = OBJ_TO_SD(obj);
   25a74:	6803      	ldr	r3, [r0, #0]
   25a76:	6033      	str	r3, [r6, #0]
		tmp[i].events = fds[i].events;
   25a78:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   25a7c:	80b3      	strh	r3, [r6, #4]
   25a7e:	e7f0      	b.n	25a62 <nrf91_socket_offload_ioctl+0x6e>
				fds[i].revents = POLLNVAL;
   25a80:	2320      	movs	r3, #32
				retval++;
   25a82:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   25a84:	80eb      	strh	r3, [r5, #6]
				retval++;
   25a86:	e7f7      	b.n	25a78 <nrf91_socket_offload_ioctl+0x84>
		if (fds[i].fd < 0) {
   25a88:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
   25a8c:	2a00      	cmp	r2, #0
		fds[i].revents = tmp[i].revents;
   25a8e:	bfa2      	ittt	ge
   25a90:	eb0d 02c4 	addge.w	r2, sp, r4, lsl #3
   25a94:	f9b2 2006 	ldrshge.w	r2, [r2, #6]
   25a98:	f823 2034 	strhge.w	r2, [r3, r4, lsl #3]
	for (int i = 0; i < nfds; i++) {
   25a9c:	3401      	adds	r4, #1
   25a9e:	e7d4      	b.n	25a4a <nrf91_socket_offload_ioctl+0x56>
		ctx->lock = va_arg(args, struct k_mutex *);
   25aa0:	6813      	ldr	r3, [r2, #0]
		return 0;
   25aa2:	2400      	movs	r4, #0
		ctx->lock = va_arg(args, struct k_mutex *);
   25aa4:	6043      	str	r3, [r0, #4]
		return 0;
   25aa6:	e7b2      	b.n	25a0e <nrf91_socket_offload_ioctl+0x1a>
	switch (cmd) {
   25aa8:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   25aaa:	6800      	ldr	r0, [r0, #0]
	switch (cmd) {
   25aac:	d00b      	beq.n	25ac6 <nrf91_socket_offload_ioctl+0xd2>
   25aae:	2904      	cmp	r1, #4
   25ab0:	d110      	bne.n	25ad4 <nrf91_socket_offload_ioctl+0xe0>
		flags = va_arg(args, int);
   25ab2:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   25ab4:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   25ab8:	d10c      	bne.n	25ad4 <nrf91_socket_offload_ioctl+0xe0>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   25aba:	1392      	asrs	r2, r2, #14
}
   25abc:	b011      	add	sp, #68	; 0x44
   25abe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   25ac2:	f00d baca 	b.w	3305a <nrf_fcntl>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   25ac6:	2200      	movs	r2, #0
   25ac8:	f00d fac7 	bl	3305a <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   25acc:	0380      	lsls	r0, r0, #14
   25ace:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   25ad2:	e79c      	b.n	25a0e <nrf91_socket_offload_ioctl+0x1a>
	errno = EINVAL;
   25ad4:	f00b f8f1 	bl	30cba <__errno>
   25ad8:	2316      	movs	r3, #22
	return retval;
   25ada:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	errno = EINVAL;
   25ade:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   25ae0:	e795      	b.n	25a0e <nrf91_socket_offload_ioctl+0x1a>
		return -EXDEV;
   25ae2:	f06f 0411 	mvn.w	r4, #17
   25ae6:	e792      	b.n	25a0e <nrf91_socket_offload_ioctl+0x1a>
   25ae8:	00034fc0 	.word	0x00034fc0

00025aec <nrf91_socket_iface_init>:
	struct net_if *iface;
} nrf91_socket_iface_data;

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;
   25aec:	4b03      	ldr	r3, [pc, #12]	; (25afc <nrf91_socket_iface_init+0x10>)

	iface->if_dev->socket_offload = nrf91_socket_create;
   25aee:	4a04      	ldr	r2, [pc, #16]	; (25b00 <nrf91_socket_iface_init+0x14>)
	nrf91_socket_iface_data.iface = iface;
   25af0:	6018      	str	r0, [r3, #0]
	iface->if_dev->socket_offload = nrf91_socket_create;
   25af2:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   25af4:	4803      	ldr	r0, [pc, #12]	; (25b04 <nrf91_socket_iface_init+0x18>)
	iface->if_dev->socket_offload = nrf91_socket_create;
   25af6:	61da      	str	r2, [r3, #28]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   25af8:	f7fb b932 	b.w	20d60 <socket_offload_dns_register>
   25afc:	2000d448 	.word	0x2000d448
   25b00:	00025e91 	.word	0x00025e91
   25b04:	00034fb8 	.word	0x00034fb8

00025b08 <nrf91_socket_is_supported>:
	if (offload_disabled) {
   25b08:	4b0c      	ldr	r3, [pc, #48]	; (25b3c <nrf91_socket_is_supported+0x34>)
   25b0a:	781b      	ldrb	r3, [r3, #0]
   25b0c:	b98b      	cbnz	r3, 25b32 <nrf91_socket_is_supported+0x2a>
	if (tls_offload_disabled && proto_is_secure(proto)) {
   25b0e:	4b0c      	ldr	r3, [pc, #48]	; (25b40 <nrf91_socket_is_supported+0x38>)
   25b10:	781b      	ldrb	r3, [r3, #0]
   25b12:	b183      	cbz	r3, 25b36 <nrf91_socket_is_supported+0x2e>
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25b14:	f5a2 7380 	sub.w	r3, r2, #256	; 0x100
   25b18:	2b02      	cmp	r3, #2
   25b1a:	d908      	bls.n	25b2e <nrf91_socket_is_supported+0x26>
	       (proto >= IPPROTO_DTLS_1_0 && proto <= IPPROTO_DTLS_1_2);
   25b1c:	f5a2 7088 	sub.w	r0, r2, #272	; 0x110
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25b20:	2801      	cmp	r0, #1
   25b22:	bf8c      	ite	hi
   25b24:	2000      	movhi	r0, #0
   25b26:	2001      	movls	r0, #1
	if (tls_offload_disabled && proto_is_secure(proto)) {
   25b28:	f080 0001 	eor.w	r0, r0, #1
   25b2c:	4770      	bx	lr
	return (proto >= IPPROTO_TLS_1_0 && proto <= IPPROTO_TLS_1_2) ||
   25b2e:	2001      	movs	r0, #1
   25b30:	e7fa      	b.n	25b28 <nrf91_socket_is_supported+0x20>
		return false;
   25b32:	2000      	movs	r0, #0
   25b34:	4770      	bx	lr
	return true;
   25b36:	2001      	movs	r0, #1
}
   25b38:	4770      	bx	lr
   25b3a:	bf00      	nop
   25b3c:	2000e6d1 	.word	0x2000e6d1
   25b40:	2000e6d2 	.word	0x2000e6d2

00025b44 <nrf91_socket_offload_getaddrinfo>:
{
   25b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b48:	4614      	mov	r4, r2
   25b4a:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   25b4c:	2100      	movs	r1, #0
{
   25b4e:	b08b      	sub	sp, #44	; 0x2c
   25b50:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   25b52:	2220      	movs	r2, #32
   25b54:	a802      	add	r0, sp, #8
{
   25b56:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   25b58:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   25b5a:	f00e f888 	bl	33c6e <memset>
	if (hints != NULL) {
   25b5e:	b15c      	cbz	r4, 25b78 <nrf91_socket_offload_getaddrinfo+0x34>
	nrf_out->ai_flags = z_in->ai_flags;
   25b60:	6863      	ldr	r3, [r4, #4]
   25b62:	9302      	str	r3, [sp, #8]
	nrf_out->ai_socktype = z_in->ai_socktype;
   25b64:	68e3      	ldr	r3, [r4, #12]
   25b66:	9304      	str	r3, [sp, #16]
	nrf_out->ai_family = z_in->ai_family;
   25b68:	68a3      	ldr	r3, [r4, #8]
   25b6a:	9303      	str	r3, [sp, #12]
	nrf_out->ai_protocol = z_in->ai_protocol;
   25b6c:	6923      	ldr	r3, [r4, #16]
   25b6e:	9305      	str	r3, [sp, #20]
	if (z_in->ai_canonname != NULL) {
   25b70:	69e3      	ldr	r3, [r4, #28]
   25b72:	b103      	cbz	r3, 25b76 <nrf91_socket_offload_getaddrinfo+0x32>
		nrf_out->ai_canonname = z_in->ai_canonname;
   25b74:	9308      	str	r3, [sp, #32]
		nrf_hints_ptr = &nrf_hints;
   25b76:	ac02      	add	r4, sp, #8
	k_mutex_lock(&getaddrinfo_lock, K_FOREVER);
   25b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25b7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25b80:	4834      	ldr	r0, [pc, #208]	; (25c54 <nrf91_socket_offload_getaddrinfo+0x110>)
   25b82:	f00b ff28 	bl	319d6 <k_mutex_lock.constprop.0.isra.0>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   25b86:	4628      	mov	r0, r5
   25b88:	4622      	mov	r2, r4
   25b8a:	4631      	mov	r1, r6
   25b8c:	ab01      	add	r3, sp, #4
   25b8e:	f004 fc75 	bl	2a47c <nrf_getaddrinfo>
	if (retval != 0) {
   25b92:	4605      	mov	r5, r0
   25b94:	b948      	cbnz	r0, 25baa <nrf91_socket_offload_getaddrinfo+0x66>
	struct zsock_addrinfo *latest_z_res = NULL;
   25b96:	4681      	mov	r9, r0
	z_out->ai_next = NULL;
   25b98:	4680      	mov	r8, r0
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   25b9a:	f04f 0a18 	mov.w	sl, #24
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   25b9e:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   25ba0:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   25ba2:	b94e      	cbnz	r6, 25bb8 <nrf91_socket_offload_getaddrinfo+0x74>
	nrf_freeaddrinfo(nrf_res);
   25ba4:	9801      	ldr	r0, [sp, #4]
   25ba6:	f00c fd46 	bl	32636 <nrf_freeaddrinfo>
	k_mutex_unlock(&getaddrinfo_lock);
   25baa:	482a      	ldr	r0, [pc, #168]	; (25c54 <nrf91_socket_offload_getaddrinfo+0x110>)
   25bac:	f00b ff15 	bl	319da <k_mutex_unlock.isra.0>
}
   25bb0:	4628      	mov	r0, r5
   25bb2:	b00b      	add	sp, #44	; 0x2c
   25bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					k_malloc(sizeof(struct zsock_addrinfo));
   25bb8:	2050      	movs	r0, #80	; 0x50
   25bba:	f00d fff5 	bl	33ba8 <k_malloc>
		if (next_z_res == NULL) {
   25bbe:	4604      	mov	r4, r0
   25bc0:	2800      	cmp	r0, #0
   25bc2:	d040      	beq.n	25c46 <nrf91_socket_offload_getaddrinfo+0x102>
	z_out->ai_socktype = nrf_in->ai_socktype;
   25bc4:	68b3      	ldr	r3, [r6, #8]
	z_out->ai_family = nrf_in->ai_family;
   25bc6:	f8d6 b004 	ldr.w	fp, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   25bca:	60c3      	str	r3, [r0, #12]
	z_out->ai_protocol = nrf_in->ai_protocol;
   25bcc:	68f3      	ldr	r3, [r6, #12]
	if (nrf_in->ai_family == NRF_AF_INET) {
   25bce:	f1bb 0f01 	cmp.w	fp, #1
	z_out->ai_next = NULL;
   25bd2:	f8c0 8000 	str.w	r8, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   25bd6:	f8c0 801c 	str.w	r8, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   25bda:	f8c0 8004 	str.w	r8, [r0, #4]
	z_out->ai_family = nrf_in->ai_family;
   25bde:	f8c0 b008 	str.w	fp, [r0, #8]
	z_out->ai_protocol = nrf_in->ai_protocol;
   25be2:	6103      	str	r3, [r0, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   25be4:	d114      	bne.n	25c10 <nrf91_socket_offload_getaddrinfo+0xcc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   25be6:	2008      	movs	r0, #8
   25be8:	f00d ffde 	bl	33ba8 <k_malloc>
   25bec:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   25bee:	b338      	cbz	r0, 25c40 <nrf91_socket_offload_getaddrinfo+0xfc>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   25bf0:	2308      	movs	r3, #8
   25bf2:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   25bf4:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   25bf6:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25bf8:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   25bfa:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   25bfc:	f8a0 b000 	strh.w	fp, [r0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25c00:	6043      	str	r3, [r0, #4]
		if (latest_z_res == NULL) {
   25c02:	f1b9 0f00 	cmp.w	r9, #0
   25c06:	d121      	bne.n	25c4c <nrf91_socket_offload_getaddrinfo+0x108>
			*res = next_z_res;
   25c08:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   25c0a:	46a1      	mov	r9, r4
   25c0c:	69f6      	ldr	r6, [r6, #28]
   25c0e:	e7c8      	b.n	25ba2 <nrf91_socket_offload_getaddrinfo+0x5e>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   25c10:	f1bb 0f02 	cmp.w	fp, #2
   25c14:	d10a      	bne.n	25c2c <nrf91_socket_offload_getaddrinfo+0xe8>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   25c16:	2018      	movs	r0, #24
   25c18:	f00d ffc6 	bl	33ba8 <k_malloc>
   25c1c:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   25c1e:	b178      	cbz	r0, 25c40 <nrf91_socket_offload_getaddrinfo+0xfc>
		nrf_to_z_ipv6(z_out->ai_addr,
   25c20:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   25c22:	f8c4 a014 	str.w	sl, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   25c26:	f00b fe16 	bl	31856 <nrf_to_z_ipv6>
		if (err == -ENOMEM) {
   25c2a:	e7ea      	b.n	25c02 <nrf91_socket_offload_getaddrinfo+0xbe>
			k_free(next_z_res);
   25c2c:	f00d ffb5 	bl	33b9a <k_free>
			retval = DNS_EAI_SOCKTYPE;
   25c30:	f06f 0506 	mvn.w	r5, #6
		nrf91_socket_offload_freeaddrinfo(*res);
   25c34:	6838      	ldr	r0, [r7, #0]
   25c36:	f00b fe01 	bl	3183c <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   25c3a:	2300      	movs	r3, #0
   25c3c:	603b      	str	r3, [r7, #0]
   25c3e:	e7b1      	b.n	25ba4 <nrf91_socket_offload_getaddrinfo+0x60>
			k_free(next_z_res);
   25c40:	4620      	mov	r0, r4
   25c42:	f00d ffaa 	bl	33b9a <k_free>
			retval = DNS_EAI_MEMORY;
   25c46:	f06f 0509 	mvn.w	r5, #9
   25c4a:	e7f3      	b.n	25c34 <nrf91_socket_offload_getaddrinfo+0xf0>
			latest_z_res->ai_next = next_z_res;
   25c4c:	f8c9 4000 	str.w	r4, [r9]
   25c50:	e7db      	b.n	25c0a <nrf91_socket_offload_getaddrinfo+0xc6>
   25c52:	bf00      	nop
   25c54:	2000c978 	.word	0x2000c978

00025c58 <nrf91_socket_offload_sendmsg>:
{
   25c58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25c5c:	4680      	mov	r8, r0
   25c5e:	4691      	mov	r9, r2
	if (msg == NULL) {
   25c60:	460c      	mov	r4, r1
   25c62:	b1f9      	cbz	r1, 25ca4 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   25c64:	2300      	movs	r3, #0
	ssize_t len = 0;
   25c66:	461a      	mov	r2, r3
   25c68:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   25c6a:	4298      	cmp	r0, r3
   25c6c:	d124      	bne.n	25cb8 <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   25c6e:	2a80      	cmp	r2, #128	; 0x80
   25c70:	d86d      	bhi.n	25d4e <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   25c72:	2500      	movs	r5, #0
		k_mutex_lock(&sendmsg_lock, K_FOREVER);
   25c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25c78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25c7c:	4836      	ldr	r0, [pc, #216]	; (25d58 <nrf91_socket_offload_sendmsg+0x100>)
   25c7e:	f00b feaa 	bl	319d6 <k_mutex_lock.constprop.0.isra.0>
		len = 0;
   25c82:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   25c84:	4e35      	ldr	r6, [pc, #212]	; (25d5c <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   25c86:	68e3      	ldr	r3, [r4, #12]
   25c88:	429d      	cmp	r5, r3
   25c8a:	d31c      	bcc.n	25cc6 <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   25c8c:	2600      	movs	r6, #0
		ret = 0;
   25c8e:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   25c90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 25d5c <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   25c94:	42b7      	cmp	r7, r6
   25c96:	dd01      	ble.n	25c9c <nrf91_socket_offload_sendmsg+0x44>
   25c98:	2d00      	cmp	r5, #0
   25c9a:	da25      	bge.n	25ce8 <nrf91_socket_offload_sendmsg+0x90>
		k_mutex_unlock(&sendmsg_lock);
   25c9c:	482e      	ldr	r0, [pc, #184]	; (25d58 <nrf91_socket_offload_sendmsg+0x100>)
   25c9e:	f00b fe9c 	bl	319da <k_mutex_unlock.isra.0>
		return ret;
   25ca2:	e005      	b.n	25cb0 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   25ca4:	f00b f809 	bl	30cba <__errno>
   25ca8:	2316      	movs	r3, #22
		return -1;
   25caa:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		errno = EINVAL;
   25cae:	6003      	str	r3, [r0, #0]
}
   25cb0:	4628      	mov	r0, r5
   25cb2:	b002      	add	sp, #8
   25cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   25cb8:	68a1      	ldr	r1, [r4, #8]
   25cba:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   25cbe:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   25cc0:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   25cc2:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   25cc4:	e7d1      	b.n	25c6a <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   25cc6:	68a1      	ldr	r1, [r4, #8]
   25cc8:	19f0      	adds	r0, r6, r7
   25cca:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   25cce:	685a      	ldr	r2, [r3, #4]
   25cd0:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   25cd4:	f00d ffab 	bl	33c2e <memcpy>
			len += msg->msg_iov[i].iov_len;
   25cd8:	68a3      	ldr	r3, [r4, #8]
   25cda:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   25cde:	4453      	add	r3, sl
   25ce0:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   25ce2:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   25ce4:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   25ce6:	e7ce      	b.n	25c86 <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   25ce8:	6863      	ldr	r3, [r4, #4]
   25cea:	1bba      	subs	r2, r7, r6
   25cec:	9301      	str	r3, [sp, #4]
   25cee:	6823      	ldr	r3, [r4, #0]
   25cf0:	eb0a 0106 	add.w	r1, sl, r6
   25cf4:	9300      	str	r3, [sp, #0]
   25cf6:	4640      	mov	r0, r8
   25cf8:	464b      	mov	r3, r9
   25cfa:	f00b fdd9 	bl	318b0 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   25cfe:	1e05      	subs	r5, r0, #0
				offset += ret;
   25d00:	bfc8      	it	gt
   25d02:	1976      	addgt	r6, r6, r5
   25d04:	e7c6      	b.n	25c94 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   25d06:	68a3      	ldr	r3, [r4, #8]
   25d08:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   25d0c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   25d10:	685b      	ldr	r3, [r3, #4]
   25d12:	b133      	cbz	r3, 25d22 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   25d14:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   25d16:	68a3      	ldr	r3, [r4, #8]
   25d18:	eb03 020a 	add.w	r2, r3, sl
   25d1c:	6852      	ldr	r2, [r2, #4]
   25d1e:	4297      	cmp	r7, r2
   25d20:	d304      	bcc.n	25d2c <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   25d22:	3601      	adds	r6, #1
   25d24:	68e3      	ldr	r3, [r4, #12]
   25d26:	42b3      	cmp	r3, r6
   25d28:	d8ed      	bhi.n	25d06 <nrf91_socket_offload_sendmsg+0xae>
   25d2a:	e7c1      	b.n	25cb0 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   25d2c:	f853 100a 	ldr.w	r1, [r3, sl]
   25d30:	6863      	ldr	r3, [r4, #4]
   25d32:	4439      	add	r1, r7
   25d34:	9301      	str	r3, [sp, #4]
   25d36:	6823      	ldr	r3, [r4, #0]
   25d38:	4640      	mov	r0, r8
   25d3a:	9300      	str	r3, [sp, #0]
   25d3c:	1bd2      	subs	r2, r2, r7
   25d3e:	464b      	mov	r3, r9
   25d40:	f00b fdb6 	bl	318b0 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   25d44:	1e01      	subs	r1, r0, #0
   25d46:	db05      	blt.n	25d54 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   25d48:	440f      	add	r7, r1
			len += ret;
   25d4a:	440d      	add	r5, r1
   25d4c:	e7e3      	b.n	25d16 <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   25d4e:	2600      	movs	r6, #0
	len = 0;
   25d50:	4635      	mov	r5, r6
   25d52:	e7e7      	b.n	25d24 <nrf91_socket_offload_sendmsg+0xcc>
   25d54:	460d      	mov	r5, r1
   25d56:	e7ab      	b.n	25cb0 <nrf91_socket_offload_sendmsg+0x58>
   25d58:	2000c9b4 	.word	0x2000c9b4
   25d5c:	2000e651 	.word	0x2000e651

00025d60 <allocate_ctx>:
{
   25d60:	b538      	push	{r3, r4, r5, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   25d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
   25d6a:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   25d6c:	480b      	ldr	r0, [pc, #44]	; (25d9c <allocate_ctx+0x3c>)
   25d6e:	f00b fe32 	bl	319d6 <k_mutex_lock.constprop.0.isra.0>
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   25d72:	2300      	movs	r3, #0
		if (offload_ctx[i].nrf_fd == -1) {
   25d74:	4a0a      	ldr	r2, [pc, #40]	; (25da0 <allocate_ctx+0x40>)
   25d76:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   25d7a:	3101      	adds	r1, #1
   25d7c:	d108      	bne.n	25d90 <allocate_ctx+0x30>
			ctx = &offload_ctx[i];
   25d7e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
			ctx->nrf_fd = nrf_fd;
   25d82:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	k_mutex_unlock(&ctx_lock);
   25d86:	4805      	ldr	r0, [pc, #20]	; (25d9c <allocate_ctx+0x3c>)
   25d88:	f00b fe27 	bl	319da <k_mutex_unlock.isra.0>
}
   25d8c:	4628      	mov	r0, r5
   25d8e:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(offload_ctx); i++) {
   25d90:	3301      	adds	r3, #1
   25d92:	2b08      	cmp	r3, #8
   25d94:	d1ef      	bne.n	25d76 <allocate_ctx+0x16>
	struct nrf_sock_ctx *ctx = NULL;
   25d96:	2500      	movs	r5, #0
   25d98:	e7f5      	b.n	25d86 <allocate_ctx+0x26>
   25d9a:	bf00      	nop
   25d9c:	2000c950 	.word	0x2000c950
   25da0:	2000d44c 	.word	0x2000d44c

00025da4 <release_ctx>:
{
   25da4:	b510      	push	{r4, lr}
	k_mutex_lock(&ctx_lock, K_FOREVER);
   25da6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   25daa:	4604      	mov	r4, r0
	k_mutex_lock(&ctx_lock, K_FOREVER);
   25dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25db0:	4806      	ldr	r0, [pc, #24]	; (25dcc <release_ctx+0x28>)
   25db2:	f00b fe10 	bl	319d6 <k_mutex_lock.constprop.0.isra.0>
	ctx->lock = NULL;
   25db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25dba:	2300      	movs	r3, #0
	k_mutex_unlock(&ctx_lock);
   25dbc:	4803      	ldr	r0, [pc, #12]	; (25dcc <release_ctx+0x28>)
	ctx->lock = NULL;
   25dbe:	e9c4 2300 	strd	r2, r3, [r4]
}
   25dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&ctx_lock);
   25dc6:	f00b be08 	b.w	319da <k_mutex_unlock.isra.0>
   25dca:	bf00      	nop
   25dcc:	2000c950 	.word	0x2000c950

00025dd0 <nrf91_socket_offload_accept>:
{
   25dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25dd4:	b08b      	sub	sp, #44	; 0x2c
   25dd6:	4607      	mov	r7, r0
   25dd8:	460c      	mov	r4, r1
   25dda:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   25ddc:	f7fa f9da 	bl	20194 <z_reserve_fd>
   25de0:	4606      	mov	r6, r0
	if (fd < 0) {
   25de2:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   25de4:	6838      	ldr	r0, [r7, #0]
	if (fd < 0) {
   25de6:	db23      	blt.n	25e30 <nrf91_socket_offload_accept+0x60>
	if ((addr != NULL) && (addrlen != NULL)) {
   25de8:	b32c      	cbz	r4, 25e36 <nrf91_socket_offload_accept+0x66>
   25dea:	b33d      	cbz	r5, 25e3c <nrf91_socket_offload_accept+0x6c>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   25dec:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   25dee:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   25df0:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   25df2:	bf0c      	ite	eq
   25df4:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   25df6:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   25df8:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   25dfa:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   25dfc:	4639      	mov	r1, r7
   25dfe:	f00c fde2 	bl	329c6 <nrf_accept>
	if (new_sd < 0) {
   25e02:	f1b0 0900 	subs.w	r9, r0, #0
   25e06:	db3b      	blt.n	25e80 <nrf91_socket_offload_accept+0xb0>
	ctx = allocate_ctx(new_sd);
   25e08:	f7ff ffaa 	bl	25d60 <allocate_ctx>
	if (ctx == NULL) {
   25e0c:	4680      	mov	r8, r0
   25e0e:	b9c0      	cbnz	r0, 25e42 <nrf91_socket_offload_accept+0x72>
		errno = ENOMEM;
   25e10:	f00a ff53 	bl	30cba <__errno>
   25e14:	230c      	movs	r3, #12
   25e16:	6003      	str	r3, [r0, #0]
		nrf_close(new_sd);
   25e18:	4648      	mov	r0, r9
   25e1a:	f004 fdf7 	bl	2aa0c <nrf_close>
	if (ctx != NULL) {
   25e1e:	f1b8 0f00 	cmp.w	r8, #0
   25e22:	d002      	beq.n	25e2a <nrf91_socket_offload_accept+0x5a>
		release_ctx(ctx);
   25e24:	4640      	mov	r0, r8
   25e26:	f7ff ffbd 	bl	25da4 <release_ctx>
	z_free_fd(fd);
   25e2a:	4630      	mov	r0, r6
   25e2c:	f7fa fa02 	bl	20234 <z_free_fd>
		return -1;
   25e30:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   25e34:	e017      	b.n	25e66 <nrf91_socket_offload_accept+0x96>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   25e36:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   25e38:	4627      	mov	r7, r4
   25e3a:	e7df      	b.n	25dfc <nrf91_socket_offload_accept+0x2c>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   25e3c:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   25e3e:	462f      	mov	r7, r5
   25e40:	e7dc      	b.n	25dfc <nrf91_socket_offload_accept+0x2c>
	if ((addr != NULL) && (addrlen != NULL)) {
   25e42:	b15c      	cbz	r4, 25e5c <nrf91_socket_offload_accept+0x8c>
   25e44:	b155      	cbz	r5, 25e5c <nrf91_socket_offload_accept+0x8c>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   25e46:	687b      	ldr	r3, [r7, #4]
   25e48:	2b01      	cmp	r3, #1
   25e4a:	d110      	bne.n	25e6e <nrf91_socket_offload_accept+0x9e>
			*addrlen = sizeof(struct sockaddr_in);
   25e4c:	2208      	movs	r2, #8
   25e4e:	602a      	str	r2, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   25e50:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	ptr->sin_family = AF_INET;
   25e54:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25e56:	9b04      	ldr	r3, [sp, #16]
	ptr->sin_port = nrf_in->sin_port;
   25e58:	8062      	strh	r2, [r4, #2]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   25e5a:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, ctx,
   25e5c:	4641      	mov	r1, r8
   25e5e:	4630      	mov	r0, r6
   25e60:	4a0a      	ldr	r2, [pc, #40]	; (25e8c <nrf91_socket_offload_accept+0xbc>)
   25e62:	f7fa f9cd 	bl	20200 <z_finalize_fd>
}
   25e66:	4630      	mov	r0, r6
   25e68:	b00b      	add	sp, #44	; 0x2c
   25e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   25e6e:	2b02      	cmp	r3, #2
   25e70:	d1d2      	bne.n	25e18 <nrf91_socket_offload_accept+0x48>
			*addrlen = sizeof(struct sockaddr_in6);
   25e72:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   25e74:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   25e76:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   25e78:	a901      	add	r1, sp, #4
   25e7a:	f00b fcec 	bl	31856 <nrf_to_z_ipv6>
   25e7e:	e7ed      	b.n	25e5c <nrf91_socket_offload_accept+0x8c>
	if (new_sd != -1) {
   25e80:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   25e84:	d0d1      	beq.n	25e2a <nrf91_socket_offload_accept+0x5a>
	struct nrf_sock_ctx *ctx = NULL;
   25e86:	f04f 0800 	mov.w	r8, #0
   25e8a:	e7c5      	b.n	25e18 <nrf91_socket_offload_accept+0x48>
   25e8c:	00034fc0 	.word	0x00034fc0

00025e90 <nrf91_socket_create>:
{
   25e90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (type & SOCK_NATIVE) {
   25e92:	1e0d      	subs	r5, r1, #0
{
   25e94:	4606      	mov	r6, r0
   25e96:	9201      	str	r2, [sp, #4]
	if (type & SOCK_NATIVE) {
   25e98:	da12      	bge.n	25ec0 <nrf91_socket_create+0x30>
	k_sched_lock();
   25e9a:	f006 fcfb 	bl	2c894 <k_sched_lock>
	*offload_lock = true;
   25e9e:	4f1c      	ldr	r7, [pc, #112]	; (25f10 <nrf91_socket_create+0x80>)
   25ea0:	2301      	movs	r3, #1
   25ea2:	703b      	strb	r3, [r7, #0]
	return z_impl_zsock_socket(family, type, proto);
   25ea4:	4630      	mov	r0, r6
   25ea6:	9a01      	ldr	r2, [sp, #4]
   25ea8:	f025 4140 	bic.w	r1, r5, #3221225472	; 0xc0000000
   25eac:	f7fa ff32 	bl	20d14 <z_impl_zsock_socket>
	*offload_lock = false;
   25eb0:	2300      	movs	r3, #0
   25eb2:	703b      	strb	r3, [r7, #0]
   25eb4:	4604      	mov	r4, r0
	k_sched_unlock();
   25eb6:	f006 febd 	bl	2cc34 <k_sched_unlock>
}
   25eba:	4620      	mov	r0, r4
   25ebc:	b003      	add	sp, #12
   25ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (type & SOCK_NATIVE_TLS) {
   25ec0:	006b      	lsls	r3, r5, #1
   25ec2:	d503      	bpl.n	25ecc <nrf91_socket_create+0x3c>
	k_sched_lock();
   25ec4:	f006 fce6 	bl	2c894 <k_sched_lock>
	*offload_lock = true;
   25ec8:	4f12      	ldr	r7, [pc, #72]	; (25f14 <nrf91_socket_create+0x84>)
   25eca:	e7e9      	b.n	25ea0 <nrf91_socket_create+0x10>
	fd = z_reserve_fd();
   25ecc:	f7fa f962 	bl	20194 <z_reserve_fd>
	if (fd < 0) {
   25ed0:	1e04      	subs	r4, r0, #0
   25ed2:	db09      	blt.n	25ee8 <nrf91_socket_create+0x58>
	retval = nrf_socket(family, type, proto);
   25ed4:	4629      	mov	r1, r5
   25ed6:	4630      	mov	r0, r6
   25ed8:	9a01      	ldr	r2, [sp, #4]
   25eda:	f00c fc03 	bl	326e4 <nrf_socket>
	if (sd < 0) {
   25ede:	1e05      	subs	r5, r0, #0
   25ee0:	da05      	bge.n	25eee <nrf91_socket_create+0x5e>
		z_free_fd(fd);
   25ee2:	4620      	mov	r0, r4
   25ee4:	f7fa f9a6 	bl	20234 <z_free_fd>
		return -1;
   25ee8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   25eec:	e7e5      	b.n	25eba <nrf91_socket_create+0x2a>
	ctx = allocate_ctx(sd);
   25eee:	f7ff ff37 	bl	25d60 <allocate_ctx>
	if (ctx == NULL) {
   25ef2:	4601      	mov	r1, r0
   25ef4:	b938      	cbnz	r0, 25f06 <nrf91_socket_create+0x76>
		errno = ENOMEM;
   25ef6:	f00a fee0 	bl	30cba <__errno>
   25efa:	230c      	movs	r3, #12
   25efc:	6003      	str	r3, [r0, #0]
		nrf_close(sd);
   25efe:	4628      	mov	r0, r5
   25f00:	f004 fd84 	bl	2aa0c <nrf_close>
   25f04:	e7ed      	b.n	25ee2 <nrf91_socket_create+0x52>
	z_finalize_fd(fd, ctx,
   25f06:	4620      	mov	r0, r4
   25f08:	4a03      	ldr	r2, [pc, #12]	; (25f18 <nrf91_socket_create+0x88>)
   25f0a:	f7fa f979 	bl	20200 <z_finalize_fd>
	return fd;
   25f0e:	e7d4      	b.n	25eba <nrf91_socket_create+0x2a>
   25f10:	2000e6d1 	.word	0x2000e6d1
   25f14:	2000e6d2 	.word	0x2000e6d2
   25f18:	00034fc0 	.word	0x00034fc0

00025f1c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   25f1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   25f1e:	ab0b      	add	r3, sp, #44	; 0x2c
   25f20:	9305      	str	r3, [sp, #20]
   25f22:	9303      	str	r3, [sp, #12]
   25f24:	4b05      	ldr	r3, [pc, #20]	; (25f3c <z_log_msg_runtime_create.constprop.0+0x20>)
   25f26:	2201      	movs	r2, #1
   25f28:	9302      	str	r3, [sp, #8]
   25f2a:	2300      	movs	r3, #0
   25f2c:	4618      	mov	r0, r3
   25f2e:	e9cd 3300 	strd	r3, r3, [sp]
   25f32:	f7fa fcab 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   25f36:	b007      	add	sp, #28
   25f38:	f85d fb04 	ldr.w	pc, [sp], #4
   25f3c:	00038a3b 	.word	0x00038a3b

00025f40 <nrf_modem_fault_handler>:

LOG_MODULE_DECLARE(nrf_modem, CONFIG_NRF_MODEM_LIB_LOG_LEVEL);

#if CONFIG_NRF_MODEM_LIB_ON_FAULT_DO_NOTHING
void nrf_modem_fault_handler(struct nrf_modem_fault_info *fault_info)
{
   25f40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("Modem error: 0x%x, PC: 0x%x", fault_info->reason, fault_info->program_counter);
   25f42:	6843      	ldr	r3, [r0, #4]
   25f44:	2201      	movs	r2, #1
   25f46:	9304      	str	r3, [sp, #16]
   25f48:	6803      	ldr	r3, [r0, #0]
   25f4a:	4906      	ldr	r1, [pc, #24]	; (25f64 <nrf_modem_fault_handler+0x24>)
   25f4c:	9303      	str	r3, [sp, #12]
   25f4e:	4b06      	ldr	r3, [pc, #24]	; (25f68 <nrf_modem_fault_handler+0x28>)
   25f50:	9302      	str	r3, [sp, #8]
   25f52:	2300      	movs	r3, #0
   25f54:	4618      	mov	r0, r3
   25f56:	e9cd 3300 	strd	r3, r3, [sp]
   25f5a:	f7ff ffdf 	bl	25f1c <z_log_msg_runtime_create.constprop.0>
}
   25f5e:	b007      	add	sp, #28
   25f60:	f85d fb04 	ldr.w	pc, [sp], #4
   25f64:	00034ac0 	.word	0x00034ac0
   25f68:	00038a3b 	.word	0x00038a3b

00025f6c <at_monitor_sys_init>:
		k_heap_free(&at_monitor_heap, at_notif);
	}
}

static int at_monitor_sys_init(const struct device *unused)
{
   25f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	err = nrf_modem_at_notif_handler_set(at_monitor_dispatch);
   25f6e:	4809      	ldr	r0, [pc, #36]	; (25f94 <at_monitor_sys_init+0x28>)
   25f70:	f005 f8ec 	bl	2b14c <nrf_modem_at_notif_handler_set>
	if (err) {
   25f74:	b150      	cbz	r0, 25f8c <at_monitor_sys_init+0x20>
		LOG_ERR("Failed to hook the dispatch function, err %d", err);
   25f76:	4b08      	ldr	r3, [pc, #32]	; (25f98 <at_monitor_sys_init+0x2c>)
   25f78:	9003      	str	r0, [sp, #12]
   25f7a:	9302      	str	r3, [sp, #8]
   25f7c:	2300      	movs	r3, #0
   25f7e:	2201      	movs	r2, #1
   25f80:	4618      	mov	r0, r3
   25f82:	e9cd 3300 	strd	r3, r3, [sp]
   25f86:	4905      	ldr	r1, [pc, #20]	; (25f9c <at_monitor_sys_init+0x30>)
   25f88:	f00b fd8e 	bl	31aa8 <z_log_msg_runtime_create.constprop.0>
	}

	return 0;
}
   25f8c:	2000      	movs	r0, #0
   25f8e:	b005      	add	sp, #20
   25f90:	f85d fb04 	ldr.w	pc, [sp], #4
   25f94:	00025fa1 	.word	0x00025fa1
   25f98:	00038a57 	.word	0x00038a57
   25f9c:	00034a58 	.word	0x00034a58

00025fa0 <at_monitor_dispatch>:
{
   25fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25fa2:	4605      	mov	r5, r0
	monitored = false;
   25fa4:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   25fa6:	4c20      	ldr	r4, [pc, #128]	; (26028 <at_monitor_dispatch+0x88>)
   25fa8:	4f20      	ldr	r7, [pc, #128]	; (2602c <at_monitor_dispatch+0x8c>)
{
   25faa:	b085      	sub	sp, #20
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   25fac:	42bc      	cmp	r4, r7
   25fae:	d317      	bcc.n	25fe0 <at_monitor_dispatch+0x40>
	if (!monitored) {
   25fb0:	b1a6      	cbz	r6, 25fdc <at_monitor_dispatch+0x3c>
	sz_needed = sizeof(struct at_notif_fifo) + strlen(notif) + sizeof(char);
   25fb2:	4628      	mov	r0, r5
   25fb4:	f7f7 f874 	bl	1d0a0 <strlen>
	at_notif = k_heap_alloc(&at_monitor_heap, sz_needed, K_NO_WAIT);
   25fb8:	2200      	movs	r2, #0
   25fba:	1d41      	adds	r1, r0, #5
   25fbc:	2300      	movs	r3, #0
   25fbe:	481c      	ldr	r0, [pc, #112]	; (26030 <at_monitor_dispatch+0x90>)
   25fc0:	f00d f9a1 	bl	33306 <k_heap_alloc>
	if (!at_notif) {
   25fc4:	4604      	mov	r4, r0
   25fc6:	bb00      	cbnz	r0, 2600a <at_monitor_dispatch+0x6a>
		LOG_WRN("No heap space for incoming notification: %s",
   25fc8:	4b1a      	ldr	r3, [pc, #104]	; (26034 <at_monitor_dispatch+0x94>)
   25fca:	2202      	movs	r2, #2
   25fcc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   25fd0:	4919      	ldr	r1, [pc, #100]	; (26038 <at_monitor_dispatch+0x98>)
   25fd2:	4603      	mov	r3, r0
   25fd4:	9503      	str	r5, [sp, #12]
   25fd6:	9000      	str	r0, [sp, #0]
   25fd8:	f00b fd66 	bl	31aa8 <z_log_msg_runtime_create.constprop.0>
}
   25fdc:	b005      	add	sp, #20
   25fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return mon->flags.paused;
   25fe0:	7a23      	ldrb	r3, [r4, #8]
		if (!is_paused(e) && has_match(e, notif)) {
   25fe2:	07da      	lsls	r2, r3, #31
   25fe4:	d405      	bmi.n	25ff2 <at_monitor_dispatch+0x52>
   25fe6:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   25fe8:	b929      	cbnz	r1, 25ff6 <at_monitor_dispatch+0x56>
	return mon->flags.direct;
   25fea:	7a23      	ldrb	r3, [r4, #8]
			if (is_direct(e)) {
   25fec:	079b      	lsls	r3, r3, #30
   25fee:	d408      	bmi.n	26002 <at_monitor_dispatch+0x62>
				monitored = true;
   25ff0:	2601      	movs	r6, #1
	STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   25ff2:	340c      	adds	r4, #12
   25ff4:	e7da      	b.n	25fac <at_monitor_dispatch+0xc>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   25ff6:	4628      	mov	r0, r5
   25ff8:	f00e f816 	bl	34028 <strstr>
		if (!is_paused(e) && has_match(e, notif)) {
   25ffc:	2800      	cmp	r0, #0
   25ffe:	d0f8      	beq.n	25ff2 <at_monitor_dispatch+0x52>
   26000:	e7f3      	b.n	25fea <at_monitor_dispatch+0x4a>
				e->handler(notif);
   26002:	4628      	mov	r0, r5
   26004:	6863      	ldr	r3, [r4, #4]
   26006:	4798      	blx	r3
   26008:	e7f3      	b.n	25ff2 <at_monitor_dispatch+0x52>
__ssp_bos_icheck2_restrict(stpcpy, char *, const char *)
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2600a:	4629      	mov	r1, r5
   2600c:	3004      	adds	r0, #4
   2600e:	f00d ffd0 	bl	33fb2 <strcpy>
	k_fifo_put(&at_monitor_fifo, at_notif);
   26012:	4621      	mov	r1, r4
   26014:	4809      	ldr	r0, [pc, #36]	; (2603c <at_monitor_dispatch+0x9c>)
   26016:	f00d fa30 	bl	3347a <k_queue_append>
	k_work_submit(&at_monitor_work);
   2601a:	4809      	ldr	r0, [pc, #36]	; (26040 <at_monitor_dispatch+0xa0>)
}
   2601c:	b005      	add	sp, #20
   2601e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_work_submit(&at_monitor_work);
   26022:	f006 bb6d 	b.w	2c700 <k_work_submit>
   26026:	bf00      	nop
   26028:	2000c85c 	.word	0x2000c85c
   2602c:	2000c8d4 	.word	0x2000c8d4
   26030:	2000c900 	.word	0x2000c900
   26034:	00038a84 	.word	0x00038a84
   26038:	00034a58 	.word	0x00034a58
   2603c:	2000ca50 	.word	0x2000ca50
   26040:	2000c5d8 	.word	0x2000c5d8

00026044 <at_monitor_task>:
{
   26044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_queue_get(queue, timeout);
   26048:	4f14      	ldr	r7, [pc, #80]	; (2609c <at_monitor_task+0x58>)
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   2604a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 260a4 <at_monitor_task+0x60>
		k_heap_free(&at_monitor_heap, at_notif);
   2604e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 260a8 <at_monitor_task+0x64>
   26052:	2200      	movs	r2, #0
   26054:	2300      	movs	r3, #0
   26056:	4638      	mov	r0, r7
   26058:	f006 fa80 	bl	2c55c <z_impl_k_queue_get>
	while ((at_notif = k_fifo_get(&at_monitor_fifo, K_NO_WAIT))) {
   2605c:	4605      	mov	r5, r0
   2605e:	b9c8      	cbnz	r0, 26094 <at_monitor_task+0x50>
}
   26060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return mon->flags.paused;
   26064:	7a23      	ldrb	r3, [r4, #8]
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   26066:	07da      	lsls	r2, r3, #31
   26068:	d406      	bmi.n	26078 <at_monitor_task+0x34>
   2606a:	079b      	lsls	r3, r3, #30
   2606c:	d404      	bmi.n	26078 <at_monitor_task+0x34>
   2606e:	6821      	ldr	r1, [r4, #0]
	return (mon->filter == ANY || strstr(notif, mon->filter));
   26070:	b951      	cbnz	r1, 26088 <at_monitor_task+0x44>
				e->handler(at_notif->data);
   26072:	4630      	mov	r0, r6
   26074:	6863      	ldr	r3, [r4, #4]
   26076:	4798      	blx	r3
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26078:	340c      	adds	r4, #12
   2607a:	4544      	cmp	r4, r8
   2607c:	d3f2      	bcc.n	26064 <at_monitor_task+0x20>
		k_heap_free(&at_monitor_heap, at_notif);
   2607e:	4629      	mov	r1, r5
   26080:	4648      	mov	r0, r9
   26082:	f00d f94a 	bl	3331a <k_heap_free>
   26086:	e7e4      	b.n	26052 <at_monitor_task+0xe>
	return (mon->filter == ANY || strstr(notif, mon->filter));
   26088:	4630      	mov	r0, r6
   2608a:	f00d ffcd 	bl	34028 <strstr>
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   2608e:	2800      	cmp	r0, #0
   26090:	d0f2      	beq.n	26078 <at_monitor_task+0x34>
   26092:	e7ee      	b.n	26072 <at_monitor_task+0x2e>
		STRUCT_SECTION_FOREACH(at_monitor_entry, e) {
   26094:	4c02      	ldr	r4, [pc, #8]	; (260a0 <at_monitor_task+0x5c>)
			if (!is_paused(e) && !is_direct(e) && has_match(e, at_notif->data)) {
   26096:	1d2e      	adds	r6, r5, #4
   26098:	e7ef      	b.n	2607a <at_monitor_task+0x36>
   2609a:	bf00      	nop
   2609c:	2000ca50 	.word	0x2000ca50
   260a0:	2000c85c 	.word	0x2000c85c
   260a4:	2000c8d4 	.word	0x2000c8d4
   260a8:	2000c900 	.word	0x2000c900

000260ac <z_impl_uart_irq_rx_enable.constprop.0>:
__syscall void uart_irq_rx_enable(const struct device *dev);

static inline void z_impl_uart_irq_rx_enable(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   260ac:	4802      	ldr	r0, [pc, #8]	; (260b8 <z_impl_uart_irq_rx_enable.constprop.0+0xc>)
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_enable != NULL) {
   260ae:	6883      	ldr	r3, [r0, #8]
   260b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   260b2:	b103      	cbz	r3, 260b6 <z_impl_uart_irq_rx_enable.constprop.0+0xa>
		api->irq_rx_enable(dev);
   260b4:	4718      	bx	r3
	}
#else
	ARG_UNUSED(dev);
#endif
}
   260b6:	4770      	bx	lr
   260b8:	000347c4 	.word	0x000347c4

000260bc <write_uart_string>:
static char at_buf[AT_BUF_SIZE]; /* AT command and modem response buffer */
static struct k_work_q at_host_work_q;
static struct k_work cmd_send_work;

static inline void write_uart_string(const char *str)
{
   260bc:	b538      	push	{r3, r4, r5, lr}
	api->poll_out(dev, out_char);
   260be:	4d05      	ldr	r5, [pc, #20]	; (260d4 <write_uart_string+0x18>)
   260c0:	1e44      	subs	r4, r0, #1
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
   260c2:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   260c6:	b901      	cbnz	r1, 260ca <write_uart_string+0xe>
		uart_poll_out(uart_dev, str[i]);
	}
}
   260c8:	bd38      	pop	{r3, r4, r5, pc}
   260ca:	68ab      	ldr	r3, [r5, #8]
   260cc:	4801      	ldr	r0, [pc, #4]	; (260d4 <write_uart_string+0x18>)
   260ce:	685b      	ldr	r3, [r3, #4]
   260d0:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   260d2:	e7f6      	b.n	260c2 <write_uart_string+0x6>
   260d4:	000347c4 	.word	0x000347c4

000260d8 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   260d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(work);

    /* Sending through string format rather than raw buffer in case
     * the buffer contains characters that need to be escaped
     */
	err = nrf_modem_at_cmd(at_buf, sizeof(at_buf), "%s", at_buf);
   260da:	4b0f      	ldr	r3, [pc, #60]	; (26118 <cmd_send+0x40>)
   260dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   260e0:	4618      	mov	r0, r3
   260e2:	4a0e      	ldr	r2, [pc, #56]	; (2611c <cmd_send+0x44>)
   260e4:	f005 f880 	bl	2b1e8 <nrf_modem_at_cmd>
	if (err < 0) {
   260e8:	2800      	cmp	r0, #0
   260ea:	da0a      	bge.n	26102 <cmd_send+0x2a>
		LOG_ERR("Error while processing AT command: %d", err);
   260ec:	4b0c      	ldr	r3, [pc, #48]	; (26120 <cmd_send+0x48>)
   260ee:	9003      	str	r0, [sp, #12]
   260f0:	9302      	str	r3, [sp, #8]
   260f2:	2300      	movs	r3, #0
   260f4:	2201      	movs	r2, #1
   260f6:	4618      	mov	r0, r3
   260f8:	e9cd 3300 	strd	r3, r3, [sp]
   260fc:	4909      	ldr	r1, [pc, #36]	; (26124 <cmd_send+0x4c>)
   260fe:	f00b fce4 	bl	31aca <z_log_msg_runtime_create.constprop.0>
	}

	write_uart_string(at_buf);
   26102:	4805      	ldr	r0, [pc, #20]	; (26118 <cmd_send+0x40>)
   26104:	f7ff ffda 	bl	260bc <write_uart_string>

	at_buf_busy = false;
   26108:	2200      	movs	r2, #0
   2610a:	4b07      	ldr	r3, [pc, #28]	; (26128 <cmd_send+0x50>)
   2610c:	701a      	strb	r2, [r3, #0]
	uart_irq_rx_enable(uart_dev);
}
   2610e:	b005      	add	sp, #20
   26110:	f85d eb04 	ldr.w	lr, [sp], #4
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   26114:	f7ff bfca 	b.w	260ac <z_impl_uart_irq_rx_enable.constprop.0>
   26118:	2000e6d3 	.word	0x2000e6d3
   2611c:	00039015 	.word	0x00039015
   26120:	00038abb 	.word	0x00038abb
   26124:	00034a50 	.word	0x00034a50
   26128:	2000f6d3 	.word	0x2000f6d3

0002612c <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   2612c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2612e:	4604      	mov	r4, r0
   26130:	b087      	sub	sp, #28
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
   26132:	6883      	ldr	r3, [r0, #8]
   26134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   26136:	b103      	cbz	r3, 2613a <isr+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
   26138:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   2613a:	68a3      	ldr	r3, [r4, #8]
   2613c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2613e:	b9c3      	cbnz	r3, 26172 <isr+0x46>

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!at_buf_busy) &&
   26140:	4e40      	ldr	r6, [pc, #256]	; (26244 <isr+0x118>)
		if (at_cmd_len > 0) {
   26142:	4d41      	ldr	r5, [pc, #260]	; (26248 <isr+0x11c>)
	while ((!at_buf_busy) &&
   26144:	7833      	ldrb	r3, [r6, #0]
   26146:	b9c3      	cbnz	r3, 2617a <isr+0x4e>
	if (api->fifo_read == NULL) {
   26148:	68a3      	ldr	r3, [r4, #8]
   2614a:	699b      	ldr	r3, [r3, #24]
   2614c:	b12b      	cbz	r3, 2615a <isr+0x2e>
	return api->fifo_read(dev, rx_data, size);
   2614e:	2201      	movs	r2, #1
   26150:	4620      	mov	r0, r4
   26152:	f10d 0117 	add.w	r1, sp, #23
   26156:	4798      	blx	r3
   26158:	b178      	cbz	r0, 2617a <isr+0x4e>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
   2615a:	f89d 3017 	ldrb.w	r3, [sp, #23]
	switch (character) {
   2615e:	2b08      	cmp	r3, #8
   26160:	d001      	beq.n	26166 <isr+0x3a>
   26162:	2b7f      	cmp	r3, #127	; 0x7f
   26164:	d10b      	bne.n	2617e <isr+0x52>
		if (at_cmd_len > 0) {
   26166:	682b      	ldr	r3, [r5, #0]
   26168:	2b00      	cmp	r3, #0
   2616a:	d0eb      	beq.n	26144 <isr+0x18>
			at_cmd_len--;
   2616c:	3b01      	subs	r3, #1
   2616e:	602b      	str	r3, [r5, #0]
   26170:	e7e8      	b.n	26144 <isr+0x18>
	return api->irq_rx_ready(dev);
   26172:	4620      	mov	r0, r4
   26174:	4798      	blx	r3
	if (!uart_irq_rx_ready(dev)) {
   26176:	2800      	cmp	r0, #0
   26178:	d1e2      	bne.n	26140 <isr+0x14>
	}
}
   2617a:	b007      	add	sp, #28
   2617c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!inside_quotes) {
   2617e:	4933      	ldr	r1, [pc, #204]	; (2624c <isr+0x120>)
   26180:	780a      	ldrb	r2, [r1, #0]
   26182:	b9b2      	cbnz	r2, 261b2 <isr+0x86>
		switch (character) {
   26184:	2b0a      	cmp	r3, #10
   26186:	d025      	beq.n	261d4 <isr+0xa8>
   26188:	2b0d      	cmp	r3, #13
   2618a:	d00e      	beq.n	261aa <isr+0x7e>
   2618c:	b98b      	cbnz	r3, 261b2 <isr+0x86>
			if (term_mode == MODE_NULL_TERM) {
   2618e:	4a30      	ldr	r2, [pc, #192]	; (26250 <isr+0x124>)
   26190:	7812      	ldrb	r2, [r2, #0]
   26192:	2a00      	cmp	r2, #0
   26194:	d038      	beq.n	26208 <isr+0xdc>
			LOG_WRN("Ignored null; would terminate string early.");
   26196:	4a2f      	ldr	r2, [pc, #188]	; (26254 <isr+0x128>)
   26198:	4618      	mov	r0, r3
   2619a:	e9cd 3201 	strd	r3, r2, [sp, #4]
   2619e:	492e      	ldr	r1, [pc, #184]	; (26258 <isr+0x12c>)
   261a0:	2202      	movs	r2, #2
   261a2:	9300      	str	r3, [sp, #0]
   261a4:	f00b fc91 	bl	31aca <z_log_msg_runtime_create.constprop.0>
			return;
   261a8:	e7cc      	b.n	26144 <isr+0x18>
			if (term_mode == MODE_CR) {
   261aa:	4829      	ldr	r0, [pc, #164]	; (26250 <isr+0x124>)
   261ac:	7800      	ldrb	r0, [r0, #0]
   261ae:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   261b0:	d02a      	beq.n	26208 <isr+0xdc>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   261b2:	682f      	ldr	r7, [r5, #0]
   261b4:	1c78      	adds	r0, r7, #1
   261b6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   261ba:	d31a      	bcc.n	261f2 <isr+0xc6>
	switch (character) {
   261bc:	9303      	str	r3, [sp, #12]
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   261be:	4b27      	ldr	r3, [pc, #156]	; (2625c <isr+0x130>)
   261c0:	2201      	movs	r2, #1
   261c2:	9302      	str	r3, [sp, #8]
   261c4:	2300      	movs	r3, #0
   261c6:	4924      	ldr	r1, [pc, #144]	; (26258 <isr+0x12c>)
   261c8:	4618      	mov	r0, r3
   261ca:	e9cd 3300 	strd	r3, r3, [sp]
   261ce:	f00b fc7c 	bl	31aca <z_log_msg_runtime_create.constprop.0>
		return;
   261d2:	e7b7      	b.n	26144 <isr+0x18>
			if (term_mode == MODE_LF) {
   261d4:	481e      	ldr	r0, [pc, #120]	; (26250 <isr+0x124>)
   261d6:	7800      	ldrb	r0, [r0, #0]
   261d8:	2802      	cmp	r0, #2
   261da:	d015      	beq.n	26208 <isr+0xdc>
			if (term_mode == MODE_CR_LF &&
   261dc:	2803      	cmp	r0, #3
   261de:	d1e8      	bne.n	261b2 <isr+0x86>
		if (at_cmd_len > 0) {
   261e0:	682f      	ldr	r7, [r5, #0]
			if (term_mode == MODE_CR_LF &&
   261e2:	2f00      	cmp	r7, #0
   261e4:	d0e5      	beq.n	261b2 <isr+0x86>
			    at_buf[at_cmd_len - 1] == '\r') {
   261e6:	481e      	ldr	r0, [pc, #120]	; (26260 <isr+0x134>)
   261e8:	4438      	add	r0, r7
			    at_cmd_len > 0 &&
   261ea:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   261ee:	280d      	cmp	r0, #13
   261f0:	e7de      	b.n	261b0 <isr+0x84>
	at_buf[at_cmd_len] = character;
   261f2:	f8df c06c 	ldr.w	ip, [pc, #108]	; 26260 <isr+0x134>
	if (character == '"') {
   261f6:	2b22      	cmp	r3, #34	; 0x22
	at_buf[at_cmd_len] = character;
   261f8:	f80c 3007 	strb.w	r3, [ip, r7]
	at_cmd_len++;
   261fc:	6028      	str	r0, [r5, #0]
	if (character == '"') {
   261fe:	d1a1      	bne.n	26144 <isr+0x18>
	if (!inside_quotes) {
   26200:	f082 0201 	eor.w	r2, r2, #1
		inside_quotes = !inside_quotes;
   26204:	700a      	strb	r2, [r1, #0]
   26206:	e79d      	b.n	26144 <isr+0x18>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   26208:	2200      	movs	r2, #0
   2620a:	4b15      	ldr	r3, [pc, #84]	; (26260 <isr+0x134>)
	inside_quotes = false;
   2620c:	700a      	strb	r2, [r1, #0]
   2620e:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   26210:	6828      	ldr	r0, [r5, #0]
	at_cmd_len = 0;
   26212:	602a      	str	r2, [r5, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   26214:	541a      	strb	r2, [r3, r0]
		if (*c > ' ') {
   26216:	f813 2b01 	ldrb.w	r2, [r3], #1
   2621a:	2a20      	cmp	r2, #32
   2621c:	d802      	bhi.n	26224 <isr+0xf8>
		} else if (*c == '\0') {
   2621e:	2a00      	cmp	r2, #0
   26220:	d1f9      	bne.n	26216 <isr+0xea>
   26222:	e78f      	b.n	26144 <isr+0x18>
	if (at_buf[0]) {
   26224:	780b      	ldrb	r3, [r1, #0]
   26226:	2b00      	cmp	r3, #0
   26228:	d08c      	beq.n	26144 <isr+0x18>
	const struct uart_driver_api *api =
   2622a:	480e      	ldr	r0, [pc, #56]	; (26264 <isr+0x138>)
	if (api->irq_rx_disable != NULL) {
   2622c:	6883      	ldr	r3, [r0, #8]
   2622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26230:	b103      	cbz	r3, 26234 <isr+0x108>
		api->irq_rx_disable(dev);
   26232:	4798      	blx	r3
		at_buf_busy = true;
   26234:	2301      	movs	r3, #1
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   26236:	490c      	ldr	r1, [pc, #48]	; (26268 <isr+0x13c>)
   26238:	480c      	ldr	r0, [pc, #48]	; (2626c <isr+0x140>)
		at_buf_busy = true;
   2623a:	7033      	strb	r3, [r6, #0]
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
   2623c:	f00d f9c5 	bl	335ca <k_work_submit_to_queue>
   26240:	e780      	b.n	26144 <isr+0x18>
   26242:	bf00      	nop
   26244:	2000f6d3 	.word	0x2000f6d3
   26248:	2000d48c 	.word	0x2000d48c
   2624c:	2000f6d4 	.word	0x2000f6d4
   26250:	2000f6d5 	.word	0x2000f6d5
   26254:	00038ae1 	.word	0x00038ae1
   26258:	00034a50 	.word	0x00034a50
   2625c:	00038b0d 	.word	0x00038b0d
   26260:	2000e6d3 	.word	0x2000e6d3
   26264:	000347c4 	.word	0x000347c4
   26268:	2000d490 	.word	0x2000d490
   2626c:	2000cd60 	.word	0x2000cd60

00026270 <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   26270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   26274:	2401      	movs	r4, #1
   26276:	4b45      	ldr	r3, [pc, #276]	; (2638c <at_host_init+0x11c>)
{
   26278:	b087      	sub	sp, #28
		term_mode = mode;
   2627a:	701c      	strb	r4, [r3, #0]
   2627c:	4844      	ldr	r0, [pc, #272]	; (26390 <at_host_init+0x120>)
   2627e:	f00c ffda 	bl	33236 <z_device_is_ready>
	if (!device_is_ready(uart_dev)) {
   26282:	4603      	mov	r3, r0
   26284:	b9d0      	cbnz	r0, 262bc <at_host_init+0x4c>
		LOG_ERR("UART device not ready");
   26286:	4a43      	ldr	r2, [pc, #268]	; (26394 <at_host_init+0x124>)
   26288:	4943      	ldr	r1, [pc, #268]	; (26398 <at_host_init+0x128>)
   2628a:	e9cd 0201 	strd	r0, r2, [sp, #4]
   2628e:	9000      	str	r0, [sp, #0]
   26290:	4622      	mov	r2, r4
   26292:	f00b fc1a 	bl	31aca <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   26296:	f06f 0312 	mvn.w	r3, #18
	}

	/* Initialize the UART module */
	err = at_uart_init(uart_dev);
	if (err) {
		LOG_ERR("UART could not be initialized: %d", err);
   2629a:	9303      	str	r3, [sp, #12]
   2629c:	4b3f      	ldr	r3, [pc, #252]	; (2639c <at_host_init+0x12c>)
   2629e:	2201      	movs	r2, #1
   262a0:	9302      	str	r3, [sp, #8]
   262a2:	2300      	movs	r3, #0
   262a4:	493c      	ldr	r1, [pc, #240]	; (26398 <at_host_init+0x128>)
   262a6:	4618      	mov	r0, r3
   262a8:	e9cd 3300 	strd	r3, r3, [sp]
   262ac:	f00b fc0d 	bl	31aca <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   262b0:	f06f 090d 	mvn.w	r9, #13
			   K_THREAD_STACK_SIZEOF(at_host_stack_area),
			   CONFIG_AT_HOST_THREAD_PRIO, NULL);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   262b4:	4648      	mov	r0, r9
   262b6:	b007      	add	sp, #28
   262b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_uptime_ticks();
   262bc:	f00d fae7 	bl	3388e <z_impl_k_uptime_ticks>
   262c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   262c4:	fba0 0302 	umull	r0, r3, r0, r2
   262c8:	fb02 3101 	mla	r1, r2, r1, r3
	const struct uart_driver_api *api =
   262cc:	4e30      	ldr	r6, [pc, #192]	; (26390 <at_host_init+0x120>)
   262ce:	0bc0      	lsrs	r0, r0, #15
   262d0:	68b7      	ldr	r7, [r6, #8]
			LOG_INF("UART check failed: %d. "
   262d2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 263b8 <at_host_init+0x148>
   262d6:	ea40 4541 	orr.w	r5, r0, r1, lsl #17
	if (api->err_check == NULL) {
   262da:	68bb      	ldr	r3, [r7, #8]
   262dc:	b31b      	cbz	r3, 26326 <at_host_init+0xb6>
	return api->err_check(dev);
   262de:	4630      	mov	r0, r6
   262e0:	4798      	blx	r3
		if (err) {
   262e2:	4681      	mov	r9, r0
   262e4:	2800      	cmp	r0, #0
   262e6:	d03a      	beq.n	2635e <at_host_init+0xee>
   262e8:	f00d fad1 	bl	3388e <z_impl_k_uptime_ticks>
   262ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   262f0:	fba0 4002 	umull	r4, r0, r0, r2
   262f4:	fb02 0001 	mla	r0, r2, r1, r0
   262f8:	0be4      	lsrs	r4, r4, #15
   262fa:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
			if (k_uptime_get_32() - start_time >
   262fe:	1b64      	subs	r4, r4, r5
   26300:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   26304:	f04f 0300 	mov.w	r3, #0
				LOG_ERR("UART check failed: %d. "
   26308:	f8cd 900c 	str.w	r9, [sp, #12]
			if (k_uptime_get_32() - start_time >
   2630c:	d90e      	bls.n	2632c <at_host_init+0xbc>
				LOG_ERR("UART check failed: %d. "
   2630e:	4a24      	ldr	r2, [pc, #144]	; (263a0 <at_host_init+0x130>)
   26310:	4618      	mov	r0, r3
   26312:	e9cd 3201 	strd	r3, r2, [sp, #4]
   26316:	9300      	str	r3, [sp, #0]
   26318:	2201      	movs	r2, #1
   2631a:	491f      	ldr	r1, [pc, #124]	; (26398 <at_host_init+0x128>)
   2631c:	f00b fbd5 	bl	31aca <z_log_msg_runtime_create.constprop.0>
				return -EIO;
   26320:	f06f 0304 	mvn.w	r3, #4
   26324:	e7b9      	b.n	2629a <at_host_init+0x2a>
		return -ENOSYS;
   26326:	f06f 0957 	mvn.w	r9, #87	; 0x57
   2632a:	e7dd      	b.n	262e8 <at_host_init+0x78>
			LOG_INF("UART check failed: %d. "
   2632c:	2203      	movs	r2, #3
   2632e:	4618      	mov	r0, r3
   26330:	e9cd 3801 	strd	r3, r8, [sp, #4]
   26334:	4918      	ldr	r1, [pc, #96]	; (26398 <at_host_init+0x128>)
   26336:	9300      	str	r3, [sp, #0]
   26338:	f00b fbc7 	bl	31aca <z_log_msg_runtime_create.constprop.0>
	if (api->fifo_read == NULL) {
   2633c:	68b4      	ldr	r4, [r6, #8]
   2633e:	69a3      	ldr	r3, [r4, #24]
   26340:	b903      	cbnz	r3, 26344 <at_host_init+0xd4>
   26342:	e7fe      	b.n	26342 <at_host_init+0xd2>
	return api->fifo_read(dev, rx_data, size);
   26344:	2201      	movs	r2, #1
   26346:	4630      	mov	r0, r6
   26348:	f10d 0117 	add.w	r1, sp, #23
   2634c:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   2634e:	2800      	cmp	r0, #0
   26350:	d1f5      	bne.n	2633e <at_host_init+0xce>
	return z_impl_k_sleep(timeout);
   26352:	2100      	movs	r1, #0
   26354:	f44f 70a4 	mov.w	r0, #328	; 0x148
   26358:	f006 fd1c 	bl	2cd94 <z_impl_k_sleep>
	} while (err);
   2635c:	e7bd      	b.n	262da <at_host_init+0x6a>
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   2635e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   26360:	b11b      	cbz	r3, 2636a <at_host_init+0xfa>
		api->irq_callback_set(dev, cb, user_data);
   26362:	464a      	mov	r2, r9
   26364:	490f      	ldr	r1, [pc, #60]	; (263a4 <at_host_init+0x134>)
   26366:	480a      	ldr	r0, [pc, #40]	; (26390 <at_host_init+0x120>)
   26368:	4798      	blx	r3
	k_work_init(&cmd_send_work, cmd_send);
   2636a:	490f      	ldr	r1, [pc, #60]	; (263a8 <at_host_init+0x138>)
   2636c:	480f      	ldr	r0, [pc, #60]	; (263ac <at_host_init+0x13c>)
   2636e:	f00d f90f 	bl	33590 <k_work_init>
	k_work_queue_start(&at_host_work_q, at_host_stack_area,
   26372:	2300      	movs	r3, #0
   26374:	f44f 6280 	mov.w	r2, #1024	; 0x400
   26378:	9300      	str	r3, [sp, #0]
   2637a:	490d      	ldr	r1, [pc, #52]	; (263b0 <at_host_init+0x140>)
   2637c:	230a      	movs	r3, #10
   2637e:	480d      	ldr	r0, [pc, #52]	; (263b4 <at_host_init+0x144>)
   26380:	f006 f9c4 	bl	2c70c <k_work_queue_start>
   26384:	f7ff fe92 	bl	260ac <z_impl_uart_irq_rx_enable.constprop.0>
}
   26388:	e794      	b.n	262b4 <at_host_init+0x44>
   2638a:	bf00      	nop
   2638c:	2000f6d5 	.word	0x2000f6d5
   26390:	000347c4 	.word	0x000347c4
   26394:	00038b2d 	.word	0x00038b2d
   26398:	00034a50 	.word	0x00034a50
   2639c:	00038bae 	.word	0x00038bae
   263a0:	00038b43 	.word	0x00038b43
   263a4:	0002612d 	.word	0x0002612d
   263a8:	000260d9 	.word	0x000260d9
   263ac:	2000d490 	.word	0x2000d490
   263b0:	200121a0 	.word	0x200121a0
   263b4:	2000cd60 	.word	0x2000cd60
   263b8:	00038b79 	.word	0x00038b79

000263bc <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   263bc:	4b09      	ldr	r3, [pc, #36]	; (263e4 <is_valid_notification_char+0x28>)
   263be:	5cc3      	ldrb	r3, [r0, r3]
   263c0:	f003 0303 	and.w	r3, r3, #3
   263c4:	2b02      	cmp	r3, #2
   263c6:	bf08      	it	eq
   263c8:	3820      	subeq	r0, #32
   263ca:	b2c0      	uxtb	r0, r0

	if (((chr >= 'A') && (chr <= 'Z')) || (chr == '_')) {
   263cc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   263d0:	2b19      	cmp	r3, #25
   263d2:	d904      	bls.n	263de <is_valid_notification_char+0x22>
   263d4:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   263d8:	4258      	negs	r0, r3
   263da:	4158      	adcs	r0, r3
   263dc:	4770      	bx	lr
		return true;
   263de:	2001      	movs	r0, #1
	}

	return false;
}
   263e0:	4770      	bx	lr
   263e2:	bf00      	nop
   263e4:	00039f71 	.word	0x00039f71

000263e8 <is_result>:

	return retval;
}

static bool is_result(const char *str)
{
   263e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   263ea:	4605      	mov	r5, r0
		"ERROR\r\n",
		"+CME ERROR",
		"+CMS ERROR"
	};

	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   263ec:	2400      	movs	r4, #0
   263ee:	4e0a      	ldr	r6, [pc, #40]	; (26418 <is_result+0x30>)
		diff = strncmp(str, toclip[i], strlen(toclip[i]));
   263f0:	f856 1b04 	ldr.w	r1, [r6], #4
   263f4:	4608      	mov	r0, r1
   263f6:	9101      	str	r1, [sp, #4]
   263f8:	f7f6 fe52 	bl	1d0a0 <strlen>
   263fc:	9901      	ldr	r1, [sp, #4]
   263fe:	4602      	mov	r2, r0
   26400:	4628      	mov	r0, r5
   26402:	f00d fdde 	bl	33fc2 <strncmp>
		if (!diff) {
   26406:	b128      	cbz	r0, 26414 <is_result+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(toclip); i++) {
   26408:	3401      	adds	r4, #1
   2640a:	2c04      	cmp	r4, #4
   2640c:	d1f0      	bne.n	263f0 <is_result+0x8>
			return true;
		}
	}

	return false;
   2640e:	2000      	movs	r0, #0
}
   26410:	b002      	add	sp, #8
   26412:	bd70      	pop	{r4, r5, r6, pc}
			return true;
   26414:	2001      	movs	r0, #1
   26416:	e7fb      	b.n	26410 <is_result+0x28>
   26418:	00035000 	.word	0x00035000

0002641c <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   2641c:	b510      	push	{r4, lr}
   2641e:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   26420:	f7f6 fe3e 	bl	1d0a0 <strlen>
   26424:	2801      	cmp	r0, #1
   26426:	d921      	bls.n	2646c <is_command+0x50>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   26428:	7823      	ldrb	r3, [r4, #0]
   2642a:	4912      	ldr	r1, [pc, #72]	; (26474 <is_command+0x58>)
   2642c:	5c5a      	ldrb	r2, [r3, r1]
   2642e:	f002 0203 	and.w	r2, r2, #3
   26432:	2a02      	cmp	r2, #2
   26434:	bf08      	it	eq
   26436:	3b20      	subeq	r3, #32
   26438:	2b41      	cmp	r3, #65	; 0x41
   2643a:	d117      	bne.n	2646c <is_command+0x50>
   2643c:	7863      	ldrb	r3, [r4, #1]
   2643e:	5cca      	ldrb	r2, [r1, r3]
   26440:	f002 0203 	and.w	r2, r2, #3
   26444:	2a02      	cmp	r2, #2
   26446:	bf08      	it	eq
   26448:	3b20      	subeq	r3, #32
   2644a:	2b54      	cmp	r3, #84	; 0x54
   2644c:	d10e      	bne.n	2646c <is_command+0x50>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2644e:	78a2      	ldrb	r2, [r4, #2]
   26450:	2a25      	cmp	r2, #37	; 0x25
   26452:	d00d      	beq.n	26470 <is_command+0x54>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   26454:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   26458:	2b23      	cmp	r3, #35	; 0x23
   2645a:	d009      	beq.n	26470 <is_command+0x54>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   2645c:	4610      	mov	r0, r2
   2645e:	f00b fb43 	bl	31ae8 <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   26462:	b910      	cbnz	r0, 2646a <is_command+0x4e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26464:	fab2 f082 	clz	r0, r2
   26468:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2646a:	bd10      	pop	{r4, pc}
		return false;
   2646c:	2000      	movs	r0, #0
   2646e:	e7fc      	b.n	2646a <is_command+0x4e>
		return true;
   26470:	2001      	movs	r0, #1
   26472:	e7fa      	b.n	2646a <is_command+0x4e>
   26474:	00039f71 	.word	0x00039f71

00026478 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   26478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   2647c:	6805      	ldr	r5, [r0, #0]
{
   2647e:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   26480:	9500      	str	r5, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26482:	782b      	ldrb	r3, [r5, #0]
{
   26484:	4680      	mov	r8, r0
   26486:	460f      	mov	r7, r1
   26488:	4616      	mov	r6, r2
   2648a:	2b00      	cmp	r3, #0
   2648c:	f000 80ca 	beq.w	26624 <at_parse_process_element+0x1ac>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   26490:	4b66      	ldr	r3, [pc, #408]	; (2662c <at_parse_process_element+0x1b4>)
   26492:	781c      	ldrb	r4, [r3, #0]
   26494:	2c06      	cmp	r4, #6
   26496:	d110      	bne.n	264ba <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   26498:	1c6b      	adds	r3, r5, #1
   2649a:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   2649c:	9a00      	ldr	r2, [sp, #0]
   2649e:	7810      	ldrb	r0, [r2, #0]
   264a0:	f7ff ff8c 	bl	263bc <is_valid_notification_char>
   264a4:	b930      	cbnz	r0, 264b4 <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   264a6:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   264a8:	462a      	mov	r2, r5
   264aa:	4639      	mov	r1, r7
   264ac:	4630      	mov	r0, r6
   264ae:	f00b fbae 	bl	31c0e <at_params_string_put>
   264b2:	e01c      	b.n	264ee <at_parse_process_element+0x76>
			tmpstr++;
   264b4:	3201      	adds	r2, #1
   264b6:	9200      	str	r2, [sp, #0]
   264b8:	e7f0      	b.n	2649c <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   264ba:	2c07      	cmp	r4, #7
   264bc:	d125      	bne.n	2650a <at_parse_process_element+0x92>
		skip_command_prefix(&tmpstr);
   264be:	4668      	mov	r0, sp
   264c0:	f00b fb1b 	bl	31afa <skip_command_prefix>
	if (isalpha((int)chr) || isdigit((int)chr)) {
   264c4:	4a5a      	ldr	r2, [pc, #360]	; (26630 <at_parse_process_element+0x1b8>)
		while (is_valid_command_char(*tmpstr)) {
   264c6:	9b00      	ldr	r3, [sp, #0]
   264c8:	7819      	ldrb	r1, [r3, #0]
   264ca:	5c89      	ldrb	r1, [r1, r2]
   264cc:	0749      	lsls	r1, r1, #29
   264ce:	d115      	bne.n	264fc <at_parse_process_element+0x84>
		at_params_string_put(list, index, start_ptr,
   264d0:	462a      	mov	r2, r5
   264d2:	1b5b      	subs	r3, r3, r5
   264d4:	4639      	mov	r1, r7
   264d6:	4630      	mov	r0, r6
   264d8:	f00b fb99 	bl	31c0e <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   264dc:	9b00      	ldr	r3, [sp, #0]
   264de:	781a      	ldrb	r2, [r3, #0]
   264e0:	2a3d      	cmp	r2, #61	; 0x3d
   264e2:	d10e      	bne.n	26502 <at_parse_process_element+0x8a>
   264e4:	785a      	ldrb	r2, [r3, #1]
   264e6:	2a3f      	cmp	r2, #63	; 0x3f
   264e8:	d101      	bne.n	264ee <at_parse_process_element+0x76>
			tmpstr += 2;
   264ea:	3302      	adds	r3, #2
			tmpstr++;
   264ec:	9300      	str	r3, [sp, #0]
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   264ee:	2000      	movs	r0, #0
	*str = tmpstr;
   264f0:	9b00      	ldr	r3, [sp, #0]
   264f2:	f8c8 3000 	str.w	r3, [r8]
}
   264f6:	b023      	add	sp, #140	; 0x8c
   264f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			tmpstr++;
   264fc:	3301      	adds	r3, #1
   264fe:	9300      	str	r3, [sp, #0]
   26500:	e7e1      	b.n	264c6 <at_parse_process_element+0x4e>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   26502:	2a3f      	cmp	r2, #63	; 0x3f
   26504:	d1f3      	bne.n	264ee <at_parse_process_element+0x76>
			tmpstr++;
   26506:	3301      	adds	r3, #1
   26508:	e7f0      	b.n	264ec <at_parse_process_element+0x74>
	} else if (state == OPTIONAL) {
   2650a:	2c08      	cmp	r4, #8
   2650c:	d103      	bne.n	26516 <at_parse_process_element+0x9e>
		at_params_empty_put(list, index);
   2650e:	4610      	mov	r0, r2
   26510:	f00b fb53 	bl	31bba <at_params_empty_put>
   26514:	e7eb      	b.n	264ee <at_parse_process_element+0x76>
	} else if (state == STRING) {
   26516:	2c02      	cmp	r4, #2
   26518:	d111      	bne.n	2653e <at_parse_process_element+0xc6>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   2651a:	9a00      	ldr	r2, [sp, #0]
   2651c:	7811      	ldrb	r1, [r2, #0]
   2651e:	4608      	mov	r0, r1
   26520:	f00b fae2 	bl	31ae8 <is_lfcr>
   26524:	b918      	cbnz	r0, 2652e <at_parse_process_element+0xb6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26526:	b111      	cbz	r1, 2652e <at_parse_process_element+0xb6>
			tmpstr++;
   26528:	3201      	adds	r2, #1
   2652a:	9200      	str	r2, [sp, #0]
   2652c:	e7f5      	b.n	2651a <at_parse_process_element+0xa2>
		at_params_string_put(list, index, start_ptr,
   2652e:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   26530:	462a      	mov	r2, r5
   26532:	4639      	mov	r1, r7
   26534:	4630      	mov	r0, r6
   26536:	f00b fb6a 	bl	31c0e <at_params_string_put>
		tmpstr++;
   2653a:	9b00      	ldr	r3, [sp, #0]
   2653c:	e7e3      	b.n	26506 <at_parse_process_element+0x8e>
	} else if (state == QUOTED_STRING) {
   2653e:	2c03      	cmp	r4, #3
   26540:	d109      	bne.n	26556 <at_parse_process_element+0xde>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   26542:	9b00      	ldr	r3, [sp, #0]
   26544:	781a      	ldrb	r2, [r3, #0]
	if (chr == '"') {
   26546:	2a22      	cmp	r2, #34	; 0x22
   26548:	d003      	beq.n	26552 <at_parse_process_element+0xda>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2654a:	b112      	cbz	r2, 26552 <at_parse_process_element+0xda>
			tmpstr++;
   2654c:	3301      	adds	r3, #1
   2654e:	9300      	str	r3, [sp, #0]
   26550:	e7f7      	b.n	26542 <at_parse_process_element+0xca>
		at_params_string_put(list, index, start_ptr,
   26552:	1b5b      	subs	r3, r3, r5
   26554:	e7ec      	b.n	26530 <at_parse_process_element+0xb8>
	} else if (state == ARRAY) {
   26556:	2c01      	cmp	r4, #1
   26558:	d13c      	bne.n	265d4 <at_parse_process_element+0x15c>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2655a:	4628      	mov	r0, r5
   2655c:	220a      	movs	r2, #10
   2655e:	a901      	add	r1, sp, #4
   26560:	f007 fe5a 	bl	2e218 <strtoul>
		tmpstr = next;
   26564:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26566:	4d33      	ldr	r5, [pc, #204]	; (26634 <at_parse_process_element+0x1bc>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   26568:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   2656a:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   2656c:	9800      	ldr	r0, [sp, #0]
   2656e:	7803      	ldrb	r3, [r0, #0]
	if (chr == ')') {
   26570:	2b29      	cmp	r3, #41	; 0x29
   26572:	d01f      	beq.n	265b4 <at_parse_process_element+0x13c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26574:	b1f3      	cbz	r3, 265b4 <at_parse_process_element+0x13c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   26576:	3b2c      	subs	r3, #44	; 0x2c
   26578:	b2db      	uxtb	r3, r3
   2657a:	3001      	adds	r0, #1
   2657c:	2b11      	cmp	r3, #17
				tmparray[i++] =
   2657e:	9000      	str	r0, [sp, #0]
   26580:	d826      	bhi.n	265d0 <at_parse_process_element+0x158>
   26582:	fa25 f303 	lsr.w	r3, r5, r3
   26586:	07db      	lsls	r3, r3, #31
   26588:	d522      	bpl.n	265d0 <at_parse_process_element+0x158>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2658a:	220a      	movs	r2, #10
   2658c:	a901      	add	r1, sp, #4
   2658e:	f007 fe43 	bl	2e218 <strtoul>
				tmparray[i++] =
   26592:	ab22      	add	r3, sp, #136	; 0x88
   26594:	f104 0901 	add.w	r9, r4, #1
   26598:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2659c:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   265a0:	9800      	ldr	r0, [sp, #0]
   265a2:	f7f6 fd7d 	bl	1d0a0 <strlen>
   265a6:	4604      	mov	r4, r0
   265a8:	9801      	ldr	r0, [sp, #4]
   265aa:	f7f6 fd79 	bl	1d0a0 <strlen>
   265ae:	4284      	cmp	r4, r0
   265b0:	d107      	bne.n	265c2 <at_parse_process_element+0x14a>
				tmparray[i++] =
   265b2:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   265b4:	4639      	mov	r1, r7
   265b6:	4630      	mov	r0, r6
   265b8:	00a3      	lsls	r3, r4, #2
   265ba:	aa02      	add	r2, sp, #8
   265bc:	f00b fb4a 	bl	31c54 <at_params_array_put>
		tmpstr++;
   265c0:	e7bb      	b.n	2653a <at_parse_process_element+0xc2>
					tmpstr = next;
   265c2:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   265c4:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   265c8:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   265ca:	d0f2      	beq.n	265b2 <at_parse_process_element+0x13a>
				tmpstr++;
   265cc:	464c      	mov	r4, r9
   265ce:	e7cd      	b.n	2656c <at_parse_process_element+0xf4>
   265d0:	46a1      	mov	r9, r4
   265d2:	e7fb      	b.n	265cc <at_parse_process_element+0x154>
	} else if (state == NUMBER) {
   265d4:	2c04      	cmp	r4, #4
   265d6:	d10d      	bne.n	265f4 <at_parse_process_element+0x17c>
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   265d8:	220a      	movs	r2, #10
   265da:	4628      	mov	r0, r5
   265dc:	a902      	add	r1, sp, #8
   265de:	f007 fd9f 	bl	2e120 <strtoll>
   265e2:	460b      	mov	r3, r1
		tmpstr = next;
   265e4:	9902      	ldr	r1, [sp, #8]
		int64_t value = (int64_t)strtoll(tmpstr, &next, 10);
   265e6:	4602      	mov	r2, r0
		tmpstr = next;
   265e8:	9100      	str	r1, [sp, #0]
		at_params_int_put(list, index, value);
   265ea:	4630      	mov	r0, r6
   265ec:	4639      	mov	r1, r7
   265ee:	f00b faf9 	bl	31be4 <at_params_int_put>
   265f2:	e77c      	b.n	264ee <at_parse_process_element+0x76>
	} else if (state == SMS_PDU) {
   265f4:	2c05      	cmp	r4, #5
   265f6:	d10b      	bne.n	26610 <at_parse_process_element+0x198>
		while (isxdigit((int)*tmpstr)) {
   265f8:	490d      	ldr	r1, [pc, #52]	; (26630 <at_parse_process_element+0x1b8>)
   265fa:	9b00      	ldr	r3, [sp, #0]
   265fc:	781a      	ldrb	r2, [r3, #0]
   265fe:	5c52      	ldrb	r2, [r2, r1]
   26600:	f012 0f44 	tst.w	r2, #68	; 0x44
   26604:	d101      	bne.n	2660a <at_parse_process_element+0x192>
		at_params_string_put(list, index, start_ptr,
   26606:	1b5b      	subs	r3, r3, r5
   26608:	e74e      	b.n	264a8 <at_parse_process_element+0x30>
			tmpstr++;
   2660a:	3301      	adds	r3, #1
   2660c:	9300      	str	r3, [sp, #0]
   2660e:	e7f4      	b.n	265fa <at_parse_process_element+0x182>
	} else if (state == CLAC) {
   26610:	2c09      	cmp	r4, #9
   26612:	f47f af6c 	bne.w	264ee <at_parse_process_element+0x76>
		while (!is_terminated(*tmpstr)) {
   26616:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   26618:	781a      	ldrb	r2, [r3, #0]
   2661a:	2a00      	cmp	r2, #0
   2661c:	d0f3      	beq.n	26606 <at_parse_process_element+0x18e>
			tmpstr++;
   2661e:	3301      	adds	r3, #1
   26620:	9300      	str	r3, [sp, #0]
   26622:	e7f8      	b.n	26616 <at_parse_process_element+0x19e>
		return -1;
   26624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26628:	e765      	b.n	264f6 <at_parse_process_element+0x7e>
   2662a:	bf00      	nop
   2662c:	2000f6d7 	.word	0x2000f6d7
   26630:	00039f71 	.word	0x00039f71
   26634:	00024001 	.word	0x00024001

00026638 <at_parse_detect_type>:
{
   26638:	b570      	push	{r4, r5, r6, lr}
   2663a:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   2663c:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2663e:	4e64      	ldr	r6, [pc, #400]	; (267d0 <at_parse_detect_type+0x198>)
   26640:	2900      	cmp	r1, #0
   26642:	d137      	bne.n	266b4 <at_parse_detect_type+0x7c>
   26644:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   26646:	2b2b      	cmp	r3, #43	; 0x2b
   26648:	d001      	beq.n	2664e <at_parse_detect_type+0x16>
   2664a:	2b25      	cmp	r3, #37	; 0x25
   2664c:	d132      	bne.n	266b4 <at_parse_detect_type+0x7c>
	state = new_state;
   2664e:	2206      	movs	r2, #6
   26650:	4b60      	ldr	r3, [pc, #384]	; (267d4 <at_parse_detect_type+0x19c>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26652:	4620      	mov	r0, r4
	state = new_state;
   26654:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26656:	4960      	ldr	r1, [pc, #384]	; (267d8 <at_parse_detect_type+0x1a0>)
   26658:	2205      	movs	r2, #5
   2665a:	f00d fcb2 	bl	33fc2 <strncmp>
   2665e:	b920      	cbnz	r0, 2666a <at_parse_detect_type+0x32>
			retval = true;
   26660:	2001      	movs	r0, #1
		set_type_string = check_response_for_forced_string(tmpstr);
   26662:	7030      	strb	r0, [r6, #0]
	return 0;
   26664:	2000      	movs	r0, #0
	*str = tmpstr;
   26666:	602c      	str	r4, [r5, #0]
	return 0;
   26668:	e064      	b.n	26734 <at_parse_detect_type+0xfc>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   2666a:	2205      	movs	r2, #5
   2666c:	4620      	mov	r0, r4
   2666e:	495b      	ldr	r1, [pc, #364]	; (267dc <at_parse_detect_type+0x1a4>)
   26670:	f00d fca7 	bl	33fc2 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   26674:	2800      	cmp	r0, #0
   26676:	d0f3      	beq.n	26660 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   26678:	220b      	movs	r2, #11
   2667a:	4620      	mov	r0, r4
   2667c:	4958      	ldr	r1, [pc, #352]	; (267e0 <at_parse_detect_type+0x1a8>)
   2667e:	f00d fca0 	bl	33fc2 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   26682:	2800      	cmp	r0, #0
   26684:	d0ec      	beq.n	26660 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   26686:	220a      	movs	r2, #10
   26688:	4620      	mov	r0, r4
   2668a:	4956      	ldr	r1, [pc, #344]	; (267e4 <at_parse_detect_type+0x1ac>)
   2668c:	f00d fc99 	bl	33fc2 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   26690:	2800      	cmp	r0, #0
   26692:	d0e5      	beq.n	26660 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   26694:	220b      	movs	r2, #11
   26696:	4620      	mov	r0, r4
   26698:	4953      	ldr	r1, [pc, #332]	; (267e8 <at_parse_detect_type+0x1b0>)
   2669a:	f00d fc92 	bl	33fc2 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   2669e:	2800      	cmp	r0, #0
   266a0:	d0de      	beq.n	26660 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   266a2:	2207      	movs	r2, #7
   266a4:	4620      	mov	r0, r4
   266a6:	4951      	ldr	r1, [pc, #324]	; (267ec <at_parse_detect_type+0x1b4>)
   266a8:	f00d fc8b 	bl	33fc2 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   266ac:	fab0 f080 	clz	r0, r0
   266b0:	0940      	lsrs	r0, r0, #5
   266b2:	e7d6      	b.n	26662 <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   266b4:	7833      	ldrb	r3, [r6, #0]
   266b6:	b113      	cbz	r3, 266be <at_parse_detect_type+0x86>
	state = new_state;
   266b8:	4b46      	ldr	r3, [pc, #280]	; (267d4 <at_parse_detect_type+0x19c>)
   266ba:	2202      	movs	r2, #2
   266bc:	e043      	b.n	26746 <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_clac(tmpstr)) {
   266be:	2900      	cmp	r1, #0
   266c0:	dd39      	ble.n	26736 <at_parse_detect_type+0xfe>
   266c2:	4622      	mov	r2, r4
   266c4:	4616      	mov	r6, r2
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	/* skip leading <CR><LF>, if any, as check not from index 0 */
	while (is_lfcr(*str)) {
   266c6:	f812 0b01 	ldrb.w	r0, [r2], #1
   266ca:	f00b fa0d 	bl	31ae8 <is_lfcr>
   266ce:	2800      	cmp	r0, #0
   266d0:	d1f8      	bne.n	266c4 <at_parse_detect_type+0x8c>
		str++;
	}

	if (strlen(str) < 4) {
   266d2:	4630      	mov	r0, r6
   266d4:	f7f6 fce4 	bl	1d0a0 <strlen>
   266d8:	2803      	cmp	r0, #3
   266da:	d970      	bls.n	267be <at_parse_detect_type+0x186>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   266dc:	7833      	ldrb	r3, [r6, #0]
   266de:	4a44      	ldr	r2, [pc, #272]	; (267f0 <at_parse_detect_type+0x1b8>)
   266e0:	5c99      	ldrb	r1, [r3, r2]
   266e2:	f001 0103 	and.w	r1, r1, #3
   266e6:	2902      	cmp	r1, #2
   266e8:	bf08      	it	eq
   266ea:	3b20      	subeq	r3, #32
   266ec:	2b41      	cmp	r3, #65	; 0x41
   266ee:	d166      	bne.n	267be <at_parse_detect_type+0x186>
   266f0:	7873      	ldrb	r3, [r6, #1]
   266f2:	5cd1      	ldrb	r1, [r2, r3]
   266f4:	f001 0103 	and.w	r1, r1, #3
   266f8:	2902      	cmp	r1, #2
   266fa:	bf08      	it	eq
   266fc:	3b20      	subeq	r3, #32
   266fe:	2b54      	cmp	r3, #84	; 0x54
   26700:	d15d      	bne.n	267be <at_parse_detect_type+0x186>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   26702:	78b3      	ldrb	r3, [r6, #2]
   26704:	5cd1      	ldrb	r1, [r2, r3]
   26706:	f001 0103 	and.w	r1, r1, #3
   2670a:	2902      	cmp	r1, #2
   2670c:	bf08      	it	eq
   2670e:	3b20      	subeq	r3, #32
   26710:	2b2b      	cmp	r3, #43	; 0x2b
   26712:	d00a      	beq.n	2672a <at_parse_detect_type+0xf2>
   26714:	2b25      	cmp	r3, #37	; 0x25
   26716:	d152      	bne.n	267be <at_parse_detect_type+0x186>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   26718:	78f3      	ldrb	r3, [r6, #3]
   2671a:	5cd2      	ldrb	r2, [r2, r3]
   2671c:	f002 0203 	and.w	r2, r2, #3
   26720:	2a02      	cmp	r2, #2
   26722:	bf08      	it	eq
   26724:	3b20      	subeq	r3, #32
   26726:	2b58      	cmp	r3, #88	; 0x58
   26728:	d049      	beq.n	267be <at_parse_detect_type+0x186>
	state = new_state;
   2672a:	2209      	movs	r2, #9
		return -2;
   2672c:	f06f 0001 	mvn.w	r0, #1
	state = new_state;
   26730:	4b28      	ldr	r3, [pc, #160]	; (267d4 <at_parse_detect_type+0x19c>)
   26732:	701a      	strb	r2, [r3, #0]
}
   26734:	bd70      	pop	{r4, r5, r6, pc}
	} else if ((index == 0) && is_command(tmpstr)) {
   26736:	d108      	bne.n	2674a <at_parse_detect_type+0x112>
   26738:	4620      	mov	r0, r4
   2673a:	f7ff fe6f 	bl	2641c <is_command>
   2673e:	4b25      	ldr	r3, [pc, #148]	; (267d4 <at_parse_detect_type+0x19c>)
   26740:	2800      	cmp	r0, #0
   26742:	d0ba      	beq.n	266ba <at_parse_detect_type+0x82>
	state = new_state;
   26744:	2207      	movs	r2, #7
   26746:	701a      	strb	r2, [r3, #0]
}
   26748:	e78c      	b.n	26664 <at_parse_detect_type+0x2c>
	} else if (is_number(*tmpstr)) {
   2674a:	7822      	ldrb	r2, [r4, #0]
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   2674c:	4b28      	ldr	r3, [pc, #160]	; (267f0 <at_parse_detect_type+0x1b8>)
   2674e:	5cd3      	ldrb	r3, [r2, r3]
   26750:	0759      	lsls	r1, r3, #29
   26752:	d403      	bmi.n	2675c <at_parse_detect_type+0x124>
   26754:	2a2d      	cmp	r2, #45	; 0x2d
   26756:	d001      	beq.n	2675c <at_parse_detect_type+0x124>
   26758:	2a2b      	cmp	r2, #43	; 0x2b
   2675a:	d102      	bne.n	26762 <at_parse_detect_type+0x12a>
	state = new_state;
   2675c:	2204      	movs	r2, #4
   2675e:	4b1d      	ldr	r3, [pc, #116]	; (267d4 <at_parse_detect_type+0x19c>)
   26760:	e7f1      	b.n	26746 <at_parse_detect_type+0x10e>
	if (chr == '"') {
   26762:	2a22      	cmp	r2, #34	; 0x22
   26764:	d006      	beq.n	26774 <at_parse_detect_type+0x13c>
	if (chr == '(') {
   26766:	2a28      	cmp	r2, #40	; 0x28
   26768:	d109      	bne.n	2677e <at_parse_detect_type+0x146>
   2676a:	2201      	movs	r2, #1
   2676c:	4b19      	ldr	r3, [pc, #100]	; (267d4 <at_parse_detect_type+0x19c>)
		tmpstr++;
   2676e:	4414      	add	r4, r2
	state = new_state;
   26770:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   26772:	e777      	b.n	26664 <at_parse_detect_type+0x2c>
	state = new_state;
   26774:	2203      	movs	r2, #3
   26776:	4b17      	ldr	r3, [pc, #92]	; (267d4 <at_parse_detect_type+0x19c>)
		tmpstr++;
   26778:	3401      	adds	r4, #1
	state = new_state;
   2677a:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2677c:	e772      	b.n	26664 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   2677e:	4610      	mov	r0, r2
   26780:	f00b f9b2 	bl	31ae8 <is_lfcr>
   26784:	b178      	cbz	r0, 267a6 <at_parse_detect_type+0x16e>
   26786:	4913      	ldr	r1, [pc, #76]	; (267d4 <at_parse_detect_type+0x19c>)
   26788:	780b      	ldrb	r3, [r1, #0]
   2678a:	2b04      	cmp	r3, #4
   2678c:	d108      	bne.n	267a0 <at_parse_detect_type+0x168>
		while (is_lfcr(*tmpstr)) {
   2678e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   26792:	f00b f9a9 	bl	31ae8 <is_lfcr>
   26796:	2800      	cmp	r0, #0
   26798:	d1f9      	bne.n	2678e <at_parse_detect_type+0x156>
	state = new_state;
   2679a:	2305      	movs	r3, #5
   2679c:	700b      	strb	r3, [r1, #0]
}
   2679e:	e761      	b.n	26664 <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   267a0:	2b08      	cmp	r3, #8
   267a2:	f43f af5f 	beq.w	26664 <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   267a6:	3a2c      	subs	r2, #44	; 0x2c
   267a8:	b2d2      	uxtb	r2, r2
   267aa:	2a11      	cmp	r2, #17
   267ac:	d80c      	bhi.n	267c8 <at_parse_detect_type+0x190>
   267ae:	4b11      	ldr	r3, [pc, #68]	; (267f4 <at_parse_detect_type+0x1bc>)
   267b0:	fa23 f202 	lsr.w	r2, r3, r2
   267b4:	07d3      	lsls	r3, r2, #31
   267b6:	d507      	bpl.n	267c8 <at_parse_detect_type+0x190>
	state = new_state;
   267b8:	2208      	movs	r2, #8
   267ba:	4b06      	ldr	r3, [pc, #24]	; (267d4 <at_parse_detect_type+0x19c>)
   267bc:	e7c3      	b.n	26746 <at_parse_detect_type+0x10e>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   267be:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   267c0:	2b2b      	cmp	r3, #43	; 0x2b
   267c2:	d001      	beq.n	267c8 <at_parse_detect_type+0x190>
   267c4:	2b25      	cmp	r3, #37	; 0x25
   267c6:	d1c0      	bne.n	2674a <at_parse_detect_type+0x112>
		return -1;
   267c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		*str = tmpstr;
   267cc:	602c      	str	r4, [r5, #0]
		return -1;
   267ce:	e7b1      	b.n	26734 <at_parse_detect_type+0xfc>
   267d0:	2000f6d6 	.word	0x2000f6d6
   267d4:	2000f6d7 	.word	0x2000f6d7
   267d8:	00038bd8 	.word	0x00038bd8
   267dc:	00038bde 	.word	0x00038bde
   267e0:	00038be4 	.word	0x00038be4
   267e4:	00038bf0 	.word	0x00038bf0
   267e8:	000357c9 	.word	0x000357c9
   267ec:	00038bfb 	.word	0x00038bfb
   267f0:	00039f71 	.word	0x00039f71
   267f4:	00024001 	.word	0x00024001

000267f8 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   267f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267fc:	4689      	mov	r9, r1
   267fe:	4616      	mov	r6, r2
   26800:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   26802:	4680      	mov	r8, r0
{
   26804:	b085      	sub	sp, #20
	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   26806:	2800      	cmp	r0, #0
   26808:	f000 8097 	beq.w	2693a <at_parser_max_params_from_str+0x142>
   2680c:	2a00      	cmp	r2, #0
   2680e:	f000 8094 	beq.w	2693a <at_parser_max_params_from_str+0x142>
   26812:	6853      	ldr	r3, [r2, #4]
   26814:	2b00      	cmp	r3, #0
   26816:	f000 8090 	beq.w	2693a <at_parser_max_params_from_str+0x142>
	state = IDLE;
   2681a:	2500      	movs	r5, #0
	int index = 0;
   2681c:	462c      	mov	r4, r5
		return -EINVAL;
	}

	at_params_list_clear(list);
   2681e:	4610      	mov	r0, r2
   26820:	f00b f9a5 	bl	31b6e <at_params_list_clear>

	max_params_count = MIN(max_params_count, list->param_count);
   26824:	6833      	ldr	r3, [r6, #0]
	const char *str = *at_params_str;
   26826:	f8cd 800c 	str.w	r8, [sp, #12]
	max_params_count = MIN(max_params_count, list->param_count);
   2682a:	429f      	cmp	r7, r3
   2682c:	bf28      	it	cs
   2682e:	461f      	movcs	r7, r3
	state = IDLE;
   26830:	4b43      	ldr	r3, [pc, #268]	; (26940 <at_parser_max_params_from_str+0x148>)
   26832:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   26834:	4b43      	ldr	r3, [pc, #268]	; (26944 <at_parser_max_params_from_str+0x14c>)
   26836:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   26838:	9b03      	ldr	r3, [sp, #12]
   2683a:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2683c:	2a00      	cmp	r2, #0
   2683e:	d055      	beq.n	268ec <at_parser_max_params_from_str+0xf4>
   26840:	42a7      	cmp	r7, r4
   26842:	d953      	bls.n	268ec <at_parser_max_params_from_str+0xf4>
		if (isspace((int)*str)) {
   26844:	4940      	ldr	r1, [pc, #256]	; (26948 <at_parser_max_params_from_str+0x150>)
		ret = at_parse_detect_type(&str, index);
   26846:	a803      	add	r0, sp, #12
		if (isspace((int)*str)) {
   26848:	5c52      	ldrb	r2, [r2, r1]
   2684a:	0711      	lsls	r1, r2, #28
			str++;
   2684c:	bf48      	it	mi
   2684e:	3301      	addmi	r3, #1
		ret = at_parse_detect_type(&str, index);
   26850:	4621      	mov	r1, r4
			str++;
   26852:	bf48      	it	mi
   26854:	9303      	strmi	r3, [sp, #12]
		ret = at_parse_detect_type(&str, index);
   26856:	f7ff feef 	bl	26638 <at_parse_detect_type>
		if (ret == -1) {
   2685a:	1c42      	adds	r2, r0, #1
   2685c:	d046      	beq.n	268ec <at_parser_max_params_from_str+0xf4>
		if (ret == -2) {
   2685e:	3002      	adds	r0, #2
			index = 0;
   26860:	bf08      	it	eq
   26862:	2400      	moveq	r4, #0
		if (at_parse_process_element(&str, index, list) == -1) {
   26864:	4632      	mov	r2, r6
   26866:	4621      	mov	r1, r4
   26868:	a803      	add	r0, sp, #12
			str = *at_params_str;
   2686a:	bf08      	it	eq
   2686c:	f8cd 800c 	streq.w	r8, [sp, #12]
		if (at_parse_process_element(&str, index, list) == -1) {
   26870:	f7ff fe02 	bl	26478 <at_parse_process_element>
   26874:	3001      	adds	r0, #1
   26876:	d039      	beq.n	268ec <at_parser_max_params_from_str+0xf4>
		if (is_separator(*str)) {
   26878:	9a03      	ldr	r2, [sp, #12]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2687a:	7813      	ldrb	r3, [r2, #0]
   2687c:	3b2c      	subs	r3, #44	; 0x2c
   2687e:	b2db      	uxtb	r3, r3
   26880:	2b11      	cmp	r3, #17
   26882:	d81b      	bhi.n	268bc <at_parser_max_params_from_str+0xc4>
   26884:	4931      	ldr	r1, [pc, #196]	; (2694c <at_parser_max_params_from_str+0x154>)
   26886:	fa21 f303 	lsr.w	r3, r1, r3
   2688a:	07db      	lsls	r3, r3, #31
   2688c:	d516      	bpl.n	268bc <at_parser_max_params_from_str+0xc4>
			if (is_lfcr(*(str + 1))) {
   2688e:	7850      	ldrb	r0, [r2, #1]
   26890:	f00b f92a 	bl	31ae8 <is_lfcr>
   26894:	b178      	cbz	r0, 268b6 <at_parser_max_params_from_str+0xbe>
				index++;
   26896:	3401      	adds	r4, #1
				if (index == max_params) {
   26898:	42bc      	cmp	r4, r7
   2689a:	d046      	beq.n	2692a <at_parser_max_params_from_str+0x132>
				if (at_parse_detect_type(&str, index) == -1) {
   2689c:	4621      	mov	r1, r4
   2689e:	a803      	add	r0, sp, #12
   268a0:	f7ff feca 	bl	26638 <at_parse_detect_type>
   268a4:	3001      	adds	r0, #1
   268a6:	d021      	beq.n	268ec <at_parser_max_params_from_str+0xf4>
				if (at_parse_process_element(&str, index,
   268a8:	4632      	mov	r2, r6
   268aa:	4621      	mov	r1, r4
   268ac:	a803      	add	r0, sp, #12
   268ae:	f7ff fde3 	bl	26478 <at_parse_process_element>
   268b2:	3001      	adds	r0, #1
   268b4:	d01a      	beq.n	268ec <at_parser_max_params_from_str+0xf4>
			str++;
   268b6:	9b03      	ldr	r3, [sp, #12]
   268b8:	3301      	adds	r3, #1
   268ba:	9303      	str	r3, [sp, #12]
		if (is_lfcr(*str)) {
   268bc:	f8dd b00c 	ldr.w	fp, [sp, #12]
   268c0:	f89b 0000 	ldrb.w	r0, [fp]
   268c4:	f00b f910 	bl	31ae8 <is_lfcr>
   268c8:	b350      	cbz	r0, 26920 <at_parser_max_params_from_str+0x128>
   268ca:	f10b 0101 	add.w	r1, fp, #1
			while (is_lfcr(str[++i])) {
   268ce:	9101      	str	r1, [sp, #4]
   268d0:	eba1 0a0b 	sub.w	sl, r1, fp
   268d4:	f811 2b01 	ldrb.w	r2, [r1], #1
   268d8:	4610      	mov	r0, r2
   268da:	f00b f905 	bl	31ae8 <is_lfcr>
   268de:	9b01      	ldr	r3, [sp, #4]
   268e0:	2800      	cmp	r0, #0
   268e2:	d1f4      	bne.n	268ce <at_parser_max_params_from_str+0xd6>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   268e4:	b99a      	cbnz	r2, 2690e <at_parser_max_params_from_str+0x116>
				str += i;
   268e6:	9b03      	ldr	r3, [sp, #12]
   268e8:	4453      	add	r3, sl
   268ea:	9303      	str	r3, [sp, #12]
	*at_params_str = str;
   268ec:	9c03      	ldr	r4, [sp, #12]
	if (oversized) {
   268ee:	b9f5      	cbnz	r5, 2692e <at_parser_max_params_from_str+0x136>
   268f0:	7823      	ldrb	r3, [r4, #0]
   268f2:	b11b      	cbz	r3, 268fc <at_parser_max_params_from_str+0x104>
	if (!is_terminated(*str) && !is_result(str)) {
   268f4:	4620      	mov	r0, r4
   268f6:	f7ff fd77 	bl	263e8 <is_result>
   268fa:	b1d8      	cbz	r0, 26934 <at_parser_max_params_from_str+0x13c>
	return 0;
   268fc:	2000      	movs	r0, #0

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   268fe:	f1b9 0f00 	cmp.w	r9, #0
   26902:	d001      	beq.n	26908 <at_parser_max_params_from_str+0x110>
		*next_param_str = (char *)at_params_str;
   26904:	f8c9 4000 	str.w	r4, [r9]
	}

	return err;
}
   26908:	b005      	add	sp, #20
   2690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2690e:	2a2b      	cmp	r2, #43	; 0x2b
   26910:	d0e9      	beq.n	268e6 <at_parser_max_params_from_str+0xee>
   26912:	2a25      	cmp	r2, #37	; 0x25
   26914:	d0e7      	beq.n	268e6 <at_parser_max_params_from_str+0xee>
			    is_result(str + i)) {
   26916:	4618      	mov	r0, r3
   26918:	f7ff fd66 	bl	263e8 <is_result>
			if (is_terminated(str[i]) || is_notification(str[i]) ||
   2691c:	2800      	cmp	r0, #0
   2691e:	d1e2      	bne.n	268e6 <at_parser_max_params_from_str+0xee>
		index++;
   26920:	3401      	adds	r4, #1
			oversized = true;
   26922:	42bc      	cmp	r4, r7
   26924:	bf08      	it	eq
   26926:	2501      	moveq	r5, #1
   26928:	e786      	b.n	26838 <at_parser_max_params_from_str+0x40>
					oversized = true;
   2692a:	4605      	mov	r5, r0
   2692c:	e7de      	b.n	268ec <at_parser_max_params_from_str+0xf4>
		return -E2BIG;
   2692e:	f06f 0006 	mvn.w	r0, #6
   26932:	e7e4      	b.n	268fe <at_parser_max_params_from_str+0x106>
		return -EAGAIN;
   26934:	f06f 000a 	mvn.w	r0, #10
   26938:	e7e1      	b.n	268fe <at_parser_max_params_from_str+0x106>
		return -EINVAL;
   2693a:	f06f 0015 	mvn.w	r0, #21
   2693e:	e7e3      	b.n	26908 <at_parser_max_params_from_str+0x110>
   26940:	2000f6d7 	.word	0x2000f6d7
   26944:	2000f6d6 	.word	0x2000f6d6
   26948:	00039f71 	.word	0x00039f71
   2694c:	00024001 	.word	0x00024001

00026950 <enable_notifications>:

	event_handler_list_dispatch(&evt);
}

static int enable_notifications(void)
{
   26950:	b530      	push	{r4, r5, lr}
	int err;

	/* +CEREG notifications, level 5 */
	err = nrf_modem_at_printf(AT_CEREG_5);
   26952:	4825      	ldr	r0, [pc, #148]	; (269e8 <enable_notifications+0x98>)
{
   26954:	b093      	sub	sp, #76	; 0x4c
	err = nrf_modem_at_printf(AT_CEREG_5);
   26956:	f004 fbff 	bl	2b158 <nrf_modem_at_printf>
	if (err) {
   2695a:	4604      	mov	r4, r0
   2695c:	b170      	cbz	r0, 2697c <enable_notifications+0x2c>
		LOG_ERR("Failed to subscribe to CEREG notifications, error: %d", err);
   2695e:	4b23      	ldr	r3, [pc, #140]	; (269ec <enable_notifications+0x9c>)
   26960:	9003      	str	r0, [sp, #12]
   26962:	9302      	str	r3, [sp, #8]
   26964:	2300      	movs	r3, #0
   26966:	2201      	movs	r2, #1
   26968:	4618      	mov	r0, r3
   2696a:	e9cd 3300 	strd	r3, r3, [sp]
   2696e:	4920      	ldr	r1, [pc, #128]	; (269f0 <enable_notifications+0xa0>)
   26970:	f00b fa28 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   26974:	f06f 000d 	mvn.w	r0, #13
			LOG_WRN("Current modem firmware version: %s", buf);
		}
	}

	return 0;
}
   26978:	b013      	add	sp, #76	; 0x4c
   2697a:	bd30      	pop	{r4, r5, pc}
	err = nrf_modem_at_printf(cscon);
   2697c:	481d      	ldr	r0, [pc, #116]	; (269f4 <enable_notifications+0xa4>)
   2697e:	f004 fbeb 	bl	2b158 <nrf_modem_at_printf>
	if (err) {
   26982:	2800      	cmp	r0, #0
   26984:	d0f8      	beq.n	26978 <enable_notifications+0x28>
		LOG_WRN("AT+CSCON failed (%d), RRC notifications are not enabled", err);
   26986:	4b1c      	ldr	r3, [pc, #112]	; (269f8 <enable_notifications+0xa8>)
   26988:	2202      	movs	r2, #2
   2698a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2698e:	4918      	ldr	r1, [pc, #96]	; (269f0 <enable_notifications+0xa0>)
   26990:	4623      	mov	r3, r4
   26992:	9003      	str	r0, [sp, #12]
   26994:	9400      	str	r4, [sp, #0]
   26996:	4620      	mov	r0, r4
   26998:	f00b fa14 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   2699c:	4b17      	ldr	r3, [pc, #92]	; (269fc <enable_notifications+0xac>)
   2699e:	4620      	mov	r0, r4
   269a0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   269a4:	2202      	movs	r2, #2
   269a6:	4623      	mov	r3, r4
   269a8:	4911      	ldr	r1, [pc, #68]	; (269f0 <enable_notifications+0xa0>)
   269aa:	9400      	str	r4, [sp, #0]
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   269ac:	ad05      	add	r5, sp, #20
		LOG_WRN("AT+CSCON is supported in nRF9160 modem >= v1.1.0");
   269ae:	f00b fa09 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		err = nrf_modem_at_cmd(buf, sizeof(buf), "AT+CGMR");
   269b2:	2132      	movs	r1, #50	; 0x32
   269b4:	4628      	mov	r0, r5
   269b6:	4a12      	ldr	r2, [pc, #72]	; (26a00 <enable_notifications+0xb0>)
   269b8:	f004 fc16 	bl	2b1e8 <nrf_modem_at_cmd>
		if (err == 0) {
   269bc:	4604      	mov	r4, r0
   269be:	b980      	cbnz	r0, 269e2 <enable_notifications+0x92>
			char *end = strstr(buf, "\r\nOK");
   269c0:	4628      	mov	r0, r5
   269c2:	4910      	ldr	r1, [pc, #64]	; (26a04 <enable_notifications+0xb4>)
   269c4:	f00d fb30 	bl	34028 <strstr>
			if (end) {
   269c8:	b100      	cbz	r0, 269cc <enable_notifications+0x7c>
				*end = '\0';
   269ca:	7004      	strb	r4, [r0, #0]
			LOG_WRN("Current modem firmware version: %s", buf);
   269cc:	4b0e      	ldr	r3, [pc, #56]	; (26a08 <enable_notifications+0xb8>)
   269ce:	2202      	movs	r2, #2
   269d0:	9302      	str	r3, [sp, #8]
   269d2:	2300      	movs	r3, #0
   269d4:	4906      	ldr	r1, [pc, #24]	; (269f0 <enable_notifications+0xa0>)
   269d6:	4618      	mov	r0, r3
   269d8:	e9cd 3300 	strd	r3, r3, [sp]
   269dc:	9503      	str	r5, [sp, #12]
   269de:	f00b f9f1 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
	return 0;
   269e2:	2000      	movs	r0, #0
   269e4:	e7c8      	b.n	26978 <enable_notifications+0x28>
   269e6:	bf00      	nop
   269e8:	00038c26 	.word	0x00038c26
   269ec:	00038c31 	.word	0x00038c31
   269f0:	00034a90 	.word	0x00034a90
   269f4:	0003933c 	.word	0x0003933c
   269f8:	00038c67 	.word	0x00038c67
   269fc:	00038c9f 	.word	0x00038c9f
   26a00:	00035736 	.word	0x00035736
   26a04:	00038cd0 	.word	0x00038cd0
   26a08:	00038cd5 	.word	0x00038cd5

00026a0c <at_handler_mdmev>:
{
   26a0c:	b510      	push	{r4, lr}
   26a0e:	4604      	mov	r4, r0
   26a10:	b094      	sub	sp, #80	; 0x50
	struct lte_lc_evt evt = {0};
   26a12:	2100      	movs	r1, #0
   26a14:	2240      	movs	r2, #64	; 0x40
   26a16:	a804      	add	r0, sp, #16
   26a18:	f00d f929 	bl	33c6e <memset>
	err = parse_mdmev(response, &evt.modem_evt);
   26a1c:	4620      	mov	r0, r4
   26a1e:	a906      	add	r1, sp, #24
   26a20:	f001 f9e0 	bl	27de4 <parse_mdmev>
	if (err) {
   26a24:	b160      	cbz	r0, 26a40 <at_handler_mdmev+0x34>
		LOG_ERR("Can't parse modem event notification, error: %d", err);
   26a26:	4b0a      	ldr	r3, [pc, #40]	; (26a50 <at_handler_mdmev+0x44>)
   26a28:	9003      	str	r0, [sp, #12]
   26a2a:	9302      	str	r3, [sp, #8]
   26a2c:	2300      	movs	r3, #0
   26a2e:	2201      	movs	r2, #1
   26a30:	4618      	mov	r0, r3
   26a32:	e9cd 3300 	strd	r3, r3, [sp]
   26a36:	4907      	ldr	r1, [pc, #28]	; (26a54 <at_handler_mdmev+0x48>)
   26a38:	f00b f9c4 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
}
   26a3c:	b014      	add	sp, #80	; 0x50
   26a3e:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   26a40:	230b      	movs	r3, #11
	event_handler_list_dispatch(&evt);
   26a42:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_MODEM_EVENT;
   26a44:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   26a48:	f000 fd4e 	bl	274e8 <event_handler_list_dispatch>
   26a4c:	e7f6      	b.n	26a3c <at_handler_mdmev+0x30>
   26a4e:	bf00      	nop
   26a50:	00038cf8 	.word	0x00038cf8
   26a54:	00034a90 	.word	0x00034a90

00026a58 <at_handler_xmodemsleep>:
{
   26a58:	b510      	push	{r4, lr}
   26a5a:	4604      	mov	r4, r0
   26a5c:	b094      	sub	sp, #80	; 0x50
	struct lte_lc_evt evt = {0};
   26a5e:	2100      	movs	r1, #0
   26a60:	2240      	movs	r2, #64	; 0x40
   26a62:	a804      	add	r0, sp, #16
   26a64:	f00d f903 	bl	33c6e <memset>
	err = parse_xmodemsleep(response, &evt.modem_sleep);
   26a68:	4620      	mov	r0, r4
   26a6a:	a906      	add	r1, sp, #24
   26a6c:	f001 f952 	bl	27d14 <parse_xmodemsleep>
	if (err) {
   26a70:	b160      	cbz	r0, 26a8c <at_handler_xmodemsleep+0x34>
		LOG_ERR("Can't parse modem sleep pre-warning notification, error: %d", err);
   26a72:	4b14      	ldr	r3, [pc, #80]	; (26ac4 <at_handler_xmodemsleep+0x6c>)
   26a74:	9003      	str	r0, [sp, #12]
   26a76:	9302      	str	r3, [sp, #8]
   26a78:	2300      	movs	r3, #0
   26a7a:	2201      	movs	r2, #1
   26a7c:	4618      	mov	r0, r3
   26a7e:	e9cd 3300 	strd	r3, r3, [sp]
   26a82:	4911      	ldr	r1, [pc, #68]	; (26ac8 <at_handler_xmodemsleep+0x70>)
   26a84:	f00b f99e 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
}
   26a88:	b014      	add	sp, #80	; 0x50
   26a8a:	bd10      	pop	{r4, pc}
	if ((evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_PSM) &&
   26a8c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   26a90:	1e5a      	subs	r2, r3, #1
   26a92:	2a01      	cmp	r2, #1
   26a94:	d901      	bls.n	26a9a <at_handler_xmodemsleep+0x42>
		(evt.modem_sleep.type != LTE_LC_MODEM_SLEEP_RF_INACTIVITY) &&
   26a96:	2b04      	cmp	r3, #4
   26a98:	d1f6      	bne.n	26a88 <at_handler_xmodemsleep+0x30>
	if (evt.modem_sleep.time == CONFIG_LTE_LC_MODEM_SLEEP_PRE_WARNING_TIME_MS) {
   26a9a:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
   26a9e:	f5a1 539c 	sub.w	r3, r1, #4992	; 0x1380
   26aa2:	3b08      	subs	r3, #8
   26aa4:	4313      	orrs	r3, r2
   26aa6:	d106      	bne.n	26ab6 <at_handler_xmodemsleep+0x5e>
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT_PRE_WARNING;
   26aa8:	2308      	movs	r3, #8
	event_handler_list_dispatch(&evt);
   26aaa:	a804      	add	r0, sp, #16
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   26aac:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   26ab0:	f000 fd1a 	bl	274e8 <event_handler_list_dispatch>
   26ab4:	e7e8      	b.n	26a88 <at_handler_xmodemsleep+0x30>
	} else if (evt.modem_sleep.time == 0) {
   26ab6:	ea51 0302 	orrs.w	r3, r1, r2
		evt.type = LTE_LC_EVT_MODEM_SLEEP_EXIT;
   26aba:	bf0c      	ite	eq
   26abc:	2309      	moveq	r3, #9
		evt.type = LTE_LC_EVT_MODEM_SLEEP_ENTER;
   26abe:	230a      	movne	r3, #10
   26ac0:	e7f3      	b.n	26aaa <at_handler_xmodemsleep+0x52>
   26ac2:	bf00      	nop
   26ac4:	00038d28 	.word	0x00038d28
   26ac8:	00034a90 	.word	0x00034a90

00026acc <at_handler_ncellmeas>:
{
   26acc:	b530      	push	{r4, r5, lr}
   26ace:	4605      	mov	r5, r0
   26ad0:	b095      	sub	sp, #84	; 0x54
	struct lte_lc_evt evt = {0};
   26ad2:	2240      	movs	r2, #64	; 0x40
   26ad4:	2100      	movs	r1, #0
   26ad6:	a804      	add	r0, sp, #16
   26ad8:	f00d f8c9 	bl	33c6e <memset>
	int ncell_count = neighborcell_count_get(response);
   26adc:	4628      	mov	r0, r5
   26ade:	f000 ff9d 	bl	27a1c <neighborcell_count_get>
   26ae2:	4604      	mov	r4, r0
	if (event_handler_list_is_empty()) {
   26ae4:	f000 fcc8 	bl	27478 <event_handler_list_is_empty>
   26ae8:	b978      	cbnz	r0, 26b0a <at_handler_ncellmeas+0x3e>
	if (ncell_count != 0) {
   26aea:	b184      	cbz	r4, 26b0e <at_handler_ncellmeas+0x42>
		neighbor_cells = k_calloc(ncell_count, sizeof(struct lte_lc_ncell));
   26aec:	4620      	mov	r0, r4
   26aee:	2110      	movs	r1, #16
   26af0:	f00d f85e 	bl	33bb0 <k_calloc>
		if (neighbor_cells == NULL) {
   26af4:	4604      	mov	r4, r0
   26af6:	b950      	cbnz	r0, 26b0e <at_handler_ncellmeas+0x42>
			LOG_ERR("Failed to allocate memory for neighbor cells");
   26af8:	4b21      	ldr	r3, [pc, #132]	; (26b80 <at_handler_ncellmeas+0xb4>)
   26afa:	2201      	movs	r2, #1
   26afc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   26b00:	4920      	ldr	r1, [pc, #128]	; (26b84 <at_handler_ncellmeas+0xb8>)
   26b02:	4603      	mov	r3, r0
   26b04:	9000      	str	r0, [sp, #0]
   26b06:	f00b f95d 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
}
   26b0a:	b015      	add	sp, #84	; 0x54
   26b0c:	bd30      	pop	{r4, r5, pc}
	err = parse_ncellmeas(response, &evt.cells_info);
   26b0e:	4628      	mov	r0, r5
   26b10:	a906      	add	r1, sp, #24
	evt.cells_info.neighbor_cells = neighbor_cells;
   26b12:	9413      	str	r4, [sp, #76]	; 0x4c
	err = parse_ncellmeas(response, &evt.cells_info);
   26b14:	f000 ffa6 	bl	27a64 <parse_ncellmeas>
	switch (err) {
   26b18:	1dc3      	adds	r3, r0, #7
   26b1a:	d00d      	beq.n	26b38 <at_handler_ncellmeas+0x6c>
   26b1c:	2801      	cmp	r0, #1
   26b1e:	d922      	bls.n	26b66 <at_handler_ncellmeas+0x9a>
		LOG_ERR("Parsing of neighbor cells failed, err: %d", err);
   26b20:	4b19      	ldr	r3, [pc, #100]	; (26b88 <at_handler_ncellmeas+0xbc>)
   26b22:	9003      	str	r0, [sp, #12]
   26b24:	9302      	str	r3, [sp, #8]
   26b26:	2300      	movs	r3, #0
   26b28:	2201      	movs	r2, #1
   26b2a:	4618      	mov	r0, r3
   26b2c:	e9cd 3300 	strd	r3, r3, [sp]
   26b30:	4914      	ldr	r1, [pc, #80]	; (26b84 <at_handler_ncellmeas+0xb8>)
   26b32:	f00b f947 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
   26b36:	e01c      	b.n	26b72 <at_handler_ncellmeas+0xa6>
		LOG_WRN("Not all neighbor cells could be parsed");
   26b38:	2500      	movs	r5, #0
   26b3a:	4b14      	ldr	r3, [pc, #80]	; (26b8c <at_handler_ncellmeas+0xc0>)
   26b3c:	2202      	movs	r2, #2
   26b3e:	4628      	mov	r0, r5
   26b40:	4910      	ldr	r1, [pc, #64]	; (26b84 <at_handler_ncellmeas+0xb8>)
   26b42:	9302      	str	r3, [sp, #8]
   26b44:	e9cd 5500 	strd	r5, r5, [sp]
   26b48:	462b      	mov	r3, r5
   26b4a:	f00b f93b 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		LOG_WRN("More cells than the configured max count of %d were found",
   26b4e:	230a      	movs	r3, #10
   26b50:	9303      	str	r3, [sp, #12]
   26b52:	4b0f      	ldr	r3, [pc, #60]	; (26b90 <at_handler_ncellmeas+0xc4>)
   26b54:	2202      	movs	r2, #2
   26b56:	e9cd 5301 	strd	r5, r3, [sp, #4]
   26b5a:	4628      	mov	r0, r5
   26b5c:	462b      	mov	r3, r5
   26b5e:	4909      	ldr	r1, [pc, #36]	; (26b84 <at_handler_ncellmeas+0xb8>)
   26b60:	9500      	str	r5, [sp, #0]
   26b62:	f00b f92f 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   26b66:	2307      	movs	r3, #7
		event_handler_list_dispatch(&evt);
   26b68:	a804      	add	r0, sp, #16
		evt.type = LTE_LC_EVT_NEIGHBOR_CELL_MEAS;
   26b6a:	f88d 3010 	strb.w	r3, [sp, #16]
		event_handler_list_dispatch(&evt);
   26b6e:	f000 fcbb 	bl	274e8 <event_handler_list_dispatch>
	if (neighbor_cells) {
   26b72:	2c00      	cmp	r4, #0
   26b74:	d0c9      	beq.n	26b0a <at_handler_ncellmeas+0x3e>
		k_free(neighbor_cells);
   26b76:	4620      	mov	r0, r4
   26b78:	f00d f80f 	bl	33b9a <k_free>
   26b7c:	e7c5      	b.n	26b0a <at_handler_ncellmeas+0x3e>
   26b7e:	bf00      	nop
   26b80:	00038d64 	.word	0x00038d64
   26b84:	00034a90 	.word	0x00034a90
   26b88:	00038df2 	.word	0x00038df2
   26b8c:	00038d91 	.word	0x00038d91
   26b90:	00038db8 	.word	0x00038db8

00026b94 <at_handler_xt3412>:
{
   26b94:	b510      	push	{r4, lr}
   26b96:	4604      	mov	r4, r0
   26b98:	b094      	sub	sp, #80	; 0x50
	struct lte_lc_evt evt = {0};
   26b9a:	2100      	movs	r1, #0
   26b9c:	2240      	movs	r2, #64	; 0x40
   26b9e:	a804      	add	r0, sp, #16
   26ba0:	f00d f865 	bl	33c6e <memset>
	err = parse_xt3412(response, &evt.time);
   26ba4:	4620      	mov	r0, r4
   26ba6:	a906      	add	r1, sp, #24
   26ba8:	f000 fed4 	bl	27954 <parse_xt3412>
	if (err) {
   26bac:	b160      	cbz	r0, 26bc8 <at_handler_xt3412+0x34>
		LOG_ERR("Can't parse TAU pre-warning notification, error: %d", err);
   26bae:	4b0d      	ldr	r3, [pc, #52]	; (26be4 <at_handler_xt3412+0x50>)
   26bb0:	9003      	str	r0, [sp, #12]
   26bb2:	9302      	str	r3, [sp, #8]
   26bb4:	2300      	movs	r3, #0
   26bb6:	2201      	movs	r2, #1
   26bb8:	4618      	mov	r0, r3
   26bba:	e9cd 3300 	strd	r3, r3, [sp]
   26bbe:	490a      	ldr	r1, [pc, #40]	; (26be8 <at_handler_xt3412+0x54>)
   26bc0:	f00b f900 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
}
   26bc4:	b014      	add	sp, #80	; 0x50
   26bc6:	bd10      	pop	{r4, pc}
	if (evt.time != CONFIG_LTE_LC_TAU_PRE_WARNING_TIME_MS) {
   26bc8:	9b06      	ldr	r3, [sp, #24]
   26bca:	9a07      	ldr	r2, [sp, #28]
   26bcc:	f5a3 539c 	sub.w	r3, r3, #4992	; 0x1380
   26bd0:	3b08      	subs	r3, #8
   26bd2:	4313      	orrs	r3, r2
   26bd4:	d1f6      	bne.n	26bc4 <at_handler_xt3412+0x30>
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   26bd6:	2306      	movs	r3, #6
	event_handler_list_dispatch(&evt);
   26bd8:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_TAU_PRE_WARNING;
   26bda:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   26bde:	f000 fc83 	bl	274e8 <event_handler_list_dispatch>
   26be2:	e7ef      	b.n	26bc4 <at_handler_xt3412+0x30>
   26be4:	00038e1c 	.word	0x00038e1c
   26be8:	00034a90 	.word	0x00034a90

00026bec <at_handler_cedrxp>:
{
   26bec:	b510      	push	{r4, lr}
   26bee:	4604      	mov	r4, r0
   26bf0:	b094      	sub	sp, #80	; 0x50
	struct lte_lc_evt evt = {0};
   26bf2:	2100      	movs	r1, #0
   26bf4:	2240      	movs	r2, #64	; 0x40
   26bf6:	a804      	add	r0, sp, #16
   26bf8:	f00d f839 	bl	33c6e <memset>
	err = parse_edrx(response, &evt.edrx_cfg);
   26bfc:	4620      	mov	r0, r4
   26bfe:	a906      	add	r1, sp, #24
   26c00:	f7f7 f9ca 	bl	1df98 <parse_edrx>
	if (err) {
   26c04:	b160      	cbz	r0, 26c20 <at_handler_cedrxp+0x34>
		LOG_ERR("Can't parse eDRX, error: %d", err);
   26c06:	4b0a      	ldr	r3, [pc, #40]	; (26c30 <at_handler_cedrxp+0x44>)
   26c08:	9003      	str	r0, [sp, #12]
   26c0a:	9302      	str	r3, [sp, #8]
   26c0c:	2300      	movs	r3, #0
   26c0e:	2201      	movs	r2, #1
   26c10:	4618      	mov	r0, r3
   26c12:	e9cd 3300 	strd	r3, r3, [sp]
   26c16:	4907      	ldr	r1, [pc, #28]	; (26c34 <at_handler_cedrxp+0x48>)
   26c18:	f00b f8d4 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
}
   26c1c:	b014      	add	sp, #80	; 0x50
   26c1e:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   26c20:	2302      	movs	r3, #2
	event_handler_list_dispatch(&evt);
   26c22:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_EDRX_UPDATE;
   26c24:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   26c28:	f000 fc5e 	bl	274e8 <event_handler_list_dispatch>
   26c2c:	e7f6      	b.n	26c1c <at_handler_cedrxp+0x30>
   26c2e:	bf00      	nop
   26c30:	00038e50 	.word	0x00038e50
   26c34:	00034a90 	.word	0x00034a90

00026c38 <at_handler_cscon>:
{
   26c38:	b510      	push	{r4, lr}
   26c3a:	4604      	mov	r4, r0
   26c3c:	b094      	sub	sp, #80	; 0x50
	struct lte_lc_evt evt = {0};
   26c3e:	2240      	movs	r2, #64	; 0x40
   26c40:	2100      	movs	r1, #0
   26c42:	a804      	add	r0, sp, #16
   26c44:	f00d f813 	bl	33c6e <memset>
	err = parse_rrc_mode(response, &evt.rrc_mode, AT_CSCON_RRC_MODE_INDEX);
   26c48:	2201      	movs	r2, #1
   26c4a:	4620      	mov	r0, r4
   26c4c:	a906      	add	r1, sp, #24
   26c4e:	f000 fd2d 	bl	276ac <parse_rrc_mode>
	if (err) {
   26c52:	b160      	cbz	r0, 26c6e <at_handler_cscon+0x36>
		LOG_ERR("Can't parse signalling mode, error: %d", err);
   26c54:	4b09      	ldr	r3, [pc, #36]	; (26c7c <at_handler_cscon+0x44>)
   26c56:	9003      	str	r0, [sp, #12]
   26c58:	9302      	str	r3, [sp, #8]
   26c5a:	2300      	movs	r3, #0
   26c5c:	2201      	movs	r2, #1
   26c5e:	4618      	mov	r0, r3
   26c60:	e9cd 3300 	strd	r3, r3, [sp]
   26c64:	4906      	ldr	r1, [pc, #24]	; (26c80 <at_handler_cscon+0x48>)
   26c66:	f00b f8ad 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
}
   26c6a:	b014      	add	sp, #80	; 0x50
   26c6c:	bd10      	pop	{r4, pc}
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   26c6e:	2303      	movs	r3, #3
	event_handler_list_dispatch(&evt);
   26c70:	a804      	add	r0, sp, #16
	evt.type = LTE_LC_EVT_RRC_UPDATE;
   26c72:	f88d 3010 	strb.w	r3, [sp, #16]
	event_handler_list_dispatch(&evt);
   26c76:	f000 fc37 	bl	274e8 <event_handler_list_dispatch>
   26c7a:	e7f6      	b.n	26c6a <at_handler_cscon+0x32>
   26c7c:	00038e6c 	.word	0x00038e6c
   26c80:	00034a90 	.word	0x00034a90

00026c84 <lte_lc_register_handler>:

	return err ? -EFAULT : 0;
}

void lte_lc_register_handler(lte_lc_evt_handler_t handler)
{
   26c84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (handler == NULL) {
   26c86:	4603      	mov	r3, r0
   26c88:	b950      	cbnz	r0, 26ca0 <lte_lc_register_handler+0x1c>
		LOG_INF("NULL as a handler received: Nothing to be done.\n"
   26c8a:	4a08      	ldr	r2, [pc, #32]	; (26cac <lte_lc_register_handler+0x28>)
   26c8c:	4908      	ldr	r1, [pc, #32]	; (26cb0 <lte_lc_register_handler+0x2c>)
   26c8e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   26c92:	9000      	str	r0, [sp, #0]
   26c94:	2203      	movs	r2, #3
   26c96:	f00b f895 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
			"The handler can be deregistered using lte_lc_deregister_handler()");
		return;
	}

	event_handler_list_append_handler(handler);
}
   26c9a:	b005      	add	sp, #20
   26c9c:	f85d fb04 	ldr.w	pc, [sp], #4
   26ca0:	b005      	add	sp, #20
   26ca2:	f85d eb04 	ldr.w	lr, [sp], #4
	event_handler_list_append_handler(handler);
   26ca6:	f000 bbef 	b.w	27488 <event_handler_list_append_handler>
   26caa:	bf00      	nop
   26cac:	00038e93 	.word	0x00038e93
   26cb0:	00034a90 	.word	0x00034a90

00026cb4 <lte_lc_psm_req>:

	return 0;
}

int lte_lc_psm_req(bool enable)
{
   26cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (enable) {
   26cb6:	2800      	cmp	r0, #0
   26cb8:	d035      	beq.n	26d26 <lte_lc_psm_req+0x72>
		if (strlen(psm_param_rptau) == 8 &&
   26cba:	481c      	ldr	r0, [pc, #112]	; (26d2c <lte_lc_psm_req+0x78>)
   26cbc:	f7f6 f9f0 	bl	1d0a0 <strlen>
   26cc0:	2808      	cmp	r0, #8
   26cc2:	d11a      	bne.n	26cfa <lte_lc_psm_req+0x46>
		    strlen(psm_param_rat) == 8) {
   26cc4:	481a      	ldr	r0, [pc, #104]	; (26d30 <lte_lc_psm_req+0x7c>)
   26cc6:	f7f6 f9eb 	bl	1d0a0 <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   26cca:	2808      	cmp	r0, #8
   26ccc:	d115      	bne.n	26cfa <lte_lc_psm_req+0x46>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\",\"%s\"",
   26cce:	4a18      	ldr	r2, [pc, #96]	; (26d30 <lte_lc_psm_req+0x7c>)
   26cd0:	4916      	ldr	r1, [pc, #88]	; (26d2c <lte_lc_psm_req+0x78>)
   26cd2:	4818      	ldr	r0, [pc, #96]	; (26d34 <lte_lc_psm_req+0x80>)
   26cd4:	f004 fa40 	bl	2b158 <nrf_modem_at_printf>
		}
	} else {
		err = nrf_modem_at_printf(psm_disable);
	}

	if (err) {
   26cd8:	b160      	cbz	r0, 26cf4 <lte_lc_psm_req+0x40>
		LOG_ERR("nrf_modem_at_printf failed, reported error: %d", err);
   26cda:	4b17      	ldr	r3, [pc, #92]	; (26d38 <lte_lc_psm_req+0x84>)
   26cdc:	9003      	str	r0, [sp, #12]
   26cde:	9302      	str	r3, [sp, #8]
   26ce0:	2300      	movs	r3, #0
   26ce2:	2201      	movs	r2, #1
   26ce4:	4618      	mov	r0, r3
   26ce6:	e9cd 3300 	strd	r3, r3, [sp]
   26cea:	4914      	ldr	r1, [pc, #80]	; (26d3c <lte_lc_psm_req+0x88>)
   26cec:	f00b f86a 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   26cf0:	f06f 000d 	mvn.w	r0, #13
	}

	return 0;
}
   26cf4:	b005      	add	sp, #20
   26cf6:	f85d fb04 	ldr.w	pc, [sp], #4
		} else if (strlen(psm_param_rptau) == 8) {
   26cfa:	480c      	ldr	r0, [pc, #48]	; (26d2c <lte_lc_psm_req+0x78>)
   26cfc:	f7f6 f9d0 	bl	1d0a0 <strlen>
   26d00:	2808      	cmp	r0, #8
   26d02:	d104      	bne.n	26d0e <lte_lc_psm_req+0x5a>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,\"%s\"", psm_param_rptau);
   26d04:	4909      	ldr	r1, [pc, #36]	; (26d2c <lte_lc_psm_req+0x78>)
   26d06:	480e      	ldr	r0, [pc, #56]	; (26d40 <lte_lc_psm_req+0x8c>)
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   26d08:	f004 fa26 	bl	2b158 <nrf_modem_at_printf>
   26d0c:	e7e4      	b.n	26cd8 <lte_lc_psm_req+0x24>
		} else if (strlen(psm_param_rat) == 8) {
   26d0e:	4808      	ldr	r0, [pc, #32]	; (26d30 <lte_lc_psm_req+0x7c>)
   26d10:	f7f6 f9c6 	bl	1d0a0 <strlen>
   26d14:	2808      	cmp	r0, #8
   26d16:	d102      	bne.n	26d1e <lte_lc_psm_req+0x6a>
			err = nrf_modem_at_printf("AT+CPSMS=1,,,,\"%s\"", psm_param_rat);
   26d18:	4905      	ldr	r1, [pc, #20]	; (26d30 <lte_lc_psm_req+0x7c>)
   26d1a:	480a      	ldr	r0, [pc, #40]	; (26d44 <lte_lc_psm_req+0x90>)
   26d1c:	e7f4      	b.n	26d08 <lte_lc_psm_req+0x54>
			err = nrf_modem_at_printf("AT+CPSMS=1");
   26d1e:	480a      	ldr	r0, [pc, #40]	; (26d48 <lte_lc_psm_req+0x94>)
		err = nrf_modem_at_printf(psm_disable);
   26d20:	f004 fa1a 	bl	2b158 <nrf_modem_at_printf>
   26d24:	e7d8      	b.n	26cd8 <lte_lc_psm_req+0x24>
   26d26:	4809      	ldr	r0, [pc, #36]	; (26d4c <lte_lc_psm_req+0x98>)
   26d28:	e7fa      	b.n	26d20 <lte_lc_psm_req+0x6c>
   26d2a:	bf00      	nop
   26d2c:	2000c84f 	.word	0x2000c84f
   26d30:	2000c846 	.word	0x2000c846
   26d34:	00038f05 	.word	0x00038f05
   26d38:	00038f4c 	.word	0x00038f4c
   26d3c:	00034a90 	.word	0x00034a90
   26d40:	00038f1c 	.word	0x00038f1c
   26d44:	00038f2e 	.word	0x00038f2e
   26d48:	00038f41 	.word	0x00038f41
   26d4c:	00039353 	.word	0x00039353

00026d50 <lte_lc_psm_get>:

int lte_lc_psm_get(int *tau, int *active_time)
{
   26d50:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct lte_lc_psm_cfg psm_cfg;
	char active_time_str[9] = {0};
   26d52:	2400      	movs	r4, #0
{
   26d54:	b091      	sub	sp, #68	; 0x44
   26d56:	460d      	mov	r5, r1
	char tau_legacy_str[9] = {0};
	static char response[160] = { 0 };
	const char ch = ',';
	char *comma_ptr;

	if ((tau == NULL) || (active_time == NULL)) {
   26d58:	4606      	mov	r6, r0
	char active_time_str[9] = {0};
   26d5a:	e9cd 4407 	strd	r4, r4, [sp, #28]
	char tau_ext_str[9] = {0};
   26d5e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
	char tau_legacy_str[9] = {0};
   26d62:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
	char active_time_str[9] = {0};
   26d66:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
	char tau_ext_str[9] = {0};
   26d6a:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
	char tau_legacy_str[9] = {0};
   26d6e:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
	if ((tau == NULL) || (active_time == NULL)) {
   26d72:	2800      	cmp	r0, #0
   26d74:	d06b      	beq.n	26e4e <lte_lc_psm_get+0xfe>
   26d76:	2900      	cmp	r1, #0
   26d78:	d069      	beq.n	26e4e <lte_lc_psm_get+0xfe>
	 * <Periodic-TAUext>,<Periodic-TAU>]
	 * We need to parse the three last parameters, Active-Time, Periodic-TAU-ext and
	 * Periodic-TAU. N.B. Periodic-TAU will not be present on modem firmwares < 1.2.0.
	 */

	response[0] = '\0';
   26d7a:	4f36      	ldr	r7, [pc, #216]	; (26e54 <lte_lc_psm_get+0x104>)

	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   26d7c:	21a0      	movs	r1, #160	; 0xa0
   26d7e:	4638      	mov	r0, r7
   26d80:	4a35      	ldr	r2, [pc, #212]	; (26e58 <lte_lc_psm_get+0x108>)
	response[0] = '\0';
   26d82:	703c      	strb	r4, [r7, #0]
	err = nrf_modem_at_cmd(response, sizeof(response), "AT%%XMONITOR");
   26d84:	f004 fa30 	bl	2b1e8 <nrf_modem_at_cmd>
	if (err) {
   26d88:	b178      	cbz	r0, 26daa <lte_lc_psm_get+0x5a>
		LOG_ERR("AT command failed, error: %d", err);
   26d8a:	4b34      	ldr	r3, [pc, #208]	; (26e5c <lte_lc_psm_get+0x10c>)
   26d8c:	9003      	str	r0, [sp, #12]
   26d8e:	e9cd 4301 	strd	r4, r3, [sp, #4]
   26d92:	4620      	mov	r0, r4
   26d94:	4623      	mov	r3, r4
   26d96:	9400      	str	r4, [sp, #0]
   26d98:	2201      	movs	r2, #1
   26d9a:	4931      	ldr	r1, [pc, #196]	; (26e60 <lte_lc_psm_get+0x110>)
   26d9c:	f00b f812 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   26da0:	f06f 040d 	mvn.w	r4, #13
	*active_time = psm_cfg.active_time;

	LOG_DBG("TAU: %d sec, active time: %d sec", *tau, *active_time);

	return 0;
}
   26da4:	4620      	mov	r0, r4
   26da6:	b011      	add	sp, #68	; 0x44
   26da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	comma_ptr = strchr(response, ch);
   26daa:	212c      	movs	r1, #44	; 0x2c
   26dac:	4638      	mov	r0, r7
   26dae:	f00d f8f3 	bl	33f98 <strchr>
	if (!comma_ptr) {
   26db2:	4604      	mov	r4, r0
   26db4:	2800      	cmp	r0, #0
   26db6:	d042      	beq.n	26e3e <lte_lc_psm_get+0xee>
   26db8:	270c      	movs	r7, #12
			comma_ptr = strchr(comma_ptr + 1, ch);
   26dba:	1c60      	adds	r0, r4, #1
   26dbc:	212c      	movs	r1, #44	; 0x2c
   26dbe:	f00d f8eb 	bl	33f98 <strchr>
	for (int i = 0; i < 12; i++) {
   26dc2:	3f01      	subs	r7, #1
			comma_ptr = strchr(comma_ptr + 1, ch);
   26dc4:	4604      	mov	r4, r0
	for (int i = 0; i < 12; i++) {
   26dc6:	d12e      	bne.n	26e26 <lte_lc_psm_get+0xd6>
	if (comma_ptr) {
   26dc8:	b378      	cbz	r0, 26e2a <lte_lc_psm_get+0xda>
		strncpy(active_time_str, comma_ptr + 2, 8);
   26dca:	1c81      	adds	r1, r0, #2
   26dcc:	2208      	movs	r2, #8
   26dce:	a807      	add	r0, sp, #28
   26dd0:	f00d f90b 	bl	33fea <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   26dd4:	1c60      	adds	r0, r4, #1
   26dd6:	212c      	movs	r1, #44	; 0x2c
   26dd8:	f00d f8de 	bl	33f98 <strchr>
	if (comma_ptr) {
   26ddc:	4604      	mov	r4, r0
   26dde:	b320      	cbz	r0, 26e2a <lte_lc_psm_get+0xda>
		strncpy(tau_ext_str, comma_ptr + 2, 8);
   26de0:	1c81      	adds	r1, r0, #2
   26de2:	2208      	movs	r2, #8
   26de4:	a80a      	add	r0, sp, #40	; 0x28
   26de6:	f00d f900 	bl	33fea <strncpy>
	comma_ptr = strchr(comma_ptr + 1, ch);
   26dea:	212c      	movs	r1, #44	; 0x2c
   26dec:	1c60      	adds	r0, r4, #1
   26dee:	f00d f8d3 	bl	33f98 <strchr>
	if (comma_ptr) {
   26df2:	b120      	cbz	r0, 26dfe <lte_lc_psm_get+0xae>
		strncpy(tau_legacy_str, comma_ptr + 2, 8);
   26df4:	1c81      	adds	r1, r0, #2
   26df6:	2208      	movs	r2, #8
   26df8:	a80d      	add	r0, sp, #52	; 0x34
   26dfa:	f00d f8f6 	bl	33fea <strncpy>
	err = parse_psm(active_time_str, tau_ext_str, tau_legacy_str, &psm_cfg);
   26dfe:	ab05      	add	r3, sp, #20
   26e00:	aa0d      	add	r2, sp, #52	; 0x34
   26e02:	a90a      	add	r1, sp, #40	; 0x28
   26e04:	a807      	add	r0, sp, #28
   26e06:	f000 fbb7 	bl	27578 <parse_psm>
	if (err) {
   26e0a:	4604      	mov	r4, r0
   26e0c:	b1d0      	cbz	r0, 26e44 <lte_lc_psm_get+0xf4>
		LOG_ERR("Failed to parse PSM configuration, error: %d", err);
   26e0e:	4b15      	ldr	r3, [pc, #84]	; (26e64 <lte_lc_psm_get+0x114>)
   26e10:	9003      	str	r0, [sp, #12]
   26e12:	9302      	str	r3, [sp, #8]
   26e14:	2300      	movs	r3, #0
   26e16:	2201      	movs	r2, #1
   26e18:	4618      	mov	r0, r3
   26e1a:	e9cd 3300 	strd	r3, r3, [sp]
   26e1e:	4910      	ldr	r1, [pc, #64]	; (26e60 <lte_lc_psm_get+0x110>)
   26e20:	f00a ffd0 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		return err;
   26e24:	e7be      	b.n	26da4 <lte_lc_psm_get+0x54>
		if (comma_ptr) {
   26e26:	2c00      	cmp	r4, #0
   26e28:	d1c7      	bne.n	26dba <lte_lc_psm_get+0x6a>
			LOG_ERR("AT command parsing failed");
   26e2a:	4b0f      	ldr	r3, [pc, #60]	; (26e68 <lte_lc_psm_get+0x118>)
   26e2c:	2201      	movs	r2, #1
   26e2e:	9302      	str	r3, [sp, #8]
   26e30:	2300      	movs	r3, #0
   26e32:	490b      	ldr	r1, [pc, #44]	; (26e60 <lte_lc_psm_get+0x110>)
   26e34:	4618      	mov	r0, r3
   26e36:	e9cd 3300 	strd	r3, r3, [sp]
   26e3a:	f00a ffc3 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		return -EBADMSG;
   26e3e:	f06f 044c 	mvn.w	r4, #76	; 0x4c
   26e42:	e7af      	b.n	26da4 <lte_lc_psm_get+0x54>
	*tau = psm_cfg.tau;
   26e44:	9b05      	ldr	r3, [sp, #20]
   26e46:	6033      	str	r3, [r6, #0]
	*active_time = psm_cfg.active_time;
   26e48:	9b06      	ldr	r3, [sp, #24]
   26e4a:	602b      	str	r3, [r5, #0]
	return 0;
   26e4c:	e7aa      	b.n	26da4 <lte_lc_psm_get+0x54>
		return -EINVAL;
   26e4e:	f06f 0415 	mvn.w	r4, #21
   26e52:	e7a7      	b.n	26da4 <lte_lc_psm_get+0x54>
   26e54:	2000f6e7 	.word	0x2000f6e7
   26e58:	00038f7b 	.word	0x00038f7b
   26e5c:	00038f88 	.word	0x00038f88
   26e60:	00034a90 	.word	0x00034a90
   26e64:	00038fbf 	.word	0x00038fbf
   26e68:	00038fa5 	.word	0x00038fa5

00026e6c <at_handler_cereg>:
{
   26e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	enum lte_lc_nw_reg_status reg_status = 0;
   26e6e:	2400      	movs	r4, #0
{
   26e70:	4605      	mov	r5, r0
   26e72:	b0a7      	sub	sp, #156	; 0x9c
	struct lte_lc_evt evt = {0};
   26e74:	2240      	movs	r2, #64	; 0x40
   26e76:	2100      	movs	r1, #0
   26e78:	a816      	add	r0, sp, #88	; 0x58
   26e7a:	f00c fef8 	bl	33c6e <memset>
	struct lte_lc_cell cell = {0};
   26e7e:	2230      	movs	r2, #48	; 0x30
   26e80:	4621      	mov	r1, r4
   26e82:	a80a      	add	r0, sp, #40	; 0x28
	enum lte_lc_nw_reg_status reg_status = 0;
   26e84:	f88d 401e 	strb.w	r4, [sp, #30]
	struct lte_lc_psm_cfg psm_cfg = {0};
   26e88:	af08      	add	r7, sp, #32
	struct lte_lc_cell cell = {0};
   26e8a:	f00c fef0 	bl	33c6e <memset>
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   26e8e:	f10d 031f 	add.w	r3, sp, #31
	struct lte_lc_psm_cfg psm_cfg = {0};
   26e92:	607c      	str	r4, [r7, #4]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   26e94:	2101      	movs	r1, #1
   26e96:	9300      	str	r3, [sp, #0]
   26e98:	4628      	mov	r0, r5
   26e9a:	ab0a      	add	r3, sp, #40	; 0x28
   26e9c:	f10d 021e 	add.w	r2, sp, #30
	struct lte_lc_psm_cfg psm_cfg = {0};
   26ea0:	9408      	str	r4, [sp, #32]
	err = parse_cereg(response, true, &reg_status, &cell, &lte_mode);
   26ea2:	f000 fc61 	bl	27768 <parse_cereg>
	if (err) {
   26ea6:	b168      	cbz	r0, 26ec4 <at_handler_cereg+0x58>
		LOG_ERR("Failed to parse notification (error %d): %s",
   26ea8:	4b45      	ldr	r3, [pc, #276]	; (26fc0 <at_handler_cereg+0x154>)
   26eaa:	e9cd 0503 	strd	r0, r5, [sp, #12]
   26eae:	e9cd 4301 	strd	r4, r3, [sp, #4]
   26eb2:	2201      	movs	r2, #1
   26eb4:	4623      	mov	r3, r4
   26eb6:	4620      	mov	r0, r4
   26eb8:	4942      	ldr	r1, [pc, #264]	; (26fc4 <at_handler_cereg+0x158>)
   26eba:	9400      	str	r4, [sp, #0]
   26ebc:	f00a ff82 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
}
   26ec0:	b027      	add	sp, #156	; 0x9c
   26ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   26ec4:	f89d 301e 	ldrb.w	r3, [sp, #30]
   26ec8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   26ecc:	2b01      	cmp	r3, #1
   26ece:	d105      	bne.n	26edc <at_handler_cereg+0x70>
	if (cellid == LTE_LC_CELL_EUTRAN_ID_INVALID) {
   26ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   26ed2:	3301      	adds	r3, #1
   26ed4:	d05b      	beq.n	26f8e <at_handler_cereg+0x122>
	z_impl_k_sem_give(sem);
   26ed6:	483c      	ldr	r0, [pc, #240]	; (26fc8 <at_handler_cereg+0x15c>)
   26ed8:	f005 fb74 	bl	2c5c4 <z_impl_k_sem_give>
	if (event_handler_list_is_empty()) {
   26edc:	f000 facc 	bl	27478 <event_handler_list_is_empty>
   26ee0:	2800      	cmp	r0, #0
   26ee2:	d1ed      	bne.n	26ec0 <at_handler_cereg+0x54>
	if (reg_status != prev_reg_status) {
   26ee4:	4a39      	ldr	r2, [pc, #228]	; (26fcc <at_handler_cereg+0x160>)
   26ee6:	f89d 301e 	ldrb.w	r3, [sp, #30]
   26eea:	7811      	ldrb	r1, [r2, #0]
   26eec:	4299      	cmp	r1, r3
   26eee:	d007      	beq.n	26f00 <at_handler_cereg+0x94>
		evt.type = LTE_LC_EVT_NW_REG_STATUS;
   26ef0:	f88d 0058 	strb.w	r0, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   26ef4:	a816      	add	r0, sp, #88	; 0x58
		prev_reg_status = reg_status;
   26ef6:	7013      	strb	r3, [r2, #0]
		evt.nw_reg_status = reg_status;
   26ef8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   26efc:	f000 faf4 	bl	274e8 <event_handler_list_dispatch>
	if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   26f00:	2230      	movs	r2, #48	; 0x30
   26f02:	4933      	ldr	r1, [pc, #204]	; (26fd0 <at_handler_cereg+0x164>)
   26f04:	a80a      	add	r0, sp, #40	; 0x28
   26f06:	f00c fe82 	bl	33c0e <memcmp>
   26f0a:	b1c8      	cbz	r0, 26f40 <at_handler_cereg+0xd4>
		evt.type = LTE_LC_EVT_CELL_UPDATE;
   26f0c:	2304      	movs	r3, #4
   26f0e:	4d30      	ldr	r5, [pc, #192]	; (26fd0 <at_handler_cereg+0x164>)
   26f10:	ac0a      	add	r4, sp, #40	; 0x28
   26f12:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   26f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   26f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26f1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   26f1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26f1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   26f22:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		memcpy(&evt.cell, &cell, sizeof(struct lte_lc_cell));
   26f26:	ae18      	add	r6, sp, #96	; 0x60
   26f28:	ad0a      	add	r5, sp, #40	; 0x28
   26f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   26f2c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   26f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   26f30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   26f32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   26f36:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		event_handler_list_dispatch(&evt);
   26f3a:	a816      	add	r0, sp, #88	; 0x58
   26f3c:	f000 fad4 	bl	274e8 <event_handler_list_dispatch>
	if (lte_mode != prev_lte_mode) {
   26f40:	4a24      	ldr	r2, [pc, #144]	; (26fd4 <at_handler_cereg+0x168>)
   26f42:	f89d 301f 	ldrb.w	r3, [sp, #31]
   26f46:	7811      	ldrb	r1, [r2, #0]
   26f48:	4299      	cmp	r1, r3
   26f4a:	d008      	beq.n	26f5e <at_handler_cereg+0xf2>
		prev_lte_mode = lte_mode;
   26f4c:	7013      	strb	r3, [r2, #0]
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   26f4e:	2205      	movs	r2, #5
		event_handler_list_dispatch(&evt);
   26f50:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_LTE_MODE_UPDATE;
   26f52:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		evt.lte_mode = lte_mode;
   26f56:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		event_handler_list_dispatch(&evt);
   26f5a:	f000 fac5 	bl	274e8 <event_handler_list_dispatch>
	if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   26f5e:	f89d 401e 	ldrb.w	r4, [sp, #30]
   26f62:	f004 04fb 	and.w	r4, r4, #251	; 0xfb
   26f66:	2c01      	cmp	r4, #1
   26f68:	d1aa      	bne.n	26ec0 <at_handler_cereg+0x54>
	err = lte_lc_psm_get(&psm_cfg.tau, &psm_cfg.active_time);
   26f6a:	4638      	mov	r0, r7
   26f6c:	a909      	add	r1, sp, #36	; 0x24
   26f6e:	f7ff feef 	bl	26d50 <lte_lc_psm_get>
	if (err) {
   26f72:	b180      	cbz	r0, 26f96 <at_handler_cereg+0x12a>
		if (err != -EBADMSG) {
   26f74:	304d      	adds	r0, #77	; 0x4d
   26f76:	d0a3      	beq.n	26ec0 <at_handler_cereg+0x54>
			LOG_ERR("Failed to get PSM information");
   26f78:	4b17      	ldr	r3, [pc, #92]	; (26fd8 <at_handler_cereg+0x16c>)
   26f7a:	4622      	mov	r2, r4
   26f7c:	9302      	str	r3, [sp, #8]
   26f7e:	2300      	movs	r3, #0
   26f80:	4910      	ldr	r1, [pc, #64]	; (26fc4 <at_handler_cereg+0x158>)
   26f82:	4618      	mov	r0, r3
   26f84:	e9cd 3300 	strd	r3, r3, [sp]
   26f88:	f00a ff1c 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
   26f8c:	e798      	b.n	26ec0 <at_handler_cereg+0x54>
			reg_status = LTE_LC_NW_REG_UNKNOWN;
   26f8e:	2304      	movs	r3, #4
   26f90:	f88d 301e 	strb.w	r3, [sp, #30]
   26f94:	e7a2      	b.n	26edc <at_handler_cereg+0x70>
	if (memcmp(&psm_cfg, &prev_psm_cfg, sizeof(struct lte_lc_psm_cfg))) {
   26f96:	4d11      	ldr	r5, [pc, #68]	; (26fdc <at_handler_cereg+0x170>)
   26f98:	2208      	movs	r2, #8
   26f9a:	4629      	mov	r1, r5
   26f9c:	4638      	mov	r0, r7
   26f9e:	f00c fe36 	bl	33c0e <memcmp>
   26fa2:	2800      	cmp	r0, #0
   26fa4:	d08c      	beq.n	26ec0 <at_handler_cereg+0x54>
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   26fa6:	e897 0003 	ldmia.w	r7, {r0, r1}
   26faa:	ab18      	add	r3, sp, #96	; 0x60
   26fac:	e885 0003 	stmia.w	r5, {r0, r1}
   26fb0:	e883 0003 	stmia.w	r3, {r0, r1}
		event_handler_list_dispatch(&evt);
   26fb4:	a816      	add	r0, sp, #88	; 0x58
		evt.type = LTE_LC_EVT_PSM_UPDATE;
   26fb6:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
		event_handler_list_dispatch(&evt);
   26fba:	f000 fa95 	bl	274e8 <event_handler_list_dispatch>
   26fbe:	e77f      	b.n	26ec0 <at_handler_cereg+0x54>
   26fc0:	00038fec 	.word	0x00038fec
   26fc4:	00034a90 	.word	0x00034a90
   26fc8:	2000d4a0 	.word	0x2000d4a0
   26fcc:	2000f6dc 	.word	0x2000f6dc
   26fd0:	2000ce48 	.word	0x2000ce48
   26fd4:	2000f6db 	.word	0x2000f6db
   26fd8:	00039018 	.word	0x00039018
   26fdc:	2000d4b8 	.word	0x2000d4b8

00026fe0 <lte_lc_edrx_req>:
}

int lte_lc_edrx_req(bool enable)
{
	int err;
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   26fe0:	2104      	movs	r1, #4
   26fe2:	2305      	movs	r3, #5
{
   26fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26fe8:	b089      	sub	sp, #36	; 0x24

	if (!enable) {
   26fea:	4604      	mov	r4, r0
	int actt[] = {AT_CEDRXS_ACTT_WB, AT_CEDRXS_ACTT_NB};
   26fec:	e9cd 1306 	strd	r1, r3, [sp, #24]
	if (!enable) {
   26ff0:	b958      	cbnz	r0, 2700a <lte_lc_edrx_req+0x2a>
		err = nrf_modem_at_printf(edrx_disable);
   26ff2:	4829      	ldr	r0, [pc, #164]	; (27098 <lte_lc_edrx_req+0xb8>)
   26ff4:	f004 f8b0 	bl	2b158 <nrf_modem_at_printf>
		if (err) {
   26ff8:	2800      	cmp	r0, #0
   26ffa:	d04b      	beq.n	27094 <lte_lc_edrx_req+0xb4>
			LOG_ERR("Failed to disable eDRX, reported error: %d", err);
   26ffc:	4b27      	ldr	r3, [pc, #156]	; (2709c <lte_lc_edrx_req+0xbc>)
   26ffe:	9003      	str	r0, [sp, #12]
			continue;
		}

		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
		if (err) {
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   27000:	e9cd 4301 	strd	r4, r3, [sp, #4]
   27004:	9400      	str	r4, [sp, #0]
   27006:	4623      	mov	r3, r4
   27008:	e024      	b.n	27054 <lte_lc_edrx_req+0x74>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   2700a:	2500      	movs	r5, #0
					edrx_param_ltem : edrx_param_nbiot;
   2700c:	4f24      	ldr	r7, [pc, #144]	; (270a0 <lte_lc_edrx_req+0xc0>)
   2700e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 270c0 <lte_lc_edrx_req+0xe0>
   27012:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 270c4 <lte_lc_edrx_req+0xe4>
   27016:	ae06      	add	r6, sp, #24
		char *edrx_param = (actt[i] == AT_CEDRXS_ACTT_WB) ?
   27018:	f856 ab04 	ldr.w	sl, [r6], #4
					edrx_param_ltem : edrx_param_nbiot;
   2701c:	4b21      	ldr	r3, [pc, #132]	; (270a4 <lte_lc_edrx_req+0xc4>)
   2701e:	f1ba 0f04 	cmp.w	sl, #4
   27022:	bf0c      	ite	eq
   27024:	463a      	moveq	r2, r7
   27026:	4642      	movne	r2, r8
		if (strlen(edrx_param) == 4) {
   27028:	4610      	mov	r0, r2
					edrx_param_ltem : edrx_param_nbiot;
   2702a:	bf0c      	ite	eq
   2702c:	46cb      	moveq	fp, r9
   2702e:	469b      	movne	fp, r3
		if (strlen(edrx_param) == 4) {
   27030:	9205      	str	r2, [sp, #20]
   27032:	f7f6 f835 	bl	1d0a0 <strlen>
   27036:	2804      	cmp	r0, #4
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   27038:	4651      	mov	r1, sl
		if (strlen(edrx_param) == 4) {
   2703a:	9a05      	ldr	r2, [sp, #20]
   2703c:	d116      	bne.n	2706c <lte_lc_edrx_req+0x8c>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d,\"%s\"", actt[i], edrx_param);
   2703e:	481a      	ldr	r0, [pc, #104]	; (270a8 <lte_lc_edrx_req+0xc8>)
   27040:	f004 f88a 	bl	2b158 <nrf_modem_at_printf>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   27044:	4604      	mov	r4, r0
		if (err) {
   27046:	b1a8      	cbz	r0, 27074 <lte_lc_edrx_req+0x94>
			LOG_ERR("Failed to enable eDRX, reported error: %d", err);
   27048:	4b18      	ldr	r3, [pc, #96]	; (270ac <lte_lc_edrx_req+0xcc>)
   2704a:	9003      	str	r0, [sp, #12]
   2704c:	9302      	str	r3, [sp, #8]
   2704e:	2300      	movs	r3, #0
   27050:	e9cd 3300 	strd	r3, r3, [sp]
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   27054:	4618      	mov	r0, r3
   27056:	2201      	movs	r2, #1
   27058:	4915      	ldr	r1, [pc, #84]	; (270b0 <lte_lc_edrx_req+0xd0>)
   2705a:	f00a feb3 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
   2705e:	f06f 000d 	mvn.w	r0, #13
		}
	}

	return 0;
}
   27062:	b009      	add	sp, #36	; 0x24
   27064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27068:	2501      	movs	r5, #1
   2706a:	e7d5      	b.n	27018 <lte_lc_edrx_req+0x38>
			err = nrf_modem_at_printf("AT+CEDRXS=2,%d", actt[i]);
   2706c:	4811      	ldr	r0, [pc, #68]	; (270b4 <lte_lc_edrx_req+0xd4>)
   2706e:	f004 f873 	bl	2b158 <nrf_modem_at_printf>
   27072:	e7e7      	b.n	27044 <lte_lc_edrx_req+0x64>
		if (strlen(ptw_param) != 4) {
   27074:	4658      	mov	r0, fp
   27076:	f7f6 f813 	bl	1d0a0 <strlen>
   2707a:	2804      	cmp	r0, #4
   2707c:	d108      	bne.n	27090 <lte_lc_edrx_req+0xb0>
		err = nrf_modem_at_printf("AT%%XPTW=%d,\"%s\"", actt[i], ptw_param);
   2707e:	465a      	mov	r2, fp
   27080:	4651      	mov	r1, sl
   27082:	480d      	ldr	r0, [pc, #52]	; (270b8 <lte_lc_edrx_req+0xd8>)
   27084:	f004 f868 	bl	2b158 <nrf_modem_at_printf>
		if (err) {
   27088:	b110      	cbz	r0, 27090 <lte_lc_edrx_req+0xb0>
			LOG_ERR("Failed to request PTW, reported error: %d", err);
   2708a:	4b0c      	ldr	r3, [pc, #48]	; (270bc <lte_lc_edrx_req+0xdc>)
   2708c:	9003      	str	r0, [sp, #12]
   2708e:	e7b7      	b.n	27000 <lte_lc_edrx_req+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(actt); i++) {
   27090:	2d00      	cmp	r5, #0
   27092:	d0e9      	beq.n	27068 <lte_lc_edrx_req+0x88>
		return 0;
   27094:	2000      	movs	r0, #0
   27096:	e7e4      	b.n	27062 <lte_lc_edrx_req+0x82>
   27098:	00039347 	.word	0x00039347
   2709c:	00039036 	.word	0x00039036
   270a0:	2000c83c 	.word	0x2000c83c
   270a4:	2000f6e2 	.word	0x2000f6e2
   270a8:	00039061 	.word	0x00039061
   270ac:	00039084 	.word	0x00039084
   270b0:	00034a90 	.word	0x00034a90
   270b4:	00039075 	.word	0x00039075
   270b8:	000390ae 	.word	0x000390ae
   270bc:	000390bf 	.word	0x000390bf
   270c0:	2000c841 	.word	0x2000c841
   270c4:	2000f6dd 	.word	0x2000f6dd

000270c8 <lte_lc_system_mode_set>:
	return 0;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode,
			   enum lte_lc_system_mode_preference preference)
{
   270c8:	b530      	push	{r4, r5, lr}
	int err;

	switch (mode) {
   270ca:	2807      	cmp	r0, #7
{
   270cc:	4605      	mov	r5, r0
   270ce:	460c      	mov	r4, r1
   270d0:	b085      	sub	sp, #20
	switch (mode) {
   270d2:	d90e      	bls.n	270f2 <lte_lc_system_mode_set+0x2a>
	case LTE_LC_SYSTEM_MODE_GPS:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT:
	case LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested: %d", mode);
   270d4:	4b19      	ldr	r3, [pc, #100]	; (2713c <lte_lc_system_mode_set+0x74>)
   270d6:	9003      	str	r0, [sp, #12]
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT:
	case LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO:
	case LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO:
		break;
	default:
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   270d8:	9302      	str	r3, [sp, #8]
   270da:	2300      	movs	r3, #0
   270dc:	2201      	movs	r2, #1
   270de:	4618      	mov	r0, r3
   270e0:	e9cd 3300 	strd	r3, r3, [sp]
   270e4:	4916      	ldr	r1, [pc, #88]	; (27140 <lte_lc_system_mode_set+0x78>)
   270e6:	f00a fe6d 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   270ea:	f06f 0015 	mvn.w	r0, #21
	sys_mode_target = mode;
	mode_pref_current = preference;
	mode_pref_target = preference;

	return 0;
}
   270ee:	b005      	add	sp, #20
   270f0:	bd30      	pop	{r4, r5, pc}
	switch (preference) {
   270f2:	2904      	cmp	r1, #4
   270f4:	d902      	bls.n	270fc <lte_lc_system_mode_set+0x34>
		LOG_ERR("Invalid LTE preference requested: %d", preference);
   270f6:	4b13      	ldr	r3, [pc, #76]	; (27144 <lte_lc_system_mode_set+0x7c>)
   270f8:	9103      	str	r1, [sp, #12]
   270fa:	e7ed      	b.n	270d8 <lte_lc_system_mode_set+0x10>
	err = nrf_modem_at_printf("AT%%XSYSTEMMODE=%s,%c",
   270fc:	4b12      	ldr	r3, [pc, #72]	; (27148 <lte_lc_system_mode_set+0x80>)
   270fe:	5c5a      	ldrb	r2, [r3, r1]
   27100:	4b12      	ldr	r3, [pc, #72]	; (2714c <lte_lc_system_mode_set+0x84>)
   27102:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
   27106:	4812      	ldr	r0, [pc, #72]	; (27150 <lte_lc_system_mode_set+0x88>)
   27108:	f004 f826 	bl	2b158 <nrf_modem_at_printf>
	if (err) {
   2710c:	b168      	cbz	r0, 2712a <lte_lc_system_mode_set+0x62>
		LOG_ERR("Could not send AT command, error: %d", err);
   2710e:	4b11      	ldr	r3, [pc, #68]	; (27154 <lte_lc_system_mode_set+0x8c>)
   27110:	9003      	str	r0, [sp, #12]
   27112:	9302      	str	r3, [sp, #8]
   27114:	2300      	movs	r3, #0
   27116:	2201      	movs	r2, #1
   27118:	4618      	mov	r0, r3
   2711a:	e9cd 3300 	strd	r3, r3, [sp]
   2711e:	4908      	ldr	r1, [pc, #32]	; (27140 <lte_lc_system_mode_set+0x78>)
   27120:	f00a fe50 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   27124:	f06f 000d 	mvn.w	r0, #13
   27128:	e7e1      	b.n	270ee <lte_lc_system_mode_set+0x26>
	sys_mode_current = mode;
   2712a:	4b0b      	ldr	r3, [pc, #44]	; (27158 <lte_lc_system_mode_set+0x90>)
   2712c:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   2712e:	4b0b      	ldr	r3, [pc, #44]	; (2715c <lte_lc_system_mode_set+0x94>)
   27130:	701d      	strb	r5, [r3, #0]
	mode_pref_current = preference;
   27132:	4b0b      	ldr	r3, [pc, #44]	; (27160 <lte_lc_system_mode_set+0x98>)
   27134:	701c      	strb	r4, [r3, #0]
	mode_pref_target = preference;
   27136:	4b0b      	ldr	r3, [pc, #44]	; (27164 <lte_lc_system_mode_set+0x9c>)
   27138:	701c      	strb	r4, [r3, #0]
	return 0;
   2713a:	e7d8      	b.n	270ee <lte_lc_system_mode_set+0x26>
   2713c:	000390e9 	.word	0x000390e9
   27140:	00034a90 	.word	0x00034a90
   27144:	0003910b 	.word	0x0003910b
   27148:	0003935d 	.word	0x0003935d
   2714c:	00035010 	.word	0x00035010
   27150:	00039130 	.word	0x00039130
   27154:	00039146 	.word	0x00039146
   27158:	2000f787 	.word	0x2000f787
   2715c:	2000c858 	.word	0x2000c858
   27160:	2000f6d9 	.word	0x2000f6d9
   27164:	2000f6da 	.word	0x2000f6da

00027168 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode,
			   enum lte_lc_system_mode_preference *preference)
{
   27168:	b570      	push	{r4, r5, r6, lr}
	int err;
	int mode_bitmask = 0;
	int ltem_mode = 0;
   2716a:	2600      	movs	r6, #0
{
   2716c:	b088      	sub	sp, #32
   2716e:	460c      	mov	r4, r1
	int nbiot_mode = 0;
	int gps_mode = 0;
	int mode_preference = 0;

	if (mode == NULL) {
   27170:	4605      	mov	r5, r0
	int nbiot_mode = 0;
   27172:	e9cd 6604 	strd	r6, r6, [sp, #16]
	int mode_preference = 0;
   27176:	e9cd 6606 	strd	r6, r6, [sp, #24]
	if (mode == NULL) {
   2717a:	2800      	cmp	r0, #0
   2717c:	d079      	beq.n	27272 <lte_lc_system_mode_get+0x10a>
		return -EINVAL;
	}

	/* It's expected to have all 4 arguments matched */
	err = nrf_modem_at_scanf(AT_XSYSTEMMODE_READ, "%%XSYSTEMMODE: %d,%d,%d,%d",
   2717e:	ab07      	add	r3, sp, #28
   27180:	9301      	str	r3, [sp, #4]
   27182:	ab06      	add	r3, sp, #24
   27184:	9300      	str	r3, [sp, #0]
   27186:	493c      	ldr	r1, [pc, #240]	; (27278 <lte_lc_system_mode_get+0x110>)
   27188:	483c      	ldr	r0, [pc, #240]	; (2727c <lte_lc_system_mode_get+0x114>)
   2718a:	ab05      	add	r3, sp, #20
   2718c:	aa04      	add	r2, sp, #16
   2718e:	f004 f8c7 	bl	2b320 <nrf_modem_at_scanf>
				 &ltem_mode, &nbiot_mode, &gps_mode, &mode_preference);
	if (err != 4) {
   27192:	2804      	cmp	r0, #4
   27194:	d00b      	beq.n	271ae <lte_lc_system_mode_get+0x46>
		LOG_ERR("Failed to get system mode, error: %d", err);
   27196:	4b3a      	ldr	r3, [pc, #232]	; (27280 <lte_lc_system_mode_get+0x118>)
   27198:	9003      	str	r0, [sp, #12]
   2719a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   2719e:	9600      	str	r6, [sp, #0]
			break;
		case 4:
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
			break;
		default:
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   271a0:	2300      	movs	r3, #0
   271a2:	2201      	movs	r2, #1
   271a4:	4618      	mov	r0, r3
   271a6:	4937      	ldr	r1, [pc, #220]	; (27284 <lte_lc_system_mode_get+0x11c>)
   271a8:	f00a fe0c 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
			return -EFAULT;
   271ac:	e040      	b.n	27230 <lte_lc_system_mode_get+0xc8>
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   271ae:	9b04      	ldr	r3, [sp, #16]
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   271b0:	9a05      	ldr	r2, [sp, #20]
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   271b2:	2b00      	cmp	r3, #0
   271b4:	bf14      	ite	ne
   271b6:	2302      	movne	r3, #2
   271b8:	2300      	moveq	r3, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   271ba:	2a00      	cmp	r2, #0
   271bc:	bf14      	ite	ne
   271be:	2204      	movne	r2, #4
   271c0:	2200      	moveq	r2, #0
	mode_bitmask = (ltem_mode ? BIT(AT_XSYSTEMMODE_READ_LTEM_INDEX) : 0) |
   271c2:	4313      	orrs	r3, r2
		       (gps_mode ? BIT(AT_XSYSTEMMODE_READ_GPS_INDEX) : 0);
   271c4:	9a06      	ldr	r2, [sp, #24]
   271c6:	2a00      	cmp	r2, #0
   271c8:	bf14      	ite	ne
   271ca:	2208      	movne	r2, #8
   271cc:	2200      	moveq	r2, #0
		       (nbiot_mode ? BIT(AT_XSYSTEMMODE_READ_NBIOT_INDEX) : 0) |
   271ce:	4313      	orrs	r3, r2
	switch (mode_bitmask) {
   271d0:	2b0e      	cmp	r3, #14
   271d2:	d823      	bhi.n	2721c <lte_lc_system_mode_get+0xb4>
   271d4:	e8df f003 	tbb	[pc, r3]
   271d8:	22132208 	.word	0x22132208
   271dc:	221e2216 	.word	0x221e2216
   271e0:	221a2218 	.word	0x221a2218
   271e4:	221c      	.short	0x221c
   271e6:	20          	.byte	0x20
   271e7:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   271e8:	702e      	strb	r6, [r5, #0]
	if (preference != NULL) {
   271ea:	b33c      	cbz	r4, 2723c <lte_lc_system_mode_get+0xd4>
		switch (mode_preference) {
   271ec:	9a07      	ldr	r2, [sp, #28]
   271ee:	2300      	movs	r3, #0
   271f0:	2a04      	cmp	r2, #4
   271f2:	d838      	bhi.n	27266 <lte_lc_system_mode_get+0xfe>
   271f4:	e8df f002 	tbb	[pc, r2]
   271f8:	33312021 	.word	0x33312021
   271fc:	35          	.byte	0x35
   271fd:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   271fe:	2301      	movs	r3, #1
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   27200:	702b      	strb	r3, [r5, #0]
		break;
   27202:	e7f2      	b.n	271ea <lte_lc_system_mode_get+0x82>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   27204:	2302      	movs	r3, #2
   27206:	e7fb      	b.n	27200 <lte_lc_system_mode_get+0x98>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   27208:	2303      	movs	r3, #3
   2720a:	e7f9      	b.n	27200 <lte_lc_system_mode_get+0x98>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   2720c:	2304      	movs	r3, #4
   2720e:	e7f7      	b.n	27200 <lte_lc_system_mode_get+0x98>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   27210:	2305      	movs	r3, #5
   27212:	e7f5      	b.n	27200 <lte_lc_system_mode_get+0x98>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT;
   27214:	2306      	movs	r3, #6
   27216:	e7f3      	b.n	27200 <lte_lc_system_mode_get+0x98>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_NBIOT_GPS;
   27218:	2307      	movs	r3, #7
   2721a:	e7f1      	b.n	27200 <lte_lc_system_mode_get+0x98>
		LOG_ERR("Invalid system mode, assuming parsing error");
   2721c:	4b1a      	ldr	r3, [pc, #104]	; (27288 <lte_lc_system_mode_get+0x120>)
   2721e:	2201      	movs	r2, #1
   27220:	9302      	str	r3, [sp, #8]
   27222:	2300      	movs	r3, #0
   27224:	4917      	ldr	r1, [pc, #92]	; (27284 <lte_lc_system_mode_get+0x11c>)
   27226:	4618      	mov	r0, r3
   27228:	e9cd 3300 	strd	r3, r3, [sp]
   2722c:	f00a fdca 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   27230:	f06f 000d 	mvn.w	r0, #13
			mode_pref_current, *preference);
		mode_pref_current = *preference;
	}

	return 0;
}
   27234:	b008      	add	sp, #32
   27236:	bd70      	pop	{r4, r5, r6, pc}
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM;
   27238:	2301      	movs	r3, #1
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   2723a:	7023      	strb	r3, [r4, #0]
	if (sys_mode_current != *mode) {
   2723c:	4b13      	ldr	r3, [pc, #76]	; (2728c <lte_lc_system_mode_get+0x124>)
   2723e:	782a      	ldrb	r2, [r5, #0]
   27240:	7819      	ldrb	r1, [r3, #0]
   27242:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   27244:	bf18      	it	ne
   27246:	701a      	strbne	r2, [r3, #0]
	if ((preference != NULL) && (mode_pref_current != *preference)) {
   27248:	b12c      	cbz	r4, 27256 <lte_lc_system_mode_get+0xee>
   2724a:	4b11      	ldr	r3, [pc, #68]	; (27290 <lte_lc_system_mode_get+0x128>)
   2724c:	7822      	ldrb	r2, [r4, #0]
   2724e:	7819      	ldrb	r1, [r3, #0]
   27250:	4291      	cmp	r1, r2
   27252:	d000      	beq.n	27256 <lte_lc_system_mode_get+0xee>
		mode_pref_current = *preference;
   27254:	701a      	strb	r2, [r3, #0]
	return 0;
   27256:	2000      	movs	r0, #0
   27258:	e7ec      	b.n	27234 <lte_lc_system_mode_get+0xcc>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT;
   2725a:	2302      	movs	r3, #2
   2725c:	e7ed      	b.n	2723a <lte_lc_system_mode_get+0xd2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_LTEM_PLMN_PRIO;
   2725e:	2303      	movs	r3, #3
   27260:	e7eb      	b.n	2723a <lte_lc_system_mode_get+0xd2>
			*preference = LTE_LC_SYSTEM_MODE_PREFER_NBIOT_PLMN_PRIO;
   27262:	2304      	movs	r3, #4
   27264:	e7e9      	b.n	2723a <lte_lc_system_mode_get+0xd2>
			LOG_ERR("Unsupported LTE preference: %d", mode_preference);
   27266:	9203      	str	r2, [sp, #12]
   27268:	4a0a      	ldr	r2, [pc, #40]	; (27294 <lte_lc_system_mode_get+0x12c>)
   2726a:	9300      	str	r3, [sp, #0]
   2726c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   27270:	e796      	b.n	271a0 <lte_lc_system_mode_get+0x38>
		return -EINVAL;
   27272:	f06f 0015 	mvn.w	r0, #21
   27276:	e7dd      	b.n	27234 <lte_lc_system_mode_get+0xcc>
   27278:	0003916b 	.word	0x0003916b
   2727c:	00039186 	.word	0x00039186
   27280:	00039196 	.word	0x00039196
   27284:	00034a90 	.word	0x00034a90
   27288:	000391bb 	.word	0x000391bb
   2728c:	2000f787 	.word	0x2000f787
   27290:	2000f6d9 	.word	0x2000f6d9
   27294:	000391e7 	.word	0x000391e7

00027298 <init_and_config.part.0>:
static int init_and_config(void)
   27298:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	err = lte_lc_system_mode_get(&sys_mode_current, &mode_pref_current);
   2729a:	4d1f      	ldr	r5, [pc, #124]	; (27318 <init_and_config.part.0+0x80>)
   2729c:	4e1f      	ldr	r6, [pc, #124]	; (2731c <init_and_config.part.0+0x84>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   2729e:	2201      	movs	r2, #1
   272a0:	2100      	movs	r1, #0
   272a2:	481f      	ldr	r0, [pc, #124]	; (27320 <init_and_config.part.0+0x88>)
   272a4:	f00c f8f4 	bl	33490 <z_impl_k_sem_init>
   272a8:	4629      	mov	r1, r5
   272aa:	4630      	mov	r0, r6
   272ac:	f7ff ff5c 	bl	27168 <lte_lc_system_mode_get>
	if (err) {
   272b0:	4604      	mov	r4, r0
   272b2:	b168      	cbz	r0, 272d0 <init_and_config.part.0+0x38>
		LOG_ERR("Could not get current system mode, error: %d", err);
   272b4:	4b1b      	ldr	r3, [pc, #108]	; (27324 <init_and_config.part.0+0x8c>)
   272b6:	9003      	str	r0, [sp, #12]
			LOG_ERR("Could not set system mode, error: %d", err);
   272b8:	9302      	str	r3, [sp, #8]
   272ba:	2300      	movs	r3, #0
   272bc:	2201      	movs	r2, #1
   272be:	4618      	mov	r0, r3
   272c0:	e9cd 3300 	strd	r3, r3, [sp]
   272c4:	4918      	ldr	r1, [pc, #96]	; (27328 <init_and_config.part.0+0x90>)
   272c6:	f00a fd7d 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
}
   272ca:	4620      	mov	r0, r4
   272cc:	b004      	add	sp, #16
   272ce:	bd70      	pop	{r4, r5, r6, pc}
	if ((sys_mode_current != sys_mode_target) ||
   272d0:	4b16      	ldr	r3, [pc, #88]	; (2732c <init_and_config.part.0+0x94>)
   272d2:	7818      	ldrb	r0, [r3, #0]
	    (mode_pref_current != mode_pref_target)) {
   272d4:	4b16      	ldr	r3, [pc, #88]	; (27330 <init_and_config.part.0+0x98>)
   272d6:	7819      	ldrb	r1, [r3, #0]
	if ((sys_mode_current != sys_mode_target) ||
   272d8:	7833      	ldrb	r3, [r6, #0]
   272da:	4283      	cmp	r3, r0
   272dc:	d102      	bne.n	272e4 <init_and_config.part.0+0x4c>
   272de:	782b      	ldrb	r3, [r5, #0]
   272e0:	428b      	cmp	r3, r1
   272e2:	d006      	beq.n	272f2 <init_and_config.part.0+0x5a>
		err = lte_lc_system_mode_set(sys_mode_target, mode_pref_target);
   272e4:	f7ff fef0 	bl	270c8 <lte_lc_system_mode_set>
		if (err) {
   272e8:	4604      	mov	r4, r0
   272ea:	b110      	cbz	r0, 272f2 <init_and_config.part.0+0x5a>
			LOG_ERR("Could not set system mode, error: %d", err);
   272ec:	4b11      	ldr	r3, [pc, #68]	; (27334 <init_and_config.part.0+0x9c>)
   272ee:	9003      	str	r0, [sp, #12]
   272f0:	e7e2      	b.n	272b8 <init_and_config.part.0+0x20>
	err = enable_notifications();
   272f2:	f7ff fb2d 	bl	26950 <enable_notifications>
	if (err) {
   272f6:	4604      	mov	r4, r0
   272f8:	b150      	cbz	r0, 27310 <init_and_config.part.0+0x78>
		LOG_ERR("Failed to enable notifications");
   272fa:	4b0f      	ldr	r3, [pc, #60]	; (27338 <init_and_config.part.0+0xa0>)
   272fc:	2201      	movs	r2, #1
   272fe:	9302      	str	r3, [sp, #8]
   27300:	2300      	movs	r3, #0
   27302:	4909      	ldr	r1, [pc, #36]	; (27328 <init_and_config.part.0+0x90>)
   27304:	4618      	mov	r0, r3
   27306:	e9cd 3300 	strd	r3, r3, [sp]
   2730a:	f00a fd5b 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		return err;
   2730e:	e7dc      	b.n	272ca <init_and_config.part.0+0x32>
	is_initialized = true;
   27310:	2201      	movs	r2, #1
   27312:	4b0a      	ldr	r3, [pc, #40]	; (2733c <init_and_config.part.0+0xa4>)
   27314:	701a      	strb	r2, [r3, #0]
	return 0;
   27316:	e7d8      	b.n	272ca <init_and_config.part.0+0x32>
   27318:	2000f6d9 	.word	0x2000f6d9
   2731c:	2000f787 	.word	0x2000f787
   27320:	2000d4a0 	.word	0x2000d4a0
   27324:	00039206 	.word	0x00039206
   27328:	00034a90 	.word	0x00034a90
   2732c:	2000c858 	.word	0x2000c858
   27330:	2000f6da 	.word	0x2000f6da
   27334:	00039233 	.word	0x00039233
   27338:	00039258 	.word	0x00039258
   2733c:	2000f6d8 	.word	0x2000f6d8

00027340 <lte_lc_init>:
{
   27340:	b508      	push	{r3, lr}
	if (is_initialized) {
   27342:	4b05      	ldr	r3, [pc, #20]	; (27358 <lte_lc_init+0x18>)
   27344:	781b      	ldrb	r3, [r3, #0]
   27346:	b913      	cbnz	r3, 2734e <lte_lc_init+0xe>
   27348:	f7ff ffa6 	bl	27298 <init_and_config.part.0>
	return err ? -EFAULT : 0;
   2734c:	b908      	cbnz	r0, 27352 <lte_lc_init+0x12>
   2734e:	2000      	movs	r0, #0
}
   27350:	bd08      	pop	{r3, pc}
	return err ? -EFAULT : 0;
   27352:	f06f 000d 	mvn.w	r0, #13
   27356:	e7fb      	b.n	27350 <lte_lc_init+0x10>
   27358:	2000f6d8 	.word	0x2000f6d8

0002735c <lte_lc_func_mode_set>:

	return 0;
}

int lte_lc_func_mode_set(enum lte_lc_func_mode mode)
{
   2735c:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	switch (mode) {
   2735e:	2804      	cmp	r0, #4
{
   27360:	4604      	mov	r4, r0
   27362:	b085      	sub	sp, #20
	switch (mode) {
   27364:	d81f      	bhi.n	273a6 <lte_lc_func_mode_set+0x4a>
   27366:	2804      	cmp	r0, #4
   27368:	d822      	bhi.n	273b0 <lte_lc_func_mode_set+0x54>
   2736a:	e8df f000 	tbb	[pc, r0]
   2736e:	313b      	.short	0x313b
   27370:	213b      	.short	0x213b
   27372:	3b          	.byte	0x3b
   27373:	00          	.byte	0x00
   27374:	2601      	movs	r6, #1
   27376:	4d24      	ldr	r5, [pc, #144]	; (27408 <lte_lc_func_mode_set+0xac>)
   27378:	fa06 f101 	lsl.w	r1, r6, r1
   2737c:	400d      	ands	r5, r1
   2737e:	d131      	bne.n	273e4 <lte_lc_func_mode_set+0x88>
   27380:	078b      	lsls	r3, r1, #30
   27382:	d515      	bpl.n	273b0 <lte_lc_func_mode_set+0x54>
	case LTE_LC_FUNC_MODE_ACTIVATE_LTE:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_ACTIVATE_LTE);

		err = enable_notifications();
   27384:	f7ff fae4 	bl	26950 <enable_notifications>
		if (err) {
   27388:	b360      	cbz	r0, 273e4 <lte_lc_func_mode_set+0x88>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   2738a:	4b20      	ldr	r3, [pc, #128]	; (2740c <lte_lc_func_mode_set+0xb0>)
   2738c:	9003      	str	r0, [sp, #12]
   2738e:	e9cd 5301 	strd	r5, r3, [sp, #4]
   27392:	462b      	mov	r3, r5
   27394:	9500      	str	r5, [sp, #0]
	case LTE_LC_FUNC_MODE_NORMAL:
		LTE_LC_TRACE(LTE_LC_TRACE_FUNC_MODE_NORMAL);

		err = enable_notifications();
		if (err) {
			LOG_ERR("Failed to enable notifications, error: %d", err);
   27396:	2201      	movs	r2, #1
   27398:	4618      	mov	r0, r3
   2739a:	491d      	ldr	r1, [pc, #116]	; (27410 <lte_lc_func_mode_set+0xb4>)
   2739c:	f00a fd12 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
	}

	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
	if (err) {
		return -EFAULT;
   273a0:	f06f 050d 	mvn.w	r5, #13
   273a4:	e011      	b.n	273ca <lte_lc_func_mode_set+0x6e>
	switch (mode) {
   273a6:	f1a0 0114 	sub.w	r1, r0, #20
   273aa:	b2c9      	uxtb	r1, r1
   273ac:	2918      	cmp	r1, #24
   273ae:	d9e1      	bls.n	27374 <lte_lc_func_mode_set+0x18>
		LOG_ERR("Invalid functional mode: %d", mode);
   273b0:	4b18      	ldr	r3, [pc, #96]	; (27414 <lte_lc_func_mode_set+0xb8>)
   273b2:	2201      	movs	r2, #1
   273b4:	9302      	str	r3, [sp, #8]
   273b6:	2300      	movs	r3, #0
   273b8:	4915      	ldr	r1, [pc, #84]	; (27410 <lte_lc_func_mode_set+0xb4>)
   273ba:	4618      	mov	r0, r3
   273bc:	e9cd 3300 	strd	r3, r3, [sp]
   273c0:	9403      	str	r4, [sp, #12]
   273c2:	f00a fcff 	bl	31dc4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   273c6:	f06f 0515 	mvn.w	r5, #21
		LOG_DBG("CFUN monitor callback: %p", e->callback);
		e->callback(mode, e->context);
	}

	return 0;
}
   273ca:	4628      	mov	r0, r5
   273cc:	b005      	add	sp, #20
   273ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = enable_notifications();
   273d0:	f7ff fabe 	bl	26950 <enable_notifications>
		if (err) {
   273d4:	b130      	cbz	r0, 273e4 <lte_lc_func_mode_set+0x88>
			LOG_ERR("Failed to enable notifications, error: %d", err);
   273d6:	4b0d      	ldr	r3, [pc, #52]	; (2740c <lte_lc_func_mode_set+0xb0>)
   273d8:	9003      	str	r0, [sp, #12]
   273da:	9302      	str	r3, [sp, #8]
   273dc:	2300      	movs	r3, #0
   273de:	e9cd 3300 	strd	r3, r3, [sp]
   273e2:	e7d8      	b.n	27396 <lte_lc_func_mode_set+0x3a>
	err = nrf_modem_at_printf("AT+CFUN=%d", mode);
   273e4:	4621      	mov	r1, r4
   273e6:	480c      	ldr	r0, [pc, #48]	; (27418 <lte_lc_func_mode_set+0xbc>)
   273e8:	f003 feb6 	bl	2b158 <nrf_modem_at_printf>
	if (err) {
   273ec:	4605      	mov	r5, r0
   273ee:	2800      	cmp	r0, #0
   273f0:	d1d6      	bne.n	273a0 <lte_lc_func_mode_set+0x44>
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   273f2:	4e0a      	ldr	r6, [pc, #40]	; (2741c <lte_lc_func_mode_set+0xc0>)
   273f4:	4f0a      	ldr	r7, [pc, #40]	; (27420 <lte_lc_func_mode_set+0xc4>)
   273f6:	42be      	cmp	r6, r7
   273f8:	d2e7      	bcs.n	273ca <lte_lc_func_mode_set+0x6e>
		e->callback(mode, e->context);
   273fa:	e9d6 3100 	ldrd	r3, r1, [r6]
   273fe:	4620      	mov	r0, r4
   27400:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(lte_lc_cfun_cb, e) {
   27402:	3608      	adds	r6, #8
   27404:	e7f7      	b.n	273f6 <lte_lc_func_mode_set+0x9a>
   27406:	bf00      	nop
   27408:	01300c01 	.word	0x01300c01
   2740c:	00039277 	.word	0x00039277
   27410:	00034a90 	.word	0x00034a90
   27414:	000392a1 	.word	0x000392a1
   27418:	000392bd 	.word	0x000392bd
   2741c:	0003a1f8 	.word	0x0003a1f8
   27420:	0003a200 	.word	0x0003a200

00027424 <lte_lc_deinit>:
{
   27424:	b508      	push	{r3, lr}
	if (is_initialized) {
   27426:	4b06      	ldr	r3, [pc, #24]	; (27440 <lte_lc_deinit+0x1c>)
   27428:	781a      	ldrb	r2, [r3, #0]
   2742a:	b122      	cbz	r2, 27436 <lte_lc_deinit+0x12>
		is_initialized = false;
   2742c:	2000      	movs	r0, #0
   2742e:	7018      	strb	r0, [r3, #0]
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   27430:	f7ff ff94 	bl	2735c <lte_lc_func_mode_set>
   27434:	b908      	cbnz	r0, 2743a <lte_lc_deinit+0x16>
   27436:	2000      	movs	r0, #0
}
   27438:	bd08      	pop	{r3, pc}
		return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   2743a:	f06f 000d 	mvn.w	r0, #13
   2743e:	e7fb      	b.n	27438 <lte_lc_deinit+0x14>
   27440:	2000f6d8 	.word	0x2000f6d8

00027444 <event_handler_list_find_node>:
	return list->head;
   27444:	4b08      	ldr	r3, [pc, #32]	; (27468 <event_handler_list_find_node+0x24>)
{
   27446:	4602      	mov	r2, r0
   27448:	6818      	ldr	r0, [r3, #0]
   2744a:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   2744c:	b120      	cbz	r0, 27458 <event_handler_list_find_node+0x14>
   2744e:	2400      	movs	r4, #0
		if (curr->handler == handler) {
   27450:	6843      	ldr	r3, [r0, #4]
   27452:	428b      	cmp	r3, r1
   27454:	d101      	bne.n	2745a <event_handler_list_find_node+0x16>
			*prev_out = prev;
   27456:	6014      	str	r4, [r2, #0]
}
   27458:	bd10      	pop	{r4, pc}
	return node->next;
   2745a:	6803      	ldr	r3, [r0, #0]
   2745c:	4604      	mov	r4, r0
   2745e:	4618      	mov	r0, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&handler_list, curr, node) {
   27460:	2b00      	cmp	r3, #0
   27462:	d1f5      	bne.n	27450 <event_handler_list_find_node+0xc>
   27464:	e7f8      	b.n	27458 <event_handler_list_find_node+0x14>
   27466:	bf00      	nop
   27468:	2000d4c0 	.word	0x2000d4c0

0002746c <k_mutex_unlock.constprop.0.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   2746c:	4801      	ldr	r0, [pc, #4]	; (27474 <k_mutex_unlock.constprop.0.isra.0+0x8>)
   2746e:	f005 b839 	b.w	2c4e4 <z_impl_k_mutex_unlock>
   27472:	bf00      	nop
   27474:	2000c98c 	.word	0x2000c98c

00027478 <event_handler_list_is_empty>:
	return list->head;
   27478:	4b02      	ldr	r3, [pc, #8]	; (27484 <event_handler_list_is_empty+0xc>)
Z_GENLIST_IS_EMPTY(slist)
   2747a:	6818      	ldr	r0, [r3, #0]
}
   2747c:	fab0 f080 	clz	r0, r0
   27480:	0940      	lsrs	r0, r0, #5
   27482:	4770      	bx	lr
   27484:	2000d4c0 	.word	0x2000d4c0

00027488 <event_handler_list_append_handler>:
{
   27488:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2748a:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2748c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27494:	4812      	ldr	r0, [pc, #72]	; (274e0 <event_handler_list_append_handler+0x58>)
   27496:	f004 ffad 	bl	2c3f4 <z_impl_k_mutex_lock>
	if (event_handler_list_find_node(&to_ins, handler) != NULL) {
   2749a:	4629      	mov	r1, r5
   2749c:	a801      	add	r0, sp, #4
   2749e:	f7ff ffd1 	bl	27444 <event_handler_list_find_node>
   274a2:	4604      	mov	r4, r0
   274a4:	b120      	cbz	r0, 274b0 <event_handler_list_append_handler+0x28>
		k_mutex_unlock(&list_mtx);
   274a6:	f7ff ffe1 	bl	2746c <k_mutex_unlock.constprop.0.isra.0>
		return 0;
   274aa:	2000      	movs	r0, #0
}
   274ac:	b003      	add	sp, #12
   274ae:	bd30      	pop	{r4, r5, pc}
	to_ins = (struct event_handler *)k_malloc(sizeof(struct event_handler));
   274b0:	2008      	movs	r0, #8
   274b2:	f00c fb79 	bl	33ba8 <k_malloc>
   274b6:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   274b8:	b920      	cbnz	r0, 274c4 <event_handler_list_append_handler+0x3c>
		k_mutex_unlock(&list_mtx);
   274ba:	f7ff ffd7 	bl	2746c <k_mutex_unlock.constprop.0.isra.0>
		return -ENOBUFS;
   274be:	f06f 0068 	mvn.w	r0, #104	; 0x68
   274c2:	e7f3      	b.n	274ac <event_handler_list_append_handler+0x24>
	return list->tail;
   274c4:	4a07      	ldr	r2, [pc, #28]	; (274e4 <event_handler_list_append_handler+0x5c>)
__ssp_bos_icheck3(memset, void *, int)
   274c6:	6004      	str	r4, [r0, #0]
   274c8:	6044      	str	r4, [r0, #4]
	to_ins->handler = handler;
   274ca:	9b01      	ldr	r3, [sp, #4]
   274cc:	6851      	ldr	r1, [r2, #4]
	parent->next = child;
   274ce:	e9c3 4500 	strd	r4, r5, [r3]
Z_GENLIST_APPEND(slist, snode)
   274d2:	b911      	cbnz	r1, 274da <event_handler_list_append_handler+0x52>
	list->head = node;
   274d4:	e9c2 3300 	strd	r3, r3, [r2]
}
   274d8:	e7e5      	b.n	274a6 <event_handler_list_append_handler+0x1e>
	parent->next = child;
   274da:	600b      	str	r3, [r1, #0]
	list->tail = node;
   274dc:	6053      	str	r3, [r2, #4]
}
   274de:	e7e2      	b.n	274a6 <event_handler_list_append_handler+0x1e>
   274e0:	2000c98c 	.word	0x2000c98c
   274e4:	2000d4c0 	.word	0x2000d4c0

000274e8 <event_handler_list_dispatch>:
{
   274e8:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   274ea:	4c0d      	ldr	r4, [pc, #52]	; (27520 <event_handler_list_dispatch+0x38>)
   274ec:	4605      	mov	r5, r0
	if (event_handler_list_is_empty()) {
   274ee:	6823      	ldr	r3, [r4, #0]
   274f0:	b1ab      	cbz	r3, 2751e <event_handler_list_dispatch+0x36>
   274f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   274f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   274fa:	480a      	ldr	r0, [pc, #40]	; (27524 <event_handler_list_dispatch+0x3c>)
   274fc:	f004 ff7a 	bl	2c3f4 <z_impl_k_mutex_lock>
   27500:	6823      	ldr	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27502:	b91b      	cbnz	r3, 2750c <event_handler_list_dispatch+0x24>
}
   27504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   27508:	f7ff bfb0 	b.w	2746c <k_mutex_unlock.constprop.0.isra.0>
	return node->next;
   2750c:	681c      	ldr	r4, [r3, #0]
		curr->handler(evt);
   2750e:	4628      	mov	r0, r5
   27510:	685b      	ldr	r3, [r3, #4]
   27512:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   27514:	2c00      	cmp	r4, #0
   27516:	d0f5      	beq.n	27504 <event_handler_list_dispatch+0x1c>
   27518:	4623      	mov	r3, r4
   2751a:	6824      	ldr	r4, [r4, #0]
   2751c:	e7f7      	b.n	2750e <event_handler_list_dispatch+0x26>
}
   2751e:	bd38      	pop	{r3, r4, r5, pc}
   27520:	2000d4c0 	.word	0x2000d4c0
   27524:	2000c98c 	.word	0x2000c98c

00027528 <response_is_valid>:
{
   27528:	b530      	push	{r4, r5, lr}
   2752a:	460d      	mov	r5, r1
	if ((response == NULL) || (check == NULL)) {
   2752c:	4604      	mov	r4, r0
{
   2752e:	b087      	sub	sp, #28
	if ((response == NULL) || (check == NULL)) {
   27530:	b100      	cbz	r0, 27534 <response_is_valid+0xc>
   27532:	b962      	cbnz	r2, 2754e <response_is_valid+0x26>
		LOG_ERR("Invalid pointer provided");
   27534:	2400      	movs	r4, #0
   27536:	4b0e      	ldr	r3, [pc, #56]	; (27570 <response_is_valid+0x48>)
   27538:	2201      	movs	r2, #1
   2753a:	9302      	str	r3, [sp, #8]
   2753c:	4620      	mov	r0, r4
   2753e:	4623      	mov	r3, r4
   27540:	e9cd 4400 	strd	r4, r4, [sp]
   27544:	490b      	ldr	r1, [pc, #44]	; (27574 <response_is_valid+0x4c>)
   27546:	f00a fc55 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
		return false;
   2754a:	2000      	movs	r0, #0
   2754c:	e00d      	b.n	2756a <response_is_valid+0x42>
	if ((response_len < strlen(check)) ||
   2754e:	4610      	mov	r0, r2
   27550:	9205      	str	r2, [sp, #20]
   27552:	f7f5 fda5 	bl	1d0a0 <strlen>
   27556:	42a8      	cmp	r0, r5
   27558:	d8f7      	bhi.n	2754a <response_is_valid+0x22>
	    (memcmp(response, check, response_len) != 0)) {
   2755a:	462a      	mov	r2, r5
   2755c:	4620      	mov	r0, r4
   2755e:	9905      	ldr	r1, [sp, #20]
   27560:	f00c fb55 	bl	33c0e <memcmp>
	if ((response_len < strlen(check)) ||
   27564:	fab0 f080 	clz	r0, r0
   27568:	0940      	lsrs	r0, r0, #5
}
   2756a:	b007      	add	sp, #28
   2756c:	bd30      	pop	{r4, r5, pc}
   2756e:	bf00      	nop
   27570:	00039362 	.word	0x00039362
   27574:	00034a98 	.word	0x00034a98

00027578 <parse_psm>:

int parse_psm(const char *active_time_str, const char *tau_ext_str,
	      const char *tau_legacy_str, struct lte_lc_psm_cfg *psm_cfg)
{
   27578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	char unit_str[4] = {0};
   2757c:	2700      	movs	r7, #0
{
   2757e:	b087      	sub	sp, #28
   27580:	4680      	mov	r8, r0
   27582:	460e      	mov	r6, r1
   27584:	4614      	mov	r4, r2
   27586:	461d      	mov	r5, r3
	char unit_str[4] = {0};
   27588:	9705      	str	r7, [sp, #20]
	/* Lookup table for T3412 (legacy) timer used for periodic TAU. Unit is seconds.
	 * Ref: GPRS Timer in 3GPP TS 24.008 Table 10.5.172/3GPP TS 24.008.
	 */
	static const uint32_t t3412_lookup[8] = {2, 60, 360, 60, 60, 60, 60, 0};

	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   2758a:	f7f5 fd89 	bl	1d0a0 <strlen>
   2758e:	2808      	cmp	r0, #8
   27590:	d004      	beq.n	2759c <parse_psm+0x24>
	memcpy(unit_str, active_time_str, unit_str_len);

	lut_idx = strtoul(unit_str, NULL, 2);
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
		LOG_ERR("Unable to parse active time string");
		return -EINVAL;
   27592:	f06f 0015 	mvn.w	r0, #21

	LOG_DBG("TAU: %d sec, active time: %d sec",
		psm_cfg->tau, psm_cfg->active_time);

	return 0;
}
   27596:	b007      	add	sp, #28
   27598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((strlen(active_time_str) != 8) || (strlen(tau_ext_str) != 8)) {
   2759c:	4630      	mov	r0, r6
   2759e:	f7f5 fd7f 	bl	1d0a0 <strlen>
   275a2:	2808      	cmp	r0, #8
   275a4:	d1f5      	bne.n	27592 <parse_psm+0x1a>
	memcpy(unit_str, tau_ext_str, unit_str_len);
   275a6:	8832      	ldrh	r2, [r6, #0]
   275a8:	78b3      	ldrb	r3, [r6, #2]
   275aa:	f8ad 2014 	strh.w	r2, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   275ae:	4639      	mov	r1, r7
   275b0:	2202      	movs	r2, #2
   275b2:	a805      	add	r0, sp, #20
	memcpy(unit_str, tau_ext_str, unit_str_len);
   275b4:	f88d 3016 	strb.w	r3, [sp, #22]
	lut_idx = strtoul(unit_str, NULL, 2);
   275b8:	f006 fe2e 	bl	2e218 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_ext_lookup) - 1)) {
   275bc:	2807      	cmp	r0, #7
   275be:	d90a      	bls.n	275d6 <parse_psm+0x5e>
		LOG_ERR("Unable to parse periodic TAU string (T3412 extended)");
   275c0:	4b33      	ldr	r3, [pc, #204]	; (27690 <parse_psm+0x118>)
   275c2:	9700      	str	r7, [sp, #0]
   275c4:	e9cd 7301 	strd	r7, r3, [sp, #4]
   275c8:	463b      	mov	r3, r7
		LOG_ERR("Unable to parse active time string");
   275ca:	2201      	movs	r2, #1
   275cc:	4618      	mov	r0, r3
   275ce:	4931      	ldr	r1, [pc, #196]	; (27694 <parse_psm+0x11c>)
   275d0:	f00a fc10 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
   275d4:	e7dd      	b.n	27592 <parse_psm+0x1a>
	timer_unit = t3412_ext_lookup[lut_idx];
   275d6:	4b30      	ldr	r3, [pc, #192]	; (27698 <parse_psm+0x120>)
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   275d8:	2202      	movs	r2, #2
	timer_unit = t3412_ext_lookup[lut_idx];
   275da:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
	timer_value = strtoul(tau_ext_str + unit_str_len, NULL, 2);
   275de:	4639      	mov	r1, r7
   275e0:	1cf0      	adds	r0, r6, #3
   275e2:	f006 fe19 	bl	2e218 <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   275e6:	f1b9 0f00 	cmp.w	r9, #0
   275ea:	d11b      	bne.n	27624 <parse_psm+0xac>
   275ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   275f0:	602b      	str	r3, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   275f2:	b1e4      	cbz	r4, 2762e <parse_psm+0xb6>
   275f4:	4620      	mov	r0, r4
   275f6:	f7f5 fd53 	bl	1d0a0 <strlen>
   275fa:	2808      	cmp	r0, #8
   275fc:	d117      	bne.n	2762e <parse_psm+0xb6>
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   275fe:	8822      	ldrh	r2, [r4, #0]
   27600:	78a3      	ldrb	r3, [r4, #2]
   27602:	f8ad 2014 	strh.w	r2, [sp, #20]
		lut_idx = strtoul(unit_str, NULL, 2);
   27606:	2100      	movs	r1, #0
   27608:	2202      	movs	r2, #2
   2760a:	a805      	add	r0, sp, #20
		memcpy(unit_str, tau_legacy_str, unit_str_len);
   2760c:	f88d 3016 	strb.w	r3, [sp, #22]
		lut_idx = strtoul(unit_str, NULL, 2);
   27610:	f006 fe02 	bl	2e218 <strtoul>
		if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   27614:	2807      	cmp	r0, #7
   27616:	d91b      	bls.n	27650 <parse_psm+0xd8>
			LOG_ERR("Unable to parse periodic TAU string (T3412)");
   27618:	4b20      	ldr	r3, [pc, #128]	; (2769c <parse_psm+0x124>)
		LOG_ERR("Unable to parse active time string");
   2761a:	9302      	str	r3, [sp, #8]
   2761c:	2300      	movs	r3, #0
   2761e:	e9cd 3300 	strd	r3, r3, [sp]
   27622:	e7d2      	b.n	275ca <parse_psm+0x52>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   27624:	fb09 f000 	mul.w	r0, r9, r0
   27628:	6028      	str	r0, [r5, #0]
	if ((psm_cfg->tau == -1) && tau_legacy_str && (strlen(tau_legacy_str) == 8)) {
   2762a:	3001      	adds	r0, #1
   2762c:	d0e1      	beq.n	275f2 <parse_psm+0x7a>
	memcpy(unit_str, active_time_str, unit_str_len);
   2762e:	f8b8 2000 	ldrh.w	r2, [r8]
   27632:	f898 3002 	ldrb.w	r3, [r8, #2]
   27636:	f8ad 2014 	strh.w	r2, [sp, #20]
	lut_idx = strtoul(unit_str, NULL, 2);
   2763a:	2100      	movs	r1, #0
   2763c:	2202      	movs	r2, #2
   2763e:	a805      	add	r0, sp, #20
	memcpy(unit_str, active_time_str, unit_str_len);
   27640:	f88d 3016 	strb.w	r3, [sp, #22]
	lut_idx = strtoul(unit_str, NULL, 2);
   27644:	f006 fde8 	bl	2e218 <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   27648:	2807      	cmp	r0, #7
   2764a:	d910      	bls.n	2766e <parse_psm+0xf6>
		LOG_ERR("Unable to parse active time string");
   2764c:	4b14      	ldr	r3, [pc, #80]	; (276a0 <parse_psm+0x128>)
   2764e:	e7e4      	b.n	2761a <parse_psm+0xa2>
		timer_unit = t3412_lookup[lut_idx];
   27650:	4b14      	ldr	r3, [pc, #80]	; (276a4 <parse_psm+0x12c>)
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   27652:	2202      	movs	r2, #2
		timer_unit = t3412_lookup[lut_idx];
   27654:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
		timer_value = strtoul(tau_legacy_str + unit_str_len, NULL, 2);
   27658:	2100      	movs	r1, #0
   2765a:	1ce0      	adds	r0, r4, #3
   2765c:	f006 fddc 	bl	2e218 <strtoul>
		psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   27660:	b116      	cbz	r6, 27668 <parse_psm+0xf0>
   27662:	4346      	muls	r6, r0
   27664:	602e      	str	r6, [r5, #0]
   27666:	e7e2      	b.n	2762e <parse_psm+0xb6>
   27668:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2766c:	e7fa      	b.n	27664 <parse_psm+0xec>
	timer_unit = t3324_lookup[lut_idx];
   2766e:	4b0e      	ldr	r3, [pc, #56]	; (276a8 <parse_psm+0x130>)
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   27670:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   27672:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	timer_value = strtoul(active_time_str + unit_str_len, NULL, 2);
   27676:	2100      	movs	r1, #0
   27678:	f108 0003 	add.w	r0, r8, #3
   2767c:	f006 fdcc 	bl	2e218 <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   27680:	b11c      	cbz	r4, 2768a <parse_psm+0x112>
   27682:	4344      	muls	r4, r0
	return 0;
   27684:	2000      	movs	r0, #0
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   27686:	606c      	str	r4, [r5, #4]
	return 0;
   27688:	e785      	b.n	27596 <parse_psm+0x1e>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2768a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2768e:	e7f9      	b.n	27684 <parse_psm+0x10c>
   27690:	000394b2 	.word	0x000394b2
   27694:	00034a98 	.word	0x00034a98
   27698:	00035064 	.word	0x00035064
   2769c:	000394e7 	.word	0x000394e7
   276a0:	00039513 	.word	0x00039513
   276a4:	00035044 	.word	0x00035044
   276a8:	00035044 	.word	0x00035044

000276ac <parse_rrc_mode>:
 * @return Zero on success or (negative) error code otherwise.
 */
int parse_rrc_mode(const char *at_response,
		   enum lte_lc_rrc_mode *mode,
		   size_t mode_index)
{
   276ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   276b0:	2500      	movs	r5, #0
{
   276b2:	b088      	sub	sp, #32
   276b4:	4680      	mov	r8, r0
   276b6:	460e      	mov	r6, r1

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   276b8:	a806      	add	r0, sp, #24
   276ba:	2104      	movs	r1, #4
{
   276bc:	4617      	mov	r7, r2
	struct at_param_list resp_list = {0};
   276be:	e9cd 5506 	strd	r5, r5, [sp, #24]
	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   276c2:	f00a fa41 	bl	31b48 <at_params_list_init>
	if (err) {
   276c6:	4604      	mov	r4, r0
   276c8:	b170      	cbz	r0, 276e8 <parse_rrc_mode+0x3c>
		LOG_ERR("Could not init AT params list, error: %d", err);
   276ca:	4b22      	ldr	r3, [pc, #136]	; (27754 <parse_rrc_mode+0xa8>)
   276cc:	9003      	str	r0, [sp, #12]
   276ce:	e9cd 5301 	strd	r5, r3, [sp, #4]
   276d2:	2201      	movs	r2, #1
   276d4:	462b      	mov	r3, r5
   276d6:	4628      	mov	r0, r5
   276d8:	491f      	ldr	r1, [pc, #124]	; (27758 <parse_rrc_mode+0xac>)
   276da:	9500      	str	r5, [sp, #0]
   276dc:	f00a fb8a 	bl	31df4 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   276e0:	4620      	mov	r0, r4
   276e2:	b008      	add	sp, #32
   276e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_parser_params_from_str(at_response,
   276e8:	4601      	mov	r1, r0
   276ea:	aa06      	add	r2, sp, #24
   276ec:	4640      	mov	r0, r8
   276ee:	f00a fa12 	bl	31b16 <at_parser_params_from_str>
	if (err) {
   276f2:	4604      	mov	r4, r0
   276f4:	b170      	cbz	r0, 27714 <parse_rrc_mode+0x68>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   276f6:	4b19      	ldr	r3, [pc, #100]	; (2775c <parse_rrc_mode+0xb0>)
   276f8:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get signalling mode, error: %d", err);
   276fa:	e9cd 5301 	strd	r5, r3, [sp, #4]
   276fe:	2201      	movs	r2, #1
   27700:	462b      	mov	r3, r5
   27702:	4628      	mov	r0, r5
   27704:	4914      	ldr	r1, [pc, #80]	; (27758 <parse_rrc_mode+0xac>)
   27706:	9500      	str	r5, [sp, #0]
   27708:	f00a fb74 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   2770c:	a806      	add	r0, sp, #24
   2770e:	f00a fa46 	bl	31b9e <at_params_list_free>
	return err;
   27712:	e7e5      	b.n	276e0 <parse_rrc_mode+0x34>
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   27714:	4639      	mov	r1, r7
   27716:	aa05      	add	r2, sp, #20
   27718:	a806      	add	r0, sp, #24
   2771a:	f00a faf2 	bl	31d02 <at_params_int_get>
	if (err) {
   2771e:	4604      	mov	r4, r0
   27720:	b110      	cbz	r0, 27728 <parse_rrc_mode+0x7c>
		LOG_ERR("Could not get signalling mode, error: %d", err);
   27722:	4b0f      	ldr	r3, [pc, #60]	; (27760 <parse_rrc_mode+0xb4>)
   27724:	9003      	str	r0, [sp, #12]
   27726:	e7e8      	b.n	276fa <parse_rrc_mode+0x4e>
	if (temp_mode == 0) {
   27728:	9b05      	ldr	r3, [sp, #20]
   2772a:	b90b      	cbnz	r3, 27730 <parse_rrc_mode+0x84>
		*mode = LTE_LC_RRC_MODE_IDLE;
   2772c:	7030      	strb	r0, [r6, #0]
   2772e:	e7ed      	b.n	2770c <parse_rrc_mode+0x60>
	} else if (temp_mode == 1) {
   27730:	2b01      	cmp	r3, #1
   27732:	d101      	bne.n	27738 <parse_rrc_mode+0x8c>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   27734:	7033      	strb	r3, [r6, #0]
   27736:	e7e9      	b.n	2770c <parse_rrc_mode+0x60>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   27738:	9303      	str	r3, [sp, #12]
   2773a:	4b0a      	ldr	r3, [pc, #40]	; (27764 <parse_rrc_mode+0xb8>)
   2773c:	2201      	movs	r2, #1
   2773e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   27742:	4905      	ldr	r1, [pc, #20]	; (27758 <parse_rrc_mode+0xac>)
   27744:	4603      	mov	r3, r0
   27746:	9000      	str	r0, [sp, #0]
   27748:	f00a fb54 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
		err = -EINVAL;
   2774c:	f06f 0415 	mvn.w	r4, #21
   27750:	e7dc      	b.n	2770c <parse_rrc_mode+0x60>
   27752:	bf00      	nop
   27754:	0003937b 	.word	0x0003937b
   27758:	00034a98 	.word	0x00034a98
   2775c:	00039536 	.word	0x00039536
   27760:	00039561 	.word	0x00039561
   27764:	0003958a 	.word	0x0003958a

00027768 <parse_cereg>:
int parse_cereg(const char *at_response,
		bool is_notif,
		enum lte_lc_nw_reg_status *reg_status,
		struct lte_lc_cell *cell,
		enum lte_lc_lte_mode *lte_mode)
{
   27768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err, status;
	struct at_param_list resp_list;
	char str_buf[10];
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   2776c:	2500      	movs	r5, #0
{
   2776e:	4691      	mov	r9, r2
   27770:	461e      	mov	r6, r3
	size_t response_prefix_len = sizeof(response_prefix);
	size_t len = sizeof(str_buf) - 1;
   27772:	2207      	movs	r2, #7
   27774:	2309      	movs	r3, #9
{
   27776:	b08e      	sub	sp, #56	; 0x38
   27778:	4682      	mov	sl, r0
   2777a:	460f      	mov	r7, r1

	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   2777c:	a809      	add	r0, sp, #36	; 0x24
   2777e:	210b      	movs	r1, #11
	size_t len = sizeof(str_buf) - 1;
   27780:	e9cd 2304 	strd	r2, r3, [sp, #16]
{
   27784:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
	char  response_prefix[sizeof(AT_CEREG_RESPONSE_PREFIX)] = {0};
   27788:	9507      	str	r5, [sp, #28]
   2778a:	f8ad 5020 	strh.w	r5, [sp, #32]
   2778e:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   27792:	f00a f9d9 	bl	31b48 <at_params_list_init>
	if (err) {
   27796:	4604      	mov	r4, r0
   27798:	b170      	cbz	r0, 277b8 <parse_cereg+0x50>
		LOG_ERR("Could not init AT params list, error: %d", err);
   2779a:	4b65      	ldr	r3, [pc, #404]	; (27930 <parse_cereg+0x1c8>)
   2779c:	9003      	str	r0, [sp, #12]
   2779e:	e9cd 5301 	strd	r5, r3, [sp, #4]
   277a2:	2201      	movs	r2, #1
   277a4:	462b      	mov	r3, r5
   277a6:	4628      	mov	r0, r5
   277a8:	4962      	ldr	r1, [pc, #392]	; (27934 <parse_cereg+0x1cc>)
   277aa:	9500      	str	r5, [sp, #0]
   277ac:	f00a fb22 	bl	31df4 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   277b0:	4620      	mov	r0, r4
   277b2:	b00e      	add	sp, #56	; 0x38
   277b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = at_parser_params_from_str(at_response,
   277b8:	4601      	mov	r1, r0
   277ba:	aa09      	add	r2, sp, #36	; 0x24
   277bc:	4650      	mov	r0, sl
   277be:	f00a f9aa 	bl	31b16 <at_parser_params_from_str>
	if (err) {
   277c2:	4604      	mov	r4, r0
   277c4:	b170      	cbz	r0, 277e4 <parse_cereg+0x7c>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   277c6:	4b5c      	ldr	r3, [pc, #368]	; (27938 <parse_cereg+0x1d0>)
   277c8:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get response prefix, error: %d", err);
   277ca:	e9cd 5301 	strd	r5, r3, [sp, #4]
   277ce:	2201      	movs	r2, #1
   277d0:	462b      	mov	r3, r5
   277d2:	4628      	mov	r0, r5
   277d4:	4957      	ldr	r1, [pc, #348]	; (27934 <parse_cereg+0x1cc>)
   277d6:	9500      	str	r5, [sp, #0]
   277d8:	f00a fb0c 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   277dc:	a809      	add	r0, sp, #36	; 0x24
   277de:	f00a f9de 	bl	31b9e <at_params_list_free>
	return err;
   277e2:	e7e5      	b.n	277b0 <parse_cereg+0x48>
	err = at_params_string_get(&resp_list,
   277e4:	4601      	mov	r1, r0
   277e6:	ab04      	add	r3, sp, #16
   277e8:	aa07      	add	r2, sp, #28
   277ea:	a809      	add	r0, sp, #36	; 0x24
   277ec:	f00a fab5 	bl	31d5a <at_params_string_get>
	if (err) {
   277f0:	4604      	mov	r4, r0
   277f2:	b110      	cbz	r0, 277fa <parse_cereg+0x92>
		LOG_ERR("Could not get response prefix, error: %d", err);
   277f4:	4b51      	ldr	r3, [pc, #324]	; (2793c <parse_cereg+0x1d4>)
   277f6:	9003      	str	r0, [sp, #12]
   277f8:	e7e7      	b.n	277ca <parse_cereg+0x62>
	if (!response_is_valid(response_prefix, response_prefix_len,
   277fa:	4a51      	ldr	r2, [pc, #324]	; (27940 <parse_cereg+0x1d8>)
   277fc:	9904      	ldr	r1, [sp, #16]
   277fe:	a807      	add	r0, sp, #28
   27800:	f7ff fe92 	bl	27528 <response_is_valid>
   27804:	2800      	cmp	r0, #0
   27806:	d0e9      	beq.n	277dc <parse_cereg+0x74>
	size_t reg_status_index = is_notif ? AT_CEREG_REG_STATUS_INDEX :
   27808:	2f00      	cmp	r7, #0
	err = at_params_int_get(list, reg_status_index, &reg_status);
   2780a:	bf14      	ite	ne
   2780c:	2101      	movne	r1, #1
   2780e:	2102      	moveq	r1, #2
   27810:	aa0b      	add	r2, sp, #44	; 0x2c
   27812:	a809      	add	r0, sp, #36	; 0x24
   27814:	f00a fa75 	bl	31d02 <at_params_int_get>
	if (err) {
   27818:	1e05      	subs	r5, r0, #0
   2781a:	d13d      	bne.n	27898 <parse_cereg+0x130>
	switch (reg_status) {
   2781c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2781e:	2d08      	cmp	r5, #8
   27820:	d01e      	beq.n	27860 <parse_cereg+0xf8>
   27822:	dc1b      	bgt.n	2785c <parse_cereg+0xf4>
   27824:	2d05      	cmp	r5, #5
   27826:	d91b      	bls.n	27860 <parse_cereg+0xf8>
		LOG_ERR("Invalid network registration status: %d", reg_status);
   27828:	4b46      	ldr	r3, [pc, #280]	; (27944 <parse_cereg+0x1dc>)
   2782a:	9503      	str	r5, [sp, #12]
   2782c:	9302      	str	r3, [sp, #8]
   2782e:	2300      	movs	r3, #0
   27830:	2201      	movs	r2, #1
   27832:	4618      	mov	r0, r3
   27834:	e9cd 3300 	strd	r3, r3, [sp]
   27838:	493e      	ldr	r1, [pc, #248]	; (27934 <parse_cereg+0x1cc>)
   2783a:	f00a fadb 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   2783e:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("Could not get registration status, error: %d", status);
   27842:	4b41      	ldr	r3, [pc, #260]	; (27948 <parse_cereg+0x1e0>)
   27844:	9503      	str	r5, [sp, #12]
			LOG_ERR("Could not get tracking area code, error: %d", err);
   27846:	9302      	str	r3, [sp, #8]
   27848:	2300      	movs	r3, #0
   2784a:	2201      	movs	r2, #1
   2784c:	4618      	mov	r0, r3
   2784e:	e9cd 3300 	strd	r3, r3, [sp]
   27852:	4938      	ldr	r1, [pc, #224]	; (27934 <parse_cereg+0x1cc>)
   27854:	f00a face 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   27858:	462c      	mov	r4, r5
   2785a:	e7bf      	b.n	277dc <parse_cereg+0x74>
	switch (reg_status) {
   2785c:	2d5a      	cmp	r5, #90	; 0x5a
   2785e:	d1e3      	bne.n	27828 <parse_cereg+0xc0>
	if (reg_status) {
   27860:	f1b9 0f00 	cmp.w	r9, #0
   27864:	d001      	beq.n	2786a <parse_cereg+0x102>
		*reg_status = status;
   27866:	f889 5000 	strb.w	r5, [r9]
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   2786a:	2e00      	cmp	r6, #0
   2786c:	d046      	beq.n	278fc <parse_cereg+0x194>
   2786e:	2d5a      	cmp	r5, #90	; 0x5a
   27870:	d058      	beq.n	27924 <parse_cereg+0x1bc>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   27872:	a809      	add	r0, sp, #36	; 0x24
   27874:	f00a fa91 	bl	31d9a <at_params_valid_count_get>
	if (cell && (status != LTE_LC_NW_REG_UICC_FAIL) &&
   27878:	2803      	cmp	r0, #3
   2787a:	d953      	bls.n	27924 <parse_cereg+0x1bc>
		err = at_params_string_get(
   2787c:	2f00      	cmp	r7, #0
   2787e:	bf14      	ite	ne
   27880:	2102      	movne	r1, #2
   27882:	2103      	moveq	r1, #3
   27884:	ab05      	add	r3, sp, #20
   27886:	aa0b      	add	r2, sp, #44	; 0x2c
   27888:	a809      	add	r0, sp, #36	; 0x24
   2788a:	f00a fa66 	bl	31d5a <at_params_string_get>
		if (err) {
   2788e:	4605      	mov	r5, r0
   27890:	b120      	cbz	r0, 2789c <parse_cereg+0x134>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   27892:	4b2e      	ldr	r3, [pc, #184]	; (2794c <parse_cereg+0x1e4>)
   27894:	9003      	str	r0, [sp, #12]
   27896:	e7d6      	b.n	27846 <parse_cereg+0xde>
	if (status < 0) {
   27898:	dae2      	bge.n	27860 <parse_cereg+0xf8>
   2789a:	e7d2      	b.n	27842 <parse_cereg+0xda>
		str_buf[len] = '\0';
   2789c:	9b05      	ldr	r3, [sp, #20]
   2789e:	aa0e      	add	r2, sp, #56	; 0x38
   278a0:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   278a2:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   278a4:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   278a8:	2210      	movs	r2, #16
   278aa:	a80b      	add	r0, sp, #44	; 0x2c
   278ac:	f006 fcb4 	bl	2e218 <strtoul>
		len = sizeof(str_buf) - 1;
   278b0:	2309      	movs	r3, #9
		err = at_params_string_get(&resp_list,
   278b2:	2f00      	cmp	r7, #0
		cell->tac = strtoul(str_buf, NULL, 16);
   278b4:	60f0      	str	r0, [r6, #12]
		len = sizeof(str_buf) - 1;
   278b6:	9305      	str	r3, [sp, #20]
		err = at_params_string_get(&resp_list,
   278b8:	bf14      	ite	ne
   278ba:	2103      	movne	r1, #3
   278bc:	2104      	moveq	r1, #4
   278be:	ab05      	add	r3, sp, #20
   278c0:	aa0b      	add	r2, sp, #44	; 0x2c
   278c2:	a809      	add	r0, sp, #36	; 0x24
   278c4:	f00a fa49 	bl	31d5a <at_params_string_get>
		if (err) {
   278c8:	4681      	mov	r9, r0
   278ca:	b160      	cbz	r0, 278e6 <parse_cereg+0x17e>
			LOG_ERR("Could not get cell ID, error: %d", err);
   278cc:	4b20      	ldr	r3, [pc, #128]	; (27950 <parse_cereg+0x1e8>)
   278ce:	9003      	str	r0, [sp, #12]
   278d0:	e9cd 5301 	strd	r5, r3, [sp, #4]
   278d4:	2201      	movs	r2, #1
   278d6:	462b      	mov	r3, r5
   278d8:	4628      	mov	r0, r5
   278da:	4916      	ldr	r1, [pc, #88]	; (27934 <parse_cereg+0x1cc>)
   278dc:	9500      	str	r5, [sp, #0]
   278de:	f00a fa89 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
			goto clean_exit;
   278e2:	464c      	mov	r4, r9
   278e4:	e77a      	b.n	277dc <parse_cereg+0x74>
		str_buf[len] = '\0';
   278e6:	9b05      	ldr	r3, [sp, #20]
   278e8:	aa0e      	add	r2, sp, #56	; 0x38
   278ea:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   278ec:	4601      	mov	r1, r0
		str_buf[len] = '\0';
   278ee:	f803 0c0c 	strb.w	r0, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   278f2:	2210      	movs	r2, #16
   278f4:	a80b      	add	r0, sp, #44	; 0x2c
   278f6:	f006 fc8f 	bl	2e218 <strtoul>
   278fa:	60b0      	str	r0, [r6, #8]
	if (lte_mode) {
   278fc:	f1b8 0f00 	cmp.w	r8, #0
   27900:	f43f af6c 	beq.w	277dc <parse_cereg+0x74>
		err = at_params_int_get(&resp_list,
   27904:	2f00      	cmp	r7, #0
   27906:	bf14      	ite	ne
   27908:	2104      	movne	r1, #4
   2790a:	2105      	moveq	r1, #5
   2790c:	aa06      	add	r2, sp, #24
   2790e:	a809      	add	r0, sp, #36	; 0x24
   27910:	f00a f9f7 	bl	31d02 <at_params_int_get>
		if (err) {
   27914:	b920      	cbnz	r0, 27920 <parse_cereg+0x1b8>
			*lte_mode = mode;
   27916:	f89d 3018 	ldrb.w	r3, [sp, #24]
			LOG_DBG("LTE mode: %d", *lte_mode);
   2791a:	f888 3000 	strb.w	r3, [r8]
   2791e:	e75d      	b.n	277dc <parse_cereg+0x74>
			*lte_mode = LTE_LC_LTE_MODE_NONE;
   27920:	2300      	movs	r3, #0
   27922:	e7fa      	b.n	2791a <parse_cereg+0x1b2>
		cell->tac = UINT32_MAX;
   27924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		cell->id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27928:	e9c6 3302 	strd	r3, r3, [r6, #8]
   2792c:	e7e6      	b.n	278fc <parse_cereg+0x194>
   2792e:	bf00      	nop
   27930:	0003937b 	.word	0x0003937b
   27934:	00034a98 	.word	0x00034a98
   27938:	000395a6 	.word	0x000395a6
   2793c:	000395d3 	.word	0x000395d3
   27940:	000392fe 	.word	0x000392fe
   27944:	000395fc 	.word	0x000395fc
   27948:	00039624 	.word	0x00039624
   2794c:	00039651 	.word	0x00039651
   27950:	0003967d 	.word	0x0003967d

00027954 <parse_xt3412>:

int parse_xt3412(const char *at_response, uint64_t *time)
{
   27954:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct at_param_list resp_list = {0};
   27956:	2500      	movs	r5, #0
{
   27958:	b087      	sub	sp, #28
   2795a:	4607      	mov	r7, r0

	if (time == NULL || at_response == NULL) {
   2795c:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   2795e:	e9cd 5504 	strd	r5, r5, [sp, #16]
	if (time == NULL || at_response == NULL) {
   27962:	2900      	cmp	r1, #0
   27964:	d04a      	beq.n	279fc <parse_xt3412+0xa8>
   27966:	2800      	cmp	r0, #0
   27968:	d048      	beq.n	279fc <parse_xt3412+0xa8>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XT3412_PARAMS_COUNT_MAX);
   2796a:	2104      	movs	r1, #4
   2796c:	a804      	add	r0, sp, #16
   2796e:	f00a f8eb 	bl	31b48 <at_params_list_init>
	if (err) {
   27972:	4604      	mov	r4, r0
   27974:	b168      	cbz	r0, 27992 <parse_xt3412+0x3e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27976:	4b23      	ldr	r3, [pc, #140]	; (27a04 <parse_xt3412+0xb0>)
   27978:	9003      	str	r0, [sp, #12]
   2797a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   2797e:	2201      	movs	r2, #1
   27980:	462b      	mov	r3, r5
   27982:	4628      	mov	r0, r5
   27984:	4920      	ldr	r1, [pc, #128]	; (27a08 <parse_xt3412+0xb4>)
   27986:	9500      	str	r5, [sp, #0]
   27988:	f00a fa34 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   2798c:	4620      	mov	r0, r4
   2798e:	b007      	add	sp, #28
   27990:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   27992:	4601      	mov	r1, r0
   27994:	aa04      	add	r2, sp, #16
   27996:	4638      	mov	r0, r7
   27998:	f00a f8bd 	bl	31b16 <at_parser_params_from_str>
	if (err) {
   2799c:	4604      	mov	r4, r0
   2799e:	b170      	cbz	r0, 279be <parse_xt3412+0x6a>
		LOG_ERR("Could not parse %%XT3412 response, error: %d", err);
   279a0:	4b1a      	ldr	r3, [pc, #104]	; (27a0c <parse_xt3412+0xb8>)
   279a2:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   279a4:	e9cd 5301 	strd	r5, r3, [sp, #4]
   279a8:	2201      	movs	r2, #1
   279aa:	462b      	mov	r3, r5
   279ac:	4628      	mov	r0, r5
   279ae:	4916      	ldr	r1, [pc, #88]	; (27a08 <parse_xt3412+0xb4>)
   279b0:	9500      	str	r5, [sp, #0]
   279b2:	f00a fa1f 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   279b6:	a804      	add	r0, sp, #16
   279b8:	f00a f8f1 	bl	31b9e <at_params_list_free>
	return err;
   279bc:	e7e6      	b.n	2798c <parse_xt3412+0x38>
	err = at_params_int64_get(&resp_list, AT_XT3412_TIME_INDEX, time);
   279be:	4632      	mov	r2, r6
   279c0:	2102      	movs	r1, #2
   279c2:	a804      	add	r0, sp, #16
   279c4:	f00a f9b5 	bl	31d32 <at_params_int64_get>
	if (err) {
   279c8:	4604      	mov	r4, r0
   279ca:	b110      	cbz	r0, 279d2 <parse_xt3412+0x7e>
		LOG_ERR("Could not get time until next TAU, error: %d", err);
   279cc:	4b10      	ldr	r3, [pc, #64]	; (27a10 <parse_xt3412+0xbc>)
   279ce:	9003      	str	r0, [sp, #12]
   279d0:	e7e8      	b.n	279a4 <parse_xt3412+0x50>
	if ((*time > T3412_MAX) || *time < 0) {
   279d2:	4910      	ldr	r1, [pc, #64]	; (27a14 <parse_xt3412+0xc0>)
   279d4:	e9d6 2300 	ldrd	r2, r3, [r6]
   279d8:	4291      	cmp	r1, r2
   279da:	f04f 0208 	mov.w	r2, #8
   279de:	eb72 0303 	sbcs.w	r3, r2, r3
   279e2:	d2e8      	bcs.n	279b6 <parse_xt3412+0x62>
		LOG_WRN("Parsed time parameter not within valid range");
   279e4:	4b0c      	ldr	r3, [pc, #48]	; (27a18 <parse_xt3412+0xc4>)
   279e6:	2202      	movs	r2, #2
   279e8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   279ec:	4906      	ldr	r1, [pc, #24]	; (27a08 <parse_xt3412+0xb4>)
   279ee:	4603      	mov	r3, r0
   279f0:	9000      	str	r0, [sp, #0]
   279f2:	f00a f9ff 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
		err = -EINVAL;
   279f6:	f06f 0415 	mvn.w	r4, #21
   279fa:	e7dc      	b.n	279b6 <parse_xt3412+0x62>
		return -EINVAL;
   279fc:	f06f 0415 	mvn.w	r4, #21
   27a00:	e7c4      	b.n	2798c <parse_xt3412+0x38>
   27a02:	bf00      	nop
   27a04:	0003937b 	.word	0x0003937b
   27a08:	00034a98 	.word	0x00034a98
   27a0c:	0003969e 	.word	0x0003969e
   27a10:	000396cb 	.word	0x000396cb
   27a14:	5099e000 	.word	0x5099e000
   27a18:	000396f8 	.word	0x000396f8

00027a1c <neighborcell_count_get>:

uint32_t neighborcell_count_get(const char *at_response)
{
   27a1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint32_t comma_count, ncell_elements, ncell_count;

	if (at_response == NULL) {
   27a1e:	4604      	mov	r4, r0
   27a20:	b958      	cbnz	r0, 27a3a <neighborcell_count_get+0x1e>
		LOG_ERR("at_response is NULL, can't get cell count");
   27a22:	4b0e      	ldr	r3, [pc, #56]	; (27a5c <neighborcell_count_get+0x40>)
   27a24:	9000      	str	r0, [sp, #0]
   27a26:	e9cd 0301 	strd	r0, r3, [sp, #4]
   27a2a:	2201      	movs	r2, #1
   27a2c:	4603      	mov	r3, r0
   27a2e:	490c      	ldr	r1, [pc, #48]	; (27a60 <neighborcell_count_get+0x44>)
   27a30:	f00a f9e0 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
   27a34:	4620      	mov	r0, r4
	/* Add one, as there's no comma after the last element. */
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;

	return ncell_count;
}
   27a36:	b004      	add	sp, #16
   27a38:	bd10      	pop	{r4, pc}
	uint32_t count = 0;
   27a3a:	2400      	movs	r4, #0
   27a3c:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   27a3e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   27a42:	282c      	cmp	r0, #44	; 0x2c
   27a44:	d101      	bne.n	27a4a <neighborcell_count_get+0x2e>
			count++;
   27a46:	3401      	adds	r4, #1
	} while (*(str++) != '\0');
   27a48:	e7f9      	b.n	27a3e <neighborcell_count_get+0x22>
   27a4a:	2800      	cmp	r0, #0
   27a4c:	d1f7      	bne.n	27a3e <neighborcell_count_get+0x22>
	if (comma_count < AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT) {
   27a4e:	2c0a      	cmp	r4, #10
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   27a50:	bf82      	ittt	hi
   27a52:	2005      	movhi	r0, #5
	ncell_elements = comma_count - (AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT - 1) + 1;
   27a54:	3c09      	subhi	r4, #9
	ncell_count = ncell_elements / AT_NCELLMEAS_N_PARAMS_COUNT;
   27a56:	fbb4 f0f0 	udivhi	r0, r4, r0
	return ncell_count;
   27a5a:	e7ec      	b.n	27a36 <neighborcell_count_get+0x1a>
   27a5c:	00039725 	.word	0x00039725
   27a60:	00034a98 	.word	0x00034a98

00027a64 <parse_ncellmeas>:
 * Returns 1 on measurement failure
 * Returns -E2BIG if not all cells were parsed due to memory limitations
 * Returns otherwise a negative error code.
 */
int parse_ncellmeas(const char *at_response, struct lte_lc_cells_info *cells)
{
   27a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	int err, status, tmp, len;
	struct at_param_list resp_list;
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   27a68:	230b      	movs	r3, #11
{
   27a6a:	460d      	mov	r5, r1
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27a6c:	2100      	movs	r1, #0
{
   27a6e:	4680      	mov	r8, r0
   27a70:	b091      	sub	sp, #68	; 0x44
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27a72:	e9cd 110d 	strd	r1, r1, [sp, #52]	; 0x34
	size_t response_prefix_len = sizeof(response_prefix);
   27a76:	9308      	str	r3, [sp, #32]
	char  response_prefix[sizeof(AT_NCELLMEAS_RESPONSE_PREFIX)] = {0};
   27a78:	f8cd 103b 	str.w	r1, [sp, #59]	; 0x3b
static uint32_t get_char_frequency(const char *str, char c)
   27a7c:	1e43      	subs	r3, r0, #1
		if (*str == c) {
   27a7e:	f813 6f01 	ldrb.w	r6, [r3, #1]!
   27a82:	2e2c      	cmp	r6, #44	; 0x2c
   27a84:	d101      	bne.n	27a8a <parse_ncellmeas+0x26>
			count++;
   27a86:	3101      	adds	r1, #1
	} while (*(str++) != '\0');
   27a88:	e7f9      	b.n	27a7e <parse_ncellmeas+0x1a>
   27a8a:	2e00      	cmp	r6, #0
   27a8c:	d1f7      	bne.n	27a7e <parse_ncellmeas+0x1a>
	 * comma.
	 */
	size_t param_count = get_char_frequency(at_response, ',') + 3;

	cells->ncells_count = 0;
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cells->ncells_count = 0;
   27a92:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
	cells->current_cell.id = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27a96:	60ab      	str	r3, [r5, #8]

	err = at_params_list_init(&resp_list, param_count);
   27a98:	3103      	adds	r1, #3
   27a9a:	a80b      	add	r0, sp, #44	; 0x2c
   27a9c:	f00a f854 	bl	31b48 <at_params_list_init>
	if (err) {
   27aa0:	4604      	mov	r4, r0
   27aa2:	b170      	cbz	r0, 27ac2 <parse_ncellmeas+0x5e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27aa4:	4b96      	ldr	r3, [pc, #600]	; (27d00 <parse_ncellmeas+0x29c>)
   27aa6:	9003      	str	r0, [sp, #12]
   27aa8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   27aac:	2201      	movs	r2, #1
   27aae:	4633      	mov	r3, r6
   27ab0:	4630      	mov	r0, r6
   27ab2:	4994      	ldr	r1, [pc, #592]	; (27d04 <parse_ncellmeas+0x2a0>)
   27ab4:	9600      	str	r6, [sp, #0]
   27ab6:	f00a f99d 	bl	31df4 <z_log_msg_runtime_create.constprop.0>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   27aba:	4620      	mov	r0, r4
   27abc:	b011      	add	sp, #68	; 0x44
   27abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = at_parser_params_from_str(at_response,
   27ac2:	4601      	mov	r1, r0
   27ac4:	aa0b      	add	r2, sp, #44	; 0x2c
   27ac6:	4640      	mov	r0, r8
   27ac8:	f00a f825 	bl	31b16 <at_parser_params_from_str>
	if (err && err != -E2BIG) {
   27acc:	4604      	mov	r4, r0
   27ace:	b180      	cbz	r0, 27af2 <parse_ncellmeas+0x8e>
   27ad0:	1dc3      	adds	r3, r0, #7
   27ad2:	d01e      	beq.n	27b12 <parse_ncellmeas+0xae>
		LOG_ERR("Could not parse AT%%NCELLMEAS response, error: %d", err);
   27ad4:	4b8c      	ldr	r3, [pc, #560]	; (27d08 <parse_ncellmeas+0x2a4>)
   27ad6:	9003      	str	r0, [sp, #12]
   27ad8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   27adc:	4633      	mov	r3, r6
   27ade:	9600      	str	r6, [sp, #0]
		LOG_ERR("Could not get response prefix, error: %d", err);
   27ae0:	2201      	movs	r2, #1
   27ae2:	4618      	mov	r0, r3
   27ae4:	4987      	ldr	r1, [pc, #540]	; (27d04 <parse_ncellmeas+0x2a0>)
   27ae6:	f00a f985 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
	at_params_list_free(&resp_list);
   27aea:	a80b      	add	r0, sp, #44	; 0x2c
   27aec:	f00a f857 	bl	31b9e <at_params_list_free>
	return err;
   27af0:	e7e3      	b.n	27aba <parse_ncellmeas+0x56>
	bool incomplete = false;
   27af2:	4607      	mov	r7, r0
	err = at_params_string_get(&resp_list,
   27af4:	2100      	movs	r1, #0
   27af6:	ab08      	add	r3, sp, #32
   27af8:	aa0d      	add	r2, sp, #52	; 0x34
   27afa:	a80b      	add	r0, sp, #44	; 0x2c
   27afc:	f00a f92d 	bl	31d5a <at_params_string_get>
	if (err) {
   27b00:	4604      	mov	r4, r0
   27b02:	b140      	cbz	r0, 27b16 <parse_ncellmeas+0xb2>
		LOG_ERR("Could not get response prefix, error: %d", err);
   27b04:	4b81      	ldr	r3, [pc, #516]	; (27d0c <parse_ncellmeas+0x2a8>)
   27b06:	9003      	str	r0, [sp, #12]
   27b08:	9302      	str	r3, [sp, #8]
   27b0a:	2300      	movs	r3, #0
   27b0c:	e9cd 3300 	strd	r3, r3, [sp]
   27b10:	e7e6      	b.n	27ae0 <parse_ncellmeas+0x7c>
		incomplete = true;
   27b12:	2701      	movs	r7, #1
   27b14:	e7ee      	b.n	27af4 <parse_ncellmeas+0x90>
	if (!response_is_valid(response_prefix, response_prefix_len,
   27b16:	4a7e      	ldr	r2, [pc, #504]	; (27d10 <parse_ncellmeas+0x2ac>)
   27b18:	9908      	ldr	r1, [sp, #32]
   27b1a:	a80d      	add	r0, sp, #52	; 0x34
   27b1c:	f7ff fd04 	bl	27528 <response_is_valid>
   27b20:	2800      	cmp	r0, #0
   27b22:	d0e2      	beq.n	27aea <parse_ncellmeas+0x86>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_STATUS_INDEX, &status);
   27b24:	2101      	movs	r1, #1
   27b26:	aa05      	add	r2, sp, #20
   27b28:	a80b      	add	r0, sp, #44	; 0x2c
   27b2a:	f00a f8ea 	bl	31d02 <at_params_int_get>
	if (err) {
   27b2e:	4604      	mov	r4, r0
   27b30:	2800      	cmp	r0, #0
   27b32:	d1da      	bne.n	27aea <parse_ncellmeas+0x86>
	if (status != AT_NCELLMEAS_STATUS_VALUE_SUCCESS) {
   27b34:	9b05      	ldr	r3, [sp, #20]
   27b36:	2b00      	cmp	r3, #0
   27b38:	f040 80e0 	bne.w	27cfc <parse_ncellmeas+0x298>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_CELL_ID_INDEX, &tmp, 16);
   27b3c:	2102      	movs	r1, #2
   27b3e:	aa06      	add	r2, sp, #24
   27b40:	a80b      	add	r0, sp, #44	; 0x2c
   27b42:	f00a f98c 	bl	31e5e <string_param_to_int.constprop.0>
	if (err) {
   27b46:	4604      	mov	r4, r0
   27b48:	2800      	cmp	r0, #0
   27b4a:	d1ce      	bne.n	27aea <parse_ncellmeas+0x86>
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   27b4c:	9b06      	ldr	r3, [sp, #24]
	len = sizeof(tmp_str);
   27b4e:	2607      	movs	r6, #7
	if (tmp > LTE_LC_CELL_EUTRAN_ID_MAX) {
   27b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
		tmp = LTE_LC_CELL_EUTRAN_ID_INVALID;
   27b54:	bfa4      	itt	ge
   27b56:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff
   27b5a:	9306      	strge	r3, [sp, #24]
	cells->current_cell.id = tmp;
   27b5c:	9b06      	ldr	r3, [sp, #24]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27b5e:	2103      	movs	r1, #3
	cells->current_cell.id = tmp;
   27b60:	60ab      	str	r3, [r5, #8]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27b62:	aa09      	add	r2, sp, #36	; 0x24
   27b64:	ab07      	add	r3, sp, #28
   27b66:	a80b      	add	r0, sp, #44	; 0x2c
	len = sizeof(tmp_str);
   27b68:	9607      	str	r6, [sp, #28]
	err = at_params_string_get(&resp_list, AT_NCELLMEAS_PLMN_INDEX,
   27b6a:	f00a f8f6 	bl	31d5a <at_params_string_get>
	if (err) {
   27b6e:	4604      	mov	r4, r0
   27b70:	2800      	cmp	r0, #0
   27b72:	d1ba      	bne.n	27aea <parse_ncellmeas+0x86>
	tmp_str[len] = '\0';
   27b74:	9b07      	ldr	r3, [sp, #28]
   27b76:	aa10      	add	r2, sp, #64	; 0x40
   27b78:	4413      	add	r3, r2
   27b7a:	f803 0c1c 	strb.w	r0, [r3, #-28]
	err = string_to_int(&tmp_str[3], 10, &cells->current_cell.mnc);
   27b7e:	210a      	movs	r1, #10
   27b80:	1d2a      	adds	r2, r5, #4
   27b82:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   27b86:	f00a f944 	bl	31e12 <string_to_int>
	if (err) {
   27b8a:	4604      	mov	r4, r0
   27b8c:	2800      	cmp	r0, #0
   27b8e:	d1ac      	bne.n	27aea <parse_ncellmeas+0x86>
	tmp_str[3] = '\0';
   27b90:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
	err = string_to_int(tmp_str, 10, &cells->current_cell.mcc);
   27b94:	462a      	mov	r2, r5
   27b96:	210a      	movs	r1, #10
   27b98:	a809      	add	r0, sp, #36	; 0x24
   27b9a:	f00a f93a 	bl	31e12 <string_to_int>
	if (err) {
   27b9e:	4604      	mov	r4, r0
   27ba0:	2800      	cmp	r0, #0
   27ba2:	d1a2      	bne.n	27aea <parse_ncellmeas+0x86>
	err = string_param_to_int(&resp_list, AT_NCELLMEAS_TAC_INDEX, &tmp, 16);
   27ba4:	2104      	movs	r1, #4
   27ba6:	aa06      	add	r2, sp, #24
   27ba8:	a80b      	add	r0, sp, #44	; 0x2c
   27baa:	f00a f958 	bl	31e5e <string_param_to_int.constprop.0>
	if (err) {
   27bae:	4604      	mov	r4, r0
   27bb0:	2800      	cmp	r0, #0
   27bb2:	d19a      	bne.n	27aea <parse_ncellmeas+0x86>
	cells->current_cell.tac = tmp;
   27bb4:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   27bb6:	2105      	movs	r1, #5
	cells->current_cell.tac = tmp;
   27bb8:	60eb      	str	r3, [r5, #12]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_TIMING_ADV_INDEX,
   27bba:	aa06      	add	r2, sp, #24
   27bbc:	a80b      	add	r0, sp, #44	; 0x2c
   27bbe:	f00a f8a0 	bl	31d02 <at_params_int_get>
	if (err) {
   27bc2:	4604      	mov	r4, r0
   27bc4:	2800      	cmp	r0, #0
   27bc6:	d190      	bne.n	27aea <parse_ncellmeas+0x86>
	cells->current_cell.timing_advance = tmp;
   27bc8:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   27bca:	2106      	movs	r1, #6
	cells->current_cell.timing_advance = tmp;
   27bcc:	82ab      	strh	r3, [r5, #20]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_EARFCN_INDEX,
   27bce:	f105 0210 	add.w	r2, r5, #16
   27bd2:	a80b      	add	r0, sp, #44	; 0x2c
   27bd4:	f00a f895 	bl	31d02 <at_params_int_get>
	if (err) {
   27bd8:	4604      	mov	r4, r0
   27bda:	2800      	cmp	r0, #0
   27bdc:	d185      	bne.n	27aea <parse_ncellmeas+0x86>
	err = at_params_short_get(&resp_list, AT_NCELLMEAS_PHYS_CELL_ID_INDEX,
   27bde:	4631      	mov	r1, r6
   27be0:	f105 0228 	add.w	r2, r5, #40	; 0x28
   27be4:	a80b      	add	r0, sp, #44	; 0x2c
   27be6:	f00a f858 	bl	31c9a <at_params_short_get>
	if (err) {
   27bea:	4604      	mov	r4, r0
   27bec:	2800      	cmp	r0, #0
   27bee:	f47f af7c 	bne.w	27aea <parse_ncellmeas+0x86>
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRP_INDEX, &tmp);
   27bf2:	2108      	movs	r1, #8
   27bf4:	aa06      	add	r2, sp, #24
   27bf6:	a80b      	add	r0, sp, #44	; 0x2c
   27bf8:	f00a f883 	bl	31d02 <at_params_int_get>
	if (err) {
   27bfc:	4604      	mov	r4, r0
   27bfe:	2800      	cmp	r0, #0
   27c00:	f47f af73 	bne.w	27aea <parse_ncellmeas+0x86>
	cells->current_cell.rsrp = tmp;
   27c04:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   27c06:	2109      	movs	r1, #9
	cells->current_cell.rsrp = tmp;
   27c08:	856b      	strh	r3, [r5, #42]	; 0x2a
	err = at_params_int_get(&resp_list, AT_NCELLMEAS_RSRQ_INDEX, &tmp);
   27c0a:	aa06      	add	r2, sp, #24
   27c0c:	a80b      	add	r0, sp, #44	; 0x2c
   27c0e:	f00a f878 	bl	31d02 <at_params_int_get>
	if (err) {
   27c12:	4604      	mov	r4, r0
   27c14:	2800      	cmp	r0, #0
   27c16:	f47f af68 	bne.w	27aea <parse_ncellmeas+0x86>
	cells->current_cell.rsrq = tmp;
   27c1a:	9b06      	ldr	r3, [sp, #24]
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   27c1c:	210a      	movs	r1, #10
	cells->current_cell.rsrq = tmp;
   27c1e:	85ab      	strh	r3, [r5, #44]	; 0x2c
	err = at_params_int64_get(&resp_list, AT_NCELLMEAS_MEASUREMENT_TIME_INDEX,
   27c20:	f105 0220 	add.w	r2, r5, #32
   27c24:	a80b      	add	r0, sp, #44	; 0x2c
   27c26:	f00a f884 	bl	31d32 <at_params_int64_get>
	if (err) {
   27c2a:	4604      	mov	r4, r0
   27c2c:	2800      	cmp	r0, #0
   27c2e:	f47f af5c 	bne.w	27aea <parse_ncellmeas+0x86>
	cells->ncells_count = neighborcell_count_get(at_response);
   27c32:	4640      	mov	r0, r8
   27c34:	f7ff fef2 	bl	27a1c <neighborcell_count_get>
   27c38:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   27c3c:	b2c6      	uxtb	r6, r0
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   27c3e:	a80b      	add	r0, sp, #44	; 0x2c
   27c40:	f00a f8ab 	bl	31d9a <at_params_valid_count_get>
			cells->ncells_count * AT_NCELLMEAS_N_PARAMS_COUNT;
   27c44:	eb06 0686 	add.w	r6, r6, r6, lsl #2
	size_t ta_meas_time_index = AT_NCELLMEAS_PRE_NCELLS_PARAMS_COUNT +
   27c48:	360b      	adds	r6, #11
	if (at_params_valid_count_get(&resp_list) > ta_meas_time_index) {
   27c4a:	42b0      	cmp	r0, r6
   27c4c:	d908      	bls.n	27c60 <parse_ncellmeas+0x1fc>
		err = at_params_int64_get(&resp_list, ta_meas_time_index,
   27c4e:	4631      	mov	r1, r6
   27c50:	f105 0218 	add.w	r2, r5, #24
   27c54:	a80b      	add	r0, sp, #44	; 0x2c
   27c56:	f00a f86c 	bl	31d32 <at_params_int64_get>
		if (err) {
   27c5a:	b128      	cbz	r0, 27c68 <parse_ncellmeas+0x204>
   27c5c:	4604      	mov	r4, r0
   27c5e:	e744      	b.n	27aea <parse_ncellmeas+0x86>
		cells->current_cell.timing_advance_meas_time = 0;
   27c60:	2200      	movs	r2, #0
   27c62:	2300      	movs	r3, #0
   27c64:	e9c5 2306 	strd	r2, r3, [r5, #24]
	if ((cells->ncells_count == 0) || (cells->neighbor_cells == NULL)) {
   27c68:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   27c6c:	2b00      	cmp	r3, #0
   27c6e:	f43f af3c 	beq.w	27aea <parse_ncellmeas+0x86>
   27c72:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27c74:	2b00      	cmp	r3, #0
   27c76:	f43f af38 	beq.w	27aea <parse_ncellmeas+0x86>
   27c7a:	260f      	movs	r6, #15
	for (size_t i = 0; i < cells->ncells_count; i++) {
   27c7c:	f04f 0800 	mov.w	r8, #0
   27c80:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   27c84:	4598      	cmp	r8, r3
   27c86:	d304      	bcc.n	27c92 <parse_ncellmeas+0x22e>
		err = -E2BIG;
   27c88:	2f00      	cmp	r7, #0
   27c8a:	bf18      	it	ne
   27c8c:	f06f 0406 	mvnne.w	r4, #6
   27c90:	e72b      	b.n	27aea <parse_ncellmeas+0x86>
					&cells->neighbor_cells[i].earfcn);
   27c92:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_int_get(&resp_list,
   27c94:	1f31      	subs	r1, r6, #4
   27c96:	eb02 1208 	add.w	r2, r2, r8, lsl #4
   27c9a:	a80b      	add	r0, sp, #44	; 0x2c
   27c9c:	ea4f 1908 	mov.w	r9, r8, lsl #4
   27ca0:	f00a f82f 	bl	31d02 <at_params_int_get>
		if (err) {
   27ca4:	2800      	cmp	r0, #0
   27ca6:	d1d9      	bne.n	27c5c <parse_ncellmeas+0x1f8>
					  &cells->neighbor_cells[i].phys_cell_id);
   27ca8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
		err = at_params_short_get(&resp_list,
   27caa:	1ef1      	subs	r1, r6, #3
					  &cells->neighbor_cells[i].phys_cell_id);
   27cac:	444a      	add	r2, r9
		err = at_params_short_get(&resp_list,
   27cae:	3208      	adds	r2, #8
   27cb0:	a80b      	add	r0, sp, #44	; 0x2c
   27cb2:	f009 fff2 	bl	31c9a <at_params_short_get>
		if (err) {
   27cb6:	2800      	cmp	r0, #0
   27cb8:	d1d0      	bne.n	27c5c <parse_ncellmeas+0x1f8>
		err = at_params_int_get(&resp_list,
   27cba:	aa06      	add	r2, sp, #24
   27cbc:	1eb1      	subs	r1, r6, #2
   27cbe:	a80b      	add	r0, sp, #44	; 0x2c
   27cc0:	f00a f81f 	bl	31d02 <at_params_int_get>
		if (err) {
   27cc4:	2800      	cmp	r0, #0
   27cc6:	d1c9      	bne.n	27c5c <parse_ncellmeas+0x1f8>
		cells->neighbor_cells[i].rsrp = tmp;
   27cc8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   27cca:	9a06      	ldr	r2, [sp, #24]
   27ccc:	444b      	add	r3, r9
   27cce:	815a      	strh	r2, [r3, #10]
		err = at_params_int_get(&resp_list,
   27cd0:	1e71      	subs	r1, r6, #1
   27cd2:	aa06      	add	r2, sp, #24
   27cd4:	a80b      	add	r0, sp, #44	; 0x2c
   27cd6:	f00a f814 	bl	31d02 <at_params_int_get>
		if (err) {
   27cda:	2800      	cmp	r0, #0
   27cdc:	d1be      	bne.n	27c5c <parse_ncellmeas+0x1f8>
		cells->neighbor_cells[i].rsrq = tmp;
   27cde:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   27ce0:	9b06      	ldr	r3, [sp, #24]
   27ce2:	444a      	add	r2, r9
		err = at_params_int_get(&resp_list,
   27ce4:	4631      	mov	r1, r6
		cells->neighbor_cells[i].rsrq = tmp;
   27ce6:	8193      	strh	r3, [r2, #12]
		err = at_params_int_get(&resp_list,
   27ce8:	a80b      	add	r0, sp, #44	; 0x2c
   27cea:	3204      	adds	r2, #4
   27cec:	f00a f809 	bl	31d02 <at_params_int_get>
		if (err) {
   27cf0:	3605      	adds	r6, #5
   27cf2:	2800      	cmp	r0, #0
   27cf4:	d1b2      	bne.n	27c5c <parse_ncellmeas+0x1f8>
	for (size_t i = 0; i < cells->ncells_count; i++) {
   27cf6:	f108 0801 	add.w	r8, r8, #1
   27cfa:	e7c1      	b.n	27c80 <parse_ncellmeas+0x21c>
		err = 1;
   27cfc:	2401      	movs	r4, #1
   27cfe:	e6f4      	b.n	27aea <parse_ncellmeas+0x86>
   27d00:	0003937b 	.word	0x0003937b
   27d04:	00034a98 	.word	0x00034a98
   27d08:	0003974f 	.word	0x0003974f
   27d0c:	000395d3 	.word	0x000395d3
   27d10:	000392dc 	.word	0x000392dc

00027d14 <parse_xmodemsleep>:

int parse_xmodemsleep(const char *at_response, struct lte_lc_modem_sleep *modem_sleep)
{
   27d14:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	struct at_param_list resp_list = {0};
   27d16:	2500      	movs	r5, #0
{
   27d18:	b089      	sub	sp, #36	; 0x24
   27d1a:	4607      	mov	r7, r0
	uint16_t type;

	if (modem_sleep == NULL || at_response == NULL) {
   27d1c:	460e      	mov	r6, r1
	struct at_param_list resp_list = {0};
   27d1e:	e9cd 5506 	strd	r5, r5, [sp, #24]
	if (modem_sleep == NULL || at_response == NULL) {
   27d22:	2900      	cmp	r1, #0
   27d24:	d051      	beq.n	27dca <parse_xmodemsleep+0xb6>
   27d26:	2800      	cmp	r0, #0
   27d28:	d04f      	beq.n	27dca <parse_xmodemsleep+0xb6>
		return -EINVAL;
	}

	err = at_params_list_init(&resp_list, AT_XMODEMSLEEP_PARAMS_COUNT_MAX);
   27d2a:	2104      	movs	r1, #4
   27d2c:	a806      	add	r0, sp, #24
   27d2e:	f009 ff0b 	bl	31b48 <at_params_list_init>
	if (err) {
   27d32:	4604      	mov	r4, r0
   27d34:	b168      	cbz	r0, 27d52 <parse_xmodemsleep+0x3e>
		LOG_ERR("Could not init AT params list, error: %d", err);
   27d36:	4b26      	ldr	r3, [pc, #152]	; (27dd0 <parse_xmodemsleep+0xbc>)
   27d38:	9003      	str	r0, [sp, #12]
   27d3a:	e9cd 5301 	strd	r5, r3, [sp, #4]
   27d3e:	2201      	movs	r2, #1
   27d40:	462b      	mov	r3, r5
   27d42:	4628      	mov	r0, r5
   27d44:	4923      	ldr	r1, [pc, #140]	; (27dd4 <parse_xmodemsleep+0xc0>)
   27d46:	9500      	str	r5, [sp, #0]
   27d48:	f00a f854 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
	}

clean_exit:
	at_params_list_free(&resp_list);
	return err;
}
   27d4c:	4620      	mov	r0, r4
   27d4e:	b009      	add	sp, #36	; 0x24
   27d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_parser_params_from_str(at_response, NULL, &resp_list);
   27d52:	4601      	mov	r1, r0
   27d54:	aa06      	add	r2, sp, #24
   27d56:	4638      	mov	r0, r7
   27d58:	f009 fedd 	bl	31b16 <at_parser_params_from_str>
	if (err) {
   27d5c:	4604      	mov	r4, r0
   27d5e:	b158      	cbz	r0, 27d78 <parse_xmodemsleep+0x64>
		LOG_ERR("Could not parse %%XMODEMSLEEP response, error: %d", err);
   27d60:	4b1d      	ldr	r3, [pc, #116]	; (27dd8 <parse_xmodemsleep+0xc4>)
   27d62:	9003      	str	r0, [sp, #12]
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   27d64:	e9cd 5301 	strd	r5, r3, [sp, #4]
   27d68:	2201      	movs	r2, #1
   27d6a:	462b      	mov	r3, r5
   27d6c:	4628      	mov	r0, r5
   27d6e:	4919      	ldr	r1, [pc, #100]	; (27dd4 <parse_xmodemsleep+0xc0>)
   27d70:	9500      	str	r5, [sp, #0]
   27d72:	f00a f83f 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
		goto clean_exit;
   27d76:	e018      	b.n	27daa <parse_xmodemsleep+0x96>
	err = at_params_unsigned_short_get(&resp_list, AT_XMODEMSLEEP_TYPE_INDEX, &type);
   27d78:	2101      	movs	r1, #1
   27d7a:	f10d 0216 	add.w	r2, sp, #22
   27d7e:	a806      	add	r0, sp, #24
   27d80:	f009 ffa7 	bl	31cd2 <at_params_unsigned_short_get>
	if (err) {
   27d84:	4604      	mov	r4, r0
   27d86:	b110      	cbz	r0, 27d8e <parse_xmodemsleep+0x7a>
		LOG_ERR("Could not get mode sleep type, error: %d", err);
   27d88:	4b14      	ldr	r3, [pc, #80]	; (27ddc <parse_xmodemsleep+0xc8>)
   27d8a:	9003      	str	r0, [sp, #12]
   27d8c:	e7ea      	b.n	27d64 <parse_xmodemsleep+0x50>
	modem_sleep->type = type;
   27d8e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   27d92:	a806      	add	r0, sp, #24
	modem_sleep->type = type;
   27d94:	7033      	strb	r3, [r6, #0]
	if (at_params_valid_count_get(&resp_list) < AT_XMODEMSLEEP_PARAMS_COUNT_MAX - 1) {
   27d96:	f00a f800 	bl	31d9a <at_params_valid_count_get>
   27d9a:	2802      	cmp	r0, #2
   27d9c:	d809      	bhi.n	27db2 <parse_xmodemsleep+0x9e>
		modem_sleep->time = -1;
   27d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27da6:	e9c6 2302 	strd	r2, r3, [r6, #8]
	at_params_list_free(&resp_list);
   27daa:	a806      	add	r0, sp, #24
   27dac:	f009 fef7 	bl	31b9e <at_params_list_free>
	return err;
   27db0:	e7cc      	b.n	27d4c <parse_xmodemsleep+0x38>
	err = at_params_int64_get(&resp_list, AT_XMODEMSLEEP_TIME_INDEX, &modem_sleep->time);
   27db2:	2102      	movs	r1, #2
   27db4:	f106 0208 	add.w	r2, r6, #8
   27db8:	a806      	add	r0, sp, #24
   27dba:	f009 ffba 	bl	31d32 <at_params_int64_get>
	if (err) {
   27dbe:	4604      	mov	r4, r0
   27dc0:	2800      	cmp	r0, #0
   27dc2:	d0f2      	beq.n	27daa <parse_xmodemsleep+0x96>
		LOG_ERR("Could not get time until next modem sleep, error: %d", err);
   27dc4:	4b06      	ldr	r3, [pc, #24]	; (27de0 <parse_xmodemsleep+0xcc>)
   27dc6:	9003      	str	r0, [sp, #12]
   27dc8:	e7cc      	b.n	27d64 <parse_xmodemsleep+0x50>
		return -EINVAL;
   27dca:	f06f 0415 	mvn.w	r4, #21
   27dce:	e7bd      	b.n	27d4c <parse_xmodemsleep+0x38>
   27dd0:	0003937b 	.word	0x0003937b
   27dd4:	00034a98 	.word	0x00034a98
   27dd8:	00039781 	.word	0x00039781
   27ddc:	000397b3 	.word	0x000397b3
   27de0:	000397dc 	.word	0x000397dc

00027de4 <parse_mdmev>:

int parse_mdmev(const char *at_response, enum lte_lc_modem_evt *modem_evt)
{
   27de4:	b5f0      	push	{r4, r5, r6, r7, lr}
   27de6:	460d      	mov	r5, r1
		[LTE_LC_MODEM_EVT_RESET_LOOP] = AT_MDMEV_RESET_LOOP,
		[LTE_LC_MODEM_EVT_BATTERY_LOW] = AT_MDMEV_BATTERY_LOW,
		[LTE_LC_MODEM_EVT_OVERHEATED] = AT_MDMEV_OVERHEATED,
	};

	if (at_response == NULL || modem_evt == NULL) {
   27de8:	4604      	mov	r4, r0
{
   27dea:	b085      	sub	sp, #20
	if (at_response == NULL || modem_evt == NULL) {
   27dec:	b318      	cbz	r0, 27e36 <parse_mdmev+0x52>
   27dee:	b311      	cbz	r1, 27e36 <parse_mdmev+0x52>
		return -EINVAL;
	}

	if (!response_is_valid(at_response, sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1,
   27df0:	2108      	movs	r1, #8
   27df2:	4a12      	ldr	r2, [pc, #72]	; (27e3c <parse_mdmev+0x58>)
   27df4:	f7ff fb98 	bl	27528 <response_is_valid>
   27df8:	4603      	mov	r3, r0
   27dfa:	b958      	cbnz	r0, 27e14 <parse_mdmev+0x30>
			       AT_MDMEV_RESPONSE_PREFIX)) {
		LOG_ERR("Invalid MDMEV response");
   27dfc:	4a10      	ldr	r2, [pc, #64]	; (27e40 <parse_mdmev+0x5c>)
   27dfe:	9000      	str	r0, [sp, #0]
   27e00:	e9cd 0201 	strd	r0, r2, [sp, #4]
   27e04:	490f      	ldr	r1, [pc, #60]	; (27e44 <parse_mdmev+0x60>)
   27e06:	2201      	movs	r2, #1
   27e08:	f009 fff4 	bl	31df4 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   27e0c:	f06f 0004 	mvn.w	r0, #4
	}

	LOG_DBG("No modem event type found: %s", at_response);

	return -ENODATA;
}
   27e10:	b005      	add	sp, #20
   27e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   27e14:	2600      	movs	r6, #0
   27e16:	4f0c      	ldr	r7, [pc, #48]	; (27e48 <parse_mdmev+0x64>)
	const char *start_ptr = at_response + sizeof(AT_MDMEV_RESPONSE_PREFIX) - 1;
   27e18:	3408      	adds	r4, #8
		if (strcmp(event_types[i], start_ptr) == 0) {
   27e1a:	4621      	mov	r1, r4
   27e1c:	f857 0b04 	ldr.w	r0, [r7], #4
   27e20:	f7f5 f934 	bl	1d08c <strcmp>
   27e24:	b908      	cbnz	r0, 27e2a <parse_mdmev+0x46>
			*modem_evt = i;
   27e26:	702e      	strb	r6, [r5, #0]
			return 0;
   27e28:	e7f2      	b.n	27e10 <parse_mdmev+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(event_types); i++) {
   27e2a:	3601      	adds	r6, #1
   27e2c:	2e05      	cmp	r6, #5
   27e2e:	d1f4      	bne.n	27e1a <parse_mdmev+0x36>
	return -ENODATA;
   27e30:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   27e34:	e7ec      	b.n	27e10 <parse_mdmev+0x2c>
		return -EINVAL;
   27e36:	f06f 0015 	mvn.w	r0, #21
   27e3a:	e7e9      	b.n	27e10 <parse_mdmev+0x2c>
   27e3c:	00039811 	.word	0x00039811
   27e40:	0003981a 	.word	0x0003981a
   27e44:	00034a98 	.word	0x00034a98
   27e48:	00035030 	.word	0x00035030

00027e4c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   27e4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   27e4e:	ab0b      	add	r3, sp, #44	; 0x2c
   27e50:	9305      	str	r3, [sp, #20]
   27e52:	9303      	str	r3, [sp, #12]
   27e54:	4b05      	ldr	r3, [pc, #20]	; (27e6c <z_log_msg_runtime_create.constprop.0+0x20>)
   27e56:	2201      	movs	r2, #1
   27e58:	9302      	str	r3, [sp, #8]
   27e5a:	2300      	movs	r3, #0
   27e5c:	4618      	mov	r0, r3
   27e5e:	e9cd 3300 	strd	r3, r3, [sp]
   27e62:	f7f8 fd13 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   27e66:	b007      	add	sp, #28
   27e68:	f85d fb04 	ldr.w	pc, [sp], #4
   27e6c:	00039892 	.word	0x00039892

00027e70 <on_modem_init>:

NRF_MODEM_LIB_ON_INIT(lte_lc_init_hook, on_modem_init, NULL);
NRF_MODEM_LIB_ON_SHUTDOWN(lte_lc_shutdown_hook, on_modem_shutdown, NULL);

static void on_modem_init(int err, void *ctx)
{
   27e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (err) {
   27e72:	4604      	mov	r4, r0
   27e74:	b970      	cbnz	r0, 27e94 <on_modem_init+0x24>
		return;
	}

#if defined(CONFIG_LTE_EDRX_REQ)
	/* Request configured eDRX settings to save power */
	err = lte_lc_edrx_req(true);
   27e76:	2001      	movs	r0, #1
   27e78:	f7ff f8b2 	bl	26fe0 <lte_lc_edrx_req>
	if (err) {
   27e7c:	b150      	cbz	r0, 27e94 <on_modem_init+0x24>
		LOG_ERR("Failed to configure EDRX, err %d", err);
   27e7e:	4b06      	ldr	r3, [pc, #24]	; (27e98 <on_modem_init+0x28>)
   27e80:	9003      	str	r0, [sp, #12]
   27e82:	e9cd 4301 	strd	r4, r3, [sp, #4]
   27e86:	2201      	movs	r2, #1
   27e88:	4623      	mov	r3, r4
   27e8a:	4620      	mov	r0, r4
   27e8c:	4903      	ldr	r1, [pc, #12]	; (27e9c <on_modem_init+0x2c>)
   27e8e:	9400      	str	r4, [sp, #0]
   27e90:	f7ff ffdc 	bl	27e4c <z_log_msg_runtime_create.constprop.0>
	if (err) {
		LOG_ERR("Failed to unlock PLMN, err %d", err);
		return;
	}
#endif
}
   27e94:	b004      	add	sp, #16
   27e96:	bd10      	pop	{r4, pc}
   27e98:	00039892 	.word	0x00039892
   27e9c:	00034a90 	.word	0x00034a90

00027ea0 <pdn_find>:
	return list->head;
   27ea0:	4a05      	ldr	r2, [pc, #20]	; (27eb8 <pdn_find+0x18>)
 */
AT_MONITOR(pdn_cgev, "+CGEV", on_cgev, PAUSED);
AT_MONITOR(pdn_cnec_esm, "+CNEC_ESM", on_cnec_esm, PAUSED);

static struct pdn *pdn_find(int cid)
{
   27ea2:	4603      	mov	r3, r0
   27ea4:	6810      	ldr	r0, [r2, #0]
	struct pdn *pdn;

	SYS_SLIST_FOR_EACH_CONTAINER(&pdn_contexts, pdn, node) {
   27ea6:	b128      	cbz	r0, 27eb4 <pdn_find+0x14>
		if (pdn->context_id == cid) {
   27ea8:	f990 2008 	ldrsb.w	r2, [r0, #8]
   27eac:	429a      	cmp	r2, r3
   27eae:	d001      	beq.n	27eb4 <pdn_find+0x14>
	return node->next;
   27eb0:	6800      	ldr	r0, [r0, #0]
   27eb2:	e7f8      	b.n	27ea6 <pdn_find+0x6>
			return pdn;
		}
	}

	return NULL;
}
   27eb4:	4770      	bx	lr
   27eb6:	bf00      	nop
   27eb8:	2000d4fc 	.word	0x2000d4fc

00027ebc <on_cnec_esm>:

	return pdn;
}

static void on_cnec_esm(const char *notif)
{
   27ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27ebe:	4604      	mov	r4, r0
	uint32_t cid;
	uint32_t esm_err;
	struct pdn *pdn;

	/* +CNEC_ESM: <cause>,<cid> */
	esm_err = strtoul(notif + strlen("+CNEC_ESM: "), &p, 10);
   27ec0:	4813      	ldr	r0, [pc, #76]	; (27f10 <on_cnec_esm+0x54>)
   27ec2:	f7f5 f8ed 	bl	1d0a0 <strlen>
   27ec6:	220a      	movs	r2, #10
   27ec8:	4420      	add	r0, r4
   27eca:	a901      	add	r1, sp, #4
   27ecc:	f006 f9a4 	bl	2e218 <strtoul>
   27ed0:	4604      	mov	r4, r0

	if (!p || *p != ',') {
   27ed2:	9801      	ldr	r0, [sp, #4]
   27ed4:	b1d0      	cbz	r0, 27f0c <on_cnec_esm+0x50>
   27ed6:	7803      	ldrb	r3, [r0, #0]
   27ed8:	2b2c      	cmp	r3, #44	; 0x2c
   27eda:	d117      	bne.n	27f0c <on_cnec_esm+0x50>
		return;
	}

	cid = strtoul(p + 1, NULL, 10);
   27edc:	220a      	movs	r2, #10
   27ede:	2100      	movs	r1, #0
   27ee0:	3001      	adds	r0, #1
   27ee2:	f006 f999 	bl	2e218 <strtoul>
   27ee6:	4605      	mov	r5, r0

	pdn = pdn_find(cid);
   27ee8:	f7ff ffda 	bl	27ea0 <pdn_find>
	if (!pdn) {
   27eec:	b170      	cbz	r0, 27f0c <on_cnec_esm+0x50>
		return;
	}

	if (pdn->callback) {
   27eee:	6843      	ldr	r3, [r0, #4]
   27ef0:	b11b      	cbz	r3, 27efa <on_cnec_esm+0x3e>
		pdn->callback((intptr_t)cid, PDN_EVENT_CNEC_ESM, esm_err);
   27ef2:	4622      	mov	r2, r4
   27ef4:	2100      	movs	r1, #0
   27ef6:	b2e8      	uxtb	r0, r5
   27ef8:	4798      	blx	r3
	}

	if (cid == pdn_act_notif.cid) {
   27efa:	4806      	ldr	r0, [pc, #24]	; (27f14 <on_cnec_esm+0x58>)
   27efc:	f990 3000 	ldrsb.w	r3, [r0]
   27f00:	42ab      	cmp	r3, r5
   27f02:	d103      	bne.n	27f0c <on_cnec_esm+0x50>
		pdn_act_notif.esm = esm_err;
   27f04:	7044      	strb	r4, [r0, #1]
	z_impl_k_sem_give(sem);
   27f06:	301c      	adds	r0, #28
   27f08:	f004 fb5c 	bl	2c5c4 <z_impl_k_sem_give>
		k_sem_give(&pdn_act_notif.sem_cnec);
	}
}
   27f0c:	b003      	add	sp, #12
   27f0e:	bd30      	pop	{r4, r5, pc}
   27f10:	000398f5 	.word	0x000398f5
   27f14:	2000d4c8 	.word	0x2000d4c8

00027f18 <on_cfun>:

static void on_cfun(enum lte_lc_func_mode mode, void *ctx)
{
	int err;

	if (mode == LTE_LC_FUNC_MODE_NORMAL ||
   27f18:	2801      	cmp	r0, #1
{
   27f1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (mode == LTE_LC_FUNC_MODE_NORMAL ||
   27f1c:	d001      	beq.n	27f22 <on_cfun+0xa>
   27f1e:	2815      	cmp	r0, #21
   27f20:	d11d      	bne.n	27f5e <on_cfun+0x46>
	    mode == LTE_LC_FUNC_MODE_ACTIVATE_LTE) {
		LOG_DBG("Subscribing to +CNEC=16 and +CGEREP=1");
		err = nrf_modem_at_printf("AT+CNEC=16");
   27f22:	4810      	ldr	r0, [pc, #64]	; (27f64 <on_cfun+0x4c>)
   27f24:	f003 f918 	bl	2b158 <nrf_modem_at_printf>
		if (err) {
   27f28:	b150      	cbz	r0, 27f40 <on_cfun+0x28>
			LOG_ERR("Unable to subscribe to +CNEC=16, err %d", err);
   27f2a:	4b0f      	ldr	r3, [pc, #60]	; (27f68 <on_cfun+0x50>)
   27f2c:	9003      	str	r0, [sp, #12]
   27f2e:	9302      	str	r3, [sp, #8]
   27f30:	2300      	movs	r3, #0
   27f32:	2201      	movs	r2, #1
   27f34:	4618      	mov	r0, r3
   27f36:	e9cd 3300 	strd	r3, r3, [sp]
   27f3a:	490c      	ldr	r1, [pc, #48]	; (27f6c <on_cfun+0x54>)
   27f3c:	f009 ffab 	bl	31e96 <z_log_msg_runtime_create.constprop.0>
		}
		err = nrf_modem_at_printf("AT+CGEREP=1");
   27f40:	480b      	ldr	r0, [pc, #44]	; (27f70 <on_cfun+0x58>)
   27f42:	f003 f909 	bl	2b158 <nrf_modem_at_printf>
		if (err) {
   27f46:	b150      	cbz	r0, 27f5e <on_cfun+0x46>
			LOG_ERR("Unable to subscribe to +CGEREP=1, err %d", err);
   27f48:	4b0a      	ldr	r3, [pc, #40]	; (27f74 <on_cfun+0x5c>)
   27f4a:	9003      	str	r0, [sp, #12]
   27f4c:	9302      	str	r3, [sp, #8]
   27f4e:	2300      	movs	r3, #0
   27f50:	2201      	movs	r2, #1
   27f52:	4618      	mov	r0, r3
   27f54:	e9cd 3300 	strd	r3, r3, [sp]
   27f58:	4904      	ldr	r1, [pc, #16]	; (27f6c <on_cfun+0x54>)
   27f5a:	f009 ff9c 	bl	31e96 <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   27f5e:	b005      	add	sp, #20
   27f60:	f85d fb04 	ldr.w	pc, [sp], #4
   27f64:	00039901 	.word	0x00039901
   27f68:	0003990c 	.word	0x0003990c
   27f6c:	00034ad0 	.word	0x00034ad0
   27f70:	00039934 	.word	0x00039934
   27f74:	00039940 	.word	0x00039940

00027f78 <pdn_sys_init>:
#endif /* CONFIG_LTE_LINK_CONTROL */

static int pdn_sys_init(const struct device *unused)
{
   27f78:	b510      	push	{r4, lr}
	pdn_act_notif.cid = CID_UNASSIGNED;
   27f7a:	4c0f      	ldr	r4, [pc, #60]	; (27fb8 <pdn_sys_init+0x40>)
   27f7c:	23ff      	movs	r3, #255	; 0xff
   27f7e:	4620      	mov	r0, r4
   27f80:	f800 3b04 	strb.w	r3, [r0], #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   27f84:	2201      	movs	r2, #1
   27f86:	2100      	movs	r1, #0
   27f88:	f00b fa82 	bl	33490 <z_impl_k_sem_init>
   27f8c:	2201      	movs	r2, #1
   27f8e:	2100      	movs	r1, #0
   27f90:	f104 001c 	add.w	r0, r4, #28
   27f94:	f00b fa7c 	bl	33490 <z_impl_k_sem_init>
	list->head = NULL;
   27f98:	2000      	movs	r0, #0
   27f9a:	4b08      	ldr	r3, [pc, #32]	; (27fbc <pdn_sys_init+0x44>)
	list->tail = NULL;
   27f9c:	e9c3 0000 	strd	r0, r0, [r3]
 *
 * @param mon The monitor to resume.
 */
static inline void at_monitor_resume(struct at_monitor_entry *mon)
{
	mon->flags.paused = false;
   27fa0:	4b07      	ldr	r3, [pc, #28]	; (27fc0 <pdn_sys_init+0x48>)
   27fa2:	7a1a      	ldrb	r2, [r3, #8]
   27fa4:	f360 0200 	bfi	r2, r0, #0, #1
   27fa8:	721a      	strb	r2, [r3, #8]
   27faa:	4b06      	ldr	r3, [pc, #24]	; (27fc4 <pdn_sys_init+0x4c>)
   27fac:	7a1a      	ldrb	r2, [r3, #8]
   27fae:	f360 0200 	bfi	r2, r0, #0, #1
   27fb2:	721a      	strb	r2, [r3, #8]

	at_monitor_resume(&pdn_cgev);
	at_monitor_resume(&pdn_cnec_esm);

	return 0;
}
   27fb4:	bd10      	pop	{r4, pc}
   27fb6:	bf00      	nop
   27fb8:	2000d4c8 	.word	0x2000d4c8
   27fbc:	2000d4fc 	.word	0x2000d4fc
   27fc0:	2000c8bc 	.word	0x2000c8bc
   27fc4:	2000c8c8 	.word	0x2000c8c8

00027fc8 <on_cgev>:
{
   27fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} map[] = {
   27fcc:	4d2c      	ldr	r5, [pc, #176]	; (28080 <on_cgev+0xb8>)
{
   27fce:	b08c      	sub	sp, #48	; 0x30
	} map[] = {
   27fd0:	ac02      	add	r4, sp, #8
{
   27fd2:	4606      	mov	r6, r0
	} map[] = {
   27fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   27fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   27fdc:	e895 0003 	ldmia.w	r5, {r0, r1}
   27fe0:	e884 0003 	stmia.w	r4, {r0, r1}
	for (size_t i = 0; i < ARRAY_SIZE(map); i++) {
   27fe4:	2400      	movs	r4, #0
   27fe6:	f10d 0808 	add.w	r8, sp, #8
		p = strstr(notif, map[i].notif);
   27fea:	f858 7034 	ldr.w	r7, [r8, r4, lsl #3]
   27fee:	4630      	mov	r0, r6
   27ff0:	4639      	mov	r1, r7
   27ff2:	f00c f819 	bl	34028 <strstr>
   27ff6:	4605      	mov	r5, r0
   27ff8:	9001      	str	r0, [sp, #4]
		if (!p) {
   27ffa:	b928      	cbnz	r0, 28008 <on_cgev+0x40>
	for (size_t i = 0; i < ARRAY_SIZE(map); i++) {
   27ffc:	3401      	adds	r4, #1
   27ffe:	2c05      	cmp	r4, #5
   28000:	d1f3      	bne.n	27fea <on_cgev+0x22>
}
   28002:	b00c      	add	sp, #48	; 0x30
   28004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cid = strtoul(p + strlen(map[i].notif), &p, 10);
   28008:	4638      	mov	r0, r7
   2800a:	f7f5 f849 	bl	1d0a0 <strlen>
   2800e:	220a      	movs	r2, #10
   28010:	4428      	add	r0, r5
   28012:	a901      	add	r1, sp, #4
   28014:	f006 f900 	bl	2e218 <strtoul>
		if (cid == pdn_act_notif.cid && map[i].event == PDN_EVENT_ACTIVATED) {
   28018:	4d1a      	ldr	r5, [pc, #104]	; (28084 <on_cgev+0xbc>)
   2801a:	b2c6      	uxtb	r6, r0
   2801c:	f995 3000 	ldrsb.w	r3, [r5]
   28020:	429e      	cmp	r6, r3
   28022:	d113      	bne.n	2804c <on_cgev+0x84>
   28024:	ab0c      	add	r3, sp, #48	; 0x30
   28026:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2802a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
   2802e:	2b01      	cmp	r3, #1
   28030:	d10c      	bne.n	2804c <on_cgev+0x84>
			if (*p == ',') {
   28032:	9801      	ldr	r0, [sp, #4]
   28034:	7803      	ldrb	r3, [r0, #0]
   28036:	2b2c      	cmp	r3, #44	; 0x2c
   28038:	d11e      	bne.n	28078 <on_cgev+0xb0>
				pdn_act_notif.reason = strtol(p + 1, NULL, 10);
   2803a:	220a      	movs	r2, #10
   2803c:	2100      	movs	r1, #0
   2803e:	3001      	adds	r0, #1
   28040:	f005 ffce 	bl	2dfe0 <strtol>
   28044:	70a8      	strb	r0, [r5, #2]
	z_impl_k_sem_give(sem);
   28046:	4810      	ldr	r0, [pc, #64]	; (28088 <on_cgev+0xc0>)
   28048:	f004 fabc 	bl	2c5c4 <z_impl_k_sem_give>
	return list->head;
   2804c:	4b0f      	ldr	r3, [pc, #60]	; (2808c <on_cgev+0xc4>)
   2804e:	681d      	ldr	r5, [r3, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pdn_contexts, pdn, node) {
   28050:	2d00      	cmp	r5, #0
   28052:	d0d6      	beq.n	28002 <on_cgev+0x3a>
				pdn->callback(cid, map[i].event, 0);
   28054:	ab0c      	add	r3, sp, #48	; 0x30
   28056:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
			if (pdn->context_id == cid && pdn->callback) {
   2805a:	f995 3008 	ldrsb.w	r3, [r5, #8]
   2805e:	42b3      	cmp	r3, r6
   28060:	d106      	bne.n	28070 <on_cgev+0xa8>
   28062:	686b      	ldr	r3, [r5, #4]
   28064:	b123      	cbz	r3, 28070 <on_cgev+0xa8>
				pdn->callback(cid, map[i].event, 0);
   28066:	2200      	movs	r2, #0
   28068:	4630      	mov	r0, r6
   2806a:	f814 1c24 	ldrb.w	r1, [r4, #-36]
   2806e:	4798      	blx	r3
	return node->next;
   28070:	682d      	ldr	r5, [r5, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pdn_contexts, pdn, node) {
   28072:	2d00      	cmp	r5, #0
   28074:	d1f1      	bne.n	2805a <on_cgev+0x92>
   28076:	e7c4      	b.n	28002 <on_cgev+0x3a>
				pdn_act_notif.reason = PDN_ACT_REASON_NONE;
   28078:	23ff      	movs	r3, #255	; 0xff
   2807a:	70ab      	strb	r3, [r5, #2]
   2807c:	e7e3      	b.n	28046 <on_cgev+0x7e>
   2807e:	bf00      	nop
   28080:	00034b38 	.word	0x00034b38
   28084:	2000d4c8 	.word	0x2000d4c8
   28088:	2000d4cc 	.word	0x2000d4cc
   2808c:	2000d4fc 	.word	0x2000d4fc

00028090 <pdn_ctx_configure>:
{
   28090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	char family[] = "IPV4V6"; /* longest family */
   28094:	4e31      	ldr	r6, [pc, #196]	; (2815c <pdn_ctx_configure+0xcc>)
{
   28096:	4607      	mov	r7, r0
   28098:	4690      	mov	r8, r2
   2809a:	461d      	mov	r5, r3
	char family[] = "IPV4V6"; /* longest family */
   2809c:	6830      	ldr	r0, [r6, #0]
   2809e:	88b2      	ldrh	r2, [r6, #4]
   280a0:	79b3      	ldrb	r3, [r6, #6]
{
   280a2:	b088      	sub	sp, #32
	if (!apn) {
   280a4:	460c      	mov	r4, r1
	char family[] = "IPV4V6"; /* longest family */
   280a6:	9006      	str	r0, [sp, #24]
   280a8:	f8ad 201c 	strh.w	r2, [sp, #28]
   280ac:	f88d 301e 	strb.w	r3, [sp, #30]
	if (!apn) {
   280b0:	2900      	cmp	r1, #0
   280b2:	d04d      	beq.n	28150 <pdn_ctx_configure+0xc0>
	if (strlen(apn) >= APN_STR_MAX_LEN) {
   280b4:	4608      	mov	r0, r1
   280b6:	f7f4 fff3 	bl	1d0a0 <strlen>
   280ba:	283f      	cmp	r0, #63	; 0x3f
   280bc:	d84b      	bhi.n	28156 <pdn_ctx_configure+0xc6>
	switch (fam) {
   280be:	f1b8 0f03 	cmp.w	r8, #3
   280c2:	d808      	bhi.n	280d6 <pdn_ctx_configure+0x46>
   280c4:	e8df f008 	tbb	[pc, r8]
   280c8:	372e2b02 	.word	0x372e2b02
		strncpy(family, "IP", sizeof(family));
   280cc:	2207      	movs	r2, #7
   280ce:	4924      	ldr	r1, [pc, #144]	; (28160 <pdn_ctx_configure+0xd0>)
		strncpy(family, "IPV6", sizeof(family));
   280d0:	a806      	add	r0, sp, #24
   280d2:	f00b ff8a 	bl	33fea <strncpy>
	if (opt) {
   280d6:	2d00      	cmp	r5, #0
   280d8:	d033      	beq.n	28142 <pdn_ctx_configure+0xb2>
		err = nrf_modem_at_printf("AT+CGDCONT=%u,%s,%s,,,,%u,,,,%u,%u",
   280da:	78ab      	ldrb	r3, [r5, #2]
   280dc:	4639      	mov	r1, r7
   280de:	9302      	str	r3, [sp, #8]
   280e0:	786b      	ldrb	r3, [r5, #1]
   280e2:	4820      	ldr	r0, [pc, #128]	; (28164 <pdn_ctx_configure+0xd4>)
   280e4:	9301      	str	r3, [sp, #4]
   280e6:	782b      	ldrb	r3, [r5, #0]
   280e8:	aa06      	add	r2, sp, #24
   280ea:	9300      	str	r3, [sp, #0]
   280ec:	4623      	mov	r3, r4
   280ee:	f003 f833 	bl	2b158 <nrf_modem_at_printf>
		err = nrf_modem_at_printf("AT+CGDCONT=%u,%s,%s", cid, family, apn);
   280f2:	4604      	mov	r4, r0
	if (err) {
   280f4:	b178      	cbz	r0, 28116 <pdn_ctx_configure+0x86>
		LOG_ERR("Failed to configure CID %d, err, %d", cid, err);
   280f6:	4b1c      	ldr	r3, [pc, #112]	; (28168 <pdn_ctx_configure+0xd8>)
   280f8:	e9cd 7003 	strd	r7, r0, [sp, #12]
   280fc:	9302      	str	r3, [sp, #8]
   280fe:	2300      	movs	r3, #0
   28100:	2201      	movs	r2, #1
   28102:	4618      	mov	r0, r3
   28104:	e9cd 3300 	strd	r3, r3, [sp]
   28108:	4918      	ldr	r1, [pc, #96]	; (2816c <pdn_ctx_configure+0xdc>)
   2810a:	f009 fec4 	bl	31e96 <z_log_msg_runtime_create.constprop.0>
			err = -ENOEXEC;
   2810e:	2c00      	cmp	r4, #0
   28110:	bfc8      	it	gt
   28112:	f06f 0407 	mvngt.w	r4, #7
}
   28116:	4620      	mov	r0, r4
   28118:	b008      	add	sp, #32
   2811a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strncpy(family, "IPV6", sizeof(family));
   2811e:	2207      	movs	r2, #7
   28120:	4913      	ldr	r1, [pc, #76]	; (28170 <pdn_ctx_configure+0xe0>)
   28122:	e7d5      	b.n	280d0 <pdn_ctx_configure+0x40>
		strncpy(family, "IPV4V6", sizeof(family));
   28124:	6830      	ldr	r0, [r6, #0]
   28126:	88b2      	ldrh	r2, [r6, #4]
   28128:	79b3      	ldrb	r3, [r6, #6]
   2812a:	9006      	str	r0, [sp, #24]
   2812c:	f8ad 201c 	strh.w	r2, [sp, #28]
   28130:	f88d 301e 	strb.w	r3, [sp, #30]
		break;
   28134:	e7cf      	b.n	280d6 <pdn_ctx_configure+0x46>
		strncpy(family, "Non-IP", sizeof(family));
   28136:	4b0f      	ldr	r3, [pc, #60]	; (28174 <pdn_ctx_configure+0xe4>)
   28138:	6818      	ldr	r0, [r3, #0]
   2813a:	889a      	ldrh	r2, [r3, #4]
   2813c:	9006      	str	r0, [sp, #24]
   2813e:	799b      	ldrb	r3, [r3, #6]
   28140:	e7f4      	b.n	2812c <pdn_ctx_configure+0x9c>
		err = nrf_modem_at_printf("AT+CGDCONT=%u,%s,%s", cid, family, apn);
   28142:	4623      	mov	r3, r4
   28144:	4639      	mov	r1, r7
   28146:	aa06      	add	r2, sp, #24
   28148:	480b      	ldr	r0, [pc, #44]	; (28178 <pdn_ctx_configure+0xe8>)
   2814a:	f003 f805 	bl	2b158 <nrf_modem_at_printf>
   2814e:	e7d0      	b.n	280f2 <pdn_ctx_configure+0x62>
		return -EFAULT;
   28150:	f06f 040d 	mvn.w	r4, #13
   28154:	e7df      	b.n	28116 <pdn_ctx_configure+0x86>
		return -EINVAL;
   28156:	f06f 0415 	mvn.w	r4, #21
   2815a:	e7dc      	b.n	28116 <pdn_ctx_configure+0x86>
   2815c:	000399c4 	.word	0x000399c4
   28160:	000399cf 	.word	0x000399cf
   28164:	00039969 	.word	0x00039969
   28168:	000399a0 	.word	0x000399a0
   2816c:	00034ad0 	.word	0x00034ad0
   28170:	000398e2 	.word	0x000398e2
   28174:	000399cb 	.word	0x000399cb
   28178:	0003998c 	.word	0x0003998c

0002817c <on_modem_init>:
{
   2817c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	err = pdn_ctx_configure(0, CONFIG_PDN_DEFAULT_APN,
   2817e:	2300      	movs	r3, #0
   28180:	4909      	ldr	r1, [pc, #36]	; (281a8 <on_modem_init+0x2c>)
   28182:	461a      	mov	r2, r3
   28184:	4618      	mov	r0, r3
   28186:	f7ff ff83 	bl	28090 <pdn_ctx_configure>
	if (err) {
   2818a:	b150      	cbz	r0, 281a2 <on_modem_init+0x26>
		LOG_ERR("Failed to configure default CID, err %d", err);
   2818c:	4b07      	ldr	r3, [pc, #28]	; (281ac <on_modem_init+0x30>)
   2818e:	9003      	str	r0, [sp, #12]
   28190:	9302      	str	r3, [sp, #8]
   28192:	2300      	movs	r3, #0
   28194:	2201      	movs	r2, #1
   28196:	4618      	mov	r0, r3
   28198:	e9cd 3300 	strd	r3, r3, [sp]
   2819c:	4904      	ldr	r1, [pc, #16]	; (281b0 <on_modem_init+0x34>)
   2819e:	f009 fe7a 	bl	31e96 <z_log_msg_runtime_create.constprop.0>
}
   281a2:	b005      	add	sp, #20
   281a4:	f85d fb04 	ldr.w	pc, [sp], #4
   281a8:	0003571f 	.word	0x0003571f
   281ac:	000399d2 	.word	0x000399d2
   281b0:	00034ad0 	.word	0x00034ad0

000281b4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   281b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   281b6:	ab0b      	add	r3, sp, #44	; 0x2c
   281b8:	9305      	str	r3, [sp, #20]
   281ba:	9303      	str	r3, [sp, #12]
   281bc:	4b05      	ldr	r3, [pc, #20]	; (281d4 <z_log_msg_runtime_create.constprop.0+0x20>)
   281be:	2201      	movs	r2, #1
   281c0:	9302      	str	r3, [sp, #8]
   281c2:	2300      	movs	r3, #0
   281c4:	4618      	mov	r0, r3
   281c6:	e9cd 3300 	strd	r3, r3, [sp]
   281ca:	f7f8 fb5f 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   281ce:	b007      	add	sp, #28
   281d0:	f85d fb04 	ldr.w	pc, [sp], #4
   281d4:	000399fa 	.word	0x000399fa

000281d8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   281d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   281da:	f7f8 fae3 	bl	207a4 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   281de:	2000      	movs	r0, #0
   281e0:	4b05      	ldr	r3, [pc, #20]	; (281f8 <k_sys_fatal_error_handler+0x20>)
   281e2:	e9cd 0000 	strd	r0, r0, [sp]
   281e6:	9302      	str	r3, [sp, #8]
   281e8:	2201      	movs	r2, #1
   281ea:	4603      	mov	r3, r0
   281ec:	4903      	ldr	r1, [pc, #12]	; (281fc <k_sys_fatal_error_handler+0x24>)
   281ee:	f7ff ffe1 	bl	281b4 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   281f2:	2000      	movs	r0, #0
   281f4:	f7fa f8e8 	bl	223c8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   281f8:	000399fa 	.word	0x000399fa
   281fc:	00034a68 	.word	0x00034a68

00028200 <translate_error>:
	cmee_control(DISABLE);
}

static int translate_error(int err)
{
	if (err < 0) {
   28200:	2800      	cmp	r0, #0
   28202:	db0b      	blt.n	2821c <translate_error+0x1c>
 *
 * @returns int The CME or CMS error code.
 */
static inline int nrf_modem_at_err(int error)
{
	return (error & 0xff00ffff);
   28204:	f46f 7300 	mvn.w	r3, #512	; 0x200
   28208:	f420 007f 	bic.w	r0, r0, #16711680	; 0xff0000
   2820c:	4418      	add	r0, r3
   2820e:	2805      	cmp	r0, #5
   28210:	d803      	bhi.n	2821a <translate_error+0x1a>
   28212:	4b03      	ldr	r3, [pc, #12]	; (28220 <translate_error+0x20>)
   28214:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   28218:	4770      	bx	lr
		 */
		return err;
	}

	/* In case of CME error translate to an errno value */
	switch (nrf_modem_at_err(err)) {
   2821a:	4802      	ldr	r0, [pc, #8]	; (28224 <translate_error+0x24>)
		 * situation is clearly distinguishable.
		 */
		__ASSERT(false, "Untranslated CME error %d!", nrf_modem_at_err(err));
		return 0xBAADBAAD;
	}
}
   2821c:	4770      	bx	lr
   2821e:	bf00      	nop
   28220:	00035084 	.word	0x00035084
   28224:	baadbaad 	.word	0xbaadbaad

00028228 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   28228:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2822a:	ab0b      	add	r3, sp, #44	; 0x2c
   2822c:	9305      	str	r3, [sp, #20]
   2822e:	9303      	str	r3, [sp, #12]
   28230:	4b05      	ldr	r3, [pc, #20]	; (28248 <z_log_msg_runtime_create.constprop.0+0x20>)
   28232:	2202      	movs	r2, #2
   28234:	9302      	str	r3, [sp, #8]
   28236:	2300      	movs	r3, #0
   28238:	4618      	mov	r0, r3
   2823a:	e9cd 3300 	strd	r3, r3, [sp]
   2823e:	f7f8 fb25 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   28242:	b007      	add	sp, #28
   28244:	f85d fb04 	ldr.w	pc, [sp], #4
   28248:	00039a17 	.word	0x00039a17

0002824c <cmee_enable>:
{
   2824c:	b510      	push	{r4, lr}
   2824e:	b086      	sub	sp, #24
   28250:	4604      	mov	r4, r0
	err = nrf_modem_at_scanf("AT+CMEE?", "+CMEE: %d", &active);
   28252:	4911      	ldr	r1, [pc, #68]	; (28298 <cmee_enable+0x4c>)
   28254:	4811      	ldr	r0, [pc, #68]	; (2829c <cmee_enable+0x50>)
   28256:	aa05      	add	r2, sp, #20
   28258:	f003 f862 	bl	2b320 <nrf_modem_at_scanf>
	if (err < 0) {
   2825c:	2800      	cmp	r0, #0
   2825e:	da13      	bge.n	28288 <cmee_enable+0x3c>
		LOG_WRN("Failed to retrieve CMEE status, err %d", err);
   28260:	4b0f      	ldr	r3, [pc, #60]	; (282a0 <cmee_enable+0x54>)
   28262:	9003      	str	r0, [sp, #12]
   28264:	9302      	str	r3, [sp, #8]
   28266:	2300      	movs	r3, #0
   28268:	2202      	movs	r2, #2
   2826a:	4618      	mov	r0, r3
   2826c:	e9cd 3300 	strd	r3, r3, [sp]
   28270:	490c      	ldr	r1, [pc, #48]	; (282a4 <cmee_enable+0x58>)
   28272:	f7ff ffd9 	bl	28228 <z_log_msg_runtime_create.constprop.0>
		*was_enabled = false;
   28276:	2300      	movs	r3, #0
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   28278:	2101      	movs	r1, #1
   2827a:	480b      	ldr	r0, [pc, #44]	; (282a8 <cmee_enable+0x5c>)
		*was_enabled = false;
   2827c:	7023      	strb	r3, [r4, #0]
}
   2827e:	b006      	add	sp, #24
   28280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   28284:	f002 bf68 	b.w	2b158 <nrf_modem_at_printf>
	return active ? true : false;
   28288:	9b05      	ldr	r3, [sp, #20]
	if (!cmee_is_active()) {
   2828a:	2b00      	cmp	r3, #0
   2828c:	d0f3      	beq.n	28276 <cmee_enable+0x2a>
		*was_enabled = true;
   2828e:	2301      	movs	r3, #1
   28290:	7023      	strb	r3, [r4, #0]
}
   28292:	b006      	add	sp, #24
   28294:	bd10      	pop	{r4, pc}
   28296:	bf00      	nop
   28298:	00039a3e 	.word	0x00039a3e
   2829c:	00039a48 	.word	0x00039a48
   282a0:	00039a17 	.word	0x00039a17
   282a4:	00034aa8 	.word	0x00034aa8
   282a8:	00039a51 	.word	0x00039a51

000282ac <cmee_disable>:
	return nrf_modem_at_printf("AT+CMEE=%d", state);
   282ac:	2100      	movs	r1, #0
   282ae:	4801      	ldr	r0, [pc, #4]	; (282b4 <cmee_disable+0x8>)
   282b0:	f002 bf52 	b.w	2b158 <nrf_modem_at_printf>
   282b4:	00039a51 	.word	0x00039a51

000282b8 <key_fetch>:

/* Read the given credential into the static buffer */
static int key_fetch(nrf_sec_tag_t tag,
		     enum modem_key_mgmt_cred_type cred_type)
{
   282b8:	b510      	push	{r4, lr}
   282ba:	460c      	mov	r4, r1
   282bc:	b086      	sub	sp, #24
   282be:	9003      	str	r0, [sp, #12]
	int err;
	bool cmee_was_active;

	cmee_enable(&cmee_was_active);
   282c0:	f10d 0017 	add.w	r0, sp, #23
   282c4:	f7ff ffc2 	bl	2824c <cmee_enable>

	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   282c8:	9b03      	ldr	r3, [sp, #12]
   282ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   282ce:	4a0a      	ldr	r2, [pc, #40]	; (282f8 <key_fetch+0x40>)
   282d0:	480a      	ldr	r0, [pc, #40]	; (282fc <key_fetch+0x44>)
   282d2:	9400      	str	r4, [sp, #0]
   282d4:	f002 ff88 	bl	2b1e8 <nrf_modem_at_cmd>
			       "AT%%CMNG=2,%u,%d", tag, cred_type);

	if (!cmee_was_active) {
   282d8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   282dc:	b91b      	cbnz	r3, 282e6 <key_fetch+0x2e>
   282de:	9003      	str	r0, [sp, #12]
		cmee_disable();
   282e0:	f7ff ffe4 	bl	282ac <cmee_disable>
   282e4:	9803      	ldr	r0, [sp, #12]
	}

	if (err) {
   282e6:	b120      	cbz	r0, 282f2 <key_fetch+0x3a>
		return translate_error(err);
	}

	return 0;
}
   282e8:	b006      	add	sp, #24
   282ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return translate_error(err);
   282ee:	f7ff bf87 	b.w	28200 <translate_error>
}
   282f2:	b006      	add	sp, #24
   282f4:	bd10      	pop	{r4, pc}
   282f6:	bf00      	nop
   282f8:	00039a5c 	.word	0x00039a5c
   282fc:	2000f788 	.word	0x2000f788

00028300 <modem_key_mgmt_write>:

int modem_key_mgmt_write(nrf_sec_tag_t sec_tag,
			 enum modem_key_mgmt_cred_type cred_type,
			 const void *buf, size_t len)
{
   28300:	b5f0      	push	{r4, r5, r6, r7, lr}
   28302:	4606      	mov	r6, r0
   28304:	460f      	mov	r7, r1
   28306:	461c      	mov	r4, r3
	int err;
	bool cmee_was_enabled;

	if (buf == NULL || len == 0) {
   28308:	4615      	mov	r5, r2
{
   2830a:	b085      	sub	sp, #20
	if (buf == NULL || len == 0) {
   2830c:	b1c2      	cbz	r2, 28340 <modem_key_mgmt_write+0x40>
   2830e:	b1bb      	cbz	r3, 28340 <modem_key_mgmt_write+0x40>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_enabled);
   28310:	f10d 000f 	add.w	r0, sp, #15
   28314:	f7ff ff9a 	bl	2824c <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=0,%u,%d,\"%.*s\"",
   28318:	4623      	mov	r3, r4
   2831a:	463a      	mov	r2, r7
   2831c:	4631      	mov	r1, r6
   2831e:	480b      	ldr	r0, [pc, #44]	; (2834c <modem_key_mgmt_write+0x4c>)
   28320:	9500      	str	r5, [sp, #0]
   28322:	f002 ff19 	bl	2b158 <nrf_modem_at_printf>
				  sec_tag, cred_type, len, (const char *)buf);

	if (!cmee_was_enabled) {
   28326:	f89d 300f 	ldrb.w	r3, [sp, #15]
	err = nrf_modem_at_printf("AT%%CMNG=0,%u,%d,\"%.*s\"",
   2832a:	4604      	mov	r4, r0
	if (!cmee_was_enabled) {
   2832c:	b90b      	cbnz	r3, 28332 <modem_key_mgmt_write+0x32>
		cmee_disable();
   2832e:	f7ff ffbd 	bl	282ac <cmee_disable>
	}

	if (err) {
   28332:	b13c      	cbz	r4, 28344 <modem_key_mgmt_write+0x44>
		return translate_error(err);
   28334:	4620      	mov	r0, r4
	}

	return 0;
}
   28336:	b005      	add	sp, #20
   28338:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return translate_error(err);
   2833c:	f7ff bf60 	b.w	28200 <translate_error>
		return -EINVAL;
   28340:	f06f 0415 	mvn.w	r4, #21
}
   28344:	4620      	mov	r0, r4
   28346:	b005      	add	sp, #20
   28348:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2834a:	bf00      	nop
   2834c:	00039a6d 	.word	0x00039a6d

00028350 <modem_key_mgmt_cmp>:
}

int modem_key_mgmt_cmp(nrf_sec_tag_t sec_tag,
		       enum modem_key_mgmt_cred_type cred_type,
		       const void *buf, size_t len)
{
   28350:	b570      	push	{r4, r5, r6, lr}
   28352:	461d      	mov	r5, r3
	int err;
	char *p;

	if (buf == NULL) {
   28354:	4614      	mov	r4, r2
   28356:	b1a2      	cbz	r2, 28382 <modem_key_mgmt_cmp+0x32>
		return -EINVAL;
	}

	err = key_fetch(sec_tag, cred_type);
   28358:	f7ff ffae 	bl	282b8 <key_fetch>
	if (err) {
   2835c:	b980      	cbnz	r0, 28380 <modem_key_mgmt_cmp+0x30>
   2835e:	2603      	movs	r6, #3
		return err;
	}

	p = scratch_buf;
   28360:	480b      	ldr	r0, [pc, #44]	; (28390 <modem_key_mgmt_cmp+0x40>)
	for (size_t i = 0; i < 3; i++) {
		p = strchr(p, '\"');
   28362:	2122      	movs	r1, #34	; 0x22
   28364:	f00b fe18 	bl	33f98 <strchr>
		if (!p) {
   28368:	b170      	cbz	r0, 28388 <modem_key_mgmt_cmp+0x38>
	for (size_t i = 0; i < 3; i++) {
   2836a:	3e01      	subs	r6, #1
			return -ENOENT;
		}
		p++;
   2836c:	f100 0001 	add.w	r0, r0, #1
	for (size_t i = 0; i < 3; i++) {
   28370:	d1f7      	bne.n	28362 <modem_key_mgmt_cmp+0x12>
	}

	if (memcmp(p, buf, len)) {
   28372:	462a      	mov	r2, r5
   28374:	4621      	mov	r1, r4
   28376:	f00b fc4a 	bl	33c0e <memcmp>
   2837a:	3800      	subs	r0, #0
   2837c:	bf18      	it	ne
   2837e:	2001      	movne	r0, #1
		LOG_DBG("Credential data mismatch");
		return 1;
	}

	return 0;
}
   28380:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28382:	f06f 0015 	mvn.w	r0, #21
   28386:	e7fb      	b.n	28380 <modem_key_mgmt_cmp+0x30>
			return -ENOENT;
   28388:	f06f 0001 	mvn.w	r0, #1
   2838c:	e7f8      	b.n	28380 <modem_key_mgmt_cmp+0x30>
   2838e:	bf00      	nop
   28390:	2000f788 	.word	0x2000f788

00028394 <modem_key_mgmt_delete>:

int modem_key_mgmt_delete(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type)
{
   28394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   28396:	4604      	mov	r4, r0
	int err;
	bool cmee_was_enabled;

	cmee_enable(&cmee_was_enabled);
   28398:	f10d 000f 	add.w	r0, sp, #15
{
   2839c:	9101      	str	r1, [sp, #4]
	cmee_enable(&cmee_was_enabled);
   2839e:	f7ff ff55 	bl	2824c <cmee_enable>

	err = nrf_modem_at_printf("AT%%CMNG=3,%u,%d", sec_tag, cred_type);
   283a2:	4621      	mov	r1, r4
   283a4:	9a01      	ldr	r2, [sp, #4]
   283a6:	4809      	ldr	r0, [pc, #36]	; (283cc <modem_key_mgmt_delete+0x38>)
   283a8:	f002 fed6 	bl	2b158 <nrf_modem_at_printf>

	if (!cmee_was_enabled) {
   283ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
   283b0:	b91b      	cbnz	r3, 283ba <modem_key_mgmt_delete+0x26>
   283b2:	9001      	str	r0, [sp, #4]
		cmee_disable();
   283b4:	f7ff ff7a 	bl	282ac <cmee_disable>
   283b8:	9801      	ldr	r0, [sp, #4]
	}

	if (err) {
   283ba:	b120      	cbz	r0, 283c6 <modem_key_mgmt_delete+0x32>
		return translate_error(err);
	}

	return 0;
}
   283bc:	b004      	add	sp, #16
   283be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return translate_error(err);
   283c2:	f7ff bf1d 	b.w	28200 <translate_error>
}
   283c6:	b004      	add	sp, #16
   283c8:	bd10      	pop	{r4, pc}
   283ca:	bf00      	nop
   283cc:	00039a85 	.word	0x00039a85

000283d0 <modem_key_mgmt_exists>:

int modem_key_mgmt_exists(nrf_sec_tag_t sec_tag,
			  enum modem_key_mgmt_cred_type cred_type,
			  bool *exists)
{
   283d0:	b570      	push	{r4, r5, r6, lr}
   283d2:	b086      	sub	sp, #24
   283d4:	460c      	mov	r4, r1
	int err;
	bool cmee_was_active;

	if (exists == NULL) {
   283d6:	4615      	mov	r5, r2
{
   283d8:	9003      	str	r0, [sp, #12]
	if (exists == NULL) {
   283da:	b34a      	cbz	r2, 28430 <modem_key_mgmt_exists+0x60>
		return -EINVAL;
	}

	cmee_enable(&cmee_was_active);
   283dc:	f10d 0017 	add.w	r0, sp, #23
   283e0:	f7ff ff34 	bl	2824c <cmee_enable>

	scratch_buf[0] = '\0';
   283e4:	2200      	movs	r2, #0
   283e6:	4814      	ldr	r0, [pc, #80]	; (28438 <modem_key_mgmt_exists+0x68>)
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   283e8:	9b03      	ldr	r3, [sp, #12]
	scratch_buf[0] = '\0';
   283ea:	7002      	strb	r2, [r0, #0]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   283ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   283f0:	9400      	str	r4, [sp, #0]
   283f2:	4a12      	ldr	r2, [pc, #72]	; (2843c <modem_key_mgmt_exists+0x6c>)
   283f4:	f002 fef8 	bl	2b1e8 <nrf_modem_at_cmd>
			       "AT%%CMNG=1,%u,%d", sec_tag, cred_type);

	if (!cmee_was_active) {
   283f8:	f89d 3017 	ldrb.w	r3, [sp, #23]
	err = nrf_modem_at_cmd(scratch_buf, sizeof(scratch_buf),
   283fc:	4604      	mov	r4, r0
	if (!cmee_was_active) {
   283fe:	b90b      	cbnz	r3, 28404 <modem_key_mgmt_exists+0x34>
		cmee_disable();
   28400:	f7ff ff54 	bl	282ac <cmee_disable>
	}

	if (err) {
   28404:	b12c      	cbz	r4, 28412 <modem_key_mgmt_exists+0x42>
		return translate_error(err);
   28406:	4620      	mov	r0, r4
	} else {
		*exists = false;
	}

	return 0;
}
   28408:	b006      	add	sp, #24
   2840a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return translate_error(err);
   2840e:	f7ff bef7 	b.w	28200 <translate_error>
	if (strlen(scratch_buf) > strlen("OK\r\n")) {
   28412:	4809      	ldr	r0, [pc, #36]	; (28438 <modem_key_mgmt_exists+0x68>)
   28414:	f7f4 fe44 	bl	1d0a0 <strlen>
   28418:	4606      	mov	r6, r0
   2841a:	4809      	ldr	r0, [pc, #36]	; (28440 <modem_key_mgmt_exists+0x70>)
   2841c:	f7f4 fe40 	bl	1d0a0 <strlen>
   28420:	4286      	cmp	r6, r0
		*exists = true;
   28422:	bf8a      	itet	hi
   28424:	2301      	movhi	r3, #1
		*exists = false;
   28426:	702c      	strbls	r4, [r5, #0]
		*exists = true;
   28428:	702b      	strbhi	r3, [r5, #0]
}
   2842a:	4620      	mov	r0, r4
   2842c:	b006      	add	sp, #24
   2842e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28430:	f06f 0415 	mvn.w	r4, #21
   28434:	e7f9      	b.n	2842a <modem_key_mgmt_exists+0x5a>
   28436:	bf00      	nop
   28438:	2000f788 	.word	0x2000f788
   2843c:	00039a96 	.word	0x00039a96
   28440:	00038c03 	.word	0x00038c03

00028444 <on_modem_lib_init>:
LOG_MODULE_REGISTER(modem_antenna, CONFIG_MODEM_ANTENNA_LOG_LEVEL);

NRF_MODEM_LIB_ON_INIT(gnss_cfg_init_hook, on_modem_lib_init, NULL);

static void on_modem_lib_init(int ret, void *ctx)
{
   28444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (ret != 0) {
   28446:	4604      	mov	r4, r0
   28448:	bb38      	cbnz	r0, 2849a <on_modem_lib_init+0x56>
		return;
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_MAGPIO) > 0) {
   2844a:	4815      	ldr	r0, [pc, #84]	; (284a0 <on_modem_lib_init+0x5c>)
   2844c:	f7f4 fe28 	bl	1d0a0 <strlen>
   28450:	b178      	cbz	r0, 28472 <on_modem_lib_init+0x2e>
		LOG_DBG("Setting MAGPIO configuration: %s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_MAGPIO);
   28452:	4913      	ldr	r1, [pc, #76]	; (284a0 <on_modem_lib_init+0x5c>)
   28454:	4813      	ldr	r0, [pc, #76]	; (284a4 <on_modem_lib_init+0x60>)
   28456:	f002 fe7f 	bl	2b158 <nrf_modem_at_printf>
		if (err) {
   2845a:	b150      	cbz	r0, 28472 <on_modem_lib_init+0x2e>
			LOG_ERR("Failed to set MAGPIO configuration (err: %d)", err);
   2845c:	4b12      	ldr	r3, [pc, #72]	; (284a8 <on_modem_lib_init+0x64>)
   2845e:	9003      	str	r0, [sp, #12]
   28460:	e9cd 4301 	strd	r4, r3, [sp, #4]
   28464:	2201      	movs	r2, #1
   28466:	4623      	mov	r3, r4
   28468:	4620      	mov	r0, r4
   2846a:	4910      	ldr	r1, [pc, #64]	; (284ac <on_modem_lib_init+0x68>)
   2846c:	9400      	str	r4, [sp, #0]
   2846e:	f009 fd21 	bl	31eb4 <z_log_msg_runtime_create.constprop.0>
		}
	}

	if (strlen(CONFIG_MODEM_ANTENNA_AT_COEX0) > 0) {
   28472:	480f      	ldr	r0, [pc, #60]	; (284b0 <on_modem_lib_init+0x6c>)
   28474:	f7f4 fe14 	bl	1d0a0 <strlen>
   28478:	b178      	cbz	r0, 2849a <on_modem_lib_init+0x56>
		LOG_DBG("Setting COEX0 configuration: %s", CONFIG_MODEM_ANTENNA_AT_COEX0);
		err = nrf_modem_at_printf("%s", CONFIG_MODEM_ANTENNA_AT_COEX0);
   2847a:	490d      	ldr	r1, [pc, #52]	; (284b0 <on_modem_lib_init+0x6c>)
   2847c:	4809      	ldr	r0, [pc, #36]	; (284a4 <on_modem_lib_init+0x60>)
   2847e:	f002 fe6b 	bl	2b158 <nrf_modem_at_printf>
		if (err) {
   28482:	b150      	cbz	r0, 2849a <on_modem_lib_init+0x56>
			LOG_ERR("Failed to set COEX0 configuration (err: %d)", err);
   28484:	4b0b      	ldr	r3, [pc, #44]	; (284b4 <on_modem_lib_init+0x70>)
   28486:	9003      	str	r0, [sp, #12]
   28488:	9302      	str	r3, [sp, #8]
   2848a:	2300      	movs	r3, #0
   2848c:	2201      	movs	r2, #1
   2848e:	4618      	mov	r0, r3
   28490:	e9cd 3300 	strd	r3, r3, [sp]
   28494:	4905      	ldr	r1, [pc, #20]	; (284ac <on_modem_lib_init+0x68>)
   28496:	f009 fd0d 	bl	31eb4 <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   2849a:	b004      	add	sp, #16
   2849c:	bd10      	pop	{r4, pc}
   2849e:	bf00      	nop
   284a0:	00039ab6 	.word	0x00039ab6
   284a4:	00039015 	.word	0x00039015
   284a8:	00039ad5 	.word	0x00039ad5
   284ac:	00034aa0 	.word	0x00034aa0
   284b0:	00039b02 	.word	0x00039b02
   284b4:	00039b1a 	.word	0x00039b1a

000284b8 <rest_client_http_response_cb>:
#define HTTP_PROTOCOL "HTTP/1.1"

static void rest_client_http_response_cb(struct http_response *rsp,
					  enum http_final_call final_data,
					  void *user_data)
{
   284b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct rest_client_resp_context *resp_ctx = NULL;

	if (user_data) {
   284ba:	b1e2      	cbz	r2, 284f6 <rest_client_http_response_cb+0x3e>
	 * then this could be called multiple times, with a different value in
	 * rsp->body_start. Only set rest_ctx->response once, the first time,
	 * which will be the start of the body.
	 */
	if (resp_ctx) {
		if (!resp_ctx->response && rsp->body_found && rsp->body_frag_start) {
   284bc:	6893      	ldr	r3, [r2, #8]
   284be:	b933      	cbnz	r3, 284ce <rest_client_http_response_cb+0x16>
   284c0:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
   284c4:	079b      	lsls	r3, r3, #30
   284c6:	d502      	bpl.n	284ce <rest_client_http_response_cb+0x16>
   284c8:	6883      	ldr	r3, [r0, #8]
   284ca:	b103      	cbz	r3, 284ce <rest_client_http_response_cb+0x16>
			resp_ctx->response = rsp->body_frag_start;
   284cc:	6093      	str	r3, [r2, #8]
		}
		resp_ctx->total_response_len += rsp->data_len;
   284ce:	6813      	ldr	r3, [r2, #0]
   284d0:	6984      	ldr	r4, [r0, #24]
	}

	if (final_data == HTTP_DATA_MORE) {
		LOG_DBG("Partial data received(%zd bytes)", rsp->data_len);
	} else if (final_data == HTTP_DATA_FINAL) {
   284d2:	2901      	cmp	r1, #1
		resp_ctx->total_response_len += rsp->data_len;
   284d4:	4423      	add	r3, r4
   284d6:	6013      	str	r3, [r2, #0]
	} else if (final_data == HTTP_DATA_FINAL) {
   284d8:	d119      	bne.n	2850e <rest_client_http_response_cb+0x56>
		if (!resp_ctx) {
			LOG_WRN("REST response context not provided");
			return;
		}
		resp_ctx->http_status_code = rsp->http_status_code;
   284da:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   284de:	f100 0124 	add.w	r1, r0, #36	; 0x24
   284e2:	8193      	strh	r3, [r2, #12]
		resp_ctx->response_len = rsp->processed;
   284e4:	6a03      	ldr	r3, [r0, #32]
   284e6:	f102 000e 	add.w	r0, r2, #14
   284ea:	6053      	str	r3, [r2, #4]
			resp_ctx->response_len,
			resp_ctx->total_response_len,
			rsp->http_status_code,
			rsp->http_status);
	}
}
   284ec:	b004      	add	sp, #16
   284ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   284f2:	f00b bd5e 	b.w	33fb2 <strcpy>
	} else if (final_data == HTTP_DATA_FINAL) {
   284f6:	2901      	cmp	r1, #1
   284f8:	d109      	bne.n	2850e <rest_client_http_response_cb+0x56>
			LOG_WRN("REST response context not provided");
   284fa:	4b06      	ldr	r3, [pc, #24]	; (28514 <rest_client_http_response_cb+0x5c>)
   284fc:	9200      	str	r2, [sp, #0]
   284fe:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28502:	4613      	mov	r3, r2
   28504:	4904      	ldr	r1, [pc, #16]	; (28518 <rest_client_http_response_cb+0x60>)
   28506:	2202      	movs	r2, #2
   28508:	4618      	mov	r0, r3
   2850a:	f009 fce3 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
}
   2850e:	b004      	add	sp, #16
   28510:	bd10      	pop	{r4, pc}
   28512:	bf00      	nop
   28514:	00039b54 	.word	0x00039b54
   28518:	00034ae0 	.word	0x00034ae0

0002851c <rest_client_request>:
	}
}

int rest_client_request(struct rest_client_req_context *req_ctx,
			struct rest_client_resp_context *resp_ctx)
{
   2851c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28520:	4604      	mov	r4, r0
   28522:	b0f7      	sub	sp, #476	; 0x1dc
   28524:	460d      	mov	r5, r1
	memset(req, 0, sizeof(struct http_request));
   28526:	f44f 7288 	mov.w	r2, #272	; 0x110
   2852a:	2100      	movs	r1, #0
   2852c:	a832      	add	r0, sp, #200	; 0xc8
   2852e:	f00b fb9e 	bl	33c6e <memset>
	req->host = req_ctx->host;
   28532:	6963      	ldr	r3, [r4, #20]
	LOG_DBG("Requesting destination HOST: %s at port %d, URL: %s",
		req_ctx->host, req_ctx->port, http_req.url);

	http_req.header_fields = req_ctx->header_fields;

	if (req_ctx->body != NULL) {
   28534:	6a60      	ldr	r0, [r4, #36]	; 0x24
	req->host = req_ctx->host;
   28536:	936f      	str	r3, [sp, #444]	; 0x1bc
	req->protocol = HTTP_PROTOCOL;
   28538:	4b9f      	ldr	r3, [pc, #636]	; (287b8 <rest_client_request+0x29c>)
   2853a:	936c      	str	r3, [sp, #432]	; 0x1b0
	req->response = rest_client_http_response_cb;
   2853c:	4b9f      	ldr	r3, [pc, #636]	; (287bc <rest_client_request+0x2a0>)
   2853e:	9367      	str	r3, [sp, #412]	; 0x19c
	req->method = req_ctx->http_method;
   28540:	7c23      	ldrb	r3, [r4, #16]
   28542:	f88d 3198 	strb.w	r3, [sp, #408]	; 0x198
	http_req.url = req_ctx->url;
   28546:	69e3      	ldr	r3, [r4, #28]
   28548:	936b      	str	r3, [sp, #428]	; 0x1ac
	http_req.header_fields = req_ctx->header_fields;
   2854a:	6a23      	ldr	r3, [r4, #32]
   2854c:	936d      	str	r3, [sp, #436]	; 0x1b4
	if (req_ctx->body != NULL) {
   2854e:	b118      	cbz	r0, 28558 <rest_client_request+0x3c>
		http_req.payload = req_ctx->body;
   28550:	9072      	str	r0, [sp, #456]	; 0x1c8
		http_req.payload_len = strlen(http_req.payload);
   28552:	f7f4 fda5 	bl	1d0a0 <strlen>
   28556:	9073      	str	r0, [sp, #460]	; 0x1cc
	return z_impl_k_uptime_ticks();
   28558:	f00b f999 	bl	3388e <z_impl_k_uptime_ticks>
	if (req_ctx->connect_socket < 0) {
   2855c:	6823      	ldr	r3, [r4, #0]
   2855e:	e9cd 0105 	strd	r0, r1, [sp, #20]
   28562:	2b00      	cmp	r3, #0
   28564:	f280 818e 	bge.w	28884 <rest_client_request+0x368>
		err = rest_client_sckt_connect(&req_ctx->connect_socket,
   28568:	e9d4 9b02 	ldrd	r9, fp, [r4, #8]
	char portstr[6] = { 0 };
   2856c:	f04f 0800 	mov.w	r8, #0
		err = rest_client_sckt_connect(&req_ctx->connect_socket,
   28570:	8b23      	ldrh	r3, [r4, #24]
	struct addrinfo hints = {
   28572:	2250      	movs	r2, #80	; 0x50
		err = rest_client_sckt_connect(&req_ctx->connect_socket,
   28574:	9307      	str	r3, [sp, #28]
   28576:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	struct addrinfo hints = {
   28578:	4641      	mov	r1, r8
   2857a:	a81e      	add	r0, sp, #120	; 0x78
		err = rest_client_sckt_connect(&req_ctx->connect_socket,
   2857c:	f8dd a1bc 	ldr.w	sl, [sp, #444]	; 0x1bc
   28580:	9304      	str	r3, [sp, #16]
	char portstr[6] = { 0 };
   28582:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   28586:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
	struct addrinfo hints = {
   2858a:	f00b fb70 	bl	33c6e <memset>
   2858e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   28592:	921f      	str	r2, [sp, #124]	; 0x7c
	*fd = -1;
   28594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	struct addrinfo hints = {
   28598:	2601      	movs	r6, #1
	snprintf(portstr, 6, "%d", port_num);
   2859a:	2106      	movs	r1, #6
   2859c:	9b07      	ldr	r3, [sp, #28]
	*fd = -1;
   2859e:	6022      	str	r2, [r4, #0]
	snprintf(portstr, 6, "%d", port_num);
   285a0:	a80c      	add	r0, sp, #48	; 0x30
   285a2:	4a87      	ldr	r2, [pc, #540]	; (287c0 <rest_client_request+0x2a4>)
	struct addrinfo hints = {
   285a4:	9621      	str	r6, [sp, #132]	; 0x84
	snprintf(portstr, 6, "%d", port_num);
   285a6:	f005 fc17 	bl	2ddd8 <sniprintf>
	return zsock_getaddrinfo(host, service, hints, res);
   285aa:	4650      	mov	r0, sl
   285ac:	ab0a      	add	r3, sp, #40	; 0x28
   285ae:	aa1e      	add	r2, sp, #120	; 0x78
   285b0:	a90c      	add	r1, sp, #48	; 0x30
   285b2:	f008 f85c 	bl	3066e <zsock_getaddrinfo>
	if (ret) {
   285b6:	4607      	mov	r7, r0
   285b8:	2800      	cmp	r0, #0
   285ba:	d037      	beq.n	2862c <rest_client_request+0x110>
		LOG_ERR("getaddrinfo() failed, error: %d", ret);
   285bc:	4b81      	ldr	r3, [pc, #516]	; (287c4 <rest_client_request+0x2a8>)
   285be:	4632      	mov	r2, r6
   285c0:	e9cd 8301 	strd	r8, r3, [sp, #4]
   285c4:	9003      	str	r0, [sp, #12]
   285c6:	4643      	mov	r3, r8
   285c8:	4640      	mov	r0, r8
   285ca:	497f      	ldr	r1, [pc, #508]	; (287c8 <rest_client_request+0x2ac>)
   285cc:	f8cd 8000 	str.w	r8, [sp]
   285d0:	f009 fc80 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
		return -EFAULT;
   285d4:	f06f 060d 	mvn.w	r6, #13
		LOG_DBG("Payload: %s", http_req.payload);
	}

	ret = rest_client_do_api_call(&http_req, req_ctx, resp_ctx);
	if (ret) {
		LOG_ERR("rest_client_do_api_call() failed, err %d", ret);
   285d8:	4b7c      	ldr	r3, [pc, #496]	; (287cc <rest_client_request+0x2b0>)
   285da:	2201      	movs	r2, #1
   285dc:	9302      	str	r3, [sp, #8]
   285de:	2300      	movs	r3, #0
   285e0:	4979      	ldr	r1, [pc, #484]	; (287c8 <rest_client_request+0x2ac>)
   285e2:	4618      	mov	r0, r3
   285e4:	e9cd 3300 	strd	r3, r3, [sp]
   285e8:	9603      	str	r6, [sp, #12]
   285ea:	f009 fc73 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
	}
	LOG_DBG("API call response len: http status: %d, %u bytes", resp_ctx->http_status_code,
		resp_ctx->response_len);

clean_up:
	if (req_ctx->connect_socket != REST_CLIENT_SCKT_CONNECT) {
   285ee:	6820      	ldr	r0, [r4, #0]
   285f0:	1c43      	adds	r3, r0, #1
   285f2:	d017      	beq.n	28624 <rest_client_request+0x108>
	if (!req_ctx->keep_alive) {
   285f4:	7927      	ldrb	r7, [r4, #4]
   285f6:	2f00      	cmp	r7, #0
   285f8:	f040 81c7 	bne.w	2898a <rest_client_request+0x46e>
	return z_impl_zsock_close(sock);
   285fc:	f008 f83f 	bl	3067e <z_impl_zsock_close>
		if (ret) {
   28600:	b168      	cbz	r0, 2861e <rest_client_request+0x102>
			LOG_WRN("Failed to close socket, error: %d", errno);
   28602:	f008 fb5a 	bl	30cba <__errno>
   28606:	6803      	ldr	r3, [r0, #0]
   28608:	2202      	movs	r2, #2
   2860a:	9303      	str	r3, [sp, #12]
   2860c:	4b70      	ldr	r3, [pc, #448]	; (287d0 <rest_client_request+0x2b4>)
   2860e:	4638      	mov	r0, r7
   28610:	e9cd 7301 	strd	r7, r3, [sp, #4]
   28614:	496c      	ldr	r1, [pc, #432]	; (287c8 <rest_client_request+0x2ac>)
   28616:	463b      	mov	r3, r7
   28618:	9700      	str	r7, [sp, #0]
   2861a:	f009 fc5b 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
		req_ctx->connect_socket = REST_CLIENT_SCKT_CONNECT;
   2861e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28622:	6023      	str	r3, [r4, #0]
		/* Socket was not closed yet: */
		rest_client_close_connection(req_ctx, resp_ctx);
	}
	return ret;
}
   28624:	4630      	mov	r0, r6
   28626:	b077      	add	sp, #476	; 0x1dc
   28628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sa = addr_info->ai_addr;
   2862c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	inet_ntop(sa->sa_family,
   2862e:	6999      	ldr	r1, [r3, #24]
   28630:	f831 0b04 	ldrh.w	r0, [r1], #4
		union { uintptr_t x; size_t val; } parm3 = { .val = size };
		return (char *) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   28634:	232e      	movs	r3, #46	; 0x2e
   28636:	aa12      	add	r2, sp, #72	; 0x48
   28638:	f7fa f976 	bl	22928 <z_impl_net_addr_ntop>
	*fd = socket(addr_info->ai_family, SOCK_STREAM, proto);
   2863c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	proto = (sec_tag == REST_CLIENT_SEC_TAG_NO_SEC) ? IPPROTO_TCP : IPPROTO_TLS_1_2;
   2863e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   28642:	bf0c      	ite	eq
   28644:	2206      	moveq	r2, #6
   28646:	f44f 7281 	movne.w	r2, #258	; 0x102
	*fd = socket(addr_info->ai_family, SOCK_STREAM, proto);
   2864a:	6898      	ldr	r0, [r3, #8]
	return z_impl_zsock_socket(family, type, proto);
   2864c:	4631      	mov	r1, r6
   2864e:	f7f8 fb61 	bl	20d14 <z_impl_zsock_socket>
	if (*fd == -1) {
   28652:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   28656:	4680      	mov	r8, r0
	*fd = socket(addr_info->ai_family, SOCK_STREAM, proto);
   28658:	6020      	str	r0, [r4, #0]
	if (*fd == -1) {
   2865a:	d11e      	bne.n	2869a <rest_client_request+0x17e>
		LOG_ERR("Failed to open socket, error: %d", errno);
   2865c:	f008 fb2d 	bl	30cba <__errno>
   28660:	6803      	ldr	r3, [r0, #0]
   28662:	4632      	mov	r2, r6
   28664:	9303      	str	r3, [sp, #12]
   28666:	4b5b      	ldr	r3, [pc, #364]	; (287d4 <rest_client_request+0x2b8>)
   28668:	4638      	mov	r0, r7
   2866a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   2866e:	4956      	ldr	r1, [pc, #344]	; (287c8 <rest_client_request+0x2ac>)
   28670:	463b      	mov	r3, r7
   28672:	9700      	str	r7, [sp, #0]
   28674:	f009 fc2e 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
		ret = -ENOTCONN;
   28678:	f06f 067f 	mvn.w	r6, #127	; 0x7f
	zsock_freeaddrinfo(ai);
   2867c:	980a      	ldr	r0, [sp, #40]	; 0x28
   2867e:	f007 fff8 	bl	30672 <zsock_freeaddrinfo>
	if (ret) {
   28682:	2e00      	cmp	r6, #0
   28684:	f000 80fe 	beq.w	28884 <rest_client_request+0x368>
		if (*fd > -1) {
   28688:	6820      	ldr	r0, [r4, #0]
   2868a:	2800      	cmp	r0, #0
   2868c:	dba4      	blt.n	285d8 <rest_client_request+0xbc>
	return z_impl_zsock_close(sock);
   2868e:	f007 fff6 	bl	3067e <z_impl_zsock_close>
			*fd = -1;
   28692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28696:	6023      	str	r3, [r4, #0]
   28698:	e79e      	b.n	285d8 <rest_client_request+0xbc>
	if (sec_tag >= 0) {
   2869a:	f1b9 0f00 	cmp.w	r9, #0
   2869e:	db62      	blt.n	28766 <rest_client_request+0x24a>
		verify = tls_peer_verify;
   286a0:	f1bb 0f02 	cmp.w	fp, #2
   286a4:	bf94      	ite	ls
   286a6:	465b      	movls	r3, fp
   286a8:	2302      	movhi	r3, #2
	const sec_tag_t tls_sec_tag[] = {
   286aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
		verify = tls_peer_verify;
   286ae:	930b      	str	r3, [sp, #44]	; 0x2c
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   286b0:	f04f 0b04 	mov.w	fp, #4
   286b4:	2205      	movs	r2, #5
   286b6:	f44f 718d 	mov.w	r1, #282	; 0x11a
   286ba:	f8cd b000 	str.w	fp, [sp]
   286be:	ab0b      	add	r3, sp, #44	; 0x2c
   286c0:	f008 f8bd 	bl	3083e <z_impl_zsock_setsockopt>
	if (err) {
   286c4:	4681      	mov	r9, r0
   286c6:	b180      	cbz	r0, 286ea <rest_client_request+0x1ce>
		LOG_ERR("Failed to setup peer verification, error: %d", errno);
   286c8:	f008 faf7 	bl	30cba <__errno>
   286cc:	6803      	ldr	r3, [r0, #0]
   286ce:	9303      	str	r3, [sp, #12]
   286d0:	4b41      	ldr	r3, [pc, #260]	; (287d8 <rest_client_request+0x2bc>)
		LOG_ERR("Unable to set session cache, errno %d", errno);
   286d2:	e9cd 7301 	strd	r7, r3, [sp, #4]
   286d6:	463b      	mov	r3, r7
   286d8:	9700      	str	r7, [sp, #0]
			LOG_ERR("Failed to setup TLS hostname, error: %d", errno);
   286da:	4632      	mov	r2, r6
   286dc:	4618      	mov	r0, r3
   286de:	493a      	ldr	r1, [pc, #232]	; (287c8 <rest_client_request+0x2ac>)
   286e0:	f009 fbf8 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
			ret = -EACCES;
   286e4:	f06f 060c 	mvn.w	r6, #12
   286e8:	e7c8      	b.n	2867c <rest_client_request+0x160>
   286ea:	f44f 718d 	mov.w	r1, #282	; 0x11a
   286ee:	4632      	mov	r2, r6
   286f0:	4640      	mov	r0, r8
   286f2:	f8cd b000 	str.w	fp, [sp]
   286f6:	ab0e      	add	r3, sp, #56	; 0x38
   286f8:	f008 f8a1 	bl	3083e <z_impl_zsock_setsockopt>
	if (err) {
   286fc:	4607      	mov	r7, r0
   286fe:	b150      	cbz	r0, 28716 <rest_client_request+0x1fa>
		LOG_ERR("Failed to setup TLS sec tag, error: %d", errno);
   28700:	f008 fadb 	bl	30cba <__errno>
   28704:	6803      	ldr	r3, [r0, #0]
   28706:	9303      	str	r3, [sp, #12]
   28708:	4b34      	ldr	r3, [pc, #208]	; (287dc <rest_client_request+0x2c0>)
			LOG_ERR("Failed to setup TLS hostname, error: %d", errno);
   2870a:	e9cd 9301 	strd	r9, r3, [sp, #4]
   2870e:	f8cd 9000 	str.w	r9, [sp]
   28712:	464b      	mov	r3, r9
   28714:	e7e1      	b.n	286da <rest_client_request+0x1be>
		cache = TLS_SESSION_CACHE_ENABLED;
   28716:	f88d 6027 	strb.w	r6, [sp, #39]	; 0x27
   2871a:	220c      	movs	r2, #12
   2871c:	f44f 718d 	mov.w	r1, #282	; 0x11a
   28720:	4640      	mov	r0, r8
   28722:	9600      	str	r6, [sp, #0]
   28724:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   28728:	f008 f889 	bl	3083e <z_impl_zsock_setsockopt>
	if (err) {
   2872c:	4681      	mov	r9, r0
   2872e:	b128      	cbz	r0, 2873c <rest_client_request+0x220>
		LOG_ERR("Unable to set session cache, errno %d", errno);
   28730:	f008 fac3 	bl	30cba <__errno>
   28734:	6803      	ldr	r3, [r0, #0]
   28736:	9303      	str	r3, [sp, #12]
   28738:	4b29      	ldr	r3, [pc, #164]	; (287e0 <rest_client_request+0x2c4>)
   2873a:	e7ca      	b.n	286d2 <rest_client_request+0x1b6>
	if (tls_hostname) {
   2873c:	f1ba 0f00 	cmp.w	sl, #0
   28740:	d011      	beq.n	28766 <rest_client_request+0x24a>
		err = setsockopt(fd, SOL_TLS, TLS_HOSTNAME, tls_hostname, strlen(tls_hostname));
   28742:	4650      	mov	r0, sl
   28744:	f7f4 fcac 	bl	1d0a0 <strlen>
   28748:	2202      	movs	r2, #2
   2874a:	9000      	str	r0, [sp, #0]
   2874c:	4653      	mov	r3, sl
   2874e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   28752:	4640      	mov	r0, r8
   28754:	f008 f873 	bl	3083e <z_impl_zsock_setsockopt>
		if (err) {
   28758:	b128      	cbz	r0, 28766 <rest_client_request+0x24a>
			LOG_ERR("Failed to setup TLS hostname, error: %d", errno);
   2875a:	f008 faae 	bl	30cba <__errno>
   2875e:	6803      	ldr	r3, [r0, #0]
   28760:	9303      	str	r3, [sp, #12]
   28762:	4b20      	ldr	r3, [pc, #128]	; (287e4 <rest_client_request+0x2c8>)
   28764:	e7d1      	b.n	2870a <rest_client_request+0x1ee>
	struct timeval timeout = { 0 };
   28766:	2600      	movs	r6, #0
	if (timeout_ms != SYS_FOREVER_MS && timeout_ms > 0) {
   28768:	9b04      	ldr	r3, [sp, #16]
	ret = rest_client_sckt_timeouts_set(*fd, timeout_ms);
   2876a:	6827      	ldr	r7, [r4, #0]
	if (timeout_ms != SYS_FOREVER_MS && timeout_ms > 0) {
   2876c:	42b3      	cmp	r3, r6
	struct timeval timeout = { 0 };
   2876e:	9611      	str	r6, [sp, #68]	; 0x44
	if (timeout_ms != SYS_FOREVER_MS && timeout_ms > 0) {
   28770:	dc3c      	bgt.n	287ec <rest_client_request+0x2d0>
	ret = connect(*fd, addr_info->ai_addr, addr_info->ai_addrlen);
   28772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28774:	6820      	ldr	r0, [r4, #0]
   28776:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
	return z_impl_zsock_connect(sock, addr, addrlen);
   2877a:	f007 ffcd 	bl	30718 <z_impl_zsock_connect>
	if (ret) {
   2877e:	4606      	mov	r6, r0
   28780:	2800      	cmp	r0, #0
   28782:	f43f af7b 	beq.w	2867c <rest_client_request+0x160>
		LOG_ERR("Failed to connect socket, error: %d", errno);
   28786:	f008 fa98 	bl	30cba <__errno>
   2878a:	6803      	ldr	r3, [r0, #0]
   2878c:	2201      	movs	r2, #1
   2878e:	9303      	str	r3, [sp, #12]
   28790:	4b15      	ldr	r3, [pc, #84]	; (287e8 <rest_client_request+0x2cc>)
   28792:	490d      	ldr	r1, [pc, #52]	; (287c8 <rest_client_request+0x2ac>)
   28794:	9302      	str	r3, [sp, #8]
   28796:	2300      	movs	r3, #0
   28798:	4618      	mov	r0, r3
   2879a:	e9cd 3300 	strd	r3, r3, [sp]
   2879e:	f009 fb99 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
		if (errno == ETIMEDOUT) {
   287a2:	f008 fa8a 	bl	30cba <__errno>
   287a6:	6803      	ldr	r3, [r0, #0]
			ret = -ECONNREFUSED;
   287a8:	2b74      	cmp	r3, #116	; 0x74
   287aa:	bf0c      	ite	eq
   287ac:	f06f 0673 	mvneq.w	r6, #115	; 0x73
   287b0:	f06f 066e 	mvnne.w	r6, #110	; 0x6e
   287b4:	e762      	b.n	2867c <rest_client_request+0x160>
   287b6:	bf00      	nop
   287b8:	00039b77 	.word	0x00039b77
   287bc:	000284b9 	.word	0x000284b9
   287c0:	000399c1 	.word	0x000399c1
   287c4:	00039b80 	.word	0x00039b80
   287c8:	00034ae0 	.word	0x00034ae0
   287cc:	00039d54 	.word	0x00039d54
   287d0:	00039d98 	.word	0x00039d98
   287d4:	00039ba0 	.word	0x00039ba0
   287d8:	00039bc1 	.word	0x00039bc1
   287dc:	00039bee 	.word	0x00039bee
   287e0:	00039c15 	.word	0x00039c15
   287e4:	00039c3b 	.word	0x00039c3b
   287e8:	00039cbd 	.word	0x00039cbd
		timeout.tv_sec = timeout_ms / MSEC_PER_SEC;
   287ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   287f0:	9b04      	ldr	r3, [sp, #16]
		timeout.tv_usec = (timeout_ms % MSEC_PER_SEC) * USEC_PER_MSEC;
   287f2:	9904      	ldr	r1, [sp, #16]
		timeout.tv_sec = timeout_ms / MSEC_PER_SEC;
   287f4:	fbb3 f3f2 	udiv	r3, r3, r2
   287f8:	e9cd 360e 	strd	r3, r6, [sp, #56]	; 0x38
		timeout.tv_usec = (timeout_ms % MSEC_PER_SEC) * USEC_PER_MSEC;
   287fc:	fb02 1313 	mls	r3, r2, r3, r1
   28800:	4353      	muls	r3, r2
   28802:	9310      	str	r3, [sp, #64]	; 0x40
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   28804:	f04f 0910 	mov.w	r9, #16
   28808:	2215      	movs	r2, #21
   2880a:	2101      	movs	r1, #1
   2880c:	4638      	mov	r0, r7
   2880e:	f8cd 9000 	str.w	r9, [sp]
   28812:	ab0e      	add	r3, sp, #56	; 0x38
   28814:	f008 f813 	bl	3083e <z_impl_zsock_setsockopt>
		if (err) {
   28818:	4680      	mov	r8, r0
   2881a:	b1f0      	cbz	r0, 2885a <rest_client_request+0x33e>
			LOG_ERR("Failed to set socket send timeout, error: %d", errno);
   2881c:	f008 fa4d 	bl	30cba <__errno>
   28820:	6803      	ldr	r3, [r0, #0]
   28822:	9600      	str	r6, [sp, #0]
   28824:	9303      	str	r3, [sp, #12]
   28826:	4b60      	ldr	r3, [pc, #384]	; (289a8 <rest_client_request+0x48c>)
   28828:	e9cd 6301 	strd	r6, r3, [sp, #4]
   2882c:	4633      	mov	r3, r6
			LOG_ERR("Failed to set socket recv timeout, error: %d", errno);
   2882e:	2201      	movs	r2, #1
   28830:	4618      	mov	r0, r3
   28832:	495e      	ldr	r1, [pc, #376]	; (289ac <rest_client_request+0x490>)
   28834:	f009 fb4e 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
		LOG_ERR("Failed to set socket timeouts, error: %d", errno);
   28838:	f008 fa3f 	bl	30cba <__errno>
   2883c:	6803      	ldr	r3, [r0, #0]
   2883e:	2201      	movs	r2, #1
   28840:	9303      	str	r3, [sp, #12]
   28842:	4b5b      	ldr	r3, [pc, #364]	; (289b0 <rest_client_request+0x494>)
   28844:	4959      	ldr	r1, [pc, #356]	; (289ac <rest_client_request+0x490>)
   28846:	9302      	str	r3, [sp, #8]
   28848:	2300      	movs	r3, #0
   2884a:	4618      	mov	r0, r3
   2884c:	e9cd 3300 	strd	r3, r3, [sp]
   28850:	f009 fb40 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
		ret = -EINVAL;
   28854:	f06f 0615 	mvn.w	r6, #21
		goto clean_up;
   28858:	e710      	b.n	2867c <rest_client_request+0x160>
   2885a:	2214      	movs	r2, #20
   2885c:	2101      	movs	r1, #1
   2885e:	4638      	mov	r0, r7
   28860:	f8cd 9000 	str.w	r9, [sp]
   28864:	ab0e      	add	r3, sp, #56	; 0x38
   28866:	f007 ffea 	bl	3083e <z_impl_zsock_setsockopt>
		if (err) {
   2886a:	2800      	cmp	r0, #0
   2886c:	d081      	beq.n	28772 <rest_client_request+0x256>
			LOG_ERR("Failed to set socket recv timeout, error: %d", errno);
   2886e:	f008 fa24 	bl	30cba <__errno>
   28872:	6803      	ldr	r3, [r0, #0]
   28874:	f8cd 8000 	str.w	r8, [sp]
   28878:	9303      	str	r3, [sp, #12]
   2887a:	4b4e      	ldr	r3, [pc, #312]	; (289b4 <rest_client_request+0x498>)
   2887c:	e9cd 8301 	strd	r8, r3, [sp, #4]
   28880:	4643      	mov	r3, r8
   28882:	e7d4      	b.n	2882e <rest_client_request+0x312>
	resp_ctx->response = NULL;
   28884:	2600      	movs	r6, #0
	http_req->recv_buf = req_ctx->resp_buff;
   28886:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	http_req->recv_buf_len = req_ctx->resp_buff_len;
   28888:	6b22      	ldr	r2, [r4, #48]	; 0x30
__ssp_bos_icheck3(memset, void *, int)
   2888a:	2100      	movs	r1, #0
	http_req->recv_buf = req_ctx->resp_buff;
   2888c:	9069      	str	r0, [sp, #420]	; 0x1a4
	http_req->recv_buf_len = req_ctx->resp_buff_len;
   2888e:	926a      	str	r2, [sp, #424]	; 0x1a8
   28890:	f00b f9ed 	bl	33c6e <memset>
	--http_req->recv_buf_len;
   28894:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
	resp_ctx->response_len = 0;
   28896:	e9c5 6601 	strd	r6, r6, [r5, #4]
	--http_req->recv_buf_len;
   2889a:	3b01      	subs	r3, #1
   2889c:	936a      	str	r3, [sp, #424]	; 0x1a8
	resp_ctx->used_socket_id = req_ctx->connect_socket;
   2889e:	6823      	ldr	r3, [r4, #0]
	resp_ctx->http_status_code_str[0] = '\0';
   288a0:	73ae      	strb	r6, [r5, #14]
	resp_ctx->used_socket_id = req_ctx->connect_socket;
   288a2:	632b      	str	r3, [r5, #48]	; 0x30
	if (req_ctx->timeout_ms != SYS_FOREVER_MS) {
   288a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	resp_ctx->total_response_len = 0;
   288a6:	602e      	str	r6, [r5, #0]
	if (req_ctx->timeout_ms != SYS_FOREVER_MS) {
   288a8:	3301      	adds	r3, #1
   288aa:	d02c      	beq.n	28906 <rest_client_request+0x3ea>
   288ac:	f00a ffef 	bl	3388e <z_impl_k_uptime_ticks>
   288b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   288b4:	fba0 2003 	umull	r2, r0, r0, r3
   288b8:	fb03 0101 	mla	r1, r3, r1, r0
   288bc:	9805      	ldr	r0, [sp, #20]
   288be:	0bd2      	lsrs	r2, r2, #15
   288c0:	fba0 0703 	umull	r0, r7, r0, r3
   288c4:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
   288c8:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   288cc:	9906      	ldr	r1, [sp, #24]
   288ce:	0bc0      	lsrs	r0, r0, #15
   288d0:	fb03 7301 	mla	r3, r3, r1, r7
   288d4:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
		sckt_connect_time = k_uptime_get() - sckt_connect_start_time;
   288d8:	1a12      	subs	r2, r2, r0
   288da:	eb6c 31d3 	sbc.w	r1, ip, r3, lsr #15
		if (sckt_connect_time >= req_ctx->timeout_ms) {
   288de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   288e0:	17d8      	asrs	r0, r3, #31
   288e2:	429a      	cmp	r2, r3
   288e4:	4181      	sbcs	r1, r0
   288e6:	db0c      	blt.n	28902 <rest_client_request+0x3e6>
			LOG_WRN("Timeout occurred during socket connect");
   288e8:	4b33      	ldr	r3, [pc, #204]	; (289b8 <rest_client_request+0x49c>)
   288ea:	4630      	mov	r0, r6
   288ec:	e9cd 6301 	strd	r6, r3, [sp, #4]
   288f0:	9600      	str	r6, [sp, #0]
   288f2:	4633      	mov	r3, r6
   288f4:	2202      	movs	r2, #2
   288f6:	492d      	ldr	r1, [pc, #180]	; (289ac <rest_client_request+0x490>)
   288f8:	f009 faec 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
			return -ETIMEDOUT;
   288fc:	f06f 0673 	mvn.w	r6, #115	; 0x73
   28900:	e66a      	b.n	285d8 <rest_client_request+0xbc>
		req_ctx->timeout_ms -= sckt_connect_time;
   28902:	1a9a      	subs	r2, r3, r2
   28904:	62a2      	str	r2, [r4, #40]	; 0x28
	err = http_client_req(req_ctx->connect_socket, http_req, req_ctx->timeout_ms, resp_ctx);
   28906:	462b      	mov	r3, r5
   28908:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2890a:	6820      	ldr	r0, [r4, #0]
   2890c:	a932      	add	r1, sp, #200	; 0xc8
   2890e:	f7fb fb8d 	bl	2402c <http_client_req>
	if (err < 0) {
   28912:	1e06      	subs	r6, r0, #0
   28914:	da0b      	bge.n	2892e <rest_client_request+0x412>
		LOG_ERR("http_client_req() error: %d", err);
   28916:	4b29      	ldr	r3, [pc, #164]	; (289bc <rest_client_request+0x4a0>)
   28918:	2201      	movs	r2, #1
   2891a:	9302      	str	r3, [sp, #8]
   2891c:	2300      	movs	r3, #0
   2891e:	4923      	ldr	r1, [pc, #140]	; (289ac <rest_client_request+0x490>)
   28920:	4618      	mov	r0, r3
   28922:	e9cd 3300 	strd	r3, r3, [sp]
   28926:	9603      	str	r6, [sp, #12]
   28928:	f009 fad4 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
   2892c:	e654      	b.n	285d8 <rest_client_request+0xbc>
	} else if (resp_ctx->total_response_len >= req_ctx->resp_buff_len) {
   2892e:	682f      	ldr	r7, [r5, #0]
   28930:	6b23      	ldr	r3, [r4, #48]	; 0x30
   28932:	429f      	cmp	r7, r3
   28934:	d30e      	bcc.n	28954 <rest_client_request+0x438>
		LOG_ERR("Receive buffer too small, %d bytes are required",
   28936:	4b22      	ldr	r3, [pc, #136]	; (289c0 <rest_client_request+0x4a4>)
   28938:	3701      	adds	r7, #1
   2893a:	9302      	str	r3, [sp, #8]
   2893c:	2300      	movs	r3, #0
   2893e:	2201      	movs	r2, #1
   28940:	4618      	mov	r0, r3
   28942:	e9cd 3300 	strd	r3, r3, [sp]
   28946:	4919      	ldr	r1, [pc, #100]	; (289ac <rest_client_request+0x490>)
   28948:	9703      	str	r7, [sp, #12]
   2894a:	f009 fac3 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
		err = -ENOBUFS;
   2894e:	f06f 0668 	mvn.w	r6, #104	; 0x68
   28952:	e641      	b.n	285d8 <rest_client_request+0xbc>
	if (!resp_ctx->response || !resp_ctx->response_len) {
   28954:	68ab      	ldr	r3, [r5, #8]
   28956:	b99b      	cbnz	r3, 28980 <rest_client_request+0x464>
		LOG_WRN("No data in a response body");
   28958:	2600      	movs	r6, #0
		char *end_ptr = &req_ctx->resp_buff[resp_ctx->total_response_len];
   2895a:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
		LOG_WRN("No data in a response body");
   2895e:	4b19      	ldr	r3, [pc, #100]	; (289c4 <rest_client_request+0x4a8>)
   28960:	2202      	movs	r2, #2
   28962:	9302      	str	r3, [sp, #8]
   28964:	4630      	mov	r0, r6
   28966:	4633      	mov	r3, r6
   28968:	e9cd 6600 	strd	r6, r6, [sp]
   2896c:	490f      	ldr	r1, [pc, #60]	; (289ac <rest_client_request+0x490>)
		char *end_ptr = &req_ctx->resp_buff[resp_ctx->total_response_len];
   2896e:	eb08 0907 	add.w	r9, r8, r7
		LOG_WRN("No data in a response body");
   28972:	f009 faaf 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
		*end_ptr = '\0';
   28976:	f808 6007 	strb.w	r6, [r8, r7]
		resp_ctx->response_len = 0;
   2897a:	e9c5 6901 	strd	r6, r9, [r5, #4]
   2897e:	e636      	b.n	285ee <rest_client_request+0xd2>
	if (!resp_ctx->response || !resp_ctx->response_len) {
   28980:	686b      	ldr	r3, [r5, #4]
   28982:	2b00      	cmp	r3, #0
   28984:	d0e8      	beq.n	28958 <rest_client_request+0x43c>
   28986:	2600      	movs	r6, #0
   28988:	e631      	b.n	285ee <rest_client_request+0xd2>
		resp_ctx->used_socket_is_alive = true;
   2898a:	2301      	movs	r3, #1
   2898c:	636b      	str	r3, [r5, #52]	; 0x34
		LOG_INF("Socket with id: %d was kept alive and wasn't closed",
   2898e:	4b0e      	ldr	r3, [pc, #56]	; (289c8 <rest_client_request+0x4ac>)
   28990:	9003      	str	r0, [sp, #12]
   28992:	9302      	str	r3, [sp, #8]
   28994:	2300      	movs	r3, #0
   28996:	2203      	movs	r2, #3
   28998:	4618      	mov	r0, r3
   2899a:	e9cd 3300 	strd	r3, r3, [sp]
   2899e:	4903      	ldr	r1, [pc, #12]	; (289ac <rest_client_request+0x490>)
   289a0:	f009 fa98 	bl	31ed4 <z_log_msg_runtime_create.constprop.0>
	return ret;
   289a4:	e63e      	b.n	28624 <rest_client_request+0x108>
   289a6:	bf00      	nop
   289a8:	00039c63 	.word	0x00039c63
   289ac:	00034ae0 	.word	0x00034ae0
   289b0:	00039dee 	.word	0x00039dee
   289b4:	00039c90 	.word	0x00039c90
   289b8:	00039ce1 	.word	0x00039ce1
   289bc:	00039d08 	.word	0x00039d08
   289c0:	00039d24 	.word	0x00039d24
   289c4:	00039d7d 	.word	0x00039d7d
   289c8:	00039dba 	.word	0x00039dba

000289cc <tfm_ns_interface_dispatch>:
K_MUTEX_DEFINE(tfm_mutex);

int32_t tfm_ns_interface_dispatch(veneer_fn fn,
				  uint32_t arg0, uint32_t arg1,
				  uint32_t arg2, uint32_t arg3)
{
   289cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   289d0:	461f      	mov	r7, r3
	return !z_sys_post_kernel;
   289d2:	4b15      	ldr	r3, [pc, #84]	; (28a28 <tfm_ns_interface_dispatch+0x5c>)
   289d4:	4604      	mov	r4, r0
   289d6:	f893 8000 	ldrb.w	r8, [r3]
   289da:	460d      	mov	r5, r1
   289dc:	4616      	mov	r6, r2
   289de:	b0a2      	sub	sp, #136	; 0x88
	int32_t result;
	bool is_pre_kernel = k_is_pre_kernel();

	if (!is_pre_kernel) {
   289e0:	f1b8 0f00 	cmp.w	r8, #0
   289e4:	d115      	bne.n	28a12 <tfm_ns_interface_dispatch+0x46>
#endif
	}

	struct fpu_ctx_full context_buffer;

	z_arm_save_fp_context(&context_buffer);
   289e6:	4668      	mov	r0, sp
   289e8:	f008 f8d2 	bl	30b90 <z_arm_save_fp_context>

	result = fn(arg0, arg1, arg2, arg3);
   289ec:	463a      	mov	r2, r7
   289ee:	4631      	mov	r1, r6
   289f0:	4628      	mov	r0, r5
   289f2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   289f4:	47a0      	blx	r4
   289f6:	4604      	mov	r4, r0

	z_arm_restore_fp_context(&context_buffer);
   289f8:	4668      	mov	r0, sp
   289fa:	f008 f8e1 	bl	30bc0 <z_arm_restore_fp_context>

	if (!is_pre_kernel) {
   289fe:	f1b8 0f00 	cmp.w	r8, #0
   28a02:	d002      	beq.n	28a0a <tfm_ns_interface_dispatch+0x3e>
	return z_impl_k_mutex_unlock(mutex);
   28a04:	4809      	ldr	r0, [pc, #36]	; (28a2c <tfm_ns_interface_dispatch+0x60>)
   28a06:	f003 fd6d 	bl	2c4e4 <z_impl_k_mutex_unlock>

		k_mutex_unlock(&tfm_mutex);
	}

	return result;
}
   28a0a:	4620      	mov	r0, r4
   28a0c:	b022      	add	sp, #136	; 0x88
   28a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_k_mutex_lock(mutex, timeout);
   28a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28a16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28a1a:	4804      	ldr	r0, [pc, #16]	; (28a2c <tfm_ns_interface_dispatch+0x60>)
   28a1c:	f003 fcea 	bl	2c3f4 <z_impl_k_mutex_lock>
		if (k_mutex_lock(&tfm_mutex, K_FOREVER) != 0) {
   28a20:	2800      	cmp	r0, #0
   28a22:	d0e0      	beq.n	289e6 <tfm_ns_interface_dispatch+0x1a>
			return (int32_t)TFM_ERROR_GENERIC;
   28a24:	241f      	movs	r4, #31
   28a26:	e7f0      	b.n	28a0a <tfm_ns_interface_dispatch+0x3e>
   28a28:	20010799 	.word	0x20010799
   28a2c:	2000c9dc 	.word	0x2000c9dc

00028a30 <psa_generate_random>:
    return status;
}

psa_status_t psa_generate_random(uint8_t *output,
                                 size_t output_size)
{
   28a30:	b530      	push	{r4, r5, lr}
   28a32:	b095      	sub	sp, #84	; 0x54
   28a34:	4605      	mov	r5, r0
   28a36:	460c      	mov	r4, r1
    psa_status_t status;
    struct tfm_crypto_pack_iovec iov = {
   28a38:	2230      	movs	r2, #48	; 0x30
   28a3a:	2100      	movs	r1, #0
   28a3c:	a808      	add	r0, sp, #32
   28a3e:	f00b f916 	bl	33c6e <memset>
   28a42:	233f      	movs	r3, #63	; 0x3f
   28a44:	9307      	str	r3, [sp, #28]
        .srv_id = TFM_CRYPTO_GENERATE_RANDOM_SID,
    };

    psa_invec in_vec[] = {
   28a46:	ab07      	add	r3, sp, #28
   28a48:	9303      	str	r3, [sp, #12]
   28a4a:	2334      	movs	r3, #52	; 0x34
        {.base = &iov, .len = sizeof(struct tfm_crypto_pack_iovec)},
    };

    psa_outvec out_vec[] = {
   28a4c:	9406      	str	r4, [sp, #24]
   28a4e:	e9cd 3504 	strd	r3, r5, [sp, #16]
        {.base = output, .len = output_size},
    };

    if (output_size == 0) {
   28a52:	b154      	cbz	r4, 28a6a <psa_generate_random+0x3a>
        return PSA_SUCCESS;
    }

    status = API_DISPATCH(tfm_crypto_generate_random,
   28a54:	2301      	movs	r3, #1
   28a56:	aa05      	add	r2, sp, #20
   28a58:	9200      	str	r2, [sp, #0]
   28a5a:	2100      	movs	r1, #0
   28a5c:	4804      	ldr	r0, [pc, #16]	; (28a70 <psa_generate_random+0x40>)
   28a5e:	9301      	str	r3, [sp, #4]
   28a60:	aa03      	add	r2, sp, #12
   28a62:	f000 f807 	bl	28a74 <psa_call>
                          TFM_CRYPTO_GENERATE_RANDOM);

    return status;
}
   28a66:	b015      	add	sp, #84	; 0x54
   28a68:	bd30      	pop	{r4, r5, pc}
        return PSA_SUCCESS;
   28a6a:	4620      	mov	r0, r4
   28a6c:	e7fb      	b.n	28a66 <psa_generate_random+0x36>
   28a6e:	bf00      	nop
   28a70:	40000100 	.word	0x40000100

00028a74 <psa_call>:
psa_status_t psa_call(psa_handle_t handle, int32_t type,
                      const psa_invec *in_vec,
                      size_t in_len,
                      psa_outvec *out_vec,
                      size_t out_len)
{
   28a74:	b470      	push	{r4, r5, r6}
   28a76:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
    if ((type > INT16_MAX) ||
   28a7a:	f501 4600 	add.w	r6, r1, #32768	; 0x8000
   28a7e:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
   28a82:	d20d      	bcs.n	28aa0 <psa_call+0x2c>
        (type < INT16_MIN) ||
   28a84:	2bff      	cmp	r3, #255	; 0xff
   28a86:	d80b      	bhi.n	28aa0 <psa_call+0x2c>
        (in_len > UINT8_MAX) ||
   28a88:	2cff      	cmp	r4, #255	; 0xff
   28a8a:	d809      	bhi.n	28aa0 <psa_call+0x2c>
    }

    return tfm_ns_interface_dispatch(
                                (veneer_fn)tfm_psa_call_veneer,
                                (uint32_t)handle,
                                PARAM_PACK(type, in_len, out_len),
   28a8c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    return tfm_ns_interface_dispatch(
   28a90:	4613      	mov	r3, r2
   28a92:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
   28a96:	4601      	mov	r1, r0
                                (uint32_t)in_vec,
                                (uint32_t)out_vec);
}
   28a98:	bc70      	pop	{r4, r5, r6}
    return tfm_ns_interface_dispatch(
   28a9a:	4803      	ldr	r0, [pc, #12]	; (28aa8 <psa_call+0x34>)
   28a9c:	f7ff bf96 	b.w	289cc <tfm_ns_interface_dispatch>
}
   28aa0:	f06f 0080 	mvn.w	r0, #128	; 0x80
   28aa4:	bc70      	pop	{r4, r5, r6}
   28aa6:	4770      	bx	lr
   28aa8:	00017c21 	.word	0x00017c21

00028aac <psa_connect>:

/* Following veneers are only needed by connection-based services */
#if CONFIG_TFM_CONNECTION_BASED_SERVICE_API == 1
psa_handle_t psa_connect(uint32_t sid, uint32_t version)
{
    return tfm_ns_interface_dispatch(
   28aac:	2300      	movs	r3, #0
{
   28aae:	b507      	push	{r0, r1, r2, lr}
   28ab0:	460a      	mov	r2, r1
    return tfm_ns_interface_dispatch(
   28ab2:	9300      	str	r3, [sp, #0]
   28ab4:	4601      	mov	r1, r0
   28ab6:	4803      	ldr	r0, [pc, #12]	; (28ac4 <psa_connect+0x18>)
   28ab8:	f7ff ff88 	bl	289cc <tfm_ns_interface_dispatch>
                                (veneer_fn)tfm_psa_connect_veneer,
                                sid,
                                version,
                                0,
                                0);
}
   28abc:	b003      	add	sp, #12
   28abe:	f85d fb04 	ldr.w	pc, [sp], #4
   28ac2:	bf00      	nop
   28ac4:	00017c19 	.word	0x00017c19

00028ac8 <psa_close>:

void psa_close(psa_handle_t handle)
{
    (void)tfm_ns_interface_dispatch(
   28ac8:	2300      	movs	r3, #0
{
   28aca:	b507      	push	{r0, r1, r2, lr}
   28acc:	4601      	mov	r1, r0
    (void)tfm_ns_interface_dispatch(
   28ace:	461a      	mov	r2, r3
   28ad0:	9300      	str	r3, [sp, #0]
   28ad2:	4803      	ldr	r0, [pc, #12]	; (28ae0 <psa_close+0x18>)
   28ad4:	f7ff ff7a 	bl	289cc <tfm_ns_interface_dispatch>
                         (veneer_fn)tfm_psa_close_veneer,
                         (uint32_t)handle,
                         0,
                         0,
                         0);
}
   28ad8:	b003      	add	sp, #12
   28ada:	f85d fb04 	ldr.w	pc, [sp], #4
   28ade:	bf00      	nop
   28ae0:	00017c11 	.word	0x00017c11

00028ae4 <compare_double>:
{
   28ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   28ae6:	ec41 0b10 	vmov	d0, r0, r1
{
   28aea:	ed2d 8b04 	vpush	{d8-d9}
   28aee:	ec41 0b18 	vmov	d8, r0, r1
   28af2:	ec43 2b19 	vmov	d9, r2, r3
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   28af6:	f00b f86f 	bl	33bd8 <fabs>
   28afa:	ec55 4b10 	vmov	r4, r5, d0
   28afe:	eeb0 0a49 	vmov.f32	s0, s18
   28b02:	eef0 0a69 	vmov.f32	s1, s19
   28b06:	f00b f867 	bl	33bd8 <fabs>
   28b0a:	4620      	mov	r0, r4
   28b0c:	ec53 2b10 	vmov	r2, r3, d0
   28b10:	4629      	mov	r1, r5
   28b12:	f7f4 f865 	bl	1cbe0 <__aeabi_dcmpgt>
   28b16:	b328      	cbz	r0, 28b64 <compare_double+0x80>
   28b18:	eeb0 0a48 	vmov.f32	s0, s16
   28b1c:	eef0 0a68 	vmov.f32	s1, s17
   28b20:	f00b f85a 	bl	33bd8 <fabs>
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   28b24:	ec53 2b19 	vmov	r2, r3, d9
   28b28:	ec51 0b18 	vmov	r0, r1, d8
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   28b2c:	ec55 4b10 	vmov	r4, r5, d0
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
   28b30:	f7f3 fc0e 	bl	1c350 <__aeabi_dsub>
   28b34:	ec41 0b10 	vmov	d0, r0, r1
   28b38:	f00b f84e 	bl	33bd8 <fabs>
   28b3c:	2200      	movs	r2, #0
   28b3e:	4b0c      	ldr	r3, [pc, #48]	; (28b70 <compare_double+0x8c>)
   28b40:	4620      	mov	r0, r4
   28b42:	4629      	mov	r1, r5
   28b44:	ec57 6b10 	vmov	r6, r7, d0
   28b48:	f7f3 fdba 	bl	1c6c0 <__aeabi_dmul>
   28b4c:	4602      	mov	r2, r0
   28b4e:	460b      	mov	r3, r1
   28b50:	4630      	mov	r0, r6
   28b52:	4639      	mov	r1, r7
   28b54:	f7f4 f830 	bl	1cbb8 <__aeabi_dcmple>
}
   28b58:	ecbd 8b04 	vpop	{d8-d9}
   28b5c:	3800      	subs	r0, #0
   28b5e:	bf18      	it	ne
   28b60:	2001      	movne	r0, #1
   28b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   28b64:	eeb0 0a49 	vmov.f32	s0, s18
   28b68:	eef0 0a69 	vmov.f32	s1, s19
   28b6c:	e7d8      	b.n	28b20 <compare_double+0x3c>
   28b6e:	bf00      	nop
   28b70:	3cb00000 	.word	0x3cb00000

00028b74 <get_object_item>:
{
   28b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28b76:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   28b78:	b360      	cbz	r0, 28bd4 <get_object_item+0x60>
   28b7a:	b359      	cbz	r1, 28bd4 <get_object_item+0x60>
    current_element = object->child;
   28b7c:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   28b7e:	b9fa      	cbnz	r2, 28bc0 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   28b80:	4e17      	ldr	r6, [pc, #92]	; (28be0 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   28b82:	b33c      	cbz	r4, 28bd4 <get_object_item+0x60>
   28b84:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   28b86:	b1c3      	cbz	r3, 28bba <get_object_item+0x46>
    if (string1 == string2)
   28b88:	42ab      	cmp	r3, r5
   28b8a:	d021      	beq.n	28bd0 <get_object_item+0x5c>
   28b8c:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   28b90:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   28b92:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   28b96:	460f      	mov	r7, r1
   28b98:	5d8a      	ldrb	r2, [r1, r6]
   28b9a:	f002 0203 	and.w	r2, r2, #3
   28b9e:	2a01      	cmp	r2, #1
   28ba0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28ba4:	bf08      	it	eq
   28ba6:	f101 0720 	addeq.w	r7, r1, #32
   28baa:	5cb0      	ldrb	r0, [r6, r2]
   28bac:	f000 0003 	and.w	r0, r0, #3
   28bb0:	2801      	cmp	r0, #1
   28bb2:	bf08      	it	eq
   28bb4:	3220      	addeq	r2, #32
   28bb6:	4297      	cmp	r7, r2
   28bb8:	d00f      	beq.n	28bda <get_object_item+0x66>
            current_element = current_element->next;
   28bba:	6824      	ldr	r4, [r4, #0]
   28bbc:	e7e1      	b.n	28b82 <get_object_item+0xe>
            current_element = current_element->next;
   28bbe:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   28bc0:	b144      	cbz	r4, 28bd4 <get_object_item+0x60>
   28bc2:	6a21      	ldr	r1, [r4, #32]
   28bc4:	b121      	cbz	r1, 28bd0 <get_object_item+0x5c>
   28bc6:	4628      	mov	r0, r5
   28bc8:	f7f4 fa60 	bl	1d08c <strcmp>
   28bcc:	2800      	cmp	r0, #0
   28bce:	d1f6      	bne.n	28bbe <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   28bd0:	6a23      	ldr	r3, [r4, #32]
   28bd2:	b903      	cbnz	r3, 28bd6 <get_object_item+0x62>
        return NULL;
   28bd4:	2400      	movs	r4, #0
}
   28bd6:	4620      	mov	r0, r4
   28bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   28bda:	2900      	cmp	r1, #0
   28bdc:	d1d9      	bne.n	28b92 <get_object_item+0x1e>
   28bde:	e7f7      	b.n	28bd0 <get_object_item+0x5c>
   28be0:	00039f71 	.word	0x00039f71

00028be4 <print_string_ptr>:
{
   28be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const char quotes[] = "\"\"";
   28be8:	4b52      	ldr	r3, [pc, #328]	; (28d34 <print_string_ptr+0x150>)
{
   28bea:	b085      	sub	sp, #20
    const char quotes[] = "\"\"";
   28bec:	881a      	ldrh	r2, [r3, #0]
   28bee:	789b      	ldrb	r3, [r3, #2]
{
   28bf0:	4605      	mov	r5, r0
    if (output_buffer == NULL)
   28bf2:	460f      	mov	r7, r1
    const char quotes[] = "\"\"";
   28bf4:	f8ad 200c 	strh.w	r2, [sp, #12]
   28bf8:	f88d 300e 	strb.w	r3, [sp, #14]
    if (output_buffer == NULL)
   28bfc:	b919      	cbnz	r1, 28c06 <print_string_ptr+0x22>
        return false;
   28bfe:	2000      	movs	r0, #0
}
   28c00:	b005      	add	sp, #20
   28c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (input == NULL)
   28c06:	b340      	cbz	r0, 28c5a <print_string_ptr+0x76>
   28c08:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   28c0a:	f04f 0b00 	mov.w	fp, #0
   28c0e:	2001      	movs	r0, #1
   28c10:	4c49      	ldr	r4, [pc, #292]	; (28d38 <print_string_ptr+0x154>)
   28c12:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   28c14:	f811 3b01 	ldrb.w	r3, [r1], #1
   28c18:	bb6b      	cbnz	r3, 28c76 <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   28c1a:	ebaa 0a05 	sub.w	sl, sl, r5
   28c1e:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   28c20:	4638      	mov	r0, r7
   28c22:	f10a 0103 	add.w	r1, sl, #3
   28c26:	f009 f9cf 	bl	31fc8 <ensure>
    if (output == NULL)
   28c2a:	4606      	mov	r6, r0
   28c2c:	2800      	cmp	r0, #0
   28c2e:	d0e6      	beq.n	28bfe <print_string_ptr+0x1a>
    if (escape_characters == 0)
   28c30:	2322      	movs	r3, #34	; 0x22
        output[output_length + 1] = '\"';
   28c32:	f10a 0901 	add.w	r9, sl, #1
        output[output_length + 2] = '\0';
   28c36:	f10a 0802 	add.w	r8, sl, #2
        memcpy(output + 1, input, output_length);
   28c3a:	1c44      	adds	r4, r0, #1
        output[0] = '\"';
   28c3c:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   28c3e:	f1bb 0f00 	cmp.w	fp, #0
   28c42:	d12e      	bne.n	28ca2 <print_string_ptr+0xbe>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28c44:	4652      	mov	r2, sl
   28c46:	4629      	mov	r1, r5
   28c48:	4620      	mov	r0, r4
   28c4a:	f00a fff0 	bl	33c2e <memcpy>
        output[output_length + 1] = '\"';
   28c4e:	2322      	movs	r3, #34	; 0x22
   28c50:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   28c54:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   28c58:	e00b      	b.n	28c72 <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   28c5a:	2103      	movs	r1, #3
   28c5c:	4638      	mov	r0, r7
   28c5e:	f009 f9b3 	bl	31fc8 <ensure>
        if (output == NULL)
   28c62:	2800      	cmp	r0, #0
   28c64:	d0cb      	beq.n	28bfe <print_string_ptr+0x1a>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   28c66:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   28c6a:	a903      	add	r1, sp, #12
   28c6c:	1ad2      	subs	r2, r2, r3
   28c6e:	f00b f9bc 	bl	33fea <strncpy>
    return true;
   28c72:	2001      	movs	r0, #1
   28c74:	e7c4      	b.n	28c00 <print_string_ptr+0x1c>
        switch (*input_pointer)
   28c76:	2b22      	cmp	r3, #34	; 0x22
   28c78:	d80b      	bhi.n	28c92 <print_string_ptr+0xae>
   28c7a:	2b07      	cmp	r3, #7
   28c7c:	d90c      	bls.n	28c98 <print_string_ptr+0xb4>
   28c7e:	f1a3 0208 	sub.w	r2, r3, #8
   28c82:	b2d2      	uxtb	r2, r2
   28c84:	fa00 f202 	lsl.w	r2, r0, r2
   28c88:	4222      	tst	r2, r4
   28c8a:	d005      	beq.n	28c98 <print_string_ptr+0xb4>
                escape_characters++;
   28c8c:	f10b 0b01 	add.w	fp, fp, #1
                break;
   28c90:	e7bf      	b.n	28c12 <print_string_ptr+0x2e>
        switch (*input_pointer)
   28c92:	2b5c      	cmp	r3, #92	; 0x5c
   28c94:	d1bd      	bne.n	28c12 <print_string_ptr+0x2e>
   28c96:	e7f9      	b.n	28c8c <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   28c98:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   28c9a:	bf98      	it	ls
   28c9c:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   28ca0:	e7b7      	b.n	28c12 <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   28ca2:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   28ca6:	f04f 0b74 	mov.w	fp, #116	; 0x74
   28caa:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   28cac:	4a23      	ldr	r2, [pc, #140]	; (28d3c <print_string_ptr+0x158>)
   28cae:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   28cb0:	9901      	ldr	r1, [sp, #4]
   28cb2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   28cb6:	9101      	str	r1, [sp, #4]
   28cb8:	b92b      	cbnz	r3, 28cc6 <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   28cba:	2222      	movs	r2, #34	; 0x22
   28cbc:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   28cc0:	f806 3008 	strb.w	r3, [r6, r8]
   28cc4:	e7d5      	b.n	28c72 <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   28cc6:	2b1f      	cmp	r3, #31
   28cc8:	d907      	bls.n	28cda <print_string_ptr+0xf6>
   28cca:	2b22      	cmp	r3, #34	; 0x22
   28ccc:	d005      	beq.n	28cda <print_string_ptr+0xf6>
   28cce:	2b5c      	cmp	r3, #92	; 0x5c
   28cd0:	d003      	beq.n	28cda <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   28cd2:	4620      	mov	r0, r4
   28cd4:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   28cd6:	1c44      	adds	r4, r0, #1
   28cd8:	e7ea      	b.n	28cb0 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   28cda:	4620      	mov	r0, r4
            switch (*input_pointer)
   28cdc:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   28cde:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   28ce2:	781b      	ldrb	r3, [r3, #0]
   28ce4:	2b0d      	cmp	r3, #13
   28ce6:	d80a      	bhi.n	28cfe <print_string_ptr+0x11a>
   28ce8:	2b07      	cmp	r3, #7
   28cea:	d919      	bls.n	28d20 <print_string_ptr+0x13c>
   28cec:	f1a3 0108 	sub.w	r1, r3, #8
   28cf0:	2905      	cmp	r1, #5
   28cf2:	d815      	bhi.n	28d20 <print_string_ptr+0x13c>
   28cf4:	e8df f001 	tbb	[pc, r1]
   28cf8:	140d1109 	.word	0x140d1109
   28cfc:	0f0b      	.short	0x0f0b
   28cfe:	2b22      	cmp	r3, #34	; 0x22
   28d00:	d001      	beq.n	28d06 <print_string_ptr+0x122>
   28d02:	2b5c      	cmp	r3, #92	; 0x5c
   28d04:	d10c      	bne.n	28d20 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   28d06:	7063      	strb	r3, [r4, #1]
                    break;
   28d08:	e7e5      	b.n	28cd6 <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   28d0a:	2362      	movs	r3, #98	; 0x62
   28d0c:	e7fb      	b.n	28d06 <print_string_ptr+0x122>
                    *output_pointer = 'f';
   28d0e:	2366      	movs	r3, #102	; 0x66
   28d10:	e7f9      	b.n	28d06 <print_string_ptr+0x122>
                    *output_pointer = 'n';
   28d12:	236e      	movs	r3, #110	; 0x6e
   28d14:	e7f7      	b.n	28d06 <print_string_ptr+0x122>
                    *output_pointer = 'r';
   28d16:	2372      	movs	r3, #114	; 0x72
   28d18:	e7f5      	b.n	28d06 <print_string_ptr+0x122>
                    *output_pointer = 't';
   28d1a:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   28d1e:	e7da      	b.n	28cd6 <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (size_t)(output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   28d20:	6839      	ldr	r1, [r7, #0]
   28d22:	687d      	ldr	r5, [r7, #4]
   28d24:	1a41      	subs	r1, r0, r1
   28d26:	1a69      	subs	r1, r5, r1
   28d28:	f005 f856 	bl	2ddd8 <sniprintf>
                    output_pointer += 4;
   28d2c:	4a03      	ldr	r2, [pc, #12]	; (28d3c <print_string_ptr+0x158>)
   28d2e:	1d60      	adds	r0, r4, #5
                    break;
   28d30:	e7d1      	b.n	28cd6 <print_string_ptr+0xf2>
   28d32:	bf00      	nop
   28d34:	00039e29 	.word	0x00039e29
   28d38:	04000037 	.word	0x04000037
   28d3c:	00039e23 	.word	0x00039e23

00028d40 <cJSON_strdup.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   28d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   28d42:	4605      	mov	r5, r0
   28d44:	b180      	cbz	r0, 28d68 <cJSON_strdup.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   28d46:	f7f4 f9ab 	bl	1d0a0 <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   28d4a:	4b08      	ldr	r3, [pc, #32]	; (28d6c <cJSON_strdup.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   28d4c:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   28d4e:	4610      	mov	r0, r2
   28d50:	681b      	ldr	r3, [r3, #0]
   28d52:	9201      	str	r2, [sp, #4]
   28d54:	4798      	blx	r3
    if (copy == NULL)
   28d56:	4604      	mov	r4, r0
   28d58:	b118      	cbz	r0, 28d62 <cJSON_strdup.constprop.0+0x22>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28d5a:	4629      	mov	r1, r5
   28d5c:	9a01      	ldr	r2, [sp, #4]
   28d5e:	f00a ff66 	bl	33c2e <memcpy>
}
   28d62:	4620      	mov	r0, r4
   28d64:	b003      	add	sp, #12
   28d66:	bd30      	pop	{r4, r5, pc}
        return NULL;
   28d68:	4604      	mov	r4, r0
   28d6a:	e7fa      	b.n	28d62 <cJSON_strdup.constprop.0+0x22>
   28d6c:	2000c5e8 	.word	0x2000c5e8

00028d70 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   28d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28d72:	460d      	mov	r5, r1
   28d74:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   28d76:	4607      	mov	r7, r0
   28d78:	b300      	cbz	r0, 28dbc <add_item_to_object.constprop.0+0x4c>
   28d7a:	b1f9      	cbz	r1, 28dbc <add_item_to_object.constprop.0+0x4c>
   28d7c:	b1f2      	cbz	r2, 28dbc <add_item_to_object.constprop.0+0x4c>
   28d7e:	4290      	cmp	r0, r2
   28d80:	d01c      	beq.n	28dbc <add_item_to_object.constprop.0+0x4c>
    if (constant_key)
   28d82:	b193      	cbz	r3, 28daa <add_item_to_object.constprop.0+0x3a>
        new_type = item->type | cJSON_StringIsConst;
   28d84:	68d6      	ldr	r6, [r2, #12]
   28d86:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   28d8a:	68e3      	ldr	r3, [r4, #12]
   28d8c:	059b      	lsls	r3, r3, #22
   28d8e:	d404      	bmi.n	28d9a <add_item_to_object.constprop.0+0x2a>
   28d90:	6a20      	ldr	r0, [r4, #32]
   28d92:	b110      	cbz	r0, 28d9a <add_item_to_object.constprop.0+0x2a>
        hooks->deallocate(item->string);
   28d94:	4b0a      	ldr	r3, [pc, #40]	; (28dc0 <add_item_to_object.constprop.0+0x50>)
   28d96:	685b      	ldr	r3, [r3, #4]
   28d98:	4798      	blx	r3
    return add_item_to_array(object, item);
   28d9a:	4621      	mov	r1, r4
   28d9c:	4638      	mov	r0, r7
    item->string = new_key;
   28d9e:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   28da0:	60e6      	str	r6, [r4, #12]
}
   28da2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   28da6:	f009 b8fb 	b.w	31fa0 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   28daa:	4608      	mov	r0, r1
   28dac:	f7ff ffc8 	bl	28d40 <cJSON_strdup.constprop.0>
        if (new_key == NULL)
   28db0:	4605      	mov	r5, r0
   28db2:	b118      	cbz	r0, 28dbc <add_item_to_object.constprop.0+0x4c>
        new_type = item->type & ~cJSON_StringIsConst;
   28db4:	68e6      	ldr	r6, [r4, #12]
   28db6:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   28dba:	e7e6      	b.n	28d8a <add_item_to_object.constprop.0+0x1a>
}
   28dbc:	2000      	movs	r0, #0
   28dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28dc0:	2000c5e8 	.word	0x2000c5e8

00028dc4 <print_value>:
{
   28dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28dc8:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   28dca:	4606      	mov	r6, r0
{
   28dcc:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   28dce:	b908      	cbnz	r0, 28dd4 <print_value+0x10>
    switch ((item->type) & 0xFF)
   28dd0:	2500      	movs	r5, #0
   28dd2:	e06f      	b.n	28eb4 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   28dd4:	2900      	cmp	r1, #0
   28dd6:	d0fb      	beq.n	28dd0 <print_value+0xc>
    switch ((item->type) & 0xFF)
   28dd8:	7b05      	ldrb	r5, [r0, #12]
   28dda:	2d10      	cmp	r5, #16
   28ddc:	f000 80ea 	beq.w	28fb4 <print_value+0x1f0>
   28de0:	dc18      	bgt.n	28e14 <print_value+0x50>
   28de2:	1e6b      	subs	r3, r5, #1
   28de4:	2b07      	cmp	r3, #7
   28de6:	d8f3      	bhi.n	28dd0 <print_value+0xc>
   28de8:	2b07      	cmp	r3, #7
   28dea:	d8f1      	bhi.n	28dd0 <print_value+0xc>
   28dec:	a201      	add	r2, pc, #4	; (adr r2, 28df4 <print_value+0x30>)
   28dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   28df2:	bf00      	nop
   28df4:	00028e91 	.word	0x00028e91
   28df8:	00028ebd 	.word	0x00028ebd
   28dfc:	00028dd1 	.word	0x00028dd1
   28e00:	00028e69 	.word	0x00028e69
   28e04:	00028dd1 	.word	0x00028dd1
   28e08:	00028dd1 	.word	0x00028dd1
   28e0c:	00028dd1 	.word	0x00028dd1
   28e10:	00028ec1 	.word	0x00028ec1
   28e14:	2d40      	cmp	r5, #64	; 0x40
   28e16:	f000 80fc 	beq.w	29012 <print_value+0x24e>
   28e1a:	2d80      	cmp	r5, #128	; 0x80
   28e1c:	f000 80b6 	beq.w	28f8c <print_value+0x1c8>
   28e20:	2d20      	cmp	r5, #32
   28e22:	d1d5      	bne.n	28dd0 <print_value+0xc>
            return print_array(item, output_buffer);
   28e24:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   28e26:	2101      	movs	r1, #1
   28e28:	4620      	mov	r0, r4
   28e2a:	f009 f8cd 	bl	31fc8 <ensure>
    if (output_pointer == NULL)
   28e2e:	2800      	cmp	r0, #0
   28e30:	d0ce      	beq.n	28dd0 <print_value+0xc>
    *output_pointer = '[';
   28e32:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   28e34:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   28e36:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   28e3a:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   28e3c:	68a3      	ldr	r3, [r4, #8]
   28e3e:	3301      	adds	r3, #1
   28e40:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   28e42:	68e3      	ldr	r3, [r4, #12]
   28e44:	3301      	adds	r3, #1
   28e46:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   28e48:	2e00      	cmp	r6, #0
   28e4a:	f040 80b9 	bne.w	28fc0 <print_value+0x1fc>
    output_pointer = ensure(output_buffer, 2);
   28e4e:	2102      	movs	r1, #2
   28e50:	4620      	mov	r0, r4
   28e52:	f009 f8b9 	bl	31fc8 <ensure>
    if (output_pointer == NULL)
   28e56:	2800      	cmp	r0, #0
   28e58:	d0ba      	beq.n	28dd0 <print_value+0xc>
    *output_pointer++ = ']';
   28e5a:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   28e5c:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   28e5e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   28e60:	68e3      	ldr	r3, [r4, #12]
   28e62:	3b01      	subs	r3, #1
   28e64:	60e3      	str	r3, [r4, #12]
   28e66:	e011      	b.n	28e8c <print_value+0xc8>
            const char buff[] = "null";
   28e68:	4b82      	ldr	r3, [pc, #520]	; (29074 <print_value+0x2b0>)
            const char buff[] = "true";
   28e6a:	6818      	ldr	r0, [r3, #0]
   28e6c:	791b      	ldrb	r3, [r3, #4]
   28e6e:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   28e70:	2105      	movs	r1, #5
   28e72:	4620      	mov	r0, r4
            const char buff[] = "true";
   28e74:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   28e78:	f009 f8a6 	bl	31fc8 <ensure>
            if (output == NULL)
   28e7c:	4605      	mov	r5, r0
   28e7e:	b1c8      	cbz	r0, 28eb4 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   28e80:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   28e84:	a907      	add	r1, sp, #28
   28e86:	1ad2      	subs	r2, r2, r3
   28e88:	f00b f8af 	bl	33fea <strncpy>
    return true;
   28e8c:	2501      	movs	r5, #1
   28e8e:	e011      	b.n	28eb4 <print_value+0xf0>
            const char buff[] = "false";
   28e90:	4b79      	ldr	r3, [pc, #484]	; (29078 <print_value+0x2b4>)
            output = ensure(output_buffer, sizeof(buff));
   28e92:	2106      	movs	r1, #6
            const char buff[] = "false";
   28e94:	6818      	ldr	r0, [r3, #0]
   28e96:	889b      	ldrh	r3, [r3, #4]
   28e98:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   28e9a:	4620      	mov	r0, r4
            const char buff[] = "false";
   28e9c:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   28ea0:	f009 f892 	bl	31fc8 <ensure>
            if (output == NULL)
   28ea4:	2800      	cmp	r0, #0
   28ea6:	d093      	beq.n	28dd0 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   28ea8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   28eac:	a907      	add	r1, sp, #28
   28eae:	1ad2      	subs	r2, r2, r3
   28eb0:	f00b f89b 	bl	33fea <strncpy>
}
   28eb4:	4628      	mov	r0, r5
   28eb6:	b00f      	add	sp, #60	; 0x3c
   28eb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   28ebc:	4b6f      	ldr	r3, [pc, #444]	; (2907c <print_value+0x2b8>)
   28ebe:	e7d4      	b.n	28e6a <print_value+0xa6>
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   28ec0:	2100      	movs	r1, #0
    double d = item->valuedouble;
   28ec2:	e9d0 6706 	ldrd	r6, r7, [r0, #24]
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   28ec6:	2216      	movs	r2, #22
   28ec8:	a808      	add	r0, sp, #32
   28eca:	9107      	str	r1, [sp, #28]
   28ecc:	f00a fecf 	bl	33c6e <memset>
    double test = 0.0;
   28ed0:	2200      	movs	r2, #0
   28ed2:	2300      	movs	r3, #0
    if (isnan(d) || isinf(d))
   28ed4:	4630      	mov	r0, r6
    double test = 0.0;
   28ed6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (isnan(d) || isinf(d))
   28eda:	4639      	mov	r1, r7
   28edc:	4632      	mov	r2, r6
   28ede:	463b      	mov	r3, r7
   28ee0:	f7f3 fe88 	bl	1cbf4 <__aeabi_dcmpun>
   28ee4:	b988      	cbnz	r0, 28f0a <print_value+0x146>
   28ee6:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
   28eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28eee:	4630      	mov	r0, r6
   28ef0:	4649      	mov	r1, r9
   28ef2:	4b63      	ldr	r3, [pc, #396]	; (29080 <print_value+0x2bc>)
   28ef4:	f7f3 fe7e 	bl	1cbf4 <__aeabi_dcmpun>
   28ef8:	b9f0      	cbnz	r0, 28f38 <print_value+0x174>
   28efa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28efe:	4630      	mov	r0, r6
   28f00:	4649      	mov	r1, r9
   28f02:	4b5f      	ldr	r3, [pc, #380]	; (29080 <print_value+0x2bc>)
   28f04:	f7f3 fe58 	bl	1cbb8 <__aeabi_dcmple>
   28f08:	b9b0      	cbnz	r0, 28f38 <print_value+0x174>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   28f0a:	495a      	ldr	r1, [pc, #360]	; (29074 <print_value+0x2b0>)
   28f0c:	a807      	add	r0, sp, #28
   28f0e:	f00b f850 	bl	33fb2 <strcpy>
   28f12:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   28f14:	4620      	mov	r0, r4
   28f16:	1c69      	adds	r1, r5, #1
   28f18:	f009 f856 	bl	31fc8 <ensure>
    if (output_pointer == NULL)
   28f1c:	2800      	cmp	r0, #0
   28f1e:	f43f af57 	beq.w	28dd0 <print_value+0xc>
   28f22:	4602      	mov	r2, r0
   28f24:	ab07      	add	r3, sp, #28
   28f26:	1946      	adds	r6, r0, r5
    for (i = 0; i < ((size_t)length); i++)
   28f28:	4296      	cmp	r6, r2
   28f2a:	d129      	bne.n	28f80 <print_value+0x1bc>
    output_pointer[i] = '\0';
   28f2c:	2300      	movs	r3, #0
   28f2e:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   28f30:	68a0      	ldr	r0, [r4, #8]
   28f32:	4428      	add	r0, r5
   28f34:	60a0      	str	r0, [r4, #8]
    return true;
   28f36:	e7a9      	b.n	28e8c <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   28f38:	211a      	movs	r1, #26
   28f3a:	4a52      	ldr	r2, [pc, #328]	; (29084 <print_value+0x2c0>)
   28f3c:	e9cd 6700 	strd	r6, r7, [sp]
   28f40:	a807      	add	r0, sp, #28
   28f42:	f004 ff49 	bl	2ddd8 <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   28f46:	4950      	ldr	r1, [pc, #320]	; (29088 <print_value+0x2c4>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   28f48:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   28f4a:	aa04      	add	r2, sp, #16
   28f4c:	a807      	add	r0, sp, #28
   28f4e:	f004 ff77 	bl	2de40 <siscanf>
   28f52:	2801      	cmp	r0, #1
   28f54:	d00b      	beq.n	28f6e <print_value+0x1aa>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   28f56:	211a      	movs	r1, #26
   28f58:	e9cd 6700 	strd	r6, r7, [sp]
   28f5c:	4a4b      	ldr	r2, [pc, #300]	; (2908c <print_value+0x2c8>)
   28f5e:	a807      	add	r0, sp, #28
   28f60:	f004 ff3a 	bl	2ddd8 <sniprintf>
   28f64:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   28f66:	2d19      	cmp	r5, #25
   28f68:	f73f af32 	bgt.w	28dd0 <print_value+0xc>
   28f6c:	e7d2      	b.n	28f14 <print_value+0x150>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   28f6e:	4632      	mov	r2, r6
   28f70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   28f74:	463b      	mov	r3, r7
   28f76:	f7ff fdb5 	bl	28ae4 <compare_double>
   28f7a:	2800      	cmp	r0, #0
   28f7c:	d0eb      	beq.n	28f56 <print_value+0x192>
   28f7e:	e7f2      	b.n	28f66 <print_value+0x1a2>
        if (number_buffer[i] == decimal_point)
   28f80:	f813 1b01 	ldrb.w	r1, [r3], #1
   28f84:	3201      	adds	r2, #1
            output_pointer[i] = '.';
   28f86:	f802 1c01 	strb.w	r1, [r2, #-1]
    for (i = 0; i < ((size_t)length); i++)
   28f8a:	e7cd      	b.n	28f28 <print_value+0x164>
            if (item->valuestring == NULL)
   28f8c:	6900      	ldr	r0, [r0, #16]
   28f8e:	2800      	cmp	r0, #0
   28f90:	f43f af1e 	beq.w	28dd0 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   28f94:	f7f4 f884 	bl	1d0a0 <strlen>
   28f98:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   28f9a:	4611      	mov	r1, r2
   28f9c:	4620      	mov	r0, r4
   28f9e:	9203      	str	r2, [sp, #12]
   28fa0:	f009 f812 	bl	31fc8 <ensure>
            if (output == NULL)
   28fa4:	2800      	cmp	r0, #0
   28fa6:	f43f af13 	beq.w	28dd0 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28faa:	9a03      	ldr	r2, [sp, #12]
   28fac:	6931      	ldr	r1, [r6, #16]
   28fae:	f00a fe3e 	bl	33c2e <memcpy>
   28fb2:	e76b      	b.n	28e8c <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   28fb4:	6900      	ldr	r0, [r0, #16]
}
   28fb6:	b00f      	add	sp, #60	; 0x3c
   28fb8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    return print_string_ptr((unsigned char*)item->valuestring, p);
   28fbc:	f7ff be12 	b.w	28be4 <print_string_ptr>
        if (!print_value(current_element, output_buffer))
   28fc0:	4621      	mov	r1, r4
   28fc2:	4630      	mov	r0, r6
   28fc4:	f7ff fefe 	bl	28dc4 <print_value>
   28fc8:	2800      	cmp	r0, #0
   28fca:	f43f af01 	beq.w	28dd0 <print_value+0xc>
        update_offset(output_buffer);
   28fce:	4620      	mov	r0, r4
   28fd0:	f008 ffd9 	bl	31f86 <update_offset>
        if (current_element->next)
   28fd4:	6833      	ldr	r3, [r6, #0]
   28fd6:	b1bb      	cbz	r3, 29008 <print_value+0x244>
            length = (size_t) (output_buffer->format ? 2 : 1);
   28fd8:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   28fda:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   28fdc:	2b00      	cmp	r3, #0
   28fde:	bf14      	ite	ne
   28fe0:	f04f 0902 	movne.w	r9, #2
   28fe4:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   28fe8:	f109 0101 	add.w	r1, r9, #1
   28fec:	f008 ffec 	bl	31fc8 <ensure>
            if (output_pointer == NULL)
   28ff0:	2800      	cmp	r0, #0
   28ff2:	f43f aeed 	beq.w	28dd0 <print_value+0xc>
            *output_pointer++ = ',';
   28ff6:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   28ff8:	6963      	ldr	r3, [r4, #20]
   28ffa:	b93b      	cbnz	r3, 2900c <print_value+0x248>
            *output_pointer++ = ',';
   28ffc:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   28ffe:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   29002:	68a3      	ldr	r3, [r4, #8]
   29004:	444b      	add	r3, r9
   29006:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   29008:	6836      	ldr	r6, [r6, #0]
   2900a:	e71d      	b.n	28e48 <print_value+0x84>
                *output_pointer++ = ' ';
   2900c:	1c83      	adds	r3, r0, #2
   2900e:	7045      	strb	r5, [r0, #1]
   29010:	e7f5      	b.n	28ffe <print_value+0x23a>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   29012:	694b      	ldr	r3, [r1, #20]
   29014:	6885      	ldr	r5, [r0, #8]
   29016:	2b00      	cmp	r3, #0
   29018:	bf14      	ite	ne
   2901a:	2702      	movne	r7, #2
   2901c:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   2901e:	4620      	mov	r0, r4
   29020:	1c79      	adds	r1, r7, #1
   29022:	f008 ffd1 	bl	31fc8 <ensure>
    if (output_pointer == NULL)
   29026:	2800      	cmp	r0, #0
   29028:	f43f aed2 	beq.w	28dd0 <print_value+0xc>
    *output_pointer++ = '{';
   2902c:	237b      	movs	r3, #123	; 0x7b
   2902e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   29030:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   29032:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   29034:	3201      	adds	r2, #1
   29036:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   29038:	b10b      	cbz	r3, 2903e <print_value+0x27a>
        *output_pointer++ = '\n';
   2903a:	230a      	movs	r3, #10
   2903c:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   2903e:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   29040:	2609      	movs	r6, #9
    output_buffer->offset += length;
   29042:	443b      	add	r3, r7
        *output_pointer++ = ':';
   29044:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   29046:	60a3      	str	r3, [r4, #8]
        if (output_buffer->format)
   29048:	6963      	ldr	r3, [r4, #20]
    while (current_item)
   2904a:	bb0d      	cbnz	r5, 29090 <print_value+0x2cc>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   2904c:	2b00      	cmp	r3, #0
   2904e:	d07f      	beq.n	29150 <print_value+0x38c>
   29050:	68e1      	ldr	r1, [r4, #12]
   29052:	3101      	adds	r1, #1
   29054:	4620      	mov	r0, r4
   29056:	f008 ffb7 	bl	31fc8 <ensure>
    if (output_pointer == NULL)
   2905a:	2800      	cmp	r0, #0
   2905c:	f43f aeb8 	beq.w	28dd0 <print_value+0xc>
    if (output_buffer->format)
   29060:	6963      	ldr	r3, [r4, #20]
   29062:	2b00      	cmp	r3, #0
   29064:	d17e      	bne.n	29164 <print_value+0x3a0>
   29066:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   29068:	227d      	movs	r2, #125	; 0x7d
   2906a:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   2906c:	2200      	movs	r2, #0
   2906e:	705a      	strb	r2, [r3, #1]
   29070:	e6f6      	b.n	28e60 <print_value+0x9c>
   29072:	bf00      	nop
   29074:	00039e2c 	.word	0x00039e2c
   29078:	00039e43 	.word	0x00039e43
   2907c:	00039e49 	.word	0x00039e49
   29080:	7fefffff 	.word	0x7fefffff
   29084:	00039e31 	.word	0x00039e31
   29088:	00039e38 	.word	0x00039e38
   2908c:	00039e3c 	.word	0x00039e3c
        if (output_buffer->format)
   29090:	b173      	cbz	r3, 290b0 <print_value+0x2ec>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   29092:	4620      	mov	r0, r4
   29094:	68e1      	ldr	r1, [r4, #12]
   29096:	f008 ff97 	bl	31fc8 <ensure>
            if (output_pointer == NULL)
   2909a:	2800      	cmp	r0, #0
   2909c:	f43f ae98 	beq.w	28dd0 <print_value+0xc>
   290a0:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   290a2:	68e1      	ldr	r1, [r4, #12]
   290a4:	1a13      	subs	r3, r2, r0
   290a6:	428b      	cmp	r3, r1
   290a8:	d34f      	bcc.n	2914a <print_value+0x386>
            output_buffer->offset += output_buffer->depth;
   290aa:	68a3      	ldr	r3, [r4, #8]
   290ac:	440b      	add	r3, r1
   290ae:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   290b0:	4621      	mov	r1, r4
   290b2:	6a28      	ldr	r0, [r5, #32]
   290b4:	f7ff fd96 	bl	28be4 <print_string_ptr>
   290b8:	2800      	cmp	r0, #0
   290ba:	f43f ae89 	beq.w	28dd0 <print_value+0xc>
        update_offset(output_buffer);
   290be:	4620      	mov	r0, r4
   290c0:	f008 ff61 	bl	31f86 <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   290c4:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   290c6:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   290c8:	2b00      	cmp	r3, #0
   290ca:	bf14      	ite	ne
   290cc:	f04f 0802 	movne.w	r8, #2
   290d0:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   290d4:	4641      	mov	r1, r8
   290d6:	f008 ff77 	bl	31fc8 <ensure>
        if (output_pointer == NULL)
   290da:	2800      	cmp	r0, #0
   290dc:	f43f ae78 	beq.w	28dd0 <print_value+0xc>
        *output_pointer++ = ':';
   290e0:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   290e2:	6963      	ldr	r3, [r4, #20]
   290e4:	b103      	cbz	r3, 290e8 <print_value+0x324>
            *output_pointer++ = '\t';
   290e6:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   290e8:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   290ea:	4621      	mov	r1, r4
        output_buffer->offset += length;
   290ec:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   290ee:	4628      	mov	r0, r5
        output_buffer->offset += length;
   290f0:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   290f2:	f7ff fe67 	bl	28dc4 <print_value>
   290f6:	2800      	cmp	r0, #0
   290f8:	f43f ae6a 	beq.w	28dd0 <print_value+0xc>
        update_offset(output_buffer);
   290fc:	4620      	mov	r0, r4
   290fe:	f008 ff42 	bl	31f86 <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   29102:	682b      	ldr	r3, [r5, #0]
   29104:	6962      	ldr	r2, [r4, #20]
   29106:	f1b3 0800 	subs.w	r8, r3, #0
   2910a:	bf18      	it	ne
   2910c:	f04f 0801 	movne.w	r8, #1
   29110:	2a00      	cmp	r2, #0
   29112:	bf18      	it	ne
   29114:	f108 0801 	addne.w	r8, r8, #1
        output_pointer = ensure(output_buffer, length + 1);
   29118:	4620      	mov	r0, r4
   2911a:	f108 0101 	add.w	r1, r8, #1
   2911e:	f008 ff53 	bl	31fc8 <ensure>
        if (output_pointer == NULL)
   29122:	2800      	cmp	r0, #0
   29124:	f43f ae54 	beq.w	28dd0 <print_value+0xc>
        if (current_item->next)
   29128:	682b      	ldr	r3, [r5, #0]
   2912a:	b113      	cbz	r3, 29132 <print_value+0x36e>
            *output_pointer++ = ',';
   2912c:	232c      	movs	r3, #44	; 0x2c
   2912e:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   29132:	6963      	ldr	r3, [r4, #20]
   29134:	b113      	cbz	r3, 2913c <print_value+0x378>
            *output_pointer++ = '\n';
   29136:	230a      	movs	r3, #10
   29138:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   2913c:	2300      	movs	r3, #0
   2913e:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   29140:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   29142:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   29144:	4443      	add	r3, r8
   29146:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   29148:	e77e      	b.n	29048 <print_value+0x284>
                *output_pointer++ = '\t';
   2914a:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   2914e:	e7a8      	b.n	290a2 <print_value+0x2de>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   29150:	2102      	movs	r1, #2
   29152:	e77f      	b.n	29054 <print_value+0x290>
            *output_pointer++ = '\t';
   29154:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   29158:	68e2      	ldr	r2, [r4, #12]
   2915a:	1a19      	subs	r1, r3, r0
   2915c:	3a01      	subs	r2, #1
   2915e:	4291      	cmp	r1, r2
   29160:	d3f8      	bcc.n	29154 <print_value+0x390>
   29162:	e781      	b.n	29068 <print_value+0x2a4>
   29164:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   29166:	2509      	movs	r5, #9
   29168:	e7f6      	b.n	29158 <print_value+0x394>
   2916a:	bf00      	nop

0002916c <cJSON_Delete>:
{
   2916c:	b570      	push	{r4, r5, r6, lr}
   2916e:	4604      	mov	r4, r0
   29170:	4d0f      	ldr	r5, [pc, #60]	; (291b0 <cJSON_Delete+0x44>)
    while (item != NULL)
   29172:	b904      	cbnz	r4, 29176 <cJSON_Delete+0xa>
}
   29174:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   29176:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   29178:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   2917a:	05d9      	lsls	r1, r3, #23
   2917c:	d403      	bmi.n	29186 <cJSON_Delete+0x1a>
   2917e:	68a0      	ldr	r0, [r4, #8]
   29180:	b968      	cbnz	r0, 2919e <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   29182:	6920      	ldr	r0, [r4, #16]
   29184:	b988      	cbnz	r0, 291aa <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   29186:	68e3      	ldr	r3, [r4, #12]
   29188:	059b      	lsls	r3, r3, #22
   2918a:	d403      	bmi.n	29194 <cJSON_Delete+0x28>
   2918c:	6a20      	ldr	r0, [r4, #32]
   2918e:	b108      	cbz	r0, 29194 <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   29190:	686b      	ldr	r3, [r5, #4]
   29192:	4798      	blx	r3
        global_hooks.deallocate(item);
   29194:	4620      	mov	r0, r4
   29196:	686b      	ldr	r3, [r5, #4]
   29198:	4798      	blx	r3
        item = next;
   2919a:	4634      	mov	r4, r6
   2919c:	e7e9      	b.n	29172 <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   2919e:	f7ff ffe5 	bl	2916c <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   291a2:	68e3      	ldr	r3, [r4, #12]
   291a4:	05da      	lsls	r2, r3, #23
   291a6:	d5ec      	bpl.n	29182 <cJSON_Delete+0x16>
   291a8:	e7ed      	b.n	29186 <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   291aa:	686b      	ldr	r3, [r5, #4]
   291ac:	4798      	blx	r3
   291ae:	e7ea      	b.n	29186 <cJSON_Delete+0x1a>
   291b0:	2000c5e8 	.word	0x2000c5e8

000291b4 <cJSON_PrintPreallocated>:
{
   291b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   291b6:	4615      	mov	r5, r2
   291b8:	b08b      	sub	sp, #44	; 0x2c
   291ba:	4606      	mov	r6, r0
   291bc:	460c      	mov	r4, r1
    printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
   291be:	2224      	movs	r2, #36	; 0x24
   291c0:	2100      	movs	r1, #0
   291c2:	a801      	add	r0, sp, #4
{
   291c4:	461f      	mov	r7, r3
    printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
   291c6:	f00a fd52 	bl	33c6e <memset>
    if ((length < 0) || (buffer == NULL))
   291ca:	2d00      	cmp	r5, #0
   291cc:	db11      	blt.n	291f2 <cJSON_PrintPreallocated+0x3e>
   291ce:	b194      	cbz	r4, 291f6 <cJSON_PrintPreallocated+0x42>
    p.noalloc = true;
   291d0:	2301      	movs	r3, #1
    p.format = format;
   291d2:	e9cd 3705 	strd	r3, r7, [sp, #20]
    p.hooks = global_hooks;
   291d6:	4b09      	ldr	r3, [pc, #36]	; (291fc <cJSON_PrintPreallocated+0x48>)
    p.length = (size_t)length;
   291d8:	e9cd 4501 	strd	r4, r5, [sp, #4]
    p.hooks = global_hooks;
   291dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   291e0:	ab0a      	add	r3, sp, #40	; 0x28
   291e2:	e903 0007 	stmdb	r3, {r0, r1, r2}
    return print_value(item, &p);
   291e6:	4630      	mov	r0, r6
   291e8:	a901      	add	r1, sp, #4
   291ea:	f7ff fdeb 	bl	28dc4 <print_value>
}
   291ee:	b00b      	add	sp, #44	; 0x2c
   291f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return false;
   291f2:	2000      	movs	r0, #0
   291f4:	e7fb      	b.n	291ee <cJSON_PrintPreallocated+0x3a>
   291f6:	4620      	mov	r0, r4
   291f8:	e7f9      	b.n	291ee <cJSON_PrintPreallocated+0x3a>
   291fa:	bf00      	nop
   291fc:	2000c5e8 	.word	0x2000c5e8

00029200 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   29200:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   29202:	4b0a      	ldr	r3, [pc, #40]	; (2922c <cJSON_CreateString+0x2c>)
{
   29204:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   29206:	6818      	ldr	r0, [r3, #0]
   29208:	f008 ff1f 	bl	3204a <cJSON_New_Item.isra.0>
    if(item)
   2920c:	4604      	mov	r4, r0
   2920e:	b158      	cbz	r0, 29228 <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   29210:	2310      	movs	r3, #16
   29212:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   29214:	4628      	mov	r0, r5
   29216:	f7ff fd93 	bl	28d40 <cJSON_strdup.constprop.0>
   2921a:	4605      	mov	r5, r0
   2921c:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   2921e:	b918      	cbnz	r0, 29228 <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   29220:	4620      	mov	r0, r4
   29222:	f7ff ffa3 	bl	2916c <cJSON_Delete>
            return NULL;
   29226:	462c      	mov	r4, r5
        }
    }

    return item;
}
   29228:	4620      	mov	r0, r4
   2922a:	bd38      	pop	{r3, r4, r5, pc}
   2922c:	2000c5e8 	.word	0x2000c5e8

00029230 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   29230:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   29232:	4b04      	ldr	r3, [pc, #16]	; (29244 <cJSON_CreateObject+0x14>)
   29234:	6818      	ldr	r0, [r3, #0]
   29236:	f008 ff08 	bl	3204a <cJSON_New_Item.isra.0>
    if (item)
   2923a:	b108      	cbz	r0, 29240 <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   2923c:	2340      	movs	r3, #64	; 0x40
   2923e:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   29240:	bd08      	pop	{r3, pc}
   29242:	bf00      	nop
   29244:	2000c5e8 	.word	0x2000c5e8

00029248 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   29248:	4a07      	ldr	r2, [pc, #28]	; (29268 <SystemInit+0x20>)
   2924a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   2924e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   29252:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   29256:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2925a:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   2925e:	4b03      	ldr	r3, [pc, #12]	; (2926c <SystemInit+0x24>)
   29260:	4a03      	ldr	r2, [pc, #12]	; (29270 <SystemInit+0x28>)
   29262:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   29264:	4770      	bx	lr
   29266:	bf00      	nop
   29268:	e000ed00 	.word	0xe000ed00
   2926c:	2000c5f4 	.word	0x2000c5f4
   29270:	03d09000 	.word	0x03d09000

00029274 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   29274:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   29276:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   29278:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   2927a:	fab2 f382 	clz	r3, r2
   2927e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   29282:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   29284:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   29286:	d010      	beq.n	292aa <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
   29288:	fa05 f303 	lsl.w	r3, r5, r3
   2928c:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   29290:	e8d0 6fef 	ldaex	r6, [r0]
   29294:	4296      	cmp	r6, r2
   29296:	d104      	bne.n	292a2 <nrfx_flag32_alloc+0x2e>
   29298:	e8c0 3fec 	stlex	ip, r3, [r0]
   2929c:	f1bc 0f00 	cmp.w	ip, #0
   292a0:	d1f6      	bne.n	29290 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   292a2:	d1e9      	bne.n	29278 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   292a4:	4802      	ldr	r0, [pc, #8]	; (292b0 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   292a6:	700c      	strb	r4, [r1, #0]
}
   292a8:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   292aa:	4802      	ldr	r0, [pc, #8]	; (292b4 <nrfx_flag32_alloc+0x40>)
   292ac:	e7fc      	b.n	292a8 <nrfx_flag32_alloc+0x34>
   292ae:	bf00      	nop
   292b0:	0bad0000 	.word	0x0bad0000
   292b4:	0bad0002 	.word	0x0bad0002

000292b8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   292b8:	6803      	ldr	r3, [r0, #0]
{
   292ba:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   292bc:	40cb      	lsrs	r3, r1
   292be:	07db      	lsls	r3, r3, #31
   292c0:	d411      	bmi.n	292e6 <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   292c2:	2301      	movs	r3, #1
   292c4:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   292c8:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   292ca:	ea41 0203 	orr.w	r2, r1, r3
   292ce:	e8d0 4fef 	ldaex	r4, [r0]
   292d2:	429c      	cmp	r4, r3
   292d4:	d104      	bne.n	292e0 <nrfx_flag32_free+0x28>
   292d6:	e8c0 2fec 	stlex	ip, r2, [r0]
   292da:	f1bc 0f00 	cmp.w	ip, #0
   292de:	d1f6      	bne.n	292ce <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   292e0:	d1f2      	bne.n	292c8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   292e2:	4802      	ldr	r0, [pc, #8]	; (292ec <nrfx_flag32_free+0x34>)
}
   292e4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   292e6:	4802      	ldr	r0, [pc, #8]	; (292f0 <nrfx_flag32_free+0x38>)
   292e8:	e7fc      	b.n	292e4 <nrfx_flag32_free+0x2c>
   292ea:	bf00      	nop
   292ec:	0bad0000 	.word	0x0bad0000
   292f0:	0bad0004 	.word	0x0bad0004

000292f4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
   292f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
   292f6:	4604      	mov	r4, r0
   292f8:	b118      	cbz	r0, 29302 <clock_stop+0xe>
   292fa:	2801      	cmp	r0, #1
   292fc:	d023      	beq.n	29346 <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   292fe:	b003      	add	sp, #12
   29300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
   29302:	2202      	movs	r2, #2
   29304:	4b20      	ldr	r3, [pc, #128]	; (29388 <clock_stop+0x94>)
   29306:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2930a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   2930e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29312:	2201      	movs	r2, #1
   29314:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   29316:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   29318:	429c      	cmp	r4, r3
   2931a:	bf18      	it	ne
   2931c:	2500      	movne	r5, #0
   2931e:	f242 7710 	movw	r7, #10000	; 0x2710
   29322:	4e19      	ldr	r6, [pc, #100]	; (29388 <clock_stop+0x94>)
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   29324:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
   29328:	bf08      	it	eq
   2932a:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
   2932e:	b1a4      	cbz	r4, 2935a <clock_stop+0x66>
   29330:	2c01      	cmp	r4, #1
   29332:	d1e4      	bne.n	292fe <clock_stop+0xa>
            if (p_clk_src != NULL)
   29334:	b125      	cbz	r5, 29340 <clock_stop+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   29336:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   2933a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   2933e:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   29340:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
   29344:	e011      	b.n	2936a <clock_stop+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29346:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   29348:	4b0f      	ldr	r3, [pc, #60]	; (29388 <clock_stop+0x94>)
   2934a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2934e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   29352:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29356:	6058      	str	r0, [r3, #4]
}
   29358:	e7dd      	b.n	29316 <clock_stop+0x22>
            if (p_clk_src != NULL)
   2935a:	b125      	cbz	r5, 29366 <clock_stop+0x72>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2935c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   29360:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   29364:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   29366:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
   2936a:	03db      	lsls	r3, r3, #15
   2936c:	d5c7      	bpl.n	292fe <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
   2936e:	b92d      	cbnz	r5, 2937c <clock_stop+0x88>
   29370:	2001      	movs	r0, #1
   29372:	f008 fea3 	bl	320bc <nrfx_busy_wait>
   29376:	3f01      	subs	r7, #1
   29378:	d1d9      	bne.n	2932e <clock_stop+0x3a>
   2937a:	e7c0      	b.n	292fe <clock_stop+0xa>
   2937c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   29380:	2b01      	cmp	r3, #1
   29382:	d0f5      	beq.n	29370 <clock_stop+0x7c>
   29384:	e7bb      	b.n	292fe <clock_stop+0xa>
   29386:	bf00      	nop
   29388:	40005000 	.word	0x40005000

0002938c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2938c:	4b04      	ldr	r3, [pc, #16]	; (293a0 <nrfx_clock_init+0x14>)
   2938e:	791a      	ldrb	r2, [r3, #4]
   29390:	b922      	cbnz	r2, 2939c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   29392:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   29394:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   29396:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   29398:	4802      	ldr	r0, [pc, #8]	; (293a4 <nrfx_clock_init+0x18>)
   2939a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2939c:	4802      	ldr	r0, [pc, #8]	; (293a8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2939e:	4770      	bx	lr
   293a0:	2000d504 	.word	0x2000d504
   293a4:	0bad0000 	.word	0x0bad0000
   293a8:	0bad000c 	.word	0x0bad000c

000293ac <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   293ac:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   293ae:	2005      	movs	r0, #5
   293b0:	f7f8 fbc2 	bl	21b38 <arch_irq_is_enabled>
   293b4:	b910      	cbnz	r0, 293bc <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   293b6:	2005      	movs	r0, #5
   293b8:	f7f8 fbae 	bl	21b18 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
   293bc:	2201      	movs	r2, #1
   293be:	4b02      	ldr	r3, [pc, #8]	; (293c8 <nrfx_clock_enable+0x1c>)
   293c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   293c4:	bd08      	pop	{r3, pc}
   293c6:	bf00      	nop
   293c8:	40005000 	.word	0x40005000

000293cc <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   293cc:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   293ce:	b110      	cbz	r0, 293d6 <nrfx_clock_start+0xa>
   293d0:	2801      	cmp	r0, #1
   293d2:	d02f      	beq.n	29434 <nrfx_clock_start+0x68>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   293d4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   293d6:	4a1c      	ldr	r2, [pc, #112]	; (29448 <nrfx_clock_start+0x7c>)
   293d8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   293dc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   293e0:	03c9      	lsls	r1, r1, #15
   293e2:	d412      	bmi.n	2940a <nrfx_clock_start+0x3e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
   293e4:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
   293e8:	07db      	lsls	r3, r3, #31
   293ea:	d418      	bmi.n	2941e <nrfx_clock_start+0x52>
        *p_lfclksrc = clock_initial_lfclksrc_get();
   293ec:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
   293ee:	4a16      	ldr	r2, [pc, #88]	; (29448 <nrfx_clock_start+0x7c>)
   293f0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   293f4:	2300      	movs	r3, #0
   293f6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
   293fa:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
   293fe:	2302      	movs	r3, #2
   29400:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29404:	2301      	movs	r3, #1
   29406:	6093      	str	r3, [r2, #8]
}
   29408:	e7e4      	b.n	293d4 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2940a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
   2940e:	2b02      	cmp	r3, #2
   29410:	d0ed      	beq.n	293ee <nrfx_clock_start+0x22>
    if (!is_correct_clk)
   29412:	2b01      	cmp	r3, #1
   29414:	d0eb      	beq.n	293ee <nrfx_clock_start+0x22>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   29416:	2000      	movs	r0, #0
   29418:	f7ff ff6c 	bl	292f4 <clock_stop>
   2941c:	e7e6      	b.n	293ec <nrfx_clock_start+0x20>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   2941e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
   29422:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
   29426:	3b01      	subs	r3, #1
   29428:	2b01      	cmp	r3, #1
   2942a:	d8f4      	bhi.n	29416 <nrfx_clock_start+0x4a>
    p_reg->INTENSET = mask;
   2942c:	2302      	movs	r3, #2
   2942e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
   29432:	e7cf      	b.n	293d4 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29434:	2200      	movs	r2, #0
   29436:	4b04      	ldr	r3, [pc, #16]	; (29448 <nrfx_clock_start+0x7c>)
   29438:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2943c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   29440:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29444:	6018      	str	r0, [r3, #0]
}
   29446:	e7c5      	b.n	293d4 <nrfx_clock_start+0x8>
   29448:	40005000 	.word	0x40005000

0002944c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2944c:	4b17      	ldr	r3, [pc, #92]	; (294ac <nrfx_power_clock_irq_handler+0x60>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   2944e:	b510      	push	{r4, lr}
   29450:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   29454:	b152      	cbz	r2, 2946c <nrfx_power_clock_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29456:	2000      	movs	r0, #0
   29458:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   2945c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   29460:	2201      	movs	r2, #1
   29462:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   29466:	4b12      	ldr	r3, [pc, #72]	; (294b0 <nrfx_power_clock_irq_handler+0x64>)
   29468:	681b      	ldr	r3, [r3, #0]
   2946a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2946c:	4b0f      	ldr	r3, [pc, #60]	; (294ac <nrfx_power_clock_irq_handler+0x60>)
   2946e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   29472:	b18a      	cbz	r2, 29498 <nrfx_power_clock_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29474:	2200      	movs	r2, #0
   29476:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2947a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2947e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   29482:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   29486:	f002 0203 	and.w	r2, r2, #3
   2948a:	2a01      	cmp	r2, #1
   2948c:	f04f 0102 	mov.w	r1, #2
   29490:	d103      	bne.n	2949a <nrfx_power_clock_irq_handler+0x4e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   29492:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29496:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   29498:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   2949a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2949e:	4b04      	ldr	r3, [pc, #16]	; (294b0 <nrfx_power_clock_irq_handler+0x64>)
   294a0:	2001      	movs	r0, #1
}
   294a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   294a6:	681b      	ldr	r3, [r3, #0]
   294a8:	4718      	bx	r3
   294aa:	bf00      	nop
   294ac:	40005000 	.word	0x40005000
   294b0:	2000d504 	.word	0x2000d504

000294b4 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
   294b4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
   294b6:	4801      	ldr	r0, [pc, #4]	; (294bc <nrfx_dppi_channel_alloc+0x8>)
   294b8:	f7ff bedc 	b.w	29274 <nrfx_flag32_alloc>
   294bc:	2000c5f8 	.word	0x2000c5f8

000294c0 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
   294c0:	4a06      	ldr	r2, [pc, #24]	; (294dc <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
   294c2:	f000 001f 	and.w	r0, r0, #31
   294c6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   294ca:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
   294ce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   294d2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   294d6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
   294da:	4770      	bx	lr
   294dc:	40842500 	.word	0x40842500

000294e0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   294e0:	4b03      	ldr	r3, [pc, #12]	; (294f0 <pin_in_use_by_te+0x10>)
   294e2:	3008      	adds	r0, #8
   294e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   294e8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   294ec:	4770      	bx	lr
   294ee:	bf00      	nop
   294f0:	2000c5fc 	.word	0x2000c5fc

000294f4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   294f4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   294f6:	4c0d      	ldr	r4, [pc, #52]	; (2952c <call_handler+0x38>)
   294f8:	f100 0308 	add.w	r3, r0, #8
   294fc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
   29500:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   29502:	05da      	lsls	r2, r3, #23
{
   29504:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   29506:	d507      	bpl.n	29518 <call_handler+0x24>
   29508:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   2950c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   29510:	6852      	ldr	r2, [r2, #4]
   29512:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   29516:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   29518:	68a3      	ldr	r3, [r4, #8]
   2951a:	b12b      	cbz	r3, 29528 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   2951c:	4631      	mov	r1, r6
   2951e:	4628      	mov	r0, r5
   29520:	68e2      	ldr	r2, [r4, #12]
    }
}
   29522:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   29526:	4718      	bx	r3
}
   29528:	bd70      	pop	{r4, r5, r6, pc}
   2952a:	bf00      	nop
   2952c:	2000c5fc 	.word	0x2000c5fc

00029530 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   29530:	4a13      	ldr	r2, [pc, #76]	; (29580 <release_handler+0x50>)
   29532:	3008      	adds	r0, #8
   29534:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
   29538:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2953a:	05d9      	lsls	r1, r3, #23
   2953c:	d51c      	bpl.n	29578 <release_handler+0x48>
   2953e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   29542:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   29546:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2954a:	2000      	movs	r0, #0
   2954c:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   29550:	f834 3b02 	ldrh.w	r3, [r4], #2
   29554:	f413 7f80 	tst.w	r3, #256	; 0x100
   29558:	d003      	beq.n	29562 <release_handler+0x32>
   2955a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2955e:	4299      	cmp	r1, r3
   29560:	d00a      	beq.n	29578 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   29562:	3001      	adds	r0, #1
   29564:	2820      	cmp	r0, #32
   29566:	d1f3      	bne.n	29550 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   29568:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2956a:	4806      	ldr	r0, [pc, #24]	; (29584 <release_handler+0x54>)
}
   2956c:	f85d 4b04 	ldr.w	r4, [sp], #4
        m_cb.handlers[handler_id].handler = NULL;
   29570:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   29574:	f7ff bea0 	b.w	292b8 <nrfx_flag32_free>
}
   29578:	f85d 4b04 	ldr.w	r4, [sp], #4
   2957c:	4770      	bx	lr
   2957e:	bf00      	nop
   29580:	2000c5fc 	.word	0x2000c5fc
   29584:	2000c650 	.word	0x2000c650

00029588 <pin_handler_trigger_uninit>:
{
   29588:	b538      	push	{r3, r4, r5, lr}
   2958a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2958c:	f7ff ffa8 	bl	294e0 <pin_in_use_by_te>
   29590:	4c0b      	ldr	r4, [pc, #44]	; (295c0 <pin_handler_trigger_uninit+0x38>)
   29592:	f102 0508 	add.w	r5, r2, #8
   29596:	b160      	cbz	r0, 295b2 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   29598:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2959a:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2959e:	0b5b      	lsrs	r3, r3, #13
   295a0:	009b      	lsls	r3, r3, #2
   295a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   295a6:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   295aa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
   295ae:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
   295b2:	4610      	mov	r0, r2
   295b4:	f7ff ffbc 	bl	29530 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   295b8:	2300      	movs	r3, #0
   295ba:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   295be:	bd38      	pop	{r3, r4, r5, pc}
   295c0:	2000c5fc 	.word	0x2000c5fc

000295c4 <nrfx_gpiote_input_configure>:
{
   295c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   295c8:	4604      	mov	r4, r0
   295ca:	461d      	mov	r5, r3
    if (p_input_config)
   295cc:	b309      	cbz	r1, 29612 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   295ce:	4f4d      	ldr	r7, [pc, #308]	; (29704 <nrfx_gpiote_input_configure+0x140>)
   295d0:	f100 0808 	add.w	r8, r0, #8
   295d4:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   295d8:	07b3      	lsls	r3, r6, #30
   295da:	d506      	bpl.n	295ea <nrfx_gpiote_input_configure+0x26>
   295dc:	f7ff ff80 	bl	294e0 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   295e0:	b118      	cbz	r0, 295ea <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   295e2:	4849      	ldr	r0, [pc, #292]	; (29708 <nrfx_gpiote_input_configure+0x144>)
}
   295e4:	b002      	add	sp, #8
   295e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
   295ea:	4b48      	ldr	r3, [pc, #288]	; (2970c <nrfx_gpiote_input_configure+0x148>)
    *p_pin = pin_number & 0x1F;
   295ec:	f004 001f 	and.w	r0, r4, #31
   295f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   295f4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   295f8:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
   295fa:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   295fe:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   29602:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   29606:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
   2960a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
   2960e:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
   29612:	b192      	cbz	r2, 2963a <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   29614:	4b3b      	ldr	r3, [pc, #236]	; (29704 <nrfx_gpiote_input_configure+0x140>)
   29616:	f104 0608 	add.w	r6, r4, #8
   2961a:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2961e:	7810      	ldrb	r0, [r2, #0]
        if (pin_is_output(pin))
   29620:	078f      	lsls	r7, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   29622:	6852      	ldr	r2, [r2, #4]
        if (pin_is_output(pin))
   29624:	d50c      	bpl.n	29640 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
   29626:	2a00      	cmp	r2, #0
   29628:	d1db      	bne.n	295e2 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2962a:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
   2962e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   29632:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
   29636:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (p_handler_config)
   2963a:	bbcd      	cbnz	r5, 296b0 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
   2963c:	4834      	ldr	r0, [pc, #208]	; (29710 <nrfx_gpiote_input_configure+0x14c>)
   2963e:	e7d1      	b.n	295e4 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   29640:	f021 0120 	bic.w	r1, r1, #32
   29644:	04c9      	lsls	r1, r1, #19
   29646:	0cc9      	lsrs	r1, r1, #19
   29648:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
   2964c:	2a00      	cmp	r2, #0
   2964e:	d0ec      	beq.n	2962a <nrfx_gpiote_input_configure+0x66>
                if (!edge)
   29650:	2803      	cmp	r0, #3
   29652:	d8c6      	bhi.n	295e2 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   29654:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   29658:	4662      	mov	r2, ip
   2965a:	0092      	lsls	r2, r2, #2
   2965c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   29660:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   29664:	b920      	cbnz	r0, 29670 <nrfx_gpiote_input_configure+0xac>
    p_reg->CONFIG[idx] = 0;
   29666:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
   2966a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#endif
}
   2966e:	e7dc      	b.n	2962a <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   29670:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   29674:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
   29678:	f027 0703 	bic.w	r7, r7, #3
   2967c:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   29680:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
   29684:	f041 0120 	orr.w	r1, r1, #32
   29688:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
   2968c:	f427 7740 	bic.w	r7, r7, #768	; 0x300
   29690:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   29694:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   29698:	0227      	lsls	r7, r4, #8
   2969a:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   2969e:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
   296a2:	ea47 070e 	orr.w	r7, r7, lr
   296a6:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
   296aa:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
   296ae:	e7bc      	b.n	2962a <nrfx_gpiote_input_configure+0x66>
    release_handler(pin);
   296b0:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   296b2:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   296b6:	f7ff ff3b 	bl	29530 <release_handler>
    if (!handler)
   296ba:	2e00      	cmp	r6, #0
   296bc:	d0be      	beq.n	2963c <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   296be:	4d11      	ldr	r5, [pc, #68]	; (29704 <nrfx_gpiote_input_configure+0x140>)
   296c0:	682b      	ldr	r3, [r5, #0]
   296c2:	429e      	cmp	r6, r3
   296c4:	d104      	bne.n	296d0 <nrfx_gpiote_input_configure+0x10c>
   296c6:	686b      	ldr	r3, [r5, #4]
   296c8:	429f      	cmp	r7, r3
   296ca:	d101      	bne.n	296d0 <nrfx_gpiote_input_configure+0x10c>
   296cc:	2200      	movs	r2, #0
   296ce:	e009      	b.n	296e4 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   296d0:	4810      	ldr	r0, [pc, #64]	; (29714 <nrfx_gpiote_input_configure+0x150>)
   296d2:	f10d 0107 	add.w	r1, sp, #7
   296d6:	f7ff fdcd 	bl	29274 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   296da:	4b0d      	ldr	r3, [pc, #52]	; (29710 <nrfx_gpiote_input_configure+0x14c>)
   296dc:	4298      	cmp	r0, r3
   296de:	d181      	bne.n	295e4 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   296e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
   296e4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   296e8:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   296ea:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   296ec:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
   296f0:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   296f4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   296f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   296fc:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   29700:	e79c      	b.n	2963c <nrfx_gpiote_input_configure+0x78>
   29702:	bf00      	nop
   29704:	2000c5fc 	.word	0x2000c5fc
   29708:	0bad0004 	.word	0x0bad0004
   2970c:	40842500 	.word	0x40842500
   29710:	0bad0000 	.word	0x0bad0000
   29714:	2000c650 	.word	0x2000c650

00029718 <nrfx_gpiote_output_configure>:
{
   29718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2971a:	4604      	mov	r4, r0
    if (p_config)
   2971c:	b369      	cbz	r1, 2977a <nrfx_gpiote_output_configure+0x62>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2971e:	4e37      	ldr	r6, [pc, #220]	; (297fc <nrfx_gpiote_output_configure+0xe4>)
   29720:	f100 0708 	add.w	r7, r0, #8
   29724:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   29728:	07ab      	lsls	r3, r5, #30
   2972a:	d404      	bmi.n	29736 <nrfx_gpiote_output_configure+0x1e>
   2972c:	f7ff fed8 	bl	294e0 <pin_in_use_by_te>
   29730:	b108      	cbz	r0, 29736 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
   29732:	4833      	ldr	r0, [pc, #204]	; (29800 <nrfx_gpiote_output_configure+0xe8>)
}
   29734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   29736:	f015 0f1c 	tst.w	r5, #28
   2973a:	784b      	ldrb	r3, [r1, #1]
   2973c:	d001      	beq.n	29742 <nrfx_gpiote_output_configure+0x2a>
   2973e:	2b01      	cmp	r3, #1
   29740:	d0f7      	beq.n	29732 <nrfx_gpiote_output_configure+0x1a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29742:	4830      	ldr	r0, [pc, #192]	; (29804 <nrfx_gpiote_output_configure+0xec>)
    *p_pin = pin_number & 0x1F;
   29744:	f004 0c1f 	and.w	ip, r4, #31
   29748:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2974c:	f8dc 0200 	ldr.w	r0, [ip, #512]	; 0x200
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   29750:	f891 e000 	ldrb.w	lr, [r1]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   29754:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   29756:	f420 60e1 	bic.w	r0, r0, #1800	; 0x708
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2975a:	7889      	ldrb	r1, [r1, #2]
   2975c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    cnf &= ~to_update;
   29760:	f020 0007 	bic.w	r0, r0, #7
   29764:	4303      	orrs	r3, r0
   29766:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2976a:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2976e:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
   29772:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
   29776:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
   2977a:	b90a      	cbnz	r2, 29780 <nrfx_gpiote_output_configure+0x68>
    return NRFX_SUCCESS;
   2977c:	4822      	ldr	r0, [pc, #136]	; (29808 <nrfx_gpiote_output_configure+0xf0>)
   2977e:	e7d9      	b.n	29734 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   29780:	4e1e      	ldr	r6, [pc, #120]	; (297fc <nrfx_gpiote_output_configure+0xe4>)
   29782:	f104 0708 	add.w	r7, r4, #8
   29786:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   2978a:	0783      	lsls	r3, r0, #30
   2978c:	d5d1      	bpl.n	29732 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   2978e:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   29792:	2300      	movs	r3, #0
   29794:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   29796:	f020 0020 	bic.w	r0, r0, #32
   2979a:	0089      	lsls	r1, r1, #2
   2979c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   297a0:	04c0      	lsls	r0, r0, #19
   297a2:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   297a6:	0cc0      	lsrs	r0, r0, #19
   297a8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   297ac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   297b0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   297b4:	7855      	ldrb	r5, [r2, #1]
   297b6:	2d00      	cmp	r5, #0
   297b8:	d0e0      	beq.n	2977c <nrfx_gpiote_output_configure+0x64>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   297ba:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   297be:	7892      	ldrb	r2, [r2, #2]
   297c0:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   297c4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   297c8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   297cc:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   297d0:	0223      	lsls	r3, r4, #8
   297d2:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   297d6:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   297d8:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   297dc:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   297e0:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   297e2:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   297e4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   297e8:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   297ec:	4313      	orrs	r3, r2
   297ee:	f040 0020 	orr.w	r0, r0, #32
   297f2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   297f6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   297fa:	e7bf      	b.n	2977c <nrfx_gpiote_output_configure+0x64>
   297fc:	2000c5fc 	.word	0x2000c5fc
   29800:	0bad0004 	.word	0x0bad0004
   29804:	40842500 	.word	0x40842500
   29808:	0bad0000 	.word	0x0bad0000

0002980c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   2980c:	4b01      	ldr	r3, [pc, #4]	; (29814 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   2980e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   29812:	4770      	bx	lr
   29814:	2000c5fc 	.word	0x2000c5fc

00029818 <nrfx_gpiote_channel_get>:
{
   29818:	b508      	push	{r3, lr}
   2981a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2981c:	f7ff fe60 	bl	294e0 <pin_in_use_by_te>
   29820:	b138      	cbz	r0, 29832 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   29822:	4b05      	ldr	r3, [pc, #20]	; (29838 <nrfx_gpiote_channel_get+0x20>)
   29824:	3208      	adds	r2, #8
   29826:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
   2982a:	4804      	ldr	r0, [pc, #16]	; (2983c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2982c:	0b5b      	lsrs	r3, r3, #13
   2982e:	700b      	strb	r3, [r1, #0]
}
   29830:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   29832:	4803      	ldr	r0, [pc, #12]	; (29840 <nrfx_gpiote_channel_get+0x28>)
   29834:	e7fc      	b.n	29830 <nrfx_gpiote_channel_get+0x18>
   29836:	bf00      	nop
   29838:	2000c5fc 	.word	0x2000c5fc
   2983c:	0bad0000 	.word	0x0bad0000
   29840:	0bad0004 	.word	0x0bad0004

00029844 <nrfx_gpiote_init>:
{
   29844:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   29846:	4c0f      	ldr	r4, [pc, #60]	; (29884 <nrfx_gpiote_init+0x40>)
   29848:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   2984c:	b9bd      	cbnz	r5, 2987e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2984e:	2240      	movs	r2, #64	; 0x40
   29850:	4629      	mov	r1, r5
   29852:	f104 0010 	add.w	r0, r4, #16
   29856:	f00a fa0a 	bl	33c6e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   2985a:	2031      	movs	r0, #49	; 0x31
   2985c:	f7f8 f95c 	bl	21b18 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   29860:	4b09      	ldr	r3, [pc, #36]	; (29888 <nrfx_gpiote_init+0x44>)
    return err_code;
   29862:	480a      	ldr	r0, [pc, #40]	; (2988c <nrfx_gpiote_init+0x48>)
   29864:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   29868:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   2986c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   29870:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   29874:	2301      	movs	r3, #1
   29876:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2987a:	6563      	str	r3, [r4, #84]	; 0x54
}
   2987c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   2987e:	4804      	ldr	r0, [pc, #16]	; (29890 <nrfx_gpiote_init+0x4c>)
   29880:	e7fc      	b.n	2987c <nrfx_gpiote_init+0x38>
   29882:	bf00      	nop
   29884:	2000c5fc 	.word	0x2000c5fc
   29888:	40031000 	.word	0x40031000
   2988c:	0bad0000 	.word	0x0bad0000
   29890:	0bad0005 	.word	0x0bad0005

00029894 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   29894:	4b03      	ldr	r3, [pc, #12]	; (298a4 <nrfx_gpiote_is_init+0x10>)
   29896:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   2989a:	3800      	subs	r0, #0
   2989c:	bf18      	it	ne
   2989e:	2001      	movne	r0, #1
   298a0:	4770      	bx	lr
   298a2:	bf00      	nop
   298a4:	2000c5fc 	.word	0x2000c5fc

000298a8 <nrfx_gpiote_channel_free>:
{
   298a8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   298aa:	4801      	ldr	r0, [pc, #4]	; (298b0 <nrfx_gpiote_channel_free+0x8>)
   298ac:	f7ff bd04 	b.w	292b8 <nrfx_flag32_free>
   298b0:	2000c64c 	.word	0x2000c64c

000298b4 <nrfx_gpiote_channel_alloc>:
{
   298b4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   298b6:	4801      	ldr	r0, [pc, #4]	; (298bc <nrfx_gpiote_channel_alloc+0x8>)
   298b8:	f7ff bcdc 	b.w	29274 <nrfx_flag32_alloc>
   298bc:	2000c64c 	.word	0x2000c64c

000298c0 <nrfx_gpiote_trigger_enable>:
{
   298c0:	4602      	mov	r2, r0
   298c2:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   298c4:	f7ff fe0c 	bl	294e0 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   298c8:	4b1b      	ldr	r3, [pc, #108]	; (29938 <nrfx_gpiote_trigger_enable+0x78>)
   298ca:	f102 0408 	add.w	r4, r2, #8
   298ce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   298d2:	b1c8      	cbz	r0, 29908 <nrfx_gpiote_trigger_enable+0x48>
   298d4:	f013 0402 	ands.w	r4, r3, #2
   298d8:	d116      	bne.n	29908 <nrfx_gpiote_trigger_enable+0x48>
    return ((uint32_t)p_reg + event);
   298da:	4818      	ldr	r0, [pc, #96]	; (2993c <nrfx_gpiote_trigger_enable+0x7c>)
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   298dc:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   298de:	009a      	lsls	r2, r3, #2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   298e0:	5084      	str	r4, [r0, r2]
   298e2:	5880      	ldr	r0, [r0, r2]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   298e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   298e8:	f502 3244 	add.w	r2, r2, #200704	; 0x31000
   298ec:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   298f0:	f040 0001 	orr.w	r0, r0, #1
   298f4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   298f8:	b129      	cbz	r1, 29906 <nrfx_gpiote_trigger_enable+0x46>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   298fa:	2201      	movs	r2, #1
   298fc:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   29900:	4a0f      	ldr	r2, [pc, #60]	; (29940 <nrfx_gpiote_trigger_enable+0x80>)
   29902:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   29906:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   29908:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   2990c:	2b04      	cmp	r3, #4
   2990e:	d00e      	beq.n	2992e <nrfx_gpiote_trigger_enable+0x6e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   29910:	2b05      	cmp	r3, #5
   29912:	d00e      	beq.n	29932 <nrfx_gpiote_trigger_enable+0x72>
    return p_reg->IN;
   29914:	4b0b      	ldr	r3, [pc, #44]	; (29944 <nrfx_gpiote_trigger_enable+0x84>)
   29916:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
   29918:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2991c:	40d9      	lsrs	r1, r3
   2991e:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   29922:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   29924:	4610      	mov	r0, r2
}
   29926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2992a:	f7ff bdc9 	b.w	294c0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2992e:	2103      	movs	r1, #3
   29930:	e7f8      	b.n	29924 <nrfx_gpiote_trigger_enable+0x64>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   29932:	2102      	movs	r1, #2
   29934:	e7f6      	b.n	29924 <nrfx_gpiote_trigger_enable+0x64>
   29936:	bf00      	nop
   29938:	2000c5fc 	.word	0x2000c5fc
   2993c:	40031100 	.word	0x40031100
   29940:	40031000 	.word	0x40031000
   29944:	40842500 	.word	0x40842500

00029948 <nrfx_gpiote_trigger_disable>:
{
   29948:	b508      	push	{r3, lr}
   2994a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2994c:	f7ff fdc8 	bl	294e0 <pin_in_use_by_te>
   29950:	b1c0      	cbz	r0, 29984 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   29952:	4b0f      	ldr	r3, [pc, #60]	; (29990 <nrfx_gpiote_trigger_disable+0x48>)
   29954:	f102 0108 	add.w	r1, r2, #8
   29958:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2995c:	0799      	lsls	r1, r3, #30
   2995e:	d411      	bmi.n	29984 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   29960:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   29962:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   29964:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   29966:	490b      	ldr	r1, [pc, #44]	; (29994 <nrfx_gpiote_trigger_disable+0x4c>)
   29968:	009b      	lsls	r3, r3, #2
   2996a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2996e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   29972:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   29976:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2997a:	f022 0203 	bic.w	r2, r2, #3
   2997e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   29982:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   29984:	2100      	movs	r1, #0
}
   29986:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2998a:	4610      	mov	r0, r2
   2998c:	f7ff bd98 	b.w	294c0 <nrf_gpio_cfg_sense_set>
   29990:	2000c5fc 	.word	0x2000c5fc
   29994:	40031000 	.word	0x40031000

00029998 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   29998:	4b0c      	ldr	r3, [pc, #48]	; (299cc <nrfx_gpiote_pin_uninit+0x34>)
   2999a:	f100 0208 	add.w	r2, r0, #8
   2999e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
   299a2:	b510      	push	{r4, lr}
    if (!pin_in_use(pin))
   299a4:	07db      	lsls	r3, r3, #31
{
   299a6:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   299a8:	d50d      	bpl.n	299c6 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
   299aa:	f7ff ffcd 	bl	29948 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   299ae:	4620      	mov	r0, r4
   299b0:	f7ff fdea 	bl	29588 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   299b4:	2202      	movs	r2, #2
   299b6:	4b06      	ldr	r3, [pc, #24]	; (299d0 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
   299b8:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
   299bc:	3480      	adds	r4, #128	; 0x80
   299be:	4805      	ldr	r0, [pc, #20]	; (299d4 <nrfx_gpiote_pin_uninit+0x3c>)
   299c0:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   299c4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   299c6:	4804      	ldr	r0, [pc, #16]	; (299d8 <nrfx_gpiote_pin_uninit+0x40>)
   299c8:	e7fc      	b.n	299c4 <nrfx_gpiote_pin_uninit+0x2c>
   299ca:	bf00      	nop
   299cc:	2000c5fc 	.word	0x2000c5fc
   299d0:	40842500 	.word	0x40842500
   299d4:	0bad0000 	.word	0x0bad0000
   299d8:	0bad0004 	.word	0x0bad0004

000299dc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   299dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
   299e0:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   299e2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   299e4:	462c      	mov	r4, r5
{
   299e6:	4b4d      	ldr	r3, [pc, #308]	; (29b1c <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   299e8:	484d      	ldr	r0, [pc, #308]	; (29b20 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   299ea:	494e      	ldr	r1, [pc, #312]	; (29b24 <nrfx_gpiote_irq_handler+0x148>)
{
   299ec:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   299ee:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   299f0:	b136      	cbz	r6, 29a00 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   299f2:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   299f6:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   299f8:	bf1e      	ittt	ne
   299fa:	601c      	strne	r4, [r3, #0]
   299fc:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   299fe:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   29a00:	3304      	adds	r3, #4
   29a02:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   29a04:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   29a08:	d1f1      	bne.n	299ee <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29a0a:	4f45      	ldr	r7, [pc, #276]	; (29b20 <nrfx_gpiote_irq_handler+0x144>)
   29a0c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   29a10:	b193      	cbz	r3, 29a38 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
   29a12:	4e45      	ldr	r6, [pc, #276]	; (29b28 <nrfx_gpiote_irq_handler+0x14c>)
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   29a14:	f10d 080c 	add.w	r8, sp, #12
   29a18:	6a33      	ldr	r3, [r6, #32]
   29a1a:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   29a1c:	6233      	str	r3, [r6, #32]
   29a1e:	f04f 0901 	mov.w	r9, #1
            while (latch[i])
   29a22:	9803      	ldr	r0, [sp, #12]
   29a24:	b950      	cbnz	r0, 29a3c <nrfx_gpiote_irq_handler+0x60>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   29a26:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
   29a2a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   29a2e:	6a33      	ldr	r3, [r6, #32]
   29a30:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
   29a32:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
   29a34:	2b00      	cmp	r3, #0
   29a36:	d1f2      	bne.n	29a1e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   29a38:	2401      	movs	r4, #1
   29a3a:	e069      	b.n	29b10 <nrfx_gpiote_irq_handler+0x134>
                uint32_t pin = NRF_CTZ(latch[i]);
   29a3c:	fa90 faa0 	rbit	sl, r0
   29a40:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   29a44:	4a39      	ldr	r2, [pc, #228]	; (29b2c <nrfx_gpiote_irq_handler+0x150>)
   29a46:	f10a 0308 	add.w	r3, sl, #8
   29a4a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   29a4e:	ea4f 0cda 	mov.w	ip, sl, lsr #3
    bit = BITMASK_RELBIT_GET(bit);
   29a52:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   29a56:	fa09 f403 	lsl.w	r4, r9, r3
   29a5a:	f818 300c 	ldrb.w	r3, [r8, ip]
   29a5e:	f3c1 0282 	ubfx	r2, r1, #2, #3
   29a62:	ea23 0304 	bic.w	r3, r3, r4
   29a66:	f808 300c 	strb.w	r3, [r8, ip]
   29a6a:	eb06 038a 	add.w	r3, r6, sl, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   29a6e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (is_level(trigger))
   29a72:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   29a74:	4693      	mov	fp, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   29a76:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
   29a7a:	d518      	bpl.n	29aae <nrfx_gpiote_irq_handler+0xd2>
        call_handler(pin, trigger);
   29a7c:	4611      	mov	r1, r2
   29a7e:	4650      	mov	r0, sl
   29a80:	9301      	str	r3, [sp, #4]
   29a82:	f7ff fd37 	bl	294f4 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   29a86:	9b01      	ldr	r3, [sp, #4]
   29a88:	b2e4      	uxtb	r4, r4
   29a8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
   29a8e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   29a92:	429c      	cmp	r4, r3
   29a94:	d107      	bne.n	29aa6 <nrfx_gpiote_irq_handler+0xca>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   29a96:	2100      	movs	r1, #0
   29a98:	4650      	mov	r0, sl
   29a9a:	f7ff fd11 	bl	294c0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   29a9e:	4621      	mov	r1, r4
   29aa0:	4650      	mov	r0, sl
   29aa2:	f7ff fd0d 	bl	294c0 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   29aa6:	fa09 f00a 	lsl.w	r0, r9, sl
   29aaa:	6230      	str	r0, [r6, #32]
}
   29aac:	e7b9      	b.n	29a22 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   29aae:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   29ab0:	bf0c      	ite	eq
   29ab2:	2103      	moveq	r1, #3
   29ab4:	2102      	movne	r1, #2
   29ab6:	4650      	mov	r0, sl
   29ab8:	9201      	str	r2, [sp, #4]
   29aba:	f7ff fd01 	bl	294c0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   29abe:	9a01      	ldr	r2, [sp, #4]
   29ac0:	2a03      	cmp	r2, #3
   29ac2:	d004      	beq.n	29ace <nrfx_gpiote_irq_handler+0xf2>
   29ac4:	2c02      	cmp	r4, #2
   29ac6:	d107      	bne.n	29ad8 <nrfx_gpiote_irq_handler+0xfc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   29ac8:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   29acc:	d1eb      	bne.n	29aa6 <nrfx_gpiote_irq_handler+0xca>
            call_handler(pin, trigger);
   29ace:	4659      	mov	r1, fp
   29ad0:	4650      	mov	r0, sl
   29ad2:	f7ff fd0f 	bl	294f4 <call_handler>
   29ad6:	e7e6      	b.n	29aa6 <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   29ad8:	2c03      	cmp	r4, #3
   29ada:	d1e4      	bne.n	29aa6 <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   29adc:	f1bb 0f02 	cmp.w	fp, #2
   29ae0:	e7f4      	b.n	29acc <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
   29ae2:	fa95 f3a5 	rbit	r3, r5
   29ae6:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   29aea:	fa04 f203 	lsl.w	r2, r4, r3
   29aee:	009b      	lsls	r3, r3, #2
   29af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   29af4:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   29af8:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   29afc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   29b00:	f3c0 2004 	ubfx	r0, r0, #8, #5
   29b04:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
   29b08:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   29b0c:	f7ff fcf2 	bl	294f4 <call_handler>
    while (mask)
   29b10:	2d00      	cmp	r5, #0
   29b12:	d1e6      	bne.n	29ae2 <nrfx_gpiote_irq_handler+0x106>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   29b14:	b005      	add	sp, #20
   29b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b1a:	bf00      	nop
   29b1c:	40031100 	.word	0x40031100
   29b20:	40031000 	.word	0x40031000
   29b24:	40031120 	.word	0x40031120
   29b28:	40842500 	.word	0x40842500
   29b2c:	2000c5fc 	.word	0x2000c5fc

00029b30 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   29b30:	b570      	push	{r4, r5, r6, lr}
    NRFX_ASSERT(handler);
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   29b32:	4c08      	ldr	r4, [pc, #32]	; (29b54 <nrfx_ipc_init+0x24>)
{
   29b34:	460e      	mov	r6, r1
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   29b36:	7923      	ldrb	r3, [r4, #4]
{
   29b38:	4615      	mov	r5, r2
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   29b3a:	b943      	cbnz	r3, 29b4e <nrfx_ipc_init+0x1e>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   29b3c:	202a      	movs	r0, #42	; 0x2a
   29b3e:	f7f7 ffeb 	bl	21b18 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   29b42:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   29b44:	4804      	ldr	r0, [pc, #16]	; (29b58 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   29b46:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   29b48:	6026      	str	r6, [r4, #0]
    m_ipc_cb.p_context = p_context;
   29b4a:	60a5      	str	r5, [r4, #8]
}
   29b4c:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   29b4e:	4803      	ldr	r0, [pc, #12]	; (29b5c <nrfx_ipc_init+0x2c>)
   29b50:	e7fc      	b.n	29b4c <nrfx_ipc_init+0x1c>
   29b52:	bf00      	nop
   29b54:	2000d50c 	.word	0x2000d50c
   29b58:	0bad0000 	.word	0x0bad0000
   29b5c:	0bad000c 	.word	0x0bad000c

00029b60 <nrfx_ipc_config_load>:
{
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
   29b60:	2300      	movs	r3, #0
{
   29b62:	b530      	push	{r4, r5, lr}

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   29b64:	4a0d      	ldr	r2, [pc, #52]	; (29b9c <nrfx_ipc_config_load+0x3c>)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   29b66:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   29b6a:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   29b6e:	3301      	adds	r3, #1
   29b70:	2b08      	cmp	r3, #8
   29b72:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
   29b76:	d1f6      	bne.n	29b66 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   29b78:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   29b7a:	4a08      	ldr	r2, [pc, #32]	; (29b9c <nrfx_ipc_config_load+0x3c>)
   29b7c:	f100 0120 	add.w	r1, r0, #32
   29b80:	f503 74b2 	add.w	r4, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   29b84:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   29b88:	3301      	adds	r3, #1
   29b8a:	2b08      	cmp	r3, #8
   29b8c:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
   29b90:	d1f6      	bne.n	29b80 <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   29b92:	6c03      	ldr	r3, [r0, #64]	; 0x40
    p_reg->INTENSET = mask;
   29b94:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   29b98:	bd30      	pop	{r4, r5, pc}
   29b9a:	bf00      	nop
   29b9c:	4002a000 	.word	0x4002a000

00029ba0 <nrfx_ipc_uninit>:
    p_reg->SEND_CNF[index] = channels_mask;
   29ba0:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   29ba2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    p_reg->SEND_CNF[index] = channels_mask;
   29ba6:	4a13      	ldr	r2, [pc, #76]	; (29bf4 <nrfx_ipc_uninit+0x54>)
   29ba8:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   29bac:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   29bb0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   29bb4:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   29bb8:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   29bbc:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   29bc0:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
   29bc4:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    p_reg->RECEIVE_CNF[index] = channels_mask;
   29bc8:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   29bcc:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   29bd0:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   29bd4:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   29bd8:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   29bdc:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   29be0:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
   29be4:	f8c2 35ac 	str.w	r3, [r2, #1452]	; 0x5ac
    p_reg->INTENCLR = mask;
   29be8:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   29bec:	4a02      	ldr	r2, [pc, #8]	; (29bf8 <nrfx_ipc_uninit+0x58>)
   29bee:	7113      	strb	r3, [r2, #4]
}
   29bf0:	4770      	bx	lr
   29bf2:	bf00      	nop
   29bf4:	4002a000 	.word	0x4002a000
   29bf8:	2000d50c 	.word	0x2000d50c

00029bfc <nrfx_ipc_receive_event_enable>:

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
   29bfc:	2301      	movs	r3, #1
   29bfe:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   29c02:	4b02      	ldr	r3, [pc, #8]	; (29c0c <nrfx_ipc_receive_event_enable+0x10>)
   29c04:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
}
   29c08:	4770      	bx	lr
   29c0a:	bf00      	nop
   29c0c:	4002a000 	.word	0x4002a000

00029c10 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   29c10:	2301      	movs	r3, #1
   29c12:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENCLR = mask;
   29c16:	4b02      	ldr	r3, [pc, #8]	; (29c20 <nrfx_ipc_receive_event_disable+0x10>)
   29c18:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
}
   29c1c:	4770      	bx	lr
   29c1e:	bf00      	nop
   29c20:	4002a000 	.word	0x4002a000

00029c24 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   29c24:	4b0c      	ldr	r3, [pc, #48]	; (29c58 <nrfx_ipc_irq_handler+0x34>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   29c26:	b430      	push	{r4, r5}
   29c28:	f8d3 030c 	ldr.w	r0, [r3, #780]	; 0x30c
    // Clear these events
    uint32_t bitmask = events_map;
    while (bitmask)
    {
        uint8_t event_idx = NRF_CTZ(bitmask);
        bitmask &= ~(1UL << event_idx);
   29c2c:	2401      	movs	r4, #1
    uint32_t bitmask = events_map;
   29c2e:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29c30:	2500      	movs	r5, #0
    while (bitmask)
   29c32:	b923      	cbnz	r3, 29c3e <nrfx_ipc_irq_handler+0x1a>
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
}
   29c34:	bc30      	pop	{r4, r5}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   29c36:	4b09      	ldr	r3, [pc, #36]	; (29c5c <nrfx_ipc_irq_handler+0x38>)
   29c38:	681a      	ldr	r2, [r3, #0]
   29c3a:	6899      	ldr	r1, [r3, #8]
   29c3c:	4710      	bx	r2
        uint8_t event_idx = NRF_CTZ(bitmask);
   29c3e:	fa93 f2a3 	rbit	r2, r3
   29c42:	fab2 f282 	clz	r2, r2
        bitmask &= ~(1UL << event_idx);
   29c46:	fa04 f102 	lsl.w	r1, r4, r2
   29c4a:	ea23 0301 	bic.w	r3, r3, r1
   29c4e:	4904      	ldr	r1, [pc, #16]	; (29c60 <nrfx_ipc_irq_handler+0x3c>)
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   29c50:	0092      	lsls	r2, r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29c52:	508d      	str	r5, [r1, r2]
}
   29c54:	e7ed      	b.n	29c32 <nrfx_ipc_irq_handler+0xe>
   29c56:	bf00      	nop
   29c58:	4002a000 	.word	0x4002a000
   29c5c:	2000d50c 	.word	0x2000d50c
   29c60:	4002a100 	.word	0x4002a100

00029c64 <nvmc_word_write>:
}

#if defined(NVMC_READYNEXT_READYNEXT_Msk)
NRF_STATIC_INLINE bool nrf_nvmc_write_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   29c64:	4a04      	ldr	r2, [pc, #16]	; (29c78 <nvmc_word_write+0x14>)
   29c66:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   29c6a:	07db      	lsls	r3, r3, #31
   29c6c:	d5fb      	bpl.n	29c66 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
   29c6e:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   29c70:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   29c74:	4770      	bx	lr
   29c76:	bf00      	nop
   29c78:	40039000 	.word	0x40039000

00029c7c <nrfx_nvmc_page_erase>:
    return !(addr % flash_page_size_get());
   29c7c:	f3c0 030b 	ubfx	r3, r0, #0, #12

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   29c80:	b97b      	cbnz	r3, 29ca2 <nrfx_nvmc_page_erase+0x26>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   29c82:	2202      	movs	r2, #2
   29c84:	4b08      	ldr	r3, [pc, #32]	; (29ca8 <nrfx_nvmc_page_erase+0x2c>)
   29c86:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   29c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29c8e:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   29c90:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   29c94:	07d2      	lsls	r2, r2, #31
   29c96:	d5fb      	bpl.n	29c90 <nrfx_nvmc_page_erase+0x14>
    p_reg->CONFIGNS = (uint32_t)mode;
   29c98:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   29c9a:	4804      	ldr	r0, [pc, #16]	; (29cac <nrfx_nvmc_page_erase+0x30>)
   29c9c:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
   29ca0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   29ca2:	4803      	ldr	r0, [pc, #12]	; (29cb0 <nrfx_nvmc_page_erase+0x34>)
}
   29ca4:	4770      	bx	lr
   29ca6:	bf00      	nop
   29ca8:	40039000 	.word	0x40039000
   29cac:	0bad0000 	.word	0x0bad0000
   29cb0:	0bad000a 	.word	0x0bad000a

00029cb4 <nrfx_nvmc_word_write>:
   29cb4:	2301      	movs	r3, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   29cb6:	b510      	push	{r4, lr}
   29cb8:	4c04      	ldr	r4, [pc, #16]	; (29ccc <nrfx_nvmc_word_write+0x18>)
   29cba:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   29cbe:	f7ff ffd1 	bl	29c64 <nvmc_word_write>
   29cc2:	2300      	movs	r3, #0
   29cc4:	f8c4 3584 	str.w	r3, [r4, #1412]	; 0x584

    nvmc_readonly_mode_set();
}
   29cc8:	bd10      	pop	{r4, pc}
   29cca:	bf00      	nop
   29ccc:	40039000 	.word	0x40039000

00029cd0 <rpc_handle_data_message>:
   29cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29cd4:	4680      	mov	r8, r0
   29cd6:	4605      	mov	r5, r0
   29cd8:	2404      	movs	r4, #4
   29cda:	f858 7b08 	ldr.w	r7, [r8], #8
   29cde:	4e0c      	ldr	r6, [pc, #48]	; (29d10 <rpc_handle_data_message+0x40>)
   29ce0:	b2ff      	uxtb	r7, r7
   29ce2:	7833      	ldrb	r3, [r6, #0]
   29ce4:	42bb      	cmp	r3, r7
   29ce6:	d009      	beq.n	29cfc <rpc_handle_data_message+0x2c>
   29ce8:	3c01      	subs	r4, #1
   29cea:	f106 060c 	add.w	r6, r6, #12
   29cee:	d1f8      	bne.n	29ce2 <rpc_handle_data_message+0x12>
   29cf0:	68a8      	ldr	r0, [r5, #8]
   29cf2:	b108      	cbz	r0, 29cf8 <rpc_handle_data_message+0x28>
   29cf4:	f008 fa33 	bl	3215e <rpc_transport_peer_data_free>
   29cf8:	4620      	mov	r0, r4
   29cfa:	e006      	b.n	29d0a <rpc_handle_data_message+0x3a>
   29cfc:	6829      	ldr	r1, [r5, #0]
   29cfe:	4640      	mov	r0, r8
   29d00:	6873      	ldr	r3, [r6, #4]
   29d02:	0c09      	lsrs	r1, r1, #16
   29d04:	4798      	blx	r3
   29d06:	2802      	cmp	r0, #2
   29d08:	d0ee      	beq.n	29ce8 <rpc_handle_data_message+0x18>
   29d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29d0e:	bf00      	nop
   29d10:	0003509c 	.word	0x0003509c

00029d14 <ipc_trace_init>:
   29d14:	2100      	movs	r1, #0
   29d16:	4b07      	ldr	r3, [pc, #28]	; (29d34 <ipc_trace_init+0x20>)
   29d18:	2201      	movs	r2, #1
   29d1a:	7019      	strb	r1, [r3, #0]
   29d1c:	4b06      	ldr	r3, [pc, #24]	; (29d38 <ipc_trace_init+0x24>)
   29d1e:	7019      	strb	r1, [r3, #0]
   29d20:	4b06      	ldr	r3, [pc, #24]	; (29d3c <ipc_trace_init+0x28>)
   29d22:	6019      	str	r1, [r3, #0]
   29d24:	4b06      	ldr	r3, [pc, #24]	; (29d40 <ipc_trace_init+0x2c>)
   29d26:	6019      	str	r1, [r3, #0]
   29d28:	4b06      	ldr	r3, [pc, #24]	; (29d44 <ipc_trace_init+0x30>)
   29d2a:	6018      	str	r0, [r3, #0]
   29d2c:	4806      	ldr	r0, [pc, #24]	; (29d48 <ipc_trace_init+0x34>)
   29d2e:	f7fb bd43 	b.w	257b8 <nrf_modem_os_sem_init>
   29d32:	bf00      	nop
   29d34:	20010789 	.word	0x20010789
   29d38:	20010788 	.word	0x20010788
   29d3c:	2000d518 	.word	0x2000d518
   29d40:	2000d528 	.word	0x2000d528
   29d44:	2000d52c 	.word	0x2000d52c
   29d48:	2000d530 	.word	0x2000d530

00029d4c <ipc_trace_handle>:
   29d4c:	b470      	push	{r4, r5, r6}
   29d4e:	4b2d      	ldr	r3, [pc, #180]	; (29e04 <ipc_trace_handle+0xb8>)
   29d50:	681b      	ldr	r3, [r3, #0]
   29d52:	6919      	ldr	r1, [r3, #16]
   29d54:	6958      	ldr	r0, [r3, #20]
   29d56:	7c1a      	ldrb	r2, [r3, #16]
   29d58:	2200      	movs	r2, #0
   29d5a:	741a      	strb	r2, [r3, #16]
   29d5c:	7c5c      	ldrb	r4, [r3, #17]
   29d5e:	745a      	strb	r2, [r3, #17]
   29d60:	7c9c      	ldrb	r4, [r3, #18]
   29d62:	749a      	strb	r2, [r3, #18]
   29d64:	7cdc      	ldrb	r4, [r3, #19]
   29d66:	74da      	strb	r2, [r3, #19]
   29d68:	7d1c      	ldrb	r4, [r3, #20]
   29d6a:	751a      	strb	r2, [r3, #20]
   29d6c:	7d5c      	ldrb	r4, [r3, #21]
   29d6e:	755a      	strb	r2, [r3, #21]
   29d70:	7d9c      	ldrb	r4, [r3, #22]
   29d72:	2903      	cmp	r1, #3
   29d74:	759a      	strb	r2, [r3, #22]
   29d76:	7ddc      	ldrb	r4, [r3, #23]
   29d78:	75da      	strb	r2, [r3, #23]
   29d7a:	d029      	beq.n	29dd0 <ipc_trace_handle+0x84>
   29d7c:	2904      	cmp	r1, #4
   29d7e:	d033      	beq.n	29de8 <ipc_trace_handle+0x9c>
   29d80:	2901      	cmp	r1, #1
   29d82:	d12f      	bne.n	29de4 <ipc_trace_handle+0x98>
   29d84:	6885      	ldr	r5, [r0, #8]
   29d86:	4e20      	ldr	r6, [pc, #128]	; (29e08 <ipc_trace_handle+0xbc>)
   29d88:	4295      	cmp	r5, r2
   29d8a:	d110      	bne.n	29dae <ipc_trace_handle+0x62>
   29d8c:	bc70      	pop	{r4, r5, r6}
   29d8e:	2101      	movs	r1, #1
   29d90:	7a1a      	ldrb	r2, [r3, #8]
   29d92:	2200      	movs	r2, #0
   29d94:	7219      	strb	r1, [r3, #8]
   29d96:	7a59      	ldrb	r1, [r3, #9]
   29d98:	725a      	strb	r2, [r3, #9]
   29d9a:	7a99      	ldrb	r1, [r3, #10]
   29d9c:	729a      	strb	r2, [r3, #10]
   29d9e:	7ada      	ldrb	r2, [r3, #11]
   29da0:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   29da4:	72da      	strb	r2, [r3, #11]
   29da6:	4b19      	ldr	r3, [pc, #100]	; (29e0c <ipc_trace_handle+0xc0>)
   29da8:	6818      	ldr	r0, [r3, #0]
   29daa:	f007 bc7f 	b.w	316ac <nrf_modem_os_sem_give>
   29dae:	1c91      	adds	r1, r2, #2
   29db0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   29db4:	684c      	ldr	r4, [r1, #4]
   29db6:	7821      	ldrb	r1, [r4, #0]
   29db8:	2962      	cmp	r1, #98	; 0x62
   29dba:	d007      	beq.n	29dcc <ipc_trace_handle+0x80>
   29dbc:	2963      	cmp	r1, #99	; 0x63
   29dbe:	bf14      	ite	ne
   29dc0:	2102      	movne	r1, #2
   29dc2:	2100      	moveq	r1, #0
   29dc4:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
   29dc8:	3201      	adds	r2, #1
   29dca:	e7dd      	b.n	29d88 <ipc_trace_handle+0x3c>
   29dcc:	2101      	movs	r1, #1
   29dce:	e7f9      	b.n	29dc4 <ipc_trace_handle+0x78>
   29dd0:	7a18      	ldrb	r0, [r3, #8]
   29dd2:	7219      	strb	r1, [r3, #8]
   29dd4:	7a59      	ldrb	r1, [r3, #9]
   29dd6:	725a      	strb	r2, [r3, #9]
   29dd8:	7a99      	ldrb	r1, [r3, #10]
   29dda:	729a      	strb	r2, [r3, #10]
   29ddc:	7ada      	ldrb	r2, [r3, #11]
   29dde:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   29de2:	72da      	strb	r2, [r3, #11]
   29de4:	bc70      	pop	{r4, r5, r6}
   29de6:	4770      	bx	lr
   29de8:	7a18      	ldrb	r0, [r3, #8]
   29dea:	7219      	strb	r1, [r3, #8]
   29dec:	7a59      	ldrb	r1, [r3, #9]
   29dee:	725a      	strb	r2, [r3, #9]
   29df0:	7a99      	ldrb	r1, [r3, #10]
   29df2:	729a      	strb	r2, [r3, #10]
   29df4:	7ada      	ldrb	r2, [r3, #11]
   29df6:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   29dfa:	72da      	strb	r2, [r3, #11]
   29dfc:	2201      	movs	r2, #1
   29dfe:	4b04      	ldr	r3, [pc, #16]	; (29e10 <ipc_trace_handle+0xc4>)
   29e00:	701a      	strb	r2, [r3, #0]
   29e02:	e7ef      	b.n	29de4 <ipc_trace_handle+0x98>
   29e04:	2000d52c 	.word	0x2000d52c
   29e08:	2000d51c 	.word	0x2000d51c
   29e0c:	2000d530 	.word	0x2000d530
   29e10:	20010788 	.word	0x20010788

00029e14 <rpc_transport_ipc_msg_alloc>:
   29e14:	b570      	push	{r4, r5, r6, lr}
   29e16:	4616      	mov	r6, r2
   29e18:	2400      	movs	r4, #0
   29e1a:	6803      	ldr	r3, [r0, #0]
   29e1c:	42a3      	cmp	r3, r4
   29e1e:	d101      	bne.n	29e24 <rpc_transport_ipc_msg_alloc+0x10>
   29e20:	2300      	movs	r3, #0
   29e22:	e01c      	b.n	29e5e <rpc_transport_ipc_msg_alloc+0x4a>
   29e24:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
   29e28:	6855      	ldr	r5, [r2, #4]
   29e2a:	b2ed      	uxtb	r5, r5
   29e2c:	2d03      	cmp	r5, #3
   29e2e:	d118      	bne.n	29e62 <rpc_transport_ipc_msg_alloc+0x4e>
   29e30:	eb01 1384 	add.w	r3, r1, r4, lsl #6
   29e34:	6093      	str	r3, [r2, #8]
   29e36:	6851      	ldr	r1, [r2, #4]
   29e38:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   29e3c:	6051      	str	r1, [r2, #4]
   29e3e:	490c      	ldr	r1, [pc, #48]	; (29e70 <rpc_transport_ipc_msg_alloc+0x5c>)
   29e40:	8808      	ldrh	r0, [r1, #0]
   29e42:	1c44      	adds	r4, r0, #1
   29e44:	800c      	strh	r4, [r1, #0]
   29e46:	6851      	ldr	r1, [r2, #4]
   29e48:	b289      	uxth	r1, r1
   29e4a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   29e4e:	6051      	str	r1, [r2, #4]
   29e50:	4618      	mov	r0, r3
   29e52:	2240      	movs	r2, #64	; 0x40
   29e54:	2100      	movs	r1, #0
   29e56:	f009 ff0a 	bl	33c6e <memset>
   29e5a:	4603      	mov	r3, r0
   29e5c:	6046      	str	r6, [r0, #4]
   29e5e:	4618      	mov	r0, r3
   29e60:	bd70      	pop	{r4, r5, r6, pc}
   29e62:	b915      	cbnz	r5, 29e6a <rpc_transport_ipc_msg_alloc+0x56>
   29e64:	6895      	ldr	r5, [r2, #8]
   29e66:	2d00      	cmp	r5, #0
   29e68:	d0e2      	beq.n	29e30 <rpc_transport_ipc_msg_alloc+0x1c>
   29e6a:	3401      	adds	r4, #1
   29e6c:	e7d6      	b.n	29e1c <rpc_transport_ipc_msg_alloc+0x8>
   29e6e:	bf00      	nop
   29e70:	2000d906 	.word	0x2000d906

00029e74 <handle_modem_rpc_msg.part.0>:
   29e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29e78:	4606      	mov	r6, r0
   29e7a:	460f      	mov	r7, r1
   29e7c:	2500      	movs	r5, #0
   29e7e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 29ef4 <handle_modem_rpc_msg.part.0+0x80>
   29e82:	6833      	ldr	r3, [r6, #0]
   29e84:	429d      	cmp	r5, r3
   29e86:	d301      	bcc.n	29e8c <handle_modem_rpc_msg.part.0+0x18>
   29e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29e8c:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   29e90:	68a3      	ldr	r3, [r4, #8]
   29e92:	b1fb      	cbz	r3, 29ed4 <handle_modem_rpc_msg.part.0+0x60>
   29e94:	6863      	ldr	r3, [r4, #4]
   29e96:	b2db      	uxtb	r3, r3
   29e98:	2b01      	cmp	r3, #1
   29e9a:	d11b      	bne.n	29ed4 <handle_modem_rpc_msg.part.0+0x60>
   29e9c:	6862      	ldr	r2, [r4, #4]
   29e9e:	f8b8 3000 	ldrh.w	r3, [r8]
   29ea2:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   29ea6:	d115      	bne.n	29ed4 <handle_modem_rpc_msg.part.0+0x60>
   29ea8:	2f02      	cmp	r7, #2
   29eaa:	68a0      	ldr	r0, [r4, #8]
   29eac:	d114      	bne.n	29ed8 <handle_modem_rpc_msg.part.0+0x64>
   29eae:	f7ff ff0f 	bl	29cd0 <rpc_handle_data_message>
   29eb2:	2802      	cmp	r0, #2
   29eb4:	d00e      	beq.n	29ed4 <handle_modem_rpc_msg.part.0+0x60>
   29eb6:	2801      	cmp	r0, #1
   29eb8:	d113      	bne.n	29ee2 <handle_modem_rpc_msg.part.0+0x6e>
   29eba:	6863      	ldr	r3, [r4, #4]
   29ebc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   29ec0:	f043 0302 	orr.w	r3, r3, #2
   29ec4:	6063      	str	r3, [r4, #4]
   29ec6:	f8b8 3000 	ldrh.w	r3, [r8]
   29eca:	3301      	adds	r3, #1
   29ecc:	f8a8 3000 	strh.w	r3, [r8]
   29ed0:	f7fb fc8e 	bl	257f0 <nrf_modem_os_application_irq_set>
   29ed4:	3501      	adds	r5, #1
   29ed6:	e7d4      	b.n	29e82 <handle_modem_rpc_msg.part.0+0xe>
   29ed8:	6801      	ldr	r1, [r0, #0]
   29eda:	0c09      	lsrs	r1, r1, #16
   29edc:	f008 f8fb 	bl	320d6 <rpc_handle_ctrl_message>
   29ee0:	e7e7      	b.n	29eb2 <handle_modem_rpc_msg.part.0+0x3e>
   29ee2:	2800      	cmp	r0, #0
   29ee4:	d1ef      	bne.n	29ec6 <handle_modem_rpc_msg.part.0+0x52>
   29ee6:	6863      	ldr	r3, [r4, #4]
   29ee8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   29eec:	f043 0303 	orr.w	r3, r3, #3
   29ef0:	e7e8      	b.n	29ec4 <handle_modem_rpc_msg.part.0+0x50>
   29ef2:	bf00      	nop
   29ef4:	2000d904 	.word	0x2000d904

00029ef8 <ipc_irq_handler>:
   29ef8:	0601      	lsls	r1, r0, #24
   29efa:	b570      	push	{r4, r5, r6, lr}
   29efc:	4604      	mov	r4, r0
   29efe:	d503      	bpl.n	29f08 <ipc_irq_handler+0x10>
   29f00:	f7ff ff24 	bl	29d4c <ipc_trace_handle>
   29f04:	f7fb fc84 	bl	25810 <nrf_modem_os_event_notify>
   29f08:	f014 0001 	ands.w	r0, r4, #1
   29f0c:	d039      	beq.n	29f82 <ipc_irq_handler+0x8a>
   29f0e:	2203      	movs	r2, #3
   29f10:	4b35      	ldr	r3, [pc, #212]	; (29fe8 <ipc_irq_handler+0xf0>)
   29f12:	701a      	strb	r2, [r3, #0]
   29f14:	4b35      	ldr	r3, [pc, #212]	; (29fec <ipc_irq_handler+0xf4>)
   29f16:	4a36      	ldr	r2, [pc, #216]	; (29ff0 <ipc_irq_handler+0xf8>)
   29f18:	f8d3 0614 	ldr.w	r0, [r3, #1556]	; 0x614
   29f1c:	4290      	cmp	r0, r2
   29f1e:	d02c      	beq.n	29f7a <ipc_irq_handler+0x82>
   29f20:	d80c      	bhi.n	29f3c <ipc_irq_handler+0x44>
   29f22:	3a02      	subs	r2, #2
   29f24:	4290      	cmp	r0, r2
   29f26:	d020      	beq.n	29f6a <ipc_irq_handler+0x72>
   29f28:	3201      	adds	r2, #1
   29f2a:	4290      	cmp	r0, r2
   29f2c:	d021      	beq.n	29f72 <ipc_irq_handler+0x7a>
   29f2e:	f8d3 1618 	ldr.w	r1, [r3, #1560]	; 0x618
   29f32:	f3c0 000b 	ubfx	r0, r0, #0, #12
   29f36:	f001 ff4d 	bl	2bdd4 <nrf_modem_fault_handler_internal>
   29f3a:	e012      	b.n	29f62 <ipc_irq_handler+0x6a>
   29f3c:	4a2d      	ldr	r2, [pc, #180]	; (29ff4 <ipc_irq_handler+0xfc>)
   29f3e:	4290      	cmp	r0, r2
   29f40:	d80a      	bhi.n	29f58 <ipc_irq_handler+0x60>
   29f42:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   29f46:	d80a      	bhi.n	29f5e <ipc_irq_handler+0x66>
   29f48:	4a2b      	ldr	r2, [pc, #172]	; (29ff8 <ipc_irq_handler+0x100>)
   29f4a:	4290      	cmp	r0, r2
   29f4c:	d1ef      	bne.n	29f2e <ipc_irq_handler+0x36>
   29f4e:	f06f 0204 	mvn.w	r2, #4
   29f52:	4b2a      	ldr	r3, [pc, #168]	; (29ffc <ipc_irq_handler+0x104>)
   29f54:	601a      	str	r2, [r3, #0]
   29f56:	e004      	b.n	29f62 <ipc_irq_handler+0x6a>
   29f58:	4a29      	ldr	r2, [pc, #164]	; (2a000 <ipc_irq_handler+0x108>)
   29f5a:	4290      	cmp	r0, r2
   29f5c:	d1e7      	bne.n	29f2e <ipc_irq_handler+0x36>
   29f5e:	4b27      	ldr	r3, [pc, #156]	; (29ffc <ipc_irq_handler+0x104>)
   29f60:	6018      	str	r0, [r3, #0]
   29f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29f66:	f7fb bc53 	b.w	25810 <nrf_modem_os_event_notify>
   29f6a:	f06f 0215 	mvn.w	r2, #21
   29f6e:	4b23      	ldr	r3, [pc, #140]	; (29ffc <ipc_irq_handler+0x104>)
   29f70:	e7f0      	b.n	29f54 <ipc_irq_handler+0x5c>
   29f72:	f06f 025e 	mvn.w	r2, #94	; 0x5e
   29f76:	4b21      	ldr	r3, [pc, #132]	; (29ffc <ipc_irq_handler+0x104>)
   29f78:	e7ec      	b.n	29f54 <ipc_irq_handler+0x5c>
   29f7a:	f06f 020b 	mvn.w	r2, #11
   29f7e:	4b1f      	ldr	r3, [pc, #124]	; (29ffc <ipc_irq_handler+0x104>)
   29f80:	e7e8      	b.n	29f54 <ipc_irq_handler+0x5c>
   29f82:	f014 0640 	ands.w	r6, r4, #64	; 0x40
   29f86:	d005      	beq.n	29f94 <ipc_irq_handler+0x9c>
   29f88:	2202      	movs	r2, #2
   29f8a:	4b17      	ldr	r3, [pc, #92]	; (29fe8 <ipc_irq_handler+0xf0>)
   29f8c:	701a      	strb	r2, [r3, #0]
   29f8e:	f001 ff31 	bl	2bdf4 <nrf_modem_state_set>
   29f92:	e7e6      	b.n	29f62 <ipc_irq_handler+0x6a>
   29f94:	0762      	lsls	r2, r4, #29
   29f96:	d504      	bpl.n	29fa2 <ipc_irq_handler+0xaa>
   29f98:	4b13      	ldr	r3, [pc, #76]	; (29fe8 <ipc_irq_handler+0xf0>)
   29f9a:	781a      	ldrb	r2, [r3, #0]
   29f9c:	b93a      	cbnz	r2, 29fae <ipc_irq_handler+0xb6>
   29f9e:	f7fb fc27 	bl	257f0 <nrf_modem_os_application_irq_set>
   29fa2:	06e3      	lsls	r3, r4, #27
   29fa4:	d51f      	bpl.n	29fe6 <ipc_irq_handler+0xee>
   29fa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29faa:	f7fb bc21 	b.w	257f0 <nrf_modem_os_application_irq_set>
   29fae:	781a      	ldrb	r2, [r3, #0]
   29fb0:	2a01      	cmp	r2, #1
   29fb2:	b2d0      	uxtb	r0, r2
   29fb4:	d1f5      	bne.n	29fa2 <ipc_irq_handler+0xaa>
   29fb6:	4a13      	ldr	r2, [pc, #76]	; (2a004 <ipc_irq_handler+0x10c>)
   29fb8:	4d13      	ldr	r5, [pc, #76]	; (2a008 <ipc_irq_handler+0x110>)
   29fba:	6812      	ldr	r2, [r2, #0]
   29fbc:	6891      	ldr	r1, [r2, #8]
   29fbe:	6069      	str	r1, [r5, #4]
   29fc0:	6852      	ldr	r2, [r2, #4]
   29fc2:	602a      	str	r2, [r5, #0]
   29fc4:	b121      	cbz	r1, 29fd0 <ipc_irq_handler+0xd8>
   29fc6:	b11a      	cbz	r2, 29fd0 <ipc_irq_handler+0xd8>
   29fc8:	6809      	ldr	r1, [r1, #0]
   29fca:	b109      	cbz	r1, 29fd0 <ipc_irq_handler+0xd8>
   29fcc:	6812      	ldr	r2, [r2, #0]
   29fce:	b932      	cbnz	r2, 29fde <ipc_irq_handler+0xe6>
   29fd0:	f06f 0104 	mvn.w	r1, #4
   29fd4:	4a09      	ldr	r2, [pc, #36]	; (29ffc <ipc_irq_handler+0x104>)
   29fd6:	6011      	str	r1, [r2, #0]
   29fd8:	2203      	movs	r2, #3
   29fda:	701a      	strb	r2, [r3, #0]
   29fdc:	e7e1      	b.n	29fa2 <ipc_irq_handler+0xaa>
   29fde:	701e      	strb	r6, [r3, #0]
   29fe0:	f001 ff08 	bl	2bdf4 <nrf_modem_state_set>
   29fe4:	e7dd      	b.n	29fa2 <ipc_irq_handler+0xaa>
   29fe6:	bd70      	pop	{r4, r5, r6, pc}
   29fe8:	2001078a 	.word	0x2001078a
   29fec:	4002a000 	.word	0x4002a000
   29ff0:	00010022 	.word	0x00010022
   29ff4:	04400004 	.word	0x04400004
   29ff8:	00013032 	.word	0x00013032
   29ffc:	2000d534 	.word	0x2000d534
   2a000:	05500001 	.word	0x05500001
   2a004:	2000d538 	.word	0x2000d538
   2a008:	2000d53c 	.word	0x2000d53c

0002a00c <rpc_transport_ipc_data_msg_send>:
   2a00c:	b508      	push	{r3, lr}
   2a00e:	4b0b      	ldr	r3, [pc, #44]	; (2a03c <rpc_transport_ipc_data_msg_send+0x30>)
   2a010:	681b      	ldr	r3, [r3, #0]
   2a012:	1ac0      	subs	r0, r0, r3
   2a014:	4b0a      	ldr	r3, [pc, #40]	; (2a040 <rpc_transport_ipc_data_msg_send+0x34>)
   2a016:	f3c0 1089 	ubfx	r0, r0, #6, #10
   2a01a:	681b      	ldr	r3, [r3, #0]
   2a01c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2a020:	6843      	ldr	r3, [r0, #4]
   2a022:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2a026:	f043 0301 	orr.w	r3, r3, #1
   2a02a:	6043      	str	r3, [r0, #4]
   2a02c:	2003      	movs	r0, #3
   2a02e:	f007 fb33 	bl	31698 <nrf_modem_os_busywait>
   2a032:	2201      	movs	r2, #1
   2a034:	4b03      	ldr	r3, [pc, #12]	; (2a044 <rpc_transport_ipc_data_msg_send+0x38>)
   2a036:	60da      	str	r2, [r3, #12]
   2a038:	bd08      	pop	{r3, pc}
   2a03a:	bf00      	nop
   2a03c:	2000d54c 	.word	0x2000d54c
   2a040:	2000d550 	.word	0x2000d550
   2a044:	4002a000 	.word	0x4002a000

0002a048 <rpc_transport_ipc_ctrl_msg_send>:
   2a048:	b508      	push	{r3, lr}
   2a04a:	4b0b      	ldr	r3, [pc, #44]	; (2a078 <rpc_transport_ipc_ctrl_msg_send+0x30>)
   2a04c:	681b      	ldr	r3, [r3, #0]
   2a04e:	1ac0      	subs	r0, r0, r3
   2a050:	4b0a      	ldr	r3, [pc, #40]	; (2a07c <rpc_transport_ipc_ctrl_msg_send+0x34>)
   2a052:	f3c0 1089 	ubfx	r0, r0, #6, #10
   2a056:	681b      	ldr	r3, [r3, #0]
   2a058:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2a05c:	6843      	ldr	r3, [r0, #4]
   2a05e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   2a062:	f043 0301 	orr.w	r3, r3, #1
   2a066:	6043      	str	r3, [r0, #4]
   2a068:	2003      	movs	r0, #3
   2a06a:	f007 fb15 	bl	31698 <nrf_modem_os_busywait>
   2a06e:	2201      	movs	r2, #1
   2a070:	4b03      	ldr	r3, [pc, #12]	; (2a080 <rpc_transport_ipc_ctrl_msg_send+0x38>)
   2a072:	605a      	str	r2, [r3, #4]
   2a074:	bd08      	pop	{r3, pc}
   2a076:	bf00      	nop
   2a078:	2000d544 	.word	0x2000d544
   2a07c:	2000d548 	.word	0x2000d548
   2a080:	4002a000 	.word	0x4002a000

0002a084 <rpc_transport_ipc_data_msg_alloc>:
   2a084:	4b05      	ldr	r3, [pc, #20]	; (2a09c <rpc_transport_ipc_data_msg_alloc+0x18>)
   2a086:	781b      	ldrb	r3, [r3, #0]
   2a088:	b933      	cbnz	r3, 2a098 <rpc_transport_ipc_data_msg_alloc+0x14>
   2a08a:	4b05      	ldr	r3, [pc, #20]	; (2a0a0 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   2a08c:	2202      	movs	r2, #2
   2a08e:	6819      	ldr	r1, [r3, #0]
   2a090:	4b04      	ldr	r3, [pc, #16]	; (2a0a4 <rpc_transport_ipc_data_msg_alloc+0x20>)
   2a092:	6818      	ldr	r0, [r3, #0]
   2a094:	f7ff bebe 	b.w	29e14 <rpc_transport_ipc_msg_alloc>
   2a098:	2000      	movs	r0, #0
   2a09a:	4770      	bx	lr
   2a09c:	2001078b 	.word	0x2001078b
   2a0a0:	2000d54c 	.word	0x2000d54c
   2a0a4:	2000d550 	.word	0x2000d550

0002a0a8 <rpc_transport_ipc_ctrl_msg_alloc>:
   2a0a8:	230a      	movs	r3, #10
   2a0aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a0ac:	4d0d      	ldr	r5, [pc, #52]	; (2a0e4 <rpc_transport_ipc_ctrl_msg_alloc+0x3c>)
   2a0ae:	4e0e      	ldr	r6, [pc, #56]	; (2a0e8 <rpc_transport_ipc_ctrl_msg_alloc+0x40>)
   2a0b0:	9301      	str	r3, [sp, #4]
   2a0b2:	2201      	movs	r2, #1
   2a0b4:	6829      	ldr	r1, [r5, #0]
   2a0b6:	6830      	ldr	r0, [r6, #0]
   2a0b8:	f7ff feac 	bl	29e14 <rpc_transport_ipc_msg_alloc>
   2a0bc:	4604      	mov	r4, r0
   2a0be:	b938      	cbnz	r0, 2a0d0 <rpc_transport_ipc_ctrl_msg_alloc+0x28>
   2a0c0:	f007 faf2 	bl	316a8 <nrf_modem_os_is_in_isr>
   2a0c4:	b938      	cbnz	r0, 2a0d6 <rpc_transport_ipc_ctrl_msg_alloc+0x2e>
   2a0c6:	a901      	add	r1, sp, #4
   2a0c8:	f7fb fab4 	bl	25634 <nrf_modem_os_timedwait>
   2a0cc:	306e      	adds	r0, #110	; 0x6e
   2a0ce:	d1f0      	bne.n	2a0b2 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   2a0d0:	4620      	mov	r0, r4
   2a0d2:	b002      	add	sp, #8
   2a0d4:	bd70      	pop	{r4, r5, r6, pc}
   2a0d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   2a0da:	9b01      	ldr	r3, [sp, #4]
   2a0dc:	4358      	muls	r0, r3
   2a0de:	f007 fadb 	bl	31698 <nrf_modem_os_busywait>
   2a0e2:	e7e6      	b.n	2a0b2 <rpc_transport_ipc_ctrl_msg_alloc+0xa>
   2a0e4:	2000d544 	.word	0x2000d544
   2a0e8:	2000d548 	.word	0x2000d548

0002a0ec <rpc_transport_ipc_data_alloc>:
   2a0ec:	4b03      	ldr	r3, [pc, #12]	; (2a0fc <rpc_transport_ipc_data_alloc+0x10>)
   2a0ee:	781b      	ldrb	r3, [r3, #0]
   2a0f0:	b90b      	cbnz	r3, 2a0f6 <rpc_transport_ipc_data_alloc+0xa>
   2a0f2:	f7fb bbb1 	b.w	25858 <nrf_modem_os_shm_tx_alloc>
   2a0f6:	2000      	movs	r0, #0
   2a0f8:	4770      	bx	lr
   2a0fa:	bf00      	nop
   2a0fc:	2001078b 	.word	0x2001078b

0002a100 <nrf_modem_application_irq_handler>:
   2a100:	b510      	push	{r4, lr}
   2a102:	4c08      	ldr	r4, [pc, #32]	; (2a124 <nrf_modem_application_irq_handler+0x24>)
   2a104:	f7fb fb7c 	bl	25800 <nrf_modem_os_application_irq_clear>
   2a108:	6820      	ldr	r0, [r4, #0]
   2a10a:	b110      	cbz	r0, 2a112 <nrf_modem_application_irq_handler+0x12>
   2a10c:	2101      	movs	r1, #1
   2a10e:	f7ff feb1 	bl	29e74 <handle_modem_rpc_msg.part.0>
   2a112:	6860      	ldr	r0, [r4, #4]
   2a114:	b120      	cbz	r0, 2a120 <nrf_modem_application_irq_handler+0x20>
   2a116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a11a:	2102      	movs	r1, #2
   2a11c:	f7ff beaa 	b.w	29e74 <handle_modem_rpc_msg.part.0>
   2a120:	bd10      	pop	{r4, pc}
   2a122:	bf00      	nop
   2a124:	2000d53c 	.word	0x2000d53c

0002a128 <rpc_transport_ipc_msg_free>:
   2a128:	2300      	movs	r3, #0
   2a12a:	4911      	ldr	r1, [pc, #68]	; (2a170 <rpc_transport_ipc_msg_free+0x48>)
   2a12c:	b530      	push	{r4, r5, lr}
   2a12e:	680a      	ldr	r2, [r1, #0]
   2a130:	6814      	ldr	r4, [r2, #0]
   2a132:	42a3      	cmp	r3, r4
   2a134:	d10b      	bne.n	2a14e <rpc_transport_ipc_msg_free+0x26>
   2a136:	2300      	movs	r3, #0
   2a138:	684a      	ldr	r2, [r1, #4]
   2a13a:	6811      	ldr	r1, [r2, #0]
   2a13c:	428b      	cmp	r3, r1
   2a13e:	d015      	beq.n	2a16c <rpc_transport_ipc_msg_free+0x44>
   2a140:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   2a144:	68a4      	ldr	r4, [r4, #8]
   2a146:	42a0      	cmp	r0, r4
   2a148:	d008      	beq.n	2a15c <rpc_transport_ipc_msg_free+0x34>
   2a14a:	3301      	adds	r3, #1
   2a14c:	e7f6      	b.n	2a13c <rpc_transport_ipc_msg_free+0x14>
   2a14e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   2a152:	68ad      	ldr	r5, [r5, #8]
   2a154:	42a8      	cmp	r0, r5
   2a156:	d001      	beq.n	2a15c <rpc_transport_ipc_msg_free+0x34>
   2a158:	3301      	adds	r3, #1
   2a15a:	e7ea      	b.n	2a132 <rpc_transport_ipc_msg_free+0xa>
   2a15c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2a160:	685a      	ldr	r2, [r3, #4]
   2a162:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   2a166:	f042 0203 	orr.w	r2, r2, #3
   2a16a:	605a      	str	r2, [r3, #4]
   2a16c:	bd30      	pop	{r4, r5, pc}
   2a16e:	bf00      	nop
   2a170:	2000d53c 	.word	0x2000d53c

0002a174 <rpc_transport_ipc_peer_data_free>:
   2a174:	b510      	push	{r4, lr}
   2a176:	4b0b      	ldr	r3, [pc, #44]	; (2a1a4 <rpc_transport_ipc_peer_data_free+0x30>)
   2a178:	4604      	mov	r4, r0
   2a17a:	781b      	ldrb	r3, [r3, #0]
   2a17c:	2b03      	cmp	r3, #3
   2a17e:	d010      	beq.n	2a1a2 <rpc_transport_ipc_peer_data_free+0x2e>
   2a180:	f7ff ff92 	bl	2a0a8 <rpc_transport_ipc_ctrl_msg_alloc>
   2a184:	b168      	cbz	r0, 2a1a2 <rpc_transport_ipc_peer_data_free+0x2e>
   2a186:	2101      	movs	r1, #1
   2a188:	2200      	movs	r2, #0
   2a18a:	7001      	strb	r1, [r0, #0]
   2a18c:	2102      	movs	r1, #2
   2a18e:	6084      	str	r4, [r0, #8]
   2a190:	7042      	strb	r2, [r0, #1]
   2a192:	7081      	strb	r1, [r0, #2]
   2a194:	70c2      	strb	r2, [r0, #3]
   2a196:	f7ff ff57 	bl	2a048 <rpc_transport_ipc_ctrl_msg_send>
   2a19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a19e:	f7fb bb27 	b.w	257f0 <nrf_modem_os_application_irq_set>
   2a1a2:	bd10      	pop	{r4, pc}
   2a1a4:	2001078a 	.word	0x2001078a

0002a1a8 <rpc_transport_ipc_init>:
   2a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a1ac:	2200      	movs	r2, #0
   2a1ae:	b095      	sub	sp, #84	; 0x54
   2a1b0:	4605      	mov	r5, r0
   2a1b2:	4957      	ldr	r1, [pc, #348]	; (2a310 <rpc_transport_ipc_init+0x168>)
   2a1b4:	7900      	ldrb	r0, [r0, #4]
   2a1b6:	f7ff fcbb 	bl	29b30 <nrfx_ipc_init>
   2a1ba:	2238      	movs	r2, #56	; 0x38
   2a1bc:	2100      	movs	r1, #0
   2a1be:	a803      	add	r0, sp, #12
   2a1c0:	f009 fd55 	bl	33c6e <memset>
   2a1c4:	2302      	movs	r3, #2
   2a1c6:	9304      	str	r3, [sp, #16]
   2a1c8:	2308      	movs	r3, #8
   2a1ca:	9306      	str	r3, [sp, #24]
   2a1cc:	2320      	movs	r3, #32
   2a1ce:	9308      	str	r3, [sp, #32]
   2a1d0:	2301      	movs	r3, #1
   2a1d2:	930b      	str	r3, [sp, #44]	; 0x2c
   2a1d4:	2304      	movs	r3, #4
   2a1d6:	930d      	str	r3, [sp, #52]	; 0x34
   2a1d8:	2310      	movs	r3, #16
   2a1da:	f04f 0c40 	mov.w	ip, #64	; 0x40
   2a1de:	930f      	str	r3, [sp, #60]	; 0x3c
   2a1e0:	2380      	movs	r3, #128	; 0x80
   2a1e2:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   2a1e6:	23d5      	movs	r3, #213	; 0xd5
   2a1e8:	a803      	add	r0, sp, #12
   2a1ea:	9313      	str	r3, [sp, #76]	; 0x4c
   2a1ec:	f7ff fcb8 	bl	29b60 <nrfx_ipc_config_load>
   2a1f0:	6828      	ldr	r0, [r5, #0]
   2a1f2:	6842      	ldr	r2, [r0, #4]
   2a1f4:	f5b2 6f9d 	cmp.w	r2, #1256	; 0x4e8
   2a1f8:	f040 8085 	bne.w	2a306 <rpc_transport_ipc_init+0x15e>
   2a1fc:	6941      	ldr	r1, [r0, #20]
   2a1fe:	68c3      	ldr	r3, [r0, #12]
   2a200:	440b      	add	r3, r1
   2a202:	69c1      	ldr	r1, [r0, #28]
   2a204:	f503 639d 	add.w	r3, r3, #1256	; 0x4e8
   2a208:	440b      	add	r3, r1
   2a20a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   2a20e:	d87a      	bhi.n	2a306 <rpc_transport_ipc_init+0x15e>
   2a210:	2100      	movs	r1, #0
   2a212:	6800      	ldr	r0, [r0, #0]
   2a214:	f009 fd2b 	bl	33c6e <memset>
   2a218:	682a      	ldr	r2, [r5, #0]
   2a21a:	6814      	ldr	r4, [r2, #0]
   2a21c:	69d3      	ldr	r3, [r2, #28]
   2a21e:	f104 0660 	add.w	r6, r4, #96	; 0x60
   2a222:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   2a226:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   2a22a:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   2a22e:	f104 0920 	add.w	r9, r4, #32
   2a232:	2b00      	cmp	r3, #0
   2a234:	d05c      	beq.n	2a2f0 <rpc_transport_ipc_init+0x148>
   2a236:	f104 0840 	add.w	r8, r4, #64	; 0x40
   2a23a:	4936      	ldr	r1, [pc, #216]	; (2a314 <rpc_transport_ipc_init+0x16c>)
   2a23c:	f8c1 9000 	str.w	r9, [r1]
   2a240:	b13b      	cbz	r3, 2a252 <rpc_transport_ipc_init+0xaa>
   2a242:	6992      	ldr	r2, [r2, #24]
   2a244:	4640      	mov	r0, r8
   2a246:	f8c8 2004 	str.w	r2, [r8, #4]
   2a24a:	f8c8 3000 	str.w	r3, [r8]
   2a24e:	f7ff fd61 	bl	29d14 <ipc_trace_init>
   2a252:	6828      	ldr	r0, [r5, #0]
   2a254:	2300      	movs	r3, #0
   2a256:	6902      	ldr	r2, [r0, #16]
   2a258:	2101      	movs	r1, #1
   2a25a:	6062      	str	r2, [r4, #4]
   2a25c:	6942      	ldr	r2, [r0, #20]
   2a25e:	7023      	strb	r3, [r4, #0]
   2a260:	60a2      	str	r2, [r4, #8]
   2a262:	4a2d      	ldr	r2, [pc, #180]	; (2a318 <rpc_transport_ipc_init+0x170>)
   2a264:	60e6      	str	r6, [r4, #12]
   2a266:	6017      	str	r7, [r2, #0]
   2a268:	4a2c      	ldr	r2, [pc, #176]	; (2a31c <rpc_transport_ipc_init+0x174>)
   2a26a:	6127      	str	r7, [r4, #16]
   2a26c:	6016      	str	r6, [r2, #0]
   2a26e:	2208      	movs	r2, #8
   2a270:	7063      	strb	r3, [r4, #1]
   2a272:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
   2a276:	70a1      	strb	r1, [r4, #2]
   2a278:	70e3      	strb	r3, [r4, #3]
   2a27a:	f8c4 9014 	str.w	r9, [r4, #20]
   2a27e:	f8c4 8018 	str.w	r8, [r4, #24]
   2a282:	707b      	strb	r3, [r7, #1]
   2a284:	70bb      	strb	r3, [r7, #2]
   2a286:	70fb      	strb	r3, [r7, #3]
   2a288:	270a      	movs	r7, #10
   2a28a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
   2a28e:	4a24      	ldr	r2, [pc, #144]	; (2a320 <rpc_transport_ipc_init+0x178>)
   2a290:	7073      	strb	r3, [r6, #1]
   2a292:	f8c2 b000 	str.w	fp, [r2]
   2a296:	4a23      	ldr	r2, [pc, #140]	; (2a324 <rpc_transport_ipc_init+0x17c>)
   2a298:	70b3      	strb	r3, [r6, #2]
   2a29a:	f8c2 a000 	str.w	sl, [r2]
   2a29e:	4a22      	ldr	r2, [pc, #136]	; (2a328 <rpc_transport_ipc_init+0x180>)
   2a2a0:	70f3      	strb	r3, [r6, #3]
   2a2a2:	4d22      	ldr	r5, [pc, #136]	; (2a32c <rpc_transport_ipc_init+0x184>)
   2a2a4:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   2a2a8:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   2a2ac:	4c20      	ldr	r4, [pc, #128]	; (2a330 <rpc_transport_ipc_init+0x188>)
   2a2ae:	4a21      	ldr	r2, [pc, #132]	; (2a334 <rpc_transport_ipc_init+0x18c>)
   2a2b0:	7021      	strb	r1, [r4, #0]
   2a2b2:	602b      	str	r3, [r5, #0]
   2a2b4:	9302      	str	r3, [sp, #8]
   2a2b6:	6113      	str	r3, [r2, #16]
   2a2b8:	6913      	ldr	r3, [r2, #16]
   2a2ba:	4e1f      	ldr	r6, [pc, #124]	; (2a338 <rpc_transport_ipc_init+0x190>)
   2a2bc:	9302      	str	r3, [sp, #8]
   2a2be:	9b02      	ldr	r3, [sp, #8]
   2a2c0:	7823      	ldrb	r3, [r4, #0]
   2a2c2:	2b01      	cmp	r3, #1
   2a2c4:	d100      	bne.n	2a2c8 <rpc_transport_ipc_init+0x120>
   2a2c6:	b9ae      	cbnz	r6, 2a2f4 <rpc_transport_ipc_init+0x14c>
   2a2c8:	7823      	ldrb	r3, [r4, #0]
   2a2ca:	2b01      	cmp	r3, #1
   2a2cc:	bf01      	itttt	eq
   2a2ce:	f06f 0373 	mvneq.w	r3, #115	; 0x73
   2a2d2:	602b      	streq	r3, [r5, #0]
   2a2d4:	2303      	moveq	r3, #3
   2a2d6:	7023      	strbeq	r3, [r4, #0]
   2a2d8:	682c      	ldr	r4, [r5, #0]
   2a2da:	b9b4      	cbnz	r4, 2a30a <rpc_transport_ipc_init+0x162>
   2a2dc:	4b17      	ldr	r3, [pc, #92]	; (2a33c <rpc_transport_ipc_init+0x194>)
   2a2de:	701c      	strb	r4, [r3, #0]
   2a2e0:	4b17      	ldr	r3, [pc, #92]	; (2a340 <rpc_transport_ipc_init+0x198>)
   2a2e2:	801c      	strh	r4, [r3, #0]
   2a2e4:	4b17      	ldr	r3, [pc, #92]	; (2a344 <rpc_transport_ipc_init+0x19c>)
   2a2e6:	801c      	strh	r4, [r3, #0]
   2a2e8:	4620      	mov	r0, r4
   2a2ea:	b015      	add	sp, #84	; 0x54
   2a2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2f0:	4698      	mov	r8, r3
   2a2f2:	e7a2      	b.n	2a23a <rpc_transport_ipc_init+0x92>
   2a2f4:	2000      	movs	r0, #0
   2a2f6:	a901      	add	r1, sp, #4
   2a2f8:	9701      	str	r7, [sp, #4]
   2a2fa:	f7fb f99b 	bl	25634 <nrf_modem_os_timedwait>
   2a2fe:	9b01      	ldr	r3, [sp, #4]
   2a300:	3b0a      	subs	r3, #10
   2a302:	441e      	add	r6, r3
   2a304:	e7dc      	b.n	2a2c0 <rpc_transport_ipc_init+0x118>
   2a306:	f06f 0415 	mvn.w	r4, #21
   2a30a:	f7ff fc49 	bl	29ba0 <nrfx_ipc_uninit>
   2a30e:	e7eb      	b.n	2a2e8 <rpc_transport_ipc_init+0x140>
   2a310:	00029ef9 	.word	0x00029ef9
   2a314:	2000d538 	.word	0x2000d538
   2a318:	2000d550 	.word	0x2000d550
   2a31c:	2000d548 	.word	0x2000d548
   2a320:	2000d54c 	.word	0x2000d54c
   2a324:	2000d544 	.word	0x2000d544
   2a328:	4002a000 	.word	0x4002a000
   2a32c:	2000d534 	.word	0x2000d534
   2a330:	2001078a 	.word	0x2001078a
   2a334:	40005600 	.word	0x40005600
   2a338:	000249f0 	.word	0x000249f0
   2a33c:	2001078b 	.word	0x2001078b
   2a340:	2000d906 	.word	0x2000d906
   2a344:	2000d904 	.word	0x2000d904

0002a348 <sock_init>:
   2a348:	f44f 7240 	mov.w	r2, #768	; 0x300
   2a34c:	2100      	movs	r1, #0
   2a34e:	b508      	push	{r3, lr}
   2a350:	4808      	ldr	r0, [pc, #32]	; (2a374 <sock_init+0x2c>)
   2a352:	f009 fc8c 	bl	33c6e <memset>
   2a356:	2100      	movs	r1, #0
   2a358:	2208      	movs	r2, #8
   2a35a:	4b07      	ldr	r3, [pc, #28]	; (2a378 <sock_init+0x30>)
   2a35c:	4807      	ldr	r0, [pc, #28]	; (2a37c <sock_init+0x34>)
   2a35e:	7019      	strb	r1, [r3, #0]
   2a360:	4b04      	ldr	r3, [pc, #16]	; (2a374 <sock_init+0x2c>)
   2a362:	3a01      	subs	r2, #1
   2a364:	e9c3 0100 	strd	r0, r1, [r3]
   2a368:	6099      	str	r1, [r3, #8]
   2a36a:	f103 0360 	add.w	r3, r3, #96	; 0x60
   2a36e:	d1f8      	bne.n	2a362 <sock_init+0x1a>
   2a370:	bd08      	pop	{r3, pc}
   2a372:	bf00      	nop
   2a374:	2000d554 	.word	0x2000d554
   2a378:	2001078c 	.word	0x2001078c
   2a37c:	1badf11e 	.word	0x1badf11e

0002a380 <sock_open>:
   2a380:	2300      	movs	r3, #0
   2a382:	2060      	movs	r0, #96	; 0x60
   2a384:	b530      	push	{r4, r5, lr}
   2a386:	4a0d      	ldr	r2, [pc, #52]	; (2a3bc <sock_open+0x3c>)
   2a388:	4c0d      	ldr	r4, [pc, #52]	; (2a3c0 <sock_open+0x40>)
   2a38a:	fb00 f103 	mul.w	r1, r0, r3
   2a38e:	588d      	ldr	r5, [r1, r2]
   2a390:	42a5      	cmp	r5, r4
   2a392:	d10e      	bne.n	2a3b2 <sock_open+0x32>
   2a394:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a398:	1850      	adds	r0, r2, r1
   2a39a:	5053      	str	r3, [r2, r1]
   2a39c:	4a09      	ldr	r2, [pc, #36]	; (2a3c4 <sock_open+0x44>)
   2a39e:	7f03      	ldrb	r3, [r0, #28]
   2a3a0:	7812      	ldrb	r2, [r2, #0]
   2a3a2:	f362 13c7 	bfi	r3, r2, #7, #1
   2a3a6:	7703      	strb	r3, [r0, #28]
   2a3a8:	2302      	movs	r3, #2
   2a3aa:	8783      	strh	r3, [r0, #60]	; 0x3c
   2a3ac:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   2a3b0:	bd30      	pop	{r4, r5, pc}
   2a3b2:	3301      	adds	r3, #1
   2a3b4:	2b08      	cmp	r3, #8
   2a3b6:	d1e8      	bne.n	2a38a <sock_open+0xa>
   2a3b8:	2000      	movs	r0, #0
   2a3ba:	e7f9      	b.n	2a3b0 <sock_open+0x30>
   2a3bc:	2000d554 	.word	0x2000d554
   2a3c0:	1badf11e 	.word	0x1badf11e
   2a3c4:	2001078c 	.word	0x2001078c

0002a3c8 <sock_find>:
   2a3c8:	b530      	push	{r4, r5, lr}
   2a3ca:	2200      	movs	r2, #0
   2a3cc:	2460      	movs	r4, #96	; 0x60
   2a3ce:	4b06      	ldr	r3, [pc, #24]	; (2a3e8 <sock_find+0x20>)
   2a3d0:	fb04 f102 	mul.w	r1, r4, r2
   2a3d4:	58cd      	ldr	r5, [r1, r3]
   2a3d6:	4285      	cmp	r5, r0
   2a3d8:	d101      	bne.n	2a3de <sock_find+0x16>
   2a3da:	1858      	adds	r0, r3, r1
   2a3dc:	bd30      	pop	{r4, r5, pc}
   2a3de:	3201      	adds	r2, #1
   2a3e0:	2a08      	cmp	r2, #8
   2a3e2:	d1f5      	bne.n	2a3d0 <sock_find+0x8>
   2a3e4:	2000      	movs	r0, #0
   2a3e6:	e7f9      	b.n	2a3dc <sock_find+0x14>
   2a3e8:	2000d554 	.word	0x2000d554

0002a3ec <_sock_close>:
   2a3ec:	b538      	push	{r3, r4, r5, lr}
   2a3ee:	f7ff ffeb 	bl	2a3c8 <sock_find>
   2a3f2:	4604      	mov	r4, r0
   2a3f4:	1d05      	adds	r5, r0, #4
   2a3f6:	4628      	mov	r0, r5
   2a3f8:	f008 f90d 	bl	32616 <pkt_flush>
   2a3fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   2a3fe:	b108      	cbz	r0, 2a404 <_sock_close+0x18>
   2a400:	f7fb fa24 	bl	2584c <nrf_modem_os_free>
   2a404:	225c      	movs	r2, #92	; 0x5c
   2a406:	2100      	movs	r1, #0
   2a408:	4628      	mov	r0, r5
   2a40a:	f009 fc30 	bl	33c6e <memset>
   2a40e:	4b01      	ldr	r3, [pc, #4]	; (2a414 <_sock_close+0x28>)
   2a410:	6023      	str	r3, [r4, #0]
   2a412:	bd38      	pop	{r3, r4, r5, pc}
   2a414:	1badf11e 	.word	0x1badf11e

0002a418 <sock_flow_control_set>:
   2a418:	1e02      	subs	r2, r0, #0
   2a41a:	bf18      	it	ne
   2a41c:	2201      	movne	r2, #1
   2a41e:	4b0a      	ldr	r3, [pc, #40]	; (2a448 <sock_flow_control_set+0x30>)
   2a420:	b570      	push	{r4, r5, r6, lr}
   2a422:	701a      	strb	r2, [r3, #0]
   2a424:	2560      	movs	r5, #96	; 0x60
   2a426:	2200      	movs	r2, #0
   2a428:	4908      	ldr	r1, [pc, #32]	; (2a44c <sock_flow_control_set+0x34>)
   2a42a:	4e09      	ldr	r6, [pc, #36]	; (2a450 <sock_flow_control_set+0x38>)
   2a42c:	fb05 f302 	mul.w	r3, r5, r2
   2a430:	585c      	ldr	r4, [r3, r1]
   2a432:	3201      	adds	r2, #1
   2a434:	42b4      	cmp	r4, r6
   2a436:	bf1f      	itttt	ne
   2a438:	185b      	addne	r3, r3, r1
   2a43a:	7f1c      	ldrbne	r4, [r3, #28]
   2a43c:	f360 14c7 	bfine	r4, r0, #7, #1
   2a440:	771c      	strbne	r4, [r3, #28]
   2a442:	2a08      	cmp	r2, #8
   2a444:	d1f2      	bne.n	2a42c <sock_flow_control_set+0x14>
   2a446:	bd70      	pop	{r4, r5, r6, pc}
   2a448:	2001078c 	.word	0x2001078c
   2a44c:	2000d554 	.word	0x2000d554
   2a450:	1badf11e 	.word	0x1badf11e

0002a454 <on_getaddrinfo_res>:
   2a454:	2301      	movs	r3, #1
   2a456:	4a03      	ldr	r2, [pc, #12]	; (2a464 <on_getaddrinfo_res+0x10>)
   2a458:	7013      	strb	r3, [r2, #0]
   2a45a:	4a03      	ldr	r2, [pc, #12]	; (2a468 <on_getaddrinfo_res+0x14>)
   2a45c:	6010      	str	r0, [r2, #0]
   2a45e:	4618      	mov	r0, r3
   2a460:	4770      	bx	lr
   2a462:	bf00      	nop
   2a464:	2001078d 	.word	0x2001078d
   2a468:	2000d864 	.word	0x2000d864

0002a46c <addrinfo_init>:
   2a46c:	2201      	movs	r2, #1
   2a46e:	4802      	ldr	r0, [pc, #8]	; (2a478 <addrinfo_init+0xc>)
   2a470:	4611      	mov	r1, r2
   2a472:	f7fb b9a1 	b.w	257b8 <nrf_modem_os_sem_init>
   2a476:	bf00      	nop
   2a478:	2000d854 	.word	0x2000d854

0002a47c <nrf_getaddrinfo>:
   2a47c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a480:	4604      	mov	r4, r0
   2a482:	460e      	mov	r6, r1
   2a484:	4617      	mov	r7, r2
   2a486:	461d      	mov	r5, r3
   2a488:	f001 fcba 	bl	2be00 <nrf_modem_state_is_initialized>
   2a48c:	b928      	cbnz	r0, 2a49a <nrf_getaddrinfo+0x1e>
   2a48e:	2001      	movs	r0, #1
   2a490:	f007 f904 	bl	3169c <nrf_modem_os_errno_set>
   2a494:	f06f 040a 	mvn.w	r4, #10
   2a498:	e01c      	b.n	2a4d4 <nrf_getaddrinfo+0x58>
   2a49a:	ea54 0306 	orrs.w	r3, r4, r6
   2a49e:	f000 817b 	beq.w	2a798 <nrf_getaddrinfo+0x31c>
   2a4a2:	b31f      	cbz	r7, 2a4ec <nrf_getaddrinfo+0x70>
   2a4a4:	683b      	ldr	r3, [r7, #0]
   2a4a6:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
   2a4aa:	f023 0302 	bic.w	r3, r3, #2
   2a4ae:	2b00      	cmp	r3, #0
   2a4b0:	f040 8175 	bne.w	2a79e <nrf_getaddrinfo+0x322>
   2a4b4:	6878      	ldr	r0, [r7, #4]
   2a4b6:	b938      	cbnz	r0, 2a4c8 <nrf_getaddrinfo+0x4c>
   2a4b8:	68b8      	ldr	r0, [r7, #8]
   2a4ba:	b178      	cbz	r0, 2a4dc <nrf_getaddrinfo+0x60>
   2a4bc:	f008 f83a 	bl	32534 <sock_type_is_valid>
   2a4c0:	b960      	cbnz	r0, 2a4dc <nrf_getaddrinfo+0x60>
   2a4c2:	f06f 0406 	mvn.w	r4, #6
   2a4c6:	e005      	b.n	2a4d4 <nrf_getaddrinfo+0x58>
   2a4c8:	f008 f82e 	bl	32528 <sock_family_is_valid>
   2a4cc:	2800      	cmp	r0, #0
   2a4ce:	d1f3      	bne.n	2a4b8 <nrf_getaddrinfo+0x3c>
   2a4d0:	f06f 0405 	mvn.w	r4, #5
   2a4d4:	4620      	mov	r0, r4
   2a4d6:	b003      	add	sp, #12
   2a4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4dc:	68f8      	ldr	r0, [r7, #12]
   2a4de:	b128      	cbz	r0, 2a4ec <nrf_getaddrinfo+0x70>
   2a4e0:	68b9      	ldr	r1, [r7, #8]
   2a4e2:	f008 f83b 	bl	3255c <sock_proto_supports_type>
   2a4e6:	b908      	cbnz	r0, 2a4ec <nrf_getaddrinfo+0x70>
   2a4e8:	206b      	movs	r0, #107	; 0x6b
   2a4ea:	e7d1      	b.n	2a490 <nrf_getaddrinfo+0x14>
   2a4ec:	4baf      	ldr	r3, [pc, #700]	; (2a7ac <nrf_getaddrinfo+0x330>)
   2a4ee:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
   2a4f2:	6818      	ldr	r0, [r3, #0]
   2a4f4:	f007 f8dc 	bl	316b0 <nrf_modem_os_sem_take>
   2a4f8:	4680      	mov	r8, r0
   2a4fa:	2800      	cmp	r0, #0
   2a4fc:	f040 8152 	bne.w	2a7a4 <nrf_getaddrinfo+0x328>
   2a500:	2e00      	cmp	r6, #0
   2a502:	d042      	beq.n	2a58a <nrf_getaddrinfo+0x10e>
   2a504:	b31f      	cbz	r7, 2a54e <nrf_getaddrinfo+0xd2>
   2a506:	683b      	ldr	r3, [r7, #0]
   2a508:	f403 53a0 	and.w	r3, r3, #5120	; 0x1400
   2a50c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   2a510:	d11d      	bne.n	2a54e <nrf_getaddrinfo+0xd2>
   2a512:	683b      	ldr	r3, [r7, #0]
   2a514:	04db      	lsls	r3, r3, #19
   2a516:	d53c      	bpl.n	2a592 <nrf_getaddrinfo+0x116>
   2a518:	213a      	movs	r1, #58	; 0x3a
   2a51a:	4630      	mov	r0, r6
   2a51c:	f009 fd3c 	bl	33f98 <strchr>
   2a520:	4681      	mov	r9, r0
   2a522:	b120      	cbz	r0, 2a52e <nrf_getaddrinfo+0xb2>
   2a524:	48a2      	ldr	r0, [pc, #648]	; (2a7b0 <nrf_getaddrinfo+0x334>)
   2a526:	f7f2 fdbb 	bl	1d0a0 <strlen>
   2a52a:	eb09 0600 	add.w	r6, r9, r0
   2a52e:	4630      	mov	r0, r6
   2a530:	49a0      	ldr	r1, [pc, #640]	; (2a7b4 <nrf_getaddrinfo+0x338>)
   2a532:	f009 fd79 	bl	34028 <strstr>
   2a536:	4681      	mov	r9, r0
   2a538:	b318      	cbz	r0, 2a582 <nrf_getaddrinfo+0x106>
   2a53a:	489e      	ldr	r0, [pc, #632]	; (2a7b4 <nrf_getaddrinfo+0x338>)
   2a53c:	f7f2 fdb0 	bl	1d0a0 <strlen>
   2a540:	220a      	movs	r2, #10
   2a542:	2100      	movs	r1, #0
   2a544:	4448      	add	r0, r9
   2a546:	f003 fd4b 	bl	2dfe0 <strtol>
   2a54a:	4606      	mov	r6, r0
   2a54c:	e023      	b.n	2a596 <nrf_getaddrinfo+0x11a>
   2a54e:	220a      	movs	r2, #10
   2a550:	2100      	movs	r1, #0
   2a552:	4630      	mov	r0, r6
   2a554:	f003 fe60 	bl	2e218 <strtoul>
   2a558:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   2a55c:	1e42      	subs	r2, r0, #1
   2a55e:	429a      	cmp	r2, r3
   2a560:	f200 8114 	bhi.w	2a78c <nrf_getaddrinfo+0x310>
   2a564:	0203      	lsls	r3, r0, #8
   2a566:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
   2a56a:	4b93      	ldr	r3, [pc, #588]	; (2a7b8 <nrf_getaddrinfo+0x33c>)
   2a56c:	8018      	strh	r0, [r3, #0]
   2a56e:	2f00      	cmp	r7, #0
   2a570:	d1cf      	bne.n	2a512 <nrf_getaddrinfo+0x96>
   2a572:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a576:	2200      	movs	r2, #0
   2a578:	4b90      	ldr	r3, [pc, #576]	; (2a7bc <nrf_getaddrinfo+0x340>)
   2a57a:	601a      	str	r2, [r3, #0]
   2a57c:	b997      	cbnz	r7, 2a5a4 <nrf_getaddrinfo+0x128>
   2a57e:	2301      	movs	r3, #1
   2a580:	e014      	b.n	2a5ac <nrf_getaddrinfo+0x130>
   2a582:	4601      	mov	r1, r0
   2a584:	220a      	movs	r2, #10
   2a586:	4630      	mov	r0, r6
   2a588:	e7dd      	b.n	2a546 <nrf_getaddrinfo+0xca>
   2a58a:	4b8b      	ldr	r3, [pc, #556]	; (2a7b8 <nrf_getaddrinfo+0x33c>)
   2a58c:	8018      	strh	r0, [r3, #0]
   2a58e:	2f00      	cmp	r7, #0
   2a590:	d0ef      	beq.n	2a572 <nrf_getaddrinfo+0xf6>
   2a592:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2a596:	6878      	ldr	r0, [r7, #4]
   2a598:	2800      	cmp	r0, #0
   2a59a:	d0ec      	beq.n	2a576 <nrf_getaddrinfo+0xfa>
   2a59c:	f000 fd02 	bl	2afa4 <nrf_af_to_rpc_af>
   2a5a0:	4b86      	ldr	r3, [pc, #536]	; (2a7bc <nrf_getaddrinfo+0x340>)
   2a5a2:	6018      	str	r0, [r3, #0]
   2a5a4:	68bb      	ldr	r3, [r7, #8]
   2a5a6:	2b00      	cmp	r3, #0
   2a5a8:	bf08      	it	eq
   2a5aa:	2301      	moveq	r3, #1
   2a5ac:	f8df b21c 	ldr.w	fp, [pc, #540]	; 2a7cc <nrf_getaddrinfo+0x350>
   2a5b0:	f8cb 3000 	str.w	r3, [fp]
   2a5b4:	2f00      	cmp	r7, #0
   2a5b6:	d04d      	beq.n	2a654 <nrf_getaddrinfo+0x1d8>
   2a5b8:	68fb      	ldr	r3, [r7, #12]
   2a5ba:	2b00      	cmp	r3, #0
   2a5bc:	bf08      	it	eq
   2a5be:	2306      	moveq	r3, #6
   2a5c0:	f8df a20c 	ldr.w	sl, [pc, #524]	; 2a7d0 <nrf_getaddrinfo+0x354>
   2a5c4:	f8ca 3000 	str.w	r3, [sl]
   2a5c8:	b10f      	cbz	r7, 2a5ce <nrf_getaddrinfo+0x152>
   2a5ca:	f8d7 8000 	ldr.w	r8, [r7]
   2a5ce:	4f7c      	ldr	r7, [pc, #496]	; (2a7c0 <nrf_getaddrinfo+0x344>)
   2a5d0:	4620      	mov	r0, r4
   2a5d2:	f8c7 8000 	str.w	r8, [r7]
   2a5d6:	b10c      	cbz	r4, 2a5dc <nrf_getaddrinfo+0x160>
   2a5d8:	f7f2 fd62 	bl	1d0a0 <strlen>
   2a5dc:	f007 fdd4 	bl	32188 <rpc_client_request_alloc>
   2a5e0:	4680      	mov	r8, r0
   2a5e2:	2800      	cmp	r0, #0
   2a5e4:	f000 80d5 	beq.w	2a792 <nrf_getaddrinfo+0x316>
   2a5e8:	6106      	str	r6, [r0, #16]
   2a5ea:	b144      	cbz	r4, 2a5fe <nrf_getaddrinfo+0x182>
   2a5ec:	6806      	ldr	r6, [r0, #0]
   2a5ee:	4620      	mov	r0, r4
   2a5f0:	f7f2 fd56 	bl	1d0a0 <strlen>
   2a5f4:	4621      	mov	r1, r4
   2a5f6:	4602      	mov	r2, r0
   2a5f8:	4630      	mov	r0, r6
   2a5fa:	f009 fb18 	bl	33c2e <memcpy>
   2a5fe:	4b6f      	ldr	r3, [pc, #444]	; (2a7bc <nrf_getaddrinfo+0x340>)
   2a600:	4642      	mov	r2, r8
   2a602:	681b      	ldr	r3, [r3, #0]
   2a604:	f247 010d 	movw	r1, #28685	; 0x700d
   2a608:	f8c8 3018 	str.w	r3, [r8, #24]
   2a60c:	f8db 3000 	ldr.w	r3, [fp]
   2a610:	2004      	movs	r0, #4
   2a612:	f8c8 301c 	str.w	r3, [r8, #28]
   2a616:	f8da 3000 	ldr.w	r3, [sl]
   2a61a:	4e6a      	ldr	r6, [pc, #424]	; (2a7c4 <nrf_getaddrinfo+0x348>)
   2a61c:	f8c8 3020 	str.w	r3, [r8, #32]
   2a620:	683b      	ldr	r3, [r7, #0]
   2a622:	f8c8 3014 	str.w	r3, [r8, #20]
   2a626:	f007 fdb5 	bl	32194 <rpc_client_request_send>
   2a62a:	2300      	movs	r3, #0
   2a62c:	7033      	strb	r3, [r6, #0]
   2a62e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a632:	9301      	str	r3, [sp, #4]
   2a634:	2000      	movs	r0, #0
   2a636:	a901      	add	r1, sp, #4
   2a638:	f7fa fffc 	bl	25634 <nrf_modem_os_timedwait>
   2a63c:	4604      	mov	r4, r0
   2a63e:	b158      	cbz	r0, 2a658 <nrf_getaddrinfo+0x1dc>
   2a640:	206e      	movs	r0, #110	; 0x6e
   2a642:	f007 f82b 	bl	3169c <nrf_modem_os_errno_set>
   2a646:	f06f 040a 	mvn.w	r4, #10
   2a64a:	4b58      	ldr	r3, [pc, #352]	; (2a7ac <nrf_getaddrinfo+0x330>)
   2a64c:	6818      	ldr	r0, [r3, #0]
   2a64e:	f007 f82d 	bl	316ac <nrf_modem_os_sem_give>
   2a652:	e73f      	b.n	2a4d4 <nrf_getaddrinfo+0x58>
   2a654:	2306      	movs	r3, #6
   2a656:	e7b3      	b.n	2a5c0 <nrf_getaddrinfo+0x144>
   2a658:	7833      	ldrb	r3, [r6, #0]
   2a65a:	2b01      	cmp	r3, #1
   2a65c:	d1ea      	bne.n	2a634 <nrf_getaddrinfo+0x1b8>
   2a65e:	4b5a      	ldr	r3, [pc, #360]	; (2a7c8 <nrf_getaddrinfo+0x34c>)
   2a660:	681b      	ldr	r3, [r3, #0]
   2a662:	6958      	ldr	r0, [r3, #20]
   2a664:	2800      	cmp	r0, #0
   2a666:	f040 808d 	bne.w	2a784 <nrf_getaddrinfo+0x308>
   2a66a:	2020      	movs	r0, #32
   2a66c:	681e      	ldr	r6, [r3, #0]
   2a66e:	f7fb f8e5 	bl	2583c <nrf_modem_os_alloc>
   2a672:	6028      	str	r0, [r5, #0]
   2a674:	b1e0      	cbz	r0, 2a6b0 <nrf_getaddrinfo+0x234>
   2a676:	f8d6 8008 	ldr.w	r8, [r6, #8]
   2a67a:	f1b8 0f01 	cmp.w	r8, #1
   2a67e:	d00f      	beq.n	2a6a0 <nrf_getaddrinfo+0x224>
   2a680:	f1b8 0f02 	cmp.w	r8, #2
   2a684:	d036      	beq.n	2a6f4 <nrf_getaddrinfo+0x278>
   2a686:	f06f 0405 	mvn.w	r4, #5
   2a68a:	4b4f      	ldr	r3, [pc, #316]	; (2a7c8 <nrf_getaddrinfo+0x34c>)
   2a68c:	681b      	ldr	r3, [r3, #0]
   2a68e:	6818      	ldr	r0, [r3, #0]
   2a690:	b108      	cbz	r0, 2a696 <nrf_getaddrinfo+0x21a>
   2a692:	f007 fd89 	bl	321a8 <rpc_client_data_free>
   2a696:	4b4c      	ldr	r3, [pc, #304]	; (2a7c8 <nrf_getaddrinfo+0x34c>)
   2a698:	6818      	ldr	r0, [r3, #0]
   2a69a:	f007 fd82 	bl	321a2 <rpc_client_message_free>
   2a69e:	e7d4      	b.n	2a64a <nrf_getaddrinfo+0x1ce>
   2a6a0:	2010      	movs	r0, #16
   2a6a2:	f7fb f8cb 	bl	2583c <nrf_modem_os_alloc>
   2a6a6:	4681      	mov	r9, r0
   2a6a8:	b928      	cbnz	r0, 2a6b6 <nrf_getaddrinfo+0x23a>
   2a6aa:	6828      	ldr	r0, [r5, #0]
   2a6ac:	f7fb f8ce 	bl	2584c <nrf_modem_os_free>
   2a6b0:	f06f 0409 	mvn.w	r4, #9
   2a6b4:	e7e9      	b.n	2a68a <nrf_getaddrinfo+0x20e>
   2a6b6:	2210      	movs	r2, #16
   2a6b8:	493f      	ldr	r1, [pc, #252]	; (2a7b8 <nrf_getaddrinfo+0x33c>)
   2a6ba:	7002      	strb	r2, [r0, #0]
   2a6bc:	8809      	ldrh	r1, [r1, #0]
   2a6be:	f8c0 8004 	str.w	r8, [r0, #4]
   2a6c2:	8101      	strh	r1, [r0, #8]
   2a6c4:	69b1      	ldr	r1, [r6, #24]
   2a6c6:	60c1      	str	r1, [r0, #12]
   2a6c8:	6829      	ldr	r1, [r5, #0]
   2a6ca:	610a      	str	r2, [r1, #16]
   2a6cc:	683a      	ldr	r2, [r7, #0]
   2a6ce:	f8d5 8000 	ldr.w	r8, [r5]
   2a6d2:	f012 0202 	ands.w	r2, r2, #2
   2a6d6:	d052      	beq.n	2a77e <nrf_getaddrinfo+0x302>
   2a6d8:	8af0      	ldrh	r0, [r6, #22]
   2a6da:	3001      	adds	r0, #1
   2a6dc:	f7fb f8ae 	bl	2583c <nrf_modem_os_alloc>
   2a6e0:	682a      	ldr	r2, [r5, #0]
   2a6e2:	f8c8 0018 	str.w	r0, [r8, #24]
   2a6e6:	6990      	ldr	r0, [r2, #24]
   2a6e8:	bb38      	cbnz	r0, 2a73a <nrf_getaddrinfo+0x2be>
   2a6ea:	4628      	mov	r0, r5
   2a6ec:	f7fb f8ae 	bl	2584c <nrf_modem_os_free>
   2a6f0:	4648      	mov	r0, r9
   2a6f2:	e7db      	b.n	2a6ac <nrf_getaddrinfo+0x230>
   2a6f4:	2024      	movs	r0, #36	; 0x24
   2a6f6:	f7fb f8a1 	bl	2583c <nrf_modem_os_alloc>
   2a6fa:	4681      	mov	r9, r0
   2a6fc:	2800      	cmp	r0, #0
   2a6fe:	d0d4      	beq.n	2a6aa <nrf_getaddrinfo+0x22e>
   2a700:	2224      	movs	r2, #36	; 0x24
   2a702:	4621      	mov	r1, r4
   2a704:	f009 fab3 	bl	33c6e <memset>
   2a708:	2224      	movs	r2, #36	; 0x24
   2a70a:	f889 2000 	strb.w	r2, [r9]
   2a70e:	4a2a      	ldr	r2, [pc, #168]	; (2a7b8 <nrf_getaddrinfo+0x33c>)
   2a710:	f8c9 8004 	str.w	r8, [r9, #4]
   2a714:	8812      	ldrh	r2, [r2, #0]
   2a716:	f109 0110 	add.w	r1, r9, #16
   2a71a:	f8a9 2008 	strh.w	r2, [r9, #8]
   2a71e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   2a722:	f106 0218 	add.w	r2, r6, #24
   2a726:	f852 cb04 	ldr.w	ip, [r2], #4
   2a72a:	4282      	cmp	r2, r0
   2a72c:	f841 cb04 	str.w	ip, [r1], #4
   2a730:	d1f9      	bne.n	2a726 <nrf_getaddrinfo+0x2aa>
   2a732:	2124      	movs	r1, #36	; 0x24
   2a734:	682a      	ldr	r2, [r5, #0]
   2a736:	6111      	str	r1, [r2, #16]
   2a738:	e7c8      	b.n	2a6cc <nrf_getaddrinfo+0x250>
   2a73a:	f8b6 c014 	ldrh.w	ip, [r6, #20]
   2a73e:	f106 0118 	add.w	r1, r6, #24
   2a742:	8af2      	ldrh	r2, [r6, #22]
   2a744:	4461      	add	r1, ip
   2a746:	f009 fa72 	bl	33c2e <memcpy>
   2a74a:	2000      	movs	r0, #0
   2a74c:	6829      	ldr	r1, [r5, #0]
   2a74e:	8af2      	ldrh	r2, [r6, #22]
   2a750:	6989      	ldr	r1, [r1, #24]
   2a752:	5488      	strb	r0, [r1, r2]
   2a754:	68b0      	ldr	r0, [r6, #8]
   2a756:	f8d5 8000 	ldr.w	r8, [r5]
   2a75a:	f008 fc98 	bl	3308e <rpc_af_to_nrf_af>
   2a75e:	2300      	movs	r3, #0
   2a760:	682a      	ldr	r2, [r5, #0]
   2a762:	f8db 1000 	ldr.w	r1, [fp]
   2a766:	f8c8 0004 	str.w	r0, [r8, #4]
   2a76a:	6091      	str	r1, [r2, #8]
   2a76c:	f8da 1000 	ldr.w	r1, [sl]
   2a770:	f8c2 9014 	str.w	r9, [r2, #20]
   2a774:	60d1      	str	r1, [r2, #12]
   2a776:	6839      	ldr	r1, [r7, #0]
   2a778:	61d3      	str	r3, [r2, #28]
   2a77a:	6011      	str	r1, [r2, #0]
   2a77c:	e785      	b.n	2a68a <nrf_getaddrinfo+0x20e>
   2a77e:	f8c8 2018 	str.w	r2, [r8, #24]
   2a782:	e7e7      	b.n	2a754 <nrf_getaddrinfo+0x2d8>
   2a784:	f008 fccb 	bl	3311e <rpc_error_to_nrf_gai_errno>
   2a788:	4604      	mov	r4, r0
   2a78a:	e77e      	b.n	2a68a <nrf_getaddrinfo+0x20e>
   2a78c:	f06f 0407 	mvn.w	r4, #7
   2a790:	e75b      	b.n	2a64a <nrf_getaddrinfo+0x1ce>
   2a792:	f06f 0409 	mvn.w	r4, #9
   2a796:	e758      	b.n	2a64a <nrf_getaddrinfo+0x1ce>
   2a798:	f06f 0401 	mvn.w	r4, #1
   2a79c:	e69a      	b.n	2a4d4 <nrf_getaddrinfo+0x58>
   2a79e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2a7a2:	e697      	b.n	2a4d4 <nrf_getaddrinfo+0x58>
   2a7a4:	f06f 0402 	mvn.w	r4, #2
   2a7a8:	e694      	b.n	2a4d4 <nrf_getaddrinfo+0x58>
   2a7aa:	bf00      	nop
   2a7ac:	2000d854 	.word	0x2000d854
   2a7b0:	00039e5c 	.word	0x00039e5c
   2a7b4:	000398f1 	.word	0x000398f1
   2a7b8:	2000d908 	.word	0x2000d908
   2a7bc:	2000d858 	.word	0x2000d858
   2a7c0:	2000d85c 	.word	0x2000d85c
   2a7c4:	2001078d 	.word	0x2001078d
   2a7c8:	2000d864 	.word	0x2000d864
   2a7cc:	2000d868 	.word	0x2000d868
   2a7d0:	2000d860 	.word	0x2000d860

0002a7d4 <rpc_ip_event_handler>:
   2a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a7d6:	f248 030f 	movw	r3, #32783	; 0x800f
   2a7da:	4299      	cmp	r1, r3
   2a7dc:	4605      	mov	r5, r0
   2a7de:	460e      	mov	r6, r1
   2a7e0:	d00b      	beq.n	2a7fa <rpc_ip_event_handler+0x26>
   2a7e2:	f249 0304 	movw	r3, #36868	; 0x9004
   2a7e6:	4299      	cmp	r1, r3
   2a7e8:	d00a      	beq.n	2a800 <rpc_ip_event_handler+0x2c>
   2a7ea:	f248 030d 	movw	r3, #32781	; 0x800d
   2a7ee:	4299      	cmp	r1, r3
   2a7f0:	d117      	bne.n	2a822 <rpc_ip_event_handler+0x4e>
   2a7f2:	f7ff fe2f 	bl	2a454 <on_getaddrinfo_res>
   2a7f6:	b2c0      	uxtb	r0, r0
   2a7f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2a7fa:	f007 ff1a 	bl	32632 <on_conf_dnssrv_res>
   2a7fe:	e7fa      	b.n	2a7f6 <rpc_ip_event_handler+0x22>
   2a800:	6903      	ldr	r3, [r0, #16]
   2a802:	2b03      	cmp	r3, #3
   2a804:	d806      	bhi.n	2a814 <rpc_ip_event_handler+0x40>
   2a806:	e8df f003 	tbb	[pc, r3]
   2a80a:	0a02      	.short	0x0a02
   2a80c:	0702      	.short	0x0702
   2a80e:	2000      	movs	r0, #0
   2a810:	f7ff fe02 	bl	2a418 <sock_flow_control_set>
   2a814:	2000      	movs	r0, #0
   2a816:	e7ef      	b.n	2a7f8 <rpc_ip_event_handler+0x24>
   2a818:	2201      	movs	r2, #1
   2a81a:	4b71      	ldr	r3, [pc, #452]	; (2a9e0 <rpc_ip_event_handler+0x20c>)
   2a81c:	701a      	strb	r2, [r3, #0]
   2a81e:	2001      	movs	r0, #1
   2a820:	e7f6      	b.n	2a810 <rpc_ip_event_handler+0x3c>
   2a822:	f5b1 4f10 	cmp.w	r1, #36864	; 0x9000
   2a826:	bf8c      	ite	hi
   2a828:	68c0      	ldrhi	r0, [r0, #12]
   2a82a:	6928      	ldrls	r0, [r5, #16]
   2a82c:	f7ff fdcc 	bl	2a3c8 <sock_find>
   2a830:	4604      	mov	r4, r0
   2a832:	b928      	cbnz	r0, 2a840 <rpc_ip_event_handler+0x6c>
   2a834:	6828      	ldr	r0, [r5, #0]
   2a836:	2800      	cmp	r0, #0
   2a838:	d0ec      	beq.n	2a814 <rpc_ip_event_handler+0x40>
   2a83a:	f007 fcb5 	bl	321a8 <rpc_client_data_free>
   2a83e:	e7e9      	b.n	2a814 <rpc_ip_event_handler+0x40>
   2a840:	f248 030c 	movw	r3, #32780	; 0x800c
   2a844:	429e      	cmp	r6, r3
   2a846:	d823      	bhi.n	2a890 <rpc_ip_event_handler+0xbc>
   2a848:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   2a84c:	d9f2      	bls.n	2a834 <rpc_ip_event_handler+0x60>
   2a84e:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   2a852:	3e01      	subs	r6, #1
   2a854:	2e0b      	cmp	r6, #11
   2a856:	d8ed      	bhi.n	2a834 <rpc_ip_event_handler+0x60>
   2a858:	a301      	add	r3, pc, #4	; (adr r3, 2a860 <rpc_ip_event_handler+0x8c>)
   2a85a:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   2a85e:	bf00      	nop
   2a860:	0002a907 	.word	0x0002a907
   2a864:	0002a923 	.word	0x0002a923
   2a868:	0002a907 	.word	0x0002a907
   2a86c:	0002a907 	.word	0x0002a907
   2a870:	0002a907 	.word	0x0002a907
   2a874:	0002a907 	.word	0x0002a907
   2a878:	0002a907 	.word	0x0002a907
   2a87c:	0002a907 	.word	0x0002a907
   2a880:	0002a8fb 	.word	0x0002a8fb
   2a884:	0002a835 	.word	0x0002a835
   2a888:	0002a835 	.word	0x0002a835
   2a88c:	0002a965 	.word	0x0002a965
   2a890:	f249 0302 	movw	r3, #36866	; 0x9002
   2a894:	429e      	cmp	r6, r3
   2a896:	d069      	beq.n	2a96c <rpc_ip_event_handler+0x198>
   2a898:	d822      	bhi.n	2a8e0 <rpc_ip_event_handler+0x10c>
   2a89a:	f248 0381 	movw	r3, #32897	; 0x8081
   2a89e:	429e      	cmp	r6, r3
   2a8a0:	f000 8099 	beq.w	2a9d6 <rpc_ip_event_handler+0x202>
   2a8a4:	f249 0301 	movw	r3, #36865	; 0x9001
   2a8a8:	429e      	cmp	r6, r3
   2a8aa:	d1c3      	bne.n	2a834 <rpc_ip_event_handler+0x60>
   2a8ac:	2010      	movs	r0, #16
   2a8ae:	f7fa ffc5 	bl	2583c <nrf_modem_os_alloc>
   2a8b2:	4606      	mov	r6, r0
   2a8b4:	2800      	cmp	r0, #0
   2a8b6:	d066      	beq.n	2a986 <rpc_ip_event_handler+0x1b2>
   2a8b8:	2710      	movs	r7, #16
   2a8ba:	2100      	movs	r1, #0
   2a8bc:	463a      	mov	r2, r7
   2a8be:	f009 f9d6 	bl	33c6e <memset>
   2a8c2:	682b      	ldr	r3, [r5, #0]
   2a8c4:	6073      	str	r3, [r6, #4]
   2a8c6:	686b      	ldr	r3, [r5, #4]
   2a8c8:	8133      	strh	r3, [r6, #8]
   2a8ca:	8a6b      	ldrh	r3, [r5, #18]
   2a8cc:	2b04      	cmp	r3, #4
   2a8ce:	d052      	beq.n	2a976 <rpc_ip_event_handler+0x1a2>
   2a8d0:	42bb      	cmp	r3, r7
   2a8d2:	d065      	beq.n	2a9a0 <rpc_ip_event_handler+0x1cc>
   2a8d4:	4620      	mov	r0, r4
   2a8d6:	4631      	mov	r1, r6
   2a8d8:	f007 fd7f 	bl	323da <sock_pkt_append>
   2a8dc:	2000      	movs	r0, #0
   2a8de:	e78a      	b.n	2a7f6 <rpc_ip_event_handler+0x22>
   2a8e0:	f249 0303 	movw	r3, #36867	; 0x9003
   2a8e4:	429e      	cmp	r6, r3
   2a8e6:	d012      	beq.n	2a90e <rpc_ip_event_handler+0x13a>
   2a8e8:	f249 0382 	movw	r3, #36994	; 0x9082
   2a8ec:	429e      	cmp	r6, r3
   2a8ee:	d1a1      	bne.n	2a834 <rpc_ip_event_handler+0x60>
   2a8f0:	4601      	mov	r1, r0
   2a8f2:	4628      	mov	r0, r5
   2a8f4:	f000 facc 	bl	2ae90 <on_tls_handshake_ntf>
   2a8f8:	e77d      	b.n	2a7f6 <rpc_ip_event_handler+0x22>
   2a8fa:	7f03      	ldrb	r3, [r0, #28]
   2a8fc:	f023 0303 	bic.w	r3, r3, #3
   2a900:	f043 0303 	orr.w	r3, r3, #3
   2a904:	7723      	strb	r3, [r4, #28]
   2a906:	4628      	mov	r0, r5
   2a908:	f008 fc23 	bl	33152 <res_forward>
   2a90c:	e773      	b.n	2a7f6 <rpc_ip_event_handler+0x22>
   2a90e:	7f03      	ldrb	r3, [r0, #28]
   2a910:	f043 0302 	orr.w	r3, r3, #2
   2a914:	7703      	strb	r3, [r0, #28]
   2a916:	6928      	ldr	r0, [r5, #16]
   2a918:	2869      	cmp	r0, #105	; 0x69
   2a91a:	d109      	bne.n	2a930 <rpc_ip_event_handler+0x15c>
   2a91c:	2368      	movs	r3, #104	; 0x68
   2a91e:	61a3      	str	r3, [r4, #24]
   2a920:	e778      	b.n	2a814 <rpc_ip_event_handler+0x40>
   2a922:	7f03      	ldrb	r3, [r0, #28]
   2a924:	68ee      	ldr	r6, [r5, #12]
   2a926:	f36f 0382 	bfc	r3, #2, #1
   2a92a:	7703      	strb	r3, [r0, #28]
   2a92c:	6968      	ldr	r0, [r5, #20]
   2a92e:	b118      	cbz	r0, 2a938 <rpc_ip_event_handler+0x164>
   2a930:	f000 fb4c 	bl	2afcc <rpc_error_to_nrf_errno>
   2a934:	61a0      	str	r0, [r4, #24]
   2a936:	e76d      	b.n	2a814 <rpc_ip_event_handler+0x40>
   2a938:	4620      	mov	r0, r4
   2a93a:	f007 fd7d 	bl	32438 <sock_proto_is_secure>
   2a93e:	b918      	cbnz	r0, 2a948 <rpc_ip_event_handler+0x174>
   2a940:	7f23      	ldrb	r3, [r4, #28]
   2a942:	f043 0308 	orr.w	r3, r3, #8
   2a946:	7723      	strb	r3, [r4, #28]
   2a948:	4620      	mov	r0, r4
   2a94a:	f007 fd75 	bl	32438 <sock_proto_is_secure>
   2a94e:	2800      	cmp	r0, #0
   2a950:	f43f af60 	beq.w	2a814 <rpc_ip_event_handler+0x40>
   2a954:	2e00      	cmp	r6, #0
   2a956:	f43f af5d 	beq.w	2a814 <rpc_ip_event_handler+0x40>
   2a95a:	2100      	movs	r1, #0
   2a95c:	4620      	mov	r0, r4
   2a95e:	f000 fab1 	bl	2aec4 <tls_attach>
   2a962:	e757      	b.n	2a814 <rpc_ip_event_handler+0x40>
   2a964:	7f03      	ldrb	r3, [r0, #28]
   2a966:	f36f 1386 	bfc	r3, #6, #1
   2a96a:	e7cb      	b.n	2a904 <rpc_ip_event_handler+0x130>
   2a96c:	7f03      	ldrb	r3, [r0, #28]
   2a96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2a972:	7703      	strb	r3, [r0, #28]
   2a974:	e74e      	b.n	2a814 <rpc_ip_event_handler+0x40>
   2a976:	4638      	mov	r0, r7
   2a978:	f7fa ff60 	bl	2583c <nrf_modem_os_alloc>
   2a97c:	60f0      	str	r0, [r6, #12]
   2a97e:	b920      	cbnz	r0, 2a98a <rpc_ip_event_handler+0x1b6>
   2a980:	4630      	mov	r0, r6
   2a982:	f7fa ff63 	bl	2584c <nrf_modem_os_free>
   2a986:	2002      	movs	r0, #2
   2a988:	e735      	b.n	2a7f6 <rpc_ip_event_handler+0x22>
   2a98a:	2301      	movs	r3, #1
   2a98c:	7007      	strb	r7, [r0, #0]
   2a98e:	7c6a      	ldrb	r2, [r5, #17]
   2a990:	6043      	str	r3, [r0, #4]
   2a992:	7c2b      	ldrb	r3, [r5, #16]
   2a994:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2a998:	8103      	strh	r3, [r0, #8]
   2a99a:	696b      	ldr	r3, [r5, #20]
   2a99c:	60c3      	str	r3, [r0, #12]
   2a99e:	e799      	b.n	2a8d4 <rpc_ip_event_handler+0x100>
   2a9a0:	2024      	movs	r0, #36	; 0x24
   2a9a2:	f7fa ff4b 	bl	2583c <nrf_modem_os_alloc>
   2a9a6:	60f0      	str	r0, [r6, #12]
   2a9a8:	2800      	cmp	r0, #0
   2a9aa:	d0e9      	beq.n	2a980 <rpc_ip_event_handler+0x1ac>
   2a9ac:	2324      	movs	r3, #36	; 0x24
   2a9ae:	7003      	strb	r3, [r0, #0]
   2a9b0:	2302      	movs	r3, #2
   2a9b2:	7c6a      	ldrb	r2, [r5, #17]
   2a9b4:	6043      	str	r3, [r0, #4]
   2a9b6:	7c2b      	ldrb	r3, [r5, #16]
   2a9b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2a9bc:	8103      	strh	r3, [r0, #8]
   2a9be:	f105 0214 	add.w	r2, r5, #20
   2a9c2:	f100 0310 	add.w	r3, r0, #16
   2a9c6:	3524      	adds	r5, #36	; 0x24
   2a9c8:	f852 1b04 	ldr.w	r1, [r2], #4
   2a9cc:	42aa      	cmp	r2, r5
   2a9ce:	f843 1b04 	str.w	r1, [r3], #4
   2a9d2:	d1f9      	bne.n	2a9c8 <rpc_ip_event_handler+0x1f4>
   2a9d4:	e77e      	b.n	2a8d4 <rpc_ip_event_handler+0x100>
   2a9d6:	4601      	mov	r1, r0
   2a9d8:	4628      	mov	r0, r5
   2a9da:	f000 fa45 	bl	2ae68 <on_tls_attach_res>
   2a9de:	e70a      	b.n	2a7f6 <rpc_ip_event_handler+0x22>
   2a9e0:	2001078e 	.word	0x2001078e

0002a9e4 <ip_interface_init>:
   2a9e4:	b508      	push	{r3, lr}
   2a9e6:	f7ff fcaf 	bl	2a348 <sock_init>
   2a9ea:	f7ff fd3f 	bl	2a46c <addrinfo_init>
   2a9ee:	2200      	movs	r2, #0
   2a9f0:	4b04      	ldr	r3, [pc, #16]	; (2aa04 <ip_interface_init+0x20>)
   2a9f2:	4805      	ldr	r0, [pc, #20]	; (2aa08 <ip_interface_init+0x24>)
   2a9f4:	701a      	strb	r2, [r3, #0]
   2a9f6:	2201      	movs	r2, #1
   2a9f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2a9fc:	4611      	mov	r1, r2
   2a9fe:	f7fa bedb 	b.w	257b8 <nrf_modem_os_sem_init>
   2aa02:	bf00      	nop
   2aa04:	2001078e 	.word	0x2001078e
   2aa08:	2000d86c 	.word	0x2000d86c

0002aa0c <nrf_close>:
   2aa0c:	b570      	push	{r4, r5, r6, lr}
   2aa0e:	4605      	mov	r5, r0
   2aa10:	f7ff fcda 	bl	2a3c8 <sock_find>
   2aa14:	4606      	mov	r6, r0
   2aa16:	b930      	cbnz	r0, 2aa26 <nrf_close+0x1a>
   2aa18:	2009      	movs	r0, #9
   2aa1a:	f006 fe3f 	bl	3169c <nrf_modem_os_errno_set>
   2aa1e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2aa22:	4620      	mov	r0, r4
   2aa24:	bd70      	pop	{r4, r5, r6, pc}
   2aa26:	f001 f9eb 	bl	2be00 <nrf_modem_state_is_initialized>
   2aa2a:	b960      	cbnz	r0, 2aa46 <nrf_close+0x3a>
   2aa2c:	2400      	movs	r4, #0
   2aa2e:	4630      	mov	r0, r6
   2aa30:	f007 fd16 	bl	32460 <sock_is_attaching>
   2aa34:	b118      	cbz	r0, 2aa3e <nrf_close+0x32>
   2aa36:	4b0f      	ldr	r3, [pc, #60]	; (2aa74 <nrf_close+0x68>)
   2aa38:	6818      	ldr	r0, [r3, #0]
   2aa3a:	f006 fe37 	bl	316ac <nrf_modem_os_sem_give>
   2aa3e:	4628      	mov	r0, r5
   2aa40:	f7ff fcd4 	bl	2a3ec <_sock_close>
   2aa44:	e7ed      	b.n	2aa22 <nrf_close+0x16>
   2aa46:	2000      	movs	r0, #0
   2aa48:	f007 fb9e 	bl	32188 <rpc_client_request_alloc>
   2aa4c:	4601      	mov	r1, r0
   2aa4e:	b908      	cbnz	r0, 2aa54 <nrf_close+0x48>
   2aa50:	2069      	movs	r0, #105	; 0x69
   2aa52:	e7e2      	b.n	2aa1a <nrf_close+0xe>
   2aa54:	6105      	str	r5, [r0, #16]
   2aa56:	2200      	movs	r2, #0
   2aa58:	f247 0009 	movw	r0, #28681	; 0x7009
   2aa5c:	f000 fac2 	bl	2afe4 <req_forward>
   2aa60:	2800      	cmp	r0, #0
   2aa62:	d0e3      	beq.n	2aa2c <nrf_close+0x20>
   2aa64:	2816      	cmp	r0, #22
   2aa66:	d0e1      	beq.n	2aa2c <nrf_close+0x20>
   2aa68:	f006 fe18 	bl	3169c <nrf_modem_os_errno_set>
   2aa6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2aa70:	e7dd      	b.n	2aa2e <nrf_close+0x22>
   2aa72:	bf00      	nop
   2aa74:	2000d86c 	.word	0x2000d86c

0002aa78 <nrf_sendto>:
   2aa78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2aa7e:	4682      	mov	sl, r0
   2aa80:	4688      	mov	r8, r1
   2aa82:	4617      	mov	r7, r2
   2aa84:	461e      	mov	r6, r3
   2aa86:	f7ff fc9f 	bl	2a3c8 <sock_find>
   2aa8a:	4604      	mov	r4, r0
   2aa8c:	b928      	cbnz	r0, 2aa9a <nrf_sendto+0x22>
   2aa8e:	2009      	movs	r0, #9
   2aa90:	f006 fe04 	bl	3169c <nrf_modem_os_errno_set>
   2aa94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2aa98:	e096      	b.n	2abc8 <nrf_sendto+0x150>
   2aa9a:	f036 0340 	bics.w	r3, r6, #64	; 0x40
   2aa9e:	d001      	beq.n	2aaa4 <nrf_sendto+0x2c>
   2aaa0:	205f      	movs	r0, #95	; 0x5f
   2aaa2:	e7f5      	b.n	2aa90 <nrf_sendto+0x18>
   2aaa4:	f007 fce8 	bl	32478 <sock_is_closed>
   2aaa8:	b108      	cbz	r0, 2aaae <nrf_sendto+0x36>
   2aaaa:	69a0      	ldr	r0, [r4, #24]
   2aaac:	e7f0      	b.n	2aa90 <nrf_sendto+0x18>
   2aaae:	4620      	mov	r0, r4
   2aab0:	2d00      	cmp	r5, #0
   2aab2:	f000 80d2 	beq.w	2ac5a <nrf_sendto+0x1e2>
   2aab6:	f007 fcb0 	bl	3241a <sock_is_stream>
   2aaba:	b9b8      	cbnz	r0, 2aaec <nrf_sendto+0x74>
   2aabc:	4629      	mov	r1, r5
   2aabe:	4620      	mov	r0, r4
   2aac0:	f007 fd7a 	bl	325b8 <sock_sockaddr_fam_is_valid>
   2aac4:	b908      	cbnz	r0, 2aaca <nrf_sendto+0x52>
   2aac6:	206a      	movs	r0, #106	; 0x6a
   2aac8:	e7e2      	b.n	2aa90 <nrf_sendto+0x18>
   2aaca:	4628      	mov	r0, r5
   2aacc:	990d      	ldr	r1, [sp, #52]	; 0x34
   2aace:	f007 fd5f 	bl	32590 <sock_sockaddr_len_is_valid>
   2aad2:	b908      	cbnz	r0, 2aad8 <nrf_sendto+0x60>
   2aad4:	2016      	movs	r0, #22
   2aad6:	e7db      	b.n	2aa90 <nrf_sendto+0x18>
   2aad8:	4620      	mov	r0, r4
   2aada:	f007 fca3 	bl	32424 <sock_is_datagram>
   2aade:	b128      	cbz	r0, 2aaec <nrf_sendto+0x74>
   2aae0:	4620      	mov	r0, r4
   2aae2:	f007 fca9 	bl	32438 <sock_proto_is_secure>
   2aae6:	b108      	cbz	r0, 2aaec <nrf_sendto+0x74>
   2aae8:	207f      	movs	r0, #127	; 0x7f
   2aaea:	e7d1      	b.n	2aa90 <nrf_sendto+0x18>
   2aaec:	4620      	mov	r0, r4
   2aaee:	f007 fd09 	bl	32504 <sock_sndtimeo_ms_get>
   2aaf2:	9000      	str	r0, [sp, #0]
   2aaf4:	4620      	mov	r0, r4
   2aaf6:	f007 fcb7 	bl	32468 <sock_is_nonblock>
   2aafa:	bb18      	cbnz	r0, 2ab44 <nrf_sendto+0xcc>
   2aafc:	f3c6 1980 	ubfx	r9, r6, #6, #1
   2ab00:	4620      	mov	r0, r4
   2ab02:	f007 fc8a 	bl	3241a <sock_is_stream>
   2ab06:	b140      	cbz	r0, 2ab1a <nrf_sendto+0xa2>
   2ab08:	4620      	mov	r0, r4
   2ab0a:	f007 fc95 	bl	32438 <sock_proto_is_secure>
   2ab0e:	b120      	cbz	r0, 2ab1a <nrf_sendto+0xa2>
   2ab10:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
   2ab14:	bf28      	it	cs
   2ab16:	f44f 6700 	movcs.w	r7, #2048	; 0x800
   2ab1a:	4620      	mov	r0, r4
   2ab1c:	f007 fcb7 	bl	3248e <sock_has_flow_control>
   2ab20:	b118      	cbz	r0, 2ab2a <nrf_sendto+0xb2>
   2ab22:	4620      	mov	r0, r4
   2ab24:	f007 fca8 	bl	32478 <sock_is_closed>
   2ab28:	b178      	cbz	r0, 2ab4a <nrf_sendto+0xd2>
   2ab2a:	4638      	mov	r0, r7
   2ab2c:	f007 fb2c 	bl	32188 <rpc_client_request_alloc>
   2ab30:	4683      	mov	fp, r0
   2ab32:	b9b8      	cbnz	r0, 2ab64 <nrf_sendto+0xec>
   2ab34:	4669      	mov	r1, sp
   2ab36:	f7fa fd7d 	bl	25634 <nrf_modem_os_timedwait>
   2ab3a:	b980      	cbnz	r0, 2ab5e <nrf_sendto+0xe6>
   2ab3c:	f1b9 0f00 	cmp.w	r9, #0
   2ab40:	d0f3      	beq.n	2ab2a <nrf_sendto+0xb2>
   2ab42:	e005      	b.n	2ab50 <nrf_sendto+0xd8>
   2ab44:	f04f 0901 	mov.w	r9, #1
   2ab48:	e7da      	b.n	2ab00 <nrf_sendto+0x88>
   2ab4a:	f1b9 0f00 	cmp.w	r9, #0
   2ab4e:	d001      	beq.n	2ab54 <nrf_sendto+0xdc>
   2ab50:	200b      	movs	r0, #11
   2ab52:	e79d      	b.n	2aa90 <nrf_sendto+0x18>
   2ab54:	4669      	mov	r1, sp
   2ab56:	f7fa fd6d 	bl	25634 <nrf_modem_os_timedwait>
   2ab5a:	2800      	cmp	r0, #0
   2ab5c:	d0dd      	beq.n	2ab1a <nrf_sendto+0xa2>
   2ab5e:	f009 f844 	bl	33bea <abs>
   2ab62:	e795      	b.n	2aa90 <nrf_sendto+0x18>
   2ab64:	f8c0 a010 	str.w	sl, [r0, #16]
   2ab68:	f1b8 0f00 	cmp.w	r8, #0
   2ab6c:	d004      	beq.n	2ab78 <nrf_sendto+0x100>
   2ab6e:	463a      	mov	r2, r7
   2ab70:	4641      	mov	r1, r8
   2ab72:	6800      	ldr	r0, [r0, #0]
   2ab74:	f009 f85b 	bl	33c2e <memcpy>
   2ab78:	6b22      	ldr	r2, [r4, #48]	; 0x30
   2ab7a:	b112      	cbz	r2, 2ab82 <nrf_sendto+0x10a>
   2ab7c:	4316      	orrs	r6, r2
   2ab7e:	2200      	movs	r2, #0
   2ab80:	6322      	str	r2, [r4, #48]	; 0x30
   2ab82:	2d00      	cmp	r5, #0
   2ab84:	d044      	beq.n	2ac10 <nrf_sendto+0x198>
   2ab86:	4620      	mov	r0, r4
   2ab88:	f007 fc47 	bl	3241a <sock_is_stream>
   2ab8c:	2800      	cmp	r0, #0
   2ab8e:	d13f      	bne.n	2ac10 <nrf_sendto+0x198>
   2ab90:	2218      	movs	r2, #24
   2ab92:	f88b 2008 	strb.w	r2, [fp, #8]
   2ab96:	686a      	ldr	r2, [r5, #4]
   2ab98:	f88b 0009 	strb.w	r0, [fp, #9]
   2ab9c:	2a01      	cmp	r2, #1
   2ab9e:	f88b 000a 	strb.w	r0, [fp, #10]
   2aba2:	f88b 000b 	strb.w	r0, [fp, #11]
   2aba6:	f8cb 6014 	str.w	r6, [fp, #20]
   2abaa:	d011      	beq.n	2abd0 <nrf_sendto+0x158>
   2abac:	2a02      	cmp	r2, #2
   2abae:	d01b      	beq.n	2abe8 <nrf_sendto+0x170>
   2abb0:	f247 0007 	movw	r0, #28679	; 0x7007
   2abb4:	4659      	mov	r1, fp
   2abb6:	aa01      	add	r2, sp, #4
   2abb8:	f000 fa14 	bl	2afe4 <req_forward>
   2abbc:	4603      	mov	r3, r0
   2abbe:	bbb0      	cbnz	r0, 2ac2e <nrf_sendto+0x1b6>
   2abc0:	9801      	ldr	r0, [sp, #4]
   2abc2:	6984      	ldr	r4, [r0, #24]
   2abc4:	f007 faed 	bl	321a2 <rpc_client_message_free>
   2abc8:	4620      	mov	r0, r4
   2abca:	b003      	add	sp, #12
   2abcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2abd0:	892a      	ldrh	r2, [r5, #8]
   2abd2:	f88b 001b 	strb.w	r0, [fp, #27]
   2abd6:	f8ab 2018 	strh.w	r2, [fp, #24]
   2abda:	2204      	movs	r2, #4
   2abdc:	f88b 201a 	strb.w	r2, [fp, #26]
   2abe0:	68ea      	ldr	r2, [r5, #12]
   2abe2:	f8cb 201c 	str.w	r2, [fp, #28]
   2abe6:	e7e3      	b.n	2abb0 <nrf_sendto+0x138>
   2abe8:	892a      	ldrh	r2, [r5, #8]
   2abea:	f10b 011c 	add.w	r1, fp, #28
   2abee:	f8ab 2018 	strh.w	r2, [fp, #24]
   2abf2:	2210      	movs	r2, #16
   2abf4:	f88b 001b 	strb.w	r0, [fp, #27]
   2abf8:	f88b 201a 	strb.w	r2, [fp, #26]
   2abfc:	f105 0020 	add.w	r0, r5, #32
   2ac00:	18aa      	adds	r2, r5, r2
   2ac02:	f852 cb04 	ldr.w	ip, [r2], #4
   2ac06:	4282      	cmp	r2, r0
   2ac08:	f841 cb04 	str.w	ip, [r1], #4
   2ac0c:	d1f9      	bne.n	2ac02 <nrf_sendto+0x18a>
   2ac0e:	e7cf      	b.n	2abb0 <nrf_sendto+0x138>
   2ac10:	2200      	movs	r2, #0
   2ac12:	2104      	movs	r1, #4
   2ac14:	f247 0006 	movw	r0, #28678	; 0x7006
   2ac18:	f88b 1008 	strb.w	r1, [fp, #8]
   2ac1c:	f88b 2009 	strb.w	r2, [fp, #9]
   2ac20:	f88b 200a 	strb.w	r2, [fp, #10]
   2ac24:	f88b 200b 	strb.w	r2, [fp, #11]
   2ac28:	f8cb 6014 	str.w	r6, [fp, #20]
   2ac2c:	e7c2      	b.n	2abb4 <nrf_sendto+0x13c>
   2ac2e:	280c      	cmp	r0, #12
   2ac30:	dc0e      	bgt.n	2ac50 <nrf_sendto+0x1d8>
   2ac32:	280a      	cmp	r0, #10
   2ac34:	dd0f      	ble.n	2ac56 <nrf_sendto+0x1de>
   2ac36:	4b0f      	ldr	r3, [pc, #60]	; (2ac74 <nrf_sendto+0x1fc>)
   2ac38:	7818      	ldrb	r0, [r3, #0]
   2ac3a:	b920      	cbnz	r0, 2ac46 <nrf_sendto+0x1ce>
   2ac3c:	4669      	mov	r1, sp
   2ac3e:	f7fa fcf9 	bl	25634 <nrf_modem_os_timedwait>
   2ac42:	2800      	cmp	r0, #0
   2ac44:	d18b      	bne.n	2ab5e <nrf_sendto+0xe6>
   2ac46:	f1b9 0f00 	cmp.w	r9, #0
   2ac4a:	f43f af66 	beq.w	2ab1a <nrf_sendto+0xa2>
   2ac4e:	e77f      	b.n	2ab50 <nrf_sendto+0xd8>
   2ac50:	288c      	cmp	r0, #140	; 0x8c
   2ac52:	f43f af1d 	beq.w	2aa90 <nrf_sendto+0x18>
   2ac56:	4618      	mov	r0, r3
   2ac58:	e71a      	b.n	2aa90 <nrf_sendto+0x18>
   2ac5a:	f007 fbe3 	bl	32424 <sock_is_datagram>
   2ac5e:	2800      	cmp	r0, #0
   2ac60:	f43f af44 	beq.w	2aaec <nrf_sendto+0x74>
   2ac64:	4620      	mov	r0, r4
   2ac66:	f007 fbf7 	bl	32458 <sock_is_connected>
   2ac6a:	2800      	cmp	r0, #0
   2ac6c:	f47f af3e 	bne.w	2aaec <nrf_sendto+0x74>
   2ac70:	2079      	movs	r0, #121	; 0x79
   2ac72:	e70d      	b.n	2aa90 <nrf_sendto+0x18>
   2ac74:	2001078e 	.word	0x2001078e

0002ac78 <nrf_setsockopt>:
   2ac78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ac7c:	b085      	sub	sp, #20
   2ac7e:	4680      	mov	r8, r0
   2ac80:	4689      	mov	r9, r1
   2ac82:	4617      	mov	r7, r2
   2ac84:	461d      	mov	r5, r3
   2ac86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2ac88:	f7ff fb9e 	bl	2a3c8 <sock_find>
   2ac8c:	b928      	cbnz	r0, 2ac9a <nrf_setsockopt+0x22>
   2ac8e:	2009      	movs	r0, #9
   2ac90:	f006 fd04 	bl	3169c <nrf_modem_os_errno_set>
   2ac94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2ac98:	e06f      	b.n	2ad7a <nrf_setsockopt+0x102>
   2ac9a:	b915      	cbnz	r5, 2aca2 <nrf_setsockopt+0x2a>
   2ac9c:	b10c      	cbz	r4, 2aca2 <nrf_setsockopt+0x2a>
   2ac9e:	2016      	movs	r0, #22
   2aca0:	e7f6      	b.n	2ac90 <nrf_setsockopt+0x18>
   2aca2:	f5b9 7f8d 	cmp.w	r9, #282	; 0x11a
   2aca6:	d12e      	bne.n	2ad06 <nrf_setsockopt+0x8e>
   2aca8:	1e7b      	subs	r3, r7, #1
   2acaa:	2b0d      	cmp	r3, #13
   2acac:	d82b      	bhi.n	2ad06 <nrf_setsockopt+0x8e>
   2acae:	e8df f003 	tbb	[pc, r3]
   2acb2:	230e      	.short	0x230e
   2acb4:	071c2aa9 	.word	0x071c2aa9
   2acb8:	2a2a2a2a 	.word	0x2a2a2a2a
   2acbc:	a9a9152a 	.word	0xa9a9152a
   2acc0:	4622      	mov	r2, r4
   2acc2:	4629      	mov	r1, r5
   2acc4:	b005      	add	sp, #20
   2acc6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2acca:	f008 b8c3 	b.w	32e54 <tls_setopt_role>
   2acce:	4622      	mov	r2, r4
   2acd0:	4629      	mov	r1, r5
   2acd2:	b005      	add	sp, #20
   2acd4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2acd8:	f008 b8d2 	b.w	32e80 <tls_setopt_taglist>
   2acdc:	4622      	mov	r2, r4
   2acde:	4629      	mov	r1, r5
   2ace0:	b005      	add	sp, #20
   2ace2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ace6:	f008 b8de 	b.w	32ea6 <tls_setopt_sess_cache>
   2acea:	4622      	mov	r2, r4
   2acec:	4629      	mov	r1, r5
   2acee:	b005      	add	sp, #20
   2acf0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2acf4:	f008 b8e9 	b.w	32eca <tls_setopt_peer_verify>
   2acf8:	4622      	mov	r2, r4
   2acfa:	4629      	mov	r1, r5
   2acfc:	b005      	add	sp, #20
   2acfe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2ad02:	f008 b8f1 	b.w	32ee8 <tls_setopt_hostname>
   2ad06:	2f37      	cmp	r7, #55	; 0x37
   2ad08:	dc07      	bgt.n	2ad1a <nrf_setsockopt+0xa2>
   2ad0a:	2f31      	cmp	r7, #49	; 0x31
   2ad0c:	dc07      	bgt.n	2ad1e <nrf_setsockopt+0xa6>
   2ad0e:	2f02      	cmp	r7, #2
   2ad10:	d078      	beq.n	2ae04 <nrf_setsockopt+0x18c>
   2ad12:	f1a7 0314 	sub.w	r3, r7, #20
   2ad16:	2b0c      	cmp	r3, #12
   2ad18:	d90a      	bls.n	2ad30 <nrf_setsockopt+0xb8>
   2ad1a:	206d      	movs	r0, #109	; 0x6d
   2ad1c:	e7b8      	b.n	2ac90 <nrf_setsockopt+0x18>
   2ad1e:	f1a7 0333 	sub.w	r3, r7, #51	; 0x33
   2ad22:	2b04      	cmp	r3, #4
   2ad24:	d849      	bhi.n	2adba <nrf_setsockopt+0x142>
   2ad26:	e8df f003 	tbb	[pc, r3]
   2ad2a:	3f3b      	.short	0x3f3b
   2ad2c:	4542      	.short	0x4542
   2ad2e:	6d          	.byte	0x6d
   2ad2f:	00          	.byte	0x00
   2ad30:	2b0c      	cmp	r3, #12
   2ad32:	d8f2      	bhi.n	2ad1a <nrf_setsockopt+0xa2>
   2ad34:	a201      	add	r2, pc, #4	; (adr r2, 2ad3c <nrf_setsockopt+0xc4>)
   2ad36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2ad3a:	bf00      	nop
   2ad3c:	0002ad71 	.word	0x0002ad71
   2ad40:	0002ad83 	.word	0x0002ad83
   2ad44:	0002ad1b 	.word	0x0002ad1b
   2ad48:	0002ad1b 	.word	0x0002ad1b
   2ad4c:	0002ad1b 	.word	0x0002ad1b
   2ad50:	0002add5 	.word	0x0002add5
   2ad54:	0002ad1b 	.word	0x0002ad1b
   2ad58:	0002ad1b 	.word	0x0002ad1b
   2ad5c:	0002ad1b 	.word	0x0002ad1b
   2ad60:	0002ad1b 	.word	0x0002ad1b
   2ad64:	0002ae05 	.word	0x0002ae05
   2ad68:	0002ae05 	.word	0x0002ae05
   2ad6c:	0002ae05 	.word	0x0002ae05
   2ad70:	f100 0320 	add.w	r3, r0, #32
   2ad74:	b954      	cbnz	r4, 2ad8c <nrf_setsockopt+0x114>
   2ad76:	6204      	str	r4, [r0, #32]
   2ad78:	605c      	str	r4, [r3, #4]
   2ad7a:	4620      	mov	r0, r4
   2ad7c:	b005      	add	sp, #20
   2ad7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2ad82:	f100 0328 	add.w	r3, r0, #40	; 0x28
   2ad86:	b90c      	cbnz	r4, 2ad8c <nrf_setsockopt+0x114>
   2ad88:	6284      	str	r4, [r0, #40]	; 0x28
   2ad8a:	e7f5      	b.n	2ad78 <nrf_setsockopt+0x100>
   2ad8c:	2c08      	cmp	r4, #8
   2ad8e:	4622      	mov	r2, r4
   2ad90:	4629      	mov	r1, r5
   2ad92:	bf28      	it	cs
   2ad94:	2208      	movcs	r2, #8
   2ad96:	4618      	mov	r0, r3
   2ad98:	f008 ff49 	bl	33c2e <memcpy>
   2ad9c:	2400      	movs	r4, #0
   2ad9e:	e7ec      	b.n	2ad7a <nrf_setsockopt+0x102>
   2ada0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   2ada4:	6303      	str	r3, [r0, #48]	; 0x30
   2ada6:	e7f9      	b.n	2ad9c <nrf_setsockopt+0x124>
   2ada8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2adac:	e7fa      	b.n	2ada4 <nrf_setsockopt+0x12c>
   2adae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   2adb2:	e7f7      	b.n	2ada4 <nrf_setsockopt+0x12c>
   2adb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2adb8:	e7f4      	b.n	2ada4 <nrf_setsockopt+0x12c>
   2adba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   2adbe:	6303      	str	r3, [r0, #48]	; 0x30
   2adc0:	2300      	movs	r3, #0
   2adc2:	4640      	mov	r0, r8
   2adc4:	461a      	mov	r2, r3
   2adc6:	4619      	mov	r1, r3
   2adc8:	e9cd 3300 	strd	r3, r3, [sp]
   2adcc:	f7ff fe54 	bl	2aa78 <nrf_sendto>
   2add0:	4604      	mov	r4, r0
   2add2:	e7d2      	b.n	2ad7a <nrf_setsockopt+0x102>
   2add4:	2d00      	cmp	r5, #0
   2add6:	f43f af62 	beq.w	2ac9e <nrf_setsockopt+0x26>
   2adda:	4822      	ldr	r0, [pc, #136]	; (2ae64 <nrf_setsockopt+0x1ec>)
   2addc:	f7f2 f960 	bl	1d0a0 <strlen>
   2ade0:	4920      	ldr	r1, [pc, #128]	; (2ae64 <nrf_setsockopt+0x1ec>)
   2ade2:	4602      	mov	r2, r0
   2ade4:	4628      	mov	r0, r5
   2ade6:	f008 ff12 	bl	33c0e <memcmp>
   2adea:	4604      	mov	r4, r0
   2adec:	b988      	cbnz	r0, 2ae12 <nrf_setsockopt+0x19a>
   2adee:	481d      	ldr	r0, [pc, #116]	; (2ae64 <nrf_setsockopt+0x1ec>)
   2adf0:	f7f2 f956 	bl	1d0a0 <strlen>
   2adf4:	220a      	movs	r2, #10
   2adf6:	4621      	mov	r1, r4
   2adf8:	4428      	add	r0, r5
   2adfa:	f003 fa0d 	bl	2e218 <strtoul>
   2adfe:	2404      	movs	r4, #4
   2ae00:	9003      	str	r0, [sp, #12]
   2ae02:	ad03      	add	r5, sp, #12
   2ae04:	4620      	mov	r0, r4
   2ae06:	f007 f9bf 	bl	32188 <rpc_client_request_alloc>
   2ae0a:	4606      	mov	r6, r0
   2ae0c:	b928      	cbnz	r0, 2ae1a <nrf_setsockopt+0x1a2>
   2ae0e:	2069      	movs	r0, #105	; 0x69
   2ae10:	e73e      	b.n	2ac90 <nrf_setsockopt+0x18>
   2ae12:	220a      	movs	r2, #10
   2ae14:	2100      	movs	r1, #0
   2ae16:	4628      	mov	r0, r5
   2ae18:	e7ef      	b.n	2adfa <nrf_setsockopt+0x182>
   2ae1a:	2308      	movs	r3, #8
   2ae1c:	f8c0 8010 	str.w	r8, [r0, #16]
   2ae20:	f04f 0800 	mov.w	r8, #0
   2ae24:	7203      	strb	r3, [r0, #8]
   2ae26:	f880 8009 	strb.w	r8, [r0, #9]
   2ae2a:	f880 800a 	strb.w	r8, [r0, #10]
   2ae2e:	f880 800b 	strb.w	r8, [r0, #11]
   2ae32:	4648      	mov	r0, r9
   2ae34:	f008 f954 	bl	330e0 <nrf_sol_to_rpc_sol>
   2ae38:	6170      	str	r0, [r6, #20]
   2ae3a:	4638      	mov	r0, r7
   2ae3c:	f000 f8ba 	bl	2afb4 <nrf_so_to_rpc_so>
   2ae40:	4622      	mov	r2, r4
   2ae42:	4629      	mov	r1, r5
   2ae44:	61b0      	str	r0, [r6, #24]
   2ae46:	6830      	ldr	r0, [r6, #0]
   2ae48:	f008 fef1 	bl	33c2e <memcpy>
   2ae4c:	6074      	str	r4, [r6, #4]
   2ae4e:	4642      	mov	r2, r8
   2ae50:	4631      	mov	r1, r6
   2ae52:	f247 0003 	movw	r0, #28675	; 0x7003
   2ae56:	f000 f8c5 	bl	2afe4 <req_forward>
   2ae5a:	4604      	mov	r4, r0
   2ae5c:	2800      	cmp	r0, #0
   2ae5e:	d08c      	beq.n	2ad7a <nrf_setsockopt+0x102>
   2ae60:	e716      	b.n	2ac90 <nrf_setsockopt+0x18>
   2ae62:	bf00      	nop
   2ae64:	000398f1 	.word	0x000398f1

0002ae68 <on_tls_attach_res>:
   2ae68:	b510      	push	{r4, lr}
   2ae6a:	6940      	ldr	r0, [r0, #20]
   2ae6c:	460c      	mov	r4, r1
   2ae6e:	b150      	cbz	r0, 2ae86 <on_tls_attach_res+0x1e>
   2ae70:	7f0b      	ldrb	r3, [r1, #28]
   2ae72:	f36f 1304 	bfc	r3, #4, #1
   2ae76:	770b      	strb	r3, [r1, #28]
   2ae78:	f000 f8a8 	bl	2afcc <rpc_error_to_nrf_errno>
   2ae7c:	4b03      	ldr	r3, [pc, #12]	; (2ae8c <on_tls_attach_res+0x24>)
   2ae7e:	61a0      	str	r0, [r4, #24]
   2ae80:	6818      	ldr	r0, [r3, #0]
   2ae82:	f006 fc13 	bl	316ac <nrf_modem_os_sem_give>
   2ae86:	2000      	movs	r0, #0
   2ae88:	bd10      	pop	{r4, pc}
   2ae8a:	bf00      	nop
   2ae8c:	2000d86c 	.word	0x2000d86c

0002ae90 <on_tls_handshake_ntf>:
   2ae90:	b510      	push	{r4, lr}
   2ae92:	7f0b      	ldrb	r3, [r1, #28]
   2ae94:	460c      	mov	r4, r1
   2ae96:	f36f 1304 	bfc	r3, #4, #1
   2ae9a:	770b      	strb	r3, [r1, #28]
   2ae9c:	6900      	ldr	r0, [r0, #16]
   2ae9e:	b958      	cbnz	r0, 2aeb8 <on_tls_handshake_ntf+0x28>
   2aea0:	b2db      	uxtb	r3, r3
   2aea2:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   2aea6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   2aeaa:	770b      	strb	r3, [r1, #28]
   2aeac:	4b04      	ldr	r3, [pc, #16]	; (2aec0 <on_tls_handshake_ntf+0x30>)
   2aeae:	6818      	ldr	r0, [r3, #0]
   2aeb0:	f006 fbfc 	bl	316ac <nrf_modem_os_sem_give>
   2aeb4:	2000      	movs	r0, #0
   2aeb6:	bd10      	pop	{r4, pc}
   2aeb8:	f000 f888 	bl	2afcc <rpc_error_to_nrf_errno>
   2aebc:	61a0      	str	r0, [r4, #24]
   2aebe:	e7f5      	b.n	2aeac <on_tls_handshake_ntf+0x1c>
   2aec0:	2000d86c 	.word	0x2000d86c

0002aec4 <tls_attach>:
   2aec4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2aec8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 2afa0 <tls_attach+0xdc>
   2aecc:	4605      	mov	r5, r0
   2aece:	f8d8 0000 	ldr.w	r0, [r8]
   2aed2:	9101      	str	r1, [sp, #4]
   2aed4:	f006 fbec 	bl	316b0 <nrf_modem_os_sem_take>
   2aed8:	4607      	mov	r7, r0
   2aeda:	b120      	cbz	r0, 2aee6 <tls_attach+0x22>
   2aedc:	2310      	movs	r3, #16
   2aede:	61ab      	str	r3, [r5, #24]
   2aee0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2aee4:	e041      	b.n	2af6a <tls_attach+0xa6>
   2aee6:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   2aee8:	b1a8      	cbz	r0, 2af16 <tls_attach+0x52>
   2aeea:	f7f2 f8d9 	bl	1d0a0 <strlen>
   2aeee:	1c46      	adds	r6, r0, #1
   2aef0:	4630      	mov	r0, r6
   2aef2:	f007 f949 	bl	32188 <rpc_client_request_alloc>
   2aef6:	4604      	mov	r4, r0
   2aef8:	b978      	cbnz	r0, 2af1a <tls_attach+0x56>
   2aefa:	4628      	mov	r0, r5
   2aefc:	f007 fab4 	bl	32468 <sock_is_nonblock>
   2af00:	b108      	cbz	r0, 2af06 <tls_attach+0x42>
   2af02:	2369      	movs	r3, #105	; 0x69
   2af04:	61ab      	str	r3, [r5, #24]
   2af06:	f8d8 0000 	ldr.w	r0, [r8]
   2af0a:	f006 fbcf 	bl	316ac <nrf_modem_os_sem_give>
   2af0e:	2069      	movs	r0, #105	; 0x69
   2af10:	f006 fbc4 	bl	3169c <nrf_modem_os_errno_set>
   2af14:	e7e4      	b.n	2aee0 <tls_attach+0x1c>
   2af16:	463e      	mov	r6, r7
   2af18:	e7ea      	b.n	2aef0 <tls_attach+0x2c>
   2af1a:	682b      	ldr	r3, [r5, #0]
   2af1c:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   2af20:	6103      	str	r3, [r0, #16]
   2af22:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   2af26:	3014      	adds	r0, #20
   2af28:	3201      	adds	r2, #1
   2af2a:	0092      	lsls	r2, r2, #2
   2af2c:	f840 2c0c 	str.w	r2, [r0, #-12]
   2af30:	f008 fe7d 	bl	33c2e <memcpy>
   2af34:	b1ee      	cbz	r6, 2af72 <tls_attach+0xae>
   2af36:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   2af38:	6820      	ldr	r0, [r4, #0]
   2af3a:	f009 f83a 	bl	33fb2 <strcpy>
   2af3e:	6066      	str	r6, [r4, #4]
   2af40:	7f2b      	ldrb	r3, [r5, #28]
   2af42:	2004      	movs	r0, #4
   2af44:	f043 0310 	orr.w	r3, r3, #16
   2af48:	4622      	mov	r2, r4
   2af4a:	f247 0181 	movw	r1, #28801	; 0x7081
   2af4e:	772b      	strb	r3, [r5, #28]
   2af50:	f007 f920 	bl	32194 <rpc_client_request_send>
   2af54:	4628      	mov	r0, r5
   2af56:	f007 fa87 	bl	32468 <sock_is_nonblock>
   2af5a:	b930      	cbnz	r0, 2af6a <tls_attach+0xa6>
   2af5c:	4628      	mov	r0, r5
   2af5e:	f007 fa7f 	bl	32460 <sock_is_attaching>
   2af62:	b978      	cbnz	r0, 2af84 <tls_attach+0xc0>
   2af64:	69a8      	ldr	r0, [r5, #24]
   2af66:	2800      	cmp	r0, #0
   2af68:	d1d2      	bne.n	2af10 <tls_attach+0x4c>
   2af6a:	4638      	mov	r0, r7
   2af6c:	b002      	add	sp, #8
   2af6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2af72:	7026      	strb	r6, [r4, #0]
   2af74:	7066      	strb	r6, [r4, #1]
   2af76:	70a6      	strb	r6, [r4, #2]
   2af78:	70e6      	strb	r6, [r4, #3]
   2af7a:	7126      	strb	r6, [r4, #4]
   2af7c:	7166      	strb	r6, [r4, #5]
   2af7e:	71a6      	strb	r6, [r4, #6]
   2af80:	71e6      	strb	r6, [r4, #7]
   2af82:	e7dd      	b.n	2af40 <tls_attach+0x7c>
   2af84:	2000      	movs	r0, #0
   2af86:	a901      	add	r1, sp, #4
   2af88:	f7fa fb54 	bl	25634 <nrf_modem_os_timedwait>
   2af8c:	f110 0f0b 	cmn.w	r0, #11
   2af90:	d004      	beq.n	2af9c <tls_attach+0xd8>
   2af92:	2800      	cmp	r0, #0
   2af94:	d0e2      	beq.n	2af5c <tls_attach+0x98>
   2af96:	f008 fe28 	bl	33bea <abs>
   2af9a:	e7b9      	b.n	2af10 <tls_attach+0x4c>
   2af9c:	2074      	movs	r0, #116	; 0x74
   2af9e:	e7b7      	b.n	2af10 <tls_attach+0x4c>
   2afa0:	2000d86c 	.word	0x2000d86c

0002afa4 <nrf_af_to_rpc_af>:
   2afa4:	2803      	cmp	r0, #3
   2afa6:	bf9c      	itt	ls
   2afa8:	4b01      	ldrls	r3, [pc, #4]	; (2afb0 <nrf_af_to_rpc_af+0xc>)
   2afaa:	5618      	ldrsbls	r0, [r3, r0]
   2afac:	4770      	bx	lr
   2afae:	bf00      	nop
   2afb0:	00039e4e 	.word	0x00039e4e

0002afb4 <nrf_so_to_rpc_so>:
   2afb4:	3802      	subs	r0, #2
   2afb6:	2835      	cmp	r0, #53	; 0x35
   2afb8:	bf9a      	itte	ls
   2afba:	4b03      	ldrls	r3, [pc, #12]	; (2afc8 <nrf_so_to_rpc_so+0x14>)
   2afbc:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   2afc0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   2afc4:	4770      	bx	lr
   2afc6:	bf00      	nop
   2afc8:	000350cc 	.word	0x000350cc

0002afcc <rpc_error_to_nrf_errno>:
   2afcc:	286c      	cmp	r0, #108	; 0x6c
   2afce:	bf9a      	itte	ls
   2afd0:	4b02      	ldrls	r3, [pc, #8]	; (2afdc <rpc_error_to_nrf_errno+0x10>)
   2afd2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
   2afd6:	4802      	ldrhi	r0, [pc, #8]	; (2afe0 <rpc_error_to_nrf_errno+0x14>)
   2afd8:	4770      	bx	lr
   2afda:	bf00      	nop
   2afdc:	000351a4 	.word	0x000351a4
   2afe0:	baadbaad 	.word	0xbaadbaad

0002afe4 <req_forward>:
   2afe4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2afe6:	4616      	mov	r6, r2
   2afe8:	b9aa      	cbnz	r2, 2b016 <req_forward+0x32>
   2afea:	ad01      	add	r5, sp, #4
   2afec:	2300      	movs	r3, #0
   2afee:	460a      	mov	r2, r1
   2aff0:	602b      	str	r3, [r5, #0]
   2aff2:	60cd      	str	r5, [r1, #12]
   2aff4:	b281      	uxth	r1, r0
   2aff6:	2004      	movs	r0, #4
   2aff8:	f007 f8cc 	bl	32194 <rpc_client_request_send>
   2affc:	4c0c      	ldr	r4, [pc, #48]	; (2b030 <req_forward+0x4c>)
   2affe:	6828      	ldr	r0, [r5, #0]
   2b000:	b158      	cbz	r0, 2b01a <req_forward+0x36>
   2b002:	6940      	ldr	r0, [r0, #20]
   2b004:	f7ff ffe2 	bl	2afcc <rpc_error_to_nrf_errno>
   2b008:	4604      	mov	r4, r0
   2b00a:	b106      	cbz	r6, 2b00e <req_forward+0x2a>
   2b00c:	b168      	cbz	r0, 2b02a <req_forward+0x46>
   2b00e:	6828      	ldr	r0, [r5, #0]
   2b010:	f007 f8c7 	bl	321a2 <rpc_client_message_free>
   2b014:	e009      	b.n	2b02a <req_forward+0x46>
   2b016:	4615      	mov	r5, r2
   2b018:	e7e8      	b.n	2afec <req_forward+0x8>
   2b01a:	4621      	mov	r1, r4
   2b01c:	f7fa fb0a 	bl	25634 <nrf_modem_os_timedwait>
   2b020:	2800      	cmp	r0, #0
   2b022:	d0ec      	beq.n	2affe <req_forward+0x1a>
   2b024:	f008 fde1 	bl	33bea <abs>
   2b028:	4604      	mov	r4, r0
   2b02a:	4620      	mov	r0, r4
   2b02c:	b002      	add	sp, #8
   2b02e:	bd70      	pop	{r4, r5, r6, pc}
   2b030:	2000c658 	.word	0x2000c658

0002b034 <at_cmd_send>:
   2b034:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b036:	4605      	mov	r5, r0
   2b038:	b085      	sub	sp, #20
   2b03a:	2000      	movs	r0, #0
   2b03c:	460f      	mov	r7, r1
   2b03e:	9201      	str	r2, [sp, #4]
   2b040:	461e      	mov	r6, r3
   2b042:	f007 f8a1 	bl	32188 <rpc_client_request_alloc>
   2b046:	9901      	ldr	r1, [sp, #4]
   2b048:	4602      	mov	r2, r0
   2b04a:	b930      	cbnz	r0, 2b05a <at_cmd_send+0x26>
   2b04c:	b115      	cbz	r5, 2b054 <at_cmd_send+0x20>
   2b04e:	4628      	mov	r0, r5
   2b050:	f007 f883 	bl	3215a <rpc_transport_local_data_free>
   2b054:	f06f 000b 	mvn.w	r0, #11
   2b058:	e020      	b.n	2b09c <at_cmd_send+0x68>
   2b05a:	f06f 0358 	mvn.w	r3, #88	; 0x58
   2b05e:	2400      	movs	r4, #0
   2b060:	7303      	strb	r3, [r0, #12]
   2b062:	2304      	movs	r3, #4
   2b064:	6005      	str	r5, [r0, #0]
   2b066:	4d0e      	ldr	r5, [pc, #56]	; (2b0a0 <at_cmd_send+0x6c>)
   2b068:	7203      	strb	r3, [r0, #8]
   2b06a:	7344      	strb	r4, [r0, #13]
   2b06c:	7384      	strb	r4, [r0, #14]
   2b06e:	73c4      	strb	r4, [r0, #15]
   2b070:	7244      	strb	r4, [r0, #9]
   2b072:	7284      	strb	r4, [r0, #10]
   2b074:	72c4      	strb	r4, [r0, #11]
   2b076:	6047      	str	r7, [r0, #4]
   2b078:	2003      	movs	r0, #3
   2b07a:	702c      	strb	r4, [r5, #0]
   2b07c:	f007 f88a 	bl	32194 <rpc_client_request_send>
   2b080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b084:	9303      	str	r3, [sp, #12]
   2b086:	782b      	ldrb	r3, [r5, #0]
   2b088:	42b3      	cmp	r3, r6
   2b08a:	d101      	bne.n	2b090 <at_cmd_send+0x5c>
   2b08c:	2000      	movs	r0, #0
   2b08e:	e005      	b.n	2b09c <at_cmd_send+0x68>
   2b090:	2000      	movs	r0, #0
   2b092:	a903      	add	r1, sp, #12
   2b094:	f7fa face 	bl	25634 <nrf_modem_os_timedwait>
   2b098:	2800      	cmp	r0, #0
   2b09a:	d0f4      	beq.n	2b086 <at_cmd_send+0x52>
   2b09c:	b005      	add	sp, #20
   2b09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b0a0:	2001078f 	.word	0x2001078f

0002b0a4 <at_response_match>:
   2b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b0a6:	4605      	mov	r5, r0
   2b0a8:	2400      	movs	r4, #0
   2b0aa:	4f0f      	ldr	r7, [pc, #60]	; (2b0e8 <at_response_match+0x44>)
   2b0ac:	f857 6b04 	ldr.w	r6, [r7], #4
   2b0b0:	4628      	mov	r0, r5
   2b0b2:	4631      	mov	r1, r6
   2b0b4:	f008 ffb8 	bl	34028 <strstr>
   2b0b8:	b928      	cbnz	r0, 2b0c6 <at_response_match+0x22>
   2b0ba:	3401      	adds	r4, #1
   2b0bc:	2c04      	cmp	r4, #4
   2b0be:	d1f5      	bne.n	2b0ac <at_response_match+0x8>
   2b0c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   2b0c4:	e00d      	b.n	2b0e2 <at_response_match+0x3e>
   2b0c6:	b16c      	cbz	r4, 2b0e4 <at_response_match+0x40>
   2b0c8:	1ea3      	subs	r3, r4, #2
   2b0ca:	2b01      	cmp	r3, #1
   2b0cc:	d8f8      	bhi.n	2b0c0 <at_response_match+0x1c>
   2b0ce:	4630      	mov	r0, r6
   2b0d0:	f7f1 ffe6 	bl	1d0a0 <strlen>
   2b0d4:	220a      	movs	r2, #10
   2b0d6:	2100      	movs	r1, #0
   2b0d8:	4428      	add	r0, r5
   2b0da:	f002 ff81 	bl	2dfe0 <strtol>
   2b0de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
   2b0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b0e4:	4620      	mov	r0, r4
   2b0e6:	e7fc      	b.n	2b0e2 <at_response_match+0x3e>
   2b0e8:	00035358 	.word	0x00035358

0002b0ec <at_vsprintf>:
   2b0ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b0ee:	4613      	mov	r3, r2
   2b0f0:	4607      	mov	r7, r0
   2b0f2:	9201      	str	r2, [sp, #4]
   2b0f4:	460e      	mov	r6, r1
   2b0f6:	4615      	mov	r5, r2
   2b0f8:	480b      	ldr	r0, [pc, #44]	; (2b128 <at_vsprintf+0x3c>)
   2b0fa:	460a      	mov	r2, r1
   2b0fc:	2100      	movs	r1, #0
   2b0fe:	f003 f895 	bl	2e22c <vsniprintf>
   2b102:	1c44      	adds	r4, r0, #1
   2b104:	4620      	mov	r0, r4
   2b106:	f007 f826 	bl	32156 <rpc_transport_data_alloc>
   2b10a:	6038      	str	r0, [r7, #0]
   2b10c:	b140      	cbz	r0, 2b120 <at_vsprintf+0x34>
   2b10e:	462b      	mov	r3, r5
   2b110:	4632      	mov	r2, r6
   2b112:	4621      	mov	r1, r4
   2b114:	9501      	str	r5, [sp, #4]
   2b116:	f003 f889 	bl	2e22c <vsniprintf>
   2b11a:	4620      	mov	r0, r4
   2b11c:	b003      	add	sp, #12
   2b11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2b120:	f06f 000b 	mvn.w	r0, #11
   2b124:	e7fa      	b.n	2b11c <at_vsprintf+0x30>
   2b126:	bf00      	nop
   2b128:	00034b6c 	.word	0x00034b6c

0002b12c <nrf_modem_at_init>:
   2b12c:	2201      	movs	r2, #1
   2b12e:	b510      	push	{r4, lr}
   2b130:	4611      	mov	r1, r2
   2b132:	4805      	ldr	r0, [pc, #20]	; (2b148 <nrf_modem_at_init+0x1c>)
   2b134:	f7fa fb40 	bl	257b8 <nrf_modem_os_sem_init>
   2b138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2b13c:	2100      	movs	r1, #0
   2b13e:	2301      	movs	r3, #1
   2b140:	2205      	movs	r2, #5
   2b142:	4608      	mov	r0, r1
   2b144:	f7ff bf76 	b.w	2b034 <at_cmd_send>
   2b148:	2000d870 	.word	0x2000d870

0002b14c <nrf_modem_at_notif_handler_set>:
   2b14c:	4b01      	ldr	r3, [pc, #4]	; (2b154 <nrf_modem_at_notif_handler_set+0x8>)
   2b14e:	6018      	str	r0, [r3, #0]
   2b150:	2000      	movs	r0, #0
   2b152:	4770      	bx	lr
   2b154:	2000d87c 	.word	0x2000d87c

0002b158 <nrf_modem_at_printf>:
   2b158:	b40f      	push	{r0, r1, r2, r3}
   2b15a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b15c:	9c06      	ldr	r4, [sp, #24]
   2b15e:	f000 fe4f 	bl	2be00 <nrf_modem_state_is_initialized>
   2b162:	2800      	cmp	r0, #0
   2b164:	d032      	beq.n	2b1cc <nrf_modem_at_printf+0x74>
   2b166:	2c00      	cmp	r4, #0
   2b168:	d033      	beq.n	2b1d2 <nrf_modem_at_printf+0x7a>
   2b16a:	4621      	mov	r1, r4
   2b16c:	aa07      	add	r2, sp, #28
   2b16e:	a801      	add	r0, sp, #4
   2b170:	9200      	str	r2, [sp, #0]
   2b172:	f7ff ffbb 	bl	2b0ec <at_vsprintf>
   2b176:	9b01      	ldr	r3, [sp, #4]
   2b178:	4604      	mov	r4, r0
   2b17a:	b36b      	cbz	r3, 2b1d8 <nrf_modem_at_printf+0x80>
   2b17c:	4e18      	ldr	r6, [pc, #96]	; (2b1e0 <nrf_modem_at_printf+0x88>)
   2b17e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b182:	6830      	ldr	r0, [r6, #0]
   2b184:	f006 fa94 	bl	316b0 <nrf_modem_os_sem_take>
   2b188:	4621      	mov	r1, r4
   2b18a:	2302      	movs	r3, #2
   2b18c:	2201      	movs	r2, #1
   2b18e:	9801      	ldr	r0, [sp, #4]
   2b190:	f7ff ff50 	bl	2b034 <at_cmd_send>
   2b194:	4604      	mov	r4, r0
   2b196:	b140      	cbz	r0, 2b1aa <nrf_modem_at_printf+0x52>
   2b198:	6830      	ldr	r0, [r6, #0]
   2b19a:	f006 fa87 	bl	316ac <nrf_modem_os_sem_give>
   2b19e:	4620      	mov	r0, r4
   2b1a0:	b002      	add	sp, #8
   2b1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2b1a6:	b004      	add	sp, #16
   2b1a8:	4770      	bx	lr
   2b1aa:	4d0e      	ldr	r5, [pc, #56]	; (2b1e4 <nrf_modem_at_printf+0x8c>)
   2b1ac:	682b      	ldr	r3, [r5, #0]
   2b1ae:	6818      	ldr	r0, [r3, #0]
   2b1b0:	f7ff ff78 	bl	2b0a4 <at_response_match>
   2b1b4:	4604      	mov	r4, r0
   2b1b6:	6830      	ldr	r0, [r6, #0]
   2b1b8:	f006 fa78 	bl	316ac <nrf_modem_os_sem_give>
   2b1bc:	682b      	ldr	r3, [r5, #0]
   2b1be:	6818      	ldr	r0, [r3, #0]
   2b1c0:	f006 fff2 	bl	321a8 <rpc_client_data_free>
   2b1c4:	6828      	ldr	r0, [r5, #0]
   2b1c6:	f006 ffec 	bl	321a2 <rpc_client_message_free>
   2b1ca:	e7e8      	b.n	2b19e <nrf_modem_at_printf+0x46>
   2b1cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2b1d0:	e7e5      	b.n	2b19e <nrf_modem_at_printf+0x46>
   2b1d2:	f06f 040d 	mvn.w	r4, #13
   2b1d6:	e7e2      	b.n	2b19e <nrf_modem_at_printf+0x46>
   2b1d8:	f06f 040b 	mvn.w	r4, #11
   2b1dc:	e7df      	b.n	2b19e <nrf_modem_at_printf+0x46>
   2b1de:	bf00      	nop
   2b1e0:	2000d870 	.word	0x2000d870
   2b1e4:	2000d880 	.word	0x2000d880

0002b1e8 <nrf_modem_at_cmd>:
   2b1e8:	b40c      	push	{r2, r3}
   2b1ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b1ee:	b085      	sub	sp, #20
   2b1f0:	4606      	mov	r6, r0
   2b1f2:	460d      	mov	r5, r1
   2b1f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   2b1f6:	f000 fe03 	bl	2be00 <nrf_modem_state_is_initialized>
   2b1fa:	2800      	cmp	r0, #0
   2b1fc:	d07b      	beq.n	2b2f6 <nrf_modem_at_cmd+0x10e>
   2b1fe:	2e00      	cmp	r6, #0
   2b200:	d07c      	beq.n	2b2fc <nrf_modem_at_cmd+0x114>
   2b202:	2c00      	cmp	r4, #0
   2b204:	d07a      	beq.n	2b2fc <nrf_modem_at_cmd+0x114>
   2b206:	2d00      	cmp	r5, #0
   2b208:	d07b      	beq.n	2b302 <nrf_modem_at_cmd+0x11a>
   2b20a:	aa0f      	add	r2, sp, #60	; 0x3c
   2b20c:	4621      	mov	r1, r4
   2b20e:	a803      	add	r0, sp, #12
   2b210:	9202      	str	r2, [sp, #8]
   2b212:	f7ff ff6b 	bl	2b0ec <at_vsprintf>
   2b216:	f8dd 900c 	ldr.w	r9, [sp, #12]
   2b21a:	4607      	mov	r7, r0
   2b21c:	f1b9 0f00 	cmp.w	r9, #0
   2b220:	d072      	beq.n	2b308 <nrf_modem_at_cmd+0x120>
   2b222:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 2b314 <nrf_modem_at_cmd+0x12c>
   2b226:	f8d8 3000 	ldr.w	r3, [r8]
   2b22a:	b1d3      	cbz	r3, 2b262 <nrf_modem_at_cmd+0x7a>
   2b22c:	2400      	movs	r4, #0
   2b22e:	f04f 0b0c 	mov.w	fp, #12
   2b232:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2b318 <nrf_modem_at_cmd+0x130>
   2b236:	f8da 3000 	ldr.w	r3, [sl]
   2b23a:	429c      	cmp	r4, r3
   2b23c:	d211      	bcs.n	2b262 <nrf_modem_at_cmd+0x7a>
   2b23e:	fb0b f204 	mul.w	r2, fp, r4
   2b242:	f8d8 3000 	ldr.w	r3, [r8]
   2b246:	4648      	mov	r0, r9
   2b248:	5899      	ldr	r1, [r3, r2]
   2b24a:	9201      	str	r2, [sp, #4]
   2b24c:	f008 feec 	bl	34028 <strstr>
   2b250:	b1e0      	cbz	r0, 2b28c <nrf_modem_at_cmd+0xa4>
   2b252:	9a01      	ldr	r2, [sp, #4]
   2b254:	f8d8 3000 	ldr.w	r3, [r8]
   2b258:	4413      	add	r3, r2
   2b25a:	7a1a      	ldrb	r2, [r3, #8]
   2b25c:	b9b2      	cbnz	r2, 2b28c <nrf_modem_at_cmd+0xa4>
   2b25e:	685b      	ldr	r3, [r3, #4]
   2b260:	b9b3      	cbnz	r3, 2b290 <nrf_modem_at_cmd+0xa8>
   2b262:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 2b31c <nrf_modem_at_cmd+0x134>
   2b266:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b26a:	f8d8 0000 	ldr.w	r0, [r8]
   2b26e:	f006 fa1f 	bl	316b0 <nrf_modem_os_sem_take>
   2b272:	2302      	movs	r3, #2
   2b274:	2201      	movs	r2, #1
   2b276:	4639      	mov	r1, r7
   2b278:	9803      	ldr	r0, [sp, #12]
   2b27a:	f7ff fedb 	bl	2b034 <at_cmd_send>
   2b27e:	4604      	mov	r4, r0
   2b280:	b1c8      	cbz	r0, 2b2b6 <nrf_modem_at_cmd+0xce>
   2b282:	f8d8 0000 	ldr.w	r0, [r8]
   2b286:	f006 fa11 	bl	316ac <nrf_modem_os_sem_give>
   2b28a:	e00e      	b.n	2b2aa <nrf_modem_at_cmd+0xc2>
   2b28c:	3401      	adds	r4, #1
   2b28e:	e7d2      	b.n	2b236 <nrf_modem_at_cmd+0x4e>
   2b290:	4629      	mov	r1, r5
   2b292:	4630      	mov	r0, r6
   2b294:	9a03      	ldr	r2, [sp, #12]
   2b296:	4798      	blx	r3
   2b298:	4604      	mov	r4, r0
   2b29a:	b918      	cbnz	r0, 2b2a4 <nrf_modem_at_cmd+0xbc>
   2b29c:	4630      	mov	r0, r6
   2b29e:	f7ff ff01 	bl	2b0a4 <at_response_match>
   2b2a2:	4604      	mov	r4, r0
   2b2a4:	9803      	ldr	r0, [sp, #12]
   2b2a6:	f006 ff58 	bl	3215a <rpc_transport_local_data_free>
   2b2aa:	4620      	mov	r0, r4
   2b2ac:	b005      	add	sp, #20
   2b2ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2b2:	b002      	add	sp, #8
   2b2b4:	4770      	bx	lr
   2b2b6:	4f16      	ldr	r7, [pc, #88]	; (2b310 <nrf_modem_at_cmd+0x128>)
   2b2b8:	4630      	mov	r0, r6
   2b2ba:	683c      	ldr	r4, [r7, #0]
   2b2bc:	6862      	ldr	r2, [r4, #4]
   2b2be:	6821      	ldr	r1, [r4, #0]
   2b2c0:	42aa      	cmp	r2, r5
   2b2c2:	bf28      	it	cs
   2b2c4:	462a      	movcs	r2, r5
   2b2c6:	f008 fcb2 	bl	33c2e <memcpy>
   2b2ca:	6863      	ldr	r3, [r4, #4]
   2b2cc:	42ab      	cmp	r3, r5
   2b2ce:	d80f      	bhi.n	2b2f0 <nrf_modem_at_cmd+0x108>
   2b2d0:	6820      	ldr	r0, [r4, #0]
   2b2d2:	f7ff fee7 	bl	2b0a4 <at_response_match>
   2b2d6:	4604      	mov	r4, r0
   2b2d8:	f8d8 0000 	ldr.w	r0, [r8]
   2b2dc:	f006 f9e6 	bl	316ac <nrf_modem_os_sem_give>
   2b2e0:	683b      	ldr	r3, [r7, #0]
   2b2e2:	6818      	ldr	r0, [r3, #0]
   2b2e4:	f006 ff60 	bl	321a8 <rpc_client_data_free>
   2b2e8:	6838      	ldr	r0, [r7, #0]
   2b2ea:	f006 ff5a 	bl	321a2 <rpc_client_message_free>
   2b2ee:	e7dc      	b.n	2b2aa <nrf_modem_at_cmd+0xc2>
   2b2f0:	f06f 0406 	mvn.w	r4, #6
   2b2f4:	e7f0      	b.n	2b2d8 <nrf_modem_at_cmd+0xf0>
   2b2f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2b2fa:	e7d6      	b.n	2b2aa <nrf_modem_at_cmd+0xc2>
   2b2fc:	f06f 040d 	mvn.w	r4, #13
   2b300:	e7d3      	b.n	2b2aa <nrf_modem_at_cmd+0xc2>
   2b302:	f06f 0415 	mvn.w	r4, #21
   2b306:	e7d0      	b.n	2b2aa <nrf_modem_at_cmd+0xc2>
   2b308:	f06f 040b 	mvn.w	r4, #11
   2b30c:	e7cd      	b.n	2b2aa <nrf_modem_at_cmd+0xc2>
   2b30e:	bf00      	nop
   2b310:	2000d880 	.word	0x2000d880
   2b314:	2000d874 	.word	0x2000d874
   2b318:	2000d878 	.word	0x2000d878
   2b31c:	2000d870 	.word	0x2000d870

0002b320 <nrf_modem_at_scanf>:
   2b320:	b40e      	push	{r1, r2, r3}
   2b322:	e92d 41f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, lr}
   2b326:	9f09      	ldr	r7, [sp, #36]	; 0x24
   2b328:	4604      	mov	r4, r0
   2b32a:	f000 fd69 	bl	2be00 <nrf_modem_state_is_initialized>
   2b32e:	2800      	cmp	r0, #0
   2b330:	d03c      	beq.n	2b3ac <nrf_modem_at_scanf+0x8c>
   2b332:	2c00      	cmp	r4, #0
   2b334:	d03d      	beq.n	2b3b2 <nrf_modem_at_scanf+0x92>
   2b336:	2f00      	cmp	r7, #0
   2b338:	d03b      	beq.n	2b3b2 <nrf_modem_at_scanf+0x92>
   2b33a:	4620      	mov	r0, r4
   2b33c:	f7f1 feb0 	bl	1d0a0 <strlen>
   2b340:	1c46      	adds	r6, r0, #1
   2b342:	4630      	mov	r0, r6
   2b344:	f006 ff07 	bl	32156 <rpc_transport_data_alloc>
   2b348:	4605      	mov	r5, r0
   2b34a:	b3a8      	cbz	r0, 2b3b8 <nrf_modem_at_scanf+0x98>
   2b34c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2b3c4 <nrf_modem_at_scanf+0xa4>
   2b350:	4621      	mov	r1, r4
   2b352:	f008 fe2e 	bl	33fb2 <strcpy>
   2b356:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b35a:	f8d8 0000 	ldr.w	r0, [r8]
   2b35e:	f006 f9a7 	bl	316b0 <nrf_modem_os_sem_take>
   2b362:	2302      	movs	r3, #2
   2b364:	2201      	movs	r2, #1
   2b366:	4631      	mov	r1, r6
   2b368:	4628      	mov	r0, r5
   2b36a:	f7ff fe63 	bl	2b034 <at_cmd_send>
   2b36e:	4604      	mov	r4, r0
   2b370:	b990      	cbnz	r0, 2b398 <nrf_modem_at_scanf+0x78>
   2b372:	4d13      	ldr	r5, [pc, #76]	; (2b3c0 <nrf_modem_at_scanf+0xa0>)
   2b374:	aa0a      	add	r2, sp, #40	; 0x28
   2b376:	682b      	ldr	r3, [r5, #0]
   2b378:	4639      	mov	r1, r7
   2b37a:	6818      	ldr	r0, [r3, #0]
   2b37c:	9201      	str	r2, [sp, #4]
   2b37e:	f002 ff87 	bl	2e290 <vsiscanf>
   2b382:	682b      	ldr	r3, [r5, #0]
   2b384:	1e04      	subs	r4, r0, #0
   2b386:	6818      	ldr	r0, [r3, #0]
   2b388:	bf08      	it	eq
   2b38a:	f06f 044c 	mvneq.w	r4, #76	; 0x4c
   2b38e:	f006 ff0b 	bl	321a8 <rpc_client_data_free>
   2b392:	6828      	ldr	r0, [r5, #0]
   2b394:	f006 ff05 	bl	321a2 <rpc_client_message_free>
   2b398:	f8d8 0000 	ldr.w	r0, [r8]
   2b39c:	f006 f986 	bl	316ac <nrf_modem_os_sem_give>
   2b3a0:	4620      	mov	r0, r4
   2b3a2:	b003      	add	sp, #12
   2b3a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2b3a8:	b003      	add	sp, #12
   2b3aa:	4770      	bx	lr
   2b3ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2b3b0:	e7f6      	b.n	2b3a0 <nrf_modem_at_scanf+0x80>
   2b3b2:	f06f 040d 	mvn.w	r4, #13
   2b3b6:	e7f3      	b.n	2b3a0 <nrf_modem_at_scanf+0x80>
   2b3b8:	f06f 040b 	mvn.w	r4, #11
   2b3bc:	e7f0      	b.n	2b3a0 <nrf_modem_at_scanf+0x80>
   2b3be:	bf00      	nop
   2b3c0:	2000d880 	.word	0x2000d880
   2b3c4:	2000d870 	.word	0x2000d870

0002b3c8 <rpc_at_event_handler>:
   2b3c8:	b570      	push	{r4, r5, r6, lr}
   2b3ca:	68c3      	ldr	r3, [r0, #12]
   2b3cc:	4605      	mov	r5, r0
   2b3ce:	2ba7      	cmp	r3, #167	; 0xa7
   2b3d0:	d003      	beq.n	2b3da <rpc_at_event_handler+0x12>
   2b3d2:	6828      	ldr	r0, [r5, #0]
   2b3d4:	f006 fee8 	bl	321a8 <rpc_client_data_free>
   2b3d8:	e008      	b.n	2b3ec <rpc_at_event_handler+0x24>
   2b3da:	2903      	cmp	r1, #3
   2b3dc:	d008      	beq.n	2b3f0 <rpc_at_event_handler+0x28>
   2b3de:	2904      	cmp	r1, #4
   2b3e0:	d019      	beq.n	2b416 <rpc_at_event_handler+0x4e>
   2b3e2:	2902      	cmp	r1, #2
   2b3e4:	d102      	bne.n	2b3ec <rpc_at_event_handler+0x24>
   2b3e6:	2201      	movs	r2, #1
   2b3e8:	4b0e      	ldr	r3, [pc, #56]	; (2b424 <rpc_at_event_handler+0x5c>)
   2b3ea:	701a      	strb	r2, [r3, #0]
   2b3ec:	2000      	movs	r0, #0
   2b3ee:	e00a      	b.n	2b406 <rpc_at_event_handler+0x3e>
   2b3f0:	4e0d      	ldr	r6, [pc, #52]	; (2b428 <rpc_at_event_handler+0x60>)
   2b3f2:	6833      	ldr	r3, [r6, #0]
   2b3f4:	b143      	cbz	r3, 2b408 <rpc_at_event_handler+0x40>
   2b3f6:	2400      	movs	r4, #0
   2b3f8:	6800      	ldr	r0, [r0, #0]
   2b3fa:	4798      	blx	r3
   2b3fc:	6828      	ldr	r0, [r5, #0]
   2b3fe:	6034      	str	r4, [r6, #0]
   2b400:	f006 fed2 	bl	321a8 <rpc_client_data_free>
   2b404:	b2e0      	uxtb	r0, r4
   2b406:	bd70      	pop	{r4, r5, r6, pc}
   2b408:	2202      	movs	r2, #2
   2b40a:	4b08      	ldr	r3, [pc, #32]	; (2b42c <rpc_at_event_handler+0x64>)
   2b40c:	2401      	movs	r4, #1
   2b40e:	6018      	str	r0, [r3, #0]
   2b410:	4b04      	ldr	r3, [pc, #16]	; (2b424 <rpc_at_event_handler+0x5c>)
   2b412:	701a      	strb	r2, [r3, #0]
   2b414:	e7f6      	b.n	2b404 <rpc_at_event_handler+0x3c>
   2b416:	4b06      	ldr	r3, [pc, #24]	; (2b430 <rpc_at_event_handler+0x68>)
   2b418:	681b      	ldr	r3, [r3, #0]
   2b41a:	2b00      	cmp	r3, #0
   2b41c:	d0d9      	beq.n	2b3d2 <rpc_at_event_handler+0xa>
   2b41e:	6800      	ldr	r0, [r0, #0]
   2b420:	4798      	blx	r3
   2b422:	e7d6      	b.n	2b3d2 <rpc_at_event_handler+0xa>
   2b424:	2001078f 	.word	0x2001078f
   2b428:	2000d884 	.word	0x2000d884
   2b42c:	2000d880 	.word	0x2000d880
   2b430:	2000d87c 	.word	0x2000d87c

0002b434 <rpc_dfu_event_handler>:
   2b434:	b510      	push	{r4, lr}
   2b436:	4604      	mov	r4, r0
   2b438:	6800      	ldr	r0, [r0, #0]
   2b43a:	b108      	cbz	r0, 2b440 <rpc_dfu_event_handler+0xc>
   2b43c:	f006 feb4 	bl	321a8 <rpc_client_data_free>
   2b440:	68e2      	ldr	r2, [r4, #12]
   2b442:	4b06      	ldr	r3, [pc, #24]	; (2b45c <rpc_dfu_event_handler+0x28>)
   2b444:	429a      	cmp	r2, r3
   2b446:	bf01      	itttt	eq
   2b448:	2301      	moveq	r3, #1
   2b44a:	4a05      	ldreq	r2, [pc, #20]	; (2b460 <rpc_dfu_event_handler+0x2c>)
   2b44c:	4618      	moveq	r0, r3
   2b44e:	7013      	strbeq	r3, [r2, #0]
   2b450:	bf0a      	itet	eq
   2b452:	4a04      	ldreq	r2, [pc, #16]	; (2b464 <rpc_dfu_event_handler+0x30>)
   2b454:	2000      	movne	r0, #0
   2b456:	6014      	streq	r4, [r2, #0]
   2b458:	bd10      	pop	{r4, pc}
   2b45a:	bf00      	nop
   2b45c:	15abe11a 	.word	0x15abe11a
   2b460:	20010790 	.word	0x20010790
   2b464:	2000d888 	.word	0x2000d888

0002b468 <send_message>:
   2b468:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2b46a:	4605      	mov	r5, r0
   2b46c:	460e      	mov	r6, r1
   2b46e:	f000 fcc7 	bl	2be00 <nrf_modem_state_is_initialized>
   2b472:	b378      	cbz	r0, 2b4d4 <send_message+0x6c>
   2b474:	4c19      	ldr	r4, [pc, #100]	; (2b4dc <send_message+0x74>)
   2b476:	7823      	ldrb	r3, [r4, #0]
   2b478:	bb63      	cbnz	r3, 2b4d4 <send_message+0x6c>
   2b47a:	2301      	movs	r3, #1
   2b47c:	4a18      	ldr	r2, [pc, #96]	; (2b4e0 <send_message+0x78>)
   2b47e:	7023      	strb	r3, [r4, #0]
   2b480:	8813      	ldrh	r3, [r2, #0]
   2b482:	6831      	ldr	r1, [r6, #0]
   2b484:	3301      	adds	r3, #1
   2b486:	b29b      	uxth	r3, r3
   2b488:	8013      	strh	r3, [r2, #0]
   2b48a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   2b48e:	600b      	str	r3, [r1, #0]
   2b490:	4632      	mov	r2, r6
   2b492:	4629      	mov	r1, r5
   2b494:	2007      	movs	r0, #7
   2b496:	f006 fe7d 	bl	32194 <rpc_client_request_send>
   2b49a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b49e:	4d11      	ldr	r5, [pc, #68]	; (2b4e4 <send_message+0x7c>)
   2b4a0:	9301      	str	r3, [sp, #4]
   2b4a2:	4628      	mov	r0, r5
   2b4a4:	a901      	add	r1, sp, #4
   2b4a6:	f7fa f8c5 	bl	25634 <nrf_modem_os_timedwait>
   2b4aa:	7823      	ldrb	r3, [r4, #0]
   2b4ac:	2b01      	cmp	r3, #1
   2b4ae:	d102      	bne.n	2b4b6 <send_message+0x4e>
   2b4b0:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   2b4b4:	d1f5      	bne.n	2b4a2 <send_message+0x3a>
   2b4b6:	7823      	ldrb	r3, [r4, #0]
   2b4b8:	2b02      	cmp	r3, #2
   2b4ba:	d008      	beq.n	2b4ce <send_message+0x66>
   2b4bc:	7823      	ldrb	r3, [r4, #0]
   2b4be:	2b03      	cmp	r3, #3
   2b4c0:	bf08      	it	eq
   2b4c2:	f06f 005e 	mvneq.w	r0, #94	; 0x5e
   2b4c6:	2300      	movs	r3, #0
   2b4c8:	7023      	strb	r3, [r4, #0]
   2b4ca:	b002      	add	sp, #8
   2b4cc:	bd70      	pop	{r4, r5, r6, pc}
   2b4ce:	f06f 0015 	mvn.w	r0, #21
   2b4d2:	e7f8      	b.n	2b4c6 <send_message+0x5e>
   2b4d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b4d8:	e7f7      	b.n	2b4ca <send_message+0x62>
   2b4da:	bf00      	nop
   2b4dc:	20010793 	.word	0x20010793
   2b4e0:	2000d90a 	.word	0x2000d90a
   2b4e4:	49765443 	.word	0x49765443

0002b4e8 <rpc_gnss_event_handler>:
   2b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b4ec:	6804      	ldr	r4, [r0, #0]
   2b4ee:	4607      	mov	r7, r0
   2b4f0:	460d      	mov	r5, r1
   2b4f2:	2c00      	cmp	r4, #0
   2b4f4:	f000 8086 	beq.w	2b604 <rpc_gnss_event_handler+0x11c>
   2b4f8:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   2b4fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   2b500:	d142      	bne.n	2b588 <rpc_gnss_event_handler+0xa0>
   2b502:	f8df 819c 	ldr.w	r8, [pc, #412]	; 2b6a0 <rpc_gnss_event_handler+0x1b8>
   2b506:	f898 3000 	ldrb.w	r3, [r8]
   2b50a:	2b01      	cmp	r3, #1
   2b50c:	d131      	bne.n	2b572 <rpc_gnss_event_handler+0x8a>
   2b50e:	4b5c      	ldr	r3, [pc, #368]	; (2b680 <rpc_gnss_event_handler+0x198>)
   2b510:	6822      	ldr	r2, [r4, #0]
   2b512:	881b      	ldrh	r3, [r3, #0]
   2b514:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   2b518:	d12b      	bne.n	2b572 <rpc_gnss_event_handler+0x8a>
   2b51a:	6863      	ldr	r3, [r4, #4]
   2b51c:	bb6b      	cbnz	r3, 2b57a <rpc_gnss_event_handler+0x92>
   2b51e:	4b59      	ldr	r3, [pc, #356]	; (2b684 <rpc_gnss_event_handler+0x19c>)
   2b520:	681e      	ldr	r6, [r3, #0]
   2b522:	b31e      	cbz	r6, 2b56c <rpc_gnss_event_handler+0x84>
   2b524:	f242 0309 	movw	r3, #8201	; 0x2009
   2b528:	4299      	cmp	r1, r3
   2b52a:	d11f      	bne.n	2b56c <rpc_gnss_event_handler+0x84>
   2b52c:	4630      	mov	r0, r6
   2b52e:	8923      	ldrh	r3, [r4, #8]
   2b530:	2280      	movs	r2, #128	; 0x80
   2b532:	f840 3b04 	str.w	r3, [r0], #4
   2b536:	f104 010a 	add.w	r1, r4, #10
   2b53a:	f008 fb78 	bl	33c2e <memcpy>
   2b53e:	2280      	movs	r2, #128	; 0x80
   2b540:	f104 018a 	add.w	r1, r4, #138	; 0x8a
   2b544:	f106 0084 	add.w	r0, r6, #132	; 0x84
   2b548:	f008 fb71 	bl	33c2e <memcpy>
   2b54c:	f8d4 310a 	ldr.w	r3, [r4, #266]	; 0x10a
   2b550:	f8c6 3104 	str.w	r3, [r6, #260]	; 0x104
   2b554:	f8d4 310e 	ldr.w	r3, [r4, #270]	; 0x10e
   2b558:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
   2b55c:	f8d4 3112 	ldr.w	r3, [r4, #274]	; 0x112
   2b560:	f8c6 310c 	str.w	r3, [r6, #268]	; 0x10c
   2b564:	f8d4 3116 	ldr.w	r3, [r4, #278]	; 0x116
   2b568:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
   2b56c:	2300      	movs	r3, #0
   2b56e:	f888 3000 	strb.w	r3, [r8]
   2b572:	6838      	ldr	r0, [r7, #0]
   2b574:	f006 fe18 	bl	321a8 <rpc_client_data_free>
   2b578:	e044      	b.n	2b604 <rpc_gnss_event_handler+0x11c>
   2b57a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   2b57e:	4293      	cmp	r3, r2
   2b580:	bf0c      	ite	eq
   2b582:	2303      	moveq	r3, #3
   2b584:	2302      	movne	r3, #2
   2b586:	e7f2      	b.n	2b56e <rpc_gnss_event_handler+0x86>
   2b588:	4e3f      	ldr	r6, [pc, #252]	; (2b688 <rpc_gnss_event_handler+0x1a0>)
   2b58a:	6833      	ldr	r3, [r6, #0]
   2b58c:	2b00      	cmp	r3, #0
   2b58e:	d0f0      	beq.n	2b572 <rpc_gnss_event_handler+0x8a>
   2b590:	f244 0204 	movw	r2, #16388	; 0x4004
   2b594:	4291      	cmp	r1, r2
   2b596:	d80b      	bhi.n	2b5b0 <rpc_gnss_event_handler+0xc8>
   2b598:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   2b59c:	d9e9      	bls.n	2b572 <rpc_gnss_event_handler+0x8a>
   2b59e:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
   2b5a2:	3a02      	subs	r2, #2
   2b5a4:	2a02      	cmp	r2, #2
   2b5a6:	d80b      	bhi.n	2b5c0 <rpc_gnss_event_handler+0xd8>
   2b5a8:	e8df f002 	tbb	[pc, r2]
   2b5ac:	4f45      	.short	0x4f45
   2b5ae:	59          	.byte	0x59
   2b5af:	00          	.byte	0x00
   2b5b0:	f244 1301 	movw	r3, #16641	; 0x4101
   2b5b4:	4299      	cmp	r1, r3
   2b5b6:	d003      	beq.n	2b5c0 <rpc_gnss_event_handler+0xd8>
   2b5b8:	f244 2301 	movw	r3, #16897	; 0x4201
   2b5bc:	4299      	cmp	r1, r3
   2b5be:	d1d8      	bne.n	2b572 <rpc_gnss_event_handler+0x8a>
   2b5c0:	4f32      	ldr	r7, [pc, #200]	; (2b68c <rpc_gnss_event_handler+0x1a4>)
   2b5c2:	6838      	ldr	r0, [r7, #0]
   2b5c4:	b108      	cbz	r0, 2b5ca <rpc_gnss_event_handler+0xe2>
   2b5c6:	f006 fdef 	bl	321a8 <rpc_client_data_free>
   2b5ca:	f244 2301 	movw	r3, #16897	; 0x4201
   2b5ce:	429d      	cmp	r5, r3
   2b5d0:	4b2f      	ldr	r3, [pc, #188]	; (2b690 <rpc_gnss_event_handler+0x1a8>)
   2b5d2:	d11a      	bne.n	2b60a <rpc_gnss_event_handler+0x122>
   2b5d4:	2202      	movs	r2, #2
   2b5d6:	603c      	str	r4, [r7, #0]
   2b5d8:	f894 4051 	ldrb.w	r4, [r4, #81]	; 0x51
   2b5dc:	701a      	strb	r2, [r3, #0]
   2b5de:	4d2d      	ldr	r5, [pc, #180]	; (2b694 <rpc_gnss_event_handler+0x1ac>)
   2b5e0:	f014 0718 	ands.w	r7, r4, #24
   2b5e4:	6833      	ldr	r3, [r6, #0]
   2b5e6:	782a      	ldrb	r2, [r5, #0]
   2b5e8:	d01f      	beq.n	2b62a <rpc_gnss_event_handler+0x142>
   2b5ea:	b91a      	cbnz	r2, 2b5f4 <rpc_gnss_event_handler+0x10c>
   2b5ec:	2005      	movs	r0, #5
   2b5ee:	4798      	blx	r3
   2b5f0:	2301      	movs	r3, #1
   2b5f2:	702b      	strb	r3, [r5, #0]
   2b5f4:	07e3      	lsls	r3, r4, #31
   2b5f6:	d502      	bpl.n	2b5fe <rpc_gnss_event_handler+0x116>
   2b5f8:	2002      	movs	r0, #2
   2b5fa:	6833      	ldr	r3, [r6, #0]
   2b5fc:	4798      	blx	r3
   2b5fe:	2001      	movs	r0, #1
   2b600:	6833      	ldr	r3, [r6, #0]
   2b602:	4798      	blx	r3
   2b604:	2000      	movs	r0, #0
   2b606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b60a:	f244 1201 	movw	r2, #16641	; 0x4101
   2b60e:	4295      	cmp	r5, r2
   2b610:	bf0b      	itete	eq
   2b612:	2201      	moveq	r2, #1
   2b614:	2200      	movne	r2, #0
   2b616:	603c      	streq	r4, [r7, #0]
   2b618:	603c      	strne	r4, [r7, #0]
   2b61a:	bf0b      	itete	eq
   2b61c:	f894 4041 	ldrbeq.w	r4, [r4, #65]	; 0x41
   2b620:	f894 403d 	ldrbne.w	r4, [r4, #61]	; 0x3d
   2b624:	701a      	strbeq	r2, [r3, #0]
   2b626:	701a      	strbne	r2, [r3, #0]
   2b628:	e7d9      	b.n	2b5de <rpc_gnss_event_handler+0xf6>
   2b62a:	2a00      	cmp	r2, #0
   2b62c:	d0e2      	beq.n	2b5f4 <rpc_gnss_event_handler+0x10c>
   2b62e:	2006      	movs	r0, #6
   2b630:	4798      	blx	r3
   2b632:	702f      	strb	r7, [r5, #0]
   2b634:	e7de      	b.n	2b5f4 <rpc_gnss_event_handler+0x10c>
   2b636:	4c18      	ldr	r4, [pc, #96]	; (2b698 <rpc_gnss_event_handler+0x1b0>)
   2b638:	6820      	ldr	r0, [r4, #0]
   2b63a:	b108      	cbz	r0, 2b640 <rpc_gnss_event_handler+0x158>
   2b63c:	f006 fdb4 	bl	321a8 <rpc_client_data_free>
   2b640:	683b      	ldr	r3, [r7, #0]
   2b642:	2003      	movs	r0, #3
   2b644:	6023      	str	r3, [r4, #0]
   2b646:	6833      	ldr	r3, [r6, #0]
   2b648:	e7db      	b.n	2b602 <rpc_gnss_event_handler+0x11a>
   2b64a:	4c14      	ldr	r4, [pc, #80]	; (2b69c <rpc_gnss_event_handler+0x1b4>)
   2b64c:	6820      	ldr	r0, [r4, #0]
   2b64e:	b108      	cbz	r0, 2b654 <rpc_gnss_event_handler+0x16c>
   2b650:	f006 fdaa 	bl	321a8 <rpc_client_data_free>
   2b654:	683b      	ldr	r3, [r7, #0]
   2b656:	2004      	movs	r0, #4
   2b658:	6023      	str	r3, [r4, #0]
   2b65a:	6833      	ldr	r3, [r6, #0]
   2b65c:	e7d1      	b.n	2b602 <rpc_gnss_event_handler+0x11a>
   2b65e:	7822      	ldrb	r2, [r4, #0]
   2b660:	2a03      	cmp	r2, #3
   2b662:	d886      	bhi.n	2b572 <rpc_gnss_event_handler+0x8a>
   2b664:	e8df f002 	tbb	[pc, r2]
   2b668:	09070502 	.word	0x09070502
   2b66c:	2007      	movs	r0, #7
   2b66e:	4798      	blx	r3
   2b670:	e77f      	b.n	2b572 <rpc_gnss_event_handler+0x8a>
   2b672:	2008      	movs	r0, #8
   2b674:	e7fb      	b.n	2b66e <rpc_gnss_event_handler+0x186>
   2b676:	2009      	movs	r0, #9
   2b678:	e7f9      	b.n	2b66e <rpc_gnss_event_handler+0x186>
   2b67a:	200a      	movs	r0, #10
   2b67c:	e7f7      	b.n	2b66e <rpc_gnss_event_handler+0x186>
   2b67e:	bf00      	nop
   2b680:	2000d90a 	.word	0x2000d90a
   2b684:	2000d89c 	.word	0x2000d89c
   2b688:	2000d890 	.word	0x2000d890
   2b68c:	2000d898 	.word	0x2000d898
   2b690:	20010792 	.word	0x20010792
   2b694:	20010791 	.word	0x20010791
   2b698:	2000d894 	.word	0x2000d894
   2b69c:	2000d88c 	.word	0x2000d88c
   2b6a0:	20010793 	.word	0x20010793

0002b6a4 <nrf_modem_gnss_read>:
   2b6a4:	b570      	push	{r4, r5, r6, lr}
   2b6a6:	4604      	mov	r4, r0
   2b6a8:	2800      	cmp	r0, #0
   2b6aa:	f000 817c 	beq.w	2b9a6 <nrf_modem_gnss_read+0x302>
   2b6ae:	2a02      	cmp	r2, #2
   2b6b0:	f000 8159 	beq.w	2b966 <nrf_modem_gnss_read+0x2c2>
   2b6b4:	2a03      	cmp	r2, #3
   2b6b6:	f000 8165 	beq.w	2b984 <nrf_modem_gnss_read+0x2e0>
   2b6ba:	2a01      	cmp	r2, #1
   2b6bc:	f040 8173 	bne.w	2b9a6 <nrf_modem_gnss_read+0x302>
   2b6c0:	29e7      	cmp	r1, #231	; 0xe7
   2b6c2:	f240 8173 	bls.w	2b9ac <nrf_modem_gnss_read+0x308>
   2b6c6:	f006 fd4e 	bl	32166 <rpc_transport_rx_data_suspend>
   2b6ca:	4bba      	ldr	r3, [pc, #744]	; (2b9b4 <nrf_modem_gnss_read+0x310>)
   2b6cc:	681d      	ldr	r5, [r3, #0]
   2b6ce:	b925      	cbnz	r5, 2b6da <nrf_modem_gnss_read+0x36>
   2b6d0:	f006 fd4b 	bl	3216a <rpc_transport_rx_data_resume>
   2b6d4:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2b6d8:	e082      	b.n	2b7e0 <nrf_modem_gnss_read+0x13c>
   2b6da:	22e8      	movs	r2, #232	; 0xe8
   2b6dc:	2100      	movs	r1, #0
   2b6de:	4620      	mov	r0, r4
   2b6e0:	f008 fac5 	bl	33c6e <memset>
   2b6e4:	4bb4      	ldr	r3, [pc, #720]	; (2b9b8 <nrf_modem_gnss_read+0x314>)
   2b6e6:	781b      	ldrb	r3, [r3, #0]
   2b6e8:	2b01      	cmp	r3, #1
   2b6ea:	d07a      	beq.n	2b7e2 <nrf_modem_gnss_read+0x13e>
   2b6ec:	686a      	ldr	r2, [r5, #4]
   2b6ee:	2b02      	cmp	r3, #2
   2b6f0:	68ab      	ldr	r3, [r5, #8]
   2b6f2:	e9c4 2300 	strd	r2, r3, [r4]
   2b6f6:	692b      	ldr	r3, [r5, #16]
   2b6f8:	68ea      	ldr	r2, [r5, #12]
   2b6fa:	e9c4 2302 	strd	r2, r3, [r4, #8]
   2b6fe:	696b      	ldr	r3, [r5, #20]
   2b700:	6123      	str	r3, [r4, #16]
   2b702:	69ab      	ldr	r3, [r5, #24]
   2b704:	6163      	str	r3, [r4, #20]
   2b706:	69eb      	ldr	r3, [r5, #28]
   2b708:	f040 80d4 	bne.w	2b8b4 <nrf_modem_gnss_read+0x210>
   2b70c:	61a3      	str	r3, [r4, #24]
   2b70e:	6a2b      	ldr	r3, [r5, #32]
   2b710:	260a      	movs	r6, #10
   2b712:	61e3      	str	r3, [r4, #28]
   2b714:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2b716:	6223      	str	r3, [r4, #32]
   2b718:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2b71a:	6263      	str	r3, [r4, #36]	; 0x24
   2b71c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   2b71e:	62a3      	str	r3, [r4, #40]	; 0x28
   2b720:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   2b722:	62e3      	str	r3, [r4, #44]	; 0x2c
   2b724:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2b726:	6323      	str	r3, [r4, #48]	; 0x30
   2b728:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
   2b72c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   2b730:	f8d5 3041 	ldr.w	r3, [r5, #65]	; 0x41
   2b734:	6423      	str	r3, [r4, #64]	; 0x40
   2b736:	f8d5 3045 	ldr.w	r3, [r5, #69]	; 0x45
   2b73a:	6463      	str	r3, [r4, #68]	; 0x44
   2b73c:	f8d5 3049 	ldr.w	r3, [r5, #73]	; 0x49
   2b740:	64a3      	str	r3, [r4, #72]	; 0x48
   2b742:	f8d5 304d 	ldr.w	r3, [r5, #77]	; 0x4d
   2b746:	64e3      	str	r3, [r4, #76]	; 0x4c
   2b748:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   2b74c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   2b750:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b754:	86a3      	strh	r3, [r4, #52]	; 0x34
   2b756:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   2b75a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   2b75e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   2b762:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   2b766:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   2b76a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   2b76e:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   2b772:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   2b776:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
   2b77a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   2b77e:	f895 2040 	ldrb.w	r2, [r5, #64]	; 0x40
   2b782:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
   2b786:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b78a:	87a3      	strh	r3, [r4, #60]	; 0x3c
   2b78c:	f8d5 30ca 	ldr.w	r3, [r5, #202]	; 0xca
   2b790:	462a      	mov	r2, r5
   2b792:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   2b796:	2300      	movs	r3, #0
   2b798:	fb06 5103 	mla	r1, r6, r3, r5
   2b79c:	f8b1 0052 	ldrh.w	r0, [r1, #82]	; 0x52
   2b7a0:	3301      	adds	r3, #1
   2b7a2:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   2b7a6:	f892 0054 	ldrb.w	r0, [r2, #84]	; 0x54
   2b7aa:	2b0c      	cmp	r3, #12
   2b7ac:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   2b7b0:	f8b1 0055 	ldrh.w	r0, [r1, #85]	; 0x55
   2b7b4:	f104 040c 	add.w	r4, r4, #12
   2b7b8:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   2b7bc:	f9b1 0057 	ldrsh.w	r0, [r1, #87]	; 0x57
   2b7c0:	f102 020a 	add.w	r2, r2, #10
   2b7c4:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   2b7c8:	f9b1 1059 	ldrsh.w	r1, [r1, #89]	; 0x59
   2b7cc:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   2b7d0:	f892 1051 	ldrb.w	r1, [r2, #81]	; 0x51
   2b7d4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   2b7d8:	d1de      	bne.n	2b798 <nrf_modem_gnss_read+0xf4>
   2b7da:	f006 fcc6 	bl	3216a <rpc_transport_rx_data_resume>
   2b7de:	2000      	movs	r0, #0
   2b7e0:	bd70      	pop	{r4, r5, r6, pc}
   2b7e2:	686a      	ldr	r2, [r5, #4]
   2b7e4:	68ab      	ldr	r3, [r5, #8]
   2b7e6:	260a      	movs	r6, #10
   2b7e8:	e9c4 2300 	strd	r2, r3, [r4]
   2b7ec:	68ea      	ldr	r2, [r5, #12]
   2b7ee:	692b      	ldr	r3, [r5, #16]
   2b7f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
   2b7f4:	696b      	ldr	r3, [r5, #20]
   2b7f6:	6123      	str	r3, [r4, #16]
   2b7f8:	69ab      	ldr	r3, [r5, #24]
   2b7fa:	6163      	str	r3, [r4, #20]
   2b7fc:	69eb      	ldr	r3, [r5, #28]
   2b7fe:	61e3      	str	r3, [r4, #28]
   2b800:	6a2b      	ldr	r3, [r5, #32]
   2b802:	6223      	str	r3, [r4, #32]
   2b804:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2b806:	62e3      	str	r3, [r4, #44]	; 0x2c
   2b808:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
   2b80c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   2b810:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   2b814:	6423      	str	r3, [r4, #64]	; 0x40
   2b816:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   2b81a:	6463      	str	r3, [r4, #68]	; 0x44
   2b81c:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   2b820:	64a3      	str	r3, [r4, #72]	; 0x48
   2b822:	f8d5 303d 	ldr.w	r3, [r5, #61]	; 0x3d
   2b826:	64e3      	str	r3, [r4, #76]	; 0x4c
   2b828:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
   2b82c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   2b830:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b834:	86a3      	strh	r3, [r4, #52]	; 0x34
   2b836:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   2b83a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   2b83e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   2b842:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   2b846:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   2b84a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   2b84e:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   2b852:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   2b856:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   2b85a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   2b85e:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
   2b862:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   2b866:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b86a:	87a3      	strh	r3, [r4, #60]	; 0x3c
   2b86c:	462a      	mov	r2, r5
   2b86e:	2300      	movs	r3, #0
   2b870:	fb06 5103 	mla	r1, r6, r3, r5
   2b874:	f8b1 0042 	ldrh.w	r0, [r1, #66]	; 0x42
   2b878:	3301      	adds	r3, #1
   2b87a:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   2b87e:	f892 0044 	ldrb.w	r0, [r2, #68]	; 0x44
   2b882:	2b0c      	cmp	r3, #12
   2b884:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   2b888:	f8b1 0045 	ldrh.w	r0, [r1, #69]	; 0x45
   2b88c:	f104 040c 	add.w	r4, r4, #12
   2b890:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   2b894:	f9b1 0047 	ldrsh.w	r0, [r1, #71]	; 0x47
   2b898:	f102 020a 	add.w	r2, r2, #10
   2b89c:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   2b8a0:	f9b1 1049 	ldrsh.w	r1, [r1, #73]	; 0x49
   2b8a4:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   2b8a8:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
   2b8ac:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   2b8b0:	d1de      	bne.n	2b870 <nrf_modem_gnss_read+0x1cc>
   2b8b2:	e792      	b.n	2b7da <nrf_modem_gnss_read+0x136>
   2b8b4:	61e3      	str	r3, [r4, #28]
   2b8b6:	6a2b      	ldr	r3, [r5, #32]
   2b8b8:	260a      	movs	r6, #10
   2b8ba:	62e3      	str	r3, [r4, #44]	; 0x2c
   2b8bc:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
   2b8c0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   2b8c4:	f8d5 302d 	ldr.w	r3, [r5, #45]	; 0x2d
   2b8c8:	6423      	str	r3, [r4, #64]	; 0x40
   2b8ca:	f8d5 3031 	ldr.w	r3, [r5, #49]	; 0x31
   2b8ce:	6463      	str	r3, [r4, #68]	; 0x44
   2b8d0:	f8d5 3035 	ldr.w	r3, [r5, #53]	; 0x35
   2b8d4:	64a3      	str	r3, [r4, #72]	; 0x48
   2b8d6:	f8d5 3039 	ldr.w	r3, [r5, #57]	; 0x39
   2b8da:	64e3      	str	r3, [r4, #76]	; 0x4c
   2b8dc:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
   2b8e0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   2b8e4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b8e8:	86a3      	strh	r3, [r4, #52]	; 0x34
   2b8ea:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   2b8ee:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   2b8f2:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
   2b8f6:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
   2b8fa:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   2b8fe:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   2b902:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   2b906:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   2b90a:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
   2b90e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   2b912:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
   2b916:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   2b91a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2b91e:	87a3      	strh	r3, [r4, #60]	; 0x3c
   2b920:	462a      	mov	r2, r5
   2b922:	2300      	movs	r3, #0
   2b924:	fb06 5103 	mla	r1, r6, r3, r5
   2b928:	8fc8      	ldrh	r0, [r1, #62]	; 0x3e
   2b92a:	3301      	adds	r3, #1
   2b92c:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
   2b930:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
   2b934:	2b0c      	cmp	r3, #12
   2b936:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
   2b93a:	f8b1 0041 	ldrh.w	r0, [r1, #65]	; 0x41
   2b93e:	f104 040c 	add.w	r4, r4, #12
   2b942:	f8a4 004a 	strh.w	r0, [r4, #74]	; 0x4a
   2b946:	f9b1 0043 	ldrsh.w	r0, [r1, #67]	; 0x43
   2b94a:	f102 020a 	add.w	r2, r2, #10
   2b94e:	f8a4 004c 	strh.w	r0, [r4, #76]	; 0x4c
   2b952:	f9b1 1045 	ldrsh.w	r1, [r1, #69]	; 0x45
   2b956:	f8a4 104e 	strh.w	r1, [r4, #78]	; 0x4e
   2b95a:	f892 103d 	ldrb.w	r1, [r2, #61]	; 0x3d
   2b95e:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
   2b962:	d1df      	bne.n	2b924 <nrf_modem_gnss_read+0x280>
   2b964:	e739      	b.n	2b7da <nrf_modem_gnss_read+0x136>
   2b966:	2952      	cmp	r1, #82	; 0x52
   2b968:	d920      	bls.n	2b9ac <nrf_modem_gnss_read+0x308>
   2b96a:	4d14      	ldr	r5, [pc, #80]	; (2b9bc <nrf_modem_gnss_read+0x318>)
   2b96c:	682b      	ldr	r3, [r5, #0]
   2b96e:	2b00      	cmp	r3, #0
   2b970:	f43f aeb0 	beq.w	2b6d4 <nrf_modem_gnss_read+0x30>
   2b974:	f006 fbf7 	bl	32166 <rpc_transport_rx_data_suspend>
   2b978:	2253      	movs	r2, #83	; 0x53
   2b97a:	4620      	mov	r0, r4
   2b97c:	6829      	ldr	r1, [r5, #0]
   2b97e:	f008 f956 	bl	33c2e <memcpy>
   2b982:	e72a      	b.n	2b7da <nrf_modem_gnss_read+0x136>
   2b984:	290b      	cmp	r1, #11
   2b986:	d911      	bls.n	2b9ac <nrf_modem_gnss_read+0x308>
   2b988:	4d0d      	ldr	r5, [pc, #52]	; (2b9c0 <nrf_modem_gnss_read+0x31c>)
   2b98a:	682b      	ldr	r3, [r5, #0]
   2b98c:	2b00      	cmp	r3, #0
   2b98e:	f43f aea1 	beq.w	2b6d4 <nrf_modem_gnss_read+0x30>
   2b992:	f006 fbe8 	bl	32166 <rpc_transport_rx_data_suspend>
   2b996:	682b      	ldr	r3, [r5, #0]
   2b998:	681a      	ldr	r2, [r3, #0]
   2b99a:	6022      	str	r2, [r4, #0]
   2b99c:	685a      	ldr	r2, [r3, #4]
   2b99e:	6062      	str	r2, [r4, #4]
   2b9a0:	891b      	ldrh	r3, [r3, #8]
   2b9a2:	60a3      	str	r3, [r4, #8]
   2b9a4:	e719      	b.n	2b7da <nrf_modem_gnss_read+0x136>
   2b9a6:	f06f 0015 	mvn.w	r0, #21
   2b9aa:	e719      	b.n	2b7e0 <nrf_modem_gnss_read+0x13c>
   2b9ac:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2b9b0:	e716      	b.n	2b7e0 <nrf_modem_gnss_read+0x13c>
   2b9b2:	bf00      	nop
   2b9b4:	2000d898 	.word	0x2000d898
   2b9b8:	20010792 	.word	0x20010792
   2b9bc:	2000d894 	.word	0x2000d894
   2b9c0:	2000d88c 	.word	0x2000d88c

0002b9c4 <nrf_modem_gnss_start>:
   2b9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b9c8:	4d27      	ldr	r5, [pc, #156]	; (2ba68 <nrf_modem_gnss_start+0xa4>)
   2b9ca:	782b      	ldrb	r3, [r5, #0]
   2b9cc:	2b00      	cmp	r3, #0
   2b9ce:	d145      	bne.n	2ba5c <nrf_modem_gnss_start+0x98>
   2b9d0:	4e26      	ldr	r6, [pc, #152]	; (2ba6c <nrf_modem_gnss_start+0xa8>)
   2b9d2:	7833      	ldrb	r3, [r6, #0]
   2b9d4:	bb53      	cbnz	r3, 2ba2c <nrf_modem_gnss_start+0x68>
   2b9d6:	2702      	movs	r7, #2
   2b9d8:	f04f 0905 	mov.w	r9, #5
   2b9dc:	46b8      	mov	r8, r7
   2b9de:	2014      	movs	r0, #20
   2b9e0:	f007 fbbe 	bl	33160 <gnss_msg_alloc_and_set_common>
   2b9e4:	4601      	mov	r1, r0
   2b9e6:	b388      	cbz	r0, 2ba4c <nrf_modem_gnss_start+0x88>
   2b9e8:	6803      	ldr	r3, [r0, #0]
   2b9ea:	f241 0004 	movw	r0, #4100	; 0x1004
   2b9ee:	f883 9004 	strb.w	r9, [r3, #4]
   2b9f2:	f8c3 8005 	str.w	r8, [r3, #5]
   2b9f6:	f7ff fd37 	bl	2b468 <send_message>
   2b9fa:	4604      	mov	r4, r0
   2b9fc:	bb40      	cbnz	r0, 2ba50 <nrf_modem_gnss_start+0x8c>
   2b9fe:	2014      	movs	r0, #20
   2ba00:	f007 fbae 	bl	33160 <gnss_msg_alloc_and_set_common>
   2ba04:	b190      	cbz	r0, 2ba2c <nrf_modem_gnss_start+0x68>
   2ba06:	2200      	movs	r2, #0
   2ba08:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   2ba0c:	2701      	movs	r7, #1
   2ba0e:	6803      	ldr	r3, [r0, #0]
   2ba10:	7119      	strb	r1, [r3, #4]
   2ba12:	715a      	strb	r2, [r3, #5]
   2ba14:	4601      	mov	r1, r0
   2ba16:	719a      	strb	r2, [r3, #6]
   2ba18:	71da      	strb	r2, [r3, #7]
   2ba1a:	749f      	strb	r7, [r3, #18]
   2ba1c:	f241 2003 	movw	r0, #4611	; 0x1203
   2ba20:	f7ff fd22 	bl	2b468 <send_message>
   2ba24:	ea54 0300 	orrs.w	r3, r4, r0
   2ba28:	bf08      	it	eq
   2ba2a:	7037      	strbeq	r7, [r6, #0]
   2ba2c:	2014      	movs	r0, #20
   2ba2e:	f007 fb97 	bl	33160 <gnss_msg_alloc_and_set_common>
   2ba32:	4601      	mov	r1, r0
   2ba34:	b1a8      	cbz	r0, 2ba62 <nrf_modem_gnss_start+0x9e>
   2ba36:	2401      	movs	r4, #1
   2ba38:	6803      	ldr	r3, [r0, #0]
   2ba3a:	f241 0004 	movw	r0, #4100	; 0x1004
   2ba3e:	711c      	strb	r4, [r3, #4]
   2ba40:	f7ff fd12 	bl	2b468 <send_message>
   2ba44:	b900      	cbnz	r0, 2ba48 <nrf_modem_gnss_start+0x84>
   2ba46:	702c      	strb	r4, [r5, #0]
   2ba48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2ba4c:	f06f 040b 	mvn.w	r4, #11
   2ba50:	f04f 0801 	mov.w	r8, #1
   2ba54:	4547      	cmp	r7, r8
   2ba56:	d0d2      	beq.n	2b9fe <nrf_modem_gnss_start+0x3a>
   2ba58:	4647      	mov	r7, r8
   2ba5a:	e7c0      	b.n	2b9de <nrf_modem_gnss_start+0x1a>
   2ba5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ba60:	e7f2      	b.n	2ba48 <nrf_modem_gnss_start+0x84>
   2ba62:	f06f 000b 	mvn.w	r0, #11
   2ba66:	e7ef      	b.n	2ba48 <nrf_modem_gnss_start+0x84>
   2ba68:	20010795 	.word	0x20010795
   2ba6c:	20010794 	.word	0x20010794

0002ba70 <nrf_modem_gnss_prio_mode_enable>:
   2ba70:	b508      	push	{r3, lr}
   2ba72:	4b0c      	ldr	r3, [pc, #48]	; (2baa4 <nrf_modem_gnss_prio_mode_enable+0x34>)
   2ba74:	781b      	ldrb	r3, [r3, #0]
   2ba76:	2b01      	cmp	r3, #1
   2ba78:	d10d      	bne.n	2ba96 <nrf_modem_gnss_prio_mode_enable+0x26>
   2ba7a:	2014      	movs	r0, #20
   2ba7c:	f007 fb70 	bl	33160 <gnss_msg_alloc_and_set_common>
   2ba80:	4601      	mov	r1, r0
   2ba82:	b158      	cbz	r0, 2ba9c <nrf_modem_gnss_prio_mode_enable+0x2c>
   2ba84:	2202      	movs	r2, #2
   2ba86:	6803      	ldr	r3, [r0, #0]
   2ba88:	f241 0004 	movw	r0, #4100	; 0x1004
   2ba8c:	711a      	strb	r2, [r3, #4]
   2ba8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2ba92:	f7ff bce9 	b.w	2b468 <send_message>
   2ba96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ba9a:	bd08      	pop	{r3, pc}
   2ba9c:	f06f 000b 	mvn.w	r0, #11
   2baa0:	e7fb      	b.n	2ba9a <nrf_modem_gnss_prio_mode_enable+0x2a>
   2baa2:	bf00      	nop
   2baa4:	20010795 	.word	0x20010795

0002baa8 <nrf_modem_gnss_use_case_set>:
   2baa8:	b538      	push	{r3, r4, r5, lr}
   2baaa:	4b0f      	ldr	r3, [pc, #60]	; (2bae8 <nrf_modem_gnss_use_case_set+0x40>)
   2baac:	4604      	mov	r4, r0
   2baae:	781b      	ldrb	r3, [r3, #0]
   2bab0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   2bab4:	b98b      	cbnz	r3, 2bada <nrf_modem_gnss_use_case_set+0x32>
   2bab6:	2014      	movs	r0, #20
   2bab8:	f007 fb52 	bl	33160 <gnss_msg_alloc_and_set_common>
   2babc:	4601      	mov	r1, r0
   2babe:	b178      	cbz	r0, 2bae0 <nrf_modem_gnss_use_case_set+0x38>
   2bac0:	2202      	movs	r2, #2
   2bac2:	6803      	ldr	r3, [r0, #0]
   2bac4:	f241 1003 	movw	r0, #4355	; 0x1103
   2bac8:	711a      	strb	r2, [r3, #4]
   2baca:	715d      	strb	r5, [r3, #5]
   2bacc:	719d      	strb	r5, [r3, #6]
   2bace:	71dd      	strb	r5, [r3, #7]
   2bad0:	725c      	strb	r4, [r3, #9]
   2bad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bad6:	f7ff bcc7 	b.w	2b468 <send_message>
   2bada:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bade:	bd38      	pop	{r3, r4, r5, pc}
   2bae0:	f06f 000b 	mvn.w	r0, #11
   2bae4:	e7fb      	b.n	2bade <nrf_modem_gnss_use_case_set+0x36>
   2bae6:	bf00      	nop
   2bae8:	20010795 	.word	0x20010795

0002baec <nrf_modem_gnss_fix_interval_set>:
   2baec:	b538      	push	{r3, r4, r5, lr}
   2baee:	4b0f      	ldr	r3, [pc, #60]	; (2bb2c <nrf_modem_gnss_fix_interval_set+0x40>)
   2baf0:	4604      	mov	r4, r0
   2baf2:	781b      	ldrb	r3, [r3, #0]
   2baf4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   2baf8:	b993      	cbnz	r3, 2bb20 <nrf_modem_gnss_fix_interval_set+0x34>
   2bafa:	2014      	movs	r0, #20
   2bafc:	f007 fb30 	bl	33160 <gnss_msg_alloc_and_set_common>
   2bb00:	4601      	mov	r1, r0
   2bb02:	b180      	cbz	r0, 2bb26 <nrf_modem_gnss_fix_interval_set+0x3a>
   2bb04:	2208      	movs	r2, #8
   2bb06:	6803      	ldr	r3, [r0, #0]
   2bb08:	f241 1003 	movw	r0, #4355	; 0x1103
   2bb0c:	711a      	strb	r2, [r3, #4]
   2bb0e:	715d      	strb	r5, [r3, #5]
   2bb10:	719d      	strb	r5, [r3, #6]
   2bb12:	71dd      	strb	r5, [r3, #7]
   2bb14:	f8a3 400b 	strh.w	r4, [r3, #11]
   2bb18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bb1c:	f7ff bca4 	b.w	2b468 <send_message>
   2bb20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bb24:	bd38      	pop	{r3, r4, r5, pc}
   2bb26:	f06f 000b 	mvn.w	r0, #11
   2bb2a:	e7fb      	b.n	2bb24 <nrf_modem_gnss_fix_interval_set+0x38>
   2bb2c:	20010795 	.word	0x20010795

0002bb30 <nrf_modem_gnss_fix_retry_set>:
   2bb30:	b538      	push	{r3, r4, r5, lr}
   2bb32:	4b0f      	ldr	r3, [pc, #60]	; (2bb70 <nrf_modem_gnss_fix_retry_set+0x40>)
   2bb34:	4604      	mov	r4, r0
   2bb36:	781b      	ldrb	r3, [r3, #0]
   2bb38:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   2bb3c:	b993      	cbnz	r3, 2bb64 <nrf_modem_gnss_fix_retry_set+0x34>
   2bb3e:	2014      	movs	r0, #20
   2bb40:	f007 fb0e 	bl	33160 <gnss_msg_alloc_and_set_common>
   2bb44:	4601      	mov	r1, r0
   2bb46:	b180      	cbz	r0, 2bb6a <nrf_modem_gnss_fix_retry_set+0x3a>
   2bb48:	2210      	movs	r2, #16
   2bb4a:	6803      	ldr	r3, [r0, #0]
   2bb4c:	f241 1003 	movw	r0, #4355	; 0x1103
   2bb50:	711a      	strb	r2, [r3, #4]
   2bb52:	715d      	strb	r5, [r3, #5]
   2bb54:	719d      	strb	r5, [r3, #6]
   2bb56:	71dd      	strb	r5, [r3, #7]
   2bb58:	f8a3 400d 	strh.w	r4, [r3, #13]
   2bb5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bb60:	f7ff bc82 	b.w	2b468 <send_message>
   2bb64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bb68:	bd38      	pop	{r3, r4, r5, pc}
   2bb6a:	f06f 000b 	mvn.w	r0, #11
   2bb6e:	e7fb      	b.n	2bb68 <nrf_modem_gnss_fix_retry_set+0x38>
   2bb70:	20010795 	.word	0x20010795

0002bb74 <nrf_modem_gnss_power_mode_set>:
   2bb74:	b538      	push	{r3, r4, r5, lr}
   2bb76:	4b0f      	ldr	r3, [pc, #60]	; (2bbb4 <nrf_modem_gnss_power_mode_set+0x40>)
   2bb78:	4604      	mov	r4, r0
   2bb7a:	781b      	ldrb	r3, [r3, #0]
   2bb7c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   2bb80:	b98b      	cbnz	r3, 2bba6 <nrf_modem_gnss_power_mode_set+0x32>
   2bb82:	2014      	movs	r0, #20
   2bb84:	f007 faec 	bl	33160 <gnss_msg_alloc_and_set_common>
   2bb88:	4601      	mov	r1, r0
   2bb8a:	b178      	cbz	r0, 2bbac <nrf_modem_gnss_power_mode_set+0x38>
   2bb8c:	2240      	movs	r2, #64	; 0x40
   2bb8e:	6803      	ldr	r3, [r0, #0]
   2bb90:	f241 1003 	movw	r0, #4355	; 0x1103
   2bb94:	711a      	strb	r2, [r3, #4]
   2bb96:	715d      	strb	r5, [r3, #5]
   2bb98:	719d      	strb	r5, [r3, #6]
   2bb9a:	71dd      	strb	r5, [r3, #7]
   2bb9c:	745c      	strb	r4, [r3, #17]
   2bb9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bba2:	f7ff bc61 	b.w	2b468 <send_message>
   2bba6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bbaa:	bd38      	pop	{r3, r4, r5, pc}
   2bbac:	f06f 000b 	mvn.w	r0, #11
   2bbb0:	e7fb      	b.n	2bbaa <nrf_modem_gnss_power_mode_set+0x36>
   2bbb2:	bf00      	nop
   2bbb4:	20010795 	.word	0x20010795

0002bbb8 <nrf_modem_gnss_event_handler_set>:
   2bbb8:	4b05      	ldr	r3, [pc, #20]	; (2bbd0 <nrf_modem_gnss_event_handler_set+0x18>)
   2bbba:	781a      	ldrb	r2, [r3, #0]
   2bbbc:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   2bbc0:	b91a      	cbnz	r2, 2bbca <nrf_modem_gnss_event_handler_set+0x12>
   2bbc2:	4a04      	ldr	r2, [pc, #16]	; (2bbd4 <nrf_modem_gnss_event_handler_set+0x1c>)
   2bbc4:	6010      	str	r0, [r2, #0]
   2bbc6:	4618      	mov	r0, r3
   2bbc8:	4770      	bx	lr
   2bbca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bbce:	4770      	bx	lr
   2bbd0:	20010795 	.word	0x20010795
   2bbd4:	2000d890 	.word	0x2000d890

0002bbd8 <full_dfu_ipc_irq_handler>:
   2bbd8:	b510      	push	{r4, lr}
   2bbda:	4604      	mov	r4, r0
   2bbdc:	4b04      	ldr	r3, [pc, #16]	; (2bbf0 <full_dfu_ipc_irq_handler+0x18>)
   2bbde:	6818      	ldr	r0, [r3, #0]
   2bbe0:	f005 fd64 	bl	316ac <nrf_modem_os_sem_give>
   2bbe4:	07e3      	lsls	r3, r4, #31
   2bbe6:	bf42      	ittt	mi
   2bbe8:	2201      	movmi	r2, #1
   2bbea:	4b02      	ldrmi	r3, [pc, #8]	; (2bbf4 <full_dfu_ipc_irq_handler+0x1c>)
   2bbec:	701a      	strbmi	r2, [r3, #0]
   2bbee:	bd10      	pop	{r4, pc}
   2bbf0:	2000d8a0 	.word	0x2000d8a0
   2bbf4:	20010796 	.word	0x20010796

0002bbf8 <modem_ipc_wait_for_event>:
   2bbf8:	b508      	push	{r3, lr}
   2bbfa:	4b08      	ldr	r3, [pc, #32]	; (2bc1c <modem_ipc_wait_for_event+0x24>)
   2bbfc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   2bc00:	6818      	ldr	r0, [r3, #0]
   2bc02:	f005 fd55 	bl	316b0 <nrf_modem_os_sem_take>
   2bc06:	b930      	cbnz	r0, 2bc16 <modem_ipc_wait_for_event+0x1e>
   2bc08:	4b05      	ldr	r3, [pc, #20]	; (2bc20 <modem_ipc_wait_for_event+0x28>)
   2bc0a:	781b      	ldrb	r3, [r3, #0]
   2bc0c:	2b01      	cmp	r3, #1
   2bc0e:	bf08      	it	eq
   2bc10:	f06f 0004 	mvneq.w	r0, #4
   2bc14:	bd08      	pop	{r3, pc}
   2bc16:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2bc1a:	e7fb      	b.n	2bc14 <modem_ipc_wait_for_event+0x1c>
   2bc1c:	2000d8a0 	.word	0x2000d8a0
   2bc20:	20010796 	.word	0x20010796

0002bc24 <nrf_modem_full_dfu_setup>:
   2bc24:	2200      	movs	r2, #0
   2bc26:	2300      	movs	r3, #0
   2bc28:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bc2a:	4d2d      	ldr	r5, [pc, #180]	; (2bce0 <nrf_modem_full_dfu_setup+0xbc>)
   2bc2c:	4f2d      	ldr	r7, [pc, #180]	; (2bce4 <nrf_modem_full_dfu_setup+0xc0>)
   2bc2e:	e9c5 2302 	strd	r2, r3, [r5, #8]
   2bc32:	e9c5 2304 	strd	r2, r3, [r5, #16]
   2bc36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2bc3a:	4b2b      	ldr	r3, [pc, #172]	; (2bce8 <nrf_modem_full_dfu_setup+0xc4>)
   2bc3c:	2400      	movs	r4, #0
   2bc3e:	601a      	str	r2, [r3, #0]
   2bc40:	f100 031c 	add.w	r3, r0, #28
   2bc44:	603b      	str	r3, [r7, #0]
   2bc46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   2bc4a:	6043      	str	r3, [r0, #4]
   2bc4c:	231c      	movs	r3, #28
   2bc4e:	7203      	strb	r3, [r0, #8]
   2bc50:	2320      	movs	r3, #32
   2bc52:	2601      	movs	r6, #1
   2bc54:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   2bc58:	7243      	strb	r3, [r0, #9]
   2bc5a:	4b24      	ldr	r3, [pc, #144]	; (2bcec <nrf_modem_full_dfu_setup+0xc8>)
   2bc5c:	7004      	strb	r4, [r0, #0]
   2bc5e:	7044      	strb	r4, [r0, #1]
   2bc60:	70c2      	strb	r2, [r0, #3]
   2bc62:	7284      	strb	r4, [r0, #10]
   2bc64:	72c4      	strb	r4, [r0, #11]
   2bc66:	7086      	strb	r6, [r0, #2]
   2bc68:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   2bc6c:	702c      	strb	r4, [r5, #0]
   2bc6e:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   2bc72:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   2bc76:	4b1e      	ldr	r3, [pc, #120]	; (2bcf0 <nrf_modem_full_dfu_setup+0xcc>)
   2bc78:	b093      	sub	sp, #76	; 0x4c
   2bc7a:	4622      	mov	r2, r4
   2bc7c:	4620      	mov	r0, r4
   2bc7e:	491d      	ldr	r1, [pc, #116]	; (2bcf4 <nrf_modem_full_dfu_setup+0xd0>)
   2bc80:	701c      	strb	r4, [r3, #0]
   2bc82:	f7fd ff55 	bl	29b30 <nrfx_ipc_init>
   2bc86:	4621      	mov	r1, r4
   2bc88:	2240      	movs	r2, #64	; 0x40
   2bc8a:	a801      	add	r0, sp, #4
   2bc8c:	f007 ffef 	bl	33c6e <memset>
   2bc90:	2302      	movs	r3, #2
   2bc92:	9302      	str	r3, [sp, #8]
   2bc94:	2304      	movs	r3, #4
   2bc96:	930b      	str	r3, [sp, #44]	; 0x2c
   2bc98:	2305      	movs	r3, #5
   2bc9a:	a801      	add	r0, sp, #4
   2bc9c:	9311      	str	r3, [sp, #68]	; 0x44
   2bc9e:	9609      	str	r6, [sp, #36]	; 0x24
   2bca0:	f7fd ff5e 	bl	29b60 <nrfx_ipc_config_load>
   2bca4:	4621      	mov	r1, r4
   2bca6:	4632      	mov	r2, r6
   2bca8:	4813      	ldr	r0, [pc, #76]	; (2bcf8 <nrf_modem_full_dfu_setup+0xd4>)
   2bcaa:	683f      	ldr	r7, [r7, #0]
   2bcac:	f7f9 fd84 	bl	257b8 <nrf_modem_os_sem_init>
   2bcb0:	4b12      	ldr	r3, [pc, #72]	; (2bcfc <nrf_modem_full_dfu_setup+0xd8>)
   2bcb2:	9400      	str	r4, [sp, #0]
   2bcb4:	611c      	str	r4, [r3, #16]
   2bcb6:	691b      	ldr	r3, [r3, #16]
   2bcb8:	9300      	str	r3, [sp, #0]
   2bcba:	9b00      	ldr	r3, [sp, #0]
   2bcbc:	f7ff ff9c 	bl	2bbf8 <modem_ipc_wait_for_event>
   2bcc0:	4604      	mov	r4, r0
   2bcc2:	b130      	cbz	r0, 2bcd2 <nrf_modem_full_dfu_setup+0xae>
   2bcc4:	2303      	movs	r3, #3
   2bcc6:	702b      	strb	r3, [r5, #0]
   2bcc8:	f7fd ff6a 	bl	29ba0 <nrfx_ipc_uninit>
   2bccc:	4620      	mov	r0, r4
   2bcce:	b013      	add	sp, #76	; 0x4c
   2bcd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2bcd2:	683a      	ldr	r2, [r7, #0]
   2bcd4:	4b0a      	ldr	r3, [pc, #40]	; (2bd00 <nrf_modem_full_dfu_setup+0xdc>)
   2bcd6:	429a      	cmp	r2, r3
   2bcd8:	d0f8      	beq.n	2bccc <nrf_modem_full_dfu_setup+0xa8>
   2bcda:	f06f 0404 	mvn.w	r4, #4
   2bcde:	e7f3      	b.n	2bcc8 <nrf_modem_full_dfu_setup+0xa4>
   2bce0:	2000ce78 	.word	0x2000ce78
   2bce4:	2000d8a4 	.word	0x2000d8a4
   2bce8:	2000d8a8 	.word	0x2000d8a8
   2bcec:	4002a000 	.word	0x4002a000
   2bcf0:	20010796 	.word	0x20010796
   2bcf4:	0002bbd9 	.word	0x0002bbd9
   2bcf8:	2000d8a0 	.word	0x2000d8a0
   2bcfc:	40005600 	.word	0x40005600
   2bd00:	a5000001 	.word	0xa5000001

0002bd04 <modem_off>:
   2bd04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bd06:	2501      	movs	r5, #1
   2bd08:	4c07      	ldr	r4, [pc, #28]	; (2bd28 <modem_off+0x24>)
   2bd0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   2bd0e:	6165      	str	r5, [r4, #20]
   2bd10:	f005 fcc2 	bl	31698 <nrf_modem_os_busywait>
   2bd14:	2300      	movs	r3, #0
   2bd16:	6163      	str	r3, [r4, #20]
   2bd18:	9301      	str	r3, [sp, #4]
   2bd1a:	6125      	str	r5, [r4, #16]
   2bd1c:	6923      	ldr	r3, [r4, #16]
   2bd1e:	9301      	str	r3, [sp, #4]
   2bd20:	9b01      	ldr	r3, [sp, #4]
   2bd22:	b003      	add	sp, #12
   2bd24:	bd30      	pop	{r4, r5, pc}
   2bd26:	bf00      	nop
   2bd28:	40005600 	.word	0x40005600

0002bd2c <nrf_modem_init>:
   2bd2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bd2e:	4604      	mov	r4, r0
   2bd30:	460d      	mov	r5, r1
   2bd32:	f000 f86d 	bl	2be10 <nrf_modem_state_is_uninitialized>
   2bd36:	2800      	cmp	r0, #0
   2bd38:	d037      	beq.n	2bdaa <nrf_modem_init+0x7e>
   2bd3a:	2c00      	cmp	r4, #0
   2bd3c:	d038      	beq.n	2bdb0 <nrf_modem_init+0x84>
   2bd3e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2bd40:	2800      	cmp	r0, #0
   2bd42:	d038      	beq.n	2bdb6 <nrf_modem_init+0x8a>
   2bd44:	f000 f840 	bl	2bdc8 <nrf_modem_fault_handler_set>
   2bd48:	2d01      	cmp	r5, #1
   2bd4a:	d017      	beq.n	2bd7c <nrf_modem_init+0x50>
   2bd4c:	f7f9 fd92 	bl	25874 <nrf_modem_os_init>
   2bd50:	6a23      	ldr	r3, [r4, #32]
   2bd52:	4668      	mov	r0, sp
   2bd54:	9400      	str	r4, [sp, #0]
   2bd56:	f88d 3004 	strb.w	r3, [sp, #4]
   2bd5a:	f7fe fa25 	bl	2a1a8 <rpc_transport_ipc_init>
   2bd5e:	4604      	mov	r4, r0
   2bd60:	bb00      	cbnz	r0, 2bda4 <nrf_modem_init+0x78>
   2bd62:	f7ff f9e3 	bl	2b12c <nrf_modem_at_init>
   2bd66:	4604      	mov	r4, r0
   2bd68:	b9e0      	cbnz	r0, 2bda4 <nrf_modem_init+0x78>
   2bd6a:	f7fe fe3b 	bl	2a9e4 <ip_interface_init>
   2bd6e:	4604      	mov	r4, r0
   2bd70:	b9c0      	cbnz	r0, 2bda4 <nrf_modem_init+0x78>
   2bd72:	4b14      	ldr	r3, [pc, #80]	; (2bdc4 <nrf_modem_init+0x98>)
   2bd74:	701d      	strb	r5, [r3, #0]
   2bd76:	4620      	mov	r0, r4
   2bd78:	b003      	add	sp, #12
   2bd7a:	bd30      	pop	{r4, r5, pc}
   2bd7c:	69e2      	ldr	r2, [r4, #28]
   2bd7e:	6863      	ldr	r3, [r4, #4]
   2bd80:	4413      	add	r3, r2
   2bd82:	68e2      	ldr	r2, [r4, #12]
   2bd84:	4413      	add	r3, r2
   2bd86:	6962      	ldr	r2, [r4, #20]
   2bd88:	4413      	add	r3, r2
   2bd8a:	f242 021b 	movw	r2, #8219	; 0x201b
   2bd8e:	4293      	cmp	r3, r2
   2bd90:	d914      	bls.n	2bdbc <nrf_modem_init+0x90>
   2bd92:	6820      	ldr	r0, [r4, #0]
   2bd94:	f7ff ff46 	bl	2bc24 <nrf_modem_full_dfu_setup>
   2bd98:	4604      	mov	r4, r0
   2bd9a:	b918      	cbnz	r0, 2bda4 <nrf_modem_init+0x78>
   2bd9c:	2002      	movs	r0, #2
   2bd9e:	f000 f829 	bl	2bdf4 <nrf_modem_state_set>
   2bda2:	e7e6      	b.n	2bd72 <nrf_modem_init+0x46>
   2bda4:	f7ff ffae 	bl	2bd04 <modem_off>
   2bda8:	e7e5      	b.n	2bd76 <nrf_modem_init+0x4a>
   2bdaa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2bdae:	e7e2      	b.n	2bd76 <nrf_modem_init+0x4a>
   2bdb0:	f06f 040d 	mvn.w	r4, #13
   2bdb4:	e7df      	b.n	2bd76 <nrf_modem_init+0x4a>
   2bdb6:	f06f 0415 	mvn.w	r4, #21
   2bdba:	e7dc      	b.n	2bd76 <nrf_modem_init+0x4a>
   2bdbc:	f06f 040b 	mvn.w	r4, #11
   2bdc0:	e7d9      	b.n	2bd76 <nrf_modem_init+0x4a>
   2bdc2:	bf00      	nop
   2bdc4:	20010797 	.word	0x20010797

0002bdc8 <nrf_modem_fault_handler_set>:
   2bdc8:	4b01      	ldr	r3, [pc, #4]	; (2bdd0 <nrf_modem_fault_handler_set+0x8>)
   2bdca:	6018      	str	r0, [r3, #0]
   2bdcc:	4770      	bx	lr
   2bdce:	bf00      	nop
   2bdd0:	2000d8ac 	.word	0x2000d8ac

0002bdd4 <nrf_modem_fault_handler_internal>:
   2bdd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2bdd6:	460c      	mov	r4, r1
   2bdd8:	4605      	mov	r5, r0
   2bdda:	2003      	movs	r0, #3
   2bddc:	f000 f80a 	bl	2bdf4 <nrf_modem_state_set>
   2bde0:	4b03      	ldr	r3, [pc, #12]	; (2bdf0 <nrf_modem_fault_handler_internal+0x1c>)
   2bde2:	4668      	mov	r0, sp
   2bde4:	e9cd 5400 	strd	r5, r4, [sp]
   2bde8:	681b      	ldr	r3, [r3, #0]
   2bdea:	4798      	blx	r3
   2bdec:	b003      	add	sp, #12
   2bdee:	bd30      	pop	{r4, r5, pc}
   2bdf0:	2000d8ac 	.word	0x2000d8ac

0002bdf4 <nrf_modem_state_set>:
   2bdf4:	4b01      	ldr	r3, [pc, #4]	; (2bdfc <nrf_modem_state_set+0x8>)
   2bdf6:	7018      	strb	r0, [r3, #0]
   2bdf8:	4770      	bx	lr
   2bdfa:	bf00      	nop
   2bdfc:	20010798 	.word	0x20010798

0002be00 <nrf_modem_state_is_initialized>:
   2be00:	4b02      	ldr	r3, [pc, #8]	; (2be0c <nrf_modem_state_is_initialized+0xc>)
   2be02:	7818      	ldrb	r0, [r3, #0]
   2be04:	1e43      	subs	r3, r0, #1
   2be06:	4258      	negs	r0, r3
   2be08:	4158      	adcs	r0, r3
   2be0a:	4770      	bx	lr
   2be0c:	20010798 	.word	0x20010798

0002be10 <nrf_modem_state_is_uninitialized>:
   2be10:	4b02      	ldr	r3, [pc, #8]	; (2be1c <nrf_modem_state_is_uninitialized+0xc>)
   2be12:	7818      	ldrb	r0, [r3, #0]
   2be14:	fab0 f080 	clz	r0, r0
   2be18:	0940      	lsrs	r0, r0, #5
   2be1a:	4770      	bx	lr
   2be1c:	20010798 	.word	0x20010798

0002be20 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2be20:	4b0e      	ldr	r3, [pc, #56]	; (2be5c <z_sys_init_run_level+0x3c>)
{
   2be22:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2be24:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2be28:	3001      	adds	r0, #1
   2be2a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2be2e:	42a6      	cmp	r6, r4
   2be30:	d800      	bhi.n	2be34 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   2be32:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   2be34:	e9d4 3500 	ldrd	r3, r5, [r4]
   2be38:	4628      	mov	r0, r5
   2be3a:	4798      	blx	r3
		if (dev != NULL) {
   2be3c:	b165      	cbz	r5, 2be58 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   2be3e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   2be40:	b130      	cbz	r0, 2be50 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   2be42:	2800      	cmp	r0, #0
   2be44:	bfb8      	it	lt
   2be46:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   2be48:	28ff      	cmp	r0, #255	; 0xff
   2be4a:	bfa8      	it	ge
   2be4c:	20ff      	movge	r0, #255	; 0xff
   2be4e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   2be50:	785a      	ldrb	r2, [r3, #1]
   2be52:	f042 0201 	orr.w	r2, r2, #1
   2be56:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2be58:	3408      	adds	r4, #8
   2be5a:	e7e8      	b.n	2be2e <z_sys_init_run_level+0xe>
   2be5c:	00035368 	.word	0x00035368

0002be60 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   2be60:	4b01      	ldr	r3, [pc, #4]	; (2be68 <z_impl_z_errno+0x8>)
   2be62:	6898      	ldr	r0, [r3, #8]
}
   2be64:	3064      	adds	r0, #100	; 0x64
   2be66:	4770      	bx	lr
   2be68:	2000d8b0 	.word	0x2000d8b0

0002be6c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2be6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2be70:	4606      	mov	r6, r0
   2be72:	b086      	sub	sp, #24
   2be74:	460f      	mov	r7, r1
	__asm__ volatile(
   2be76:	f04f 0320 	mov.w	r3, #32
   2be7a:	f3ef 8811 	mrs	r8, BASEPRI
   2be7e:	f383 8812 	msr	BASEPRI_MAX, r3
   2be82:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2be86:	f000 ff9f 	bl	2cdc8 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2be8a:	2400      	movs	r4, #0
   2be8c:	2e04      	cmp	r6, #4
   2be8e:	bf96      	itet	ls
   2be90:	4b21      	ldrls	r3, [pc, #132]	; (2bf18 <z_fatal_error+0xac>)
   2be92:	4b22      	ldrhi	r3, [pc, #136]	; (2bf1c <z_fatal_error+0xb0>)
   2be94:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
   2be98:	4605      	mov	r5, r0
   2be9a:	e9cd 3404 	strd	r3, r4, [sp, #16]
   2be9e:	4b20      	ldr	r3, [pc, #128]	; (2bf20 <z_fatal_error+0xb4>)
   2bea0:	2201      	movs	r2, #1
   2bea2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2bea6:	4620      	mov	r0, r4
   2bea8:	4623      	mov	r3, r4
   2beaa:	491e      	ldr	r1, [pc, #120]	; (2bf24 <z_fatal_error+0xb8>)
   2beac:	9603      	str	r6, [sp, #12]
   2beae:	9400      	str	r4, [sp, #0]
   2beb0:	f007 f9cb 	bl	3324a <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2beb4:	b16f      	cbz	r7, 2bed2 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   2beb6:	69fb      	ldr	r3, [r7, #28]
   2beb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2bebc:	b14b      	cbz	r3, 2bed2 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   2bebe:	4b1a      	ldr	r3, [pc, #104]	; (2bf28 <z_fatal_error+0xbc>)
   2bec0:	2201      	movs	r2, #1
   2bec2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2bec6:	4620      	mov	r0, r4
   2bec8:	4623      	mov	r3, r4
   2beca:	4916      	ldr	r1, [pc, #88]	; (2bf24 <z_fatal_error+0xb8>)
   2becc:	9400      	str	r4, [sp, #0]
   2bece:	f007 f9bc 	bl	3324a <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   2bed2:	b12d      	cbz	r5, 2bee0 <z_fatal_error+0x74>
   2bed4:	4628      	mov	r0, r5
   2bed6:	f007 fa46 	bl	33366 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2beda:	b108      	cbz	r0, 2bee0 <z_fatal_error+0x74>
   2bedc:	7803      	ldrb	r3, [r0, #0]
   2bede:	b903      	cbnz	r3, 2bee2 <z_fatal_error+0x76>
		thread_name = "unknown";
   2bee0:	4812      	ldr	r0, [pc, #72]	; (2bf2c <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2bee2:	4b13      	ldr	r3, [pc, #76]	; (2bf30 <z_fatal_error+0xc4>)
   2bee4:	2201      	movs	r2, #1
   2bee6:	9302      	str	r3, [sp, #8]
   2bee8:	2300      	movs	r3, #0
   2beea:	e9cd 5003 	strd	r5, r0, [sp, #12]
   2beee:	e9cd 3300 	strd	r3, r3, [sp]
   2bef2:	4618      	mov	r0, r3
   2bef4:	490b      	ldr	r1, [pc, #44]	; (2bf24 <z_fatal_error+0xb8>)
   2bef6:	f007 f9a8 	bl	3324a <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   2befa:	4639      	mov	r1, r7
   2befc:	4630      	mov	r0, r6
   2befe:	f7fc f96b 	bl	281d8 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2bf02:	f388 8811 	msr	BASEPRI, r8
   2bf06:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2bf0a:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2bf0c:	b006      	add	sp, #24
   2bf0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2bf12:	f7f6 baa1 	b.w	22458 <z_impl_k_thread_abort>
   2bf16:	bf00      	nop
   2bf18:	00035380 	.word	0x00035380
   2bf1c:	00039e6a 	.word	0x00039e6a
   2bf20:	00039e80 	.word	0x00039e80
   2bf24:	00034ac8 	.word	0x00034ac8
   2bf28:	00039ea8 	.word	0x00039ea8
   2bf2c:	00039e78 	.word	0x00039e78
   2bf30:	00039ec9 	.word	0x00039ec9

0002bf34 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   2bf34:	2201      	movs	r2, #1
{
   2bf36:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2bf38:	4b09      	ldr	r3, [pc, #36]	; (2bf60 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2bf3a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   2bf3c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2bf3e:	f7ff ff6f 	bl	2be20 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2bf42:	f001 f9b7 	bl	2d2b4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   2bf46:	2003      	movs	r0, #3
   2bf48:	f7ff ff6a 	bl	2be20 <z_sys_init_run_level>

	z_init_static_threads();
   2bf4c:	f000 f928 	bl	2c1a0 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
   2bf50:	f7f3 f910 	bl	1f174 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   2bf54:	4a03      	ldr	r2, [pc, #12]	; (2bf64 <bg_thread_main+0x30>)
   2bf56:	7b13      	ldrb	r3, [r2, #12]
   2bf58:	f023 0301 	bic.w	r3, r3, #1
   2bf5c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2bf5e:	bd08      	pop	{r3, pc}
   2bf60:	20010799 	.word	0x20010799
   2bf64:	2000cf58 	.word	0x2000cf58

0002bf68 <z_bss_zero>:
{
   2bf68:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2bf6a:	4803      	ldr	r0, [pc, #12]	; (2bf78 <z_bss_zero+0x10>)
   2bf6c:	4a03      	ldr	r2, [pc, #12]	; (2bf7c <z_bss_zero+0x14>)
   2bf6e:	2100      	movs	r1, #0
   2bf70:	1a12      	subs	r2, r2, r0
   2bf72:	f007 f97a 	bl	3326a <z_early_memset>
}
   2bf76:	bd08      	pop	{r3, pc}
   2bf78:	2000ca90 	.word	0x2000ca90
   2bf7c:	2001079c 	.word	0x2001079c

0002bf80 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
   2bf80:	23c8      	movs	r3, #200	; 0xc8
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   2bf82:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   2bf84:	4e13      	ldr	r6, [pc, #76]	; (2bfd4 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
   2bf86:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
   2bf88:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   2bf8c:	2300      	movs	r3, #0
{
   2bf8e:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   2bf90:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2bf94:	220f      	movs	r2, #15
   2bf96:	9301      	str	r3, [sp, #4]
   2bf98:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2bf9c:	231c      	movs	r3, #28
	z_setup_new_thread(thread, stack,
   2bf9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2bfa2:	4d0d      	ldr	r5, [pc, #52]	; (2bfd8 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
   2bfa4:	490d      	ldr	r1, [pc, #52]	; (2bfdc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2bfa6:	fb03 5500 	mla	r5, r3, r0, r5
{
   2bfaa:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   2bfac:	fb02 1100 	mla	r1, r2, r0, r1
   2bfb0:	4b0b      	ldr	r3, [pc, #44]	; (2bfe0 <z_init_cpu+0x60>)
   2bfb2:	4630      	mov	r0, r6
   2bfb4:	9500      	str	r5, [sp, #0]
   2bfb6:	f000 f897 	bl	2c0e8 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2bfba:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2bfbc:	4809      	ldr	r0, [pc, #36]	; (2bfe4 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
   2bfbe:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   2bfc0:	3401      	adds	r4, #1
   2bfc2:	f023 0304 	bic.w	r3, r3, #4
   2bfc6:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
   2bfca:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   2bfcc:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
   2bfce:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   2bfd0:	b006      	add	sp, #24
   2bfd2:	bd70      	pop	{r4, r5, r6, pc}
   2bfd4:	2000ce90 	.word	0x2000ce90
   2bfd8:	2000d8b0 	.word	0x2000d8b0
   2bfdc:	200135a0 	.word	0x200135a0
   2bfe0:	0002c259 	.word	0x0002c259
   2bfe4:	200136e0 	.word	0x200136e0

0002bfe8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   2bfe8:	b500      	push	{lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   2bfea:	4b2f      	ldr	r3, [pc, #188]	; (2c0a8 <z_cstart+0xc0>)
   2bfec:	b0bb      	sub	sp, #236	; 0xec
	uint32_t msp =
   2bfee:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2bff2:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   2bff6:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2bffa:	2400      	movs	r4, #0
   2bffc:	23e0      	movs	r3, #224	; 0xe0
   2bffe:	4d2b      	ldr	r5, [pc, #172]	; (2c0ac <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   2c000:	4e2b      	ldr	r6, [pc, #172]	; (2c0b0 <z_cstart+0xc8>)
   2c002:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2c006:	77ec      	strb	r4, [r5, #31]
   2c008:	762c      	strb	r4, [r5, #24]
   2c00a:	766c      	strb	r4, [r5, #25]
   2c00c:	76ac      	strb	r4, [r5, #26]
   2c00e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   2c012:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2c014:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2c018:	626b      	str	r3, [r5, #36]	; 0x24
   2c01a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2c01e:	f7f6 f981 	bl	22324 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   2c022:	f7f5 fcc7 	bl	219b4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2c026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c02a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2c02c:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2c02e:	f7f6 fbb7 	bl	227a0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2c032:	f7f6 fa27 	bl	22484 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   2c036:	f7f4 fba1 	bl	2077c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2c03a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   2c03e:	ad08      	add	r5, sp, #32
   2c040:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
   2c042:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	dummy_thread->stack_info.size = 0U;
   2c046:	e9cd 4422 	strd	r4, r4, [sp, #136]	; 0x88
	k_thread_system_pool_assign(dummy_thread);
   2c04a:	f001 f913 	bl	2d274 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   2c04e:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2c050:	f007 f8f0 	bl	33234 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2c054:	4620      	mov	r0, r4
   2c056:	f7ff fee3 	bl	2be20 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2c05a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   2c05c:	4d15      	ldr	r5, [pc, #84]	; (2c0b4 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2c05e:	f7ff fedf 	bl	2be20 <z_sys_init_run_level>
	z_sched_init();
   2c062:	f000 fe03 	bl	2cc6c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2c066:	4b14      	ldr	r3, [pc, #80]	; (2c0b8 <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
   2c068:	6235      	str	r5, [r6, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2c06a:	9305      	str	r3, [sp, #20]
   2c06c:	2301      	movs	r3, #1
   2c06e:	4e13      	ldr	r6, [pc, #76]	; (2c0bc <z_cstart+0xd4>)
   2c070:	4913      	ldr	r1, [pc, #76]	; (2c0c0 <z_cstart+0xd8>)
   2c072:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2c076:	e9cd 4303 	strd	r4, r3, [sp, #12]
   2c07a:	4628      	mov	r0, r5
   2c07c:	4633      	mov	r3, r6
   2c07e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2c082:	9400      	str	r4, [sp, #0]
   2c084:	f000 f830 	bl	2c0e8 <z_setup_new_thread>
   2c088:	7b6a      	ldrb	r2, [r5, #13]
   2c08a:	9007      	str	r0, [sp, #28]
   2c08c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   2c090:	4628      	mov	r0, r5
   2c092:	736a      	strb	r2, [r5, #13]
   2c094:	f007 fb15 	bl	336c2 <z_ready_thread>
	z_init_cpu(0);
   2c098:	4620      	mov	r0, r4
   2c09a:	f7ff ff71 	bl	2bf80 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2c09e:	4632      	mov	r2, r6
   2c0a0:	4628      	mov	r0, r5
   2c0a2:	9907      	ldr	r1, [sp, #28]
   2c0a4:	f7f5 fe40 	bl	21d28 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2c0a8:	200136e0 	.word	0x200136e0
   2c0ac:	e000ed00 	.word	0xe000ed00
   2c0b0:	2000d8b0 	.word	0x2000d8b0
   2c0b4:	2000cf58 	.word	0x2000cf58
   2c0b8:	00039f2b 	.word	0x00039f2b
   2c0bc:	0002bf35 	.word	0x0002bf35
   2c0c0:	200125a0 	.word	0x200125a0

0002c0c4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   2c0c4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2c0c6:	4c06      	ldr	r4, [pc, #24]	; (2c0e0 <statics_init+0x1c>)
   2c0c8:	4d06      	ldr	r5, [pc, #24]	; (2c0e4 <statics_init+0x20>)
   2c0ca:	42ac      	cmp	r4, r5
   2c0cc:	d301      	bcc.n	2c0d2 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2c0ce:	2000      	movs	r0, #0
   2c0d0:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   2c0d2:	4620      	mov	r0, r4
   2c0d4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2c0d8:	f007 f8cb 	bl	33272 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2c0dc:	3414      	adds	r4, #20
   2c0de:	e7f4      	b.n	2c0ca <statics_init+0x6>
   2c0e0:	2000c8ec 	.word	0x2000c8ec
   2c0e4:	2000c914 	.word	0x2000c914

0002c0e8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2c0e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   2c0ec:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2c0ee:	f100 0558 	add.w	r5, r0, #88	; 0x58
   2c0f2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2c0f4:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   2c0f6:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
   2c0fa:	2500      	movs	r5, #0
{
   2c0fc:	4604      	mov	r4, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2c0fe:	3207      	adds	r2, #7
   2c100:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   2c104:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	thread_base->thread_state = (uint8_t)initial_state;
   2c108:	7346      	strb	r6, [r0, #13]
	stack_ptr = (char *)stack + stack_obj_size;
   2c10a:	eb01 0802 	add.w	r8, r1, r2

	thread_base->prio = priority;
   2c10e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2c110:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2c112:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
   2c116:	6085      	str	r5, [r0, #8]
	thread_base->prio = priority;
   2c118:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
   2c11a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   2c11c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2c11e:	9202      	str	r2, [sp, #8]
   2c120:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c122:	9201      	str	r2, [sp, #4]
   2c124:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c126:	9200      	str	r2, [sp, #0]
   2c128:	4642      	mov	r2, r8
   2c12a:	f7f5 fddd 	bl	21ce8 <arch_new_thread>
	if (!_current) {
   2c12e:	4b05      	ldr	r3, [pc, #20]	; (2c144 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   2c130:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   2c132:	689b      	ldr	r3, [r3, #8]
   2c134:	b103      	cbz	r3, 2c138 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   2c136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   2c138:	4640      	mov	r0, r8
   2c13a:	6763      	str	r3, [r4, #116]	; 0x74
   2c13c:	b004      	add	sp, #16
   2c13e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c142:	bf00      	nop
   2c144:	2000d8b0 	.word	0x2000d8b0

0002c148 <z_impl_k_thread_create>:
{
   2c148:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c14a:	2700      	movs	r7, #0
{
   2c14c:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c14e:	9705      	str	r7, [sp, #20]
   2c150:	9f10      	ldr	r7, [sp, #64]	; 0x40
{
   2c152:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c156:	9704      	str	r7, [sp, #16]
   2c158:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
{
   2c15a:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2c15c:	9703      	str	r7, [sp, #12]
   2c15e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   2c160:	9702      	str	r7, [sp, #8]
   2c162:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2c164:	9701      	str	r7, [sp, #4]
   2c166:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2c168:	9700      	str	r7, [sp, #0]
   2c16a:	f7ff ffbd 	bl	2c0e8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2c16e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2c172:	bf08      	it	eq
   2c174:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   2c178:	d005      	beq.n	2c186 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2c17a:	ea55 0306 	orrs.w	r3, r5, r6
   2c17e:	d105      	bne.n	2c18c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   2c180:	4620      	mov	r0, r4
   2c182:	f000 fc6d 	bl	2ca60 <z_sched_start>
}
   2c186:	4620      	mov	r0, r4
   2c188:	b007      	add	sp, #28
   2c18a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2c18c:	4632      	mov	r2, r6
   2c18e:	462b      	mov	r3, r5
   2c190:	4902      	ldr	r1, [pc, #8]	; (2c19c <z_impl_k_thread_create+0x54>)
   2c192:	f104 0018 	add.w	r0, r4, #24
   2c196:	f000 fef3 	bl	2cf80 <z_add_timeout>
   2c19a:	e7f4      	b.n	2c186 <z_impl_k_thread_create+0x3e>
   2c19c:	000336e3 	.word	0x000336e3

0002c1a0 <z_init_static_threads>:
{
   2c1a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c1a4:	4c29      	ldr	r4, [pc, #164]	; (2c24c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2c1a6:	4d2a      	ldr	r5, [pc, #168]	; (2c250 <z_init_static_threads+0xb0>)
{
   2c1a8:	b087      	sub	sp, #28
   2c1aa:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   2c1ac:	42ae      	cmp	r6, r5
   2c1ae:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2c1b2:	d30f      	bcc.n	2c1d4 <z_init_static_threads+0x34>
	k_sched_lock();
   2c1b4:	f000 fb6e 	bl	2c894 <k_sched_lock>
   2c1b8:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2c1bc:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
   2c1c0:	4c22      	ldr	r4, [pc, #136]	; (2c24c <z_init_static_threads+0xac>)
   2c1c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2c254 <z_init_static_threads+0xb4>
   2c1c6:	42ac      	cmp	r4, r5
   2c1c8:	d320      	bcc.n	2c20c <z_init_static_threads+0x6c>
}
   2c1ca:	b007      	add	sp, #28
   2c1cc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2c1d0:	f000 bd30 	b.w	2cc34 <k_sched_unlock>
		z_setup_new_thread(
   2c1d4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2c1d8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2c1dc:	9305      	str	r3, [sp, #20]
   2c1de:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2c1e2:	9304      	str	r3, [sp, #16]
   2c1e4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2c1e8:	9303      	str	r3, [sp, #12]
   2c1ea:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2c1ee:	9302      	str	r3, [sp, #8]
   2c1f0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2c1f4:	9301      	str	r3, [sp, #4]
   2c1f6:	f854 3c20 	ldr.w	r3, [r4, #-32]
   2c1fa:	9300      	str	r3, [sp, #0]
   2c1fc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2c200:	f7ff ff72 	bl	2c0e8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2c204:	f854 3c30 	ldr.w	r3, [r4, #-48]
   2c208:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   2c20a:	e7ce      	b.n	2c1aa <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2c20c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c20e:	1c5a      	adds	r2, r3, #1
   2c210:	d00d      	beq.n	2c22e <z_init_static_threads+0x8e>
   2c212:	2100      	movs	r1, #0
   2c214:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
   2c216:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c21a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2c21e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2c222:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2c226:	d104      	bne.n	2c232 <z_init_static_threads+0x92>
	z_sched_start(thread);
   2c228:	4640      	mov	r0, r8
   2c22a:	f000 fc19 	bl	2ca60 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2c22e:	3430      	adds	r4, #48	; 0x30
   2c230:	e7c9      	b.n	2c1c6 <z_init_static_threads+0x26>
   2c232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c236:	2300      	movs	r3, #0
   2c238:	f7f0 fdba 	bl	1cdb0 <__aeabi_uldivmod>
   2c23c:	4602      	mov	r2, r0
   2c23e:	460b      	mov	r3, r1
   2c240:	f108 0018 	add.w	r0, r8, #24
   2c244:	4649      	mov	r1, r9
   2c246:	f000 fe9b 	bl	2cf80 <z_add_timeout>
   2c24a:	e7f0      	b.n	2c22e <z_init_static_threads+0x8e>
   2c24c:	2000c8ec 	.word	0x2000c8ec
   2c250:	2000c8ec 	.word	0x2000c8ec
   2c254:	000336e3 	.word	0x000336e3

0002c258 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2c258:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2c25a:	4c0b      	ldr	r4, [pc, #44]	; (2c288 <idle+0x30>)
   2c25c:	4d0b      	ldr	r5, [pc, #44]	; (2c28c <idle+0x34>)
	__asm__ volatile(
   2c25e:	f04f 0220 	mov.w	r2, #32
   2c262:	f3ef 8311 	mrs	r3, BASEPRI
   2c266:	f382 8812 	msr	BASEPRI_MAX, r2
   2c26a:	f3bf 8f6f 	isb	sy
   2c26e:	f007 fadf 	bl	33830 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2c272:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2c274:	61e0      	str	r0, [r4, #28]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2c276:	b913      	cbnz	r3, 2c27e <idle+0x26>
	arch_cpu_idle();
   2c278:	f7f5 fba2 	bl	219c0 <arch_cpu_idle>
}
   2c27c:	e7ef      	b.n	2c25e <idle+0x6>
   2c27e:	f7f5 fad5 	bl	2182c <pm_system_suspend>
   2c282:	2800      	cmp	r0, #0
   2c284:	d1eb      	bne.n	2c25e <idle+0x6>
   2c286:	e7f7      	b.n	2c278 <idle+0x20>
   2c288:	2000d8b0 	.word	0x2000d8b0
   2c28c:	20010799 	.word	0x20010799

0002c290 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   2c290:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c292:	469c      	mov	ip, r3
   2c294:	4604      	mov	r4, r0
   2c296:	b085      	sub	sp, #20

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2c298:	f100 0708 	add.w	r7, r0, #8
   2c29c:	f04f 0520 	mov.w	r5, #32
   2c2a0:	f3ef 8611 	mrs	r6, BASEPRI
   2c2a4:	f385 8812 	msr	BASEPRI_MAX, r5
   2c2a8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   2c2ac:	68c3      	ldr	r3, [r0, #12]
   2c2ae:	6a05      	ldr	r5, [r0, #32]
   2c2b0:	429d      	cmp	r5, r3
   2c2b2:	d231      	bcs.n	2c318 <z_impl_k_msgq_put+0x88>
   2c2b4:	9103      	str	r1, [sp, #12]
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2c2b6:	f007 fa60 	bl	3377a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2c2ba:	68a2      	ldr	r2, [r4, #8]
   2c2bc:	4605      	mov	r5, r0
   2c2be:	9903      	ldr	r1, [sp, #12]
   2c2c0:	b170      	cbz	r0, 2c2e0 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2c2c2:	2400      	movs	r4, #0
   2c2c4:	6940      	ldr	r0, [r0, #20]
   2c2c6:	f007 fcb2 	bl	33c2e <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   2c2ca:	4628      	mov	r0, r5
   2c2cc:	67ec      	str	r4, [r5, #124]	; 0x7c
   2c2ce:	f007 f9f8 	bl	336c2 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   2c2d2:	4638      	mov	r0, r7
   2c2d4:	4631      	mov	r1, r6
   2c2d6:	f000 facb 	bl	2c870 <z_reschedule>
			return 0;
   2c2da:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2c2dc:	b005      	add	sp, #20
   2c2de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2c2e0:	69e0      	ldr	r0, [r4, #28]
   2c2e2:	f007 fca4 	bl	33c2e <memcpy>
			msgq->write_ptr += msgq->msg_size;
   2c2e6:	69e3      	ldr	r3, [r4, #28]
   2c2e8:	68a2      	ldr	r2, [r4, #8]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   2c2ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->write_ptr += msgq->msg_size;
   2c2ee:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2c2f0:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   2c2f2:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   2c2f4:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2c2f6:	bf08      	it	eq
   2c2f8:	6923      	ldreq	r3, [r4, #16]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   2c2fa:	f04f 0110 	mov.w	r1, #16
				msgq->write_ptr = msgq->buffer_start;
   2c2fe:	bf08      	it	eq
   2c300:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   2c302:	6a23      	ldr	r3, [r4, #32]
   2c304:	3301      	adds	r3, #1
   2c306:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   2c308:	f007 fc26 	bl	33b58 <z_handle_obj_poll_events>
		result = 0;
   2c30c:	2000      	movs	r0, #0
	__asm__ volatile(
   2c30e:	f386 8811 	msr	BASEPRI, r6
   2c312:	f3bf 8f6f 	isb	sy
	return result;
   2c316:	e7e1      	b.n	2c2dc <z_impl_k_msgq_put+0x4c>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c318:	ea52 000c 	orrs.w	r0, r2, ip
   2c31c:	d00a      	beq.n	2c334 <z_impl_k_msgq_put+0xa4>
		_current->base.swap_data = (void *) data;
   2c31e:	4807      	ldr	r0, [pc, #28]	; (2c33c <z_impl_k_msgq_put+0xac>)
   2c320:	6880      	ldr	r0, [r0, #8]
   2c322:	6141      	str	r1, [r0, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2c324:	e9cd 2c00 	strd	r2, ip, [sp]
   2c328:	4631      	mov	r1, r6
   2c32a:	4622      	mov	r2, r4
   2c32c:	4638      	mov	r0, r7
   2c32e:	f000 fbf3 	bl	2cb18 <z_pend_curr>
		return result;
   2c332:	e7d3      	b.n	2c2dc <z_impl_k_msgq_put+0x4c>
		result = -ENOMSG;
   2c334:	f06f 0022 	mvn.w	r0, #34	; 0x22
   2c338:	e7e9      	b.n	2c30e <z_impl_k_msgq_put+0x7e>
   2c33a:	bf00      	nop
   2c33c:	2000d8b0 	.word	0x2000d8b0

0002c340 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   2c340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c342:	4604      	mov	r4, r0
   2c344:	4608      	mov	r0, r1

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   2c346:	f104 0708 	add.w	r7, r4, #8
	__asm__ volatile(
   2c34a:	f04f 0120 	mov.w	r1, #32
   2c34e:	f3ef 8611 	mrs	r6, BASEPRI
   2c352:	f381 8812 	msr	BASEPRI_MAX, r1
   2c356:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   2c35a:	6a21      	ldr	r1, [r4, #32]
   2c35c:	2900      	cmp	r1, #0
   2c35e:	d031      	beq.n	2c3c4 <z_impl_k_msgq_get+0x84>
   2c360:	68a2      	ldr	r2, [r4, #8]
   2c362:	69a1      	ldr	r1, [r4, #24]
   2c364:	f007 fc63 	bl	33c2e <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   2c368:	69a3      	ldr	r3, [r4, #24]
   2c36a:	68a2      	ldr	r2, [r4, #8]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2c36c:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   2c36e:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   2c370:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   2c372:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   2c374:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   2c376:	bf04      	itt	eq
   2c378:	6923      	ldreq	r3, [r4, #16]
   2c37a:	61a3      	streq	r3, [r4, #24]
		msgq->used_msgs--;
   2c37c:	6a23      	ldr	r3, [r4, #32]
   2c37e:	3b01      	subs	r3, #1
   2c380:	6223      	str	r3, [r4, #32]
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   2c382:	f007 f9fa 	bl	3377a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2c386:	4605      	mov	r5, r0
   2c388:	b360      	cbz	r0, 2c3e4 <z_impl_k_msgq_get+0xa4>
   2c38a:	6941      	ldr	r1, [r0, #20]
   2c38c:	68a2      	ldr	r2, [r4, #8]
   2c38e:	69e0      	ldr	r0, [r4, #28]
   2c390:	f007 fc4d 	bl	33c2e <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   2c394:	69e3      	ldr	r3, [r4, #28]
   2c396:	68a2      	ldr	r2, [r4, #8]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   2c398:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   2c39a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2c39c:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   2c39e:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   2c3a0:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2c3a2:	bf04      	itt	eq
   2c3a4:	6923      	ldreq	r3, [r4, #16]
   2c3a6:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   2c3a8:	6a23      	ldr	r3, [r4, #32]
   2c3aa:	3301      	adds	r3, #1
   2c3ac:	6223      	str	r3, [r4, #32]
   2c3ae:	2400      	movs	r4, #0
   2c3b0:	67ec      	str	r4, [r5, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2c3b2:	f007 f986 	bl	336c2 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   2c3b6:	4638      	mov	r0, r7
   2c3b8:	4631      	mov	r1, r6
   2c3ba:	f000 fa59 	bl	2c870 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   2c3be:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   2c3c0:	b003      	add	sp, #12
   2c3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c3c4:	ea52 0103 	orrs.w	r1, r2, r3
   2c3c8:	d00a      	beq.n	2c3e0 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   2c3ca:	4909      	ldr	r1, [pc, #36]	; (2c3f0 <z_impl_k_msgq_get+0xb0>)
   2c3cc:	6889      	ldr	r1, [r1, #8]
   2c3ce:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2c3d0:	e9cd 2300 	strd	r2, r3, [sp]
   2c3d4:	4631      	mov	r1, r6
   2c3d6:	4622      	mov	r2, r4
   2c3d8:	4638      	mov	r0, r7
   2c3da:	f000 fb9d 	bl	2cb18 <z_pend_curr>
		return result;
   2c3de:	e7ef      	b.n	2c3c0 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   2c3e0:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   2c3e4:	f386 8811 	msr	BASEPRI, r6
   2c3e8:	f3bf 8f6f 	isb	sy
	return result;
   2c3ec:	e7e8      	b.n	2c3c0 <z_impl_k_msgq_get+0x80>
   2c3ee:	bf00      	nop
   2c3f0:	2000d8b0 	.word	0x2000d8b0

0002c3f4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2c3f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c3f8:	4604      	mov	r4, r0
   2c3fa:	4617      	mov	r7, r2
   2c3fc:	461e      	mov	r6, r3
	__asm__ volatile(
   2c3fe:	f04f 0320 	mov.w	r3, #32
   2c402:	f3ef 8811 	mrs	r8, BASEPRI
   2c406:	f383 8812 	msr	BASEPRI_MAX, r3
   2c40a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   2c40e:	68c3      	ldr	r3, [r0, #12]
   2c410:	4a32      	ldr	r2, [pc, #200]	; (2c4dc <z_impl_k_mutex_lock+0xe8>)
   2c412:	b16b      	cbz	r3, 2c430 <z_impl_k_mutex_lock+0x3c>
   2c414:	6880      	ldr	r0, [r0, #8]
   2c416:	6891      	ldr	r1, [r2, #8]
   2c418:	4288      	cmp	r0, r1
   2c41a:	d019      	beq.n	2c450 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2c41c:	ea57 0306 	orrs.w	r3, r7, r6
   2c420:	d118      	bne.n	2c454 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   2c422:	f388 8811 	msr	BASEPRI, r8
   2c426:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2c42a:	f06f 000f 	mvn.w	r0, #15
   2c42e:	e00c      	b.n	2c44a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   2c430:	6891      	ldr	r1, [r2, #8]
   2c432:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   2c436:	3301      	adds	r3, #1
   2c438:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   2c43a:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2c43c:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   2c43e:	60a3      	str	r3, [r4, #8]
   2c440:	f388 8811 	msr	BASEPRI, r8
   2c444:	f3bf 8f6f 	isb	sy
		return 0;
   2c448:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   2c44a:	b002      	add	sp, #8
   2c44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2c450:	6921      	ldr	r1, [r4, #16]
   2c452:	e7f0      	b.n	2c436 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2c454:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2c458:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
   2c45c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2c460:	4299      	cmp	r1, r3
   2c462:	bfa8      	it	ge
   2c464:	4619      	movge	r1, r3
   2c466:	4291      	cmp	r1, r2
   2c468:	bfb8      	it	lt
   2c46a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2c46c:	428b      	cmp	r3, r1
   2c46e:	dd2e      	ble.n	2c4ce <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   2c470:	f006 ff84 	bl	3337c <adjust_owner_prio.isra.0>
   2c474:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2c476:	4622      	mov	r2, r4
   2c478:	4641      	mov	r1, r8
   2c47a:	e9cd 7600 	strd	r7, r6, [sp]
   2c47e:	4818      	ldr	r0, [pc, #96]	; (2c4e0 <z_impl_k_mutex_lock+0xec>)
   2c480:	f000 fb4a 	bl	2cb18 <z_pend_curr>
	if (got_mutex == 0) {
   2c484:	2800      	cmp	r0, #0
   2c486:	d0e0      	beq.n	2c44a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   2c488:	f04f 0320 	mov.w	r3, #32
   2c48c:	f3ef 8611 	mrs	r6, BASEPRI
   2c490:	f383 8812 	msr	BASEPRI_MAX, r3
   2c494:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   2c498:	6823      	ldr	r3, [r4, #0]
   2c49a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c49c:	429c      	cmp	r4, r3
   2c49e:	d00a      	beq.n	2c4b6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   2c4a0:	b14b      	cbz	r3, 2c4b6 <z_impl_k_mutex_lock+0xc2>
   2c4a2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2c4a6:	4299      	cmp	r1, r3
   2c4a8:	bfa8      	it	ge
   2c4aa:	4619      	movge	r1, r3
   2c4ac:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   2c4b0:	4299      	cmp	r1, r3
   2c4b2:	bfb8      	it	lt
   2c4b4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2c4b6:	68a0      	ldr	r0, [r4, #8]
   2c4b8:	f006 ff60 	bl	3337c <adjust_owner_prio.isra.0>
   2c4bc:	b900      	cbnz	r0, 2c4c0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   2c4be:	b145      	cbz	r5, 2c4d2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   2c4c0:	4631      	mov	r1, r6
   2c4c2:	4807      	ldr	r0, [pc, #28]	; (2c4e0 <z_impl_k_mutex_lock+0xec>)
   2c4c4:	f000 f9d4 	bl	2c870 <z_reschedule>
	return -EAGAIN;
   2c4c8:	f06f 000a 	mvn.w	r0, #10
   2c4cc:	e7bd      	b.n	2c44a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   2c4ce:	2500      	movs	r5, #0
   2c4d0:	e7d1      	b.n	2c476 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   2c4d2:	f386 8811 	msr	BASEPRI, r6
   2c4d6:	f3bf 8f6f 	isb	sy
   2c4da:	e7f5      	b.n	2c4c8 <z_impl_k_mutex_lock+0xd4>
   2c4dc:	2000d8b0 	.word	0x2000d8b0
   2c4e0:	2001079a 	.word	0x2001079a

0002c4e4 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2c4e4:	6883      	ldr	r3, [r0, #8]
{
   2c4e6:	b570      	push	{r4, r5, r6, lr}
   2c4e8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   2c4ea:	b36b      	cbz	r3, 2c548 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   2c4ec:	4a19      	ldr	r2, [pc, #100]	; (2c554 <z_impl_k_mutex_unlock+0x70>)
   2c4ee:	6892      	ldr	r2, [r2, #8]
   2c4f0:	4293      	cmp	r3, r2
   2c4f2:	d12c      	bne.n	2c54e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2c4f4:	68c3      	ldr	r3, [r0, #12]
   2c4f6:	2b01      	cmp	r3, #1
   2c4f8:	d903      	bls.n	2c502 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   2c4fa:	3b01      	subs	r3, #1
   2c4fc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   2c4fe:	2000      	movs	r0, #0
}
   2c500:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   2c502:	f04f 0320 	mov.w	r3, #32
   2c506:	f3ef 8511 	mrs	r5, BASEPRI
   2c50a:	f383 8812 	msr	BASEPRI_MAX, r3
   2c50e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2c512:	6901      	ldr	r1, [r0, #16]
   2c514:	6880      	ldr	r0, [r0, #8]
   2c516:	f006 ff31 	bl	3337c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2c51a:	4620      	mov	r0, r4
   2c51c:	f007 f92d 	bl	3377a <z_unpend_first_thread>
	mutex->owner = new_owner;
   2c520:	2600      	movs	r6, #0
   2c522:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   2c524:	b150      	cbz	r0, 2c53c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   2c526:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2c52a:	6122      	str	r2, [r4, #16]
   2c52c:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2c52e:	f007 f8c8 	bl	336c2 <z_ready_thread>
		z_reschedule(&lock, key);
   2c532:	4629      	mov	r1, r5
   2c534:	4808      	ldr	r0, [pc, #32]	; (2c558 <z_impl_k_mutex_unlock+0x74>)
   2c536:	f000 f99b 	bl	2c870 <z_reschedule>
   2c53a:	e7e0      	b.n	2c4fe <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   2c53c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2c53e:	f385 8811 	msr	BASEPRI, r5
   2c542:	f3bf 8f6f 	isb	sy
   2c546:	e7da      	b.n	2c4fe <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   2c548:	f06f 0015 	mvn.w	r0, #21
   2c54c:	e7d8      	b.n	2c500 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   2c54e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2c552:	e7d5      	b.n	2c500 <z_impl_k_mutex_unlock+0x1c>
   2c554:	2000d8b0 	.word	0x2000d8b0
   2c558:	2001079a 	.word	0x2001079a

0002c55c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   2c55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c55e:	4611      	mov	r1, r2
	__asm__ volatile(
   2c560:	f04f 0220 	mov.w	r2, #32
   2c564:	f3ef 8511 	mrs	r5, BASEPRI
   2c568:	f382 8812 	msr	BASEPRI_MAX, r2
   2c56c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   2c570:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   2c572:	b19c      	cbz	r4, 2c59c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2c574:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2c576:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2c578:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2c57c:	4294      	cmp	r4, r2
	list->head = node;
   2c57e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   2c580:	bf08      	it	eq
   2c582:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2c584:	2101      	movs	r1, #1
   2c586:	4620      	mov	r0, r4
   2c588:	f006 ff6b 	bl	33462 <z_queue_node_peek>
   2c58c:	4604      	mov	r4, r0
	__asm__ volatile(
   2c58e:	f385 8811 	msr	BASEPRI, r5
   2c592:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2c596:	4620      	mov	r0, r4
   2c598:	b003      	add	sp, #12
   2c59a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c59c:	ea51 0203 	orrs.w	r2, r1, r3
   2c5a0:	d0f5      	beq.n	2c58e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2c5a2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2c5a6:	e9cd 1300 	strd	r1, r3, [sp]
   2c5aa:	4610      	mov	r0, r2
   2c5ac:	4629      	mov	r1, r5
   2c5ae:	f000 fab3 	bl	2cb18 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2c5b2:	2800      	cmp	r0, #0
   2c5b4:	d1ef      	bne.n	2c596 <z_impl_k_queue_get+0x3a>
   2c5b6:	4b02      	ldr	r3, [pc, #8]	; (2c5c0 <z_impl_k_queue_get+0x64>)
   2c5b8:	689b      	ldr	r3, [r3, #8]
   2c5ba:	695c      	ldr	r4, [r3, #20]
   2c5bc:	e7eb      	b.n	2c596 <z_impl_k_queue_get+0x3a>
   2c5be:	bf00      	nop
   2c5c0:	2000d8b0 	.word	0x2000d8b0

0002c5c4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2c5c4:	b538      	push	{r3, r4, r5, lr}
   2c5c6:	4604      	mov	r4, r0
	__asm__ volatile(
   2c5c8:	f04f 0320 	mov.w	r3, #32
   2c5cc:	f3ef 8511 	mrs	r5, BASEPRI
   2c5d0:	f383 8812 	msr	BASEPRI_MAX, r3
   2c5d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2c5d8:	f007 f8cf 	bl	3377a <z_unpend_first_thread>

	if (thread != NULL) {
   2c5dc:	b148      	cbz	r0, 2c5f2 <z_impl_k_sem_give+0x2e>
   2c5de:	2200      	movs	r2, #0
   2c5e0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   2c5e2:	f007 f86e 	bl	336c2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2c5e6:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2c5e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2c5ec:	4807      	ldr	r0, [pc, #28]	; (2c60c <z_impl_k_sem_give+0x48>)
   2c5ee:	f000 b93f 	b.w	2c870 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2c5f2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2c5f6:	429a      	cmp	r2, r3
   2c5f8:	bf18      	it	ne
   2c5fa:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2c5fc:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2c5fe:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2c600:	f104 0010 	add.w	r0, r4, #16
   2c604:	f007 faa8 	bl	33b58 <z_handle_obj_poll_events>
}
   2c608:	e7ed      	b.n	2c5e6 <z_impl_k_sem_give+0x22>
   2c60a:	bf00      	nop
   2c60c:	2001079a 	.word	0x2001079a

0002c610 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2c610:	b513      	push	{r0, r1, r4, lr}
   2c612:	f04f 0420 	mov.w	r4, #32
   2c616:	f3ef 8111 	mrs	r1, BASEPRI
   2c61a:	f384 8812 	msr	BASEPRI_MAX, r4
   2c61e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2c622:	6884      	ldr	r4, [r0, #8]
   2c624:	b144      	cbz	r4, 2c638 <z_impl_k_sem_take+0x28>
		sem->count--;
   2c626:	3c01      	subs	r4, #1
   2c628:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   2c62a:	f381 8811 	msr	BASEPRI, r1
   2c62e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2c632:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2c634:	b002      	add	sp, #8
   2c636:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c638:	ea52 0403 	orrs.w	r4, r2, r3
   2c63c:	d106      	bne.n	2c64c <z_impl_k_sem_take+0x3c>
   2c63e:	f381 8811 	msr	BASEPRI, r1
   2c642:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2c646:	f06f 000f 	mvn.w	r0, #15
   2c64a:	e7f3      	b.n	2c634 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2c64c:	e9cd 2300 	strd	r2, r3, [sp]
   2c650:	4602      	mov	r2, r0
   2c652:	4802      	ldr	r0, [pc, #8]	; (2c65c <z_impl_k_sem_take+0x4c>)
   2c654:	f000 fa60 	bl	2cb18 <z_pend_curr>
	return ret;
   2c658:	e7ec      	b.n	2c634 <z_impl_k_sem_take+0x24>
   2c65a:	bf00      	nop
   2c65c:	2001079a 	.word	0x2001079a

0002c660 <submit_to_queue_locked>:
{
   2c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   2c662:	68c3      	ldr	r3, [r0, #12]
{
   2c664:	4604      	mov	r4, r0
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2c666:	079a      	lsls	r2, r3, #30
{
   2c668:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2c66a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2c66e:	d41f      	bmi.n	2c6b0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2c670:	075f      	lsls	r7, r3, #29
   2c672:	d41f      	bmi.n	2c6b4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   2c674:	680a      	ldr	r2, [r1, #0]
   2c676:	b90a      	cbnz	r2, 2c67c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   2c678:	6882      	ldr	r2, [r0, #8]
   2c67a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2c67c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   2c67e:	bf42      	ittt	mi
   2c680:	68a3      	ldrmi	r3, [r4, #8]
			ret = 2;
   2c682:	2502      	movmi	r5, #2
			*queuep = work->queue;
   2c684:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   2c686:	6837      	ldr	r7, [r6, #0]
		ret = 1;
   2c688:	bf58      	it	pl
   2c68a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   2c68c:	b37f      	cbz	r7, 2c6ee <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2c68e:	4b1b      	ldr	r3, [pc, #108]	; (2c6fc <submit_to_queue_locked+0x9c>)
   2c690:	689b      	ldr	r3, [r3, #8]
   2c692:	42bb      	cmp	r3, r7
   2c694:	d111      	bne.n	2c6ba <submit_to_queue_locked+0x5a>
   2c696:	f006 fe5d 	bl	33354 <k_is_in_isr>
   2c69a:	f080 0001 	eor.w	r0, r0, #1
   2c69e:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   2c6a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2c6a4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2c6a6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2c6aa:	d523      	bpl.n	2c6f4 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   2c6ac:	b13a      	cbz	r2, 2c6be <submit_to_queue_locked+0x5e>
   2c6ae:	b940      	cbnz	r0, 2c6c2 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   2c6b0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   2c6b4:	2300      	movs	r3, #0
   2c6b6:	6033      	str	r3, [r6, #0]
	return ret;
   2c6b8:	e013      	b.n	2c6e2 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2c6ba:	2000      	movs	r0, #0
   2c6bc:	e7f0      	b.n	2c6a0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   2c6be:	071b      	lsls	r3, r3, #28
   2c6c0:	d4f6      	bmi.n	2c6b0 <submit_to_queue_locked+0x50>
	parent->next = child;
   2c6c2:	2300      	movs	r3, #0
   2c6c4:	6023      	str	r3, [r4, #0]
	return list->tail;
   2c6c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   2c6ca:	b963      	cbnz	r3, 2c6e6 <submit_to_queue_locked+0x86>
	list->head = node;
   2c6cc:	e9c7 4432 	strd	r4, r4, [r7, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   2c6d0:	4638      	mov	r0, r7
   2c6d2:	f006 ff06 	bl	334e2 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   2c6d6:	68e3      	ldr	r3, [r4, #12]
   2c6d8:	f043 0304 	orr.w	r3, r3, #4
   2c6dc:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2c6de:	6833      	ldr	r3, [r6, #0]
   2c6e0:	60a3      	str	r3, [r4, #8]
}
   2c6e2:	4628      	mov	r0, r5
   2c6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   2c6e6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2c6e8:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
}
   2c6ec:	e7f0      	b.n	2c6d0 <submit_to_queue_locked+0x70>
		return -EINVAL;
   2c6ee:	f06f 0515 	mvn.w	r5, #21
   2c6f2:	e7df      	b.n	2c6b4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   2c6f4:	f06f 0512 	mvn.w	r5, #18
   2c6f8:	e7dc      	b.n	2c6b4 <submit_to_queue_locked+0x54>
   2c6fa:	bf00      	nop
   2c6fc:	2000d8b0 	.word	0x2000d8b0

0002c700 <k_work_submit>:
{
   2c700:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2c702:	4801      	ldr	r0, [pc, #4]	; (2c708 <k_work_submit+0x8>)
   2c704:	f006 bf61 	b.w	335ca <k_work_submit_to_queue>
   2c708:	2000d028 	.word	0x2000d028

0002c70c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   2c70c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c70e:	4604      	mov	r4, r0
	list->head = NULL;
   2c710:	2000      	movs	r0, #0
   2c712:	b089      	sub	sp, #36	; 0x24
	list->tail = NULL;
   2c714:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   2c718:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2c71a:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   2c71e:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   2c722:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   2c726:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   2c72a:	b31d      	cbz	r5, 2c774 <k_work_queue_start+0x68>
   2c72c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2c72e:	2800      	cmp	r0, #0
   2c730:	f240 1001 	movw	r0, #257	; 0x101
   2c734:	bf08      	it	eq
   2c736:	2001      	moveq	r0, #1
	*flagp = flags;
   2c738:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2c73c:	2000      	movs	r0, #0
   2c73e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2c742:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2c746:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2c74a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2c74e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2c752:	4620      	mov	r0, r4
   2c754:	4b08      	ldr	r3, [pc, #32]	; (2c778 <k_work_queue_start+0x6c>)
   2c756:	9400      	str	r4, [sp, #0]
   2c758:	f7ff fcf6 	bl	2c148 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   2c75c:	b125      	cbz	r5, 2c768 <k_work_queue_start+0x5c>
   2c75e:	6829      	ldr	r1, [r5, #0]
   2c760:	b111      	cbz	r1, 2c768 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   2c762:	4620      	mov	r0, r4
   2c764:	f006 fdfc 	bl	33360 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2c768:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   2c76a:	b009      	add	sp, #36	; 0x24
   2c76c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2c770:	f006 bdfb 	b.w	3336a <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2c774:	2001      	movs	r0, #1
   2c776:	e7df      	b.n	2c738 <k_work_queue_start+0x2c>
   2c778:	0001e1e1 	.word	0x0001e1e1

0002c77c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   2c77c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c77e:	460c      	mov	r4, r1
   2c780:	4616      	mov	r6, r2
   2c782:	461d      	mov	r5, r3
   2c784:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   2c786:	f04f 0320 	mov.w	r3, #32
   2c78a:	f3ef 8711 	mrs	r7, BASEPRI
   2c78e:	f383 8812 	msr	BASEPRI_MAX, r3
   2c792:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2c796:	4608      	mov	r0, r1
   2c798:	f006 fe95 	bl	334c6 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2c79c:	ea55 0306 	orrs.w	r3, r5, r6
   2c7a0:	d109      	bne.n	2c7b6 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   2c7a2:	4620      	mov	r0, r4
   2c7a4:	a901      	add	r1, sp, #4
   2c7a6:	f7ff ff5b 	bl	2c660 <submit_to_queue_locked>
	__asm__ volatile(
   2c7aa:	f387 8811 	msr	BASEPRI, r7
   2c7ae:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2c7b2:	b003      	add	sp, #12
   2c7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   2c7b6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2c7b8:	f104 0010 	add.w	r0, r4, #16
	*flagp |= BIT(bit);
   2c7bc:	f043 0308 	orr.w	r3, r3, #8
   2c7c0:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2c7c2:	9b01      	ldr	r3, [sp, #4]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2c7c4:	4632      	mov	r2, r6
	dwork->queue = *queuep;
   2c7c6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2c7c8:	4902      	ldr	r1, [pc, #8]	; (2c7d4 <k_work_reschedule_for_queue+0x58>)
   2c7ca:	462b      	mov	r3, r5
   2c7cc:	f000 fbd8 	bl	2cf80 <z_add_timeout>
	return ret;
   2c7d0:	2001      	movs	r0, #1
   2c7d2:	e7ea      	b.n	2c7aa <k_work_reschedule_for_queue+0x2e>
   2c7d4:	00033553 	.word	0x00033553

0002c7d8 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   2c7d8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2c7da:	4801      	ldr	r0, [pc, #4]	; (2c7e0 <k_work_reschedule+0x8>)
   2c7dc:	f7ff bfce 	b.w	2c77c <k_work_reschedule_for_queue>
   2c7e0:	2000d028 	.word	0x2000d028

0002c7e4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   2c7e4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   2c7e6:	4d07      	ldr	r5, [pc, #28]	; (2c804 <z_reset_time_slice+0x20>)
   2c7e8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   2c7ea:	b154      	cbz	r4, 2c802 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   2c7ec:	f7f8 fde4 	bl	253b8 <sys_clock_elapsed>
   2c7f0:	4b05      	ldr	r3, [pc, #20]	; (2c808 <z_reset_time_slice+0x24>)
   2c7f2:	4420      	add	r0, r4
   2c7f4:	6118      	str	r0, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   2c7f6:	2100      	movs	r1, #0
   2c7f8:	6828      	ldr	r0, [r5, #0]
	}
}
   2c7fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   2c7fe:	f007 b827 	b.w	33850 <z_set_timeout_expiry>
}
   2c802:	bd38      	pop	{r3, r4, r5, pc}
   2c804:	2000d8f0 	.word	0x2000d8f0
   2c808:	2000d8b0 	.word	0x2000d8b0

0002c80c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   2c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c80e:	4604      	mov	r4, r0
   2c810:	460d      	mov	r5, r1
	__asm__ volatile(
   2c812:	f04f 0320 	mov.w	r3, #32
   2c816:	f3ef 8711 	mrs	r7, BASEPRI
   2c81a:	f383 8812 	msr	BASEPRI_MAX, r3
   2c81e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2c822:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   2c824:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   2c828:	f240 30e7 	movw	r0, #999	; 0x3e7
   2c82c:	4e0d      	ldr	r6, [pc, #52]	; (2c864 <k_sched_time_slice_set+0x58>)
   2c82e:	2300      	movs	r3, #0
   2c830:	6131      	str	r1, [r6, #16]
   2c832:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2c836:	fbe4 010c 	umlal	r0, r1, r4, ip
   2c83a:	f7f0 fab9 	bl	1cdb0 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2c83e:	2c00      	cmp	r4, #0
   2c840:	4b09      	ldr	r3, [pc, #36]	; (2c868 <k_sched_time_slice_set+0x5c>)
   2c842:	dc0a      	bgt.n	2c85a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
   2c844:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   2c846:	4b09      	ldr	r3, [pc, #36]	; (2c86c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   2c848:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
   2c84a:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
   2c84c:	f7ff ffca 	bl	2c7e4 <z_reset_time_slice>
	__asm__ volatile(
   2c850:	f387 8811 	msr	BASEPRI, r7
   2c854:	f3bf 8f6f 	isb	sy
	}
}
   2c858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
   2c85a:	2802      	cmp	r0, #2
   2c85c:	bfb8      	it	lt
   2c85e:	2002      	movlt	r0, #2
   2c860:	e7f0      	b.n	2c844 <k_sched_time_slice_set+0x38>
   2c862:	bf00      	nop
   2c864:	2000d8b0 	.word	0x2000d8b0
   2c868:	2000d8f0 	.word	0x2000d8f0
   2c86c:	2000d8ec 	.word	0x2000d8ec

0002c870 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2c870:	b949      	cbnz	r1, 2c886 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2c872:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   2c876:	b930      	cbnz	r0, 2c886 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   2c878:	4b05      	ldr	r3, [pc, #20]	; (2c890 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   2c87a:	6a1a      	ldr	r2, [r3, #32]
   2c87c:	689b      	ldr	r3, [r3, #8]
   2c87e:	429a      	cmp	r2, r3
   2c880:	d001      	beq.n	2c886 <z_reschedule+0x16>
	ret = arch_swap(key);
   2c882:	f7f5 b9bd 	b.w	21c00 <arch_swap>
   2c886:	f381 8811 	msr	BASEPRI, r1
   2c88a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   2c88e:	4770      	bx	lr
   2c890:	2000d8b0 	.word	0x2000d8b0

0002c894 <k_sched_lock>:
	__asm__ volatile(
   2c894:	f04f 0320 	mov.w	r3, #32
   2c898:	f3ef 8111 	mrs	r1, BASEPRI
   2c89c:	f383 8812 	msr	BASEPRI_MAX, r3
   2c8a0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   2c8a4:	4b04      	ldr	r3, [pc, #16]	; (2c8b8 <k_sched_lock+0x24>)
   2c8a6:	689a      	ldr	r2, [r3, #8]
   2c8a8:	7bd3      	ldrb	r3, [r2, #15]
   2c8aa:	3b01      	subs	r3, #1
   2c8ac:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2c8ae:	f381 8811 	msr	BASEPRI, r1
   2c8b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   2c8b6:	4770      	bx	lr
   2c8b8:	2000d8b0 	.word	0x2000d8b0

0002c8bc <update_cache>:
{
   2c8bc:	b538      	push	{r3, r4, r5, lr}
   2c8be:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   2c8c0:	480c      	ldr	r0, [pc, #48]	; (2c8f4 <update_cache+0x38>)
   2c8c2:	f006 fef8 	bl	336b6 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2c8c6:	4d0c      	ldr	r5, [pc, #48]	; (2c8f8 <update_cache+0x3c>)
   2c8c8:	4604      	mov	r4, r0
   2c8ca:	b900      	cbnz	r0, 2c8ce <update_cache+0x12>
   2c8cc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   2c8ce:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   2c8d0:	b94a      	cbnz	r2, 2c8e6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   2c8d2:	7b5a      	ldrb	r2, [r3, #13]
   2c8d4:	06d2      	lsls	r2, r2, #27
   2c8d6:	d106      	bne.n	2c8e6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2c8d8:	69a2      	ldr	r2, [r4, #24]
   2c8da:	b922      	cbnz	r2, 2c8e6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   2c8dc:	89da      	ldrh	r2, [r3, #14]
   2c8de:	2a7f      	cmp	r2, #127	; 0x7f
   2c8e0:	d901      	bls.n	2c8e6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   2c8e2:	622b      	str	r3, [r5, #32]
}
   2c8e4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   2c8e6:	429c      	cmp	r4, r3
   2c8e8:	d002      	beq.n	2c8f0 <update_cache+0x34>
			z_reset_time_slice(thread);
   2c8ea:	4620      	mov	r0, r4
   2c8ec:	f7ff ff7a 	bl	2c7e4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2c8f0:	622c      	str	r4, [r5, #32]
}
   2c8f2:	e7f7      	b.n	2c8e4 <update_cache+0x28>
   2c8f4:	2000d8d4 	.word	0x2000d8d4
   2c8f8:	2000d8b0 	.word	0x2000d8b0

0002c8fc <move_thread_to_end_of_prio_q>:
{
   2c8fc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2c8fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2c902:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2c904:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   2c906:	7b43      	ldrb	r3, [r0, #13]
   2c908:	da04      	bge.n	2c914 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2c90a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2c90e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   2c910:	f006 fe8c 	bl	3362c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2c914:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2c916:	4a15      	ldr	r2, [pc, #84]	; (2c96c <move_thread_to_end_of_prio_q+0x70>)
   2c918:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2c91c:	734b      	strb	r3, [r1, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c91e:	f102 0524 	add.w	r5, r2, #36	; 0x24
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   2c922:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2c926:	42ab      	cmp	r3, r5
   2c928:	d01b      	beq.n	2c962 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2c92a:	b1d3      	cbz	r3, 2c962 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   2c92c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   2c930:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   2c934:	4286      	cmp	r6, r0
   2c936:	d00f      	beq.n	2c958 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   2c938:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2c93a:	2800      	cmp	r0, #0
   2c93c:	dd0c      	ble.n	2c958 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2c93e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2c940:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   2c944:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   2c946:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   2c948:	6890      	ldr	r0, [r2, #8]
}
   2c94a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2c94e:	1a43      	subs	r3, r0, r1
   2c950:	4258      	negs	r0, r3
   2c952:	4158      	adcs	r0, r3
   2c954:	f7ff bfb2 	b.w	2c8bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2c958:	42a3      	cmp	r3, r4
   2c95a:	d002      	beq.n	2c962 <move_thread_to_end_of_prio_q+0x66>
   2c95c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2c95e:	2b00      	cmp	r3, #0
   2c960:	d1e6      	bne.n	2c930 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   2c962:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   2c966:	6021      	str	r1, [r4, #0]
	list->tail = node;
   2c968:	6291      	str	r1, [r2, #40]	; 0x28
}
   2c96a:	e7ed      	b.n	2c948 <move_thread_to_end_of_prio_q+0x4c>
   2c96c:	2000d8b0 	.word	0x2000d8b0

0002c970 <z_time_slice>:
{
   2c970:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2c972:	f04f 0320 	mov.w	r3, #32
   2c976:	f3ef 8511 	mrs	r5, BASEPRI
   2c97a:	f383 8812 	msr	BASEPRI_MAX, r3
   2c97e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   2c982:	4b17      	ldr	r3, [pc, #92]	; (2c9e0 <z_time_slice+0x70>)
   2c984:	4a17      	ldr	r2, [pc, #92]	; (2c9e4 <z_time_slice+0x74>)
   2c986:	689c      	ldr	r4, [r3, #8]
   2c988:	6811      	ldr	r1, [r2, #0]
   2c98a:	428c      	cmp	r4, r1
   2c98c:	d107      	bne.n	2c99e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   2c98e:	4620      	mov	r0, r4
   2c990:	f7ff ff28 	bl	2c7e4 <z_reset_time_slice>
	__asm__ volatile(
   2c994:	f385 8811 	msr	BASEPRI, r5
   2c998:	f3bf 8f6f 	isb	sy
}
   2c99c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   2c99e:	2100      	movs	r1, #0
   2c9a0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   2c9a2:	4a11      	ldr	r2, [pc, #68]	; (2c9e8 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   2c9a4:	6812      	ldr	r2, [r2, #0]
   2c9a6:	b1c2      	cbz	r2, 2c9da <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   2c9a8:	89e2      	ldrh	r2, [r4, #14]
   2c9aa:	2a7f      	cmp	r2, #127	; 0x7f
   2c9ac:	d815      	bhi.n	2c9da <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   2c9ae:	7b62      	ldrb	r2, [r4, #13]
   2c9b0:	06d2      	lsls	r2, r2, #27
   2c9b2:	d112      	bne.n	2c9da <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2c9b4:	4a0d      	ldr	r2, [pc, #52]	; (2c9ec <z_time_slice+0x7c>)
   2c9b6:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2c9ba:	6812      	ldr	r2, [r2, #0]
   2c9bc:	4291      	cmp	r1, r2
   2c9be:	db0c      	blt.n	2c9da <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
   2c9c0:	4a0b      	ldr	r2, [pc, #44]	; (2c9f0 <z_time_slice+0x80>)
   2c9c2:	4294      	cmp	r4, r2
   2c9c4:	d009      	beq.n	2c9da <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   2c9c6:	691a      	ldr	r2, [r3, #16]
   2c9c8:	4282      	cmp	r2, r0
   2c9ca:	dc03      	bgt.n	2c9d4 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   2c9cc:	4620      	mov	r0, r4
   2c9ce:	f7ff ff95 	bl	2c8fc <move_thread_to_end_of_prio_q>
   2c9d2:	e7dc      	b.n	2c98e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   2c9d4:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   2c9d6:	611a      	str	r2, [r3, #16]
   2c9d8:	e7dc      	b.n	2c994 <z_time_slice+0x24>
   2c9da:	2200      	movs	r2, #0
   2c9dc:	e7fb      	b.n	2c9d6 <z_time_slice+0x66>
   2c9de:	bf00      	nop
   2c9e0:	2000d8b0 	.word	0x2000d8b0
   2c9e4:	2000d8e8 	.word	0x2000d8e8
   2c9e8:	2000d8f0 	.word	0x2000d8f0
   2c9ec:	2000d8ec 	.word	0x2000d8ec
   2c9f0:	2000ce90 	.word	0x2000ce90

0002c9f4 <ready_thread>:
{
   2c9f4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2c9f6:	f990 200d 	ldrsb.w	r2, [r0, #13]
   2c9fa:	7b43      	ldrb	r3, [r0, #13]
   2c9fc:	2a00      	cmp	r2, #0
   2c9fe:	db2a      	blt.n	2ca56 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2ca00:	06da      	lsls	r2, r3, #27
   2ca02:	d128      	bne.n	2ca56 <ready_thread+0x62>
   2ca04:	6982      	ldr	r2, [r0, #24]
   2ca06:	bb32      	cbnz	r2, 2ca56 <ready_thread+0x62>
	return list->head == list;
   2ca08:	4a14      	ldr	r2, [pc, #80]	; (2ca5c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   2ca0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2ca0e:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ca10:	f102 0524 	add.w	r5, r2, #36	; 0x24
	return (node == list->tail) ? NULL : node->next;
   2ca14:	e9d2 3409 	ldrd	r3, r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ca18:	42ab      	cmp	r3, r5
   2ca1a:	d017      	beq.n	2ca4c <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ca1c:	b1b3      	cbz	r3, 2ca4c <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   2ca1e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2ca22:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2ca26:	428e      	cmp	r6, r1
   2ca28:	d00b      	beq.n	2ca42 <ready_thread+0x4e>
		return b2 - b1;
   2ca2a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2ca2c:	2900      	cmp	r1, #0
   2ca2e:	dd08      	ble.n	2ca42 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   2ca30:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2ca32:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2ca36:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2ca38:	6058      	str	r0, [r3, #4]
		update_cache(0);
   2ca3a:	2000      	movs	r0, #0
}
   2ca3c:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   2ca3e:	f7ff bf3d 	b.w	2c8bc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2ca42:	42a3      	cmp	r3, r4
   2ca44:	d002      	beq.n	2ca4c <ready_thread+0x58>
   2ca46:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ca48:	2b00      	cmp	r3, #0
   2ca4a:	d1ea      	bne.n	2ca22 <ready_thread+0x2e>
	node->prev = tail;
   2ca4c:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   2ca50:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2ca52:	6290      	str	r0, [r2, #40]	; 0x28
}
   2ca54:	e7f1      	b.n	2ca3a <ready_thread+0x46>
}
   2ca56:	bc70      	pop	{r4, r5, r6}
   2ca58:	4770      	bx	lr
   2ca5a:	bf00      	nop
   2ca5c:	2000d8b0 	.word	0x2000d8b0

0002ca60 <z_sched_start>:
{
   2ca60:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ca62:	f04f 0220 	mov.w	r2, #32
   2ca66:	f3ef 8411 	mrs	r4, BASEPRI
   2ca6a:	f382 8812 	msr	BASEPRI_MAX, r2
   2ca6e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2ca72:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   2ca74:	0751      	lsls	r1, r2, #29
   2ca76:	d404      	bmi.n	2ca82 <z_sched_start+0x22>
	__asm__ volatile(
   2ca78:	f384 8811 	msr	BASEPRI, r4
   2ca7c:	f3bf 8f6f 	isb	sy
}
   2ca80:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2ca82:	f022 0204 	bic.w	r2, r2, #4
   2ca86:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   2ca88:	f7ff ffb4 	bl	2c9f4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   2ca8c:	4621      	mov	r1, r4
}
   2ca8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   2ca92:	4801      	ldr	r0, [pc, #4]	; (2ca98 <z_sched_start+0x38>)
   2ca94:	f7ff beec 	b.w	2c870 <z_reschedule>
   2ca98:	2001079a 	.word	0x2001079a

0002ca9c <unready_thread>:
{
   2ca9c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2ca9e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   2caa2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2caa4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
   2caa6:	7b43      	ldrb	r3, [r0, #13]
   2caa8:	da04      	bge.n	2cab4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2caaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2caae:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2cab0:	f006 fdbc 	bl	3362c <sys_dlist_remove>
	update_cache(thread == _current);
   2cab4:	4b04      	ldr	r3, [pc, #16]	; (2cac8 <unready_thread+0x2c>)
   2cab6:	6898      	ldr	r0, [r3, #8]
   2cab8:	1a43      	subs	r3, r0, r1
   2caba:	4258      	negs	r0, r3
   2cabc:	4158      	adcs	r0, r3
}
   2cabe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   2cac2:	f7ff befb 	b.w	2c8bc <update_cache>
   2cac6:	bf00      	nop
   2cac8:	2000d8b0 	.word	0x2000d8b0

0002cacc <pend>:
{
   2cacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cad0:	4606      	mov	r6, r0
   2cad2:	4615      	mov	r5, r2
   2cad4:	461c      	mov	r4, r3
	__asm__ volatile(
   2cad6:	f04f 0320 	mov.w	r3, #32
   2cada:	f3ef 8711 	mrs	r7, BASEPRI
   2cade:	f383 8812 	msr	BASEPRI_MAX, r3
   2cae2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   2cae6:	f006 fe1e 	bl	33726 <add_to_waitq_locked>
	__asm__ volatile(
   2caea:	f387 8811 	msr	BASEPRI, r7
   2caee:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2caf2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   2caf6:	bf08      	it	eq
   2caf8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   2cafc:	d008      	beq.n	2cb10 <pend+0x44>
   2cafe:	462a      	mov	r2, r5
   2cb00:	4623      	mov	r3, r4
   2cb02:	f106 0018 	add.w	r0, r6, #24
   2cb06:	4903      	ldr	r1, [pc, #12]	; (2cb14 <pend+0x48>)
}
   2cb08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2cb0c:	f000 ba38 	b.w	2cf80 <z_add_timeout>
   2cb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cb14:	000336e3 	.word	0x000336e3

0002cb18 <z_pend_curr>:
{
   2cb18:	b510      	push	{r4, lr}
   2cb1a:	460c      	mov	r4, r1
	pending_current = _current;
   2cb1c:	4b06      	ldr	r3, [pc, #24]	; (2cb38 <z_pend_curr+0x20>)
{
   2cb1e:	4611      	mov	r1, r2
	pending_current = _current;
   2cb20:	6898      	ldr	r0, [r3, #8]
   2cb22:	4b06      	ldr	r3, [pc, #24]	; (2cb3c <z_pend_curr+0x24>)
   2cb24:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   2cb26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2cb2a:	f7ff ffcf 	bl	2cacc <pend>
   2cb2e:	4620      	mov	r0, r4
}
   2cb30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cb34:	f7f5 b864 	b.w	21c00 <arch_swap>
   2cb38:	2000d8b0 	.word	0x2000d8b0
   2cb3c:	2000d8e8 	.word	0x2000d8e8

0002cb40 <z_set_prio>:
{
   2cb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cb42:	4604      	mov	r4, r0
	__asm__ volatile(
   2cb44:	f04f 0320 	mov.w	r3, #32
   2cb48:	f3ef 8611 	mrs	r6, BASEPRI
   2cb4c:	f383 8812 	msr	BASEPRI_MAX, r3
   2cb50:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   2cb54:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
   2cb56:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2cb58:	06da      	lsls	r2, r3, #27
   2cb5a:	d133      	bne.n	2cbc4 <z_set_prio+0x84>
		if (need_sched) {
   2cb5c:	6982      	ldr	r2, [r0, #24]
   2cb5e:	bb8a      	cbnz	r2, 2cbc4 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2cb60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2cb64:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2cb66:	f006 fd61 	bl	3362c <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2cb6a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   2cb6c:	4a17      	ldr	r2, [pc, #92]	; (2cbcc <z_set_prio+0x8c>)
   2cb6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2cb72:	7343      	strb	r3, [r0, #13]
				thread->base.prio = prio;
   2cb74:	7381      	strb	r1, [r0, #14]
   2cb76:	4610      	mov	r0, r2
   2cb78:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2cb7c:	4283      	cmp	r3, r0
   2cb7e:	d01b      	beq.n	2cbb8 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2cb80:	b1d3      	cbz	r3, 2cbb8 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   2cb82:	6a97      	ldr	r7, [r2, #40]	; 0x28
	int32_t b2 = thread_2->base.prio;
   2cb84:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   2cb88:	42a9      	cmp	r1, r5
   2cb8a:	d010      	beq.n	2cbae <z_set_prio+0x6e>
		return b2 - b1;
   2cb8c:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2cb8e:	2d00      	cmp	r5, #0
   2cb90:	dd0d      	ble.n	2cbae <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   2cb92:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2cb94:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2cb98:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2cb9a:	605c      	str	r4, [r3, #4]
			update_cache(1);
   2cb9c:	2001      	movs	r0, #1
   2cb9e:	f7ff fe8d 	bl	2c8bc <update_cache>
   2cba2:	2001      	movs	r0, #1
	__asm__ volatile(
   2cba4:	f386 8811 	msr	BASEPRI, r6
   2cba8:	f3bf 8f6f 	isb	sy
}
   2cbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2cbae:	42bb      	cmp	r3, r7
   2cbb0:	d002      	beq.n	2cbb8 <z_set_prio+0x78>
   2cbb2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2cbb4:	2b00      	cmp	r3, #0
   2cbb6:	d1e5      	bne.n	2cb84 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   2cbb8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->prev = tail;
   2cbba:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   2cbbe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2cbc0:	6294      	str	r4, [r2, #40]	; 0x28
}
   2cbc2:	e7eb      	b.n	2cb9c <z_set_prio+0x5c>
			thread->base.prio = prio;
   2cbc4:	2000      	movs	r0, #0
   2cbc6:	73a1      	strb	r1, [r4, #14]
   2cbc8:	e7ec      	b.n	2cba4 <z_set_prio+0x64>
   2cbca:	bf00      	nop
   2cbcc:	2000d8b0 	.word	0x2000d8b0

0002cbd0 <z_impl_k_thread_suspend>:
{
   2cbd0:	b570      	push	{r4, r5, r6, lr}
   2cbd2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2cbd4:	3018      	adds	r0, #24
   2cbd6:	f006 fe15 	bl	33804 <z_abort_timeout>
	__asm__ volatile(
   2cbda:	f04f 0320 	mov.w	r3, #32
   2cbde:	f3ef 8611 	mrs	r6, BASEPRI
   2cbe2:	f383 8812 	msr	BASEPRI_MAX, r3
   2cbe6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   2cbea:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   2cbee:	7b63      	ldrb	r3, [r4, #13]
   2cbf0:	2a00      	cmp	r2, #0
   2cbf2:	da05      	bge.n	2cc00 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2cbf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
   2cbf8:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2cbfa:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2cbfc:	f006 fd16 	bl	3362c <sys_dlist_remove>
		update_cache(thread == _current);
   2cc00:	4d0b      	ldr	r5, [pc, #44]	; (2cc30 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2cc02:	7b63      	ldrb	r3, [r4, #13]
   2cc04:	68a8      	ldr	r0, [r5, #8]
   2cc06:	f043 0310 	orr.w	r3, r3, #16
   2cc0a:	7363      	strb	r3, [r4, #13]
   2cc0c:	1b03      	subs	r3, r0, r4
   2cc0e:	4258      	negs	r0, r3
   2cc10:	4158      	adcs	r0, r3
   2cc12:	f7ff fe53 	bl	2c8bc <update_cache>
	__asm__ volatile(
   2cc16:	f386 8811 	msr	BASEPRI, r6
   2cc1a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2cc1e:	68ab      	ldr	r3, [r5, #8]
   2cc20:	42a3      	cmp	r3, r4
   2cc22:	d103      	bne.n	2cc2c <z_impl_k_thread_suspend+0x5c>
}
   2cc24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2cc28:	f006 bd3b 	b.w	336a2 <z_reschedule_unlocked>
}
   2cc2c:	bd70      	pop	{r4, r5, r6, pc}
   2cc2e:	bf00      	nop
   2cc30:	2000d8b0 	.word	0x2000d8b0

0002cc34 <k_sched_unlock>:
{
   2cc34:	b510      	push	{r4, lr}
	__asm__ volatile(
   2cc36:	f04f 0320 	mov.w	r3, #32
   2cc3a:	f3ef 8411 	mrs	r4, BASEPRI
   2cc3e:	f383 8812 	msr	BASEPRI_MAX, r3
   2cc42:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2cc46:	4b08      	ldr	r3, [pc, #32]	; (2cc68 <k_sched_unlock+0x34>)
		update_cache(0);
   2cc48:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2cc4a:	689a      	ldr	r2, [r3, #8]
   2cc4c:	7bd3      	ldrb	r3, [r2, #15]
   2cc4e:	3301      	adds	r3, #1
   2cc50:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2cc52:	f7ff fe33 	bl	2c8bc <update_cache>
	__asm__ volatile(
   2cc56:	f384 8811 	msr	BASEPRI, r4
   2cc5a:	f3bf 8f6f 	isb	sy
}
   2cc5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   2cc62:	f006 bd1e 	b.w	336a2 <z_reschedule_unlocked>
   2cc66:	bf00      	nop
   2cc68:	2000d8b0 	.word	0x2000d8b0

0002cc6c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2cc6c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   2cc6e:	4b04      	ldr	r3, [pc, #16]	; (2cc80 <z_sched_init+0x14>)
   2cc70:	4608      	mov	r0, r1
   2cc72:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
   2cc76:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
   2cc7a:	f7ff bdc7 	b.w	2c80c <k_sched_time_slice_set>
   2cc7e:	bf00      	nop
   2cc80:	2000d8b0 	.word	0x2000d8b0

0002cc84 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2cc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2cc86:	f04f 0320 	mov.w	r3, #32
   2cc8a:	f3ef 8511 	mrs	r5, BASEPRI
   2cc8e:	f383 8812 	msr	BASEPRI_MAX, r3
   2cc92:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2cc96:	491a      	ldr	r1, [pc, #104]	; (2cd00 <z_impl_k_yield+0x7c>)
   2cc98:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2cc9a:	7b43      	ldrb	r3, [r0, #13]
   2cc9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2cca0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2cca2:	f006 fcc3 	bl	3362c <sys_dlist_remove>
	return list->head == list;
   2cca6:	4608      	mov	r0, r1
	}
	queue_thread(_current);
   2cca8:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2ccaa:	7b5a      	ldrb	r2, [r3, #13]
   2ccac:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2ccb0:	735a      	strb	r2, [r3, #13]
   2ccb2:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ccb6:	4282      	cmp	r2, r0
   2ccb8:	d01c      	beq.n	2ccf4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ccba:	b1da      	cbz	r2, 2ccf4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   2ccbc:	6a8f      	ldr	r7, [r1, #40]	; 0x28
	int32_t b1 = thread_1->base.prio;
   2ccbe:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2ccc2:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   2ccc6:	42a6      	cmp	r6, r4
   2ccc8:	d00f      	beq.n	2ccea <z_impl_k_yield+0x66>
		return b2 - b1;
   2ccca:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2cccc:	2c00      	cmp	r4, #0
   2ccce:	dd0c      	ble.n	2ccea <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   2ccd0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   2ccd2:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2ccd6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2ccd8:	6053      	str	r3, [r2, #4]
	update_cache(1);
   2ccda:	2001      	movs	r0, #1
   2ccdc:	f7ff fdee 	bl	2c8bc <update_cache>
   2cce0:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   2cce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2cce6:	f7f4 bf8b 	b.w	21c00 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2ccea:	42ba      	cmp	r2, r7
   2ccec:	d002      	beq.n	2ccf4 <z_impl_k_yield+0x70>
   2ccee:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2ccf0:	2a00      	cmp	r2, #0
   2ccf2:	d1e6      	bne.n	2ccc2 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   2ccf4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
	node->prev = tail;
   2ccf6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   2ccfa:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2ccfc:	628b      	str	r3, [r1, #40]	; 0x28
}
   2ccfe:	e7ec      	b.n	2ccda <z_impl_k_yield+0x56>
   2cd00:	2000d8b0 	.word	0x2000d8b0

0002cd04 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   2cd04:	ea50 0301 	orrs.w	r3, r0, r1
{
   2cd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cd0c:	4605      	mov	r5, r0
   2cd0e:	460e      	mov	r6, r1
	if (ticks == 0) {
   2cd10:	d103      	bne.n	2cd1a <z_tick_sleep+0x16>
	z_impl_k_yield();
   2cd12:	f7ff ffb7 	bl	2cc84 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   2cd16:	2000      	movs	r0, #0
   2cd18:	e033      	b.n	2cd82 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   2cd1a:	f06f 0401 	mvn.w	r4, #1
   2cd1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cd22:	1a24      	subs	r4, r4, r0
   2cd24:	eb63 0301 	sbc.w	r3, r3, r1
   2cd28:	2c01      	cmp	r4, #1
   2cd2a:	f173 0300 	sbcs.w	r3, r3, #0
   2cd2e:	da02      	bge.n	2cd36 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2cd30:	f006 fda9 	bl	33886 <sys_clock_tick_get_32>
   2cd34:	1944      	adds	r4, r0, r5
   2cd36:	f04f 0320 	mov.w	r3, #32
   2cd3a:	f3ef 8811 	mrs	r8, BASEPRI
   2cd3e:	f383 8812 	msr	BASEPRI_MAX, r3
   2cd42:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   2cd46:	4f10      	ldr	r7, [pc, #64]	; (2cd88 <z_tick_sleep+0x84>)
   2cd48:	4b10      	ldr	r3, [pc, #64]	; (2cd8c <z_tick_sleep+0x88>)
   2cd4a:	68b8      	ldr	r0, [r7, #8]
   2cd4c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2cd4e:	f7ff fea5 	bl	2ca9c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2cd52:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2cd54:	490e      	ldr	r1, [pc, #56]	; (2cd90 <z_tick_sleep+0x8c>)
   2cd56:	462a      	mov	r2, r5
   2cd58:	4633      	mov	r3, r6
   2cd5a:	3018      	adds	r0, #24
   2cd5c:	f000 f910 	bl	2cf80 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2cd60:	68ba      	ldr	r2, [r7, #8]
   2cd62:	4640      	mov	r0, r8
   2cd64:	7b53      	ldrb	r3, [r2, #13]
   2cd66:	f043 0310 	orr.w	r3, r3, #16
   2cd6a:	7353      	strb	r3, [r2, #13]
   2cd6c:	f7f4 ff48 	bl	21c00 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2cd70:	f006 fd89 	bl	33886 <sys_clock_tick_get_32>
   2cd74:	1a20      	subs	r0, r4, r0
   2cd76:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2cd7a:	2801      	cmp	r0, #1
   2cd7c:	f173 0300 	sbcs.w	r3, r3, #0
   2cd80:	dbc9      	blt.n	2cd16 <z_tick_sleep+0x12>
}
   2cd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2cd86:	bf00      	nop
   2cd88:	2000d8b0 	.word	0x2000d8b0
   2cd8c:	2000d8e8 	.word	0x2000d8e8
   2cd90:	000336e3 	.word	0x000336e3

0002cd94 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2cd94:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2cd98:	bf08      	it	eq
   2cd9a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2cd9e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2cda0:	d106      	bne.n	2cdb0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   2cda2:	4b08      	ldr	r3, [pc, #32]	; (2cdc4 <z_impl_k_sleep+0x30>)
   2cda4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2cda6:	f7ff ff13 	bl	2cbd0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2cdaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2cdae:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   2cdb0:	f7ff ffa8 	bl	2cd04 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   2cdb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2cdb8:	fb80 0303 	smull	r0, r3, r0, r3
   2cdbc:	0bc0      	lsrs	r0, r0, #15
   2cdbe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   2cdc2:	e7f4      	b.n	2cdae <z_impl_k_sleep+0x1a>
   2cdc4:	2000d8b0 	.word	0x2000d8b0

0002cdc8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   2cdc8:	4b01      	ldr	r3, [pc, #4]	; (2cdd0 <z_impl_z_current_get+0x8>)
   2cdca:	6898      	ldr	r0, [r3, #8]
   2cdcc:	4770      	bx	lr
   2cdce:	bf00      	nop
   2cdd0:	2000d8b0 	.word	0x2000d8b0

0002cdd4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   2cdd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cdd8:	4604      	mov	r4, r0
   2cdda:	f04f 0320 	mov.w	r3, #32
   2cdde:	f3ef 8611 	mrs	r6, BASEPRI
   2cde2:	f383 8812 	msr	BASEPRI_MAX, r3
   2cde6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   2cdea:	7b03      	ldrb	r3, [r0, #12]
   2cdec:	07d9      	lsls	r1, r3, #31
   2cdee:	d50b      	bpl.n	2ce08 <z_thread_abort+0x34>
	__asm__ volatile(
   2cdf0:	f386 8811 	msr	BASEPRI, r6
   2cdf4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   2cdf8:	4040      	eors	r0, r0
   2cdfa:	f380 8811 	msr	BASEPRI, r0
   2cdfe:	f04f 0004 	mov.w	r0, #4
   2ce02:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2ce04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2ce08:	7b43      	ldrb	r3, [r0, #13]
   2ce0a:	071a      	lsls	r2, r3, #28
   2ce0c:	d504      	bpl.n	2ce18 <z_thread_abort+0x44>
   2ce0e:	f386 8811 	msr	BASEPRI, r6
   2ce12:	f3bf 8f6f 	isb	sy
   2ce16:	e7f5      	b.n	2ce04 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2ce18:	f023 0220 	bic.w	r2, r3, #32
   2ce1c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   2ce20:	09d2      	lsrs	r2, r2, #7
   2ce22:	d120      	bne.n	2ce66 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2ce24:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2ce26:	68a3      	ldr	r3, [r4, #8]
   2ce28:	b113      	cbz	r3, 2ce30 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   2ce2a:	4620      	mov	r0, r4
   2ce2c:	f006 fc06 	bl	3363c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   2ce30:	f104 0018 	add.w	r0, r4, #24
   2ce34:	f006 fce6 	bl	33804 <z_abort_timeout>
   2ce38:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2ce3c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
   2ce40:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ce42:	42bd      	cmp	r5, r7
   2ce44:	d000      	beq.n	2ce48 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ce46:	b9b5      	cbnz	r5, 2ce76 <z_thread_abort+0xa2>
		update_cache(1);
   2ce48:	2001      	movs	r0, #1
   2ce4a:	f7ff fd37 	bl	2c8bc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   2ce4e:	4b10      	ldr	r3, [pc, #64]	; (2ce90 <z_thread_abort+0xbc>)
   2ce50:	689b      	ldr	r3, [r3, #8]
   2ce52:	42a3      	cmp	r3, r4
   2ce54:	d1db      	bne.n	2ce0e <z_thread_abort+0x3a>
   2ce56:	f3ef 8305 	mrs	r3, IPSR
   2ce5a:	2b00      	cmp	r3, #0
   2ce5c:	d1d7      	bne.n	2ce0e <z_thread_abort+0x3a>
   2ce5e:	4630      	mov	r0, r6
   2ce60:	f7f4 fece 	bl	21c00 <arch_swap>
	return ret;
   2ce64:	e7d3      	b.n	2ce0e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2ce66:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2ce6a:	f043 0308 	orr.w	r3, r3, #8
   2ce6e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2ce70:	f006 fbdc 	bl	3362c <sys_dlist_remove>
}
   2ce74:	e7d7      	b.n	2ce26 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   2ce76:	4628      	mov	r0, r5
   2ce78:	f006 fbe0 	bl	3363c <unpend_thread_no_timeout>
   2ce7c:	f105 0018 	add.w	r0, r5, #24
   2ce80:	f006 fcc0 	bl	33804 <z_abort_timeout>
		ready_thread(thread);
   2ce84:	4628      	mov	r0, r5
   2ce86:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
   2ce8a:	f7ff fdb3 	bl	2c9f4 <ready_thread>
   2ce8e:	e7d7      	b.n	2ce40 <z_thread_abort+0x6c>
   2ce90:	2000d8b0 	.word	0x2000d8b0

0002ce94 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2ce94:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2ce96:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2ce9a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2ce9c:	e9cd 6700 	strd	r6, r7, [sp]
   2cea0:	f7ff fe3a 	bl	2cb18 <z_pend_curr>

	if (data != NULL) {
   2cea4:	b11c      	cbz	r4, 2ceae <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2cea6:	4b03      	ldr	r3, [pc, #12]	; (2ceb4 <z_sched_wait+0x20>)
   2cea8:	689b      	ldr	r3, [r3, #8]
   2ceaa:	695b      	ldr	r3, [r3, #20]
   2ceac:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2ceae:	b002      	add	sp, #8
   2ceb0:	bdd0      	pop	{r4, r6, r7, pc}
   2ceb2:	bf00      	nop
   2ceb4:	2000d8b0 	.word	0x2000d8b0

0002ceb8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   2ceb8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   2ceba:	4806      	ldr	r0, [pc, #24]	; (2ced4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   2cebc:	4a06      	ldr	r2, [pc, #24]	; (2ced8 <z_data_copy+0x20>)
   2cebe:	4907      	ldr	r1, [pc, #28]	; (2cedc <z_data_copy+0x24>)
   2cec0:	1a12      	subs	r2, r2, r0
   2cec2:	f006 f9d4 	bl	3326e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2cec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   2ceca:	4a05      	ldr	r2, [pc, #20]	; (2cee0 <z_data_copy+0x28>)
   2cecc:	4905      	ldr	r1, [pc, #20]	; (2cee4 <z_data_copy+0x2c>)
   2cece:	4806      	ldr	r0, [pc, #24]	; (2cee8 <z_data_copy+0x30>)
   2ced0:	f006 b9cd 	b.w	3326e <z_early_memcpy>
   2ced4:	2000c500 	.word	0x2000c500
   2ced8:	2000ca8c 	.word	0x2000ca8c
   2cedc:	0003a238 	.word	0x0003a238
   2cee0:	00000000 	.word	0x00000000
   2cee4:	0003a220 	.word	0x0003a220
   2cee8:	2000c500 	.word	0x2000c500

0002ceec <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2ceec:	4b03      	ldr	r3, [pc, #12]	; (2cefc <elapsed+0x10>)
   2ceee:	681b      	ldr	r3, [r3, #0]
   2cef0:	b90b      	cbnz	r3, 2cef6 <elapsed+0xa>
   2cef2:	f7f8 ba61 	b.w	253b8 <sys_clock_elapsed>
}
   2cef6:	2000      	movs	r0, #0
   2cef8:	4770      	bx	lr
   2cefa:	bf00      	nop
   2cefc:	2000d8f4 	.word	0x2000d8f4

0002cf00 <next_timeout>:
	return list->head == list;
   2cf00:	4b10      	ldr	r3, [pc, #64]	; (2cf44 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   2cf02:	b510      	push	{r4, lr}
   2cf04:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2cf06:	429c      	cmp	r4, r3
   2cf08:	bf08      	it	eq
   2cf0a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2cf0c:	f7ff ffee 	bl	2ceec <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   2cf10:	b1a4      	cbz	r4, 2cf3c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2cf12:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2cf16:	1a1b      	subs	r3, r3, r0
   2cf18:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   2cf1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   2cf20:	f170 0200 	sbcs.w	r2, r0, #0
   2cf24:	da0a      	bge.n	2cf3c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   2cf26:	2800      	cmp	r0, #0
   2cf28:	bfac      	ite	ge
   2cf2a:	4618      	movge	r0, r3
   2cf2c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2cf2e:	4b06      	ldr	r3, [pc, #24]	; (2cf48 <next_timeout+0x48>)
   2cf30:	691b      	ldr	r3, [r3, #16]
   2cf32:	b113      	cbz	r3, 2cf3a <next_timeout+0x3a>
   2cf34:	4298      	cmp	r0, r3
   2cf36:	bfa8      	it	ge
   2cf38:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2cf3a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   2cf3c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   2cf40:	e7f5      	b.n	2cf2e <next_timeout+0x2e>
   2cf42:	bf00      	nop
   2cf44:	2000c65c 	.word	0x2000c65c
   2cf48:	2000d8b0 	.word	0x2000d8b0

0002cf4c <remove_timeout>:
{
   2cf4c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   2cf4e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2cf50:	b168      	cbz	r0, 2cf6e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2cf52:	4a0a      	ldr	r2, [pc, #40]	; (2cf7c <remove_timeout+0x30>)
   2cf54:	6852      	ldr	r2, [r2, #4]
   2cf56:	4290      	cmp	r0, r2
   2cf58:	d009      	beq.n	2cf6e <remove_timeout+0x22>
	if (next(t) != NULL) {
   2cf5a:	b143      	cbz	r3, 2cf6e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2cf5c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2cf60:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2cf64:	1912      	adds	r2, r2, r4
   2cf66:	eb41 0105 	adc.w	r1, r1, r5
   2cf6a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   2cf6e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   2cf70:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2cf72:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2cf74:	2300      	movs	r3, #0
	node->prev = NULL;
   2cf76:	e9c0 3300 	strd	r3, r3, [r0]
}
   2cf7a:	bd30      	pop	{r4, r5, pc}
   2cf7c:	2000c65c 	.word	0x2000c65c

0002cf80 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2cf80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2cf84:	bf08      	it	eq
   2cf86:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   2cf8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cf8c:	4604      	mov	r4, r0
   2cf8e:	461f      	mov	r7, r3
   2cf90:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2cf92:	d065      	beq.n	2d060 <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   2cf94:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2cf96:	f04f 0320 	mov.w	r3, #32
   2cf9a:	f3ef 8611 	mrs	r6, BASEPRI
   2cf9e:	f383 8812 	msr	BASEPRI_MAX, r3
   2cfa2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2cfa6:	f06f 0201 	mvn.w	r2, #1
   2cfaa:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2cfae:	1b53      	subs	r3, r2, r5
   2cfb0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2cfb4:	2b00      	cmp	r3, #0
   2cfb6:	db1b      	blt.n	2cff0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2cfb8:	4b2a      	ldr	r3, [pc, #168]	; (2d064 <z_add_timeout+0xe4>)
   2cfba:	e9d3 1300 	ldrd	r1, r3, [r3]
   2cfbe:	1a52      	subs	r2, r2, r1
   2cfc0:	eb6c 0303 	sbc.w	r3, ip, r3
   2cfc4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   2cfc6:	eb63 0307 	sbc.w	r3, r3, r7
   2cfca:	2d01      	cmp	r5, #1
   2cfcc:	f173 0200 	sbcs.w	r2, r3, #0
   2cfd0:	da01      	bge.n	2cfd6 <z_add_timeout+0x56>
   2cfd2:	2501      	movs	r5, #1
   2cfd4:	2300      	movs	r3, #0
	return list->head == list;
   2cfd6:	4824      	ldr	r0, [pc, #144]	; (2d068 <z_add_timeout+0xe8>)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   2cfd8:	e9c4 5304 	strd	r5, r3, [r4, #16]
	sys_dnode_t *const tail = list->tail;
   2cfdc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2cfe0:	4283      	cmp	r3, r0
   2cfe2:	d116      	bne.n	2d012 <z_add_timeout+0x92>
	node->prev = tail;
   2cfe4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   2cfe8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2cfec:	6044      	str	r4, [r0, #4]
}
   2cfee:	e024      	b.n	2d03a <z_add_timeout+0xba>
   2cff0:	f7ff ff7c 	bl	2ceec <elapsed>
   2cff4:	3501      	adds	r5, #1
   2cff6:	f147 0300 	adc.w	r3, r7, #0
   2cffa:	182d      	adds	r5, r5, r0
   2cffc:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   2d000:	e7e9      	b.n	2cfd6 <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   2d002:	1a52      	subs	r2, r2, r1
   2d004:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   2d008:	459c      	cmp	ip, r3
   2d00a:	e9c4 2504 	strd	r2, r5, [r4, #16]
   2d00e:	d0e9      	beq.n	2cfe4 <z_add_timeout+0x64>
   2d010:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   2d012:	2b00      	cmp	r3, #0
   2d014:	d0e6      	beq.n	2cfe4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   2d016:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   2d01a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   2d01e:	428a      	cmp	r2, r1
   2d020:	eb75 0e07 	sbcs.w	lr, r5, r7
   2d024:	daed      	bge.n	2d002 <z_add_timeout+0x82>
				t->dticks -= to->dticks;
   2d026:	1a8a      	subs	r2, r1, r2
   2d028:	eb67 0505 	sbc.w	r5, r7, r5
   2d02c:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   2d030:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2d032:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2d036:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2d038:	605c      	str	r4, [r3, #4]
	return list->head == list;
   2d03a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d03c:	4283      	cmp	r3, r0
   2d03e:	d00b      	beq.n	2d058 <z_add_timeout+0xd8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2d040:	429c      	cmp	r4, r3
   2d042:	d109      	bne.n	2d058 <z_add_timeout+0xd8>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2d044:	f7ff ff5c 	bl	2cf00 <next_timeout>

			if (next_time == 0 ||
   2d048:	b118      	cbz	r0, 2d052 <z_add_timeout+0xd2>
			    _current_cpu->slice_ticks != next_time) {
   2d04a:	4b08      	ldr	r3, [pc, #32]	; (2d06c <z_add_timeout+0xec>)
			if (next_time == 0 ||
   2d04c:	691b      	ldr	r3, [r3, #16]
   2d04e:	4283      	cmp	r3, r0
   2d050:	d002      	beq.n	2d058 <z_add_timeout+0xd8>
				sys_clock_set_timeout(next_time, false);
   2d052:	2100      	movs	r1, #0
   2d054:	f7f8 f980 	bl	25358 <sys_clock_set_timeout>
	__asm__ volatile(
   2d058:	f386 8811 	msr	BASEPRI, r6
   2d05c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2d060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d062:	bf00      	nop
   2d064:	2000d020 	.word	0x2000d020
   2d068:	2000c65c 	.word	0x2000c65c
   2d06c:	2000d8b0 	.word	0x2000d8b0

0002d070 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   2d070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2d074:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2d076:	f7ff fc7b 	bl	2c970 <z_time_slice>
	__asm__ volatile(
   2d07a:	f04f 0320 	mov.w	r3, #32
   2d07e:	f3ef 8511 	mrs	r5, BASEPRI
   2d082:	f383 8812 	msr	BASEPRI_MAX, r3
   2d086:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   2d08a:	4f24      	ldr	r7, [pc, #144]	; (2d11c <sys_clock_announce+0xac>)
	return list->head == list;
   2d08c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 2d124 <sys_clock_announce+0xb4>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2d090:	4e23      	ldr	r6, [pc, #140]	; (2d120 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
   2d092:	603c      	str	r4, [r7, #0]
   2d094:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2d098:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2d09a:	4540      	cmp	r0, r8
   2d09c:	ea4f 71e3 	mov.w	r1, r3, asr #31
		curr_tick += dt;
   2d0a0:	e9d6 2e00 	ldrd	r2, lr, [r6]
   2d0a4:	d00b      	beq.n	2d0be <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2d0a6:	b150      	cbz	r0, 2d0be <sys_clock_announce+0x4e>
   2d0a8:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
   2d0ac:	42a3      	cmp	r3, r4
   2d0ae:	eb71 090c 	sbcs.w	r9, r1, ip
   2d0b2:	da16      	bge.n	2d0e2 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2d0b4:	1ae4      	subs	r4, r4, r3
   2d0b6:	eb6c 0c01 	sbc.w	ip, ip, r1
   2d0ba:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   2d0be:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2d0c0:	189b      	adds	r3, r3, r2
   2d0c2:	eb4e 0101 	adc.w	r1, lr, r1
   2d0c6:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
   2d0ca:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2d0cc:	f7ff ff18 	bl	2cf00 <next_timeout>
   2d0d0:	4621      	mov	r1, r4
   2d0d2:	f7f8 f941 	bl	25358 <sys_clock_set_timeout>
	__asm__ volatile(
   2d0d6:	f385 8811 	msr	BASEPRI, r5
   2d0da:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2d0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2d0e2:	18a2      	adds	r2, r4, r2
   2d0e4:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
		t->dticks = 0;
   2d0e8:	2300      	movs	r3, #0
		curr_tick += dt;
   2d0ea:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
   2d0ee:	2200      	movs	r2, #0
   2d0f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   2d0f4:	f7ff ff2a 	bl	2cf4c <remove_timeout>
   2d0f8:	f385 8811 	msr	BASEPRI, r5
   2d0fc:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2d100:	6883      	ldr	r3, [r0, #8]
   2d102:	4798      	blx	r3
	__asm__ volatile(
   2d104:	f04f 0320 	mov.w	r3, #32
   2d108:	f3ef 8511 	mrs	r5, BASEPRI
   2d10c:	f383 8812 	msr	BASEPRI_MAX, r3
   2d110:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   2d114:	683b      	ldr	r3, [r7, #0]
   2d116:	1b1b      	subs	r3, r3, r4
   2d118:	603b      	str	r3, [r7, #0]
   2d11a:	e7bb      	b.n	2d094 <sys_clock_announce+0x24>
   2d11c:	2000d8f4 	.word	0x2000d8f4
   2d120:	2000d020 	.word	0x2000d020
   2d124:	2000c65c 	.word	0x2000c65c

0002d128 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   2d128:	b510      	push	{r4, lr}
   2d12a:	f04f 0320 	mov.w	r3, #32
   2d12e:	f3ef 8411 	mrs	r4, BASEPRI
   2d132:	f383 8812 	msr	BASEPRI_MAX, r3
   2d136:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   2d13a:	f7ff fed7 	bl	2ceec <elapsed>
   2d13e:	4601      	mov	r1, r0
   2d140:	4b05      	ldr	r3, [pc, #20]	; (2d158 <sys_clock_tick_get+0x30>)
   2d142:	e9d3 0300 	ldrd	r0, r3, [r3]
   2d146:	1808      	adds	r0, r1, r0
   2d148:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
   2d14c:	f384 8811 	msr	BASEPRI, r4
   2d150:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2d154:	bd10      	pop	{r4, pc}
   2d156:	bf00      	nop
   2d158:	2000d020 	.word	0x2000d020

0002d15c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2d15c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2d160:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2d162:	4b29      	ldr	r3, [pc, #164]	; (2d208 <z_impl_k_poll+0xac>)
{
   2d164:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   2d166:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   2d168:	2301      	movs	r3, #1
   2d16a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   2d16e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2d172:	ea52 0305 	orrs.w	r3, r2, r5
   2d176:	bf0c      	ite	eq
   2d178:	2301      	moveq	r3, #1
   2d17a:	2300      	movne	r3, #0
   2d17c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   2d180:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   2d182:	f006 fbe7 	bl	33954 <register_events>
   2d186:	4681      	mov	r9, r0
	__asm__ volatile(
   2d188:	f04f 0320 	mov.w	r3, #32
   2d18c:	f3ef 8a11 	mrs	sl, BASEPRI
   2d190:	f383 8812 	msr	BASEPRI_MAX, r3
   2d194:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2d198:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   2d19c:	b964      	cbnz	r4, 2d1b8 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2d19e:	4601      	mov	r1, r0
   2d1a0:	4652      	mov	r2, sl
   2d1a2:	4640      	mov	r0, r8
   2d1a4:	f006 fca9 	bl	33afa <clear_event_registrations>
	__asm__ volatile(
   2d1a8:	f38a 8811 	msr	BASEPRI, sl
   2d1ac:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   2d1b0:	4620      	mov	r0, r4
   2d1b2:	b002      	add	sp, #8
   2d1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   2d1b8:	2300      	movs	r3, #0
   2d1ba:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2d1be:	ea56 0305 	orrs.w	r3, r6, r5
   2d1c2:	d106      	bne.n	2d1d2 <z_impl_k_poll+0x76>
   2d1c4:	f38a 8811 	msr	BASEPRI, sl
   2d1c8:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2d1cc:	f06f 040a 	mvn.w	r4, #10
   2d1d0:	e7ee      	b.n	2d1b0 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2d1d2:	4651      	mov	r1, sl
   2d1d4:	e9cd 6500 	strd	r6, r5, [sp]
   2d1d8:	4a0c      	ldr	r2, [pc, #48]	; (2d20c <z_impl_k_poll+0xb0>)
   2d1da:	480d      	ldr	r0, [pc, #52]	; (2d210 <z_impl_k_poll+0xb4>)
   2d1dc:	f7ff fc9c 	bl	2cb18 <z_pend_curr>
   2d1e0:	4604      	mov	r4, r0
	__asm__ volatile(
   2d1e2:	f04f 0320 	mov.w	r3, #32
   2d1e6:	f3ef 8511 	mrs	r5, BASEPRI
   2d1ea:	f383 8812 	msr	BASEPRI_MAX, r3
   2d1ee:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   2d1f2:	462a      	mov	r2, r5
   2d1f4:	4649      	mov	r1, r9
   2d1f6:	4640      	mov	r0, r8
   2d1f8:	f006 fc7f 	bl	33afa <clear_event_registrations>
	__asm__ volatile(
   2d1fc:	f385 8811 	msr	BASEPRI, r5
   2d200:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2d204:	e7d4      	b.n	2d1b0 <z_impl_k_poll+0x54>
   2d206:	bf00      	nop
   2d208:	2000d8b0 	.word	0x2000d8b0
   2d20c:	2000c664 	.word	0x2000c664
   2d210:	2001079a 	.word	0x2001079a

0002d214 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   2d214:	b538      	push	{r3, r4, r5, lr}
   2d216:	4603      	mov	r3, r0
	__asm__ volatile(
   2d218:	f04f 0220 	mov.w	r2, #32
   2d21c:	f3ef 8511 	mrs	r5, BASEPRI
   2d220:	f382 8812 	msr	BASEPRI_MAX, r2
   2d224:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   2d228:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   2d22a:	2101      	movs	r1, #1
   2d22c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   2d22e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   2d230:	4283      	cmp	r3, r0
   2d232:	d106      	bne.n	2d242 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   2d234:	f385 8811 	msr	BASEPRI, r5
   2d238:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   2d23c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   2d23e:	4620      	mov	r0, r4
   2d240:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   2d242:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2d246:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2d248:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2d24a:	2300      	movs	r3, #0
	node->prev = NULL;
   2d24c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2d250:	f006 fbf7 	bl	33a42 <signal_poll_event>
	z_reschedule(&lock, key);
   2d254:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2d256:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   2d258:	4801      	ldr	r0, [pc, #4]	; (2d260 <z_impl_k_poll_signal_raise+0x4c>)
   2d25a:	f7ff fb09 	bl	2c870 <z_reschedule>
	return rc;
   2d25e:	e7ee      	b.n	2d23e <z_impl_k_poll_signal_raise+0x2a>
   2d260:	2001079a 	.word	0x2001079a

0002d264 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   2d264:	460a      	mov	r2, r1
	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2d266:	4601      	mov	r1, r0
   2d268:	4801      	ldr	r0, [pc, #4]	; (2d270 <k_aligned_alloc+0xc>)
   2d26a:	f006 bc83 	b.w	33b74 <z_heap_aligned_alloc>
   2d26e:	bf00      	nop
   2d270:	2000c8ec 	.word	0x2000c8ec

0002d274 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   2d274:	4b01      	ldr	r3, [pc, #4]	; (2d27c <k_thread_system_pool_assign+0x8>)
   2d276:	6743      	str	r3, [r0, #116]	; 0x74
}
   2d278:	4770      	bx	lr
   2d27a:	bf00      	nop
   2d27c:	2000c8ec 	.word	0x2000c8ec

0002d280 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2d280:	b513      	push	{r0, r1, r4, lr}
   2d282:	4604      	mov	r4, r0
   2d284:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2d286:	f006 f865 	bl	33354 <k_is_in_isr>
   2d28a:	9a01      	ldr	r2, [sp, #4]
   2d28c:	b950      	cbnz	r0, 2d2a4 <z_thread_aligned_alloc+0x24>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2d28e:	4b07      	ldr	r3, [pc, #28]	; (2d2ac <z_thread_aligned_alloc+0x2c>)
   2d290:	689b      	ldr	r3, [r3, #8]
   2d292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   2d294:	b143      	cbz	r3, 2d2a8 <z_thread_aligned_alloc+0x28>
		ret = z_heap_aligned_alloc(heap, align, size);
   2d296:	4621      	mov	r1, r4
   2d298:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   2d29a:	b002      	add	sp, #8
   2d29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2d2a0:	f006 bc68 	b.w	33b74 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   2d2a4:	4b02      	ldr	r3, [pc, #8]	; (2d2b0 <z_thread_aligned_alloc+0x30>)
   2d2a6:	e7f6      	b.n	2d296 <z_thread_aligned_alloc+0x16>
}
   2d2a8:	b002      	add	sp, #8
   2d2aa:	bd10      	pop	{r4, pc}
   2d2ac:	2000d8b0 	.word	0x2000d8b0
   2d2b0:	2000c8ec 	.word	0x2000c8ec

0002d2b4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   2d2b4:	4a02      	ldr	r2, [pc, #8]	; (2d2c0 <boot_banner+0xc>)
   2d2b6:	4903      	ldr	r1, [pc, #12]	; (2d2c4 <boot_banner+0x10>)
   2d2b8:	4803      	ldr	r0, [pc, #12]	; (2d2c8 <boot_banner+0x14>)
   2d2ba:	f002 babe 	b.w	2f83a <printk>
   2d2be:	bf00      	nop
   2d2c0:	00039842 	.word	0x00039842
   2d2c4:	00039f33 	.word	0x00039f33
   2d2c8:	00039f40 	.word	0x00039f40

0002d2cc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   2d2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   2d2ce:	2400      	movs	r4, #0
   2d2d0:	4b08      	ldr	r3, [pc, #32]	; (2d2f4 <k_sys_work_q_init+0x28>)
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2d2d2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
	struct k_work_queue_config cfg = {
   2d2d6:	9302      	str	r3, [sp, #8]
	k_work_queue_start(&k_sys_work_q,
   2d2d8:	ab02      	add	r3, sp, #8
   2d2da:	9300      	str	r3, [sp, #0]
   2d2dc:	4906      	ldr	r1, [pc, #24]	; (2d2f8 <k_sys_work_q_init+0x2c>)
   2d2de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d2e2:	4806      	ldr	r0, [pc, #24]	; (2d2fc <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   2d2e4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   2d2e8:	f7ff fa10 	bl	2c70c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   2d2ec:	4620      	mov	r0, r4
   2d2ee:	b004      	add	sp, #16
   2d2f0:	bd10      	pop	{r4, pc}
   2d2f2:	bf00      	nop
   2d2f4:	00039f67 	.word	0x00039f67
   2d2f8:	200146e0 	.word	0x200146e0
   2d2fc:	2000d028 	.word	0x2000d028

0002d300 <fiprintf>:
   2d300:	b40e      	push	{r1, r2, r3}
   2d302:	b503      	push	{r0, r1, lr}
   2d304:	ab03      	add	r3, sp, #12
   2d306:	4601      	mov	r1, r0
   2d308:	4805      	ldr	r0, [pc, #20]	; (2d320 <fiprintf+0x20>)
   2d30a:	f853 2b04 	ldr.w	r2, [r3], #4
   2d30e:	6800      	ldr	r0, [r0, #0]
   2d310:	9301      	str	r3, [sp, #4]
   2d312:	f000 f8bd 	bl	2d490 <_vfiprintf_r>
   2d316:	b002      	add	sp, #8
   2d318:	f85d eb04 	ldr.w	lr, [sp], #4
   2d31c:	b003      	add	sp, #12
   2d31e:	4770      	bx	lr
   2d320:	2000c66c 	.word	0x2000c66c

0002d324 <malloc>:
   2d324:	4b02      	ldr	r3, [pc, #8]	; (2d330 <malloc+0xc>)
   2d326:	4601      	mov	r1, r0
   2d328:	6818      	ldr	r0, [r3, #0]
   2d32a:	f000 b857 	b.w	2d3dc <_malloc_r>
   2d32e:	bf00      	nop
   2d330:	2000c66c 	.word	0x2000c66c

0002d334 <free>:
   2d334:	4b02      	ldr	r3, [pc, #8]	; (2d340 <free+0xc>)
   2d336:	4601      	mov	r1, r0
   2d338:	6818      	ldr	r0, [r3, #0]
   2d33a:	f000 b803 	b.w	2d344 <_free_r>
   2d33e:	bf00      	nop
   2d340:	2000c66c 	.word	0x2000c66c

0002d344 <_free_r>:
   2d344:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2d346:	2900      	cmp	r1, #0
   2d348:	d043      	beq.n	2d3d2 <_free_r+0x8e>
   2d34a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2d34e:	1f0c      	subs	r4, r1, #4
   2d350:	9001      	str	r0, [sp, #4]
   2d352:	2b00      	cmp	r3, #0
   2d354:	bfb8      	it	lt
   2d356:	18e4      	addlt	r4, r4, r3
   2d358:	f001 fa5c 	bl	2e814 <__malloc_lock>
   2d35c:	4a1e      	ldr	r2, [pc, #120]	; (2d3d8 <_free_r+0x94>)
   2d35e:	9801      	ldr	r0, [sp, #4]
   2d360:	6813      	ldr	r3, [r2, #0]
   2d362:	b933      	cbnz	r3, 2d372 <_free_r+0x2e>
   2d364:	6063      	str	r3, [r4, #4]
   2d366:	6014      	str	r4, [r2, #0]
   2d368:	b003      	add	sp, #12
   2d36a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2d36e:	f001 ba57 	b.w	2e820 <__malloc_unlock>
   2d372:	42a3      	cmp	r3, r4
   2d374:	d908      	bls.n	2d388 <_free_r+0x44>
   2d376:	6825      	ldr	r5, [r4, #0]
   2d378:	1961      	adds	r1, r4, r5
   2d37a:	428b      	cmp	r3, r1
   2d37c:	bf01      	itttt	eq
   2d37e:	6819      	ldreq	r1, [r3, #0]
   2d380:	685b      	ldreq	r3, [r3, #4]
   2d382:	1949      	addeq	r1, r1, r5
   2d384:	6021      	streq	r1, [r4, #0]
   2d386:	e7ed      	b.n	2d364 <_free_r+0x20>
   2d388:	461a      	mov	r2, r3
   2d38a:	685b      	ldr	r3, [r3, #4]
   2d38c:	b10b      	cbz	r3, 2d392 <_free_r+0x4e>
   2d38e:	42a3      	cmp	r3, r4
   2d390:	d9fa      	bls.n	2d388 <_free_r+0x44>
   2d392:	6811      	ldr	r1, [r2, #0]
   2d394:	1855      	adds	r5, r2, r1
   2d396:	42a5      	cmp	r5, r4
   2d398:	d10b      	bne.n	2d3b2 <_free_r+0x6e>
   2d39a:	6824      	ldr	r4, [r4, #0]
   2d39c:	4421      	add	r1, r4
   2d39e:	1854      	adds	r4, r2, r1
   2d3a0:	6011      	str	r1, [r2, #0]
   2d3a2:	42a3      	cmp	r3, r4
   2d3a4:	d1e0      	bne.n	2d368 <_free_r+0x24>
   2d3a6:	681c      	ldr	r4, [r3, #0]
   2d3a8:	685b      	ldr	r3, [r3, #4]
   2d3aa:	4421      	add	r1, r4
   2d3ac:	6053      	str	r3, [r2, #4]
   2d3ae:	6011      	str	r1, [r2, #0]
   2d3b0:	e7da      	b.n	2d368 <_free_r+0x24>
   2d3b2:	d902      	bls.n	2d3ba <_free_r+0x76>
   2d3b4:	230c      	movs	r3, #12
   2d3b6:	6003      	str	r3, [r0, #0]
   2d3b8:	e7d6      	b.n	2d368 <_free_r+0x24>
   2d3ba:	6825      	ldr	r5, [r4, #0]
   2d3bc:	1961      	adds	r1, r4, r5
   2d3be:	428b      	cmp	r3, r1
   2d3c0:	bf02      	ittt	eq
   2d3c2:	6819      	ldreq	r1, [r3, #0]
   2d3c4:	685b      	ldreq	r3, [r3, #4]
   2d3c6:	1949      	addeq	r1, r1, r5
   2d3c8:	6063      	str	r3, [r4, #4]
   2d3ca:	bf08      	it	eq
   2d3cc:	6021      	streq	r1, [r4, #0]
   2d3ce:	6054      	str	r4, [r2, #4]
   2d3d0:	e7ca      	b.n	2d368 <_free_r+0x24>
   2d3d2:	b003      	add	sp, #12
   2d3d4:	bd30      	pop	{r4, r5, pc}
   2d3d6:	bf00      	nop
   2d3d8:	2000d8f8 	.word	0x2000d8f8

0002d3dc <_malloc_r>:
   2d3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d3de:	1ccd      	adds	r5, r1, #3
   2d3e0:	4606      	mov	r6, r0
   2d3e2:	f025 0503 	bic.w	r5, r5, #3
   2d3e6:	3508      	adds	r5, #8
   2d3e8:	2d0c      	cmp	r5, #12
   2d3ea:	bf38      	it	cc
   2d3ec:	250c      	movcc	r5, #12
   2d3ee:	2d00      	cmp	r5, #0
   2d3f0:	db01      	blt.n	2d3f6 <_malloc_r+0x1a>
   2d3f2:	42a9      	cmp	r1, r5
   2d3f4:	d903      	bls.n	2d3fe <_malloc_r+0x22>
   2d3f6:	230c      	movs	r3, #12
   2d3f8:	6033      	str	r3, [r6, #0]
   2d3fa:	2000      	movs	r0, #0
   2d3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d3fe:	f001 fa09 	bl	2e814 <__malloc_lock>
   2d402:	4921      	ldr	r1, [pc, #132]	; (2d488 <_malloc_r+0xac>)
   2d404:	680a      	ldr	r2, [r1, #0]
   2d406:	4614      	mov	r4, r2
   2d408:	b99c      	cbnz	r4, 2d432 <_malloc_r+0x56>
   2d40a:	4f20      	ldr	r7, [pc, #128]	; (2d48c <_malloc_r+0xb0>)
   2d40c:	683b      	ldr	r3, [r7, #0]
   2d40e:	b923      	cbnz	r3, 2d41a <_malloc_r+0x3e>
   2d410:	4621      	mov	r1, r4
   2d412:	4630      	mov	r0, r6
   2d414:	f000 fcd0 	bl	2ddb8 <_sbrk_r>
   2d418:	6038      	str	r0, [r7, #0]
   2d41a:	4629      	mov	r1, r5
   2d41c:	4630      	mov	r0, r6
   2d41e:	f000 fccb 	bl	2ddb8 <_sbrk_r>
   2d422:	1c43      	adds	r3, r0, #1
   2d424:	d123      	bne.n	2d46e <_malloc_r+0x92>
   2d426:	230c      	movs	r3, #12
   2d428:	4630      	mov	r0, r6
   2d42a:	6033      	str	r3, [r6, #0]
   2d42c:	f001 f9f8 	bl	2e820 <__malloc_unlock>
   2d430:	e7e3      	b.n	2d3fa <_malloc_r+0x1e>
   2d432:	6823      	ldr	r3, [r4, #0]
   2d434:	1b5b      	subs	r3, r3, r5
   2d436:	d417      	bmi.n	2d468 <_malloc_r+0x8c>
   2d438:	2b0b      	cmp	r3, #11
   2d43a:	d903      	bls.n	2d444 <_malloc_r+0x68>
   2d43c:	6023      	str	r3, [r4, #0]
   2d43e:	441c      	add	r4, r3
   2d440:	6025      	str	r5, [r4, #0]
   2d442:	e004      	b.n	2d44e <_malloc_r+0x72>
   2d444:	6863      	ldr	r3, [r4, #4]
   2d446:	42a2      	cmp	r2, r4
   2d448:	bf0c      	ite	eq
   2d44a:	600b      	streq	r3, [r1, #0]
   2d44c:	6053      	strne	r3, [r2, #4]
   2d44e:	4630      	mov	r0, r6
   2d450:	f001 f9e6 	bl	2e820 <__malloc_unlock>
   2d454:	f104 000b 	add.w	r0, r4, #11
   2d458:	1d23      	adds	r3, r4, #4
   2d45a:	f020 0007 	bic.w	r0, r0, #7
   2d45e:	1ac2      	subs	r2, r0, r3
   2d460:	d0cc      	beq.n	2d3fc <_malloc_r+0x20>
   2d462:	1a1b      	subs	r3, r3, r0
   2d464:	50a3      	str	r3, [r4, r2]
   2d466:	e7c9      	b.n	2d3fc <_malloc_r+0x20>
   2d468:	4622      	mov	r2, r4
   2d46a:	6864      	ldr	r4, [r4, #4]
   2d46c:	e7cc      	b.n	2d408 <_malloc_r+0x2c>
   2d46e:	1cc4      	adds	r4, r0, #3
   2d470:	f024 0403 	bic.w	r4, r4, #3
   2d474:	42a0      	cmp	r0, r4
   2d476:	d0e3      	beq.n	2d440 <_malloc_r+0x64>
   2d478:	1a21      	subs	r1, r4, r0
   2d47a:	4630      	mov	r0, r6
   2d47c:	f000 fc9c 	bl	2ddb8 <_sbrk_r>
   2d480:	3001      	adds	r0, #1
   2d482:	d1dd      	bne.n	2d440 <_malloc_r+0x64>
   2d484:	e7cf      	b.n	2d426 <_malloc_r+0x4a>
   2d486:	bf00      	nop
   2d488:	2000d8f8 	.word	0x2000d8f8
   2d48c:	2000d8fc 	.word	0x2000d8fc

0002d490 <_vfiprintf_r>:
   2d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d494:	460d      	mov	r5, r1
   2d496:	b09d      	sub	sp, #116	; 0x74
   2d498:	4614      	mov	r4, r2
   2d49a:	4698      	mov	r8, r3
   2d49c:	4606      	mov	r6, r0
   2d49e:	b118      	cbz	r0, 2d4a8 <_vfiprintf_r+0x18>
   2d4a0:	6983      	ldr	r3, [r0, #24]
   2d4a2:	b90b      	cbnz	r3, 2d4a8 <_vfiprintf_r+0x18>
   2d4a4:	f001 f8e2 	bl	2e66c <__sinit>
   2d4a8:	4b89      	ldr	r3, [pc, #548]	; (2d6d0 <_vfiprintf_r+0x240>)
   2d4aa:	429d      	cmp	r5, r3
   2d4ac:	d11b      	bne.n	2d4e6 <_vfiprintf_r+0x56>
   2d4ae:	6875      	ldr	r5, [r6, #4]
   2d4b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2d4b2:	07d9      	lsls	r1, r3, #31
   2d4b4:	d405      	bmi.n	2d4c2 <_vfiprintf_r+0x32>
   2d4b6:	89ab      	ldrh	r3, [r5, #12]
   2d4b8:	059a      	lsls	r2, r3, #22
   2d4ba:	d402      	bmi.n	2d4c2 <_vfiprintf_r+0x32>
   2d4bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2d4be:	f003 fbf4 	bl	30caa <__retarget_lock_acquire_recursive>
   2d4c2:	89ab      	ldrh	r3, [r5, #12]
   2d4c4:	071b      	lsls	r3, r3, #28
   2d4c6:	d501      	bpl.n	2d4cc <_vfiprintf_r+0x3c>
   2d4c8:	692b      	ldr	r3, [r5, #16]
   2d4ca:	b9eb      	cbnz	r3, 2d508 <_vfiprintf_r+0x78>
   2d4cc:	4629      	mov	r1, r5
   2d4ce:	4630      	mov	r0, r6
   2d4d0:	f000 ff4c 	bl	2e36c <__swsetup_r>
   2d4d4:	b1c0      	cbz	r0, 2d508 <_vfiprintf_r+0x78>
   2d4d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2d4d8:	07dc      	lsls	r4, r3, #31
   2d4da:	d50e      	bpl.n	2d4fa <_vfiprintf_r+0x6a>
   2d4dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d4e0:	b01d      	add	sp, #116	; 0x74
   2d4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d4e6:	4b7b      	ldr	r3, [pc, #492]	; (2d6d4 <_vfiprintf_r+0x244>)
   2d4e8:	429d      	cmp	r5, r3
   2d4ea:	d101      	bne.n	2d4f0 <_vfiprintf_r+0x60>
   2d4ec:	68b5      	ldr	r5, [r6, #8]
   2d4ee:	e7df      	b.n	2d4b0 <_vfiprintf_r+0x20>
   2d4f0:	4b79      	ldr	r3, [pc, #484]	; (2d6d8 <_vfiprintf_r+0x248>)
   2d4f2:	429d      	cmp	r5, r3
   2d4f4:	bf08      	it	eq
   2d4f6:	68f5      	ldreq	r5, [r6, #12]
   2d4f8:	e7da      	b.n	2d4b0 <_vfiprintf_r+0x20>
   2d4fa:	89ab      	ldrh	r3, [r5, #12]
   2d4fc:	0598      	lsls	r0, r3, #22
   2d4fe:	d4ed      	bmi.n	2d4dc <_vfiprintf_r+0x4c>
   2d500:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2d502:	f003 fbd8 	bl	30cb6 <__retarget_lock_release_recursive>
   2d506:	e7e9      	b.n	2d4dc <_vfiprintf_r+0x4c>
   2d508:	2300      	movs	r3, #0
   2d50a:	f8cd 800c 	str.w	r8, [sp, #12]
   2d50e:	f04f 0901 	mov.w	r9, #1
   2d512:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 2d6dc <_vfiprintf_r+0x24c>
   2d516:	9309      	str	r3, [sp, #36]	; 0x24
   2d518:	2320      	movs	r3, #32
   2d51a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2d51e:	2330      	movs	r3, #48	; 0x30
   2d520:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2d524:	4623      	mov	r3, r4
   2d526:	469a      	mov	sl, r3
   2d528:	f813 2b01 	ldrb.w	r2, [r3], #1
   2d52c:	b10a      	cbz	r2, 2d532 <_vfiprintf_r+0xa2>
   2d52e:	2a25      	cmp	r2, #37	; 0x25
   2d530:	d1f9      	bne.n	2d526 <_vfiprintf_r+0x96>
   2d532:	ebba 0b04 	subs.w	fp, sl, r4
   2d536:	d00b      	beq.n	2d550 <_vfiprintf_r+0xc0>
   2d538:	465b      	mov	r3, fp
   2d53a:	4622      	mov	r2, r4
   2d53c:	4629      	mov	r1, r5
   2d53e:	4630      	mov	r0, r6
   2d540:	f006 fbc3 	bl	33cca <__sfputs_r>
   2d544:	3001      	adds	r0, #1
   2d546:	f000 80aa 	beq.w	2d69e <_vfiprintf_r+0x20e>
   2d54a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2d54c:	445a      	add	r2, fp
   2d54e:	9209      	str	r2, [sp, #36]	; 0x24
   2d550:	f89a 3000 	ldrb.w	r3, [sl]
   2d554:	2b00      	cmp	r3, #0
   2d556:	f000 80a2 	beq.w	2d69e <_vfiprintf_r+0x20e>
   2d55a:	2300      	movs	r3, #0
   2d55c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d560:	f10a 0a01 	add.w	sl, sl, #1
   2d564:	9304      	str	r3, [sp, #16]
   2d566:	9307      	str	r3, [sp, #28]
   2d568:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2d56c:	931a      	str	r3, [sp, #104]	; 0x68
   2d56e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2d572:	4654      	mov	r4, sl
   2d574:	2205      	movs	r2, #5
   2d576:	4859      	ldr	r0, [pc, #356]	; (2d6dc <_vfiprintf_r+0x24c>)
   2d578:	f814 1b01 	ldrb.w	r1, [r4], #1
   2d57c:	f006 fb39 	bl	33bf2 <memchr>
   2d580:	9a04      	ldr	r2, [sp, #16]
   2d582:	b9d8      	cbnz	r0, 2d5bc <_vfiprintf_r+0x12c>
   2d584:	06d1      	lsls	r1, r2, #27
   2d586:	bf44      	itt	mi
   2d588:	2320      	movmi	r3, #32
   2d58a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2d58e:	0713      	lsls	r3, r2, #28
   2d590:	bf44      	itt	mi
   2d592:	232b      	movmi	r3, #43	; 0x2b
   2d594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2d598:	f89a 3000 	ldrb.w	r3, [sl]
   2d59c:	2b2a      	cmp	r3, #42	; 0x2a
   2d59e:	d015      	beq.n	2d5cc <_vfiprintf_r+0x13c>
   2d5a0:	9a07      	ldr	r2, [sp, #28]
   2d5a2:	4654      	mov	r4, sl
   2d5a4:	2000      	movs	r0, #0
   2d5a6:	f04f 0c0a 	mov.w	ip, #10
   2d5aa:	4621      	mov	r1, r4
   2d5ac:	f811 3b01 	ldrb.w	r3, [r1], #1
   2d5b0:	3b30      	subs	r3, #48	; 0x30
   2d5b2:	2b09      	cmp	r3, #9
   2d5b4:	d94e      	bls.n	2d654 <_vfiprintf_r+0x1c4>
   2d5b6:	b1b0      	cbz	r0, 2d5e6 <_vfiprintf_r+0x156>
   2d5b8:	9207      	str	r2, [sp, #28]
   2d5ba:	e014      	b.n	2d5e6 <_vfiprintf_r+0x156>
   2d5bc:	eba0 0308 	sub.w	r3, r0, r8
   2d5c0:	46a2      	mov	sl, r4
   2d5c2:	fa09 f303 	lsl.w	r3, r9, r3
   2d5c6:	4313      	orrs	r3, r2
   2d5c8:	9304      	str	r3, [sp, #16]
   2d5ca:	e7d2      	b.n	2d572 <_vfiprintf_r+0xe2>
   2d5cc:	9b03      	ldr	r3, [sp, #12]
   2d5ce:	1d19      	adds	r1, r3, #4
   2d5d0:	681b      	ldr	r3, [r3, #0]
   2d5d2:	2b00      	cmp	r3, #0
   2d5d4:	9103      	str	r1, [sp, #12]
   2d5d6:	bfbb      	ittet	lt
   2d5d8:	425b      	neglt	r3, r3
   2d5da:	f042 0202 	orrlt.w	r2, r2, #2
   2d5de:	9307      	strge	r3, [sp, #28]
   2d5e0:	9307      	strlt	r3, [sp, #28]
   2d5e2:	bfb8      	it	lt
   2d5e4:	9204      	strlt	r2, [sp, #16]
   2d5e6:	7823      	ldrb	r3, [r4, #0]
   2d5e8:	2b2e      	cmp	r3, #46	; 0x2e
   2d5ea:	d10c      	bne.n	2d606 <_vfiprintf_r+0x176>
   2d5ec:	7863      	ldrb	r3, [r4, #1]
   2d5ee:	2b2a      	cmp	r3, #42	; 0x2a
   2d5f0:	d135      	bne.n	2d65e <_vfiprintf_r+0x1ce>
   2d5f2:	9b03      	ldr	r3, [sp, #12]
   2d5f4:	3402      	adds	r4, #2
   2d5f6:	1d1a      	adds	r2, r3, #4
   2d5f8:	681b      	ldr	r3, [r3, #0]
   2d5fa:	2b00      	cmp	r3, #0
   2d5fc:	9203      	str	r2, [sp, #12]
   2d5fe:	bfb8      	it	lt
   2d600:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2d604:	9305      	str	r3, [sp, #20]
   2d606:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 2d6ec <_vfiprintf_r+0x25c>
   2d60a:	2203      	movs	r2, #3
   2d60c:	7821      	ldrb	r1, [r4, #0]
   2d60e:	4650      	mov	r0, sl
   2d610:	f006 faef 	bl	33bf2 <memchr>
   2d614:	b140      	cbz	r0, 2d628 <_vfiprintf_r+0x198>
   2d616:	2340      	movs	r3, #64	; 0x40
   2d618:	eba0 000a 	sub.w	r0, r0, sl
   2d61c:	3401      	adds	r4, #1
   2d61e:	fa03 f000 	lsl.w	r0, r3, r0
   2d622:	9b04      	ldr	r3, [sp, #16]
   2d624:	4303      	orrs	r3, r0
   2d626:	9304      	str	r3, [sp, #16]
   2d628:	f814 1b01 	ldrb.w	r1, [r4], #1
   2d62c:	2206      	movs	r2, #6
   2d62e:	482c      	ldr	r0, [pc, #176]	; (2d6e0 <_vfiprintf_r+0x250>)
   2d630:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2d634:	f006 fadd 	bl	33bf2 <memchr>
   2d638:	2800      	cmp	r0, #0
   2d63a:	d03f      	beq.n	2d6bc <_vfiprintf_r+0x22c>
   2d63c:	4b29      	ldr	r3, [pc, #164]	; (2d6e4 <_vfiprintf_r+0x254>)
   2d63e:	bb1b      	cbnz	r3, 2d688 <_vfiprintf_r+0x1f8>
   2d640:	9b03      	ldr	r3, [sp, #12]
   2d642:	3307      	adds	r3, #7
   2d644:	f023 0307 	bic.w	r3, r3, #7
   2d648:	3308      	adds	r3, #8
   2d64a:	9303      	str	r3, [sp, #12]
   2d64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d64e:	443b      	add	r3, r7
   2d650:	9309      	str	r3, [sp, #36]	; 0x24
   2d652:	e767      	b.n	2d524 <_vfiprintf_r+0x94>
   2d654:	fb0c 3202 	mla	r2, ip, r2, r3
   2d658:	460c      	mov	r4, r1
   2d65a:	2001      	movs	r0, #1
   2d65c:	e7a5      	b.n	2d5aa <_vfiprintf_r+0x11a>
   2d65e:	2300      	movs	r3, #0
   2d660:	3401      	adds	r4, #1
   2d662:	f04f 0c0a 	mov.w	ip, #10
   2d666:	4619      	mov	r1, r3
   2d668:	9305      	str	r3, [sp, #20]
   2d66a:	4620      	mov	r0, r4
   2d66c:	f810 2b01 	ldrb.w	r2, [r0], #1
   2d670:	3a30      	subs	r2, #48	; 0x30
   2d672:	2a09      	cmp	r2, #9
   2d674:	d903      	bls.n	2d67e <_vfiprintf_r+0x1ee>
   2d676:	2b00      	cmp	r3, #0
   2d678:	d0c5      	beq.n	2d606 <_vfiprintf_r+0x176>
   2d67a:	9105      	str	r1, [sp, #20]
   2d67c:	e7c3      	b.n	2d606 <_vfiprintf_r+0x176>
   2d67e:	fb0c 2101 	mla	r1, ip, r1, r2
   2d682:	4604      	mov	r4, r0
   2d684:	2301      	movs	r3, #1
   2d686:	e7f0      	b.n	2d66a <_vfiprintf_r+0x1da>
   2d688:	ab03      	add	r3, sp, #12
   2d68a:	462a      	mov	r2, r5
   2d68c:	a904      	add	r1, sp, #16
   2d68e:	4630      	mov	r0, r6
   2d690:	9300      	str	r3, [sp, #0]
   2d692:	4b15      	ldr	r3, [pc, #84]	; (2d6e8 <_vfiprintf_r+0x258>)
   2d694:	f000 f82c 	bl	2d6f0 <_printf_float>
   2d698:	4607      	mov	r7, r0
   2d69a:	1c78      	adds	r0, r7, #1
   2d69c:	d1d6      	bne.n	2d64c <_vfiprintf_r+0x1bc>
   2d69e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2d6a0:	07d9      	lsls	r1, r3, #31
   2d6a2:	d405      	bmi.n	2d6b0 <_vfiprintf_r+0x220>
   2d6a4:	89ab      	ldrh	r3, [r5, #12]
   2d6a6:	059a      	lsls	r2, r3, #22
   2d6a8:	d402      	bmi.n	2d6b0 <_vfiprintf_r+0x220>
   2d6aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2d6ac:	f003 fb03 	bl	30cb6 <__retarget_lock_release_recursive>
   2d6b0:	89ab      	ldrh	r3, [r5, #12]
   2d6b2:	065b      	lsls	r3, r3, #25
   2d6b4:	f53f af12 	bmi.w	2d4dc <_vfiprintf_r+0x4c>
   2d6b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   2d6ba:	e711      	b.n	2d4e0 <_vfiprintf_r+0x50>
   2d6bc:	ab03      	add	r3, sp, #12
   2d6be:	462a      	mov	r2, r5
   2d6c0:	a904      	add	r1, sp, #16
   2d6c2:	4630      	mov	r0, r6
   2d6c4:	9300      	str	r3, [sp, #0]
   2d6c6:	4b08      	ldr	r3, [pc, #32]	; (2d6e8 <_vfiprintf_r+0x258>)
   2d6c8:	f000 fa48 	bl	2db5c <_printf_i>
   2d6cc:	e7e4      	b.n	2d698 <_vfiprintf_r+0x208>
   2d6ce:	bf00      	nop
   2d6d0:	000353b8 	.word	0x000353b8
   2d6d4:	000353d8 	.word	0x000353d8
   2d6d8:	00035398 	.word	0x00035398
   2d6dc:	0003a071 	.word	0x0003a071
   2d6e0:	0003a07b 	.word	0x0003a07b
   2d6e4:	0002d6f1 	.word	0x0002d6f1
   2d6e8:	00033ccb 	.word	0x00033ccb
   2d6ec:	0003a077 	.word	0x0003a077

0002d6f0 <_printf_float>:
   2d6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d6f4:	ed2d 8b02 	vpush	{d8}
   2d6f8:	b08d      	sub	sp, #52	; 0x34
   2d6fa:	460c      	mov	r4, r1
   2d6fc:	4616      	mov	r6, r2
   2d6fe:	461f      	mov	r7, r3
   2d700:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   2d704:	4605      	mov	r5, r0
   2d706:	f001 f82f 	bl	2e768 <_localeconv_r>
   2d70a:	f8d0 a000 	ldr.w	sl, [r0]
   2d70e:	4650      	mov	r0, sl
   2d710:	f7ef fcc6 	bl	1d0a0 <strlen>
   2d714:	2300      	movs	r3, #0
   2d716:	f894 b018 	ldrb.w	fp, [r4, #24]
   2d71a:	ee08 0a10 	vmov	s16, r0
   2d71e:	930a      	str	r3, [sp, #40]	; 0x28
   2d720:	6823      	ldr	r3, [r4, #0]
   2d722:	9305      	str	r3, [sp, #20]
   2d724:	f8d8 3000 	ldr.w	r3, [r8]
   2d728:	3307      	adds	r3, #7
   2d72a:	f023 0307 	bic.w	r3, r3, #7
   2d72e:	f103 0208 	add.w	r2, r3, #8
   2d732:	f8c8 2000 	str.w	r2, [r8]
   2d736:	e9d3 2300 	ldrd	r2, r3, [r3]
   2d73a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   2d73e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   2d742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   2d74a:	f8cd 8018 	str.w	r8, [sp, #24]
   2d74e:	9307      	str	r3, [sp, #28]
   2d750:	4b9e      	ldr	r3, [pc, #632]	; (2d9cc <_printf_float+0x2dc>)
   2d752:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   2d756:	f7ef fa4d 	bl	1cbf4 <__aeabi_dcmpun>
   2d75a:	bb88      	cbnz	r0, 2d7c0 <_printf_float+0xd0>
   2d75c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2d760:	4b9a      	ldr	r3, [pc, #616]	; (2d9cc <_printf_float+0x2dc>)
   2d762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   2d766:	f7ef fa27 	bl	1cbb8 <__aeabi_dcmple>
   2d76a:	bb48      	cbnz	r0, 2d7c0 <_printf_float+0xd0>
   2d76c:	2200      	movs	r2, #0
   2d76e:	2300      	movs	r3, #0
   2d770:	4640      	mov	r0, r8
   2d772:	4649      	mov	r1, r9
   2d774:	f7ef fa16 	bl	1cba4 <__aeabi_dcmplt>
   2d778:	b110      	cbz	r0, 2d780 <_printf_float+0x90>
   2d77a:	232d      	movs	r3, #45	; 0x2d
   2d77c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2d780:	4b93      	ldr	r3, [pc, #588]	; (2d9d0 <_printf_float+0x2e0>)
   2d782:	4894      	ldr	r0, [pc, #592]	; (2d9d4 <_printf_float+0x2e4>)
   2d784:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   2d788:	bf94      	ite	ls
   2d78a:	4698      	movls	r8, r3
   2d78c:	4680      	movhi	r8, r0
   2d78e:	2303      	movs	r3, #3
   2d790:	f04f 0900 	mov.w	r9, #0
   2d794:	6123      	str	r3, [r4, #16]
   2d796:	9b05      	ldr	r3, [sp, #20]
   2d798:	f023 0204 	bic.w	r2, r3, #4
   2d79c:	6022      	str	r2, [r4, #0]
   2d79e:	4633      	mov	r3, r6
   2d7a0:	aa0b      	add	r2, sp, #44	; 0x2c
   2d7a2:	4621      	mov	r1, r4
   2d7a4:	4628      	mov	r0, r5
   2d7a6:	9700      	str	r7, [sp, #0]
   2d7a8:	f006 fb41 	bl	33e2e <_printf_common>
   2d7ac:	3001      	adds	r0, #1
   2d7ae:	f040 8090 	bne.w	2d8d2 <_printf_float+0x1e2>
   2d7b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2d7b6:	b00d      	add	sp, #52	; 0x34
   2d7b8:	ecbd 8b02 	vpop	{d8}
   2d7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d7c0:	4642      	mov	r2, r8
   2d7c2:	464b      	mov	r3, r9
   2d7c4:	4640      	mov	r0, r8
   2d7c6:	4649      	mov	r1, r9
   2d7c8:	f7ef fa14 	bl	1cbf4 <__aeabi_dcmpun>
   2d7cc:	b140      	cbz	r0, 2d7e0 <_printf_float+0xf0>
   2d7ce:	464b      	mov	r3, r9
   2d7d0:	4881      	ldr	r0, [pc, #516]	; (2d9d8 <_printf_float+0x2e8>)
   2d7d2:	2b00      	cmp	r3, #0
   2d7d4:	bfbc      	itt	lt
   2d7d6:	232d      	movlt	r3, #45	; 0x2d
   2d7d8:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   2d7dc:	4b7f      	ldr	r3, [pc, #508]	; (2d9dc <_printf_float+0x2ec>)
   2d7de:	e7d1      	b.n	2d784 <_printf_float+0x94>
   2d7e0:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   2d7e4:	6863      	ldr	r3, [r4, #4]
   2d7e6:	9206      	str	r2, [sp, #24]
   2d7e8:	1c5a      	adds	r2, r3, #1
   2d7ea:	d13f      	bne.n	2d86c <_printf_float+0x17c>
   2d7ec:	2306      	movs	r3, #6
   2d7ee:	6063      	str	r3, [r4, #4]
   2d7f0:	9b05      	ldr	r3, [sp, #20]
   2d7f2:	4628      	mov	r0, r5
   2d7f4:	6861      	ldr	r1, [r4, #4]
   2d7f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   2d7fa:	2300      	movs	r3, #0
   2d7fc:	9303      	str	r3, [sp, #12]
   2d7fe:	ab0a      	add	r3, sp, #40	; 0x28
   2d800:	6022      	str	r2, [r4, #0]
   2d802:	e9cd b301 	strd	fp, r3, [sp, #4]
   2d806:	ab09      	add	r3, sp, #36	; 0x24
   2d808:	ec49 8b10 	vmov	d0, r8, r9
   2d80c:	9300      	str	r3, [sp, #0]
   2d80e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   2d812:	f006 fa6c 	bl	33cee <__cvt>
   2d816:	9b06      	ldr	r3, [sp, #24]
   2d818:	4680      	mov	r8, r0
   2d81a:	9909      	ldr	r1, [sp, #36]	; 0x24
   2d81c:	2b47      	cmp	r3, #71	; 0x47
   2d81e:	d108      	bne.n	2d832 <_printf_float+0x142>
   2d820:	1cc8      	adds	r0, r1, #3
   2d822:	db02      	blt.n	2d82a <_printf_float+0x13a>
   2d824:	6863      	ldr	r3, [r4, #4]
   2d826:	4299      	cmp	r1, r3
   2d828:	dd41      	ble.n	2d8ae <_printf_float+0x1be>
   2d82a:	f1ab 0b02 	sub.w	fp, fp, #2
   2d82e:	fa5f fb8b 	uxtb.w	fp, fp
   2d832:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   2d836:	d820      	bhi.n	2d87a <_printf_float+0x18a>
   2d838:	3901      	subs	r1, #1
   2d83a:	465a      	mov	r2, fp
   2d83c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   2d840:	9109      	str	r1, [sp, #36]	; 0x24
   2d842:	f006 fab6 	bl	33db2 <__exponent>
   2d846:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d848:	4681      	mov	r9, r0
   2d84a:	1813      	adds	r3, r2, r0
   2d84c:	2a01      	cmp	r2, #1
   2d84e:	6123      	str	r3, [r4, #16]
   2d850:	dc02      	bgt.n	2d858 <_printf_float+0x168>
   2d852:	6822      	ldr	r2, [r4, #0]
   2d854:	07d2      	lsls	r2, r2, #31
   2d856:	d501      	bpl.n	2d85c <_printf_float+0x16c>
   2d858:	3301      	adds	r3, #1
   2d85a:	6123      	str	r3, [r4, #16]
   2d85c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   2d860:	2b00      	cmp	r3, #0
   2d862:	d09c      	beq.n	2d79e <_printf_float+0xae>
   2d864:	232d      	movs	r3, #45	; 0x2d
   2d866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2d86a:	e798      	b.n	2d79e <_printf_float+0xae>
   2d86c:	9a06      	ldr	r2, [sp, #24]
   2d86e:	2a47      	cmp	r2, #71	; 0x47
   2d870:	d1be      	bne.n	2d7f0 <_printf_float+0x100>
   2d872:	2b00      	cmp	r3, #0
   2d874:	d1bc      	bne.n	2d7f0 <_printf_float+0x100>
   2d876:	2301      	movs	r3, #1
   2d878:	e7b9      	b.n	2d7ee <_printf_float+0xfe>
   2d87a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   2d87e:	d118      	bne.n	2d8b2 <_printf_float+0x1c2>
   2d880:	2900      	cmp	r1, #0
   2d882:	6863      	ldr	r3, [r4, #4]
   2d884:	dd0b      	ble.n	2d89e <_printf_float+0x1ae>
   2d886:	6121      	str	r1, [r4, #16]
   2d888:	b913      	cbnz	r3, 2d890 <_printf_float+0x1a0>
   2d88a:	6822      	ldr	r2, [r4, #0]
   2d88c:	07d0      	lsls	r0, r2, #31
   2d88e:	d502      	bpl.n	2d896 <_printf_float+0x1a6>
   2d890:	3301      	adds	r3, #1
   2d892:	440b      	add	r3, r1
   2d894:	6123      	str	r3, [r4, #16]
   2d896:	f04f 0900 	mov.w	r9, #0
   2d89a:	65a1      	str	r1, [r4, #88]	; 0x58
   2d89c:	e7de      	b.n	2d85c <_printf_float+0x16c>
   2d89e:	b913      	cbnz	r3, 2d8a6 <_printf_float+0x1b6>
   2d8a0:	6822      	ldr	r2, [r4, #0]
   2d8a2:	07d2      	lsls	r2, r2, #31
   2d8a4:	d501      	bpl.n	2d8aa <_printf_float+0x1ba>
   2d8a6:	3302      	adds	r3, #2
   2d8a8:	e7f4      	b.n	2d894 <_printf_float+0x1a4>
   2d8aa:	2301      	movs	r3, #1
   2d8ac:	e7f2      	b.n	2d894 <_printf_float+0x1a4>
   2d8ae:	f04f 0b67 	mov.w	fp, #103	; 0x67
   2d8b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d8b4:	4299      	cmp	r1, r3
   2d8b6:	db05      	blt.n	2d8c4 <_printf_float+0x1d4>
   2d8b8:	6823      	ldr	r3, [r4, #0]
   2d8ba:	6121      	str	r1, [r4, #16]
   2d8bc:	07d8      	lsls	r0, r3, #31
   2d8be:	d5ea      	bpl.n	2d896 <_printf_float+0x1a6>
   2d8c0:	1c4b      	adds	r3, r1, #1
   2d8c2:	e7e7      	b.n	2d894 <_printf_float+0x1a4>
   2d8c4:	2900      	cmp	r1, #0
   2d8c6:	bfd4      	ite	le
   2d8c8:	f1c1 0202 	rsble	r2, r1, #2
   2d8cc:	2201      	movgt	r2, #1
   2d8ce:	4413      	add	r3, r2
   2d8d0:	e7e0      	b.n	2d894 <_printf_float+0x1a4>
   2d8d2:	6823      	ldr	r3, [r4, #0]
   2d8d4:	055a      	lsls	r2, r3, #21
   2d8d6:	d407      	bmi.n	2d8e8 <_printf_float+0x1f8>
   2d8d8:	6923      	ldr	r3, [r4, #16]
   2d8da:	4642      	mov	r2, r8
   2d8dc:	4631      	mov	r1, r6
   2d8de:	4628      	mov	r0, r5
   2d8e0:	47b8      	blx	r7
   2d8e2:	3001      	adds	r0, #1
   2d8e4:	d12c      	bne.n	2d940 <_printf_float+0x250>
   2d8e6:	e764      	b.n	2d7b2 <_printf_float+0xc2>
   2d8e8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   2d8ec:	f240 80e0 	bls.w	2dab0 <_printf_float+0x3c0>
   2d8f0:	2200      	movs	r2, #0
   2d8f2:	2300      	movs	r3, #0
   2d8f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2d8f8:	f7ef f94a 	bl	1cb90 <__aeabi_dcmpeq>
   2d8fc:	2800      	cmp	r0, #0
   2d8fe:	d034      	beq.n	2d96a <_printf_float+0x27a>
   2d900:	2301      	movs	r3, #1
   2d902:	4a37      	ldr	r2, [pc, #220]	; (2d9e0 <_printf_float+0x2f0>)
   2d904:	4631      	mov	r1, r6
   2d906:	4628      	mov	r0, r5
   2d908:	47b8      	blx	r7
   2d90a:	3001      	adds	r0, #1
   2d90c:	f43f af51 	beq.w	2d7b2 <_printf_float+0xc2>
   2d910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2d914:	429a      	cmp	r2, r3
   2d916:	db02      	blt.n	2d91e <_printf_float+0x22e>
   2d918:	6823      	ldr	r3, [r4, #0]
   2d91a:	07d8      	lsls	r0, r3, #31
   2d91c:	d510      	bpl.n	2d940 <_printf_float+0x250>
   2d91e:	ee18 3a10 	vmov	r3, s16
   2d922:	4652      	mov	r2, sl
   2d924:	4631      	mov	r1, r6
   2d926:	4628      	mov	r0, r5
   2d928:	47b8      	blx	r7
   2d92a:	3001      	adds	r0, #1
   2d92c:	f43f af41 	beq.w	2d7b2 <_printf_float+0xc2>
   2d930:	f04f 0800 	mov.w	r8, #0
   2d934:	f104 091a 	add.w	r9, r4, #26
   2d938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d93a:	3b01      	subs	r3, #1
   2d93c:	4543      	cmp	r3, r8
   2d93e:	dc09      	bgt.n	2d954 <_printf_float+0x264>
   2d940:	6823      	ldr	r3, [r4, #0]
   2d942:	079b      	lsls	r3, r3, #30
   2d944:	f100 8105 	bmi.w	2db52 <_printf_float+0x462>
   2d948:	68e0      	ldr	r0, [r4, #12]
   2d94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d94c:	4298      	cmp	r0, r3
   2d94e:	bfb8      	it	lt
   2d950:	4618      	movlt	r0, r3
   2d952:	e730      	b.n	2d7b6 <_printf_float+0xc6>
   2d954:	2301      	movs	r3, #1
   2d956:	464a      	mov	r2, r9
   2d958:	4631      	mov	r1, r6
   2d95a:	4628      	mov	r0, r5
   2d95c:	47b8      	blx	r7
   2d95e:	3001      	adds	r0, #1
   2d960:	f43f af27 	beq.w	2d7b2 <_printf_float+0xc2>
   2d964:	f108 0801 	add.w	r8, r8, #1
   2d968:	e7e6      	b.n	2d938 <_printf_float+0x248>
   2d96a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d96c:	2b00      	cmp	r3, #0
   2d96e:	dc39      	bgt.n	2d9e4 <_printf_float+0x2f4>
   2d970:	2301      	movs	r3, #1
   2d972:	4a1b      	ldr	r2, [pc, #108]	; (2d9e0 <_printf_float+0x2f0>)
   2d974:	4631      	mov	r1, r6
   2d976:	4628      	mov	r0, r5
   2d978:	47b8      	blx	r7
   2d97a:	3001      	adds	r0, #1
   2d97c:	f43f af19 	beq.w	2d7b2 <_printf_float+0xc2>
   2d980:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2d984:	4313      	orrs	r3, r2
   2d986:	d102      	bne.n	2d98e <_printf_float+0x29e>
   2d988:	6823      	ldr	r3, [r4, #0]
   2d98a:	07d9      	lsls	r1, r3, #31
   2d98c:	d5d8      	bpl.n	2d940 <_printf_float+0x250>
   2d98e:	ee18 3a10 	vmov	r3, s16
   2d992:	4652      	mov	r2, sl
   2d994:	4631      	mov	r1, r6
   2d996:	4628      	mov	r0, r5
   2d998:	47b8      	blx	r7
   2d99a:	3001      	adds	r0, #1
   2d99c:	f43f af09 	beq.w	2d7b2 <_printf_float+0xc2>
   2d9a0:	f04f 0900 	mov.w	r9, #0
   2d9a4:	f104 0a1a 	add.w	sl, r4, #26
   2d9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d9aa:	425b      	negs	r3, r3
   2d9ac:	454b      	cmp	r3, r9
   2d9ae:	dc01      	bgt.n	2d9b4 <_printf_float+0x2c4>
   2d9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d9b2:	e792      	b.n	2d8da <_printf_float+0x1ea>
   2d9b4:	2301      	movs	r3, #1
   2d9b6:	4652      	mov	r2, sl
   2d9b8:	4631      	mov	r1, r6
   2d9ba:	4628      	mov	r0, r5
   2d9bc:	47b8      	blx	r7
   2d9be:	3001      	adds	r0, #1
   2d9c0:	f43f aef7 	beq.w	2d7b2 <_printf_float+0xc2>
   2d9c4:	f109 0901 	add.w	r9, r9, #1
   2d9c8:	e7ee      	b.n	2d9a8 <_printf_float+0x2b8>
   2d9ca:	bf00      	nop
   2d9cc:	7fefffff 	.word	0x7fefffff
   2d9d0:	0003a082 	.word	0x0003a082
   2d9d4:	000379f5 	.word	0x000379f5
   2d9d8:	0003a08a 	.word	0x0003a08a
   2d9dc:	0003a086 	.word	0x0003a086
   2d9e0:	00039309 	.word	0x00039309
   2d9e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d9e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2d9e8:	429a      	cmp	r2, r3
   2d9ea:	bfa8      	it	ge
   2d9ec:	461a      	movge	r2, r3
   2d9ee:	2a00      	cmp	r2, #0
   2d9f0:	4691      	mov	r9, r2
   2d9f2:	dc37      	bgt.n	2da64 <_printf_float+0x374>
   2d9f4:	f04f 0b00 	mov.w	fp, #0
   2d9f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2d9fc:	f104 021a 	add.w	r2, r4, #26
   2da00:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2da02:	9305      	str	r3, [sp, #20]
   2da04:	eba3 0309 	sub.w	r3, r3, r9
   2da08:	455b      	cmp	r3, fp
   2da0a:	dc33      	bgt.n	2da74 <_printf_float+0x384>
   2da0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2da10:	429a      	cmp	r2, r3
   2da12:	db3b      	blt.n	2da8c <_printf_float+0x39c>
   2da14:	6823      	ldr	r3, [r4, #0]
   2da16:	07da      	lsls	r2, r3, #31
   2da18:	d438      	bmi.n	2da8c <_printf_float+0x39c>
   2da1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2da1c:	9a05      	ldr	r2, [sp, #20]
   2da1e:	9909      	ldr	r1, [sp, #36]	; 0x24
   2da20:	1a9a      	subs	r2, r3, r2
   2da22:	eba3 0901 	sub.w	r9, r3, r1
   2da26:	4591      	cmp	r9, r2
   2da28:	bfa8      	it	ge
   2da2a:	4691      	movge	r9, r2
   2da2c:	f1b9 0f00 	cmp.w	r9, #0
   2da30:	dc35      	bgt.n	2da9e <_printf_float+0x3ae>
   2da32:	f04f 0800 	mov.w	r8, #0
   2da36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2da3a:	f104 0a1a 	add.w	sl, r4, #26
   2da3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   2da42:	1a9b      	subs	r3, r3, r2
   2da44:	eba3 0309 	sub.w	r3, r3, r9
   2da48:	4543      	cmp	r3, r8
   2da4a:	f77f af79 	ble.w	2d940 <_printf_float+0x250>
   2da4e:	2301      	movs	r3, #1
   2da50:	4652      	mov	r2, sl
   2da52:	4631      	mov	r1, r6
   2da54:	4628      	mov	r0, r5
   2da56:	47b8      	blx	r7
   2da58:	3001      	adds	r0, #1
   2da5a:	f43f aeaa 	beq.w	2d7b2 <_printf_float+0xc2>
   2da5e:	f108 0801 	add.w	r8, r8, #1
   2da62:	e7ec      	b.n	2da3e <_printf_float+0x34e>
   2da64:	4613      	mov	r3, r2
   2da66:	4631      	mov	r1, r6
   2da68:	4642      	mov	r2, r8
   2da6a:	4628      	mov	r0, r5
   2da6c:	47b8      	blx	r7
   2da6e:	3001      	adds	r0, #1
   2da70:	d1c0      	bne.n	2d9f4 <_printf_float+0x304>
   2da72:	e69e      	b.n	2d7b2 <_printf_float+0xc2>
   2da74:	2301      	movs	r3, #1
   2da76:	4631      	mov	r1, r6
   2da78:	4628      	mov	r0, r5
   2da7a:	9205      	str	r2, [sp, #20]
   2da7c:	47b8      	blx	r7
   2da7e:	3001      	adds	r0, #1
   2da80:	f43f ae97 	beq.w	2d7b2 <_printf_float+0xc2>
   2da84:	f10b 0b01 	add.w	fp, fp, #1
   2da88:	9a05      	ldr	r2, [sp, #20]
   2da8a:	e7b9      	b.n	2da00 <_printf_float+0x310>
   2da8c:	ee18 3a10 	vmov	r3, s16
   2da90:	4652      	mov	r2, sl
   2da92:	4631      	mov	r1, r6
   2da94:	4628      	mov	r0, r5
   2da96:	47b8      	blx	r7
   2da98:	3001      	adds	r0, #1
   2da9a:	d1be      	bne.n	2da1a <_printf_float+0x32a>
   2da9c:	e689      	b.n	2d7b2 <_printf_float+0xc2>
   2da9e:	9a05      	ldr	r2, [sp, #20]
   2daa0:	464b      	mov	r3, r9
   2daa2:	4631      	mov	r1, r6
   2daa4:	4628      	mov	r0, r5
   2daa6:	4442      	add	r2, r8
   2daa8:	47b8      	blx	r7
   2daaa:	3001      	adds	r0, #1
   2daac:	d1c1      	bne.n	2da32 <_printf_float+0x342>
   2daae:	e680      	b.n	2d7b2 <_printf_float+0xc2>
   2dab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2dab2:	2a01      	cmp	r2, #1
   2dab4:	dc01      	bgt.n	2daba <_printf_float+0x3ca>
   2dab6:	07db      	lsls	r3, r3, #31
   2dab8:	d538      	bpl.n	2db2c <_printf_float+0x43c>
   2daba:	2301      	movs	r3, #1
   2dabc:	4642      	mov	r2, r8
   2dabe:	4631      	mov	r1, r6
   2dac0:	4628      	mov	r0, r5
   2dac2:	47b8      	blx	r7
   2dac4:	3001      	adds	r0, #1
   2dac6:	f43f ae74 	beq.w	2d7b2 <_printf_float+0xc2>
   2daca:	ee18 3a10 	vmov	r3, s16
   2dace:	4652      	mov	r2, sl
   2dad0:	4631      	mov	r1, r6
   2dad2:	4628      	mov	r0, r5
   2dad4:	47b8      	blx	r7
   2dad6:	3001      	adds	r0, #1
   2dad8:	f43f ae6b 	beq.w	2d7b2 <_printf_float+0xc2>
   2dadc:	2200      	movs	r2, #0
   2dade:	2300      	movs	r3, #0
   2dae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   2dae4:	f7ef f854 	bl	1cb90 <__aeabi_dcmpeq>
   2dae8:	b9d8      	cbnz	r0, 2db22 <_printf_float+0x432>
   2daea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2daec:	f108 0201 	add.w	r2, r8, #1
   2daf0:	3b01      	subs	r3, #1
   2daf2:	4631      	mov	r1, r6
   2daf4:	4628      	mov	r0, r5
   2daf6:	47b8      	blx	r7
   2daf8:	3001      	adds	r0, #1
   2dafa:	d10e      	bne.n	2db1a <_printf_float+0x42a>
   2dafc:	e659      	b.n	2d7b2 <_printf_float+0xc2>
   2dafe:	2301      	movs	r3, #1
   2db00:	4652      	mov	r2, sl
   2db02:	4631      	mov	r1, r6
   2db04:	4628      	mov	r0, r5
   2db06:	47b8      	blx	r7
   2db08:	3001      	adds	r0, #1
   2db0a:	f43f ae52 	beq.w	2d7b2 <_printf_float+0xc2>
   2db0e:	f108 0801 	add.w	r8, r8, #1
   2db12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2db14:	3b01      	subs	r3, #1
   2db16:	4543      	cmp	r3, r8
   2db18:	dcf1      	bgt.n	2dafe <_printf_float+0x40e>
   2db1a:	464b      	mov	r3, r9
   2db1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
   2db20:	e6dc      	b.n	2d8dc <_printf_float+0x1ec>
   2db22:	f04f 0800 	mov.w	r8, #0
   2db26:	f104 0a1a 	add.w	sl, r4, #26
   2db2a:	e7f2      	b.n	2db12 <_printf_float+0x422>
   2db2c:	2301      	movs	r3, #1
   2db2e:	4642      	mov	r2, r8
   2db30:	e7df      	b.n	2daf2 <_printf_float+0x402>
   2db32:	2301      	movs	r3, #1
   2db34:	464a      	mov	r2, r9
   2db36:	4631      	mov	r1, r6
   2db38:	4628      	mov	r0, r5
   2db3a:	47b8      	blx	r7
   2db3c:	3001      	adds	r0, #1
   2db3e:	f43f ae38 	beq.w	2d7b2 <_printf_float+0xc2>
   2db42:	f108 0801 	add.w	r8, r8, #1
   2db46:	68e3      	ldr	r3, [r4, #12]
   2db48:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2db4a:	1a5b      	subs	r3, r3, r1
   2db4c:	4543      	cmp	r3, r8
   2db4e:	dcf0      	bgt.n	2db32 <_printf_float+0x442>
   2db50:	e6fa      	b.n	2d948 <_printf_float+0x258>
   2db52:	f04f 0800 	mov.w	r8, #0
   2db56:	f104 0919 	add.w	r9, r4, #25
   2db5a:	e7f4      	b.n	2db46 <_printf_float+0x456>

0002db5c <_printf_i>:
   2db5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2db60:	7e0f      	ldrb	r7, [r1, #24]
   2db62:	4691      	mov	r9, r2
   2db64:	4680      	mov	r8, r0
   2db66:	460c      	mov	r4, r1
   2db68:	2f78      	cmp	r7, #120	; 0x78
   2db6a:	469a      	mov	sl, r3
   2db6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2db6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
   2db72:	d807      	bhi.n	2db84 <_printf_i+0x28>
   2db74:	2f62      	cmp	r7, #98	; 0x62
   2db76:	d80a      	bhi.n	2db8e <_printf_i+0x32>
   2db78:	2f00      	cmp	r7, #0
   2db7a:	f000 80d8 	beq.w	2dd2e <_printf_i+0x1d2>
   2db7e:	2f58      	cmp	r7, #88	; 0x58
   2db80:	f000 80a3 	beq.w	2dcca <_printf_i+0x16e>
   2db84:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2db88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   2db8c:	e03a      	b.n	2dc04 <_printf_i+0xa8>
   2db8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2db92:	2b15      	cmp	r3, #21
   2db94:	d8f6      	bhi.n	2db84 <_printf_i+0x28>
   2db96:	a101      	add	r1, pc, #4	; (adr r1, 2db9c <_printf_i+0x40>)
   2db98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2db9c:	0002dbf5 	.word	0x0002dbf5
   2dba0:	0002dc09 	.word	0x0002dc09
   2dba4:	0002db85 	.word	0x0002db85
   2dba8:	0002db85 	.word	0x0002db85
   2dbac:	0002db85 	.word	0x0002db85
   2dbb0:	0002db85 	.word	0x0002db85
   2dbb4:	0002dc09 	.word	0x0002dc09
   2dbb8:	0002db85 	.word	0x0002db85
   2dbbc:	0002db85 	.word	0x0002db85
   2dbc0:	0002db85 	.word	0x0002db85
   2dbc4:	0002db85 	.word	0x0002db85
   2dbc8:	0002dd15 	.word	0x0002dd15
   2dbcc:	0002dc39 	.word	0x0002dc39
   2dbd0:	0002dcf7 	.word	0x0002dcf7
   2dbd4:	0002db85 	.word	0x0002db85
   2dbd8:	0002db85 	.word	0x0002db85
   2dbdc:	0002dd37 	.word	0x0002dd37
   2dbe0:	0002db85 	.word	0x0002db85
   2dbe4:	0002dc39 	.word	0x0002dc39
   2dbe8:	0002db85 	.word	0x0002db85
   2dbec:	0002db85 	.word	0x0002db85
   2dbf0:	0002dcff 	.word	0x0002dcff
   2dbf4:	682b      	ldr	r3, [r5, #0]
   2dbf6:	1d1a      	adds	r2, r3, #4
   2dbf8:	681b      	ldr	r3, [r3, #0]
   2dbfa:	602a      	str	r2, [r5, #0]
   2dbfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
   2dc00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2dc04:	2301      	movs	r3, #1
   2dc06:	e0a3      	b.n	2dd50 <_printf_i+0x1f4>
   2dc08:	6820      	ldr	r0, [r4, #0]
   2dc0a:	6829      	ldr	r1, [r5, #0]
   2dc0c:	0606      	lsls	r6, r0, #24
   2dc0e:	f101 0304 	add.w	r3, r1, #4
   2dc12:	d50a      	bpl.n	2dc2a <_printf_i+0xce>
   2dc14:	680e      	ldr	r6, [r1, #0]
   2dc16:	602b      	str	r3, [r5, #0]
   2dc18:	2e00      	cmp	r6, #0
   2dc1a:	da03      	bge.n	2dc24 <_printf_i+0xc8>
   2dc1c:	232d      	movs	r3, #45	; 0x2d
   2dc1e:	4276      	negs	r6, r6
   2dc20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2dc24:	485e      	ldr	r0, [pc, #376]	; (2dda0 <_printf_i+0x244>)
   2dc26:	230a      	movs	r3, #10
   2dc28:	e019      	b.n	2dc5e <_printf_i+0x102>
   2dc2a:	680e      	ldr	r6, [r1, #0]
   2dc2c:	f010 0f40 	tst.w	r0, #64	; 0x40
   2dc30:	602b      	str	r3, [r5, #0]
   2dc32:	bf18      	it	ne
   2dc34:	b236      	sxthne	r6, r6
   2dc36:	e7ef      	b.n	2dc18 <_printf_i+0xbc>
   2dc38:	682b      	ldr	r3, [r5, #0]
   2dc3a:	6820      	ldr	r0, [r4, #0]
   2dc3c:	1d19      	adds	r1, r3, #4
   2dc3e:	6029      	str	r1, [r5, #0]
   2dc40:	0601      	lsls	r1, r0, #24
   2dc42:	d501      	bpl.n	2dc48 <_printf_i+0xec>
   2dc44:	681e      	ldr	r6, [r3, #0]
   2dc46:	e002      	b.n	2dc4e <_printf_i+0xf2>
   2dc48:	0646      	lsls	r6, r0, #25
   2dc4a:	d5fb      	bpl.n	2dc44 <_printf_i+0xe8>
   2dc4c:	881e      	ldrh	r6, [r3, #0]
   2dc4e:	2f6f      	cmp	r7, #111	; 0x6f
   2dc50:	4853      	ldr	r0, [pc, #332]	; (2dda0 <_printf_i+0x244>)
   2dc52:	bf0c      	ite	eq
   2dc54:	2308      	moveq	r3, #8
   2dc56:	230a      	movne	r3, #10
   2dc58:	2100      	movs	r1, #0
   2dc5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2dc5e:	6865      	ldr	r5, [r4, #4]
   2dc60:	2d00      	cmp	r5, #0
   2dc62:	60a5      	str	r5, [r4, #8]
   2dc64:	bfa2      	ittt	ge
   2dc66:	6821      	ldrge	r1, [r4, #0]
   2dc68:	f021 0104 	bicge.w	r1, r1, #4
   2dc6c:	6021      	strge	r1, [r4, #0]
   2dc6e:	b90e      	cbnz	r6, 2dc74 <_printf_i+0x118>
   2dc70:	2d00      	cmp	r5, #0
   2dc72:	d04d      	beq.n	2dd10 <_printf_i+0x1b4>
   2dc74:	4615      	mov	r5, r2
   2dc76:	fbb6 f1f3 	udiv	r1, r6, r3
   2dc7a:	fb03 6711 	mls	r7, r3, r1, r6
   2dc7e:	5dc7      	ldrb	r7, [r0, r7]
   2dc80:	f805 7d01 	strb.w	r7, [r5, #-1]!
   2dc84:	4637      	mov	r7, r6
   2dc86:	460e      	mov	r6, r1
   2dc88:	42bb      	cmp	r3, r7
   2dc8a:	d9f4      	bls.n	2dc76 <_printf_i+0x11a>
   2dc8c:	2b08      	cmp	r3, #8
   2dc8e:	d10b      	bne.n	2dca8 <_printf_i+0x14c>
   2dc90:	6823      	ldr	r3, [r4, #0]
   2dc92:	07de      	lsls	r6, r3, #31
   2dc94:	d508      	bpl.n	2dca8 <_printf_i+0x14c>
   2dc96:	6923      	ldr	r3, [r4, #16]
   2dc98:	6861      	ldr	r1, [r4, #4]
   2dc9a:	4299      	cmp	r1, r3
   2dc9c:	bfde      	ittt	le
   2dc9e:	2330      	movle	r3, #48	; 0x30
   2dca0:	f805 3c01 	strble.w	r3, [r5, #-1]
   2dca4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   2dca8:	1b52      	subs	r2, r2, r5
   2dcaa:	6122      	str	r2, [r4, #16]
   2dcac:	464b      	mov	r3, r9
   2dcae:	aa03      	add	r2, sp, #12
   2dcb0:	4621      	mov	r1, r4
   2dcb2:	4640      	mov	r0, r8
   2dcb4:	f8cd a000 	str.w	sl, [sp]
   2dcb8:	f006 f8b9 	bl	33e2e <_printf_common>
   2dcbc:	3001      	adds	r0, #1
   2dcbe:	d14c      	bne.n	2dd5a <_printf_i+0x1fe>
   2dcc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2dcc4:	b004      	add	sp, #16
   2dcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2dcca:	4835      	ldr	r0, [pc, #212]	; (2dda0 <_printf_i+0x244>)
   2dccc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   2dcd0:	6829      	ldr	r1, [r5, #0]
   2dcd2:	6823      	ldr	r3, [r4, #0]
   2dcd4:	f851 6b04 	ldr.w	r6, [r1], #4
   2dcd8:	6029      	str	r1, [r5, #0]
   2dcda:	061d      	lsls	r5, r3, #24
   2dcdc:	d514      	bpl.n	2dd08 <_printf_i+0x1ac>
   2dcde:	07df      	lsls	r7, r3, #31
   2dce0:	bf44      	itt	mi
   2dce2:	f043 0320 	orrmi.w	r3, r3, #32
   2dce6:	6023      	strmi	r3, [r4, #0]
   2dce8:	b91e      	cbnz	r6, 2dcf2 <_printf_i+0x196>
   2dcea:	6823      	ldr	r3, [r4, #0]
   2dcec:	f023 0320 	bic.w	r3, r3, #32
   2dcf0:	6023      	str	r3, [r4, #0]
   2dcf2:	2310      	movs	r3, #16
   2dcf4:	e7b0      	b.n	2dc58 <_printf_i+0xfc>
   2dcf6:	6823      	ldr	r3, [r4, #0]
   2dcf8:	f043 0320 	orr.w	r3, r3, #32
   2dcfc:	6023      	str	r3, [r4, #0]
   2dcfe:	2378      	movs	r3, #120	; 0x78
   2dd00:	4828      	ldr	r0, [pc, #160]	; (2dda4 <_printf_i+0x248>)
   2dd02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   2dd06:	e7e3      	b.n	2dcd0 <_printf_i+0x174>
   2dd08:	0659      	lsls	r1, r3, #25
   2dd0a:	bf48      	it	mi
   2dd0c:	b2b6      	uxthmi	r6, r6
   2dd0e:	e7e6      	b.n	2dcde <_printf_i+0x182>
   2dd10:	4615      	mov	r5, r2
   2dd12:	e7bb      	b.n	2dc8c <_printf_i+0x130>
   2dd14:	682b      	ldr	r3, [r5, #0]
   2dd16:	6826      	ldr	r6, [r4, #0]
   2dd18:	1d18      	adds	r0, r3, #4
   2dd1a:	6961      	ldr	r1, [r4, #20]
   2dd1c:	6028      	str	r0, [r5, #0]
   2dd1e:	0635      	lsls	r5, r6, #24
   2dd20:	681b      	ldr	r3, [r3, #0]
   2dd22:	d501      	bpl.n	2dd28 <_printf_i+0x1cc>
   2dd24:	6019      	str	r1, [r3, #0]
   2dd26:	e002      	b.n	2dd2e <_printf_i+0x1d2>
   2dd28:	0670      	lsls	r0, r6, #25
   2dd2a:	d5fb      	bpl.n	2dd24 <_printf_i+0x1c8>
   2dd2c:	8019      	strh	r1, [r3, #0]
   2dd2e:	2300      	movs	r3, #0
   2dd30:	4615      	mov	r5, r2
   2dd32:	6123      	str	r3, [r4, #16]
   2dd34:	e7ba      	b.n	2dcac <_printf_i+0x150>
   2dd36:	682b      	ldr	r3, [r5, #0]
   2dd38:	2100      	movs	r1, #0
   2dd3a:	1d1a      	adds	r2, r3, #4
   2dd3c:	602a      	str	r2, [r5, #0]
   2dd3e:	681d      	ldr	r5, [r3, #0]
   2dd40:	6862      	ldr	r2, [r4, #4]
   2dd42:	4628      	mov	r0, r5
   2dd44:	f005 ff55 	bl	33bf2 <memchr>
   2dd48:	b108      	cbz	r0, 2dd4e <_printf_i+0x1f2>
   2dd4a:	1b40      	subs	r0, r0, r5
   2dd4c:	6060      	str	r0, [r4, #4]
   2dd4e:	6863      	ldr	r3, [r4, #4]
   2dd50:	6123      	str	r3, [r4, #16]
   2dd52:	2300      	movs	r3, #0
   2dd54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2dd58:	e7a8      	b.n	2dcac <_printf_i+0x150>
   2dd5a:	6923      	ldr	r3, [r4, #16]
   2dd5c:	462a      	mov	r2, r5
   2dd5e:	4649      	mov	r1, r9
   2dd60:	4640      	mov	r0, r8
   2dd62:	47d0      	blx	sl
   2dd64:	3001      	adds	r0, #1
   2dd66:	d0ab      	beq.n	2dcc0 <_printf_i+0x164>
   2dd68:	6823      	ldr	r3, [r4, #0]
   2dd6a:	079b      	lsls	r3, r3, #30
   2dd6c:	d413      	bmi.n	2dd96 <_printf_i+0x23a>
   2dd6e:	68e0      	ldr	r0, [r4, #12]
   2dd70:	9b03      	ldr	r3, [sp, #12]
   2dd72:	4298      	cmp	r0, r3
   2dd74:	bfb8      	it	lt
   2dd76:	4618      	movlt	r0, r3
   2dd78:	e7a4      	b.n	2dcc4 <_printf_i+0x168>
   2dd7a:	2301      	movs	r3, #1
   2dd7c:	4632      	mov	r2, r6
   2dd7e:	4649      	mov	r1, r9
   2dd80:	4640      	mov	r0, r8
   2dd82:	47d0      	blx	sl
   2dd84:	3001      	adds	r0, #1
   2dd86:	d09b      	beq.n	2dcc0 <_printf_i+0x164>
   2dd88:	3501      	adds	r5, #1
   2dd8a:	68e3      	ldr	r3, [r4, #12]
   2dd8c:	9903      	ldr	r1, [sp, #12]
   2dd8e:	1a5b      	subs	r3, r3, r1
   2dd90:	42ab      	cmp	r3, r5
   2dd92:	dcf2      	bgt.n	2dd7a <_printf_i+0x21e>
   2dd94:	e7eb      	b.n	2dd6e <_printf_i+0x212>
   2dd96:	2500      	movs	r5, #0
   2dd98:	f104 0619 	add.w	r6, r4, #25
   2dd9c:	e7f5      	b.n	2dd8a <_printf_i+0x22e>
   2dd9e:	bf00      	nop
   2dda0:	0003a08e 	.word	0x0003a08e
   2dda4:	0003a09f 	.word	0x0003a09f

0002dda8 <realloc>:
   2dda8:	4b02      	ldr	r3, [pc, #8]	; (2ddb4 <realloc+0xc>)
   2ddaa:	460a      	mov	r2, r1
   2ddac:	4601      	mov	r1, r0
   2ddae:	6818      	ldr	r0, [r3, #0]
   2ddb0:	f006 baff 	b.w	343b2 <_realloc_r>
   2ddb4:	2000c66c 	.word	0x2000c66c

0002ddb8 <_sbrk_r>:
   2ddb8:	b538      	push	{r3, r4, r5, lr}
   2ddba:	2300      	movs	r3, #0
   2ddbc:	4d05      	ldr	r5, [pc, #20]	; (2ddd4 <_sbrk_r+0x1c>)
   2ddbe:	4604      	mov	r4, r0
   2ddc0:	4608      	mov	r0, r1
   2ddc2:	602b      	str	r3, [r5, #0]
   2ddc4:	f7f4 fd4c 	bl	22860 <_sbrk>
   2ddc8:	1c43      	adds	r3, r0, #1
   2ddca:	d102      	bne.n	2ddd2 <_sbrk_r+0x1a>
   2ddcc:	682b      	ldr	r3, [r5, #0]
   2ddce:	b103      	cbz	r3, 2ddd2 <_sbrk_r+0x1a>
   2ddd0:	6023      	str	r3, [r4, #0]
   2ddd2:	bd38      	pop	{r3, r4, r5, pc}
   2ddd4:	2000d900 	.word	0x2000d900

0002ddd8 <sniprintf>:
   2ddd8:	b40c      	push	{r2, r3}
   2ddda:	4b18      	ldr	r3, [pc, #96]	; (2de3c <sniprintf+0x64>)
   2dddc:	b530      	push	{r4, r5, lr}
   2ddde:	1e0c      	subs	r4, r1, #0
   2dde0:	b09d      	sub	sp, #116	; 0x74
   2dde2:	681d      	ldr	r5, [r3, #0]
   2dde4:	da08      	bge.n	2ddf8 <sniprintf+0x20>
   2dde6:	238b      	movs	r3, #139	; 0x8b
   2dde8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ddec:	602b      	str	r3, [r5, #0]
   2ddee:	b01d      	add	sp, #116	; 0x74
   2ddf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2ddf4:	b002      	add	sp, #8
   2ddf6:	4770      	bx	lr
   2ddf8:	f44f 7302 	mov.w	r3, #520	; 0x208
   2ddfc:	9002      	str	r0, [sp, #8]
   2ddfe:	9006      	str	r0, [sp, #24]
   2de00:	a902      	add	r1, sp, #8
   2de02:	f8ad 3014 	strh.w	r3, [sp, #20]
   2de06:	bf14      	ite	ne
   2de08:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   2de0c:	4623      	moveq	r3, r4
   2de0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2de10:	4628      	mov	r0, r5
   2de12:	9304      	str	r3, [sp, #16]
   2de14:	9307      	str	r3, [sp, #28]
   2de16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2de1a:	f8ad 3016 	strh.w	r3, [sp, #22]
   2de1e:	ab21      	add	r3, sp, #132	; 0x84
   2de20:	9301      	str	r3, [sp, #4]
   2de22:	f001 f821 	bl	2ee68 <_svfiprintf_r>
   2de26:	1c43      	adds	r3, r0, #1
   2de28:	bfbc      	itt	lt
   2de2a:	238b      	movlt	r3, #139	; 0x8b
   2de2c:	602b      	strlt	r3, [r5, #0]
   2de2e:	2c00      	cmp	r4, #0
   2de30:	d0dd      	beq.n	2ddee <sniprintf+0x16>
   2de32:	9b02      	ldr	r3, [sp, #8]
   2de34:	2200      	movs	r2, #0
   2de36:	701a      	strb	r2, [r3, #0]
   2de38:	e7d9      	b.n	2ddee <sniprintf+0x16>
   2de3a:	bf00      	nop
   2de3c:	2000c66c 	.word	0x2000c66c

0002de40 <siscanf>:
   2de40:	b40e      	push	{r1, r2, r3}
   2de42:	b510      	push	{r4, lr}
   2de44:	b09f      	sub	sp, #124	; 0x7c
   2de46:	f44f 7101 	mov.w	r1, #516	; 0x204
   2de4a:	ac21      	add	r4, sp, #132	; 0x84
   2de4c:	f8ad 101c 	strh.w	r1, [sp, #28]
   2de50:	9004      	str	r0, [sp, #16]
   2de52:	f854 2b04 	ldr.w	r2, [r4], #4
   2de56:	9008      	str	r0, [sp, #32]
   2de58:	9201      	str	r2, [sp, #4]
   2de5a:	f7ef f921 	bl	1d0a0 <strlen>
   2de5e:	4b0c      	ldr	r3, [pc, #48]	; (2de90 <siscanf+0x50>)
   2de60:	a904      	add	r1, sp, #16
   2de62:	9005      	str	r0, [sp, #20]
   2de64:	930d      	str	r3, [sp, #52]	; 0x34
   2de66:	2300      	movs	r3, #0
   2de68:	9009      	str	r0, [sp, #36]	; 0x24
   2de6a:	9311      	str	r3, [sp, #68]	; 0x44
   2de6c:	9316      	str	r3, [sp, #88]	; 0x58
   2de6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2de72:	4808      	ldr	r0, [pc, #32]	; (2de94 <siscanf+0x54>)
   2de74:	f8ad 301e 	strh.w	r3, [sp, #30]
   2de78:	4623      	mov	r3, r4
   2de7a:	9a01      	ldr	r2, [sp, #4]
   2de7c:	6800      	ldr	r0, [r0, #0]
   2de7e:	9403      	str	r4, [sp, #12]
   2de80:	f001 f8f2 	bl	2f068 <__ssvfiscanf_r>
   2de84:	b01f      	add	sp, #124	; 0x7c
   2de86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2de8a:	b003      	add	sp, #12
   2de8c:	4770      	bx	lr
   2de8e:	bf00      	nop
   2de90:	00033f31 	.word	0x00033f31
   2de94:	2000c66c 	.word	0x2000c66c

0002de98 <strncasecmp>:
   2de98:	b570      	push	{r4, r5, r6, lr}
   2de9a:	440a      	add	r2, r1
   2de9c:	4604      	mov	r4, r0
   2de9e:	4e0e      	ldr	r6, [pc, #56]	; (2ded8 <strncasecmp+0x40>)
   2dea0:	428a      	cmp	r2, r1
   2dea2:	d101      	bne.n	2dea8 <strncasecmp+0x10>
   2dea4:	2000      	movs	r0, #0
   2dea6:	e013      	b.n	2ded0 <strncasecmp+0x38>
   2dea8:	f814 3b01 	ldrb.w	r3, [r4], #1
   2deac:	5d98      	ldrb	r0, [r3, r6]
   2deae:	f000 0003 	and.w	r0, r0, #3
   2deb2:	2801      	cmp	r0, #1
   2deb4:	f811 0b01 	ldrb.w	r0, [r1], #1
   2deb8:	5c35      	ldrb	r5, [r6, r0]
   2deba:	bf08      	it	eq
   2debc:	3320      	addeq	r3, #32
   2debe:	f005 0503 	and.w	r5, r5, #3
   2dec2:	2d01      	cmp	r5, #1
   2dec4:	bf08      	it	eq
   2dec6:	3020      	addeq	r0, #32
   2dec8:	1a1b      	subs	r3, r3, r0
   2deca:	d102      	bne.n	2ded2 <strncasecmp+0x3a>
   2decc:	2800      	cmp	r0, #0
   2dece:	d1e7      	bne.n	2dea0 <strncasecmp+0x8>
   2ded0:	bd70      	pop	{r4, r5, r6, pc}
   2ded2:	4618      	mov	r0, r3
   2ded4:	e7fc      	b.n	2ded0 <strncasecmp+0x38>
   2ded6:	bf00      	nop
   2ded8:	00039f71 	.word	0x00039f71

0002dedc <_strtol_l.constprop.0>:
   2dedc:	2b01      	cmp	r3, #1
   2dede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2dee2:	d001      	beq.n	2dee8 <_strtol_l.constprop.0+0xc>
   2dee4:	2b24      	cmp	r3, #36	; 0x24
   2dee6:	d906      	bls.n	2def6 <_strtol_l.constprop.0+0x1a>
   2dee8:	f002 fee7 	bl	30cba <__errno>
   2deec:	2316      	movs	r3, #22
   2deee:	6003      	str	r3, [r0, #0]
   2def0:	2000      	movs	r0, #0
   2def2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2def6:	460d      	mov	r5, r1
   2def8:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 2dfdc <_strtol_l.constprop.0+0x100>
   2defc:	462e      	mov	r6, r5
   2defe:	f815 4b01 	ldrb.w	r4, [r5], #1
   2df02:	f814 700c 	ldrb.w	r7, [r4, ip]
   2df06:	f017 0708 	ands.w	r7, r7, #8
   2df0a:	d1f7      	bne.n	2defc <_strtol_l.constprop.0+0x20>
   2df0c:	2c2d      	cmp	r4, #45	; 0x2d
   2df0e:	d132      	bne.n	2df76 <_strtol_l.constprop.0+0x9a>
   2df10:	782c      	ldrb	r4, [r5, #0]
   2df12:	2701      	movs	r7, #1
   2df14:	1cb5      	adds	r5, r6, #2
   2df16:	2b00      	cmp	r3, #0
   2df18:	d05b      	beq.n	2dfd2 <_strtol_l.constprop.0+0xf6>
   2df1a:	2b10      	cmp	r3, #16
   2df1c:	d109      	bne.n	2df32 <_strtol_l.constprop.0+0x56>
   2df1e:	2c30      	cmp	r4, #48	; 0x30
   2df20:	d107      	bne.n	2df32 <_strtol_l.constprop.0+0x56>
   2df22:	782c      	ldrb	r4, [r5, #0]
   2df24:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   2df28:	2c58      	cmp	r4, #88	; 0x58
   2df2a:	d14d      	bne.n	2dfc8 <_strtol_l.constprop.0+0xec>
   2df2c:	786c      	ldrb	r4, [r5, #1]
   2df2e:	2310      	movs	r3, #16
   2df30:	3502      	adds	r5, #2
   2df32:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   2df36:	f04f 0c00 	mov.w	ip, #0
   2df3a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2df3e:	4666      	mov	r6, ip
   2df40:	fbb8 f9f3 	udiv	r9, r8, r3
   2df44:	fb03 8a19 	mls	sl, r3, r9, r8
   2df48:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   2df4c:	f1be 0f09 	cmp.w	lr, #9
   2df50:	d816      	bhi.n	2df80 <_strtol_l.constprop.0+0xa4>
   2df52:	4674      	mov	r4, lr
   2df54:	42a3      	cmp	r3, r4
   2df56:	dd24      	ble.n	2dfa2 <_strtol_l.constprop.0+0xc6>
   2df58:	f1bc 0f00 	cmp.w	ip, #0
   2df5c:	db1e      	blt.n	2df9c <_strtol_l.constprop.0+0xc0>
   2df5e:	45b1      	cmp	r9, r6
   2df60:	d31c      	bcc.n	2df9c <_strtol_l.constprop.0+0xc0>
   2df62:	d101      	bne.n	2df68 <_strtol_l.constprop.0+0x8c>
   2df64:	45a2      	cmp	sl, r4
   2df66:	db19      	blt.n	2df9c <_strtol_l.constprop.0+0xc0>
   2df68:	fb06 4603 	mla	r6, r6, r3, r4
   2df6c:	f04f 0c01 	mov.w	ip, #1
   2df70:	f815 4b01 	ldrb.w	r4, [r5], #1
   2df74:	e7e8      	b.n	2df48 <_strtol_l.constprop.0+0x6c>
   2df76:	2c2b      	cmp	r4, #43	; 0x2b
   2df78:	bf04      	itt	eq
   2df7a:	782c      	ldrbeq	r4, [r5, #0]
   2df7c:	1cb5      	addeq	r5, r6, #2
   2df7e:	e7ca      	b.n	2df16 <_strtol_l.constprop.0+0x3a>
   2df80:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   2df84:	f1be 0f19 	cmp.w	lr, #25
   2df88:	d801      	bhi.n	2df8e <_strtol_l.constprop.0+0xb2>
   2df8a:	3c37      	subs	r4, #55	; 0x37
   2df8c:	e7e2      	b.n	2df54 <_strtol_l.constprop.0+0x78>
   2df8e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   2df92:	f1be 0f19 	cmp.w	lr, #25
   2df96:	d804      	bhi.n	2dfa2 <_strtol_l.constprop.0+0xc6>
   2df98:	3c57      	subs	r4, #87	; 0x57
   2df9a:	e7db      	b.n	2df54 <_strtol_l.constprop.0+0x78>
   2df9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2dfa0:	e7e6      	b.n	2df70 <_strtol_l.constprop.0+0x94>
   2dfa2:	f1bc 0f00 	cmp.w	ip, #0
   2dfa6:	da05      	bge.n	2dfb4 <_strtol_l.constprop.0+0xd8>
   2dfa8:	2322      	movs	r3, #34	; 0x22
   2dfaa:	4646      	mov	r6, r8
   2dfac:	6003      	str	r3, [r0, #0]
   2dfae:	b942      	cbnz	r2, 2dfc2 <_strtol_l.constprop.0+0xe6>
   2dfb0:	4630      	mov	r0, r6
   2dfb2:	e79e      	b.n	2def2 <_strtol_l.constprop.0+0x16>
   2dfb4:	b107      	cbz	r7, 2dfb8 <_strtol_l.constprop.0+0xdc>
   2dfb6:	4276      	negs	r6, r6
   2dfb8:	2a00      	cmp	r2, #0
   2dfba:	d0f9      	beq.n	2dfb0 <_strtol_l.constprop.0+0xd4>
   2dfbc:	f1bc 0f00 	cmp.w	ip, #0
   2dfc0:	d000      	beq.n	2dfc4 <_strtol_l.constprop.0+0xe8>
   2dfc2:	1e69      	subs	r1, r5, #1
   2dfc4:	6011      	str	r1, [r2, #0]
   2dfc6:	e7f3      	b.n	2dfb0 <_strtol_l.constprop.0+0xd4>
   2dfc8:	2430      	movs	r4, #48	; 0x30
   2dfca:	2b00      	cmp	r3, #0
   2dfcc:	d1b1      	bne.n	2df32 <_strtol_l.constprop.0+0x56>
   2dfce:	2308      	movs	r3, #8
   2dfd0:	e7af      	b.n	2df32 <_strtol_l.constprop.0+0x56>
   2dfd2:	2c30      	cmp	r4, #48	; 0x30
   2dfd4:	d0a5      	beq.n	2df22 <_strtol_l.constprop.0+0x46>
   2dfd6:	230a      	movs	r3, #10
   2dfd8:	e7ab      	b.n	2df32 <_strtol_l.constprop.0+0x56>
   2dfda:	bf00      	nop
   2dfdc:	00039f71 	.word	0x00039f71

0002dfe0 <strtol>:
   2dfe0:	4613      	mov	r3, r2
   2dfe2:	460a      	mov	r2, r1
   2dfe4:	4601      	mov	r1, r0
   2dfe6:	4802      	ldr	r0, [pc, #8]	; (2dff0 <strtol+0x10>)
   2dfe8:	6800      	ldr	r0, [r0, #0]
   2dfea:	f7ff bf77 	b.w	2dedc <_strtol_l.constprop.0>
   2dfee:	bf00      	nop
   2dff0:	2000c66c 	.word	0x2000c66c

0002dff4 <_strtoll_l.constprop.0>:
   2dff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dff8:	b085      	sub	sp, #20
   2dffa:	4688      	mov	r8, r1
   2dffc:	461e      	mov	r6, r3
   2dffe:	460d      	mov	r5, r1
   2e000:	9201      	str	r2, [sp, #4]
   2e002:	4a46      	ldr	r2, [pc, #280]	; (2e11c <_strtoll_l.constprop.0+0x128>)
   2e004:	9003      	str	r0, [sp, #12]
   2e006:	462b      	mov	r3, r5
   2e008:	f815 4b01 	ldrb.w	r4, [r5], #1
   2e00c:	5ca7      	ldrb	r7, [r4, r2]
   2e00e:	f017 0708 	ands.w	r7, r7, #8
   2e012:	d1f8      	bne.n	2e006 <_strtoll_l.constprop.0+0x12>
   2e014:	2c2d      	cmp	r4, #45	; 0x2d
   2e016:	d148      	bne.n	2e0aa <_strtoll_l.constprop.0+0xb6>
   2e018:	782c      	ldrb	r4, [r5, #0]
   2e01a:	2701      	movs	r7, #1
   2e01c:	1c9d      	adds	r5, r3, #2
   2e01e:	2e00      	cmp	r6, #0
   2e020:	d078      	beq.n	2e114 <_strtoll_l.constprop.0+0x120>
   2e022:	2e10      	cmp	r6, #16
   2e024:	d109      	bne.n	2e03a <_strtoll_l.constprop.0+0x46>
   2e026:	2c30      	cmp	r4, #48	; 0x30
   2e028:	d107      	bne.n	2e03a <_strtoll_l.constprop.0+0x46>
   2e02a:	782b      	ldrb	r3, [r5, #0]
   2e02c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2e030:	2b58      	cmp	r3, #88	; 0x58
   2e032:	d16a      	bne.n	2e10a <_strtoll_l.constprop.0+0x116>
   2e034:	786c      	ldrb	r4, [r5, #1]
   2e036:	2610      	movs	r6, #16
   2e038:	3502      	adds	r5, #2
   2e03a:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
   2e03e:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
   2e042:	ea4f 79e6 	mov.w	r9, r6, asr #31
   2e046:	4632      	mov	r2, r6
   2e048:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   2e04c:	4658      	mov	r0, fp
   2e04e:	464b      	mov	r3, r9
   2e050:	4651      	mov	r1, sl
   2e052:	f7ee fead 	bl	1cdb0 <__aeabi_uldivmod>
   2e056:	2300      	movs	r3, #0
   2e058:	468c      	mov	ip, r1
   2e05a:	9202      	str	r2, [sp, #8]
   2e05c:	4619      	mov	r1, r3
   2e05e:	4602      	mov	r2, r0
   2e060:	4618      	mov	r0, r3
   2e062:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   2e066:	f1be 0f09 	cmp.w	lr, #9
   2e06a:	d823      	bhi.n	2e0b4 <_strtoll_l.constprop.0+0xc0>
   2e06c:	4674      	mov	r4, lr
   2e06e:	42a6      	cmp	r6, r4
   2e070:	dd31      	ble.n	2e0d6 <_strtoll_l.constprop.0+0xe2>
   2e072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2e076:	d015      	beq.n	2e0a4 <_strtoll_l.constprop.0+0xb0>
   2e078:	4282      	cmp	r2, r0
   2e07a:	eb7c 0301 	sbcs.w	r3, ip, r1
   2e07e:	d327      	bcc.n	2e0d0 <_strtoll_l.constprop.0+0xdc>
   2e080:	458c      	cmp	ip, r1
   2e082:	bf08      	it	eq
   2e084:	4282      	cmpeq	r2, r0
   2e086:	d102      	bne.n	2e08e <_strtoll_l.constprop.0+0x9a>
   2e088:	9b02      	ldr	r3, [sp, #8]
   2e08a:	42a3      	cmp	r3, r4
   2e08c:	db20      	blt.n	2e0d0 <_strtoll_l.constprop.0+0xdc>
   2e08e:	4371      	muls	r1, r6
   2e090:	fb00 1109 	mla	r1, r0, r9, r1
   2e094:	fba6 0300 	umull	r0, r3, r6, r0
   2e098:	4419      	add	r1, r3
   2e09a:	1820      	adds	r0, r4, r0
   2e09c:	f04f 0301 	mov.w	r3, #1
   2e0a0:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
   2e0a4:	f815 4b01 	ldrb.w	r4, [r5], #1
   2e0a8:	e7db      	b.n	2e062 <_strtoll_l.constprop.0+0x6e>
   2e0aa:	2c2b      	cmp	r4, #43	; 0x2b
   2e0ac:	bf04      	itt	eq
   2e0ae:	782c      	ldrbeq	r4, [r5, #0]
   2e0b0:	1c9d      	addeq	r5, r3, #2
   2e0b2:	e7b4      	b.n	2e01e <_strtoll_l.constprop.0+0x2a>
   2e0b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   2e0b8:	f1be 0f19 	cmp.w	lr, #25
   2e0bc:	d801      	bhi.n	2e0c2 <_strtoll_l.constprop.0+0xce>
   2e0be:	3c37      	subs	r4, #55	; 0x37
   2e0c0:	e7d5      	b.n	2e06e <_strtoll_l.constprop.0+0x7a>
   2e0c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   2e0c6:	f1be 0f19 	cmp.w	lr, #25
   2e0ca:	d804      	bhi.n	2e0d6 <_strtoll_l.constprop.0+0xe2>
   2e0cc:	3c57      	subs	r4, #87	; 0x57
   2e0ce:	e7ce      	b.n	2e06e <_strtoll_l.constprop.0+0x7a>
   2e0d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e0d4:	e7e6      	b.n	2e0a4 <_strtoll_l.constprop.0+0xb0>
   2e0d6:	1c5a      	adds	r2, r3, #1
   2e0d8:	d109      	bne.n	2e0ee <_strtoll_l.constprop.0+0xfa>
   2e0da:	2322      	movs	r3, #34	; 0x22
   2e0dc:	9a03      	ldr	r2, [sp, #12]
   2e0de:	4658      	mov	r0, fp
   2e0e0:	4651      	mov	r1, sl
   2e0e2:	6013      	str	r3, [r2, #0]
   2e0e4:	9b01      	ldr	r3, [sp, #4]
   2e0e6:	b953      	cbnz	r3, 2e0fe <_strtoll_l.constprop.0+0x10a>
   2e0e8:	b005      	add	sp, #20
   2e0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e0ee:	b117      	cbz	r7, 2e0f6 <_strtoll_l.constprop.0+0x102>
   2e0f0:	4240      	negs	r0, r0
   2e0f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   2e0f6:	9a01      	ldr	r2, [sp, #4]
   2e0f8:	2a00      	cmp	r2, #0
   2e0fa:	d0f5      	beq.n	2e0e8 <_strtoll_l.constprop.0+0xf4>
   2e0fc:	b10b      	cbz	r3, 2e102 <_strtoll_l.constprop.0+0x10e>
   2e0fe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   2e102:	9b01      	ldr	r3, [sp, #4]
   2e104:	f8c3 8000 	str.w	r8, [r3]
   2e108:	e7ee      	b.n	2e0e8 <_strtoll_l.constprop.0+0xf4>
   2e10a:	2430      	movs	r4, #48	; 0x30
   2e10c:	2e00      	cmp	r6, #0
   2e10e:	d194      	bne.n	2e03a <_strtoll_l.constprop.0+0x46>
   2e110:	2608      	movs	r6, #8
   2e112:	e792      	b.n	2e03a <_strtoll_l.constprop.0+0x46>
   2e114:	2c30      	cmp	r4, #48	; 0x30
   2e116:	d088      	beq.n	2e02a <_strtoll_l.constprop.0+0x36>
   2e118:	260a      	movs	r6, #10
   2e11a:	e78e      	b.n	2e03a <_strtoll_l.constprop.0+0x46>
   2e11c:	00039f71 	.word	0x00039f71

0002e120 <strtoll>:
   2e120:	4613      	mov	r3, r2
   2e122:	460a      	mov	r2, r1
   2e124:	4601      	mov	r1, r0
   2e126:	4802      	ldr	r0, [pc, #8]	; (2e130 <strtoll+0x10>)
   2e128:	6800      	ldr	r0, [r0, #0]
   2e12a:	f7ff bf63 	b.w	2dff4 <_strtoll_l.constprop.0>
   2e12e:	bf00      	nop
   2e130:	2000c66c 	.word	0x2000c66c

0002e134 <_strtoul_l.constprop.0>:
   2e134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2e138:	4686      	mov	lr, r0
   2e13a:	460d      	mov	r5, r1
   2e13c:	4f35      	ldr	r7, [pc, #212]	; (2e214 <_strtoul_l.constprop.0+0xe0>)
   2e13e:	4628      	mov	r0, r5
   2e140:	f815 4b01 	ldrb.w	r4, [r5], #1
   2e144:	5de6      	ldrb	r6, [r4, r7]
   2e146:	f016 0608 	ands.w	r6, r6, #8
   2e14a:	d1f8      	bne.n	2e13e <_strtoul_l.constprop.0+0xa>
   2e14c:	2c2d      	cmp	r4, #45	; 0x2d
   2e14e:	d12f      	bne.n	2e1b0 <_strtoul_l.constprop.0+0x7c>
   2e150:	782c      	ldrb	r4, [r5, #0]
   2e152:	2601      	movs	r6, #1
   2e154:	1c85      	adds	r5, r0, #2
   2e156:	2b00      	cmp	r3, #0
   2e158:	d057      	beq.n	2e20a <_strtoul_l.constprop.0+0xd6>
   2e15a:	2b10      	cmp	r3, #16
   2e15c:	d109      	bne.n	2e172 <_strtoul_l.constprop.0+0x3e>
   2e15e:	2c30      	cmp	r4, #48	; 0x30
   2e160:	d107      	bne.n	2e172 <_strtoul_l.constprop.0+0x3e>
   2e162:	7828      	ldrb	r0, [r5, #0]
   2e164:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2e168:	2858      	cmp	r0, #88	; 0x58
   2e16a:	d149      	bne.n	2e200 <_strtoul_l.constprop.0+0xcc>
   2e16c:	786c      	ldrb	r4, [r5, #1]
   2e16e:	2310      	movs	r3, #16
   2e170:	3502      	adds	r5, #2
   2e172:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2e176:	2700      	movs	r7, #0
   2e178:	fbb8 f8f3 	udiv	r8, r8, r3
   2e17c:	fb03 f908 	mul.w	r9, r3, r8
   2e180:	4638      	mov	r0, r7
   2e182:	ea6f 0909 	mvn.w	r9, r9
   2e186:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   2e18a:	f1bc 0f09 	cmp.w	ip, #9
   2e18e:	d814      	bhi.n	2e1ba <_strtoul_l.constprop.0+0x86>
   2e190:	4664      	mov	r4, ip
   2e192:	42a3      	cmp	r3, r4
   2e194:	dd22      	ble.n	2e1dc <_strtoul_l.constprop.0+0xa8>
   2e196:	2f00      	cmp	r7, #0
   2e198:	db1d      	blt.n	2e1d6 <_strtoul_l.constprop.0+0xa2>
   2e19a:	4580      	cmp	r8, r0
   2e19c:	d31b      	bcc.n	2e1d6 <_strtoul_l.constprop.0+0xa2>
   2e19e:	d101      	bne.n	2e1a4 <_strtoul_l.constprop.0+0x70>
   2e1a0:	45a1      	cmp	r9, r4
   2e1a2:	db18      	blt.n	2e1d6 <_strtoul_l.constprop.0+0xa2>
   2e1a4:	fb00 4003 	mla	r0, r0, r3, r4
   2e1a8:	2701      	movs	r7, #1
   2e1aa:	f815 4b01 	ldrb.w	r4, [r5], #1
   2e1ae:	e7ea      	b.n	2e186 <_strtoul_l.constprop.0+0x52>
   2e1b0:	2c2b      	cmp	r4, #43	; 0x2b
   2e1b2:	bf04      	itt	eq
   2e1b4:	782c      	ldrbeq	r4, [r5, #0]
   2e1b6:	1c85      	addeq	r5, r0, #2
   2e1b8:	e7cd      	b.n	2e156 <_strtoul_l.constprop.0+0x22>
   2e1ba:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   2e1be:	f1bc 0f19 	cmp.w	ip, #25
   2e1c2:	d801      	bhi.n	2e1c8 <_strtoul_l.constprop.0+0x94>
   2e1c4:	3c37      	subs	r4, #55	; 0x37
   2e1c6:	e7e4      	b.n	2e192 <_strtoul_l.constprop.0+0x5e>
   2e1c8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   2e1cc:	f1bc 0f19 	cmp.w	ip, #25
   2e1d0:	d804      	bhi.n	2e1dc <_strtoul_l.constprop.0+0xa8>
   2e1d2:	3c57      	subs	r4, #87	; 0x57
   2e1d4:	e7dd      	b.n	2e192 <_strtoul_l.constprop.0+0x5e>
   2e1d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2e1da:	e7e6      	b.n	2e1aa <_strtoul_l.constprop.0+0x76>
   2e1dc:	2f00      	cmp	r7, #0
   2e1de:	da07      	bge.n	2e1f0 <_strtoul_l.constprop.0+0xbc>
   2e1e0:	2322      	movs	r3, #34	; 0x22
   2e1e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e1e6:	f8ce 3000 	str.w	r3, [lr]
   2e1ea:	b932      	cbnz	r2, 2e1fa <_strtoul_l.constprop.0+0xc6>
   2e1ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2e1f0:	b106      	cbz	r6, 2e1f4 <_strtoul_l.constprop.0+0xc0>
   2e1f2:	4240      	negs	r0, r0
   2e1f4:	2a00      	cmp	r2, #0
   2e1f6:	d0f9      	beq.n	2e1ec <_strtoul_l.constprop.0+0xb8>
   2e1f8:	b107      	cbz	r7, 2e1fc <_strtoul_l.constprop.0+0xc8>
   2e1fa:	1e69      	subs	r1, r5, #1
   2e1fc:	6011      	str	r1, [r2, #0]
   2e1fe:	e7f5      	b.n	2e1ec <_strtoul_l.constprop.0+0xb8>
   2e200:	2430      	movs	r4, #48	; 0x30
   2e202:	2b00      	cmp	r3, #0
   2e204:	d1b5      	bne.n	2e172 <_strtoul_l.constprop.0+0x3e>
   2e206:	2308      	movs	r3, #8
   2e208:	e7b3      	b.n	2e172 <_strtoul_l.constprop.0+0x3e>
   2e20a:	2c30      	cmp	r4, #48	; 0x30
   2e20c:	d0a9      	beq.n	2e162 <_strtoul_l.constprop.0+0x2e>
   2e20e:	230a      	movs	r3, #10
   2e210:	e7af      	b.n	2e172 <_strtoul_l.constprop.0+0x3e>
   2e212:	bf00      	nop
   2e214:	00039f71 	.word	0x00039f71

0002e218 <strtoul>:
   2e218:	4613      	mov	r3, r2
   2e21a:	460a      	mov	r2, r1
   2e21c:	4601      	mov	r1, r0
   2e21e:	4802      	ldr	r0, [pc, #8]	; (2e228 <strtoul+0x10>)
   2e220:	6800      	ldr	r0, [r0, #0]
   2e222:	f7ff bf87 	b.w	2e134 <_strtoul_l.constprop.0>
   2e226:	bf00      	nop
   2e228:	2000c66c 	.word	0x2000c66c

0002e22c <vsniprintf>:
   2e22c:	b507      	push	{r0, r1, r2, lr}
   2e22e:	9300      	str	r3, [sp, #0]
   2e230:	4613      	mov	r3, r2
   2e232:	460a      	mov	r2, r1
   2e234:	4601      	mov	r1, r0
   2e236:	4803      	ldr	r0, [pc, #12]	; (2e244 <vsniprintf+0x18>)
   2e238:	6800      	ldr	r0, [r0, #0]
   2e23a:	f005 ff0f 	bl	3405c <_vsniprintf_r>
   2e23e:	b003      	add	sp, #12
   2e240:	f85d fb04 	ldr.w	pc, [sp], #4
   2e244:	2000c66c 	.word	0x2000c66c

0002e248 <_vsiscanf_r>:
   2e248:	b510      	push	{r4, lr}
   2e24a:	4604      	mov	r4, r0
   2e24c:	b09c      	sub	sp, #112	; 0x70
   2e24e:	f44f 7001 	mov.w	r0, #516	; 0x204
   2e252:	9102      	str	r1, [sp, #8]
   2e254:	f8ad 0014 	strh.w	r0, [sp, #20]
   2e258:	4608      	mov	r0, r1
   2e25a:	9106      	str	r1, [sp, #24]
   2e25c:	e9cd 3200 	strd	r3, r2, [sp]
   2e260:	f7ee ff1e 	bl	1d0a0 <strlen>
   2e264:	4909      	ldr	r1, [pc, #36]	; (2e28c <_vsiscanf_r+0x44>)
   2e266:	9003      	str	r0, [sp, #12]
   2e268:	910b      	str	r1, [sp, #44]	; 0x2c
   2e26a:	2100      	movs	r1, #0
   2e26c:	9007      	str	r0, [sp, #28]
   2e26e:	4620      	mov	r0, r4
   2e270:	910f      	str	r1, [sp, #60]	; 0x3c
   2e272:	9114      	str	r1, [sp, #80]	; 0x50
   2e274:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2e278:	e9dd 3200 	ldrd	r3, r2, [sp]
   2e27c:	f8ad 1016 	strh.w	r1, [sp, #22]
   2e280:	a902      	add	r1, sp, #8
   2e282:	f000 fef1 	bl	2f068 <__ssvfiscanf_r>
   2e286:	b01c      	add	sp, #112	; 0x70
   2e288:	bd10      	pop	{r4, pc}
   2e28a:	bf00      	nop
   2e28c:	00033f31 	.word	0x00033f31

0002e290 <vsiscanf>:
   2e290:	4613      	mov	r3, r2
   2e292:	460a      	mov	r2, r1
   2e294:	4601      	mov	r1, r0
   2e296:	4802      	ldr	r0, [pc, #8]	; (2e2a0 <vsiscanf+0x10>)
   2e298:	6800      	ldr	r0, [r0, #0]
   2e29a:	f7ff bfd5 	b.w	2e248 <_vsiscanf_r>
   2e29e:	bf00      	nop
   2e2a0:	2000c66c 	.word	0x2000c66c

0002e2a4 <__swbuf_r>:
   2e2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e2a6:	460e      	mov	r6, r1
   2e2a8:	4614      	mov	r4, r2
   2e2aa:	4605      	mov	r5, r0
   2e2ac:	b118      	cbz	r0, 2e2b6 <__swbuf_r+0x12>
   2e2ae:	6983      	ldr	r3, [r0, #24]
   2e2b0:	b90b      	cbnz	r3, 2e2b6 <__swbuf_r+0x12>
   2e2b2:	f000 f9db 	bl	2e66c <__sinit>
   2e2b6:	4b21      	ldr	r3, [pc, #132]	; (2e33c <__swbuf_r+0x98>)
   2e2b8:	429c      	cmp	r4, r3
   2e2ba:	d12b      	bne.n	2e314 <__swbuf_r+0x70>
   2e2bc:	686c      	ldr	r4, [r5, #4]
   2e2be:	69a3      	ldr	r3, [r4, #24]
   2e2c0:	60a3      	str	r3, [r4, #8]
   2e2c2:	89a3      	ldrh	r3, [r4, #12]
   2e2c4:	071a      	lsls	r2, r3, #28
   2e2c6:	d52f      	bpl.n	2e328 <__swbuf_r+0x84>
   2e2c8:	6923      	ldr	r3, [r4, #16]
   2e2ca:	b36b      	cbz	r3, 2e328 <__swbuf_r+0x84>
   2e2cc:	6923      	ldr	r3, [r4, #16]
   2e2ce:	b2f6      	uxtb	r6, r6
   2e2d0:	6820      	ldr	r0, [r4, #0]
   2e2d2:	4637      	mov	r7, r6
   2e2d4:	1ac0      	subs	r0, r0, r3
   2e2d6:	6963      	ldr	r3, [r4, #20]
   2e2d8:	4283      	cmp	r3, r0
   2e2da:	dc04      	bgt.n	2e2e6 <__swbuf_r+0x42>
   2e2dc:	4621      	mov	r1, r4
   2e2de:	4628      	mov	r0, r5
   2e2e0:	f000 f946 	bl	2e570 <_fflush_r>
   2e2e4:	bb30      	cbnz	r0, 2e334 <__swbuf_r+0x90>
   2e2e6:	68a3      	ldr	r3, [r4, #8]
   2e2e8:	3001      	adds	r0, #1
   2e2ea:	3b01      	subs	r3, #1
   2e2ec:	60a3      	str	r3, [r4, #8]
   2e2ee:	6823      	ldr	r3, [r4, #0]
   2e2f0:	1c5a      	adds	r2, r3, #1
   2e2f2:	6022      	str	r2, [r4, #0]
   2e2f4:	701e      	strb	r6, [r3, #0]
   2e2f6:	6963      	ldr	r3, [r4, #20]
   2e2f8:	4283      	cmp	r3, r0
   2e2fa:	d004      	beq.n	2e306 <__swbuf_r+0x62>
   2e2fc:	89a3      	ldrh	r3, [r4, #12]
   2e2fe:	07db      	lsls	r3, r3, #31
   2e300:	d506      	bpl.n	2e310 <__swbuf_r+0x6c>
   2e302:	2e0a      	cmp	r6, #10
   2e304:	d104      	bne.n	2e310 <__swbuf_r+0x6c>
   2e306:	4621      	mov	r1, r4
   2e308:	4628      	mov	r0, r5
   2e30a:	f000 f931 	bl	2e570 <_fflush_r>
   2e30e:	b988      	cbnz	r0, 2e334 <__swbuf_r+0x90>
   2e310:	4638      	mov	r0, r7
   2e312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e314:	4b0a      	ldr	r3, [pc, #40]	; (2e340 <__swbuf_r+0x9c>)
   2e316:	429c      	cmp	r4, r3
   2e318:	d101      	bne.n	2e31e <__swbuf_r+0x7a>
   2e31a:	68ac      	ldr	r4, [r5, #8]
   2e31c:	e7cf      	b.n	2e2be <__swbuf_r+0x1a>
   2e31e:	4b09      	ldr	r3, [pc, #36]	; (2e344 <__swbuf_r+0xa0>)
   2e320:	429c      	cmp	r4, r3
   2e322:	bf08      	it	eq
   2e324:	68ec      	ldreq	r4, [r5, #12]
   2e326:	e7ca      	b.n	2e2be <__swbuf_r+0x1a>
   2e328:	4621      	mov	r1, r4
   2e32a:	4628      	mov	r0, r5
   2e32c:	f000 f81e 	bl	2e36c <__swsetup_r>
   2e330:	2800      	cmp	r0, #0
   2e332:	d0cb      	beq.n	2e2cc <__swbuf_r+0x28>
   2e334:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2e338:	e7ea      	b.n	2e310 <__swbuf_r+0x6c>
   2e33a:	bf00      	nop
   2e33c:	000353b8 	.word	0x000353b8
   2e340:	000353d8 	.word	0x000353d8
   2e344:	00035398 	.word	0x00035398

0002e348 <_write_r>:
   2e348:	b538      	push	{r3, r4, r5, lr}
   2e34a:	4604      	mov	r4, r0
   2e34c:	4d06      	ldr	r5, [pc, #24]	; (2e368 <_write_r+0x20>)
   2e34e:	4608      	mov	r0, r1
   2e350:	4611      	mov	r1, r2
   2e352:	2200      	movs	r2, #0
   2e354:	602a      	str	r2, [r5, #0]
   2e356:	461a      	mov	r2, r3
   2e358:	f002 fc86 	bl	30c68 <_write>
   2e35c:	1c43      	adds	r3, r0, #1
   2e35e:	d102      	bne.n	2e366 <_write_r+0x1e>
   2e360:	682b      	ldr	r3, [r5, #0]
   2e362:	b103      	cbz	r3, 2e366 <_write_r+0x1e>
   2e364:	6023      	str	r3, [r4, #0]
   2e366:	bd38      	pop	{r3, r4, r5, pc}
   2e368:	2000d900 	.word	0x2000d900

0002e36c <__swsetup_r>:
   2e36c:	4b32      	ldr	r3, [pc, #200]	; (2e438 <__swsetup_r+0xcc>)
   2e36e:	b570      	push	{r4, r5, r6, lr}
   2e370:	681d      	ldr	r5, [r3, #0]
   2e372:	4606      	mov	r6, r0
   2e374:	460c      	mov	r4, r1
   2e376:	b125      	cbz	r5, 2e382 <__swsetup_r+0x16>
   2e378:	69ab      	ldr	r3, [r5, #24]
   2e37a:	b913      	cbnz	r3, 2e382 <__swsetup_r+0x16>
   2e37c:	4628      	mov	r0, r5
   2e37e:	f000 f975 	bl	2e66c <__sinit>
   2e382:	4b2e      	ldr	r3, [pc, #184]	; (2e43c <__swsetup_r+0xd0>)
   2e384:	429c      	cmp	r4, r3
   2e386:	d10f      	bne.n	2e3a8 <__swsetup_r+0x3c>
   2e388:	686c      	ldr	r4, [r5, #4]
   2e38a:	89a3      	ldrh	r3, [r4, #12]
   2e38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2e390:	0719      	lsls	r1, r3, #28
   2e392:	d42c      	bmi.n	2e3ee <__swsetup_r+0x82>
   2e394:	06dd      	lsls	r5, r3, #27
   2e396:	d411      	bmi.n	2e3bc <__swsetup_r+0x50>
   2e398:	2309      	movs	r3, #9
   2e39a:	6033      	str	r3, [r6, #0]
   2e39c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   2e3a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e3a4:	81a3      	strh	r3, [r4, #12]
   2e3a6:	e03e      	b.n	2e426 <__swsetup_r+0xba>
   2e3a8:	4b25      	ldr	r3, [pc, #148]	; (2e440 <__swsetup_r+0xd4>)
   2e3aa:	429c      	cmp	r4, r3
   2e3ac:	d101      	bne.n	2e3b2 <__swsetup_r+0x46>
   2e3ae:	68ac      	ldr	r4, [r5, #8]
   2e3b0:	e7eb      	b.n	2e38a <__swsetup_r+0x1e>
   2e3b2:	4b24      	ldr	r3, [pc, #144]	; (2e444 <__swsetup_r+0xd8>)
   2e3b4:	429c      	cmp	r4, r3
   2e3b6:	bf08      	it	eq
   2e3b8:	68ec      	ldreq	r4, [r5, #12]
   2e3ba:	e7e6      	b.n	2e38a <__swsetup_r+0x1e>
   2e3bc:	0758      	lsls	r0, r3, #29
   2e3be:	d512      	bpl.n	2e3e6 <__swsetup_r+0x7a>
   2e3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2e3c2:	b141      	cbz	r1, 2e3d6 <__swsetup_r+0x6a>
   2e3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2e3c8:	4299      	cmp	r1, r3
   2e3ca:	d002      	beq.n	2e3d2 <__swsetup_r+0x66>
   2e3cc:	4630      	mov	r0, r6
   2e3ce:	f7fe ffb9 	bl	2d344 <_free_r>
   2e3d2:	2300      	movs	r3, #0
   2e3d4:	6363      	str	r3, [r4, #52]	; 0x34
   2e3d6:	89a3      	ldrh	r3, [r4, #12]
   2e3d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2e3dc:	81a3      	strh	r3, [r4, #12]
   2e3de:	2300      	movs	r3, #0
   2e3e0:	6063      	str	r3, [r4, #4]
   2e3e2:	6923      	ldr	r3, [r4, #16]
   2e3e4:	6023      	str	r3, [r4, #0]
   2e3e6:	89a3      	ldrh	r3, [r4, #12]
   2e3e8:	f043 0308 	orr.w	r3, r3, #8
   2e3ec:	81a3      	strh	r3, [r4, #12]
   2e3ee:	6923      	ldr	r3, [r4, #16]
   2e3f0:	b94b      	cbnz	r3, 2e406 <__swsetup_r+0x9a>
   2e3f2:	89a3      	ldrh	r3, [r4, #12]
   2e3f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
   2e3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2e3fc:	d003      	beq.n	2e406 <__swsetup_r+0x9a>
   2e3fe:	4621      	mov	r1, r4
   2e400:	4630      	mov	r0, r6
   2e402:	f000 f9c7 	bl	2e794 <__smakebuf_r>
   2e406:	89a0      	ldrh	r0, [r4, #12]
   2e408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2e40c:	f010 0301 	ands.w	r3, r0, #1
   2e410:	d00a      	beq.n	2e428 <__swsetup_r+0xbc>
   2e412:	2300      	movs	r3, #0
   2e414:	60a3      	str	r3, [r4, #8]
   2e416:	6963      	ldr	r3, [r4, #20]
   2e418:	425b      	negs	r3, r3
   2e41a:	61a3      	str	r3, [r4, #24]
   2e41c:	6923      	ldr	r3, [r4, #16]
   2e41e:	b943      	cbnz	r3, 2e432 <__swsetup_r+0xc6>
   2e420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   2e424:	d1ba      	bne.n	2e39c <__swsetup_r+0x30>
   2e426:	bd70      	pop	{r4, r5, r6, pc}
   2e428:	0781      	lsls	r1, r0, #30
   2e42a:	bf58      	it	pl
   2e42c:	6963      	ldrpl	r3, [r4, #20]
   2e42e:	60a3      	str	r3, [r4, #8]
   2e430:	e7f4      	b.n	2e41c <__swsetup_r+0xb0>
   2e432:	2000      	movs	r0, #0
   2e434:	e7f7      	b.n	2e426 <__swsetup_r+0xba>
   2e436:	bf00      	nop
   2e438:	2000c66c 	.word	0x2000c66c
   2e43c:	000353b8 	.word	0x000353b8
   2e440:	000353d8 	.word	0x000353d8
   2e444:	00035398 	.word	0x00035398

0002e448 <_close_r>:
   2e448:	b538      	push	{r3, r4, r5, lr}
   2e44a:	2300      	movs	r3, #0
   2e44c:	4d05      	ldr	r5, [pc, #20]	; (2e464 <_close_r+0x1c>)
   2e44e:	4604      	mov	r4, r0
   2e450:	4608      	mov	r0, r1
   2e452:	602b      	str	r3, [r5, #0]
   2e454:	f002 fc0c 	bl	30c70 <_close>
   2e458:	1c43      	adds	r3, r0, #1
   2e45a:	d102      	bne.n	2e462 <_close_r+0x1a>
   2e45c:	682b      	ldr	r3, [r5, #0]
   2e45e:	b103      	cbz	r3, 2e462 <_close_r+0x1a>
   2e460:	6023      	str	r3, [r4, #0]
   2e462:	bd38      	pop	{r3, r4, r5, pc}
   2e464:	2000d900 	.word	0x2000d900

0002e468 <__sflush_r>:
   2e468:	898a      	ldrh	r2, [r1, #12]
   2e46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e46e:	4605      	mov	r5, r0
   2e470:	0710      	lsls	r0, r2, #28
   2e472:	460c      	mov	r4, r1
   2e474:	d458      	bmi.n	2e528 <__sflush_r+0xc0>
   2e476:	684b      	ldr	r3, [r1, #4]
   2e478:	2b00      	cmp	r3, #0
   2e47a:	dc05      	bgt.n	2e488 <__sflush_r+0x20>
   2e47c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2e47e:	2b00      	cmp	r3, #0
   2e480:	dc02      	bgt.n	2e488 <__sflush_r+0x20>
   2e482:	2000      	movs	r0, #0
   2e484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2e48a:	2e00      	cmp	r6, #0
   2e48c:	d0f9      	beq.n	2e482 <__sflush_r+0x1a>
   2e48e:	2300      	movs	r3, #0
   2e490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   2e494:	682f      	ldr	r7, [r5, #0]
   2e496:	602b      	str	r3, [r5, #0]
   2e498:	d032      	beq.n	2e500 <__sflush_r+0x98>
   2e49a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   2e49c:	89a3      	ldrh	r3, [r4, #12]
   2e49e:	075a      	lsls	r2, r3, #29
   2e4a0:	d505      	bpl.n	2e4ae <__sflush_r+0x46>
   2e4a2:	6863      	ldr	r3, [r4, #4]
   2e4a4:	1ac0      	subs	r0, r0, r3
   2e4a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2e4a8:	b10b      	cbz	r3, 2e4ae <__sflush_r+0x46>
   2e4aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2e4ac:	1ac0      	subs	r0, r0, r3
   2e4ae:	2300      	movs	r3, #0
   2e4b0:	4602      	mov	r2, r0
   2e4b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2e4b4:	4628      	mov	r0, r5
   2e4b6:	6a21      	ldr	r1, [r4, #32]
   2e4b8:	47b0      	blx	r6
   2e4ba:	1c43      	adds	r3, r0, #1
   2e4bc:	89a3      	ldrh	r3, [r4, #12]
   2e4be:	d106      	bne.n	2e4ce <__sflush_r+0x66>
   2e4c0:	6829      	ldr	r1, [r5, #0]
   2e4c2:	291d      	cmp	r1, #29
   2e4c4:	d82c      	bhi.n	2e520 <__sflush_r+0xb8>
   2e4c6:	4a29      	ldr	r2, [pc, #164]	; (2e56c <__sflush_r+0x104>)
   2e4c8:	40ca      	lsrs	r2, r1
   2e4ca:	07d6      	lsls	r6, r2, #31
   2e4cc:	d528      	bpl.n	2e520 <__sflush_r+0xb8>
   2e4ce:	2200      	movs	r2, #0
   2e4d0:	04d9      	lsls	r1, r3, #19
   2e4d2:	6062      	str	r2, [r4, #4]
   2e4d4:	6922      	ldr	r2, [r4, #16]
   2e4d6:	6022      	str	r2, [r4, #0]
   2e4d8:	d504      	bpl.n	2e4e4 <__sflush_r+0x7c>
   2e4da:	1c42      	adds	r2, r0, #1
   2e4dc:	d101      	bne.n	2e4e2 <__sflush_r+0x7a>
   2e4de:	682b      	ldr	r3, [r5, #0]
   2e4e0:	b903      	cbnz	r3, 2e4e4 <__sflush_r+0x7c>
   2e4e2:	6560      	str	r0, [r4, #84]	; 0x54
   2e4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2e4e6:	602f      	str	r7, [r5, #0]
   2e4e8:	2900      	cmp	r1, #0
   2e4ea:	d0ca      	beq.n	2e482 <__sflush_r+0x1a>
   2e4ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2e4f0:	4299      	cmp	r1, r3
   2e4f2:	d002      	beq.n	2e4fa <__sflush_r+0x92>
   2e4f4:	4628      	mov	r0, r5
   2e4f6:	f7fe ff25 	bl	2d344 <_free_r>
   2e4fa:	2000      	movs	r0, #0
   2e4fc:	6360      	str	r0, [r4, #52]	; 0x34
   2e4fe:	e7c1      	b.n	2e484 <__sflush_r+0x1c>
   2e500:	6a21      	ldr	r1, [r4, #32]
   2e502:	2301      	movs	r3, #1
   2e504:	4628      	mov	r0, r5
   2e506:	47b0      	blx	r6
   2e508:	1c41      	adds	r1, r0, #1
   2e50a:	d1c7      	bne.n	2e49c <__sflush_r+0x34>
   2e50c:	682b      	ldr	r3, [r5, #0]
   2e50e:	2b00      	cmp	r3, #0
   2e510:	d0c4      	beq.n	2e49c <__sflush_r+0x34>
   2e512:	2b1d      	cmp	r3, #29
   2e514:	d001      	beq.n	2e51a <__sflush_r+0xb2>
   2e516:	2b16      	cmp	r3, #22
   2e518:	d101      	bne.n	2e51e <__sflush_r+0xb6>
   2e51a:	602f      	str	r7, [r5, #0]
   2e51c:	e7b1      	b.n	2e482 <__sflush_r+0x1a>
   2e51e:	89a3      	ldrh	r3, [r4, #12]
   2e520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e524:	81a3      	strh	r3, [r4, #12]
   2e526:	e7ad      	b.n	2e484 <__sflush_r+0x1c>
   2e528:	690f      	ldr	r7, [r1, #16]
   2e52a:	2f00      	cmp	r7, #0
   2e52c:	d0a9      	beq.n	2e482 <__sflush_r+0x1a>
   2e52e:	0793      	lsls	r3, r2, #30
   2e530:	680e      	ldr	r6, [r1, #0]
   2e532:	600f      	str	r7, [r1, #0]
   2e534:	bf0c      	ite	eq
   2e536:	694b      	ldreq	r3, [r1, #20]
   2e538:	2300      	movne	r3, #0
   2e53a:	eba6 0807 	sub.w	r8, r6, r7
   2e53e:	608b      	str	r3, [r1, #8]
   2e540:	f1b8 0f00 	cmp.w	r8, #0
   2e544:	dd9d      	ble.n	2e482 <__sflush_r+0x1a>
   2e546:	4643      	mov	r3, r8
   2e548:	463a      	mov	r2, r7
   2e54a:	6a21      	ldr	r1, [r4, #32]
   2e54c:	4628      	mov	r0, r5
   2e54e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   2e550:	47b0      	blx	r6
   2e552:	2800      	cmp	r0, #0
   2e554:	dc06      	bgt.n	2e564 <__sflush_r+0xfc>
   2e556:	89a3      	ldrh	r3, [r4, #12]
   2e558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e560:	81a3      	strh	r3, [r4, #12]
   2e562:	e78f      	b.n	2e484 <__sflush_r+0x1c>
   2e564:	4407      	add	r7, r0
   2e566:	eba8 0800 	sub.w	r8, r8, r0
   2e56a:	e7e9      	b.n	2e540 <__sflush_r+0xd8>
   2e56c:	20400001 	.word	0x20400001

0002e570 <_fflush_r>:
   2e570:	b538      	push	{r3, r4, r5, lr}
   2e572:	690b      	ldr	r3, [r1, #16]
   2e574:	4605      	mov	r5, r0
   2e576:	460c      	mov	r4, r1
   2e578:	b913      	cbnz	r3, 2e580 <_fflush_r+0x10>
   2e57a:	2500      	movs	r5, #0
   2e57c:	4628      	mov	r0, r5
   2e57e:	bd38      	pop	{r3, r4, r5, pc}
   2e580:	b118      	cbz	r0, 2e58a <_fflush_r+0x1a>
   2e582:	6983      	ldr	r3, [r0, #24]
   2e584:	b90b      	cbnz	r3, 2e58a <_fflush_r+0x1a>
   2e586:	f000 f871 	bl	2e66c <__sinit>
   2e58a:	4b14      	ldr	r3, [pc, #80]	; (2e5dc <_fflush_r+0x6c>)
   2e58c:	429c      	cmp	r4, r3
   2e58e:	d11b      	bne.n	2e5c8 <_fflush_r+0x58>
   2e590:	686c      	ldr	r4, [r5, #4]
   2e592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2e596:	2b00      	cmp	r3, #0
   2e598:	d0ef      	beq.n	2e57a <_fflush_r+0xa>
   2e59a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2e59c:	07d0      	lsls	r0, r2, #31
   2e59e:	d404      	bmi.n	2e5aa <_fflush_r+0x3a>
   2e5a0:	0599      	lsls	r1, r3, #22
   2e5a2:	d402      	bmi.n	2e5aa <_fflush_r+0x3a>
   2e5a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2e5a6:	f002 fb80 	bl	30caa <__retarget_lock_acquire_recursive>
   2e5aa:	4628      	mov	r0, r5
   2e5ac:	4621      	mov	r1, r4
   2e5ae:	f7ff ff5b 	bl	2e468 <__sflush_r>
   2e5b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2e5b4:	4605      	mov	r5, r0
   2e5b6:	07da      	lsls	r2, r3, #31
   2e5b8:	d4e0      	bmi.n	2e57c <_fflush_r+0xc>
   2e5ba:	89a3      	ldrh	r3, [r4, #12]
   2e5bc:	059b      	lsls	r3, r3, #22
   2e5be:	d4dd      	bmi.n	2e57c <_fflush_r+0xc>
   2e5c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2e5c2:	f002 fb78 	bl	30cb6 <__retarget_lock_release_recursive>
   2e5c6:	e7d9      	b.n	2e57c <_fflush_r+0xc>
   2e5c8:	4b05      	ldr	r3, [pc, #20]	; (2e5e0 <_fflush_r+0x70>)
   2e5ca:	429c      	cmp	r4, r3
   2e5cc:	d101      	bne.n	2e5d2 <_fflush_r+0x62>
   2e5ce:	68ac      	ldr	r4, [r5, #8]
   2e5d0:	e7df      	b.n	2e592 <_fflush_r+0x22>
   2e5d2:	4b04      	ldr	r3, [pc, #16]	; (2e5e4 <_fflush_r+0x74>)
   2e5d4:	429c      	cmp	r4, r3
   2e5d6:	bf08      	it	eq
   2e5d8:	68ec      	ldreq	r4, [r5, #12]
   2e5da:	e7da      	b.n	2e592 <_fflush_r+0x22>
   2e5dc:	000353b8 	.word	0x000353b8
   2e5e0:	000353d8 	.word	0x000353d8
   2e5e4:	00035398 	.word	0x00035398

0002e5e8 <std>:
   2e5e8:	2300      	movs	r3, #0
   2e5ea:	b510      	push	{r4, lr}
   2e5ec:	4604      	mov	r4, r0
   2e5ee:	6083      	str	r3, [r0, #8]
   2e5f0:	8181      	strh	r1, [r0, #12]
   2e5f2:	4619      	mov	r1, r3
   2e5f4:	6643      	str	r3, [r0, #100]	; 0x64
   2e5f6:	81c2      	strh	r2, [r0, #14]
   2e5f8:	2208      	movs	r2, #8
   2e5fa:	6183      	str	r3, [r0, #24]
   2e5fc:	e9c0 3300 	strd	r3, r3, [r0]
   2e600:	e9c0 3304 	strd	r3, r3, [r0, #16]
   2e604:	305c      	adds	r0, #92	; 0x5c
   2e606:	f005 fb32 	bl	33c6e <memset>
   2e60a:	4b05      	ldr	r3, [pc, #20]	; (2e620 <std+0x38>)
   2e60c:	6224      	str	r4, [r4, #32]
   2e60e:	6263      	str	r3, [r4, #36]	; 0x24
   2e610:	4b04      	ldr	r3, [pc, #16]	; (2e624 <std+0x3c>)
   2e612:	62a3      	str	r3, [r4, #40]	; 0x28
   2e614:	4b04      	ldr	r3, [pc, #16]	; (2e628 <std+0x40>)
   2e616:	62e3      	str	r3, [r4, #44]	; 0x2c
   2e618:	4b04      	ldr	r3, [pc, #16]	; (2e62c <std+0x44>)
   2e61a:	6323      	str	r3, [r4, #48]	; 0x30
   2e61c:	bd10      	pop	{r4, pc}
   2e61e:	bf00      	nop
   2e620:	00033f0f 	.word	0x00033f0f
   2e624:	00033f35 	.word	0x00033f35
   2e628:	00033f6d 	.word	0x00033f6d
   2e62c:	00033f91 	.word	0x00033f91

0002e630 <_cleanup_r>:
   2e630:	4901      	ldr	r1, [pc, #4]	; (2e638 <_cleanup_r+0x8>)
   2e632:	f005 bde3 	b.w	341fc <_fwalk_reent>
   2e636:	bf00      	nop
   2e638:	0002e571 	.word	0x0002e571

0002e63c <__sfp_lock_acquire>:
   2e63c:	4801      	ldr	r0, [pc, #4]	; (2e644 <__sfp_lock_acquire+0x8>)
   2e63e:	f002 bb34 	b.w	30caa <__retarget_lock_acquire_recursive>
   2e642:	bf00      	nop
   2e644:	2000c928 	.word	0x2000c928

0002e648 <__sfp_lock_release>:
   2e648:	4801      	ldr	r0, [pc, #4]	; (2e650 <__sfp_lock_release+0x8>)
   2e64a:	f002 bb34 	b.w	30cb6 <__retarget_lock_release_recursive>
   2e64e:	bf00      	nop
   2e650:	2000c928 	.word	0x2000c928

0002e654 <__sinit_lock_acquire>:
   2e654:	4801      	ldr	r0, [pc, #4]	; (2e65c <__sinit_lock_acquire+0x8>)
   2e656:	f002 bb28 	b.w	30caa <__retarget_lock_acquire_recursive>
   2e65a:	bf00      	nop
   2e65c:	2000c93c 	.word	0x2000c93c

0002e660 <__sinit_lock_release>:
   2e660:	4801      	ldr	r0, [pc, #4]	; (2e668 <__sinit_lock_release+0x8>)
   2e662:	f002 bb28 	b.w	30cb6 <__retarget_lock_release_recursive>
   2e666:	bf00      	nop
   2e668:	2000c93c 	.word	0x2000c93c

0002e66c <__sinit>:
   2e66c:	b510      	push	{r4, lr}
   2e66e:	4604      	mov	r4, r0
   2e670:	f7ff fff0 	bl	2e654 <__sinit_lock_acquire>
   2e674:	69a3      	ldr	r3, [r4, #24]
   2e676:	b11b      	cbz	r3, 2e680 <__sinit+0x14>
   2e678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e67c:	f7ff bff0 	b.w	2e660 <__sinit_lock_release>
   2e680:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   2e684:	6523      	str	r3, [r4, #80]	; 0x50
   2e686:	4620      	mov	r0, r4
   2e688:	4b12      	ldr	r3, [pc, #72]	; (2e6d4 <__sinit+0x68>)
   2e68a:	4a13      	ldr	r2, [pc, #76]	; (2e6d8 <__sinit+0x6c>)
   2e68c:	681b      	ldr	r3, [r3, #0]
   2e68e:	62a2      	str	r2, [r4, #40]	; 0x28
   2e690:	42a3      	cmp	r3, r4
   2e692:	bf04      	itt	eq
   2e694:	2301      	moveq	r3, #1
   2e696:	61a3      	streq	r3, [r4, #24]
   2e698:	f000 f820 	bl	2e6dc <__sfp>
   2e69c:	6060      	str	r0, [r4, #4]
   2e69e:	4620      	mov	r0, r4
   2e6a0:	f000 f81c 	bl	2e6dc <__sfp>
   2e6a4:	60a0      	str	r0, [r4, #8]
   2e6a6:	4620      	mov	r0, r4
   2e6a8:	f000 f818 	bl	2e6dc <__sfp>
   2e6ac:	2200      	movs	r2, #0
   2e6ae:	2104      	movs	r1, #4
   2e6b0:	60e0      	str	r0, [r4, #12]
   2e6b2:	6860      	ldr	r0, [r4, #4]
   2e6b4:	f7ff ff98 	bl	2e5e8 <std>
   2e6b8:	2201      	movs	r2, #1
   2e6ba:	2109      	movs	r1, #9
   2e6bc:	68a0      	ldr	r0, [r4, #8]
   2e6be:	f7ff ff93 	bl	2e5e8 <std>
   2e6c2:	2202      	movs	r2, #2
   2e6c4:	2112      	movs	r1, #18
   2e6c6:	68e0      	ldr	r0, [r4, #12]
   2e6c8:	f7ff ff8e 	bl	2e5e8 <std>
   2e6cc:	2301      	movs	r3, #1
   2e6ce:	61a3      	str	r3, [r4, #24]
   2e6d0:	e7d2      	b.n	2e678 <__sinit+0xc>
   2e6d2:	bf00      	nop
   2e6d4:	00035394 	.word	0x00035394
   2e6d8:	0002e631 	.word	0x0002e631

0002e6dc <__sfp>:
   2e6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e6de:	4607      	mov	r7, r0
   2e6e0:	f7ff ffac 	bl	2e63c <__sfp_lock_acquire>
   2e6e4:	4b1e      	ldr	r3, [pc, #120]	; (2e760 <__sfp+0x84>)
   2e6e6:	681e      	ldr	r6, [r3, #0]
   2e6e8:	69b3      	ldr	r3, [r6, #24]
   2e6ea:	b913      	cbnz	r3, 2e6f2 <__sfp+0x16>
   2e6ec:	4630      	mov	r0, r6
   2e6ee:	f7ff ffbd 	bl	2e66c <__sinit>
   2e6f2:	3648      	adds	r6, #72	; 0x48
   2e6f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   2e6f8:	3b01      	subs	r3, #1
   2e6fa:	d503      	bpl.n	2e704 <__sfp+0x28>
   2e6fc:	6833      	ldr	r3, [r6, #0]
   2e6fe:	b30b      	cbz	r3, 2e744 <__sfp+0x68>
   2e700:	6836      	ldr	r6, [r6, #0]
   2e702:	e7f7      	b.n	2e6f4 <__sfp+0x18>
   2e704:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   2e708:	b9d5      	cbnz	r5, 2e740 <__sfp+0x64>
   2e70a:	4b16      	ldr	r3, [pc, #88]	; (2e764 <__sfp+0x88>)
   2e70c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2e710:	6665      	str	r5, [r4, #100]	; 0x64
   2e712:	60e3      	str	r3, [r4, #12]
   2e714:	f002 fabf 	bl	30c96 <__retarget_lock_init_recursive>
   2e718:	f7ff ff96 	bl	2e648 <__sfp_lock_release>
   2e71c:	2208      	movs	r2, #8
   2e71e:	4629      	mov	r1, r5
   2e720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   2e724:	6025      	str	r5, [r4, #0]
   2e726:	61a5      	str	r5, [r4, #24]
   2e728:	e9c4 5501 	strd	r5, r5, [r4, #4]
   2e72c:	e9c4 5504 	strd	r5, r5, [r4, #16]
   2e730:	f005 fa9d 	bl	33c6e <memset>
   2e734:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   2e738:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   2e73c:	4620      	mov	r0, r4
   2e73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2e740:	3468      	adds	r4, #104	; 0x68
   2e742:	e7d9      	b.n	2e6f8 <__sfp+0x1c>
   2e744:	2104      	movs	r1, #4
   2e746:	4638      	mov	r0, r7
   2e748:	f005 fd42 	bl	341d0 <__sfmoreglue>
   2e74c:	4604      	mov	r4, r0
   2e74e:	6030      	str	r0, [r6, #0]
   2e750:	2800      	cmp	r0, #0
   2e752:	d1d5      	bne.n	2e700 <__sfp+0x24>
   2e754:	f7ff ff78 	bl	2e648 <__sfp_lock_release>
   2e758:	230c      	movs	r3, #12
   2e75a:	603b      	str	r3, [r7, #0]
   2e75c:	e7ee      	b.n	2e73c <__sfp+0x60>
   2e75e:	bf00      	nop
   2e760:	00035394 	.word	0x00035394
   2e764:	ffff0001 	.word	0xffff0001

0002e768 <_localeconv_r>:
   2e768:	4800      	ldr	r0, [pc, #0]	; (2e76c <_localeconv_r+0x4>)
   2e76a:	4770      	bx	lr
   2e76c:	2000c7c0 	.word	0x2000c7c0

0002e770 <_lseek_r>:
   2e770:	b538      	push	{r3, r4, r5, lr}
   2e772:	4604      	mov	r4, r0
   2e774:	4d06      	ldr	r5, [pc, #24]	; (2e790 <_lseek_r+0x20>)
   2e776:	4608      	mov	r0, r1
   2e778:	4611      	mov	r1, r2
   2e77a:	2200      	movs	r2, #0
   2e77c:	602a      	str	r2, [r5, #0]
   2e77e:	461a      	mov	r2, r3
   2e780:	f002 fa79 	bl	30c76 <_lseek>
   2e784:	1c43      	adds	r3, r0, #1
   2e786:	d102      	bne.n	2e78e <_lseek_r+0x1e>
   2e788:	682b      	ldr	r3, [r5, #0]
   2e78a:	b103      	cbz	r3, 2e78e <_lseek_r+0x1e>
   2e78c:	6023      	str	r3, [r4, #0]
   2e78e:	bd38      	pop	{r3, r4, r5, pc}
   2e790:	2000d900 	.word	0x2000d900

0002e794 <__smakebuf_r>:
   2e794:	898b      	ldrh	r3, [r1, #12]
   2e796:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e798:	079d      	lsls	r5, r3, #30
   2e79a:	4606      	mov	r6, r0
   2e79c:	460c      	mov	r4, r1
   2e79e:	d507      	bpl.n	2e7b0 <__smakebuf_r+0x1c>
   2e7a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   2e7a4:	6023      	str	r3, [r4, #0]
   2e7a6:	6123      	str	r3, [r4, #16]
   2e7a8:	2301      	movs	r3, #1
   2e7aa:	6163      	str	r3, [r4, #20]
   2e7ac:	b002      	add	sp, #8
   2e7ae:	bd70      	pop	{r4, r5, r6, pc}
   2e7b0:	ab01      	add	r3, sp, #4
   2e7b2:	466a      	mov	r2, sp
   2e7b4:	f005 fd41 	bl	3423a <__swhatbuf_r>
   2e7b8:	9900      	ldr	r1, [sp, #0]
   2e7ba:	4605      	mov	r5, r0
   2e7bc:	4630      	mov	r0, r6
   2e7be:	f7fe fe0d 	bl	2d3dc <_malloc_r>
   2e7c2:	b948      	cbnz	r0, 2e7d8 <__smakebuf_r+0x44>
   2e7c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2e7c8:	059a      	lsls	r2, r3, #22
   2e7ca:	d4ef      	bmi.n	2e7ac <__smakebuf_r+0x18>
   2e7cc:	f023 0303 	bic.w	r3, r3, #3
   2e7d0:	f043 0302 	orr.w	r3, r3, #2
   2e7d4:	81a3      	strh	r3, [r4, #12]
   2e7d6:	e7e3      	b.n	2e7a0 <__smakebuf_r+0xc>
   2e7d8:	4b0d      	ldr	r3, [pc, #52]	; (2e810 <__smakebuf_r+0x7c>)
   2e7da:	62b3      	str	r3, [r6, #40]	; 0x28
   2e7dc:	89a3      	ldrh	r3, [r4, #12]
   2e7de:	6020      	str	r0, [r4, #0]
   2e7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2e7e4:	6120      	str	r0, [r4, #16]
   2e7e6:	81a3      	strh	r3, [r4, #12]
   2e7e8:	9b00      	ldr	r3, [sp, #0]
   2e7ea:	6163      	str	r3, [r4, #20]
   2e7ec:	9b01      	ldr	r3, [sp, #4]
   2e7ee:	b15b      	cbz	r3, 2e808 <__smakebuf_r+0x74>
   2e7f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2e7f4:	4630      	mov	r0, r6
   2e7f6:	f000 ff47 	bl	2f688 <_isatty_r>
   2e7fa:	b128      	cbz	r0, 2e808 <__smakebuf_r+0x74>
   2e7fc:	89a3      	ldrh	r3, [r4, #12]
   2e7fe:	f023 0303 	bic.w	r3, r3, #3
   2e802:	f043 0301 	orr.w	r3, r3, #1
   2e806:	81a3      	strh	r3, [r4, #12]
   2e808:	89a0      	ldrh	r0, [r4, #12]
   2e80a:	4305      	orrs	r5, r0
   2e80c:	81a5      	strh	r5, [r4, #12]
   2e80e:	e7cd      	b.n	2e7ac <__smakebuf_r+0x18>
   2e810:	0002e631 	.word	0x0002e631

0002e814 <__malloc_lock>:
   2e814:	4801      	ldr	r0, [pc, #4]	; (2e81c <__malloc_lock+0x8>)
   2e816:	f002 ba48 	b.w	30caa <__retarget_lock_acquire_recursive>
   2e81a:	bf00      	nop
   2e81c:	2000c914 	.word	0x2000c914

0002e820 <__malloc_unlock>:
   2e820:	4801      	ldr	r0, [pc, #4]	; (2e828 <__malloc_unlock+0x8>)
   2e822:	f002 ba48 	b.w	30cb6 <__retarget_lock_release_recursive>
   2e826:	bf00      	nop
   2e828:	2000c914 	.word	0x2000c914

0002e82c <_Balloc>:
   2e82c:	b570      	push	{r4, r5, r6, lr}
   2e82e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2e830:	4604      	mov	r4, r0
   2e832:	460d      	mov	r5, r1
   2e834:	b976      	cbnz	r6, 2e854 <_Balloc+0x28>
   2e836:	2010      	movs	r0, #16
   2e838:	f7fe fd74 	bl	2d324 <malloc>
   2e83c:	4602      	mov	r2, r0
   2e83e:	6260      	str	r0, [r4, #36]	; 0x24
   2e840:	b920      	cbnz	r0, 2e84c <_Balloc+0x20>
   2e842:	4b18      	ldr	r3, [pc, #96]	; (2e8a4 <_Balloc+0x78>)
   2e844:	2166      	movs	r1, #102	; 0x66
   2e846:	4818      	ldr	r0, [pc, #96]	; (2e8a8 <_Balloc+0x7c>)
   2e848:	f000 feee 	bl	2f628 <__assert_func>
   2e84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2e850:	6006      	str	r6, [r0, #0]
   2e852:	60c6      	str	r6, [r0, #12]
   2e854:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2e856:	68f3      	ldr	r3, [r6, #12]
   2e858:	b183      	cbz	r3, 2e87c <_Balloc+0x50>
   2e85a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e85c:	68db      	ldr	r3, [r3, #12]
   2e85e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2e862:	b9b8      	cbnz	r0, 2e894 <_Balloc+0x68>
   2e864:	2101      	movs	r1, #1
   2e866:	4620      	mov	r0, r4
   2e868:	fa01 f605 	lsl.w	r6, r1, r5
   2e86c:	1d72      	adds	r2, r6, #5
   2e86e:	0092      	lsls	r2, r2, #2
   2e870:	f005 fa05 	bl	33c7e <_calloc_r>
   2e874:	b160      	cbz	r0, 2e890 <_Balloc+0x64>
   2e876:	e9c0 5601 	strd	r5, r6, [r0, #4]
   2e87a:	e00e      	b.n	2e89a <_Balloc+0x6e>
   2e87c:	2221      	movs	r2, #33	; 0x21
   2e87e:	2104      	movs	r1, #4
   2e880:	4620      	mov	r0, r4
   2e882:	f005 f9fc 	bl	33c7e <_calloc_r>
   2e886:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e888:	60f0      	str	r0, [r6, #12]
   2e88a:	68db      	ldr	r3, [r3, #12]
   2e88c:	2b00      	cmp	r3, #0
   2e88e:	d1e4      	bne.n	2e85a <_Balloc+0x2e>
   2e890:	2000      	movs	r0, #0
   2e892:	bd70      	pop	{r4, r5, r6, pc}
   2e894:	6802      	ldr	r2, [r0, #0]
   2e896:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   2e89a:	2300      	movs	r3, #0
   2e89c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   2e8a0:	e7f7      	b.n	2e892 <_Balloc+0x66>
   2e8a2:	bf00      	nop
   2e8a4:	0003a0bd 	.word	0x0003a0bd
   2e8a8:	0003a147 	.word	0x0003a147

0002e8ac <_Bfree>:
   2e8ac:	b570      	push	{r4, r5, r6, lr}
   2e8ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
   2e8b0:	4605      	mov	r5, r0
   2e8b2:	460c      	mov	r4, r1
   2e8b4:	b976      	cbnz	r6, 2e8d4 <_Bfree+0x28>
   2e8b6:	2010      	movs	r0, #16
   2e8b8:	f7fe fd34 	bl	2d324 <malloc>
   2e8bc:	4602      	mov	r2, r0
   2e8be:	6268      	str	r0, [r5, #36]	; 0x24
   2e8c0:	b920      	cbnz	r0, 2e8cc <_Bfree+0x20>
   2e8c2:	4b09      	ldr	r3, [pc, #36]	; (2e8e8 <_Bfree+0x3c>)
   2e8c4:	218a      	movs	r1, #138	; 0x8a
   2e8c6:	4809      	ldr	r0, [pc, #36]	; (2e8ec <_Bfree+0x40>)
   2e8c8:	f000 feae 	bl	2f628 <__assert_func>
   2e8cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   2e8d0:	6006      	str	r6, [r0, #0]
   2e8d2:	60c6      	str	r6, [r0, #12]
   2e8d4:	b13c      	cbz	r4, 2e8e6 <_Bfree+0x3a>
   2e8d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2e8d8:	6862      	ldr	r2, [r4, #4]
   2e8da:	68db      	ldr	r3, [r3, #12]
   2e8dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2e8e0:	6021      	str	r1, [r4, #0]
   2e8e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   2e8e6:	bd70      	pop	{r4, r5, r6, pc}
   2e8e8:	0003a0bd 	.word	0x0003a0bd
   2e8ec:	0003a147 	.word	0x0003a147

0002e8f0 <__multadd>:
   2e8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e8f4:	f101 0c14 	add.w	ip, r1, #20
   2e8f8:	4607      	mov	r7, r0
   2e8fa:	460c      	mov	r4, r1
   2e8fc:	461e      	mov	r6, r3
   2e8fe:	690d      	ldr	r5, [r1, #16]
   2e900:	2000      	movs	r0, #0
   2e902:	f8dc 3000 	ldr.w	r3, [ip]
   2e906:	3001      	adds	r0, #1
   2e908:	b299      	uxth	r1, r3
   2e90a:	4285      	cmp	r5, r0
   2e90c:	fb02 6101 	mla	r1, r2, r1, r6
   2e910:	ea4f 4613 	mov.w	r6, r3, lsr #16
   2e914:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2e918:	b289      	uxth	r1, r1
   2e91a:	fb02 3306 	mla	r3, r2, r6, r3
   2e91e:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   2e922:	ea4f 4613 	mov.w	r6, r3, lsr #16
   2e926:	f84c 1b04 	str.w	r1, [ip], #4
   2e92a:	dcea      	bgt.n	2e902 <__multadd+0x12>
   2e92c:	b30e      	cbz	r6, 2e972 <__multadd+0x82>
   2e92e:	68a3      	ldr	r3, [r4, #8]
   2e930:	42ab      	cmp	r3, r5
   2e932:	dc19      	bgt.n	2e968 <__multadd+0x78>
   2e934:	6861      	ldr	r1, [r4, #4]
   2e936:	4638      	mov	r0, r7
   2e938:	3101      	adds	r1, #1
   2e93a:	f7ff ff77 	bl	2e82c <_Balloc>
   2e93e:	4680      	mov	r8, r0
   2e940:	b928      	cbnz	r0, 2e94e <__multadd+0x5e>
   2e942:	4602      	mov	r2, r0
   2e944:	4b0c      	ldr	r3, [pc, #48]	; (2e978 <__multadd+0x88>)
   2e946:	21b5      	movs	r1, #181	; 0xb5
   2e948:	480c      	ldr	r0, [pc, #48]	; (2e97c <__multadd+0x8c>)
   2e94a:	f000 fe6d 	bl	2f628 <__assert_func>
   2e94e:	6922      	ldr	r2, [r4, #16]
   2e950:	f104 010c 	add.w	r1, r4, #12
   2e954:	300c      	adds	r0, #12
   2e956:	3202      	adds	r2, #2
   2e958:	0092      	lsls	r2, r2, #2
   2e95a:	f005 f968 	bl	33c2e <memcpy>
   2e95e:	4621      	mov	r1, r4
   2e960:	4644      	mov	r4, r8
   2e962:	4638      	mov	r0, r7
   2e964:	f7ff ffa2 	bl	2e8ac <_Bfree>
   2e968:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   2e96c:	3501      	adds	r5, #1
   2e96e:	615e      	str	r6, [r3, #20]
   2e970:	6125      	str	r5, [r4, #16]
   2e972:	4620      	mov	r0, r4
   2e974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e978:	0003a130 	.word	0x0003a130
   2e97c:	0003a147 	.word	0x0003a147

0002e980 <__i2b>:
   2e980:	b510      	push	{r4, lr}
   2e982:	460c      	mov	r4, r1
   2e984:	2101      	movs	r1, #1
   2e986:	f7ff ff51 	bl	2e82c <_Balloc>
   2e98a:	4602      	mov	r2, r0
   2e98c:	b928      	cbnz	r0, 2e99a <__i2b+0x1a>
   2e98e:	4b05      	ldr	r3, [pc, #20]	; (2e9a4 <__i2b+0x24>)
   2e990:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2e994:	4804      	ldr	r0, [pc, #16]	; (2e9a8 <__i2b+0x28>)
   2e996:	f000 fe47 	bl	2f628 <__assert_func>
   2e99a:	2301      	movs	r3, #1
   2e99c:	6144      	str	r4, [r0, #20]
   2e99e:	6103      	str	r3, [r0, #16]
   2e9a0:	bd10      	pop	{r4, pc}
   2e9a2:	bf00      	nop
   2e9a4:	0003a130 	.word	0x0003a130
   2e9a8:	0003a147 	.word	0x0003a147

0002e9ac <__multiply>:
   2e9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e9b0:	4691      	mov	r9, r2
   2e9b2:	690a      	ldr	r2, [r1, #16]
   2e9b4:	460c      	mov	r4, r1
   2e9b6:	b085      	sub	sp, #20
   2e9b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2e9bc:	429a      	cmp	r2, r3
   2e9be:	bfbe      	ittt	lt
   2e9c0:	460b      	movlt	r3, r1
   2e9c2:	464c      	movlt	r4, r9
   2e9c4:	4699      	movlt	r9, r3
   2e9c6:	6927      	ldr	r7, [r4, #16]
   2e9c8:	68a3      	ldr	r3, [r4, #8]
   2e9ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
   2e9ce:	6861      	ldr	r1, [r4, #4]
   2e9d0:	eb07 060a 	add.w	r6, r7, sl
   2e9d4:	42b3      	cmp	r3, r6
   2e9d6:	bfb8      	it	lt
   2e9d8:	3101      	addlt	r1, #1
   2e9da:	f7ff ff27 	bl	2e82c <_Balloc>
   2e9de:	b930      	cbnz	r0, 2e9ee <__multiply+0x42>
   2e9e0:	4602      	mov	r2, r0
   2e9e2:	4b44      	ldr	r3, [pc, #272]	; (2eaf4 <__multiply+0x148>)
   2e9e4:	f240 115d 	movw	r1, #349	; 0x15d
   2e9e8:	4843      	ldr	r0, [pc, #268]	; (2eaf8 <__multiply+0x14c>)
   2e9ea:	f000 fe1d 	bl	2f628 <__assert_func>
   2e9ee:	f100 0514 	add.w	r5, r0, #20
   2e9f2:	2200      	movs	r2, #0
   2e9f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   2e9f8:	462b      	mov	r3, r5
   2e9fa:	4543      	cmp	r3, r8
   2e9fc:	d321      	bcc.n	2ea42 <__multiply+0x96>
   2e9fe:	f104 0314 	add.w	r3, r4, #20
   2ea02:	f104 0115 	add.w	r1, r4, #21
   2ea06:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2ea0a:	f109 0314 	add.w	r3, r9, #20
   2ea0e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   2ea12:	9202      	str	r2, [sp, #8]
   2ea14:	1b3a      	subs	r2, r7, r4
   2ea16:	3a15      	subs	r2, #21
   2ea18:	f022 0203 	bic.w	r2, r2, #3
   2ea1c:	3204      	adds	r2, #4
   2ea1e:	428f      	cmp	r7, r1
   2ea20:	bf38      	it	cc
   2ea22:	2204      	movcc	r2, #4
   2ea24:	9201      	str	r2, [sp, #4]
   2ea26:	9a02      	ldr	r2, [sp, #8]
   2ea28:	9303      	str	r3, [sp, #12]
   2ea2a:	429a      	cmp	r2, r3
   2ea2c:	d80c      	bhi.n	2ea48 <__multiply+0x9c>
   2ea2e:	2e00      	cmp	r6, #0
   2ea30:	dd03      	ble.n	2ea3a <__multiply+0x8e>
   2ea32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   2ea36:	2b00      	cmp	r3, #0
   2ea38:	d05a      	beq.n	2eaf0 <__multiply+0x144>
   2ea3a:	6106      	str	r6, [r0, #16]
   2ea3c:	b005      	add	sp, #20
   2ea3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ea42:	f843 2b04 	str.w	r2, [r3], #4
   2ea46:	e7d8      	b.n	2e9fa <__multiply+0x4e>
   2ea48:	f8b3 a000 	ldrh.w	sl, [r3]
   2ea4c:	f1ba 0f00 	cmp.w	sl, #0
   2ea50:	d024      	beq.n	2ea9c <__multiply+0xf0>
   2ea52:	f104 0e14 	add.w	lr, r4, #20
   2ea56:	46a9      	mov	r9, r5
   2ea58:	f04f 0c00 	mov.w	ip, #0
   2ea5c:	f85e 2b04 	ldr.w	r2, [lr], #4
   2ea60:	f8d9 1000 	ldr.w	r1, [r9]
   2ea64:	fa1f fb82 	uxth.w	fp, r2
   2ea68:	4577      	cmp	r7, lr
   2ea6a:	b289      	uxth	r1, r1
   2ea6c:	fb0a 110b 	mla	r1, sl, fp, r1
   2ea70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   2ea74:	f8d9 2000 	ldr.w	r2, [r9]
   2ea78:	4461      	add	r1, ip
   2ea7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   2ea7e:	fb0a c20b 	mla	r2, sl, fp, ip
   2ea82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   2ea86:	b289      	uxth	r1, r1
   2ea88:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   2ea8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   2ea90:	f849 1b04 	str.w	r1, [r9], #4
   2ea94:	d8e2      	bhi.n	2ea5c <__multiply+0xb0>
   2ea96:	9a01      	ldr	r2, [sp, #4]
   2ea98:	f845 c002 	str.w	ip, [r5, r2]
   2ea9c:	9a03      	ldr	r2, [sp, #12]
   2ea9e:	3304      	adds	r3, #4
   2eaa0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   2eaa4:	f1b9 0f00 	cmp.w	r9, #0
   2eaa8:	d020      	beq.n	2eaec <__multiply+0x140>
   2eaaa:	6829      	ldr	r1, [r5, #0]
   2eaac:	f104 0c14 	add.w	ip, r4, #20
   2eab0:	46ae      	mov	lr, r5
   2eab2:	f04f 0a00 	mov.w	sl, #0
   2eab6:	f8bc b000 	ldrh.w	fp, [ip]
   2eaba:	b289      	uxth	r1, r1
   2eabc:	f8be 2002 	ldrh.w	r2, [lr, #2]
   2eac0:	fb09 220b 	mla	r2, r9, fp, r2
   2eac4:	4492      	add	sl, r2
   2eac6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   2eaca:	f84e 1b04 	str.w	r1, [lr], #4
   2eace:	f85c 2b04 	ldr.w	r2, [ip], #4
   2ead2:	f8be 1000 	ldrh.w	r1, [lr]
   2ead6:	0c12      	lsrs	r2, r2, #16
   2ead8:	4567      	cmp	r7, ip
   2eada:	fb09 1102 	mla	r1, r9, r2, r1
   2eade:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   2eae2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   2eae6:	d8e6      	bhi.n	2eab6 <__multiply+0x10a>
   2eae8:	9a01      	ldr	r2, [sp, #4]
   2eaea:	50a9      	str	r1, [r5, r2]
   2eaec:	3504      	adds	r5, #4
   2eaee:	e79a      	b.n	2ea26 <__multiply+0x7a>
   2eaf0:	3e01      	subs	r6, #1
   2eaf2:	e79c      	b.n	2ea2e <__multiply+0x82>
   2eaf4:	0003a130 	.word	0x0003a130
   2eaf8:	0003a147 	.word	0x0003a147

0002eafc <__pow5mult>:
   2eafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2eb00:	4615      	mov	r5, r2
   2eb02:	f012 0203 	ands.w	r2, r2, #3
   2eb06:	4606      	mov	r6, r0
   2eb08:	460f      	mov	r7, r1
   2eb0a:	d007      	beq.n	2eb1c <__pow5mult+0x20>
   2eb0c:	3a01      	subs	r2, #1
   2eb0e:	4c25      	ldr	r4, [pc, #148]	; (2eba4 <__pow5mult+0xa8>)
   2eb10:	2300      	movs	r3, #0
   2eb12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2eb16:	f7ff feeb 	bl	2e8f0 <__multadd>
   2eb1a:	4607      	mov	r7, r0
   2eb1c:	10ad      	asrs	r5, r5, #2
   2eb1e:	d03d      	beq.n	2eb9c <__pow5mult+0xa0>
   2eb20:	6a74      	ldr	r4, [r6, #36]	; 0x24
   2eb22:	b97c      	cbnz	r4, 2eb44 <__pow5mult+0x48>
   2eb24:	2010      	movs	r0, #16
   2eb26:	f7fe fbfd 	bl	2d324 <malloc>
   2eb2a:	4602      	mov	r2, r0
   2eb2c:	6270      	str	r0, [r6, #36]	; 0x24
   2eb2e:	b928      	cbnz	r0, 2eb3c <__pow5mult+0x40>
   2eb30:	4b1d      	ldr	r3, [pc, #116]	; (2eba8 <__pow5mult+0xac>)
   2eb32:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   2eb36:	481d      	ldr	r0, [pc, #116]	; (2ebac <__pow5mult+0xb0>)
   2eb38:	f000 fd76 	bl	2f628 <__assert_func>
   2eb3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   2eb40:	6004      	str	r4, [r0, #0]
   2eb42:	60c4      	str	r4, [r0, #12]
   2eb44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   2eb48:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2eb4c:	b94c      	cbnz	r4, 2eb62 <__pow5mult+0x66>
   2eb4e:	f240 2171 	movw	r1, #625	; 0x271
   2eb52:	4630      	mov	r0, r6
   2eb54:	f7ff ff14 	bl	2e980 <__i2b>
   2eb58:	2300      	movs	r3, #0
   2eb5a:	4604      	mov	r4, r0
   2eb5c:	f8c8 0008 	str.w	r0, [r8, #8]
   2eb60:	6003      	str	r3, [r0, #0]
   2eb62:	f04f 0900 	mov.w	r9, #0
   2eb66:	07eb      	lsls	r3, r5, #31
   2eb68:	d50a      	bpl.n	2eb80 <__pow5mult+0x84>
   2eb6a:	4639      	mov	r1, r7
   2eb6c:	4622      	mov	r2, r4
   2eb6e:	4630      	mov	r0, r6
   2eb70:	f7ff ff1c 	bl	2e9ac <__multiply>
   2eb74:	4680      	mov	r8, r0
   2eb76:	4639      	mov	r1, r7
   2eb78:	4630      	mov	r0, r6
   2eb7a:	4647      	mov	r7, r8
   2eb7c:	f7ff fe96 	bl	2e8ac <_Bfree>
   2eb80:	106d      	asrs	r5, r5, #1
   2eb82:	d00b      	beq.n	2eb9c <__pow5mult+0xa0>
   2eb84:	6820      	ldr	r0, [r4, #0]
   2eb86:	b938      	cbnz	r0, 2eb98 <__pow5mult+0x9c>
   2eb88:	4622      	mov	r2, r4
   2eb8a:	4621      	mov	r1, r4
   2eb8c:	4630      	mov	r0, r6
   2eb8e:	f7ff ff0d 	bl	2e9ac <__multiply>
   2eb92:	6020      	str	r0, [r4, #0]
   2eb94:	f8c0 9000 	str.w	r9, [r0]
   2eb98:	4604      	mov	r4, r0
   2eb9a:	e7e4      	b.n	2eb66 <__pow5mult+0x6a>
   2eb9c:	4638      	mov	r0, r7
   2eb9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2eba2:	bf00      	nop
   2eba4:	000353f8 	.word	0x000353f8
   2eba8:	0003a0bd 	.word	0x0003a0bd
   2ebac:	0003a147 	.word	0x0003a147

0002ebb0 <__lshift>:
   2ebb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ebb4:	460c      	mov	r4, r1
   2ebb6:	4607      	mov	r7, r0
   2ebb8:	4691      	mov	r9, r2
   2ebba:	ea4f 1a62 	mov.w	sl, r2, asr #5
   2ebbe:	6923      	ldr	r3, [r4, #16]
   2ebc0:	6849      	ldr	r1, [r1, #4]
   2ebc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
   2ebc6:	68a3      	ldr	r3, [r4, #8]
   2ebc8:	f108 0601 	add.w	r6, r8, #1
   2ebcc:	42b3      	cmp	r3, r6
   2ebce:	db0b      	blt.n	2ebe8 <__lshift+0x38>
   2ebd0:	4638      	mov	r0, r7
   2ebd2:	f7ff fe2b 	bl	2e82c <_Balloc>
   2ebd6:	4605      	mov	r5, r0
   2ebd8:	b948      	cbnz	r0, 2ebee <__lshift+0x3e>
   2ebda:	4602      	mov	r2, r0
   2ebdc:	4b2a      	ldr	r3, [pc, #168]	; (2ec88 <__lshift+0xd8>)
   2ebde:	f240 11d9 	movw	r1, #473	; 0x1d9
   2ebe2:	482a      	ldr	r0, [pc, #168]	; (2ec8c <__lshift+0xdc>)
   2ebe4:	f000 fd20 	bl	2f628 <__assert_func>
   2ebe8:	3101      	adds	r1, #1
   2ebea:	005b      	lsls	r3, r3, #1
   2ebec:	e7ee      	b.n	2ebcc <__lshift+0x1c>
   2ebee:	2300      	movs	r3, #0
   2ebf0:	f100 0114 	add.w	r1, r0, #20
   2ebf4:	f100 0210 	add.w	r2, r0, #16
   2ebf8:	4618      	mov	r0, r3
   2ebfa:	4553      	cmp	r3, sl
   2ebfc:	db37      	blt.n	2ec6e <__lshift+0xbe>
   2ebfe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   2ec02:	f104 0314 	add.w	r3, r4, #20
   2ec06:	6920      	ldr	r0, [r4, #16]
   2ec08:	f019 091f 	ands.w	r9, r9, #31
   2ec0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   2ec10:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2ec14:	d02f      	beq.n	2ec76 <__lshift+0xc6>
   2ec16:	f1c9 0e20 	rsb	lr, r9, #32
   2ec1a:	468a      	mov	sl, r1
   2ec1c:	f04f 0c00 	mov.w	ip, #0
   2ec20:	681a      	ldr	r2, [r3, #0]
   2ec22:	fa02 f209 	lsl.w	r2, r2, r9
   2ec26:	ea42 020c 	orr.w	r2, r2, ip
   2ec2a:	f84a 2b04 	str.w	r2, [sl], #4
   2ec2e:	f853 2b04 	ldr.w	r2, [r3], #4
   2ec32:	4298      	cmp	r0, r3
   2ec34:	fa22 fc0e 	lsr.w	ip, r2, lr
   2ec38:	d8f2      	bhi.n	2ec20 <__lshift+0x70>
   2ec3a:	1b03      	subs	r3, r0, r4
   2ec3c:	f104 0215 	add.w	r2, r4, #21
   2ec40:	3b15      	subs	r3, #21
   2ec42:	f023 0303 	bic.w	r3, r3, #3
   2ec46:	3304      	adds	r3, #4
   2ec48:	4290      	cmp	r0, r2
   2ec4a:	bf38      	it	cc
   2ec4c:	2304      	movcc	r3, #4
   2ec4e:	f841 c003 	str.w	ip, [r1, r3]
   2ec52:	f1bc 0f00 	cmp.w	ip, #0
   2ec56:	d001      	beq.n	2ec5c <__lshift+0xac>
   2ec58:	f108 0602 	add.w	r6, r8, #2
   2ec5c:	3e01      	subs	r6, #1
   2ec5e:	4638      	mov	r0, r7
   2ec60:	4621      	mov	r1, r4
   2ec62:	612e      	str	r6, [r5, #16]
   2ec64:	f7ff fe22 	bl	2e8ac <_Bfree>
   2ec68:	4628      	mov	r0, r5
   2ec6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ec6e:	3301      	adds	r3, #1
   2ec70:	f842 0f04 	str.w	r0, [r2, #4]!
   2ec74:	e7c1      	b.n	2ebfa <__lshift+0x4a>
   2ec76:	3904      	subs	r1, #4
   2ec78:	f853 2b04 	ldr.w	r2, [r3], #4
   2ec7c:	4298      	cmp	r0, r3
   2ec7e:	f841 2f04 	str.w	r2, [r1, #4]!
   2ec82:	d8f9      	bhi.n	2ec78 <__lshift+0xc8>
   2ec84:	e7ea      	b.n	2ec5c <__lshift+0xac>
   2ec86:	bf00      	nop
   2ec88:	0003a130 	.word	0x0003a130
   2ec8c:	0003a147 	.word	0x0003a147

0002ec90 <__mdiff>:
   2ec90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ec94:	460c      	mov	r4, r1
   2ec96:	4606      	mov	r6, r0
   2ec98:	4611      	mov	r1, r2
   2ec9a:	4692      	mov	sl, r2
   2ec9c:	4620      	mov	r0, r4
   2ec9e:	f005 fb6c 	bl	3437a <__mcmp>
   2eca2:	1e05      	subs	r5, r0, #0
   2eca4:	d110      	bne.n	2ecc8 <__mdiff+0x38>
   2eca6:	4629      	mov	r1, r5
   2eca8:	4630      	mov	r0, r6
   2ecaa:	f7ff fdbf 	bl	2e82c <_Balloc>
   2ecae:	b930      	cbnz	r0, 2ecbe <__mdiff+0x2e>
   2ecb0:	4b3d      	ldr	r3, [pc, #244]	; (2eda8 <__mdiff+0x118>)
   2ecb2:	4602      	mov	r2, r0
   2ecb4:	f240 2132 	movw	r1, #562	; 0x232
   2ecb8:	483c      	ldr	r0, [pc, #240]	; (2edac <__mdiff+0x11c>)
   2ecba:	f000 fcb5 	bl	2f628 <__assert_func>
   2ecbe:	2301      	movs	r3, #1
   2ecc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
   2ecc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ecc8:	bfa4      	itt	ge
   2ecca:	4653      	movge	r3, sl
   2eccc:	46a2      	movge	sl, r4
   2ecce:	4630      	mov	r0, r6
   2ecd0:	bfa8      	it	ge
   2ecd2:	2500      	movge	r5, #0
   2ecd4:	f8da 1004 	ldr.w	r1, [sl, #4]
   2ecd8:	bfac      	ite	ge
   2ecda:	461c      	movge	r4, r3
   2ecdc:	2501      	movlt	r5, #1
   2ecde:	f7ff fda5 	bl	2e82c <_Balloc>
   2ece2:	b920      	cbnz	r0, 2ecee <__mdiff+0x5e>
   2ece4:	4b30      	ldr	r3, [pc, #192]	; (2eda8 <__mdiff+0x118>)
   2ece6:	4602      	mov	r2, r0
   2ece8:	f44f 7110 	mov.w	r1, #576	; 0x240
   2ecec:	e7e4      	b.n	2ecb8 <__mdiff+0x28>
   2ecee:	f8da 7010 	ldr.w	r7, [sl, #16]
   2ecf2:	f104 0914 	add.w	r9, r4, #20
   2ecf6:	6926      	ldr	r6, [r4, #16]
   2ecf8:	f100 0814 	add.w	r8, r0, #20
   2ecfc:	60c5      	str	r5, [r0, #12]
   2ecfe:	f10a 0514 	add.w	r5, sl, #20
   2ed02:	f10a 0210 	add.w	r2, sl, #16
   2ed06:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   2ed0a:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   2ed0e:	46c2      	mov	sl, r8
   2ed10:	f04f 0c00 	mov.w	ip, #0
   2ed14:	f852 bf04 	ldr.w	fp, [r2, #4]!
   2ed18:	f859 3b04 	ldr.w	r3, [r9], #4
   2ed1c:	fa1f f18b 	uxth.w	r1, fp
   2ed20:	454e      	cmp	r6, r9
   2ed22:	448c      	add	ip, r1
   2ed24:	b299      	uxth	r1, r3
   2ed26:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2ed2a:	ebac 0101 	sub.w	r1, ip, r1
   2ed2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   2ed32:	eb03 4321 	add.w	r3, r3, r1, asr #16
   2ed36:	b289      	uxth	r1, r1
   2ed38:	ea4f 4c23 	mov.w	ip, r3, asr #16
   2ed3c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   2ed40:	f84a 3b04 	str.w	r3, [sl], #4
   2ed44:	d8e6      	bhi.n	2ed14 <__mdiff+0x84>
   2ed46:	1b33      	subs	r3, r6, r4
   2ed48:	3415      	adds	r4, #21
   2ed4a:	3b15      	subs	r3, #21
   2ed4c:	f023 0303 	bic.w	r3, r3, #3
   2ed50:	3304      	adds	r3, #4
   2ed52:	42a6      	cmp	r6, r4
   2ed54:	bf38      	it	cc
   2ed56:	2304      	movcc	r3, #4
   2ed58:	441d      	add	r5, r3
   2ed5a:	4443      	add	r3, r8
   2ed5c:	462c      	mov	r4, r5
   2ed5e:	461e      	mov	r6, r3
   2ed60:	4574      	cmp	r4, lr
   2ed62:	d30e      	bcc.n	2ed82 <__mdiff+0xf2>
   2ed64:	f10e 0203 	add.w	r2, lr, #3
   2ed68:	1b52      	subs	r2, r2, r5
   2ed6a:	3d03      	subs	r5, #3
   2ed6c:	f022 0203 	bic.w	r2, r2, #3
   2ed70:	45ae      	cmp	lr, r5
   2ed72:	bf38      	it	cc
   2ed74:	2200      	movcc	r2, #0
   2ed76:	441a      	add	r2, r3
   2ed78:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   2ed7c:	b18b      	cbz	r3, 2eda2 <__mdiff+0x112>
   2ed7e:	6107      	str	r7, [r0, #16]
   2ed80:	e7a0      	b.n	2ecc4 <__mdiff+0x34>
   2ed82:	f854 8b04 	ldr.w	r8, [r4], #4
   2ed86:	fa1f f288 	uxth.w	r2, r8
   2ed8a:	4462      	add	r2, ip
   2ed8c:	1411      	asrs	r1, r2, #16
   2ed8e:	b292      	uxth	r2, r2
   2ed90:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   2ed94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   2ed98:	ea4f 4c21 	mov.w	ip, r1, asr #16
   2ed9c:	f846 2b04 	str.w	r2, [r6], #4
   2eda0:	e7de      	b.n	2ed60 <__mdiff+0xd0>
   2eda2:	3f01      	subs	r7, #1
   2eda4:	e7e8      	b.n	2ed78 <__mdiff+0xe8>
   2eda6:	bf00      	nop
   2eda8:	0003a130 	.word	0x0003a130
   2edac:	0003a147 	.word	0x0003a147

0002edb0 <__d2b>:
   2edb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2edb4:	4689      	mov	r9, r1
   2edb6:	2101      	movs	r1, #1
   2edb8:	4690      	mov	r8, r2
   2edba:	ec57 6b10 	vmov	r6, r7, d0
   2edbe:	f7ff fd35 	bl	2e82c <_Balloc>
   2edc2:	4604      	mov	r4, r0
   2edc4:	b930      	cbnz	r0, 2edd4 <__d2b+0x24>
   2edc6:	4602      	mov	r2, r0
   2edc8:	4b25      	ldr	r3, [pc, #148]	; (2ee60 <__d2b+0xb0>)
   2edca:	f240 310a 	movw	r1, #778	; 0x30a
   2edce:	4825      	ldr	r0, [pc, #148]	; (2ee64 <__d2b+0xb4>)
   2edd0:	f000 fc2a 	bl	2f628 <__assert_func>
   2edd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   2edd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   2eddc:	bb35      	cbnz	r5, 2ee2c <__d2b+0x7c>
   2edde:	2e00      	cmp	r6, #0
   2ede0:	9301      	str	r3, [sp, #4]
   2ede2:	d028      	beq.n	2ee36 <__d2b+0x86>
   2ede4:	4668      	mov	r0, sp
   2ede6:	9600      	str	r6, [sp, #0]
   2ede8:	f005 fa98 	bl	3431c <__lo0bits>
   2edec:	9900      	ldr	r1, [sp, #0]
   2edee:	b300      	cbz	r0, 2ee32 <__d2b+0x82>
   2edf0:	9a01      	ldr	r2, [sp, #4]
   2edf2:	f1c0 0320 	rsb	r3, r0, #32
   2edf6:	fa02 f303 	lsl.w	r3, r2, r3
   2edfa:	40c2      	lsrs	r2, r0
   2edfc:	430b      	orrs	r3, r1
   2edfe:	9201      	str	r2, [sp, #4]
   2ee00:	6163      	str	r3, [r4, #20]
   2ee02:	9b01      	ldr	r3, [sp, #4]
   2ee04:	2b00      	cmp	r3, #0
   2ee06:	61a3      	str	r3, [r4, #24]
   2ee08:	bf14      	ite	ne
   2ee0a:	2202      	movne	r2, #2
   2ee0c:	2201      	moveq	r2, #1
   2ee0e:	6122      	str	r2, [r4, #16]
   2ee10:	b1d5      	cbz	r5, 2ee48 <__d2b+0x98>
   2ee12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   2ee16:	4405      	add	r5, r0
   2ee18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2ee1c:	f8c9 5000 	str.w	r5, [r9]
   2ee20:	f8c8 0000 	str.w	r0, [r8]
   2ee24:	4620      	mov	r0, r4
   2ee26:	b003      	add	sp, #12
   2ee28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2ee2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2ee30:	e7d5      	b.n	2edde <__d2b+0x2e>
   2ee32:	6161      	str	r1, [r4, #20]
   2ee34:	e7e5      	b.n	2ee02 <__d2b+0x52>
   2ee36:	a801      	add	r0, sp, #4
   2ee38:	f005 fa70 	bl	3431c <__lo0bits>
   2ee3c:	9b01      	ldr	r3, [sp, #4]
   2ee3e:	2201      	movs	r2, #1
   2ee40:	3020      	adds	r0, #32
   2ee42:	6163      	str	r3, [r4, #20]
   2ee44:	6122      	str	r2, [r4, #16]
   2ee46:	e7e3      	b.n	2ee10 <__d2b+0x60>
   2ee48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2ee4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2ee50:	f8c9 0000 	str.w	r0, [r9]
   2ee54:	6918      	ldr	r0, [r3, #16]
   2ee56:	f005 fa41 	bl	342dc <__hi0bits>
   2ee5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   2ee5e:	e7df      	b.n	2ee20 <__d2b+0x70>
   2ee60:	0003a130 	.word	0x0003a130
   2ee64:	0003a147 	.word	0x0003a147

0002ee68 <_svfiprintf_r>:
   2ee68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ee6c:	4698      	mov	r8, r3
   2ee6e:	898b      	ldrh	r3, [r1, #12]
   2ee70:	b09d      	sub	sp, #116	; 0x74
   2ee72:	4607      	mov	r7, r0
   2ee74:	061b      	lsls	r3, r3, #24
   2ee76:	460d      	mov	r5, r1
   2ee78:	4614      	mov	r4, r2
   2ee7a:	d50e      	bpl.n	2ee9a <_svfiprintf_r+0x32>
   2ee7c:	690b      	ldr	r3, [r1, #16]
   2ee7e:	b963      	cbnz	r3, 2ee9a <_svfiprintf_r+0x32>
   2ee80:	2140      	movs	r1, #64	; 0x40
   2ee82:	f7fe faab 	bl	2d3dc <_malloc_r>
   2ee86:	6028      	str	r0, [r5, #0]
   2ee88:	6128      	str	r0, [r5, #16]
   2ee8a:	b920      	cbnz	r0, 2ee96 <_svfiprintf_r+0x2e>
   2ee8c:	230c      	movs	r3, #12
   2ee8e:	603b      	str	r3, [r7, #0]
   2ee90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ee94:	e0d1      	b.n	2f03a <_svfiprintf_r+0x1d2>
   2ee96:	2340      	movs	r3, #64	; 0x40
   2ee98:	616b      	str	r3, [r5, #20]
   2ee9a:	2300      	movs	r3, #0
   2ee9c:	f8cd 800c 	str.w	r8, [sp, #12]
   2eea0:	f04f 0901 	mov.w	r9, #1
   2eea4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 2f054 <_svfiprintf_r+0x1ec>
   2eea8:	9309      	str	r3, [sp, #36]	; 0x24
   2eeaa:	2320      	movs	r3, #32
   2eeac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2eeb0:	2330      	movs	r3, #48	; 0x30
   2eeb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2eeb6:	4623      	mov	r3, r4
   2eeb8:	469a      	mov	sl, r3
   2eeba:	f813 2b01 	ldrb.w	r2, [r3], #1
   2eebe:	b10a      	cbz	r2, 2eec4 <_svfiprintf_r+0x5c>
   2eec0:	2a25      	cmp	r2, #37	; 0x25
   2eec2:	d1f9      	bne.n	2eeb8 <_svfiprintf_r+0x50>
   2eec4:	ebba 0b04 	subs.w	fp, sl, r4
   2eec8:	d00b      	beq.n	2eee2 <_svfiprintf_r+0x7a>
   2eeca:	465b      	mov	r3, fp
   2eecc:	4622      	mov	r2, r4
   2eece:	4629      	mov	r1, r5
   2eed0:	4638      	mov	r0, r7
   2eed2:	f005 fa94 	bl	343fe <__ssputs_r>
   2eed6:	3001      	adds	r0, #1
   2eed8:	f000 80aa 	beq.w	2f030 <_svfiprintf_r+0x1c8>
   2eedc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2eede:	445a      	add	r2, fp
   2eee0:	9209      	str	r2, [sp, #36]	; 0x24
   2eee2:	f89a 3000 	ldrb.w	r3, [sl]
   2eee6:	2b00      	cmp	r3, #0
   2eee8:	f000 80a2 	beq.w	2f030 <_svfiprintf_r+0x1c8>
   2eeec:	2300      	movs	r3, #0
   2eeee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2eef2:	f10a 0a01 	add.w	sl, sl, #1
   2eef6:	9304      	str	r3, [sp, #16]
   2eef8:	9307      	str	r3, [sp, #28]
   2eefa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2eefe:	931a      	str	r3, [sp, #104]	; 0x68
   2ef00:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2ef04:	4654      	mov	r4, sl
   2ef06:	2205      	movs	r2, #5
   2ef08:	4852      	ldr	r0, [pc, #328]	; (2f054 <_svfiprintf_r+0x1ec>)
   2ef0a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2ef0e:	f004 fe70 	bl	33bf2 <memchr>
   2ef12:	9a04      	ldr	r2, [sp, #16]
   2ef14:	b9d8      	cbnz	r0, 2ef4e <_svfiprintf_r+0xe6>
   2ef16:	06d0      	lsls	r0, r2, #27
   2ef18:	bf44      	itt	mi
   2ef1a:	2320      	movmi	r3, #32
   2ef1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2ef20:	0711      	lsls	r1, r2, #28
   2ef22:	bf44      	itt	mi
   2ef24:	232b      	movmi	r3, #43	; 0x2b
   2ef26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2ef2a:	f89a 3000 	ldrb.w	r3, [sl]
   2ef2e:	2b2a      	cmp	r3, #42	; 0x2a
   2ef30:	d015      	beq.n	2ef5e <_svfiprintf_r+0xf6>
   2ef32:	9a07      	ldr	r2, [sp, #28]
   2ef34:	4654      	mov	r4, sl
   2ef36:	2000      	movs	r0, #0
   2ef38:	f04f 0c0a 	mov.w	ip, #10
   2ef3c:	4621      	mov	r1, r4
   2ef3e:	f811 3b01 	ldrb.w	r3, [r1], #1
   2ef42:	3b30      	subs	r3, #48	; 0x30
   2ef44:	2b09      	cmp	r3, #9
   2ef46:	d94e      	bls.n	2efe6 <_svfiprintf_r+0x17e>
   2ef48:	b1b0      	cbz	r0, 2ef78 <_svfiprintf_r+0x110>
   2ef4a:	9207      	str	r2, [sp, #28]
   2ef4c:	e014      	b.n	2ef78 <_svfiprintf_r+0x110>
   2ef4e:	eba0 0308 	sub.w	r3, r0, r8
   2ef52:	46a2      	mov	sl, r4
   2ef54:	fa09 f303 	lsl.w	r3, r9, r3
   2ef58:	4313      	orrs	r3, r2
   2ef5a:	9304      	str	r3, [sp, #16]
   2ef5c:	e7d2      	b.n	2ef04 <_svfiprintf_r+0x9c>
   2ef5e:	9b03      	ldr	r3, [sp, #12]
   2ef60:	1d19      	adds	r1, r3, #4
   2ef62:	681b      	ldr	r3, [r3, #0]
   2ef64:	2b00      	cmp	r3, #0
   2ef66:	9103      	str	r1, [sp, #12]
   2ef68:	bfbb      	ittet	lt
   2ef6a:	425b      	neglt	r3, r3
   2ef6c:	f042 0202 	orrlt.w	r2, r2, #2
   2ef70:	9307      	strge	r3, [sp, #28]
   2ef72:	9307      	strlt	r3, [sp, #28]
   2ef74:	bfb8      	it	lt
   2ef76:	9204      	strlt	r2, [sp, #16]
   2ef78:	7823      	ldrb	r3, [r4, #0]
   2ef7a:	2b2e      	cmp	r3, #46	; 0x2e
   2ef7c:	d10c      	bne.n	2ef98 <_svfiprintf_r+0x130>
   2ef7e:	7863      	ldrb	r3, [r4, #1]
   2ef80:	2b2a      	cmp	r3, #42	; 0x2a
   2ef82:	d135      	bne.n	2eff0 <_svfiprintf_r+0x188>
   2ef84:	9b03      	ldr	r3, [sp, #12]
   2ef86:	3402      	adds	r4, #2
   2ef88:	1d1a      	adds	r2, r3, #4
   2ef8a:	681b      	ldr	r3, [r3, #0]
   2ef8c:	2b00      	cmp	r3, #0
   2ef8e:	9203      	str	r2, [sp, #12]
   2ef90:	bfb8      	it	lt
   2ef92:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2ef96:	9305      	str	r3, [sp, #20]
   2ef98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2f064 <_svfiprintf_r+0x1fc>
   2ef9c:	2203      	movs	r2, #3
   2ef9e:	7821      	ldrb	r1, [r4, #0]
   2efa0:	4650      	mov	r0, sl
   2efa2:	f004 fe26 	bl	33bf2 <memchr>
   2efa6:	b140      	cbz	r0, 2efba <_svfiprintf_r+0x152>
   2efa8:	2340      	movs	r3, #64	; 0x40
   2efaa:	eba0 000a 	sub.w	r0, r0, sl
   2efae:	3401      	adds	r4, #1
   2efb0:	fa03 f000 	lsl.w	r0, r3, r0
   2efb4:	9b04      	ldr	r3, [sp, #16]
   2efb6:	4303      	orrs	r3, r0
   2efb8:	9304      	str	r3, [sp, #16]
   2efba:	f814 1b01 	ldrb.w	r1, [r4], #1
   2efbe:	2206      	movs	r2, #6
   2efc0:	4825      	ldr	r0, [pc, #148]	; (2f058 <_svfiprintf_r+0x1f0>)
   2efc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2efc6:	f004 fe14 	bl	33bf2 <memchr>
   2efca:	2800      	cmp	r0, #0
   2efcc:	d038      	beq.n	2f040 <_svfiprintf_r+0x1d8>
   2efce:	4b23      	ldr	r3, [pc, #140]	; (2f05c <_svfiprintf_r+0x1f4>)
   2efd0:	bb1b      	cbnz	r3, 2f01a <_svfiprintf_r+0x1b2>
   2efd2:	9b03      	ldr	r3, [sp, #12]
   2efd4:	3307      	adds	r3, #7
   2efd6:	f023 0307 	bic.w	r3, r3, #7
   2efda:	3308      	adds	r3, #8
   2efdc:	9303      	str	r3, [sp, #12]
   2efde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2efe0:	4433      	add	r3, r6
   2efe2:	9309      	str	r3, [sp, #36]	; 0x24
   2efe4:	e767      	b.n	2eeb6 <_svfiprintf_r+0x4e>
   2efe6:	fb0c 3202 	mla	r2, ip, r2, r3
   2efea:	460c      	mov	r4, r1
   2efec:	2001      	movs	r0, #1
   2efee:	e7a5      	b.n	2ef3c <_svfiprintf_r+0xd4>
   2eff0:	2300      	movs	r3, #0
   2eff2:	3401      	adds	r4, #1
   2eff4:	f04f 0c0a 	mov.w	ip, #10
   2eff8:	4619      	mov	r1, r3
   2effa:	9305      	str	r3, [sp, #20]
   2effc:	4620      	mov	r0, r4
   2effe:	f810 2b01 	ldrb.w	r2, [r0], #1
   2f002:	3a30      	subs	r2, #48	; 0x30
   2f004:	2a09      	cmp	r2, #9
   2f006:	d903      	bls.n	2f010 <_svfiprintf_r+0x1a8>
   2f008:	2b00      	cmp	r3, #0
   2f00a:	d0c5      	beq.n	2ef98 <_svfiprintf_r+0x130>
   2f00c:	9105      	str	r1, [sp, #20]
   2f00e:	e7c3      	b.n	2ef98 <_svfiprintf_r+0x130>
   2f010:	fb0c 2101 	mla	r1, ip, r1, r2
   2f014:	4604      	mov	r4, r0
   2f016:	2301      	movs	r3, #1
   2f018:	e7f0      	b.n	2effc <_svfiprintf_r+0x194>
   2f01a:	ab03      	add	r3, sp, #12
   2f01c:	462a      	mov	r2, r5
   2f01e:	a904      	add	r1, sp, #16
   2f020:	4638      	mov	r0, r7
   2f022:	9300      	str	r3, [sp, #0]
   2f024:	4b0e      	ldr	r3, [pc, #56]	; (2f060 <_svfiprintf_r+0x1f8>)
   2f026:	f7fe fb63 	bl	2d6f0 <_printf_float>
   2f02a:	1c42      	adds	r2, r0, #1
   2f02c:	4606      	mov	r6, r0
   2f02e:	d1d6      	bne.n	2efde <_svfiprintf_r+0x176>
   2f030:	89ab      	ldrh	r3, [r5, #12]
   2f032:	065b      	lsls	r3, r3, #25
   2f034:	f53f af2c 	bmi.w	2ee90 <_svfiprintf_r+0x28>
   2f038:	9809      	ldr	r0, [sp, #36]	; 0x24
   2f03a:	b01d      	add	sp, #116	; 0x74
   2f03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f040:	ab03      	add	r3, sp, #12
   2f042:	462a      	mov	r2, r5
   2f044:	a904      	add	r1, sp, #16
   2f046:	4638      	mov	r0, r7
   2f048:	9300      	str	r3, [sp, #0]
   2f04a:	4b05      	ldr	r3, [pc, #20]	; (2f060 <_svfiprintf_r+0x1f8>)
   2f04c:	f7fe fd86 	bl	2db5c <_printf_i>
   2f050:	e7eb      	b.n	2f02a <_svfiprintf_r+0x1c2>
   2f052:	bf00      	nop
   2f054:	0003a071 	.word	0x0003a071
   2f058:	0003a07b 	.word	0x0003a07b
   2f05c:	0002d6f1 	.word	0x0002d6f1
   2f060:	000343ff 	.word	0x000343ff
   2f064:	0003a077 	.word	0x0003a077

0002f068 <__ssvfiscanf_r>:
   2f068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f06c:	460c      	mov	r4, r1
   2f06e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   2f072:	2100      	movs	r1, #0
   2f074:	4606      	mov	r6, r0
   2f076:	f10d 0804 	add.w	r8, sp, #4
   2f07a:	4fa8      	ldr	r7, [pc, #672]	; (2f31c <__ssvfiscanf_r+0x2b4>)
   2f07c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 2f328 <__ssvfiscanf_r+0x2c0>
   2f080:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   2f084:	9300      	str	r3, [sp, #0]
   2f086:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2f08a:	49a5      	ldr	r1, [pc, #660]	; (2f320 <__ssvfiscanf_r+0x2b8>)
   2f08c:	91a0      	str	r1, [sp, #640]	; 0x280
   2f08e:	49a5      	ldr	r1, [pc, #660]	; (2f324 <__ssvfiscanf_r+0x2bc>)
   2f090:	91a1      	str	r1, [sp, #644]	; 0x284
   2f092:	7813      	ldrb	r3, [r2, #0]
   2f094:	2b00      	cmp	r3, #0
   2f096:	f000 815e 	beq.w	2f356 <__ssvfiscanf_r+0x2ee>
   2f09a:	5dd9      	ldrb	r1, [r3, r7]
   2f09c:	1c55      	adds	r5, r2, #1
   2f09e:	f011 0108 	ands.w	r1, r1, #8
   2f0a2:	d019      	beq.n	2f0d8 <__ssvfiscanf_r+0x70>
   2f0a4:	6863      	ldr	r3, [r4, #4]
   2f0a6:	2b00      	cmp	r3, #0
   2f0a8:	dd0f      	ble.n	2f0ca <__ssvfiscanf_r+0x62>
   2f0aa:	6823      	ldr	r3, [r4, #0]
   2f0ac:	781a      	ldrb	r2, [r3, #0]
   2f0ae:	5cba      	ldrb	r2, [r7, r2]
   2f0b0:	0712      	lsls	r2, r2, #28
   2f0b2:	d401      	bmi.n	2f0b8 <__ssvfiscanf_r+0x50>
   2f0b4:	462a      	mov	r2, r5
   2f0b6:	e7ec      	b.n	2f092 <__ssvfiscanf_r+0x2a>
   2f0b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2f0ba:	3301      	adds	r3, #1
   2f0bc:	3201      	adds	r2, #1
   2f0be:	6023      	str	r3, [r4, #0]
   2f0c0:	9245      	str	r2, [sp, #276]	; 0x114
   2f0c2:	6862      	ldr	r2, [r4, #4]
   2f0c4:	3a01      	subs	r2, #1
   2f0c6:	6062      	str	r2, [r4, #4]
   2f0c8:	e7ec      	b.n	2f0a4 <__ssvfiscanf_r+0x3c>
   2f0ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2f0cc:	4621      	mov	r1, r4
   2f0ce:	4630      	mov	r0, r6
   2f0d0:	4798      	blx	r3
   2f0d2:	2800      	cmp	r0, #0
   2f0d4:	d0e9      	beq.n	2f0aa <__ssvfiscanf_r+0x42>
   2f0d6:	e7ed      	b.n	2f0b4 <__ssvfiscanf_r+0x4c>
   2f0d8:	2b25      	cmp	r3, #37	; 0x25
   2f0da:	d012      	beq.n	2f102 <__ssvfiscanf_r+0x9a>
   2f0dc:	469a      	mov	sl, r3
   2f0de:	6863      	ldr	r3, [r4, #4]
   2f0e0:	2b00      	cmp	r3, #0
   2f0e2:	f340 8094 	ble.w	2f20e <__ssvfiscanf_r+0x1a6>
   2f0e6:	6822      	ldr	r2, [r4, #0]
   2f0e8:	7813      	ldrb	r3, [r2, #0]
   2f0ea:	4553      	cmp	r3, sl
   2f0ec:	f040 8133 	bne.w	2f356 <__ssvfiscanf_r+0x2ee>
   2f0f0:	6863      	ldr	r3, [r4, #4]
   2f0f2:	3201      	adds	r2, #1
   2f0f4:	3b01      	subs	r3, #1
   2f0f6:	6022      	str	r2, [r4, #0]
   2f0f8:	6063      	str	r3, [r4, #4]
   2f0fa:	9b45      	ldr	r3, [sp, #276]	; 0x114
   2f0fc:	3301      	adds	r3, #1
   2f0fe:	9345      	str	r3, [sp, #276]	; 0x114
   2f100:	e7d8      	b.n	2f0b4 <__ssvfiscanf_r+0x4c>
   2f102:	9141      	str	r1, [sp, #260]	; 0x104
   2f104:	9143      	str	r1, [sp, #268]	; 0x10c
   2f106:	7853      	ldrb	r3, [r2, #1]
   2f108:	2b2a      	cmp	r3, #42	; 0x2a
   2f10a:	bf04      	itt	eq
   2f10c:	2310      	moveq	r3, #16
   2f10e:	1c95      	addeq	r5, r2, #2
   2f110:	f04f 020a 	mov.w	r2, #10
   2f114:	bf08      	it	eq
   2f116:	9341      	streq	r3, [sp, #260]	; 0x104
   2f118:	46aa      	mov	sl, r5
   2f11a:	f81a 1b01 	ldrb.w	r1, [sl], #1
   2f11e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   2f122:	2b09      	cmp	r3, #9
   2f124:	d91d      	bls.n	2f162 <__ssvfiscanf_r+0xfa>
   2f126:	2203      	movs	r2, #3
   2f128:	487f      	ldr	r0, [pc, #508]	; (2f328 <__ssvfiscanf_r+0x2c0>)
   2f12a:	f004 fd62 	bl	33bf2 <memchr>
   2f12e:	b140      	cbz	r0, 2f142 <__ssvfiscanf_r+0xda>
   2f130:	2301      	movs	r3, #1
   2f132:	eba0 0009 	sub.w	r0, r0, r9
   2f136:	4655      	mov	r5, sl
   2f138:	fa03 f000 	lsl.w	r0, r3, r0
   2f13c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2f13e:	4318      	orrs	r0, r3
   2f140:	9041      	str	r0, [sp, #260]	; 0x104
   2f142:	f815 3b01 	ldrb.w	r3, [r5], #1
   2f146:	2b78      	cmp	r3, #120	; 0x78
   2f148:	d806      	bhi.n	2f158 <__ssvfiscanf_r+0xf0>
   2f14a:	2b57      	cmp	r3, #87	; 0x57
   2f14c:	d810      	bhi.n	2f170 <__ssvfiscanf_r+0x108>
   2f14e:	2b25      	cmp	r3, #37	; 0x25
   2f150:	d0c4      	beq.n	2f0dc <__ssvfiscanf_r+0x74>
   2f152:	d857      	bhi.n	2f204 <__ssvfiscanf_r+0x19c>
   2f154:	2b00      	cmp	r3, #0
   2f156:	d065      	beq.n	2f224 <__ssvfiscanf_r+0x1bc>
   2f158:	2303      	movs	r3, #3
   2f15a:	9347      	str	r3, [sp, #284]	; 0x11c
   2f15c:	230a      	movs	r3, #10
   2f15e:	9342      	str	r3, [sp, #264]	; 0x108
   2f160:	e072      	b.n	2f248 <__ssvfiscanf_r+0x1e0>
   2f162:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   2f164:	4655      	mov	r5, sl
   2f166:	fb02 1103 	mla	r1, r2, r3, r1
   2f16a:	3930      	subs	r1, #48	; 0x30
   2f16c:	9143      	str	r1, [sp, #268]	; 0x10c
   2f16e:	e7d3      	b.n	2f118 <__ssvfiscanf_r+0xb0>
   2f170:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   2f174:	2a20      	cmp	r2, #32
   2f176:	d8ef      	bhi.n	2f158 <__ssvfiscanf_r+0xf0>
   2f178:	a101      	add	r1, pc, #4	; (adr r1, 2f180 <__ssvfiscanf_r+0x118>)
   2f17a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   2f17e:	bf00      	nop
   2f180:	0002f233 	.word	0x0002f233
   2f184:	0002f159 	.word	0x0002f159
   2f188:	0002f159 	.word	0x0002f159
   2f18c:	0002f291 	.word	0x0002f291
   2f190:	0002f159 	.word	0x0002f159
   2f194:	0002f159 	.word	0x0002f159
   2f198:	0002f159 	.word	0x0002f159
   2f19c:	0002f159 	.word	0x0002f159
   2f1a0:	0002f159 	.word	0x0002f159
   2f1a4:	0002f159 	.word	0x0002f159
   2f1a8:	0002f159 	.word	0x0002f159
   2f1ac:	0002f2a7 	.word	0x0002f2a7
   2f1b0:	0002f27d 	.word	0x0002f27d
   2f1b4:	0002f20b 	.word	0x0002f20b
   2f1b8:	0002f20b 	.word	0x0002f20b
   2f1bc:	0002f20b 	.word	0x0002f20b
   2f1c0:	0002f159 	.word	0x0002f159
   2f1c4:	0002f281 	.word	0x0002f281
   2f1c8:	0002f159 	.word	0x0002f159
   2f1cc:	0002f159 	.word	0x0002f159
   2f1d0:	0002f159 	.word	0x0002f159
   2f1d4:	0002f159 	.word	0x0002f159
   2f1d8:	0002f2b7 	.word	0x0002f2b7
   2f1dc:	0002f289 	.word	0x0002f289
   2f1e0:	0002f22b 	.word	0x0002f22b
   2f1e4:	0002f159 	.word	0x0002f159
   2f1e8:	0002f159 	.word	0x0002f159
   2f1ec:	0002f2b3 	.word	0x0002f2b3
   2f1f0:	0002f159 	.word	0x0002f159
   2f1f4:	0002f27d 	.word	0x0002f27d
   2f1f8:	0002f159 	.word	0x0002f159
   2f1fc:	0002f159 	.word	0x0002f159
   2f200:	0002f233 	.word	0x0002f233
   2f204:	3b45      	subs	r3, #69	; 0x45
   2f206:	2b02      	cmp	r3, #2
   2f208:	d8a6      	bhi.n	2f158 <__ssvfiscanf_r+0xf0>
   2f20a:	2305      	movs	r3, #5
   2f20c:	e01b      	b.n	2f246 <__ssvfiscanf_r+0x1de>
   2f20e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2f210:	4621      	mov	r1, r4
   2f212:	4630      	mov	r0, r6
   2f214:	4798      	blx	r3
   2f216:	2800      	cmp	r0, #0
   2f218:	f43f af65 	beq.w	2f0e6 <__ssvfiscanf_r+0x7e>
   2f21c:	9844      	ldr	r0, [sp, #272]	; 0x110
   2f21e:	2800      	cmp	r0, #0
   2f220:	f040 808f 	bne.w	2f342 <__ssvfiscanf_r+0x2da>
   2f224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2f228:	e091      	b.n	2f34e <__ssvfiscanf_r+0x2e6>
   2f22a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2f22c:	f042 0220 	orr.w	r2, r2, #32
   2f230:	9241      	str	r2, [sp, #260]	; 0x104
   2f232:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2f234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2f238:	9241      	str	r2, [sp, #260]	; 0x104
   2f23a:	2210      	movs	r2, #16
   2f23c:	2b6f      	cmp	r3, #111	; 0x6f
   2f23e:	9242      	str	r2, [sp, #264]	; 0x108
   2f240:	bf34      	ite	cc
   2f242:	2303      	movcc	r3, #3
   2f244:	2304      	movcs	r3, #4
   2f246:	9347      	str	r3, [sp, #284]	; 0x11c
   2f248:	6863      	ldr	r3, [r4, #4]
   2f24a:	2b00      	cmp	r3, #0
   2f24c:	dd43      	ble.n	2f2d6 <__ssvfiscanf_r+0x26e>
   2f24e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2f250:	0659      	lsls	r1, r3, #25
   2f252:	d404      	bmi.n	2f25e <__ssvfiscanf_r+0x1f6>
   2f254:	6823      	ldr	r3, [r4, #0]
   2f256:	781a      	ldrb	r2, [r3, #0]
   2f258:	5cba      	ldrb	r2, [r7, r2]
   2f25a:	0712      	lsls	r2, r2, #28
   2f25c:	d442      	bmi.n	2f2e4 <__ssvfiscanf_r+0x27c>
   2f25e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   2f260:	2b02      	cmp	r3, #2
   2f262:	dc51      	bgt.n	2f308 <__ssvfiscanf_r+0x2a0>
   2f264:	466b      	mov	r3, sp
   2f266:	4622      	mov	r2, r4
   2f268:	a941      	add	r1, sp, #260	; 0x104
   2f26a:	4630      	mov	r0, r6
   2f26c:	f000 f878 	bl	2f360 <_scanf_chars>
   2f270:	2801      	cmp	r0, #1
   2f272:	d070      	beq.n	2f356 <__ssvfiscanf_r+0x2ee>
   2f274:	2802      	cmp	r0, #2
   2f276:	f47f af1d 	bne.w	2f0b4 <__ssvfiscanf_r+0x4c>
   2f27a:	e7cf      	b.n	2f21c <__ssvfiscanf_r+0x1b4>
   2f27c:	220a      	movs	r2, #10
   2f27e:	e7dd      	b.n	2f23c <__ssvfiscanf_r+0x1d4>
   2f280:	2300      	movs	r3, #0
   2f282:	9342      	str	r3, [sp, #264]	; 0x108
   2f284:	2303      	movs	r3, #3
   2f286:	e7de      	b.n	2f246 <__ssvfiscanf_r+0x1de>
   2f288:	2308      	movs	r3, #8
   2f28a:	9342      	str	r3, [sp, #264]	; 0x108
   2f28c:	2304      	movs	r3, #4
   2f28e:	e7da      	b.n	2f246 <__ssvfiscanf_r+0x1de>
   2f290:	4629      	mov	r1, r5
   2f292:	4640      	mov	r0, r8
   2f294:	f005 f968 	bl	34568 <__sccl>
   2f298:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2f29a:	4605      	mov	r5, r0
   2f29c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2f2a0:	9341      	str	r3, [sp, #260]	; 0x104
   2f2a2:	2301      	movs	r3, #1
   2f2a4:	e7cf      	b.n	2f246 <__ssvfiscanf_r+0x1de>
   2f2a6:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2f2a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2f2ac:	9341      	str	r3, [sp, #260]	; 0x104
   2f2ae:	2300      	movs	r3, #0
   2f2b0:	e7c9      	b.n	2f246 <__ssvfiscanf_r+0x1de>
   2f2b2:	2302      	movs	r3, #2
   2f2b4:	e7c7      	b.n	2f246 <__ssvfiscanf_r+0x1de>
   2f2b6:	9841      	ldr	r0, [sp, #260]	; 0x104
   2f2b8:	06c3      	lsls	r3, r0, #27
   2f2ba:	f53f aefb 	bmi.w	2f0b4 <__ssvfiscanf_r+0x4c>
   2f2be:	9b00      	ldr	r3, [sp, #0]
   2f2c0:	f010 0f01 	tst.w	r0, #1
   2f2c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2f2c6:	f103 0104 	add.w	r1, r3, #4
   2f2ca:	9100      	str	r1, [sp, #0]
   2f2cc:	681b      	ldr	r3, [r3, #0]
   2f2ce:	bf14      	ite	ne
   2f2d0:	801a      	strhne	r2, [r3, #0]
   2f2d2:	601a      	streq	r2, [r3, #0]
   2f2d4:	e6ee      	b.n	2f0b4 <__ssvfiscanf_r+0x4c>
   2f2d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2f2d8:	4621      	mov	r1, r4
   2f2da:	4630      	mov	r0, r6
   2f2dc:	4798      	blx	r3
   2f2de:	2800      	cmp	r0, #0
   2f2e0:	d0b5      	beq.n	2f24e <__ssvfiscanf_r+0x1e6>
   2f2e2:	e79b      	b.n	2f21c <__ssvfiscanf_r+0x1b4>
   2f2e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2f2e6:	3201      	adds	r2, #1
   2f2e8:	9245      	str	r2, [sp, #276]	; 0x114
   2f2ea:	6862      	ldr	r2, [r4, #4]
   2f2ec:	3a01      	subs	r2, #1
   2f2ee:	2a00      	cmp	r2, #0
   2f2f0:	6062      	str	r2, [r4, #4]
   2f2f2:	dd02      	ble.n	2f2fa <__ssvfiscanf_r+0x292>
   2f2f4:	3301      	adds	r3, #1
   2f2f6:	6023      	str	r3, [r4, #0]
   2f2f8:	e7ac      	b.n	2f254 <__ssvfiscanf_r+0x1ec>
   2f2fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2f2fc:	4621      	mov	r1, r4
   2f2fe:	4630      	mov	r0, r6
   2f300:	4798      	blx	r3
   2f302:	2800      	cmp	r0, #0
   2f304:	d0a6      	beq.n	2f254 <__ssvfiscanf_r+0x1ec>
   2f306:	e789      	b.n	2f21c <__ssvfiscanf_r+0x1b4>
   2f308:	2b04      	cmp	r3, #4
   2f30a:	dc0f      	bgt.n	2f32c <__ssvfiscanf_r+0x2c4>
   2f30c:	466b      	mov	r3, sp
   2f30e:	4622      	mov	r2, r4
   2f310:	a941      	add	r1, sp, #260	; 0x104
   2f312:	4630      	mov	r0, r6
   2f314:	f000 f87e 	bl	2f414 <_scanf_i>
   2f318:	e7aa      	b.n	2f270 <__ssvfiscanf_r+0x208>
   2f31a:	bf00      	nop
   2f31c:	00039f71 	.word	0x00039f71
   2f320:	000344b5 	.word	0x000344b5
   2f324:	0003452f 	.word	0x0003452f
   2f328:	0003a077 	.word	0x0003a077
   2f32c:	4b0b      	ldr	r3, [pc, #44]	; (2f35c <__ssvfiscanf_r+0x2f4>)
   2f32e:	2b00      	cmp	r3, #0
   2f330:	f43f aec0 	beq.w	2f0b4 <__ssvfiscanf_r+0x4c>
   2f334:	466b      	mov	r3, sp
   2f336:	4622      	mov	r2, r4
   2f338:	a941      	add	r1, sp, #260	; 0x104
   2f33a:	4630      	mov	r0, r6
   2f33c:	e000      	b.n	2f340 <__ssvfiscanf_r+0x2d8>
   2f33e:	bf00      	nop
   2f340:	e796      	b.n	2f270 <__ssvfiscanf_r+0x208>
   2f342:	89a3      	ldrh	r3, [r4, #12]
   2f344:	f013 0f40 	tst.w	r3, #64	; 0x40
   2f348:	bf18      	it	ne
   2f34a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2f34e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   2f352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2f356:	9844      	ldr	r0, [sp, #272]	; 0x110
   2f358:	e7f9      	b.n	2f34e <__ssvfiscanf_r+0x2e6>
   2f35a:	bf00      	nop
   2f35c:	00000000 	.word	0x00000000

0002f360 <_scanf_chars>:
   2f360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f364:	4615      	mov	r5, r2
   2f366:	688a      	ldr	r2, [r1, #8]
   2f368:	4680      	mov	r8, r0
   2f36a:	460c      	mov	r4, r1
   2f36c:	b932      	cbnz	r2, 2f37c <_scanf_chars+0x1c>
   2f36e:	698a      	ldr	r2, [r1, #24]
   2f370:	2a00      	cmp	r2, #0
   2f372:	bf0c      	ite	eq
   2f374:	2201      	moveq	r2, #1
   2f376:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2f37a:	608a      	str	r2, [r1, #8]
   2f37c:	6822      	ldr	r2, [r4, #0]
   2f37e:	2700      	movs	r7, #0
   2f380:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2f410 <_scanf_chars+0xb0>
   2f384:	06d1      	lsls	r1, r2, #27
   2f386:	bf5f      	itttt	pl
   2f388:	681a      	ldrpl	r2, [r3, #0]
   2f38a:	1d11      	addpl	r1, r2, #4
   2f38c:	6019      	strpl	r1, [r3, #0]
   2f38e:	6816      	ldrpl	r6, [r2, #0]
   2f390:	69a0      	ldr	r0, [r4, #24]
   2f392:	b188      	cbz	r0, 2f3b8 <_scanf_chars+0x58>
   2f394:	2801      	cmp	r0, #1
   2f396:	d107      	bne.n	2f3a8 <_scanf_chars+0x48>
   2f398:	682a      	ldr	r2, [r5, #0]
   2f39a:	7811      	ldrb	r1, [r2, #0]
   2f39c:	6962      	ldr	r2, [r4, #20]
   2f39e:	5c52      	ldrb	r2, [r2, r1]
   2f3a0:	b952      	cbnz	r2, 2f3b8 <_scanf_chars+0x58>
   2f3a2:	2f00      	cmp	r7, #0
   2f3a4:	d031      	beq.n	2f40a <_scanf_chars+0xaa>
   2f3a6:	e022      	b.n	2f3ee <_scanf_chars+0x8e>
   2f3a8:	2802      	cmp	r0, #2
   2f3aa:	d120      	bne.n	2f3ee <_scanf_chars+0x8e>
   2f3ac:	682b      	ldr	r3, [r5, #0]
   2f3ae:	781b      	ldrb	r3, [r3, #0]
   2f3b0:	f813 3009 	ldrb.w	r3, [r3, r9]
   2f3b4:	071b      	lsls	r3, r3, #28
   2f3b6:	d41a      	bmi.n	2f3ee <_scanf_chars+0x8e>
   2f3b8:	6823      	ldr	r3, [r4, #0]
   2f3ba:	3701      	adds	r7, #1
   2f3bc:	06da      	lsls	r2, r3, #27
   2f3be:	bf5e      	ittt	pl
   2f3c0:	682b      	ldrpl	r3, [r5, #0]
   2f3c2:	781b      	ldrbpl	r3, [r3, #0]
   2f3c4:	f806 3b01 	strbpl.w	r3, [r6], #1
   2f3c8:	682a      	ldr	r2, [r5, #0]
   2f3ca:	686b      	ldr	r3, [r5, #4]
   2f3cc:	3201      	adds	r2, #1
   2f3ce:	3b01      	subs	r3, #1
   2f3d0:	602a      	str	r2, [r5, #0]
   2f3d2:	68a2      	ldr	r2, [r4, #8]
   2f3d4:	606b      	str	r3, [r5, #4]
   2f3d6:	3a01      	subs	r2, #1
   2f3d8:	60a2      	str	r2, [r4, #8]
   2f3da:	b142      	cbz	r2, 2f3ee <_scanf_chars+0x8e>
   2f3dc:	2b00      	cmp	r3, #0
   2f3de:	dcd7      	bgt.n	2f390 <_scanf_chars+0x30>
   2f3e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2f3e4:	4629      	mov	r1, r5
   2f3e6:	4640      	mov	r0, r8
   2f3e8:	4798      	blx	r3
   2f3ea:	2800      	cmp	r0, #0
   2f3ec:	d0d0      	beq.n	2f390 <_scanf_chars+0x30>
   2f3ee:	6823      	ldr	r3, [r4, #0]
   2f3f0:	f013 0310 	ands.w	r3, r3, #16
   2f3f4:	d105      	bne.n	2f402 <_scanf_chars+0xa2>
   2f3f6:	68e2      	ldr	r2, [r4, #12]
   2f3f8:	3201      	adds	r2, #1
   2f3fa:	60e2      	str	r2, [r4, #12]
   2f3fc:	69a2      	ldr	r2, [r4, #24]
   2f3fe:	b102      	cbz	r2, 2f402 <_scanf_chars+0xa2>
   2f400:	7033      	strb	r3, [r6, #0]
   2f402:	6923      	ldr	r3, [r4, #16]
   2f404:	2000      	movs	r0, #0
   2f406:	443b      	add	r3, r7
   2f408:	6123      	str	r3, [r4, #16]
   2f40a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2f40e:	bf00      	nop
   2f410:	00039f71 	.word	0x00039f71

0002f414 <_scanf_i>:
   2f414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f418:	4698      	mov	r8, r3
   2f41a:	b087      	sub	sp, #28
   2f41c:	4b75      	ldr	r3, [pc, #468]	; (2f5f4 <_scanf_i+0x1e0>)
   2f41e:	460c      	mov	r4, r1
   2f420:	4682      	mov	sl, r0
   2f422:	4616      	mov	r6, r2
   2f424:	4627      	mov	r7, r4
   2f426:	f04f 0b00 	mov.w	fp, #0
   2f42a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2f42e:	ab03      	add	r3, sp, #12
   2f430:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   2f434:	4b70      	ldr	r3, [pc, #448]	; (2f5f8 <_scanf_i+0x1e4>)
   2f436:	69a1      	ldr	r1, [r4, #24]
   2f438:	4a70      	ldr	r2, [pc, #448]	; (2f5fc <_scanf_i+0x1e8>)
   2f43a:	2903      	cmp	r1, #3
   2f43c:	bf18      	it	ne
   2f43e:	461a      	movne	r2, r3
   2f440:	68a3      	ldr	r3, [r4, #8]
   2f442:	9201      	str	r2, [sp, #4]
   2f444:	1e5a      	subs	r2, r3, #1
   2f446:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   2f44a:	bf89      	itett	hi
   2f44c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   2f450:	f04f 0900 	movls.w	r9, #0
   2f454:	eb03 0905 	addhi.w	r9, r3, r5
   2f458:	f240 135d 	movwhi	r3, #349	; 0x15d
   2f45c:	bf88      	it	hi
   2f45e:	60a3      	strhi	r3, [r4, #8]
   2f460:	f857 3b1c 	ldr.w	r3, [r7], #28
   2f464:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   2f468:	463d      	mov	r5, r7
   2f46a:	6023      	str	r3, [r4, #0]
   2f46c:	6831      	ldr	r1, [r6, #0]
   2f46e:	ab03      	add	r3, sp, #12
   2f470:	2202      	movs	r2, #2
   2f472:	7809      	ldrb	r1, [r1, #0]
   2f474:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   2f478:	f004 fbbb 	bl	33bf2 <memchr>
   2f47c:	b328      	cbz	r0, 2f4ca <_scanf_i+0xb6>
   2f47e:	f1bb 0f01 	cmp.w	fp, #1
   2f482:	d159      	bne.n	2f538 <_scanf_i+0x124>
   2f484:	6862      	ldr	r2, [r4, #4]
   2f486:	b92a      	cbnz	r2, 2f494 <_scanf_i+0x80>
   2f488:	6822      	ldr	r2, [r4, #0]
   2f48a:	2308      	movs	r3, #8
   2f48c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2f490:	6063      	str	r3, [r4, #4]
   2f492:	6022      	str	r2, [r4, #0]
   2f494:	6822      	ldr	r2, [r4, #0]
   2f496:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   2f49a:	6022      	str	r2, [r4, #0]
   2f49c:	68a2      	ldr	r2, [r4, #8]
   2f49e:	1e51      	subs	r1, r2, #1
   2f4a0:	60a1      	str	r1, [r4, #8]
   2f4a2:	b192      	cbz	r2, 2f4ca <_scanf_i+0xb6>
   2f4a4:	6832      	ldr	r2, [r6, #0]
   2f4a6:	1c51      	adds	r1, r2, #1
   2f4a8:	6031      	str	r1, [r6, #0]
   2f4aa:	7812      	ldrb	r2, [r2, #0]
   2f4ac:	f805 2b01 	strb.w	r2, [r5], #1
   2f4b0:	6872      	ldr	r2, [r6, #4]
   2f4b2:	3a01      	subs	r2, #1
   2f4b4:	2a00      	cmp	r2, #0
   2f4b6:	6072      	str	r2, [r6, #4]
   2f4b8:	dc07      	bgt.n	2f4ca <_scanf_i+0xb6>
   2f4ba:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   2f4be:	4631      	mov	r1, r6
   2f4c0:	4650      	mov	r0, sl
   2f4c2:	4790      	blx	r2
   2f4c4:	2800      	cmp	r0, #0
   2f4c6:	f040 8085 	bne.w	2f5d4 <_scanf_i+0x1c0>
   2f4ca:	f10b 0b01 	add.w	fp, fp, #1
   2f4ce:	f1bb 0f03 	cmp.w	fp, #3
   2f4d2:	d1cb      	bne.n	2f46c <_scanf_i+0x58>
   2f4d4:	6863      	ldr	r3, [r4, #4]
   2f4d6:	b90b      	cbnz	r3, 2f4dc <_scanf_i+0xc8>
   2f4d8:	230a      	movs	r3, #10
   2f4da:	6063      	str	r3, [r4, #4]
   2f4dc:	6863      	ldr	r3, [r4, #4]
   2f4de:	f04f 0b00 	mov.w	fp, #0
   2f4e2:	4947      	ldr	r1, [pc, #284]	; (2f600 <_scanf_i+0x1ec>)
   2f4e4:	6960      	ldr	r0, [r4, #20]
   2f4e6:	1ac9      	subs	r1, r1, r3
   2f4e8:	f005 f83e 	bl	34568 <__sccl>
   2f4ec:	68a3      	ldr	r3, [r4, #8]
   2f4ee:	6822      	ldr	r2, [r4, #0]
   2f4f0:	2b00      	cmp	r3, #0
   2f4f2:	d03d      	beq.n	2f570 <_scanf_i+0x15c>
   2f4f4:	6831      	ldr	r1, [r6, #0]
   2f4f6:	6960      	ldr	r0, [r4, #20]
   2f4f8:	f891 c000 	ldrb.w	ip, [r1]
   2f4fc:	f810 000c 	ldrb.w	r0, [r0, ip]
   2f500:	2800      	cmp	r0, #0
   2f502:	d035      	beq.n	2f570 <_scanf_i+0x15c>
   2f504:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   2f508:	d124      	bne.n	2f554 <_scanf_i+0x140>
   2f50a:	0510      	lsls	r0, r2, #20
   2f50c:	d522      	bpl.n	2f554 <_scanf_i+0x140>
   2f50e:	f10b 0b01 	add.w	fp, fp, #1
   2f512:	f1b9 0f00 	cmp.w	r9, #0
   2f516:	d003      	beq.n	2f520 <_scanf_i+0x10c>
   2f518:	3301      	adds	r3, #1
   2f51a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   2f51e:	60a3      	str	r3, [r4, #8]
   2f520:	6873      	ldr	r3, [r6, #4]
   2f522:	3b01      	subs	r3, #1
   2f524:	2b00      	cmp	r3, #0
   2f526:	6073      	str	r3, [r6, #4]
   2f528:	dd1b      	ble.n	2f562 <_scanf_i+0x14e>
   2f52a:	6833      	ldr	r3, [r6, #0]
   2f52c:	3301      	adds	r3, #1
   2f52e:	6033      	str	r3, [r6, #0]
   2f530:	68a3      	ldr	r3, [r4, #8]
   2f532:	3b01      	subs	r3, #1
   2f534:	60a3      	str	r3, [r4, #8]
   2f536:	e7d9      	b.n	2f4ec <_scanf_i+0xd8>
   2f538:	f1bb 0f02 	cmp.w	fp, #2
   2f53c:	d1ae      	bne.n	2f49c <_scanf_i+0x88>
   2f53e:	6822      	ldr	r2, [r4, #0]
   2f540:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   2f544:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   2f548:	d1bf      	bne.n	2f4ca <_scanf_i+0xb6>
   2f54a:	2310      	movs	r3, #16
   2f54c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   2f550:	6063      	str	r3, [r4, #4]
   2f552:	e7a2      	b.n	2f49a <_scanf_i+0x86>
   2f554:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   2f558:	6022      	str	r2, [r4, #0]
   2f55a:	780b      	ldrb	r3, [r1, #0]
   2f55c:	f805 3b01 	strb.w	r3, [r5], #1
   2f560:	e7de      	b.n	2f520 <_scanf_i+0x10c>
   2f562:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   2f566:	4631      	mov	r1, r6
   2f568:	4650      	mov	r0, sl
   2f56a:	4798      	blx	r3
   2f56c:	2800      	cmp	r0, #0
   2f56e:	d0df      	beq.n	2f530 <_scanf_i+0x11c>
   2f570:	6823      	ldr	r3, [r4, #0]
   2f572:	05db      	lsls	r3, r3, #23
   2f574:	d50d      	bpl.n	2f592 <_scanf_i+0x17e>
   2f576:	42bd      	cmp	r5, r7
   2f578:	d909      	bls.n	2f58e <_scanf_i+0x17a>
   2f57a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   2f57e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2f582:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   2f586:	4632      	mov	r2, r6
   2f588:	464d      	mov	r5, r9
   2f58a:	4650      	mov	r0, sl
   2f58c:	4798      	blx	r3
   2f58e:	42bd      	cmp	r5, r7
   2f590:	d02d      	beq.n	2f5ee <_scanf_i+0x1da>
   2f592:	6822      	ldr	r2, [r4, #0]
   2f594:	f012 0210 	ands.w	r2, r2, #16
   2f598:	d113      	bne.n	2f5c2 <_scanf_i+0x1ae>
   2f59a:	4639      	mov	r1, r7
   2f59c:	702a      	strb	r2, [r5, #0]
   2f59e:	4650      	mov	r0, sl
   2f5a0:	6863      	ldr	r3, [r4, #4]
   2f5a2:	9e01      	ldr	r6, [sp, #4]
   2f5a4:	47b0      	blx	r6
   2f5a6:	6821      	ldr	r1, [r4, #0]
   2f5a8:	f8d8 3000 	ldr.w	r3, [r8]
   2f5ac:	f011 0f20 	tst.w	r1, #32
   2f5b0:	d013      	beq.n	2f5da <_scanf_i+0x1c6>
   2f5b2:	1d1a      	adds	r2, r3, #4
   2f5b4:	f8c8 2000 	str.w	r2, [r8]
   2f5b8:	681b      	ldr	r3, [r3, #0]
   2f5ba:	6018      	str	r0, [r3, #0]
   2f5bc:	68e3      	ldr	r3, [r4, #12]
   2f5be:	3301      	adds	r3, #1
   2f5c0:	60e3      	str	r3, [r4, #12]
   2f5c2:	1bed      	subs	r5, r5, r7
   2f5c4:	2000      	movs	r0, #0
   2f5c6:	44ab      	add	fp, r5
   2f5c8:	6925      	ldr	r5, [r4, #16]
   2f5ca:	445d      	add	r5, fp
   2f5cc:	6125      	str	r5, [r4, #16]
   2f5ce:	b007      	add	sp, #28
   2f5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f5d4:	f04f 0b00 	mov.w	fp, #0
   2f5d8:	e7ca      	b.n	2f570 <_scanf_i+0x15c>
   2f5da:	1d1a      	adds	r2, r3, #4
   2f5dc:	f011 0f01 	tst.w	r1, #1
   2f5e0:	f8c8 2000 	str.w	r2, [r8]
   2f5e4:	681b      	ldr	r3, [r3, #0]
   2f5e6:	bf14      	ite	ne
   2f5e8:	8018      	strhne	r0, [r3, #0]
   2f5ea:	6018      	streq	r0, [r3, #0]
   2f5ec:	e7e6      	b.n	2f5bc <_scanf_i+0x1a8>
   2f5ee:	2001      	movs	r0, #1
   2f5f0:	e7ed      	b.n	2f5ce <_scanf_i+0x1ba>
   2f5f2:	bf00      	nop
   2f5f4:	00034b60 	.word	0x00034b60
   2f5f8:	00034059 	.word	0x00034059
   2f5fc:	00034055 	.word	0x00034055
   2f600:	0003a1ba 	.word	0x0003a1ba

0002f604 <_read_r>:
   2f604:	b538      	push	{r3, r4, r5, lr}
   2f606:	4604      	mov	r4, r0
   2f608:	4d06      	ldr	r5, [pc, #24]	; (2f624 <_read_r+0x20>)
   2f60a:	4608      	mov	r0, r1
   2f60c:	4611      	mov	r1, r2
   2f60e:	2200      	movs	r2, #0
   2f610:	602a      	str	r2, [r5, #0]
   2f612:	461a      	mov	r2, r3
   2f614:	f001 fb24 	bl	30c60 <_read>
   2f618:	1c43      	adds	r3, r0, #1
   2f61a:	d102      	bne.n	2f622 <_read_r+0x1e>
   2f61c:	682b      	ldr	r3, [r5, #0]
   2f61e:	b103      	cbz	r3, 2f622 <_read_r+0x1e>
   2f620:	6023      	str	r3, [r4, #0]
   2f622:	bd38      	pop	{r3, r4, r5, pc}
   2f624:	2000d900 	.word	0x2000d900

0002f628 <__assert_func>:
   2f628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2f62a:	4614      	mov	r4, r2
   2f62c:	461a      	mov	r2, r3
   2f62e:	4b09      	ldr	r3, [pc, #36]	; (2f654 <__assert_func+0x2c>)
   2f630:	4605      	mov	r5, r0
   2f632:	681b      	ldr	r3, [r3, #0]
   2f634:	68d8      	ldr	r0, [r3, #12]
   2f636:	b14c      	cbz	r4, 2f64c <__assert_func+0x24>
   2f638:	4b07      	ldr	r3, [pc, #28]	; (2f658 <__assert_func+0x30>)
   2f63a:	9100      	str	r1, [sp, #0]
   2f63c:	4907      	ldr	r1, [pc, #28]	; (2f65c <__assert_func+0x34>)
   2f63e:	e9cd 3401 	strd	r3, r4, [sp, #4]
   2f642:	462b      	mov	r3, r5
   2f644:	f7fd fe5c 	bl	2d300 <fiprintf>
   2f648:	f005 f812 	bl	34670 <abort>
   2f64c:	4b04      	ldr	r3, [pc, #16]	; (2f660 <__assert_func+0x38>)
   2f64e:	461c      	mov	r4, r3
   2f650:	e7f3      	b.n	2f63a <__assert_func+0x12>
   2f652:	bf00      	nop
   2f654:	2000c66c 	.word	0x2000c66c
   2f658:	0003a1bc 	.word	0x0003a1bc
   2f65c:	0003a1c9 	.word	0x0003a1c9
   2f660:	00039842 	.word	0x00039842

0002f664 <_fstat_r>:
   2f664:	b538      	push	{r3, r4, r5, lr}
   2f666:	2300      	movs	r3, #0
   2f668:	4d06      	ldr	r5, [pc, #24]	; (2f684 <_fstat_r+0x20>)
   2f66a:	4604      	mov	r4, r0
   2f66c:	4608      	mov	r0, r1
   2f66e:	4611      	mov	r1, r2
   2f670:	602b      	str	r3, [r5, #0]
   2f672:	f001 fb0b 	bl	30c8c <_fstat>
   2f676:	1c43      	adds	r3, r0, #1
   2f678:	d102      	bne.n	2f680 <_fstat_r+0x1c>
   2f67a:	682b      	ldr	r3, [r5, #0]
   2f67c:	b103      	cbz	r3, 2f680 <_fstat_r+0x1c>
   2f67e:	6023      	str	r3, [r4, #0]
   2f680:	bd38      	pop	{r3, r4, r5, pc}
   2f682:	bf00      	nop
   2f684:	2000d900 	.word	0x2000d900

0002f688 <_isatty_r>:
   2f688:	b538      	push	{r3, r4, r5, lr}
   2f68a:	2300      	movs	r3, #0
   2f68c:	4d05      	ldr	r5, [pc, #20]	; (2f6a4 <_isatty_r+0x1c>)
   2f68e:	4604      	mov	r4, r0
   2f690:	4608      	mov	r0, r1
   2f692:	602b      	str	r3, [r5, #0]
   2f694:	f001 faf1 	bl	30c7a <_isatty>
   2f698:	1c43      	adds	r3, r0, #1
   2f69a:	d102      	bne.n	2f6a2 <_isatty_r+0x1a>
   2f69c:	682b      	ldr	r3, [r5, #0]
   2f69e:	b103      	cbz	r3, 2f6a2 <_isatty_r+0x1a>
   2f6a0:	6023      	str	r3, [r4, #0]
   2f6a2:	bd38      	pop	{r3, r4, r5, pc}
   2f6a4:	2000d900 	.word	0x2000d900

0002f6a8 <raise>:
   2f6a8:	4b02      	ldr	r3, [pc, #8]	; (2f6b4 <raise+0xc>)
   2f6aa:	4601      	mov	r1, r0
   2f6ac:	6818      	ldr	r0, [r3, #0]
   2f6ae:	f004 bfe6 	b.w	3467e <_raise_r>
   2f6b2:	bf00      	nop
   2f6b4:	2000c66c 	.word	0x2000c66c

0002f6b8 <_kill_r>:
   2f6b8:	b538      	push	{r3, r4, r5, lr}
   2f6ba:	2300      	movs	r3, #0
   2f6bc:	4d06      	ldr	r5, [pc, #24]	; (2f6d8 <_kill_r+0x20>)
   2f6be:	4604      	mov	r4, r0
   2f6c0:	4608      	mov	r0, r1
   2f6c2:	4611      	mov	r1, r2
   2f6c4:	602b      	str	r3, [r5, #0]
   2f6c6:	f001 fadd 	bl	30c84 <_kill>
   2f6ca:	1c43      	adds	r3, r0, #1
   2f6cc:	d102      	bne.n	2f6d4 <_kill_r+0x1c>
   2f6ce:	682b      	ldr	r3, [r5, #0]
   2f6d0:	b103      	cbz	r3, 2f6d4 <_kill_r+0x1c>
   2f6d2:	6023      	str	r3, [r4, #0]
   2f6d4:	bd38      	pop	{r3, r4, r5, pc}
   2f6d6:	bf00      	nop
   2f6d8:	2000d900 	.word	0x2000d900

0002f6dc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2f6dc:	4770      	bx	lr

0002f6de <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f6de:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f6e0:	ab0b      	add	r3, sp, #44	; 0x2c
   2f6e2:	9305      	str	r3, [sp, #20]
   2f6e4:	9303      	str	r3, [sp, #12]
   2f6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f6e8:	9302      	str	r3, [sp, #8]
   2f6ea:	2300      	movs	r3, #0
   2f6ec:	4618      	mov	r0, r3
   2f6ee:	e9cd 3300 	strd	r3, r3, [sp]
   2f6f2:	f7f1 f8cb 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   2f6f6:	b007      	add	sp, #28
   2f6f8:	f85d fb04 	ldr.w	pc, [sp], #4

0002f6fc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f6fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f6fe:	ab0b      	add	r3, sp, #44	; 0x2c
   2f700:	9305      	str	r3, [sp, #20]
   2f702:	9303      	str	r3, [sp, #12]
   2f704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f706:	9302      	str	r3, [sp, #8]
   2f708:	2300      	movs	r3, #0
   2f70a:	4618      	mov	r0, r3
   2f70c:	e9cd 3300 	strd	r3, r3, [sp]
   2f710:	f7f1 f8bc 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   2f714:	b007      	add	sp, #28
   2f716:	f85d fb04 	ldr.w	pc, [sp], #4

0002f71a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2f71a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2f71c:	ab0b      	add	r3, sp, #44	; 0x2c
   2f71e:	9305      	str	r3, [sp, #20]
   2f720:	9303      	str	r3, [sp, #12]
   2f722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2f724:	9302      	str	r3, [sp, #8]
   2f726:	2300      	movs	r3, #0
   2f728:	4618      	mov	r0, r3
   2f72a:	e9cd 3300 	strd	r3, r3, [sp]
   2f72e:	f7f1 f8ad 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   2f732:	b007      	add	sp, #28
   2f734:	f85d fb04 	ldr.w	pc, [sp], #4

0002f738 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
   2f738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2f73c:	460e      	mov	r6, r1
   2f73e:	4607      	mov	r7, r0
   2f740:	4611      	mov	r1, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   2f742:	461d      	mov	r5, r3
   2f744:	b31b      	cbz	r3, 2f78e <cbpprintf_external+0x56>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   2f746:	f04f 0800 	mov.w	r8, #0
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   2f74a:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   2f74c:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = hdr->hdr.desc.str_cnt;
   2f74e:	f893 9001 	ldrb.w	r9, [r3, #1]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
   2f752:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
   2f754:	441c      	add	r4, r3
   2f756:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   2f75a:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
   2f75c:	45c8      	cmp	r8, r9
   2f75e:	d308      	bcc.n	2f772 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
   2f760:	4638      	mov	r0, r7
   2f762:	46b4      	mov	ip, r6
   2f764:	686a      	ldr	r2, [r5, #4]
   2f766:	f105 0308 	add.w	r3, r5, #8
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   2f76a:	b003      	add	sp, #12
   2f76c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return formatter(out, ctx, fmt, u.ap);
   2f770:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   2f772:	f814 3b01 	ldrb.w	r3, [r4], #1
   2f776:	9101      	str	r1, [sp, #4]
		s += strlen(s) + 1;
   2f778:	4620      	mov	r0, r4
		*ps = s;
   2f77a:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   2f77e:	f7ed fc8f 	bl	1d0a0 <strlen>
   2f782:	3001      	adds	r0, #1
	for (i = 0; i < s_nbr; i++) {
   2f784:	9901      	ldr	r1, [sp, #4]
		s += strlen(s) + 1;
   2f786:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   2f788:	f108 0801 	add.w	r8, r8, #1
   2f78c:	e7e6      	b.n	2f75c <cbpprintf_external+0x24>
}
   2f78e:	f06f 0015 	mvn.w	r0, #21
   2f792:	b003      	add	sp, #12
   2f794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002f798 <z_fdtable_call_ioctl.constprop.0>:
 * @param vtable vtable containing ioctl function pointer
 * @param obj Object to call ioctl on
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2f798:	b40c      	push	{r2, r3}
   2f79a:	4603      	mov	r3, r0
   2f79c:	b507      	push	{r0, r1, r2, lr}
{
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   2f79e:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   2f7a0:	aa05      	add	r2, sp, #20
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
   2f7a2:	4608      	mov	r0, r1
	res = vtable->ioctl(obj, request, args);
   2f7a4:	f240 1105 	movw	r1, #261	; 0x105
	va_start(args, request);
   2f7a8:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   2f7aa:	4798      	blx	r3
	va_end(args);

	return res;
}
   2f7ac:	b003      	add	sp, #12
   2f7ae:	f85d eb04 	ldr.w	lr, [sp], #4
   2f7b2:	b002      	add	sp, #8
   2f7b4:	4770      	bx	lr

0002f7b6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2f7b6:	b140      	cbz	r0, 2f7ca <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2f7b8:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2f7ba:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2f7be:	2b02      	cmp	r3, #2
   2f7c0:	d006      	beq.n	2f7d0 <sys_notify_validate+0x1a>
   2f7c2:	2b03      	cmp	r3, #3
   2f7c4:	d004      	beq.n	2f7d0 <sys_notify_validate+0x1a>
   2f7c6:	2b01      	cmp	r3, #1
   2f7c8:	d005      	beq.n	2f7d6 <sys_notify_validate+0x20>
		return -EINVAL;
   2f7ca:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   2f7ce:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2f7d0:	6803      	ldr	r3, [r0, #0]
   2f7d2:	2b00      	cmp	r3, #0
   2f7d4:	d0f9      	beq.n	2f7ca <sys_notify_validate+0x14>
		notify->result = 0;
   2f7d6:	2300      	movs	r3, #0
   2f7d8:	6083      	str	r3, [r0, #8]
   2f7da:	4618      	mov	r0, r3
   2f7dc:	4770      	bx	lr

0002f7de <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2f7de:	6843      	ldr	r3, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   2f7e0:	b510      	push	{r4, lr}
	return method & SYS_NOTIFY_METHOD_MASK;
   2f7e2:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2f7e6:	2b02      	cmp	r3, #2
	notify->result = res;
   2f7e8:	6081      	str	r1, [r0, #8]
	switch (method) {
   2f7ea:	d00b      	beq.n	2f804 <sys_notify_finalize+0x26>
   2f7ec:	2b03      	cmp	r3, #3
   2f7ee:	d10c      	bne.n	2f80a <sys_notify_finalize+0x2c>
	struct k_poll_signal *sig = NULL;
   2f7f0:	2300      	movs	r3, #0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   2f7f2:	6804      	ldr	r4, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2f7f4:	2200      	movs	r2, #0
   2f7f6:	6042      	str	r2, [r0, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2f7f8:	b113      	cbz	r3, 2f800 <sys_notify_finalize+0x22>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   2f7fa:	4618      	mov	r0, r3
   2f7fc:	f7fd fd0a 	bl	2d214 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   2f800:	4620      	mov	r0, r4
   2f802:	bd10      	pop	{r4, pc}
	sys_notify_generic_callback rv = NULL;
   2f804:	2400      	movs	r4, #0
		sig = notify->method.signal;
   2f806:	6803      	ldr	r3, [r0, #0]
		break;
   2f808:	e7f4      	b.n	2f7f4 <sys_notify_finalize+0x16>
	switch (method) {
   2f80a:	2400      	movs	r4, #0
   2f80c:	4623      	mov	r3, r4
   2f80e:	e7f1      	b.n	2f7f4 <sys_notify_finalize+0x16>

0002f810 <arch_printk_char_out>:
}
   2f810:	2000      	movs	r0, #0
   2f812:	4770      	bx	lr

0002f814 <str_out>:
{
   2f814:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2f816:	688a      	ldr	r2, [r1, #8]
   2f818:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   2f81a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2f81c:	b114      	cbz	r4, 2f824 <str_out+0x10>
   2f81e:	684b      	ldr	r3, [r1, #4]
   2f820:	4293      	cmp	r3, r2
   2f822:	dc01      	bgt.n	2f828 <str_out+0x14>
		ctx->count++;
   2f824:	608d      	str	r5, [r1, #8]
}
   2f826:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2f828:	3b01      	subs	r3, #1
   2f82a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2f82c:	bf08      	it	eq
   2f82e:	2200      	moveq	r2, #0
   2f830:	608d      	str	r5, [r1, #8]
   2f832:	bf0c      	ite	eq
   2f834:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2f836:	54a0      	strbne	r0, [r4, r2]
   2f838:	e7f5      	b.n	2f826 <str_out+0x12>

0002f83a <printk>:
{
   2f83a:	b40f      	push	{r0, r1, r2, r3}
   2f83c:	b507      	push	{r0, r1, r2, lr}
   2f83e:	a904      	add	r1, sp, #16
   2f840:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2f844:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
   2f846:	f7f0 fd1f 	bl	20288 <vprintk>
}
   2f84a:	b003      	add	sp, #12
   2f84c:	f85d eb04 	ldr.w	lr, [sp], #4
   2f850:	b004      	add	sp, #16
   2f852:	4770      	bx	lr

0002f854 <snprintk>:
{
   2f854:	b40c      	push	{r2, r3}
   2f856:	b507      	push	{r0, r1, r2, lr}
   2f858:	ab04      	add	r3, sp, #16
   2f85a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2f85e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2f860:	f7f0 fd20 	bl	202a4 <vsnprintk>
}
   2f864:	b003      	add	sp, #12
   2f866:	f85d eb04 	ldr.w	lr, [sp], #4
   2f86a:	b002      	add	sp, #8
   2f86c:	4770      	bx	lr

0002f86e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2f86e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   2f870:	f013 0307 	ands.w	r3, r3, #7
   2f874:	d105      	bne.n	2f882 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2f876:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   2f878:	2b00      	cmp	r3, #0
   2f87a:	bf0c      	ite	eq
   2f87c:	2000      	moveq	r0, #0
   2f87e:	2003      	movne	r0, #3
   2f880:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2f882:	2b02      	cmp	r3, #2
   2f884:	d105      	bne.n	2f892 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2f886:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   2f888:	2b00      	cmp	r3, #0
   2f88a:	bf14      	ite	ne
   2f88c:	2000      	movne	r0, #0
   2f88e:	2004      	moveq	r0, #4
   2f890:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2f892:	2b01      	cmp	r3, #1
   2f894:	d105      	bne.n	2f8a2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2f896:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2f898:	2b00      	cmp	r3, #0
   2f89a:	bf0c      	ite	eq
   2f89c:	2000      	moveq	r0, #0
   2f89e:	2005      	movne	r0, #5
   2f8a0:	4770      	bx	lr
	int evt = EVT_NOP;
   2f8a2:	2000      	movs	r0, #0
}
   2f8a4:	4770      	bx	lr

0002f8a6 <notify_one>:
{
   2f8a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2f8a8:	460d      	mov	r5, r1
   2f8aa:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2f8ac:	4619      	mov	r1, r3
   2f8ae:	1d28      	adds	r0, r5, #4
{
   2f8b0:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2f8b2:	9300      	str	r3, [sp, #0]
   2f8b4:	f7ff ff93 	bl	2f7de <sys_notify_finalize>
	if (cb) {
   2f8b8:	4604      	mov	r4, r0
   2f8ba:	b140      	cbz	r0, 2f8ce <notify_one+0x28>
		cb(mgr, cli, state, res);
   2f8bc:	e9dd 3200 	ldrd	r3, r2, [sp]
   2f8c0:	4629      	mov	r1, r5
   2f8c2:	4630      	mov	r0, r6
   2f8c4:	46a4      	mov	ip, r4
}
   2f8c6:	b002      	add	sp, #8
   2f8c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   2f8cc:	4760      	bx	ip
}
   2f8ce:	b002      	add	sp, #8
   2f8d0:	bd70      	pop	{r4, r5, r6, pc}

0002f8d2 <transition_complete>:
{
   2f8d2:	b410      	push	{r4}
	__asm__ volatile(
   2f8d4:	f04f 0420 	mov.w	r4, #32
   2f8d8:	f3ef 8211 	mrs	r2, BASEPRI
   2f8dc:	f384 8812 	msr	BASEPRI_MAX, r4
   2f8e0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   2f8e4:	6141      	str	r1, [r0, #20]
}
   2f8e6:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   2f8ea:	2101      	movs	r1, #1
   2f8ec:	f7f0 bcf0 	b.w	202d0 <process_event>

0002f8f0 <validate_args>:
{
   2f8f0:	b510      	push	{r4, lr}
   2f8f2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2f8f4:	b140      	cbz	r0, 2f908 <validate_args+0x18>
   2f8f6:	b139      	cbz	r1, 2f908 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2f8f8:	1d08      	adds	r0, r1, #4
   2f8fa:	f7ff ff5c 	bl	2f7b6 <sys_notify_validate>
	if ((rv == 0)
   2f8fe:	b928      	cbnz	r0, 2f90c <validate_args+0x1c>
	    && ((cli->notify.flags
   2f900:	68a3      	ldr	r3, [r4, #8]
   2f902:	f033 0303 	bics.w	r3, r3, #3
   2f906:	d001      	beq.n	2f90c <validate_args+0x1c>
		rv = -EINVAL;
   2f908:	f06f 0015 	mvn.w	r0, #21
}
   2f90c:	bd10      	pop	{r4, pc}

0002f90e <onoff_manager_init>:
{
   2f90e:	b538      	push	{r3, r4, r5, lr}
   2f910:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2f912:	4605      	mov	r5, r0
   2f914:	b158      	cbz	r0, 2f92e <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2f916:	b151      	cbz	r1, 2f92e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2f918:	680b      	ldr	r3, [r1, #0]
   2f91a:	b143      	cbz	r3, 2f92e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2f91c:	684b      	ldr	r3, [r1, #4]
   2f91e:	b133      	cbz	r3, 2f92e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2f920:	221c      	movs	r2, #28
   2f922:	2100      	movs	r1, #0
   2f924:	f004 f9a3 	bl	33c6e <memset>
	return 0;
   2f928:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2f92a:	612c      	str	r4, [r5, #16]
}
   2f92c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2f92e:	f06f 0015 	mvn.w	r0, #21
   2f932:	e7fb      	b.n	2f92c <onoff_manager_init+0x1e>

0002f934 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   2f934:	b570      	push	{r4, r5, r6, lr}
   2f936:	4604      	mov	r4, r0
   2f938:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2f93a:	f7ff ffd9 	bl	2f8f0 <validate_args>

	if (rv < 0) {
   2f93e:	1e05      	subs	r5, r0, #0
   2f940:	db31      	blt.n	2f9a6 <onoff_request+0x72>
   2f942:	f04f 0320 	mov.w	r3, #32
   2f946:	f3ef 8111 	mrs	r1, BASEPRI
   2f94a:	f383 8812 	msr	BASEPRI_MAX, r3
   2f94e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2f952:	f64f 75ff 	movw	r5, #65535	; 0xffff
   2f956:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2f958:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   2f95a:	42ab      	cmp	r3, r5
   2f95c:	f000 0207 	and.w	r2, r0, #7
   2f960:	d02e      	beq.n	2f9c0 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   2f962:	2a02      	cmp	r2, #2
   2f964:	d10e      	bne.n	2f984 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   2f966:	3301      	adds	r3, #1
   2f968:	8363      	strh	r3, [r4, #26]
	rv = state;
   2f96a:	4615      	mov	r5, r2
		notify = true;
   2f96c:	2301      	movs	r3, #1
	__asm__ volatile(
   2f96e:	f381 8811 	msr	BASEPRI, r1
   2f972:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   2f976:	b1b3      	cbz	r3, 2f9a6 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   2f978:	2300      	movs	r3, #0
   2f97a:	4631      	mov	r1, r6
   2f97c:	4620      	mov	r0, r4
   2f97e:	f7ff ff92 	bl	2f8a6 <notify_one>
   2f982:	e010      	b.n	2f9a6 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   2f984:	0783      	lsls	r3, r0, #30
   2f986:	d001      	beq.n	2f98c <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   2f988:	2a06      	cmp	r2, #6
   2f98a:	d10e      	bne.n	2f9aa <onoff_request+0x76>
	parent->next = child;
   2f98c:	2300      	movs	r3, #0
   2f98e:	6033      	str	r3, [r6, #0]
	return list->tail;
   2f990:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   2f992:	b993      	cbnz	r3, 2f9ba <onoff_request+0x86>
	list->head = node;
   2f994:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   2f998:	4615      	mov	r5, r2
   2f99a:	b962      	cbnz	r2, 2f9b6 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   2f99c:	460a      	mov	r2, r1
   2f99e:	4620      	mov	r0, r4
   2f9a0:	2102      	movs	r1, #2
   2f9a2:	f7f0 fc95 	bl	202d0 <process_event>
		}
	}

	return rv;
}
   2f9a6:	4628      	mov	r0, r5
   2f9a8:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   2f9aa:	2a05      	cmp	r2, #5
   2f9ac:	bf0c      	ite	eq
   2f9ae:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   2f9b2:	f06f 0504 	mvnne.w	r5, #4
   2f9b6:	2300      	movs	r3, #0
   2f9b8:	e7d9      	b.n	2f96e <onoff_request+0x3a>
	parent->next = child;
   2f9ba:	601e      	str	r6, [r3, #0]
	list->tail = node;
   2f9bc:	6066      	str	r6, [r4, #4]
}
   2f9be:	e7eb      	b.n	2f998 <onoff_request+0x64>
		rv = -EAGAIN;
   2f9c0:	f06f 050a 	mvn.w	r5, #10
   2f9c4:	e7f7      	b.n	2f9b6 <onoff_request+0x82>

0002f9c6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2f9c6:	4604      	mov	r4, r0
   2f9c8:	b508      	push	{r3, lr}
   2f9ca:	4608      	mov	r0, r1
   2f9cc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2f9ce:	461a      	mov	r2, r3
   2f9d0:	47a0      	blx	r4
	return z_impl_z_current_get();
   2f9d2:	f7fd f9f9 	bl	2cdc8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2f9d6:	f7f2 fd3f 	bl	22458 <z_impl_k_thread_abort>

0002f9da <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   2f9da:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   2f9de:	8848      	ldrh	r0, [r1, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   2f9e0:	0840      	lsrs	r0, r0, #1
   2f9e2:	4770      	bx	lr

0002f9e4 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2f9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f9e6:	460c      	mov	r4, r1
   2f9e8:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   2f9ea:	f7ff fff6 	bl	2f9da <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   2f9ee:	fab0 f080 	clz	r0, r0
   2f9f2:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2f9f6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2f9fa:	f8dc 6010 	ldr.w	r6, [ip, #16]
	void *cmem = &buf[c];
   2f9fe:	00e2      	lsls	r2, r4, #3
		((uint16_t *)cmem)[f] = val;
   2fa00:	1d17      	adds	r7, r2, #4
   2fa02:	b2a5      	uxth	r5, r4
   2fa04:	3206      	adds	r2, #6
   2fa06:	b956      	cbnz	r6, 2fa1e <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2fa08:	2101      	movs	r1, #1
   2fa0a:	fa01 f000 	lsl.w	r0, r1, r0
   2fa0e:	68d9      	ldr	r1, [r3, #12]
   2fa10:	4301      	orrs	r1, r0
   2fa12:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2fa14:	f8cc 4010 	str.w	r4, [ip, #16]
   2fa18:	53dd      	strh	r5, [r3, r7]
   2fa1a:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2fa1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2fa1e:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2fa20:	3104      	adds	r1, #4
   2fa22:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2fa24:	53d8      	strh	r0, [r3, r7]
   2fa26:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2fa2a:	529e      	strh	r6, [r3, r2]
   2fa2c:	80c5      	strh	r5, [r0, #6]
   2fa2e:	525d      	strh	r5, [r3, r1]
   2fa30:	e7f4      	b.n	2fa1c <free_list_add+0x38>

0002fa32 <free_list_remove_bidx>:
{
   2fa32:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2fa34:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2fa38:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2fa3a:	4299      	cmp	r1, r3
   2fa3c:	f102 0104 	add.w	r1, r2, #4
   2fa40:	d10a      	bne.n	2fa58 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2fa42:	2301      	movs	r3, #1
   2fa44:	fa03 f202 	lsl.w	r2, r3, r2
   2fa48:	68c3      	ldr	r3, [r0, #12]
   2fa4a:	ea23 0302 	bic.w	r3, r3, r2
   2fa4e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2fa50:	2300      	movs	r3, #0
   2fa52:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2fa56:	bd10      	pop	{r4, pc}
   2fa58:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2fa5a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2fa5e:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2fa62:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2fa66:	80cb      	strh	r3, [r1, #6]
   2fa68:	8082      	strh	r2, [r0, #4]
}
   2fa6a:	e7f4      	b.n	2fa56 <free_list_remove_bidx+0x24>

0002fa6c <free_list_remove>:
{
   2fa6c:	b510      	push	{r4, lr}
   2fa6e:	4603      	mov	r3, r0
   2fa70:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   2fa72:	f7ff ffb2 	bl	2f9da <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2fa76:	fab0 f080 	clz	r0, r0
		free_list_remove_bidx(h, c, bidx);
   2fa7a:	4621      	mov	r1, r4
}
   2fa7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   2fa80:	f1c0 021f 	rsb	r2, r0, #31
   2fa84:	4618      	mov	r0, r3
   2fa86:	f7ff bfd4 	b.w	2fa32 <free_list_remove_bidx>

0002fa8a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2fa8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2fa8e:	fab1 f581 	clz	r5, r1
   2fa92:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   2fa96:	eb00 0789 	add.w	r7, r0, r9, lsl #2
   2fa9a:	693a      	ldr	r2, [r7, #16]
{
   2fa9c:	4603      	mov	r3, r0
   2fa9e:	460e      	mov	r6, r1
	if (b->next) {
   2faa0:	b1ca      	cbz	r2, 2fad6 <alloc_chunk+0x4c>
   2faa2:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   2faa6:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   2faa8:	4618      	mov	r0, r3
   2faaa:	4621      	mov	r1, r4
   2faac:	f7ff ff95 	bl	2f9da <chunk_size>
   2fab0:	42b0      	cmp	r0, r6
   2fab2:	d307      	bcc.n	2fac4 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2fab4:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   2fab6:	4621      	mov	r1, r4
   2fab8:	4618      	mov	r0, r3
   2faba:	f7ff ffba 	bl	2fa32 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2fabe:	4620      	mov	r0, r4
   2fac0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2fac4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2fac8:	88e1      	ldrh	r1, [r4, #6]
		} while (--i && b->next != first);
   2faca:	f1b8 0801 	subs.w	r8, r8, #1
			b->next = next_free_chunk(h, c);
   2face:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   2fad0:	d001      	beq.n	2fad6 <alloc_chunk+0x4c>
   2fad2:	428a      	cmp	r2, r1
   2fad4:	d1e7      	bne.n	2faa6 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2fad6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2fada:	68d9      	ldr	r1, [r3, #12]
   2fadc:	f1c5 0520 	rsb	r5, r5, #32
   2fae0:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   2fae2:	400c      	ands	r4, r1
   2fae4:	d0eb      	beq.n	2fabe <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2fae6:	fa94 f2a4 	rbit	r2, r4
   2faea:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2faee:	1d11      	adds	r1, r2, #4
   2faf0:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   2faf4:	e7df      	b.n	2fab6 <alloc_chunk+0x2c>

0002faf6 <merge_chunks>:
{
   2faf6:	b538      	push	{r3, r4, r5, lr}
   2faf8:	4603      	mov	r3, r0
   2fafa:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2fafc:	f7ff ff6d 	bl	2f9da <chunk_size>
   2fb00:	4611      	mov	r1, r2
   2fb02:	4604      	mov	r4, r0
   2fb04:	4618      	mov	r0, r3
   2fb06:	f7ff ff68 	bl	2f9da <chunk_size>
   2fb0a:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2fb0c:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   2fb0e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2fb12:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   2fb14:	4618      	mov	r0, r3
   2fb16:	4611      	mov	r1, r2
   2fb18:	f7ff ff5f 	bl	2f9da <chunk_size>
	void *cmem = &buf[c];
   2fb1c:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   2fb1e:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   2fb22:	bd38      	pop	{r3, r4, r5, pc}

0002fb24 <split_chunks>:
{
   2fb24:	b538      	push	{r3, r4, r5, lr}
   2fb26:	460c      	mov	r4, r1
   2fb28:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   2fb2a:	f7ff ff56 	bl	2f9da <chunk_size>
	chunksz_t rsz = sz0 - lsz;
   2fb2e:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2fb30:	1b11      	subs	r1, r2, r4
	chunksz_t rsz = sz0 - lsz;
   2fb32:	4405      	add	r5, r0
   2fb34:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2fb38:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2fb3a:	8060      	strh	r0, [r4, #2]
   2fb3c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2fb40:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2fb42:	8044      	strh	r4, [r0, #2]
   2fb44:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2fb48:	4618      	mov	r0, r3
   2fb4a:	4611      	mov	r1, r2
   2fb4c:	f7ff ff45 	bl	2f9da <chunk_size>
	void *cmem = &buf[c];
   2fb50:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   2fb52:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   2fb56:	bd38      	pop	{r3, r4, r5, pc}

0002fb58 <free_chunk>:
{
   2fb58:	b538      	push	{r3, r4, r5, lr}
   2fb5a:	4605      	mov	r5, r0
   2fb5c:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   2fb5e:	f7ff ff3c 	bl	2f9da <chunk_size>
   2fb62:	1821      	adds	r1, r4, r0
		return ((uint16_t *)cmem)[f];
   2fb64:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2fb68:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2fb6a:	07da      	lsls	r2, r3, #31
   2fb6c:	d40b      	bmi.n	2fb86 <free_chunk+0x2e>
		free_list_remove(h, right_chunk(h, c));
   2fb6e:	4628      	mov	r0, r5
   2fb70:	f7ff ff7c 	bl	2fa6c <free_list_remove>
	return c + chunk_size(h, c);
   2fb74:	4621      	mov	r1, r4
   2fb76:	4628      	mov	r0, r5
   2fb78:	f7ff ff2f 	bl	2f9da <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2fb7c:	4621      	mov	r1, r4
   2fb7e:	1822      	adds	r2, r4, r0
   2fb80:	4628      	mov	r0, r5
   2fb82:	f7ff ffb8 	bl	2faf6 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2fb86:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2fb8a:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2fb8c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2fb90:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2fb92:	07db      	lsls	r3, r3, #31
   2fb94:	d40c      	bmi.n	2fbb0 <free_chunk+0x58>
		free_list_remove(h, left_chunk(h, c));
   2fb96:	4628      	mov	r0, r5
   2fb98:	f7ff ff68 	bl	2fa6c <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2fb9c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2fba0:	4622      	mov	r2, r4
   2fba2:	1a61      	subs	r1, r4, r1
   2fba4:	4628      	mov	r0, r5
   2fba6:	f7ff ffa6 	bl	2faf6 <merge_chunks>
   2fbaa:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2fbae:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2fbb0:	4621      	mov	r1, r4
   2fbb2:	4628      	mov	r0, r5
}
   2fbb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2fbb8:	f7ff bf14 	b.w	2f9e4 <free_list_add>

0002fbbc <sys_heap_free>:
	if (mem == NULL) {
   2fbbc:	b161      	cbz	r1, 2fbd8 <sys_heap_free+0x1c>
   2fbbe:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2fbc0:	3904      	subs	r1, #4
   2fbc2:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   2fbc4:	f021 0307 	bic.w	r3, r1, #7
   2fbc8:	4403      	add	r3, r0
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2fbca:	885a      	ldrh	r2, [r3, #2]
	free_chunk(h, c);
   2fbcc:	08c9      	lsrs	r1, r1, #3
   2fbce:	f022 0201 	bic.w	r2, r2, #1
   2fbd2:	805a      	strh	r2, [r3, #2]
   2fbd4:	f7ff bfc0 	b.w	2fb58 <free_chunk>
}
   2fbd8:	4770      	bx	lr

0002fbda <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2fbda:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2fbdc:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   2fbde:	b909      	cbnz	r1, 2fbe4 <sys_heap_alloc+0xa>
		return NULL;
   2fbe0:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   2fbe2:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2fbe4:	68ab      	ldr	r3, [r5, #8]
   2fbe6:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2fbea:	d9f9      	bls.n	2fbe0 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2fbec:	310b      	adds	r1, #11
   2fbee:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2fbf0:	4621      	mov	r1, r4
   2fbf2:	4628      	mov	r0, r5
   2fbf4:	f7ff ff49 	bl	2fa8a <alloc_chunk>
	if (c == 0U) {
   2fbf8:	4606      	mov	r6, r0
   2fbfa:	2800      	cmp	r0, #0
   2fbfc:	d0f0      	beq.n	2fbe0 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2fbfe:	4601      	mov	r1, r0
   2fc00:	4628      	mov	r0, r5
   2fc02:	f7ff feea 	bl	2f9da <chunk_size>
   2fc06:	42a0      	cmp	r0, r4
   2fc08:	d909      	bls.n	2fc1e <sys_heap_alloc+0x44>
		split_chunks(h, c, c + chunk_sz);
   2fc0a:	4434      	add	r4, r6
   2fc0c:	4631      	mov	r1, r6
   2fc0e:	4628      	mov	r0, r5
   2fc10:	4622      	mov	r2, r4
   2fc12:	f7ff ff87 	bl	2fb24 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2fc16:	4621      	mov	r1, r4
   2fc18:	4628      	mov	r0, r5
   2fc1a:	f7ff fee3 	bl	2f9e4 <free_list_add>
	void *cmem = &buf[c];
   2fc1e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2fc22:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2fc24:	8853      	ldrh	r3, [r2, #2]
   2fc26:	3004      	adds	r0, #4
   2fc28:	f043 0301 	orr.w	r3, r3, #1
   2fc2c:	8053      	strh	r3, [r2, #2]
	return mem;
   2fc2e:	e7d8      	b.n	2fbe2 <sys_heap_alloc+0x8>

0002fc30 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2fc30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2fc34:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   2fc36:	424a      	negs	r2, r1
   2fc38:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   2fc3c:	ea31 0202 	bics.w	r2, r1, r2
{
   2fc40:	4603      	mov	r3, r0
	if (align != rew) {
   2fc42:	d00a      	beq.n	2fc5a <sys_heap_aligned_alloc+0x2a>
		return false;
   2fc44:	2f04      	cmp	r7, #4
   2fc46:	463a      	mov	r2, r7
   2fc48:	bf28      	it	cs
   2fc4a:	2204      	movcs	r2, #4
   2fc4c:	46b9      	mov	r9, r7
		align -= rew;
   2fc4e:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   2fc50:	b974      	cbnz	r4, 2fc70 <sys_heap_aligned_alloc+0x40>
		return NULL;
   2fc52:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   2fc54:	4628      	mov	r0, r5
   2fc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2fc5a:	2904      	cmp	r1, #4
   2fc5c:	d804      	bhi.n	2fc68 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   2fc5e:	4621      	mov	r1, r4
}
   2fc60:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2fc64:	f7ff bfb9 	b.w	2fbda <sys_heap_alloc>
		rew = 0;
   2fc68:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   2fc6c:	2204      	movs	r2, #4
   2fc6e:	e7ef      	b.n	2fc50 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   2fc70:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   2fc72:	68b3      	ldr	r3, [r6, #8]
   2fc74:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2fc78:	d9eb      	bls.n	2fc52 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2fc7a:	f104 010b 	add.w	r1, r4, #11
   2fc7e:	4439      	add	r1, r7
   2fc80:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2fc82:	4630      	mov	r0, r6
   2fc84:	08c9      	lsrs	r1, r1, #3
   2fc86:	f7ff ff00 	bl	2fa8a <alloc_chunk>
	if (c0 == 0) {
   2fc8a:	4680      	mov	r8, r0
   2fc8c:	2800      	cmp	r0, #0
   2fc8e:	d0e0      	beq.n	2fc52 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2fc90:	f109 0504 	add.w	r5, r9, #4
   2fc94:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2fc98:	1e7b      	subs	r3, r7, #1
   2fc9a:	4435      	add	r5, r6
   2fc9c:	441d      	add	r5, r3
   2fc9e:	427f      	negs	r7, r7
   2fca0:	403d      	ands	r5, r7
   2fca2:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2fca6:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2fca8:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2fcaa:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2fcac:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2fcae:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2fcb2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2fcb4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2fcb8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2fcbc:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2fcc0:	d208      	bcs.n	2fcd4 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   2fcc2:	4601      	mov	r1, r0
   2fcc4:	463a      	mov	r2, r7
   2fcc6:	4630      	mov	r0, r6
   2fcc8:	f7ff ff2c 	bl	2fb24 <split_chunks>
		free_list_add(h, c0);
   2fccc:	4641      	mov	r1, r8
   2fcce:	4630      	mov	r0, r6
   2fcd0:	f7ff fe88 	bl	2f9e4 <free_list_add>
	return c + chunk_size(h, c);
   2fcd4:	4639      	mov	r1, r7
   2fcd6:	4630      	mov	r0, r6
   2fcd8:	f7ff fe7f 	bl	2f9da <chunk_size>
   2fcdc:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2fcde:	4284      	cmp	r4, r0
   2fce0:	d208      	bcs.n	2fcf4 <sys_heap_aligned_alloc+0xc4>
		split_chunks(h, c, c_end);
   2fce2:	4639      	mov	r1, r7
   2fce4:	4630      	mov	r0, r6
   2fce6:	4622      	mov	r2, r4
   2fce8:	f7ff ff1c 	bl	2fb24 <split_chunks>
		free_list_add(h, c_end);
   2fcec:	4621      	mov	r1, r4
   2fcee:	4630      	mov	r0, r6
   2fcf0:	f7ff fe78 	bl	2f9e4 <free_list_add>
	void *cmem = &buf[c];
   2fcf4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2fcf8:	8873      	ldrh	r3, [r6, #2]
   2fcfa:	f043 0301 	orr.w	r3, r3, #1
   2fcfe:	8073      	strh	r3, [r6, #2]
   2fd00:	e7a8      	b.n	2fc54 <sys_heap_aligned_alloc+0x24>

0002fd02 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2fd02:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2fd04:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2fd06:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2fd08:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2fd0c:	f021 0107 	bic.w	r1, r1, #7
{
   2fd10:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   2fd12:	1acd      	subs	r5, r1, r3
   2fd14:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2fd16:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   2fd18:	fab2 f082 	clz	r0, r2
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   2fd1c:	2600      	movs	r6, #0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2fd1e:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   2fd22:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2fd24:	3407      	adds	r4, #7
   2fd26:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2fd28:	f1c0 0020 	rsb	r0, r0, #32
   2fd2c:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   2fd30:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   2fd32:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2fd34:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   2fd38:	4284      	cmp	r4, r0
   2fd3a:	d118      	bne.n	2fd6e <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2fd3c:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2fd3e:	f040 0001 	orr.w	r0, r0, #1
   2fd42:	8058      	strh	r0, [r3, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2fd44:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2fd46:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   2fd48:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
   2fd4c:	801e      	strh	r6, [r3, #0]
   2fd4e:	8067      	strh	r7, [r4, #2]
   2fd50:	195c      	adds	r4, r3, r5
   2fd52:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   2fd56:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   2fd5a:	8066      	strh	r6, [r4, #2]
   2fd5c:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2fd5e:	8850      	ldrh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2fd60:	bcf0      	pop	{r4, r5, r6, r7}
   2fd62:	f040 0001 	orr.w	r0, r0, #1
   2fd66:	8050      	strh	r0, [r2, #2]
	free_list_add(h, chunk0_size);
   2fd68:	4618      	mov	r0, r3
   2fd6a:	f7ff be3b 	b.w	2f9e4 <free_list_add>
		h->buckets[i].next = 0;
   2fd6e:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   2fd72:	e7e1      	b.n	2fd38 <sys_heap_init+0x36>

0002fd74 <_ldiv5>:
	uint32_t v_lo = *v;
   2fd74:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   2fd78:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   2fd7a:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   2fd7e:	fba2 2403 	umull	r2, r4, r2, r3
   2fd82:	18d5      	adds	r5, r2, r3
   2fd84:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   2fd88:	fba1 1303 	umull	r1, r3, r1, r3
   2fd8c:	1852      	adds	r2, r2, r1
   2fd8e:	eb44 0403 	adc.w	r4, r4, r3
   2fd92:	1952      	adds	r2, r2, r5
   2fd94:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   2fd98:	1889      	adds	r1, r1, r2
   2fd9a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   2fd9e:	e9c0 1300 	strd	r1, r3, [r0]
}
   2fda2:	bd30      	pop	{r4, r5, pc}

0002fda4 <_get_digit>:
	if (*digit_count > 0) {
   2fda4:	680b      	ldr	r3, [r1, #0]
{
   2fda6:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   2fda8:	2b00      	cmp	r3, #0
   2fdaa:	dd10      	ble.n	2fdce <_get_digit+0x2a>
		*fr *= 10U;
   2fdac:	220a      	movs	r2, #10
		--*digit_count;
   2fdae:	3b01      	subs	r3, #1
   2fdb0:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   2fdb2:	6803      	ldr	r3, [r0, #0]
   2fdb4:	6844      	ldr	r4, [r0, #4]
   2fdb6:	fba3 1302 	umull	r1, r3, r3, r2
   2fdba:	fb02 3304 	mla	r3, r2, r4, r3
		rval = ((*fr >> 60) & 0xF) + '0';
   2fdbe:	0f1a      	lsrs	r2, r3, #28
		*fr &= (BIT64(60) - 1U);
   2fdc0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
   2fdc4:	e9c0 1300 	strd	r1, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   2fdc8:	3230      	adds	r2, #48	; 0x30
}
   2fdca:	4610      	mov	r0, r2
   2fdcc:	bd10      	pop	{r4, pc}
		rval = '0';
   2fdce:	2230      	movs	r2, #48	; 0x30
   2fdd0:	e7fb      	b.n	2fdca <_get_digit+0x26>

0002fdd2 <outs>:
{
   2fdd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2fdd6:	4680      	mov	r8, r0
   2fdd8:	4689      	mov	r9, r1
   2fdda:	4616      	mov	r6, r2
   2fddc:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2fdde:	4615      	mov	r5, r2
   2fde0:	42bd      	cmp	r5, r7
   2fde2:	eba5 0406 	sub.w	r4, r5, r6
   2fde6:	d305      	bcc.n	2fdf4 <outs+0x22>
   2fde8:	b10f      	cbz	r7, 2fdee <outs+0x1c>
	return (int)count;
   2fdea:	4620      	mov	r0, r4
   2fdec:	e008      	b.n	2fe00 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2fdee:	782b      	ldrb	r3, [r5, #0]
   2fdf0:	2b00      	cmp	r3, #0
   2fdf2:	d0fa      	beq.n	2fdea <outs+0x18>
		int rc = out((int)*sp++, ctx);
   2fdf4:	4649      	mov	r1, r9
   2fdf6:	f815 0b01 	ldrb.w	r0, [r5], #1
   2fdfa:	47c0      	blx	r8
		if (rc < 0) {
   2fdfc:	2800      	cmp	r0, #0
   2fdfe:	daef      	bge.n	2fde0 <outs+0xe>
}
   2fe00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002fe04 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_SIGNATURE_KEY_FILE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MCUBOOT_EXTRA_IMGTOOL_ARGS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
   2fe04:	4770      	bx	lr

0002fe06 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   2fe06:	2806      	cmp	r0, #6
   2fe08:	d108      	bne.n	2fe1c <pm_state_set+0x16>
#endif
}

NRF_STATIC_INLINE void nrf_regulators_system_off(NRF_REGULATORS_Type * p_reg)
{
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
   2fe0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
   2fe0e:	2201      	movs	r2, #1
   2fe10:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2fe14:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   2fe18:	bf20      	wfe
    while (true)
   2fe1a:	e7fd      	b.n	2fe18 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   2fe1c:	4770      	bx	lr

0002fe1e <pm_state_exit_post_ops>:
   2fe1e:	2300      	movs	r3, #0
   2fe20:	f383 8811 	msr	BASEPRI, r3
   2fe24:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2fe28:	4770      	bx	lr

0002fe2a <soc_secure_mem_read>:
	__ASSERT(result == 0, "GPIO service error (%d)", result);
}
#endif /* NRF_GPIO_HAS_SEL */

int soc_secure_mem_read(void *dst, void *src, size_t len)
{
   2fe2a:	b507      	push	{r0, r1, r2, lr}
	enum tfm_platform_err_t status;
	uint32_t result;

	status = tfm_platform_mem_read(dst, (uintptr_t)src, len, &result);
   2fe2c:	ab01      	add	r3, sp, #4
   2fe2e:	f002 f892 	bl	31f56 <tfm_platform_mem_read>

	switch (status) {
   2fe32:	2802      	cmp	r0, #2
   2fe34:	d00a      	beq.n	2fe4c <soc_secure_mem_read+0x22>
   2fe36:	2803      	cmp	r0, #3
   2fe38:	d00b      	beq.n	2fe52 <soc_secure_mem_read+0x28>
   2fe3a:	b968      	cbnz	r0, 2fe58 <soc_secure_mem_read+0x2e>
	case TFM_PLATFORM_ERR_INVALID_PARAM:
		return -EINVAL;
	case TFM_PLATFORM_ERR_NOT_SUPPORTED:
		return -ENOTSUP;
	case TFM_PLATFORM_ERR_SUCCESS:
		if (result == 0) {
   2fe3c:	9801      	ldr	r0, [sp, #4]
   2fe3e:	3800      	subs	r0, #0
   2fe40:	bf18      	it	ne
   2fe42:	2001      	movne	r0, #1
   2fe44:	4240      	negs	r0, r0
		}
		/* Fallthrough */
	default:
		return -EPERM;
	}
}
   2fe46:	b003      	add	sp, #12
   2fe48:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   2fe4c:	f06f 0015 	mvn.w	r0, #21
   2fe50:	e7f9      	b.n	2fe46 <soc_secure_mem_read+0x1c>
	switch (status) {
   2fe52:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fe56:	e7f6      	b.n	2fe46 <soc_secure_mem_read+0x1c>
		return -EPERM;
   2fe58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2fe5c:	e7f3      	b.n	2fe46 <soc_secure_mem_read+0x1c>

0002fe5e <dummy_timestamp>:
}
   2fe5e:	2000      	movs	r0, #0
   2fe60:	4770      	bx	lr

0002fe62 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2fe62:	f001 bbfd 	b.w	31660 <sys_clock_cycle_get_32>

0002fe66 <enable_logger>:
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   2fe66:	2100      	movs	r1, #0
{
   2fe68:	b508      	push	{r3, lr}
		(void)z_log_init(false, false);
   2fe6a:	4608      	mov	r0, r1
   2fe6c:	f7f0 fc10 	bl	20690 <z_log_init.isra.0>
	}

	return 0;
}
   2fe70:	2000      	movs	r0, #0
   2fe72:	bd08      	pop	{r3, pc}

0002fe74 <z_log_notify_backend_enabled>:
}
   2fe74:	4770      	bx	lr

0002fe76 <z_log_get_tag>:
}
   2fe76:	2000      	movs	r0, #0
   2fe78:	4770      	bx	lr

0002fe7a <z_log_msg_finalize>:
{
   2fe7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fe7c:	460e      	mov	r6, r1
   2fe7e:	4615      	mov	r5, r2
   2fe80:	4619      	mov	r1, r3
	if (!msg) {
   2fe82:	4604      	mov	r4, r0
   2fe84:	b918      	cbnz	r0, 2fe8e <z_log_msg_finalize+0x14>
}
   2fe86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_log_dropped(false);
   2fe8a:	f7f0 bcad 	b.w	207e8 <z_log_dropped>
	if (data) {
   2fe8e:	b143      	cbz	r3, 2fea2 <z_log_msg_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   2fe90:	f100 0710 	add.w	r7, r0, #16
   2fe94:	f3c2 2049 	ubfx	r0, r2, #9, #10
   2fe98:	4438      	add	r0, r7
   2fe9a:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   2fe9e:	f003 fec6 	bl	33c2e <memcpy>
	z_log_msg_commit(msg);
   2fea2:	4620      	mov	r0, r4
	msg->hdr.source = source;
   2fea4:	e9c4 5600 	strd	r5, r6, [r4]
}
   2fea8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_log_msg_commit(msg);
   2feac:	f7f0 bcb2 	b.w	20814 <z_log_msg_commit>

0002feb0 <out_func>:
{
   2feb0:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   2feb2:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   2feb6:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   2feba:	2101      	movs	r1, #1
   2febc:	6852      	ldr	r2, [r2, #4]
   2febe:	f10d 0007 	add.w	r0, sp, #7
   2fec2:	4798      	blx	r3
}
   2fec4:	2000      	movs	r0, #0
   2fec6:	b003      	add	sp, #12
   2fec8:	f85d fb04 	ldr.w	pc, [sp], #4

0002fecc <cr_out_func>:
{
   2fecc:	b538      	push	{r3, r4, r5, lr}
   2fece:	4605      	mov	r5, r0
   2fed0:	460c      	mov	r4, r1
	out_func(c, ctx);
   2fed2:	f7ff ffed 	bl	2feb0 <out_func>
	if (c == '\n') {
   2fed6:	2d0a      	cmp	r5, #10
   2fed8:	d103      	bne.n	2fee2 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   2feda:	4621      	mov	r1, r4
   2fedc:	200d      	movs	r0, #13
   2fede:	f7ff ffe7 	bl	2feb0 <out_func>
}
   2fee2:	2000      	movs	r0, #0
   2fee4:	bd38      	pop	{r3, r4, r5, pc}

0002fee6 <buffer_write>:
{
   2fee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2fee8:	4606      	mov	r6, r0
   2feea:	460d      	mov	r5, r1
   2feec:	4614      	mov	r4, r2
   2feee:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2fef0:	4621      	mov	r1, r4
   2fef2:	4628      	mov	r0, r5
   2fef4:	463a      	mov	r2, r7
   2fef6:	47b0      	blx	r6
	} while (len != 0);
   2fef8:	1a24      	subs	r4, r4, r0
		buf += processed;
   2fefa:	4405      	add	r5, r0
	} while (len != 0);
   2fefc:	d1f8      	bne.n	2fef0 <buffer_write+0xa>
}
   2fefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ff00 <cbvprintf>:
{
   2ff00:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   2ff02:	2400      	movs	r4, #0
   2ff04:	9400      	str	r4, [sp, #0]
   2ff06:	f7ed f9db 	bl	1d2c0 <z_cbvprintf_impl>
}
   2ff0a:	b002      	add	sp, #8
   2ff0c:	bd10      	pop	{r4, pc}

0002ff0e <log_output_flush>:
		     output->control_block->offset,
   2ff0e:	6842      	ldr	r2, [r0, #4]
{
   2ff10:	b510      	push	{r4, lr}
	buffer_write(output->func, output->buf,
   2ff12:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   2ff16:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2ff18:	6881      	ldr	r1, [r0, #8]
   2ff1a:	6800      	ldr	r0, [r0, #0]
   2ff1c:	f7ff ffe3 	bl	2fee6 <buffer_write>
	output->control_block->offset = 0;
   2ff20:	2200      	movs	r2, #0
   2ff22:	6863      	ldr	r3, [r4, #4]
   2ff24:	601a      	str	r2, [r3, #0]
}
   2ff26:	bd10      	pop	{r4, pc}

0002ff28 <fcb_len_in_flash.isra.0>:
int fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len);
int fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
   2ff28:	2801      	cmp	r0, #1
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   2ff2a:	bf89      	itett	hi
   2ff2c:	f100 33ff 	addhi.w	r3, r0, #4294967295	; 0xffffffff
		return len;
   2ff30:	4608      	movls	r0, r1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   2ff32:	18c9      	addhi	r1, r1, r3
   2ff34:	4240      	neghi	r0, r0
   2ff36:	bf88      	it	hi
   2ff38:	4008      	andhi	r0, r1
}
   2ff3a:	4770      	bx	lr

0002ff3c <fcb_append_to_scratch>:
/*
 * Take one of the scratch blocks into use, if at all possible.
 */
int
fcb_append_to_scratch(struct fcb *fcb)
{
   2ff3c:	b538      	push	{r3, r4, r5, lr}
   2ff3e:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   2ff40:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2ff42:	f000 faf5 	bl	30530 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   2ff46:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   2ff48:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   2ff4a:	4298      	cmp	r0, r3
   2ff4c:	d015      	beq.n	2ff7a <fcb_append_to_scratch+0x3e>
	struct flash_sector *sector;
	int rc;

	sector = fcb_new_sector(fcb, 0);
	if (!sector) {
   2ff4e:	b1a0      	cbz	r0, 2ff7a <fcb_append_to_scratch+0x3e>
		return -ENOSPC;
	}
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   2ff50:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   2ff52:	4601      	mov	r1, r0
   2ff54:	3201      	adds	r2, #1
   2ff56:	b292      	uxth	r2, r2
   2ff58:	4620      	mov	r0, r4
   2ff5a:	f000 f96e 	bl	3023a <fcb_sector_hdr_init>
	if (rc) {
   2ff5e:	4602      	mov	r2, r0
   2ff60:	b948      	cbnz	r0, 2ff76 <fcb_append_to_scratch+0x3a>
		return rc;
	}
	fcb->f_active.fe_sector = sector;
	fcb->f_active.fe_elem_off = fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area));
   2ff62:	2108      	movs	r1, #8
   2ff64:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
	fcb->f_active.fe_sector = sector;
   2ff68:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active.fe_elem_off = fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area));
   2ff6a:	f7ff ffdd 	bl	2ff28 <fcb_len_in_flash.isra.0>
	fcb->f_active_id++;
   2ff6e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_elem_off = fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area));
   2ff70:	62a0      	str	r0, [r4, #40]	; 0x28
	fcb->f_active_id++;
   2ff72:	3301      	adds	r3, #1
   2ff74:	86a3      	strh	r3, [r4, #52]	; 0x34
	return 0;
}
   2ff76:	4610      	mov	r0, r2
   2ff78:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   2ff7a:	f06f 021b 	mvn.w	r2, #27
   2ff7e:	e7fa      	b.n	2ff76 <fcb_append_to_scratch+0x3a>

0002ff80 <fcb_append>:

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   2ff80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ff84:	b085      	sub	sp, #20
   2ff86:	4691      	mov	r9, r2
	struct flash_sector *sector;
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[MAX(8, fcb->f_align)];
   2ff88:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   2ff8c:	4604      	mov	r4, r0
	uint8_t tmp_str[MAX(8, fcb->f_align)];
   2ff8e:	2a08      	cmp	r2, #8
   2ff90:	bf38      	it	cc
   2ff92:	2208      	movcc	r2, #8
{
   2ff94:	460e      	mov	r6, r1
	uint8_t tmp_str[MAX(8, fcb->f_align)];
   2ff96:	1dd3      	adds	r3, r2, #7
   2ff98:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
{
   2ff9c:	af02      	add	r7, sp, #8
	uint8_t tmp_str[MAX(8, fcb->f_align)];
   2ff9e:	ebad 0d03 	sub.w	sp, sp, r3
   2ffa2:	f10d 0b08 	add.w	fp, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   2ffa6:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
   2ffaa:	4658      	mov	r0, fp
   2ffac:	f003 fe5f 	bl	33c6e <memset>

	/* Ensure defined value of padding bytes */
	memset(tmp_str, fcb->f_erase_value, sizeof(tmp_str));

	cnt = fcb_put_len(fcb, tmp_str, len);
   2ffb0:	4632      	mov	r2, r6
   2ffb2:	4659      	mov	r1, fp
   2ffb4:	4620      	mov	r0, r4
   2ffb6:	f000 f8fe 	bl	301b6 <fcb_put_len>
	if (cnt < 0) {
   2ffba:	1e05      	subs	r5, r0, #0
   2ffbc:	db71      	blt.n	300a2 <CONFIG_FLASH_LOAD_SIZE+0xa2>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   2ffbe:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   2ffc2:	b2a9      	uxth	r1, r5
   2ffc4:	4610      	mov	r0, r2
   2ffc6:	f7ff ffaf 	bl	2ff28 <fcb_len_in_flash.isra.0>
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   2ffca:	4631      	mov	r1, r6
	cnt = fcb_len_in_flash(fcb, cnt);
   2ffcc:	4680      	mov	r8, r0
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   2ffce:	4610      	mov	r0, r2
   2ffd0:	f7ff ffaa 	bl	2ff28 <fcb_len_in_flash.isra.0>
   2ffd4:	2101      	movs	r1, #1
   2ffd6:	4606      	mov	r6, r0
   2ffd8:	4610      	mov	r0, r2
   2ffda:	f7ff ffa5 	bl	2ff28 <fcb_len_in_flash.isra.0>
   2ffde:	4430      	add	r0, r6
   2ffe0:	b283      	uxth	r3, r0
   2ffe2:	607b      	str	r3, [r7, #4]

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   2ffe4:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   2ffe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2ffec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2fff0:	4650      	mov	r0, sl
   2fff2:	f7fc f9ff 	bl	2c3f4 <z_impl_k_mutex_lock>
	if (rc) {
   2fff6:	4605      	mov	r5, r0
   2fff8:	2800      	cmp	r0, #0
   2fffa:	d15f      	bne.n	300bc <CONFIG_FLASH_LOAD_SIZE+0xbc>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   2fffc:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
   30000:	687a      	ldr	r2, [r7, #4]
   30002:	4443      	add	r3, r8
   30004:	4413      	add	r3, r2
   30006:	6842      	ldr	r2, [r0, #4]
   30008:	4293      	cmp	r3, r2
   3000a:	d930      	bls.n	3006e <CONFIG_FLASH_LOAD_SIZE+0x6e>
	prev = NULL;
   3000c:	462e      	mov	r6, r5
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   3000e:	79a2      	ldrb	r2, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   30010:	4601      	mov	r1, r0
   30012:	4620      	mov	r0, r4
   30014:	603a      	str	r2, [r7, #0]
   30016:	f000 fa8b 	bl	30530 <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   3001a:	6a21      	ldr	r1, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   3001c:	2e00      	cmp	r6, #0
   3001e:	bf08      	it	eq
   30020:	4606      	moveq	r6, r0
		if (cur == fcb->f_oldest) {
   30022:	4288      	cmp	r0, r1
   30024:	d044      	beq.n	300b0 <CONFIG_FLASH_LOAD_SIZE+0xb0>
	} while (i++ < cnt);
   30026:	683a      	ldr	r2, [r7, #0]
   30028:	1c69      	adds	r1, r5, #1
   3002a:	42aa      	cmp	r2, r5
   3002c:	dc3e      	bgt.n	300ac <CONFIG_FLASH_LOAD_SIZE+0xac>
		if (!sector || (sector->fs_size <
   3002e:	2e00      	cmp	r6, #0
   30030:	d03e      	beq.n	300b0 <CONFIG_FLASH_LOAD_SIZE+0xb0>
			fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area)) + len + cnt)) {
   30032:	2108      	movs	r1, #8
   30034:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
   30038:	f7ff ff76 	bl	2ff28 <fcb_len_in_flash.isra.0>
   3003c:	687b      	ldr	r3, [r7, #4]
		if (!sector || (sector->fs_size <
   3003e:	6872      	ldr	r2, [r6, #4]
			fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area)) + len + cnt)) {
   30040:	4418      	add	r0, r3
   30042:	4440      	add	r0, r8
		if (!sector || (sector->fs_size <
   30044:	4282      	cmp	r2, r0
   30046:	d333      	bcc.n	300b0 <CONFIG_FLASH_LOAD_SIZE+0xb0>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   30048:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3004a:	4631      	mov	r1, r6
   3004c:	3201      	adds	r2, #1
   3004e:	4620      	mov	r0, r4
   30050:	b292      	uxth	r2, r2
   30052:	f000 f8f2 	bl	3023a <fcb_sector_hdr_init>
		if (rc) {
   30056:	4605      	mov	r5, r0
   30058:	bb00      	cbnz	r0, 3009c <CONFIG_FLASH_LOAD_SIZE+0x9c>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area));
   3005a:	2108      	movs	r1, #8
   3005c:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
		fcb->f_active.fe_sector = sector;
   30060:	6266      	str	r6, [r4, #36]	; 0x24
		fcb->f_active.fe_elem_off = fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area));
   30062:	f7ff ff61 	bl	2ff28 <fcb_len_in_flash.isra.0>
		fcb->f_active_id++;
   30066:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_elem_off = fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area));
   30068:	62a0      	str	r0, [r4, #40]	; 0x28
		fcb->f_active_id++;
   3006a:	3301      	adds	r3, #1
   3006c:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   3006e:	465b      	mov	r3, fp
   30070:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   30074:	4620      	mov	r0, r4
   30076:	f8cd 8000 	str.w	r8, [sp]
   3007a:	f000 f86a 	bl	30152 <fcb_flash_write>
	if (rc) {
   3007e:	4605      	mov	r5, r0
   30080:	b9c8      	cbnz	r0, 300b6 <CONFIG_FLASH_LOAD_SIZE+0xb6>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   30082:	6a63      	ldr	r3, [r4, #36]	; 0x24
   30084:	f8c9 3000 	str.w	r3, [r9]
	append_loc->fe_elem_off = active->fe_elem_off;
   30088:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   3008a:	f8c9 3004 	str.w	r3, [r9, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   3008e:	6aa0      	ldr	r0, [r4, #40]	; 0x28

	active->fe_elem_off = append_loc->fe_data_off + len;
   30090:	687b      	ldr	r3, [r7, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   30092:	4440      	add	r0, r8
	active->fe_elem_off = append_loc->fe_data_off + len;
   30094:	4403      	add	r3, r0
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   30096:	f8c9 0008 	str.w	r0, [r9, #8]
	active->fe_elem_off = append_loc->fe_data_off + len;
   3009a:	62a3      	str	r3, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   3009c:	4650      	mov	r0, sl
   3009e:	f7fc fa21 	bl	2c4e4 <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   300a2:	4628      	mov	r0, r5
   300a4:	370c      	adds	r7, #12
   300a6:	46bd      	mov	sp, r7
   300a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   300ac:	460d      	mov	r5, r1
   300ae:	e7af      	b.n	30010 <CONFIG_FLASH_LOAD_SIZE+0x10>
			rc = -ENOSPC;
   300b0:	f06f 051b 	mvn.w	r5, #27
   300b4:	e7f2      	b.n	3009c <CONFIG_FLASH_LOAD_SIZE+0x9c>
		rc = -EIO;
   300b6:	f06f 0504 	mvn.w	r5, #4
   300ba:	e7ef      	b.n	3009c <CONFIG_FLASH_LOAD_SIZE+0x9c>
		return -EINVAL;
   300bc:	f06f 0515 	mvn.w	r5, #21
   300c0:	e7ef      	b.n	300a2 <CONFIG_FLASH_LOAD_SIZE+0xa2>

000300c2 <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   300c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   300c4:	b083      	sub	sp, #12
   300c6:	4604      	mov	r4, r0
   300c8:	460d      	mov	r5, r1
	int rc;
	uint8_t crc8[fcb->f_align];
   300ca:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   300ce:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   300d0:	1dd3      	adds	r3, r2, #7
   300d2:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   300d6:	ebad 0d03 	sub.w	sp, sp, r3
   300da:	ae02      	add	r6, sp, #8
   300dc:	21ff      	movs	r1, #255	; 0xff
   300de:	4630      	mov	r0, r6
   300e0:	f003 fdc5 	bl	33c6e <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   300e4:	4632      	mov	r2, r6
   300e6:	4629      	mov	r1, r5
   300e8:	4620      	mov	r0, r4
   300ea:	f000 f972 	bl	303d2 <fcb_elem_crc8>
	if (rc) {
   300ee:	b988      	cbnz	r0, 30114 <fcb_append_finish+0x52>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   300f0:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
   300f4:	89a9      	ldrh	r1, [r5, #12]
   300f6:	4610      	mov	r0, r2
   300f8:	f7ff ff16 	bl	2ff28 <fcb_len_in_flash.isra.0>
   300fc:	68a9      	ldr	r1, [r5, #8]

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   300fe:	9200      	str	r2, [sp, #0]
   30100:	4633      	mov	r3, r6
   30102:	1842      	adds	r2, r0, r1
   30104:	4620      	mov	r0, r4
   30106:	6829      	ldr	r1, [r5, #0]
   30108:	f000 f823 	bl	30152 <fcb_flash_write>
	if (rc) {
		return -EIO;
   3010c:	2800      	cmp	r0, #0
   3010e:	bf18      	it	ne
   30110:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   30114:	3704      	adds	r7, #4
   30116:	46bd      	mov	sp, r7
   30118:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003011a <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   3011a:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3011c:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   3011e:	b110      	cbz	r0, 30126 <fcb_get_align+0xc>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   30120:	f000 fc01 	bl	30926 <flash_area_align>
   30124:	b2c0      	uxtb	r0, r0

	return align;
}
   30126:	bd08      	pop	{r3, pc}

00030128 <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   30128:	b570      	push	{r4, r5, r6, lr}
   3012a:	4614      	mov	r4, r2
   3012c:	461a      	mov	r2, r3
   3012e:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   30130:	684d      	ldr	r5, [r1, #4]
   30132:	18e6      	adds	r6, r4, r3
   30134:	42ae      	cmp	r6, r5
   30136:	d809      	bhi.n	3014c <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   30138:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3013a:	b120      	cbz	r0, 30146 <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   3013c:	6809      	ldr	r1, [r1, #0]
   3013e:	4421      	add	r1, r4
   30140:	f000 fbb0 	bl	308a4 <flash_area_read>

	if (rc != 0) {
   30144:	b108      	cbz	r0, 3014a <fcb_flash_read+0x22>
		return -EIO;
   30146:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3014a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3014c:	f06f 0015 	mvn.w	r0, #21
   30150:	e7fb      	b.n	3014a <fcb_flash_read+0x22>

00030152 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   30152:	b570      	push	{r4, r5, r6, lr}
   30154:	4614      	mov	r4, r2
   30156:	461a      	mov	r2, r3
   30158:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   3015a:	684d      	ldr	r5, [r1, #4]
   3015c:	18e6      	adds	r6, r4, r3
   3015e:	42ae      	cmp	r6, r5
   30160:	d809      	bhi.n	30176 <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   30162:	6b80      	ldr	r0, [r0, #56]	; 0x38
   30164:	b120      	cbz	r0, 30170 <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   30166:	6809      	ldr	r1, [r1, #0]
   30168:	4421      	add	r1, r4
   3016a:	f000 fbb0 	bl	308ce <flash_area_write>

	if (rc != 0) {
   3016e:	b108      	cbz	r0, 30174 <fcb_flash_write+0x22>
		return -EIO;
   30170:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   30174:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   30176:	f06f 0015 	mvn.w	r0, #21
   3017a:	e7fb      	b.n	30174 <fcb_flash_write+0x22>

0003017c <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   3017c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3017e:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   30180:	b120      	cbz	r0, 3018c <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   30182:	e9d1 1200 	ldrd	r1, r2, [r1]
   30186:	f000 fbb7 	bl	308f8 <flash_area_erase>

	if (rc != 0) {
   3018a:	b108      	cbz	r0, 30190 <fcb_erase_sector+0x14>
		return -EIO;
   3018c:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   30190:	bd08      	pop	{r3, pc}

00030192 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   30192:	b538      	push	{r3, r4, r5, lr}
   30194:	4604      	mov	r4, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   30196:	2500      	movs	r5, #0
	fa = fcb->f_active.fe_sector;
   30198:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3019a:	7963      	ldrb	r3, [r4, #5]
   3019c:	42ab      	cmp	r3, r5
   3019e:	dc01      	bgt.n	301a4 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   301a0:	4628      	mov	r0, r5
   301a2:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   301a4:	4620      	mov	r0, r4
   301a6:	f000 f9c3 	bl	30530 <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   301aa:	6a23      	ldr	r3, [r4, #32]
		fa = fcb_getnext_sector(fcb, fa);
   301ac:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   301ae:	4283      	cmp	r3, r0
   301b0:	d0f6      	beq.n	301a0 <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   301b2:	3501      	adds	r5, #1
   301b4:	e7f1      	b.n	3019a <fcb_free_sector_cnt+0x8>

000301b6 <fcb_put_len>:
 * and if there is any data at all or both bytes are equal to erase value.
 */
int
fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   301b6:	2a7f      	cmp	r2, #127	; 0x7f
{
   301b8:	b510      	push	{r4, lr}
	if (len < 0x80) {
   301ba:	d806      	bhi.n	301ca <fcb_put_len+0x14>
		buf[0] = len ^ ~fcb->f_erase_value;
   301bc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 1;
   301c0:	2001      	movs	r0, #1
		buf[0] = len ^ ~fcb->f_erase_value;
   301c2:	405a      	eors	r2, r3
   301c4:	43d2      	mvns	r2, r2
   301c6:	700a      	strb	r2, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
		return 2;
	} else {
		return -EINVAL;
	}
}
   301c8:	bd10      	pop	{r4, pc}
	} else if (len < FCB_MAX_LEN) {
   301ca:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   301ce:	429a      	cmp	r2, r3
   301d0:	d80e      	bhi.n	301f0 <fcb_put_len+0x3a>
		buf[0] = (len | 0x80) ^ ~fcb->f_erase_value;
   301d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   301d6:	f062 047f 	orn	r4, r2, #127	; 0x7f
   301da:	4063      	eors	r3, r4
   301dc:	43db      	mvns	r3, r3
   301de:	700b      	strb	r3, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   301e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 2;
   301e4:	2002      	movs	r0, #2
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   301e6:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
   301ea:	43d2      	mvns	r2, r2
   301ec:	704a      	strb	r2, [r1, #1]
		return 2;
   301ee:	e7eb      	b.n	301c8 <fcb_put_len+0x12>
		return -EINVAL;
   301f0:	f06f 0015 	mvn.w	r0, #21
   301f4:	e7e8      	b.n	301c8 <fcb_put_len+0x12>

000301f6 <fcb_get_len>:

int
fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len)
{
   301f6:	b530      	push	{r4, r5, lr}
	int rc;
	if ((buf[0] ^ ~fcb->f_erase_value) & 0x80) {
   301f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   301fc:	780d      	ldrb	r5, [r1, #0]
   301fe:	ea83 0405 	eor.w	r4, r3, r5
   30202:	f014 0f80 	tst.w	r4, #128	; 0x80
   30206:	4620      	mov	r0, r4
   30208:	d10f      	bne.n	3022a <fcb_get_len+0x34>
		if ((buf[0] == fcb->f_erase_value) &&
   3020a:	42ab      	cmp	r3, r5
		    (buf[1] == fcb->f_erase_value)) {
   3020c:	7849      	ldrb	r1, [r1, #1]
		if ((buf[0] == fcb->f_erase_value) &&
   3020e:	d101      	bne.n	30214 <fcb_get_len+0x1e>
   30210:	428b      	cmp	r3, r1
   30212:	d00f      	beq.n	30234 <fcb_get_len+0x3e>
			return -ENOTSUP;
		}
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   30214:	43c0      	mvns	r0, r0
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   30216:	404b      	eors	r3, r1
   30218:	01db      	lsls	r3, r3, #7
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3021a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   3021e:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   30222:	4303      	orrs	r3, r0
		rc = 2;
   30224:	2002      	movs	r0, #2
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   30226:	8013      	strh	r3, [r2, #0]
	} else {
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
		rc = 1;
	}
	return rc;
}
   30228:	bd30      	pop	{r4, r5, pc}
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   3022a:	43e3      	mvns	r3, r4
   3022c:	b2db      	uxtb	r3, r3
		rc = 1;
   3022e:	2001      	movs	r0, #1
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   30230:	8013      	strh	r3, [r2, #0]
		rc = 1;
   30232:	e7f9      	b.n	30228 <fcb_get_len+0x32>
			return -ENOTSUP;
   30234:	f06f 0085 	mvn.w	r0, #133	; 0x85
   30238:	e7f6      	b.n	30228 <fcb_get_len+0x32>

0003023a <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   3023a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const uint8_t ev = fcb->f_erase_value;
   3023c:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
	return (fcb->f_magic ^ ~MK32(ev));
   30240:	6806      	ldr	r6, [r0, #0]
   30242:	0423      	lsls	r3, r4, #16
   30244:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   30248:	4323      	orrs	r3, r4
   3024a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   3024e:	4073      	eors	r3, r6
   30250:	43db      	mvns	r3, r3
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb_flash_magic(fcb);
   30252:	9302      	str	r3, [sp, #8]
	fda.fd_ver = fcb->f_version;
   30254:	7903      	ldrb	r3, [r0, #4]
	fda._pad = fcb->f_erase_value;
	fda.fd_id = id;
   30256:	f8ad 200e 	strh.w	r2, [sp, #14]
	fda.fd_ver = fcb->f_version;
   3025a:	f88d 300c 	strb.w	r3, [sp, #12]

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3025e:	2308      	movs	r3, #8
   30260:	2200      	movs	r2, #0
   30262:	9300      	str	r3, [sp, #0]
   30264:	446b      	add	r3, sp
	fda._pad = fcb->f_erase_value;
   30266:	f88d 400d 	strb.w	r4, [sp, #13]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3026a:	f7ff ff72 	bl	30152 <fcb_flash_write>
	if (rc != 0) {
		return -EIO;
   3026e:	2800      	cmp	r0, #0
	}
	return 0;
}
   30270:	bf18      	it	ne
   30272:	f06f 0004 	mvnne.w	r0, #4
   30276:	b004      	add	sp, #16
   30278:	bd70      	pop	{r4, r5, r6, pc}

0003027a <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   3027a:	b530      	push	{r4, r5, lr}
   3027c:	4605      	mov	r5, r0
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   3027e:	4614      	mov	r4, r2
{
   30280:	b085      	sub	sp, #20
	if (!fdap) {
   30282:	b902      	cbnz	r2, 30286 <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   30284:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   30286:	2308      	movs	r3, #8
   30288:	2200      	movs	r2, #0
   3028a:	9300      	str	r3, [sp, #0]
   3028c:	4628      	mov	r0, r5
   3028e:	4623      	mov	r3, r4
   30290:	f7ff ff4a 	bl	30128 <fcb_flash_read>
	if (rc) {
   30294:	b9a0      	cbnz	r0, 302c0 <fcb_sector_hdr_read+0x46>
		return -EIO;
	}
	if (fdap->fd_magic == MK32(fcb->f_erase_value)) {
   30296:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   3029a:	6821      	ldr	r1, [r4, #0]
   3029c:	0413      	lsls	r3, r2, #16
   3029e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   302a2:	4313      	orrs	r3, r2
   302a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   302a8:	4299      	cmp	r1, r3
   302aa:	d007      	beq.n	302bc <fcb_sector_hdr_read+0x42>
   302ac:	682a      	ldr	r2, [r5, #0]
   302ae:	4053      	eors	r3, r2
   302b0:	43db      	mvns	r3, r3
		return 0;
	}
	if (fdap->fd_magic != fcb_flash_magic(fcb)) {
		return -ENOMSG;
   302b2:	4299      	cmp	r1, r3
   302b4:	bf0c      	ite	eq
   302b6:	2001      	moveq	r0, #1
   302b8:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   302bc:	b005      	add	sp, #20
   302be:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   302c0:	f06f 0004 	mvn.w	r0, #4
   302c4:	e7fa      	b.n	302bc <fcb_sector_hdr_read+0x42>

000302c6 <fcb_init>:
{
   302c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   302ca:	688b      	ldr	r3, [r1, #8]
{
   302cc:	460c      	mov	r4, r1
   302ce:	b085      	sub	sp, #20
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   302d0:	b92b      	cbnz	r3, 302de <fcb_init+0x18>
		return -EINVAL;
   302d2:	f06f 0515 	mvn.w	r5, #21
}
   302d6:	4628      	mov	r0, r5
   302d8:	b005      	add	sp, #20
   302da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   302de:	794b      	ldrb	r3, [r1, #5]
   302e0:	798a      	ldrb	r2, [r1, #6]
   302e2:	1a9b      	subs	r3, r3, r2
   302e4:	2b00      	cmp	r3, #0
   302e6:	ddf4      	ble.n	302d2 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   302e8:	3138      	adds	r1, #56	; 0x38
   302ea:	b2c0      	uxtb	r0, r0
   302ec:	f7f0 fd4e 	bl	20d8c <flash_area_open>
	if (rc != 0) {
   302f0:	4606      	mov	r6, r0
   302f2:	2800      	cmp	r0, #0
   302f4:	d1ed      	bne.n	302d2 <fcb_init+0xc>
	fparam = flash_get_parameters(fcb->fap->fa_dev);
   302f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   302f8:	68d8      	ldr	r0, [r3, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   302fa:	6883      	ldr	r3, [r0, #8]
   302fc:	68db      	ldr	r3, [r3, #12]
   302fe:	4798      	blx	r3
	fcb->f_erase_value = fparam->erase_value;
   30300:	7903      	ldrb	r3, [r0, #4]
	align = fcb_get_align(fcb);
   30302:	4620      	mov	r0, r4
	fcb->f_erase_value = fparam->erase_value;
   30304:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	align = fcb_get_align(fcb);
   30308:	f7ff ff07 	bl	3011a <fcb_get_align>
	if (align == 0U) {
   3030c:	4607      	mov	r7, r0
   3030e:	2800      	cmp	r0, #0
   30310:	d0df      	beq.n	302d2 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   30312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   30316:	46b3      	mov	fp, r6
   30318:	46b0      	mov	r8, r6
	int oldest = -1, newest = -1;
   3031a:	4699      	mov	r9, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3031c:	7962      	ldrb	r2, [r4, #5]
   3031e:	42b2      	cmp	r2, r6
   30320:	dc2b      	bgt.n	3037a <fcb_init+0xb4>
	if (oldest < 0) {
   30322:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   30326:	d150      	bne.n	303ca <fcb_init+0x104>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   30328:	f8d4 8008 	ldr.w	r8, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   3032c:	2200      	movs	r2, #0
   3032e:	4641      	mov	r1, r8
   30330:	4620      	mov	r0, r4
   30332:	f7ff ff82 	bl	3023a <fcb_sector_hdr_init>
		if (rc) {
   30336:	4605      	mov	r5, r0
   30338:	2800      	cmp	r0, #0
   3033a:	d1cc      	bne.n	302d6 <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   3033c:	46c3      	mov	fp, r8
	if (fcb->f_align <= 1U) {
   3033e:	2f01      	cmp	r7, #1
	fcb->f_align = align;
   30340:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
		return len;
   30344:	bf0c      	ite	eq
   30346:	2708      	moveq	r7, #8
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   30348:	1df8      	addne	r0, r7, #7
	fcb->f_active.fe_sector = newest_sector;
   3034a:	e9c4 8b08 	strd	r8, fp, [r4, #32]
   3034e:	bf1c      	itt	ne
   30350:	427f      	negne	r7, r7
   30352:	4007      	andne	r7, r0
	fcb->f_active.fe_elem_off = fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area));
   30354:	62a7      	str	r7, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   30356:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   30358:	f104 0624 	add.w	r6, r4, #36	; 0x24
   3035c:	4631      	mov	r1, r6
   3035e:	4620      	mov	r0, r4
   30360:	f000 f8c8 	bl	304f4 <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   30364:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   30368:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   3036a:	d030      	beq.n	303ce <fcb_init+0x108>
		if (rc != 0) {
   3036c:	2800      	cmp	r0, #0
   3036e:	d0f5      	beq.n	3035c <fcb_init+0x96>
	return z_impl_k_mutex_init(mutex);
   30370:	f104 000c 	add.w	r0, r4, #12
   30374:	f003 f80a 	bl	3338c <z_impl_k_mutex_init>
   30378:	e7ad      	b.n	302d6 <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   3037a:	68a1      	ldr	r1, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   3037c:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   3037e:	eb01 0ac6 	add.w	sl, r1, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   30382:	4651      	mov	r1, sl
   30384:	aa02      	add	r2, sp, #8
   30386:	9301      	str	r3, [sp, #4]
   30388:	f7ff ff77 	bl	3027a <fcb_sector_hdr_read>
		if (rc < 0) {
   3038c:	1e05      	subs	r5, r0, #0
   3038e:	dba2      	blt.n	302d6 <fcb_init+0x10>
		if (rc == 0) {
   30390:	9b01      	ldr	r3, [sp, #4]
   30392:	d008      	beq.n	303a6 <fcb_init+0xe0>
		if (oldest < 0) {
   30394:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
			oldest = newest = fda.fd_id;
   30398:	f8bd 200e 	ldrh.w	r2, [sp, #14]
		if (oldest < 0) {
   3039c:	d105      	bne.n	303aa <fcb_init+0xe4>
			oldest = newest = fda.fd_id;
   3039e:	4691      	mov	r9, r2
			oldest_sector = newest_sector = sector;
   303a0:	46d3      	mov	fp, sl
   303a2:	46d0      	mov	r8, sl
			oldest = newest = fda.fd_id;
   303a4:	4613      	mov	r3, r2
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   303a6:	3601      	adds	r6, #1
   303a8:	e7b8      	b.n	3031c <fcb_init+0x56>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   303aa:	b215      	sxth	r5, r2
   303ac:	b218      	sxth	r0, r3
   303ae:	1a28      	subs	r0, r5, r0
   303b0:	2800      	cmp	r0, #0
   303b2:	dd02      	ble.n	303ba <fcb_init+0xf4>
			newest = fda.fd_id;
   303b4:	4613      	mov	r3, r2
			newest_sector = sector;
   303b6:	46d3      	mov	fp, sl
   303b8:	e7f5      	b.n	303a6 <fcb_init+0xe0>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   303ba:	fa0f f189 	sxth.w	r1, r9
   303be:	1b49      	subs	r1, r1, r5
			oldest = fda.fd_id;
   303c0:	2900      	cmp	r1, #0
   303c2:	bfc4      	itt	gt
   303c4:	4691      	movgt	r9, r2
   303c6:	46d0      	movgt	r8, sl
   303c8:	e7ed      	b.n	303a6 <fcb_init+0xe0>
   303ca:	461d      	mov	r5, r3
   303cc:	e7b7      	b.n	3033e <fcb_init+0x78>
			rc = 0;
   303ce:	2500      	movs	r5, #0
   303d0:	e7ce      	b.n	30370 <fcb_init+0xaa>

000303d2 <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   303d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   303d6:	460c      	mov	r4, r1
   303d8:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   303da:	e9d1 1200 	ldrd	r1, r2, [r1]
   303de:	684b      	ldr	r3, [r1, #4]
   303e0:	1c95      	adds	r5, r2, #2
   303e2:	429d      	cmp	r5, r3
{
   303e4:	4606      	mov	r6, r0
   303e6:	b08c      	sub	sp, #48	; 0x30
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   303e8:	d84c      	bhi.n	30484 <fcb_elem_crc8+0xb2>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   303ea:	2302      	movs	r3, #2
   303ec:	9300      	str	r3, [sp, #0]
   303ee:	ab04      	add	r3, sp, #16
   303f0:	f7ff fe9a 	bl	30128 <fcb_flash_read>
	if (rc) {
   303f4:	b120      	cbz	r0, 30400 <fcb_elem_crc8+0x2e>
		return -EIO;
   303f6:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   303fa:	b00c      	add	sp, #48	; 0x30
   303fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(fcb, tmp_str, &len);
   30400:	4630      	mov	r0, r6
   30402:	f10d 020e 	add.w	r2, sp, #14
   30406:	a904      	add	r1, sp, #16
   30408:	f7ff fef5 	bl	301f6 <fcb_get_len>
	if (cnt < 0) {
   3040c:	2800      	cmp	r0, #0
   3040e:	dbf4      	blt.n	303fa <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   30410:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   30414:	b283      	uxth	r3, r0
   30416:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   30418:	bf84      	itt	hi
   3041a:	f102 35ff 	addhi.w	r5, r2, #4294967295	; 0xffffffff
   3041e:	195b      	addhi	r3, r3, r5
   30420:	6861      	ldr	r1, [r4, #4]
   30422:	bf84      	itt	hi
   30424:	4252      	neghi	r2, r2
   30426:	4013      	andhi	r3, r2
   30428:	440b      	add	r3, r1
   3042a:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   3042c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   30430:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   30432:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   30434:	20ff      	movs	r0, #255	; 0xff
   30436:	a904      	add	r1, sp, #16
   30438:	f7ef fe4c 	bl	200d4 <crc8_ccitt>
   3043c:	4605      	mov	r5, r0
	off = loc->fe_data_off;
   3043e:	f8d4 8008 	ldr.w	r8, [r4, #8]
	end = loc->fe_data_off + len;
   30442:	f8bd a00e 	ldrh.w	sl, [sp, #14]
   30446:	44c2      	add	sl, r8
	for (; off < end; off += blk_sz) {
   30448:	45d0      	cmp	r8, sl
   3044a:	d302      	bcc.n	30452 <fcb_elem_crc8+0x80>
	return 0;
   3044c:	2000      	movs	r0, #0
	*c8p = crc8;
   3044e:	703d      	strb	r5, [r7, #0]
	return 0;
   30450:	e7d3      	b.n	303fa <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   30452:	ebaa 0908 	sub.w	r9, sl, r8
   30456:	f1b9 0f20 	cmp.w	r9, #32
   3045a:	bf28      	it	cs
   3045c:	f04f 0920 	movcs.w	r9, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   30460:	4642      	mov	r2, r8
   30462:	4630      	mov	r0, r6
   30464:	6821      	ldr	r1, [r4, #0]
   30466:	f8cd 9000 	str.w	r9, [sp]
   3046a:	ab04      	add	r3, sp, #16
   3046c:	f7ff fe5c 	bl	30128 <fcb_flash_read>
		if (rc) {
   30470:	2800      	cmp	r0, #0
   30472:	d1c0      	bne.n	303f6 <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   30474:	4628      	mov	r0, r5
   30476:	464a      	mov	r2, r9
   30478:	a904      	add	r1, sp, #16
   3047a:	f7ef fe2b 	bl	200d4 <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   3047e:	44c8      	add	r8, r9
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   30480:	4605      	mov	r5, r0
	for (; off < end; off += blk_sz) {
   30482:	e7e1      	b.n	30448 <fcb_elem_crc8+0x76>
		return -ENOTSUP;
   30484:	f06f 0085 	mvn.w	r0, #133	; 0x85
   30488:	e7b7      	b.n	303fa <fcb_elem_crc8+0x28>

0003048a <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   3048a:	b530      	push	{r4, r5, lr}
   3048c:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   3048e:	f10d 020e 	add.w	r2, sp, #14
{
   30492:	4605      	mov	r5, r0
   30494:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   30496:	f7ff ff9c 	bl	303d2 <fcb_elem_crc8>
	if (rc) {
   3049a:	b9e0      	cbnz	r0, 304d6 <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3049c:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   304a0:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   304a2:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   304a4:	bf81      	itttt	hi
   304a6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
   304aa:	18d2      	addhi	r2, r2, r3
   304ac:	425b      	neghi	r3, r3
   304ae:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   304b0:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   304b2:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   304b4:	9300      	str	r3, [sp, #0]
   304b6:	440a      	add	r2, r1
   304b8:	4628      	mov	r0, r5
   304ba:	6821      	ldr	r1, [r4, #0]
   304bc:	f10d 030f 	add.w	r3, sp, #15
   304c0:	f7ff fe32 	bl	30128 <fcb_flash_read>
	if (rc) {
   304c4:	b948      	cbnz	r0, 304da <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   304c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   304ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
		return -EBADMSG;
   304ce:	429a      	cmp	r2, r3
   304d0:	bf18      	it	ne
   304d2:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   304d6:	b005      	add	sp, #20
   304d8:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   304da:	f06f 0004 	mvn.w	r0, #4
   304de:	e7fa      	b.n	304d6 <fcb_elem_info+0x4c>

000304e0 <fcb_len_in_flash.isra.0>:
	if (fcb->f_align <= 1U) {
   304e0:	2801      	cmp	r0, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   304e2:	bf89      	itett	hi
   304e4:	f100 33ff 	addhi.w	r3, r0, #4294967295	; 0xffffffff
		return len;
   304e8:	4608      	movls	r0, r1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   304ea:	18c9      	addhi	r1, r1, r3
   304ec:	4240      	neghi	r0, r0
   304ee:	bf88      	it	hi
   304f0:	4008      	andhi	r0, r1
}
   304f2:	4770      	bx	lr

000304f4 <fcb_getnext_in_sector>:
#include <zephyr/fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   304f4:	b570      	push	{r4, r5, r6, lr}
   304f6:	4604      	mov	r4, r0
   304f8:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   304fa:	f7ff ffc6 	bl	3048a <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   304fe:	b110      	cbz	r0, 30506 <fcb_getnext_in_sector+0x12>
   30500:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   30504:	d113      	bne.n	3052e <fcb_getnext_in_sector+0x3a>
		do {
			loc->fe_elem_off = loc->fe_data_off +
   30506:	f894 6036 	ldrb.w	r6, [r4, #54]	; 0x36
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3050a:	89a9      	ldrh	r1, [r5, #12]
   3050c:	4630      	mov	r0, r6
   3050e:	f7ff ffe7 	bl	304e0 <fcb_len_in_flash.isra.0>
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
   30512:	2101      	movs	r1, #1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   30514:	4602      	mov	r2, r0
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
   30516:	4630      	mov	r0, r6
   30518:	f7ff ffe2 	bl	304e0 <fcb_len_in_flash.isra.0>
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3051c:	4402      	add	r2, r0
   3051e:	68a8      	ldr	r0, [r5, #8]
			rc = fcb_elem_info(fcb, loc);
   30520:	4629      	mov	r1, r5
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   30522:	4402      	add	r2, r0
			loc->fe_elem_off = loc->fe_data_off +
   30524:	606a      	str	r2, [r5, #4]
			rc = fcb_elem_info(fcb, loc);
   30526:	4620      	mov	r0, r4
   30528:	f7ff ffaf 	bl	3048a <fcb_elem_info>
			if (rc != -EBADMSG) {
   3052c:	e7e8      	b.n	30500 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   3052e:	bd70      	pop	{r4, r5, r6, pc}

00030530 <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   30530:	6882      	ldr	r2, [r0, #8]
   30532:	7943      	ldrb	r3, [r0, #5]
	sector++;
   30534:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   30536:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   3053a:	4299      	cmp	r1, r3
   3053c:	bf34      	ite	cc
   3053e:	4608      	movcc	r0, r1
   30540:	4610      	movcs	r0, r2
   30542:	4770      	bx	lr

00030544 <fcb_getnext_nolock>:

int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
   30544:	b538      	push	{r3, r4, r5, lr}
	int rc;

	if (loc->fe_sector == NULL) {
   30546:	680b      	ldr	r3, [r1, #0]
{
   30548:	4605      	mov	r5, r0
   3054a:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   3054c:	b90b      	cbnz	r3, 30552 <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   3054e:	6a03      	ldr	r3, [r0, #32]
   30550:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   30552:	6863      	ldr	r3, [r4, #4]
   30554:	b97b      	cbnz	r3, 30576 <fcb_getnext_nolock+0x32>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area));
   30556:	f895 0036 	ldrb.w	r0, [r5, #54]	; 0x36
   3055a:	2108      	movs	r1, #8
   3055c:	f7ff ffc0 	bl	304e0 <fcb_len_in_flash.isra.0>
		rc = fcb_elem_info(fcb, loc);
   30560:	4621      	mov	r1, r4
		loc->fe_elem_off = fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area));
   30562:	6060      	str	r0, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   30564:	4628      	mov	r0, r5
   30566:	f7ff ff90 	bl	3048a <fcb_elem_info>
		switch (rc) {
   3056a:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3056e:	d016      	beq.n	3059e <fcb_getnext_nolock+0x5a>
   30570:	b950      	cbnz	r0, 30588 <fcb_getnext_nolock+0x44>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   30572:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   30574:	bd38      	pop	{r3, r4, r5, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   30576:	4621      	mov	r1, r4
   30578:	4628      	mov	r0, r5
   3057a:	f7ff ffbb 	bl	304f4 <fcb_getnext_in_sector>
		if (rc == 0) {
   3057e:	2800      	cmp	r0, #0
   30580:	d0f7      	beq.n	30572 <fcb_getnext_nolock+0x2e>
		if (rc == -ENOTSUP) {
   30582:	f110 0f86 	cmn.w	r0, #134	; 0x86
   30586:	d108      	bne.n	3059a <fcb_getnext_nolock+0x56>
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   30588:	6821      	ldr	r1, [r4, #0]
   3058a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3058c:	4299      	cmp	r1, r3
   3058e:	d00f      	beq.n	305b0 <fcb_getnext_nolock+0x6c>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   30590:	4628      	mov	r0, r5
   30592:	f7ff ffcd 	bl	30530 <fcb_getnext_sector>
   30596:	6020      	str	r0, [r4, #0]
			loc->fe_elem_off = fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area));
   30598:	e7dd      	b.n	30556 <fcb_getnext_nolock+0x12>
	while (rc == -EBADMSG) {
   3059a:	304d      	adds	r0, #77	; 0x4d
   3059c:	d1e9      	bne.n	30572 <fcb_getnext_nolock+0x2e>
		rc = fcb_getnext_in_sector(fcb, loc);
   3059e:	4621      	mov	r1, r4
   305a0:	4628      	mov	r0, r5
   305a2:	f7ff ffa7 	bl	304f4 <fcb_getnext_in_sector>
		if (rc == 0) {
   305a6:	2800      	cmp	r0, #0
   305a8:	d0e3      	beq.n	30572 <fcb_getnext_nolock+0x2e>
		if (rc != -EBADMSG) {
   305aa:	304d      	adds	r0, #77	; 0x4d
   305ac:	d0f7      	beq.n	3059e <fcb_getnext_nolock+0x5a>
next_sector:
   305ae:	e7eb      	b.n	30588 <fcb_getnext_nolock+0x44>
				return -ENOTSUP;
   305b0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   305b4:	e7de      	b.n	30574 <fcb_getnext_nolock+0x30>

000305b6 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   305b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   305b8:	4604      	mov	r4, r0
   305ba:	9101      	str	r1, [sp, #4]
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   305bc:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   305c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   305c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   305c8:	4628      	mov	r0, r5
   305ca:	f7fb ff13 	bl	2c3f4 <z_impl_k_mutex_lock>
	if (rc) {
   305ce:	b950      	cbnz	r0, 305e6 <fcb_getnext+0x30>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   305d0:	4620      	mov	r0, r4
   305d2:	9901      	ldr	r1, [sp, #4]
   305d4:	f7ff ffb6 	bl	30544 <fcb_getnext_nolock>
   305d8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   305da:	4628      	mov	r0, r5
   305dc:	f7fb ff82 	bl	2c4e4 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   305e0:	4620      	mov	r0, r4
   305e2:	b003      	add	sp, #12
   305e4:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   305e6:	f06f 0415 	mvn.w	r4, #21
   305ea:	e7f9      	b.n	305e0 <fcb_getnext+0x2a>

000305ec <fcb_rotate>:
#include <zephyr/fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   305ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   305ee:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   305f0:	f100 060c 	add.w	r6, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   305f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   305f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   305fc:	4630      	mov	r0, r6
   305fe:	f7fb fef9 	bl	2c3f4 <z_impl_k_mutex_lock>
	if (rc) {
   30602:	2800      	cmp	r0, #0
   30604:	d130      	bne.n	30668 <fcb_rotate+0x7c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   30606:	4620      	mov	r0, r4
   30608:	6a21      	ldr	r1, [r4, #32]
   3060a:	f7ff fdb7 	bl	3017c <fcb_erase_sector>
	if (rc) {
   3060e:	bb40      	cbnz	r0, 30662 <fcb_rotate+0x76>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   30610:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   30614:	4299      	cmp	r1, r3
   30616:	d119      	bne.n	3064c <fcb_rotate+0x60>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   30618:	4620      	mov	r0, r4
   3061a:	f7ff ff89 	bl	30530 <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3061e:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   30620:	4601      	mov	r1, r0
   30622:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   30624:	4607      	mov	r7, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   30626:	b292      	uxth	r2, r2
   30628:	4620      	mov	r0, r4
   3062a:	f7ff fe06 	bl	3023a <fcb_sector_hdr_init>
		if (rc) {
   3062e:	4605      	mov	r5, r0
   30630:	b990      	cbnz	r0, 30658 <fcb_rotate+0x6c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
   30632:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   30636:	6267      	str	r7, [r4, #36]	; 0x24
	if (fcb->f_align <= 1U) {
   30638:	2b01      	cmp	r3, #1
		return len;
   3063a:	bf91      	iteee	ls
   3063c:	2308      	movls	r3, #8
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3063e:	1dda      	addhi	r2, r3, #7
   30640:	425b      	neghi	r3, r3
   30642:	4013      	andhi	r3, r2
		fcb->f_active.fe_elem_off = fcb_len_in_flash(fcb, sizeof(struct fcb_disk_area));
   30644:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   30646:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   30648:	3301      	adds	r3, #1
   3064a:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   3064c:	4620      	mov	r0, r4
   3064e:	6a21      	ldr	r1, [r4, #32]
   30650:	f7ff ff6e 	bl	30530 <fcb_getnext_sector>
   30654:	2500      	movs	r5, #0
   30656:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   30658:	4630      	mov	r0, r6
   3065a:	f7fb ff43 	bl	2c4e4 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   3065e:	4628      	mov	r0, r5
   30660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   30662:	f06f 0504 	mvn.w	r5, #4
   30666:	e7f7      	b.n	30658 <fcb_rotate+0x6c>
		return -EINVAL;
   30668:	f06f 0515 	mvn.w	r5, #21
   3066c:	e7f7      	b.n	3065e <fcb_rotate+0x72>

0003066e <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   3066e:	f7f0 bb7d 	b.w	20d6c <socket_offload_getaddrinfo>

00030672 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   30672:	f7f0 bb85 	b.w	20d80 <socket_offload_freeaddrinfo>

00030676 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   30676:	f7fb bebd 	b.w	2c3f4 <z_impl_k_mutex_lock>

0003067a <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   3067a:	f7fb bf33 	b.w	2c4e4 <z_impl_k_mutex_unlock>

0003067e <z_impl_zsock_close>:

	return 0;
}

int z_impl_zsock_close(int sock)
{
   3067e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   30680:	4669      	mov	r1, sp
   30682:	aa01      	add	r2, sp, #4
{
   30684:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   30686:	f7ef fd6b 	bl	20160 <z_get_fd_obj_and_vtable>
	struct k_mutex *lock;
	void *ctx;
	int ret;

	ctx = get_sock_vtable(sock, &vtable, &lock);
	if (ctx == NULL) {
   3068a:	4604      	mov	r4, r0
   3068c:	b940      	cbnz	r0, 306a0 <z_impl_zsock_close+0x22>
		errno = EBADF;
   3068e:	f000 fb14 	bl	30cba <__errno>
   30692:	2309      	movs	r3, #9
		return -1;
   30694:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		errno = EBADF;
   30698:	6003      	str	r3, [r0, #0]
	k_mutex_unlock(lock);

	z_free_fd(sock);

	return ret;
}
   3069a:	4620      	mov	r0, r4
   3069c:	b003      	add	sp, #12
   3069e:	bd30      	pop	{r4, r5, pc}
	(void)k_mutex_lock(lock, K_FOREVER);
   306a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   306a4:	9801      	ldr	r0, [sp, #4]
   306a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   306aa:	f7ff ffe4 	bl	30676 <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->fd_vtable.close(ctx);
   306ae:	9b00      	ldr	r3, [sp, #0]
   306b0:	4620      	mov	r0, r4
   306b2:	689b      	ldr	r3, [r3, #8]
   306b4:	4798      	blx	r3
   306b6:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   306b8:	9801      	ldr	r0, [sp, #4]
   306ba:	f7ff ffde 	bl	3067a <k_mutex_unlock.isra.0>
	z_free_fd(sock);
   306be:	4628      	mov	r0, r5
   306c0:	f7ef fdb8 	bl	20234 <z_free_fd>
	return ret;
   306c4:	e7e9      	b.n	3069a <z_impl_zsock_close+0x1c>

000306c6 <z_impl_zsock_shutdown>:
}
#include <syscalls/zsock_close_mrsh.c>
#endif /* CONFIG_USERSPACE */

int z_impl_zsock_shutdown(int sock, int how)
{
   306c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   306c8:	460d      	mov	r5, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   306ca:	aa01      	add	r2, sp, #4
   306cc:	4669      	mov	r1, sp
   306ce:	f7ef fd47 	bl	20160 <z_get_fd_obj_and_vtable>
	struct k_mutex *lock;
	void *ctx;
	int ret;

	ctx = get_sock_vtable(sock, &vtable, &lock);
	if (ctx == NULL) {
   306d2:	4604      	mov	r4, r0
   306d4:	b940      	cbnz	r0, 306e8 <z_impl_zsock_shutdown+0x22>
		errno = EBADF;
   306d6:	f000 faf0 	bl	30cba <__errno>
   306da:	2309      	movs	r3, #9
		return -1;
	}

	if (!vtable->shutdown) {
		errno = ENOTSUP;
		return -1;
   306dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		errno = ENOTSUP;
   306e0:	6003      	str	r3, [r0, #0]
	ret = vtable->shutdown(ctx, how);

	k_mutex_unlock(lock);

	return ret;
}
   306e2:	4620      	mov	r0, r4
   306e4:	b003      	add	sp, #12
   306e6:	bd30      	pop	{r4, r5, pc}
	if (!vtable->shutdown) {
   306e8:	9b00      	ldr	r3, [sp, #0]
   306ea:	691b      	ldr	r3, [r3, #16]
   306ec:	b91b      	cbnz	r3, 306f6 <z_impl_zsock_shutdown+0x30>
		errno = ENOTSUP;
   306ee:	f000 fae4 	bl	30cba <__errno>
   306f2:	2386      	movs	r3, #134	; 0x86
   306f4:	e7f2      	b.n	306dc <z_impl_zsock_shutdown+0x16>
	(void)k_mutex_lock(lock, K_FOREVER);
   306f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   306fa:	9801      	ldr	r0, [sp, #4]
   306fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30700:	f7ff ffb9 	bl	30676 <k_mutex_lock.constprop.0.isra.0>
	ret = vtable->shutdown(ctx, how);
   30704:	9b00      	ldr	r3, [sp, #0]
   30706:	4629      	mov	r1, r5
   30708:	4620      	mov	r0, r4
   3070a:	691b      	ldr	r3, [r3, #16]
   3070c:	4798      	blx	r3
   3070e:	4604      	mov	r4, r0
	k_mutex_unlock(lock);
   30710:	9801      	ldr	r0, [sp, #4]
   30712:	f7ff ffb2 	bl	3067a <k_mutex_unlock.isra.0>
	return ret;
   30716:	e7e4      	b.n	306e2 <z_impl_zsock_shutdown+0x1c>

00030718 <z_impl_zsock_connect>:
	return 0;
}

int z_impl_zsock_connect(int sock, const struct sockaddr *addr,
			socklen_t addrlen)
{
   30718:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3071a:	460d      	mov	r5, r1
   3071c:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   3071e:	4669      	mov	r1, sp
   30720:	aa01      	add	r2, sp, #4
   30722:	f7ef fd1d 	bl	20160 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   30726:	4604      	mov	r4, r0
   30728:	b940      	cbnz	r0, 3073c <z_impl_zsock_connect+0x24>
   3072a:	f000 fac6 	bl	30cba <__errno>
   3072e:	2309      	movs	r3, #9
   30730:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   30734:	6003      	str	r3, [r0, #0]
}
   30736:	4620      	mov	r0, r4
   30738:	b002      	add	sp, #8
   3073a:	bd70      	pop	{r4, r5, r6, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   3073c:	9b00      	ldr	r3, [sp, #0]
   3073e:	699b      	ldr	r3, [r3, #24]
   30740:	b91b      	cbnz	r3, 3074a <z_impl_zsock_connect+0x32>
   30742:	f000 faba 	bl	30cba <__errno>
   30746:	235f      	movs	r3, #95	; 0x5f
   30748:	e7f2      	b.n	30730 <z_impl_zsock_connect+0x18>
   3074a:	9801      	ldr	r0, [sp, #4]
   3074c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   30750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30754:	f7ff ff8f 	bl	30676 <k_mutex_lock.constprop.0.isra.0>
   30758:	9b00      	ldr	r3, [sp, #0]
   3075a:	4632      	mov	r2, r6
   3075c:	4629      	mov	r1, r5
   3075e:	4620      	mov	r0, r4
   30760:	699b      	ldr	r3, [r3, #24]
   30762:	4798      	blx	r3
   30764:	4604      	mov	r4, r0
   30766:	9801      	ldr	r0, [sp, #4]
   30768:	f7ff ff87 	bl	3067a <k_mutex_unlock.isra.0>
   3076c:	e7e3      	b.n	30736 <z_impl_zsock_connect+0x1e>

0003076e <z_impl_zsock_sendto>:
	return status;
}

ssize_t z_impl_zsock_sendto(int sock, const void *buf, size_t len, int flags,
			   const struct sockaddr *dest_addr, socklen_t addrlen)
{
   3076e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30772:	460d      	mov	r5, r1
   30774:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   30776:	a902      	add	r1, sp, #8
   30778:	aa03      	add	r2, sp, #12
{
   3077a:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3077c:	f7ef fcf0 	bl	20160 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   30780:	4604      	mov	r4, r0
   30782:	b948      	cbnz	r0, 30798 <z_impl_zsock_sendto+0x2a>
   30784:	f000 fa99 	bl	30cba <__errno>
   30788:	2309      	movs	r3, #9
   3078a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3078e:	6003      	str	r3, [r0, #0]
}
   30790:	4620      	mov	r0, r4
   30792:	b004      	add	sp, #16
   30794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   30798:	9b02      	ldr	r3, [sp, #8]
   3079a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   3079c:	b91b      	cbnz	r3, 307a6 <z_impl_zsock_sendto+0x38>
   3079e:	f000 fa8c 	bl	30cba <__errno>
   307a2:	235f      	movs	r3, #95	; 0x5f
   307a4:	e7f1      	b.n	3078a <z_impl_zsock_sendto+0x1c>
   307a6:	9803      	ldr	r0, [sp, #12]
   307a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   307ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   307b0:	f7ff ff61 	bl	30676 <k_mutex_lock.constprop.0.isra.0>
   307b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   307b6:	4632      	mov	r2, r6
   307b8:	9301      	str	r3, [sp, #4]
   307ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   307bc:	4629      	mov	r1, r5
   307be:	9300      	str	r3, [sp, #0]
   307c0:	9b02      	ldr	r3, [sp, #8]
   307c2:	4620      	mov	r0, r4
   307c4:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
   307c8:	463b      	mov	r3, r7
   307ca:	47c0      	blx	r8
   307cc:	4604      	mov	r4, r0
   307ce:	9803      	ldr	r0, [sp, #12]
   307d0:	f7ff ff53 	bl	3067a <k_mutex_unlock.isra.0>
   307d4:	e7dc      	b.n	30790 <z_impl_zsock_sendto+0x22>

000307d6 <z_impl_zsock_recvfrom>:
	return 0;
}

ssize_t z_impl_zsock_recvfrom(int sock, void *buf, size_t max_len, int flags,
			     struct sockaddr *src_addr, socklen_t *addrlen)
{
   307d6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   307da:	460d      	mov	r5, r1
   307dc:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   307de:	a902      	add	r1, sp, #8
   307e0:	aa03      	add	r2, sp, #12
{
   307e2:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   307e4:	f7ef fcbc 	bl	20160 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   307e8:	4604      	mov	r4, r0
   307ea:	b948      	cbnz	r0, 30800 <z_impl_zsock_recvfrom+0x2a>
   307ec:	f000 fa65 	bl	30cba <__errno>
   307f0:	2309      	movs	r3, #9
   307f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   307f6:	6003      	str	r3, [r0, #0]
}
   307f8:	4620      	mov	r0, r4
   307fa:	b004      	add	sp, #16
   307fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   30800:	9b02      	ldr	r3, [sp, #8]
   30802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   30804:	b91b      	cbnz	r3, 3080e <z_impl_zsock_recvfrom+0x38>
   30806:	f000 fa58 	bl	30cba <__errno>
   3080a:	235f      	movs	r3, #95	; 0x5f
   3080c:	e7f1      	b.n	307f2 <z_impl_zsock_recvfrom+0x1c>
   3080e:	9803      	ldr	r0, [sp, #12]
   30810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   30814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30818:	f7ff ff2d 	bl	30676 <k_mutex_lock.constprop.0.isra.0>
   3081c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3081e:	4632      	mov	r2, r6
   30820:	9301      	str	r3, [sp, #4]
   30822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30824:	4629      	mov	r1, r5
   30826:	9300      	str	r3, [sp, #0]
   30828:	9b02      	ldr	r3, [sp, #8]
   3082a:	4620      	mov	r0, r4
   3082c:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
   30830:	463b      	mov	r3, r7
   30832:	47c0      	blx	r8
   30834:	4604      	mov	r4, r0
   30836:	9803      	ldr	r0, [sp, #12]
   30838:	f7ff ff1f 	bl	3067a <k_mutex_unlock.isra.0>
   3083c:	e7dc      	b.n	307f8 <z_impl_zsock_recvfrom+0x22>

0003083e <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   3083e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   30842:	460d      	mov	r5, r1
   30844:	4616      	mov	r6, r2
	ctx = z_get_fd_obj_and_vtable(sock,
   30846:	a902      	add	r1, sp, #8
   30848:	aa03      	add	r2, sp, #12
{
   3084a:	461f      	mov	r7, r3
	ctx = z_get_fd_obj_and_vtable(sock,
   3084c:	f7ef fc88 	bl	20160 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   30850:	4604      	mov	r4, r0
   30852:	b948      	cbnz	r0, 30868 <z_impl_zsock_setsockopt+0x2a>
   30854:	f000 fa31 	bl	30cba <__errno>
   30858:	2309      	movs	r3, #9
   3085a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   3085e:	6003      	str	r3, [r0, #0]
}
   30860:	4620      	mov	r0, r4
   30862:	b004      	add	sp, #16
   30864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   30868:	9b02      	ldr	r3, [sp, #8]
   3086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   3086c:	b91b      	cbnz	r3, 30876 <z_impl_zsock_setsockopt+0x38>
   3086e:	f000 fa24 	bl	30cba <__errno>
   30872:	235f      	movs	r3, #95	; 0x5f
   30874:	e7f1      	b.n	3085a <z_impl_zsock_setsockopt+0x1c>
   30876:	9803      	ldr	r0, [sp, #12]
   30878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   3087c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30880:	f7ff fef9 	bl	30676 <k_mutex_lock.constprop.0.isra.0>
   30884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30886:	4632      	mov	r2, r6
   30888:	9300      	str	r3, [sp, #0]
   3088a:	9b02      	ldr	r3, [sp, #8]
   3088c:	4629      	mov	r1, r5
   3088e:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   30892:	4620      	mov	r0, r4
   30894:	463b      	mov	r3, r7
   30896:	47c0      	blx	r8
   30898:	4604      	mov	r4, r0
   3089a:	9803      	ldr	r0, [sp, #12]
   3089c:	f7ff feed 	bl	3067a <k_mutex_unlock.isra.0>
   308a0:	e7de      	b.n	30860 <z_impl_zsock_setsockopt+0x22>

000308a2 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   308a2:	4770      	bx	lr

000308a4 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
   308a4:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   308a6:	b430      	push	{r4, r5}
   308a8:	461c      	mov	r4, r3
   308aa:	db0c      	blt.n	308c6 <flash_area_read+0x22>
   308ac:	6885      	ldr	r5, [r0, #8]
   308ae:	440c      	add	r4, r1
   308b0:	42ac      	cmp	r4, r5
   308b2:	d808      	bhi.n	308c6 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
   308b4:	68c4      	ldr	r4, [r0, #12]
   308b6:	6840      	ldr	r0, [r0, #4]
   308b8:	4401      	add	r1, r0
	return api->read(dev, offset, data, len);
   308ba:	68a0      	ldr	r0, [r4, #8]
   308bc:	6805      	ldr	r5, [r0, #0]
   308be:	4620      	mov	r0, r4
   308c0:	46ac      	mov	ip, r5
}
   308c2:	bc30      	pop	{r4, r5}
   308c4:	4760      	bx	ip
   308c6:	f06f 0015 	mvn.w	r0, #21
   308ca:	bc30      	pop	{r4, r5}
   308cc:	4770      	bx	lr

000308ce <flash_area_write>:
   308ce:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   308d0:	b430      	push	{r4, r5}
   308d2:	461c      	mov	r4, r3
   308d4:	db0c      	blt.n	308f0 <flash_area_write+0x22>
   308d6:	6885      	ldr	r5, [r0, #8]
   308d8:	440c      	add	r4, r1
   308da:	42ac      	cmp	r4, r5
   308dc:	d808      	bhi.n	308f0 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
   308de:	68c4      	ldr	r4, [r0, #12]
   308e0:	6840      	ldr	r0, [r0, #4]
   308e2:	4401      	add	r1, r0
	rc = api->write(dev, offset, data, len);
   308e4:	68a0      	ldr	r0, [r4, #8]
   308e6:	6845      	ldr	r5, [r0, #4]
   308e8:	4620      	mov	r0, r4
   308ea:	46ac      	mov	ip, r5
}
   308ec:	bc30      	pop	{r4, r5}
   308ee:	4760      	bx	ip
   308f0:	f06f 0015 	mvn.w	r0, #21
   308f4:	bc30      	pop	{r4, r5}
   308f6:	4770      	bx	lr

000308f8 <flash_area_erase>:
   308f8:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   308fa:	4613      	mov	r3, r2
   308fc:	b410      	push	{r4}
   308fe:	db0d      	blt.n	3091c <flash_area_erase+0x24>
   30900:	6884      	ldr	r4, [r0, #8]
   30902:	440b      	add	r3, r1
   30904:	42a3      	cmp	r3, r4
   30906:	d809      	bhi.n	3091c <flash_area_erase+0x24>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
   30908:	68c3      	ldr	r3, [r0, #12]
   3090a:	6840      	ldr	r0, [r0, #4]
   3090c:	4401      	add	r1, r0
	rc = api->erase(dev, offset, size);
   3090e:	6898      	ldr	r0, [r3, #8]
   30910:	6884      	ldr	r4, [r0, #8]
   30912:	4618      	mov	r0, r3
   30914:	4623      	mov	r3, r4
}
   30916:	f85d 4b04 	ldr.w	r4, [sp], #4
   3091a:	4718      	bx	r3
   3091c:	f06f 0015 	mvn.w	r0, #21
   30920:	f85d 4b04 	ldr.w	r4, [sp], #4
   30924:	4770      	bx	lr

00030926 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
   30926:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
   30928:	68c0      	ldr	r0, [r0, #12]
	return api->get_parameters(dev)->write_block_size;
   3092a:	6883      	ldr	r3, [r0, #8]
   3092c:	68db      	ldr	r3, [r3, #12]
   3092e:	4798      	blx	r3
}
   30930:	6800      	ldr	r0, [r0, #0]
   30932:	bd08      	pop	{r3, pc}

00030934 <get_sectors_cb>:
{
   30934:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   30936:	6802      	ldr	r2, [r0, #0]
   30938:	684c      	ldr	r4, [r1, #4]
   3093a:	42a2      	cmp	r2, r4
   3093c:	d316      	bcc.n	3096c <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   3093e:	688b      	ldr	r3, [r1, #8]
   30940:	4423      	add	r3, r4
   30942:	429a      	cmp	r2, r3
   30944:	d206      	bcs.n	30954 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   30946:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   3094a:	42ab      	cmp	r3, r5
   3094c:	d304      	bcc.n	30958 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   3094e:	f06f 030b 	mvn.w	r3, #11
   30952:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   30954:	2000      	movs	r0, #0
   30956:	e00a      	b.n	3096e <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   30958:	68cd      	ldr	r5, [r1, #12]
   3095a:	1b12      	subs	r2, r2, r4
   3095c:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   30960:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   30962:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   30966:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   30968:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   3096a:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   3096c:	2001      	movs	r0, #1
}
   3096e:	bd70      	pop	{r4, r5, r6, pc}

00030970 <settings_load>:
	return settings_load_subtree(NULL);
   30970:	2000      	movs	r0, #0
   30972:	f7f0 ba9d 	b.w	20eb0 <settings_load_subtree>

00030976 <settings_name_steq>:
{
   30976:	b530      	push	{r4, r5, lr}
	if (next) {
   30978:	b10a      	cbz	r2, 3097e <settings_name_steq+0x8>
		*next = NULL;
   3097a:	2300      	movs	r3, #0
   3097c:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   3097e:	b190      	cbz	r0, 309a6 <settings_name_steq+0x30>
   30980:	b151      	cbz	r1, 30998 <settings_name_steq+0x22>
   30982:	3901      	subs	r1, #1
	while ((*key != '\0') && (*key == *name) &&
   30984:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   30988:	4604      	mov	r4, r0
   3098a:	f810 3b01 	ldrb.w	r3, [r0], #1
   3098e:	b15d      	cbz	r5, 309a8 <settings_name_steq+0x32>
   30990:	429d      	cmp	r5, r3
   30992:	d101      	bne.n	30998 <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   30994:	2d3d      	cmp	r5, #61	; 0x3d
   30996:	d1f5      	bne.n	30984 <settings_name_steq+0xe>
	return 0;
   30998:	2000      	movs	r0, #0
   3099a:	e004      	b.n	309a6 <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   3099c:	2b3d      	cmp	r3, #61	; 0x3d
   3099e:	d008      	beq.n	309b2 <settings_name_steq+0x3c>
   309a0:	fab3 f083 	clz	r0, r3
   309a4:	0940      	lsrs	r0, r0, #5
}
   309a6:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   309a8:	2b2f      	cmp	r3, #47	; 0x2f
   309aa:	d1f7      	bne.n	3099c <settings_name_steq+0x26>
		if (next) {
   309ac:	b10a      	cbz	r2, 309b2 <settings_name_steq+0x3c>
			*next = name + 1;
   309ae:	3401      	adds	r4, #1
   309b0:	6014      	str	r4, [r2, #0]
		return 1;
   309b2:	2001      	movs	r0, #1
   309b4:	e7f7      	b.n	309a6 <settings_name_steq+0x30>

000309b6 <settings_name_next>:
{
   309b6:	b530      	push	{r4, r5, lr}
	if (next) {
   309b8:	b109      	cbz	r1, 309be <settings_name_next+0x8>
		*next = NULL;
   309ba:	2300      	movs	r3, #0
   309bc:	600b      	str	r3, [r1, #0]
	if (!name) {
   309be:	b170      	cbz	r0, 309de <settings_name_next+0x28>
   309c0:	4603      	mov	r3, r0
   309c2:	461a      	mov	r2, r3
   309c4:	1a1d      	subs	r5, r3, r0
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   309c6:	f813 4b01 	ldrb.w	r4, [r3], #1
   309ca:	b134      	cbz	r4, 309da <settings_name_next+0x24>
   309cc:	2c3d      	cmp	r4, #61	; 0x3d
   309ce:	d004      	beq.n	309da <settings_name_next+0x24>
   309d0:	2c2f      	cmp	r4, #47	; 0x2f
   309d2:	d1f6      	bne.n	309c2 <settings_name_next+0xc>
		if (next) {
   309d4:	b109      	cbz	r1, 309da <settings_name_next+0x24>
			*next = name + 1;
   309d6:	3201      	adds	r2, #1
   309d8:	600a      	str	r2, [r1, #0]
}
   309da:	4628      	mov	r0, r5
   309dc:	bd30      	pop	{r4, r5, pc}
		return 0;
   309de:	4605      	mov	r5, r0
   309e0:	e7fb      	b.n	309da <settings_name_next+0x24>

000309e2 <settings_line_len_calc>:
{
   309e2:	b510      	push	{r4, lr}
   309e4:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   309e6:	f7ec fb5b 	bl	1d0a0 <strlen>
   309ea:	3401      	adds	r4, #1
}
   309ec:	4420      	add	r0, r4
   309ee:	bd10      	pop	{r4, pc}

000309f0 <settings_line_raw_read>:
{
   309f0:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   309f2:	9c04      	ldr	r4, [sp, #16]
   309f4:	9401      	str	r4, [sp, #4]
   309f6:	2400      	movs	r4, #0
   309f8:	9400      	str	r4, [sp, #0]
   309fa:	f7f0 fbb1 	bl	21160 <settings_line_raw_read_until>
}
   309fe:	b002      	add	sp, #8
   30a00:	bd10      	pop	{r4, pc}

00030a02 <settings_line_read_cb>:
{
   30a02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   30a04:	6803      	ldr	r3, [r0, #0]
   30a06:	9300      	str	r3, [sp, #0]
   30a08:	6840      	ldr	r0, [r0, #4]
   30a0a:	ab03      	add	r3, sp, #12
   30a0c:	f7ff fff0 	bl	309f0 <settings_line_raw_read>
	if (rc == 0) {
   30a10:	b918      	cbnz	r0, 30a1a <settings_line_read_cb+0x18>
		return len_read;
   30a12:	9803      	ldr	r0, [sp, #12]
}
   30a14:	b005      	add	sp, #20
   30a16:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   30a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30a1e:	e7f9      	b.n	30a14 <settings_line_read_cb+0x12>

00030a20 <settings_line_name_read>:
{
   30a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   30a22:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   30a24:	9301      	str	r3, [sp, #4]
   30a26:	f10d 030f 	add.w	r3, sp, #15
   30a2a:	9300      	str	r3, [sp, #0]
   30a2c:	4613      	mov	r3, r2
   30a2e:	460a      	mov	r2, r1
   30a30:	4601      	mov	r1, r0
   30a32:	2000      	movs	r0, #0
	char const until_char = '=';
   30a34:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   30a38:	f7f0 fb92 	bl	21160 <settings_line_raw_read_until>
}
   30a3c:	b004      	add	sp, #16
   30a3e:	bd10      	pop	{r4, pc}

00030a40 <settings_line_dup_check_cb>:
{
   30a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30a44:	460f      	mov	r7, r1
   30a46:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   30a48:	6819      	ldr	r1, [r3, #0]
{
   30a4a:	4690      	mov	r8, r2
   30a4c:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   30a4e:	f7ec fb1d 	bl	1d08c <strcmp>
   30a52:	4606      	mov	r6, r0
   30a54:	b940      	cbnz	r0, 30a68 <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   30a56:	4639      	mov	r1, r7
   30a58:	4640      	mov	r0, r8
   30a5a:	f7f0 fc43 	bl	212e4 <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   30a5e:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   30a60:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   30a62:	4283      	cmp	r3, r0
   30a64:	d004      	beq.n	30a70 <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   30a66:	60e6      	str	r6, [r4, #12]
}
   30a68:	2000      	movs	r0, #0
   30a6a:	b008      	add	sp, #32
   30a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   30a70:	b913      	cbnz	r3, 30a78 <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   30a72:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   30a74:	60e3      	str	r3, [r4, #12]
   30a76:	e7f7      	b.n	30a68 <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   30a78:	f8d4 a004 	ldr.w	sl, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   30a7c:	2d10      	cmp	r5, #16
   30a7e:	46a9      	mov	r9, r5
   30a80:	bf28      	it	cs
   30a82:	f04f 0910 	movcs.w	r9, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   30a86:	9700      	str	r7, [sp, #0]
   30a88:	464a      	mov	r2, r9
   30a8a:	ab03      	add	r3, sp, #12
   30a8c:	a904      	add	r1, sp, #16
   30a8e:	eb08 0006 	add.w	r0, r8, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   30a92:	f8cd 900c 	str.w	r9, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   30a96:	f7ff ffab 	bl	309f0 <settings_line_raw_read>
		if (rc) {
   30a9a:	b970      	cbnz	r0, 30aba <settings_line_dup_check_cb+0x7a>
		if (len_read != exp_len) {
   30a9c:	9b03      	ldr	r3, [sp, #12]
   30a9e:	4599      	cmp	r9, r3
   30aa0:	d10b      	bne.n	30aba <settings_line_dup_check_cb+0x7a>
		rc = memcmp(val, buf, len_read);
   30aa2:	464a      	mov	r2, r9
   30aa4:	4650      	mov	r0, sl
   30aa6:	a904      	add	r1, sp, #16
   30aa8:	f003 f8b1 	bl	33c0e <memcmp>
		if (rc) {
   30aac:	b928      	cbnz	r0, 30aba <settings_line_dup_check_cb+0x7a>
		val += len_read;
   30aae:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   30ab0:	1aed      	subs	r5, r5, r3
		val += len_read;
   30ab2:	449a      	add	sl, r3
		off += len_read;
   30ab4:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   30ab6:	d1e1      	bne.n	30a7c <settings_line_dup_check_cb+0x3c>
   30ab8:	e7db      	b.n	30a72 <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   30aba:	2300      	movs	r3, #0
   30abc:	e7da      	b.n	30a74 <settings_line_dup_check_cb+0x34>

00030abe <get_len_cb>:
}
   30abe:	8980      	ldrh	r0, [r0, #12]
   30ac0:	4770      	bx	lr

00030ac2 <settings_fcb_storage_get>:
static void *settings_fcb_storage_get(struct settings_store *cs)
{
	struct settings_fcb *cf = (struct settings_fcb *)cs;

	return &cf->cf_fcb;
}
   30ac2:	3008      	adds	r0, #8
   30ac4:	4770      	bx	lr

00030ac6 <write_handler>:
{
   30ac6:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   30ac8:	6804      	ldr	r4, [r0, #0]
   30aca:	6885      	ldr	r5, [r0, #8]
   30acc:	6824      	ldr	r4, [r4, #0]
   30ace:	4429      	add	r1, r5
	return flash_area_write(entry_ctx->fap,
   30ad0:	4421      	add	r1, r4
   30ad2:	6900      	ldr	r0, [r0, #16]
}
   30ad4:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   30ad6:	f7ff befa 	b.w	308ce <flash_area_write>

00030ada <read_handler>:
{
   30ada:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   30adc:	8984      	ldrh	r4, [r0, #12]
   30ade:	428c      	cmp	r4, r1
   30ae0:	dd0f      	ble.n	30b02 <read_handler+0x28>
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   30ae2:	681d      	ldr	r5, [r3, #0]
   30ae4:	440d      	add	r5, r1
   30ae6:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   30ae8:	bf84      	itt	hi
   30aea:	1a64      	subhi	r4, r4, r1
   30aec:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   30aee:	6804      	ldr	r4, [r0, #0]
   30af0:	6885      	ldr	r5, [r0, #8]
   30af2:	6824      	ldr	r4, [r4, #0]
   30af4:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   30af6:	4421      	add	r1, r4
   30af8:	681b      	ldr	r3, [r3, #0]
   30afa:	6900      	ldr	r0, [r0, #16]
}
   30afc:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   30afe:	f7ff bed1 	b.w	308a4 <flash_area_read>
		*len = 0;
   30b02:	2000      	movs	r0, #0
}
   30b04:	bc30      	pop	{r4, r5}
		*len = 0;
   30b06:	6018      	str	r0, [r3, #0]
}
   30b08:	4770      	bx	lr

00030b0a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   30b0a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   30b0c:	ab0b      	add	r3, sp, #44	; 0x2c
   30b0e:	9305      	str	r3, [sp, #20]
   30b10:	9303      	str	r3, [sp, #12]
   30b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30b14:	2201      	movs	r2, #1
   30b16:	9302      	str	r3, [sp, #8]
   30b18:	2300      	movs	r3, #0
   30b1a:	4618      	mov	r0, r3
   30b1c:	e9cd 3300 	strd	r3, r3, [sp]
   30b20:	f7ef feb4 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   30b24:	b007      	add	sp, #28
   30b26:	f85d fb04 	ldr.w	pc, [sp], #4

00030b2a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   30b2a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   30b2c:	ab0b      	add	r3, sp, #44	; 0x2c
   30b2e:	9305      	str	r3, [sp, #20]
   30b30:	9303      	str	r3, [sp, #12]
   30b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30b34:	2201      	movs	r2, #1
   30b36:	9302      	str	r3, [sp, #8]
   30b38:	2300      	movs	r3, #0
   30b3a:	4618      	mov	r0, r3
   30b3c:	e9cd 3300 	strd	r3, r3, [sp]
   30b40:	f7ef fea4 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   30b44:	b007      	add	sp, #28
   30b46:	f85d fb04 	ldr.w	pc, [sp], #4

00030b4a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   30b4a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   30b4c:	6800      	ldr	r0, [r0, #0]
   30b4e:	f7f0 bf4f 	b.w	219f0 <z_arm_fatal_error>

00030b52 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   30b52:	2100      	movs	r1, #0
   30b54:	2001      	movs	r0, #1
   30b56:	f7f0 bf4b 	b.w	219f0 <z_arm_fatal_error>

00030b5a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   30b5a:	b508      	push	{r3, lr}
	handler();
   30b5c:	f7f1 f81e 	bl	21b9c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   30b60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   30b64:	f7f1 b922 	b.w	21dac <z_arm_exc_exit>

00030b68 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   30b68:	6e83      	ldr	r3, [r0, #104]	; 0x68
   30b6a:	f383 880b 	msr	PSPLIM, r3
}
   30b6e:	4770      	bx	lr

00030b70 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   30b70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   30b72:	ab0b      	add	r3, sp, #44	; 0x2c
   30b74:	9305      	str	r3, [sp, #20]
   30b76:	9303      	str	r3, [sp, #12]
   30b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30b7a:	2201      	movs	r2, #1
   30b7c:	9302      	str	r3, [sp, #8]
   30b7e:	2300      	movs	r3, #0
   30b80:	4618      	mov	r0, r3
   30b82:	e9cd 3300 	strd	r3, r3, [sp]
   30b86:	f7ef fe81 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   30b8a:	b007      	add	sp, #28
   30b8c:	f85d fb04 	ldr.w	pc, [sp], #4

00030b90 <z_arm_save_fp_context>:
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   30b90:	f3ef 8314 	mrs	r3, CONTROL
#if defined(CONFIG_FPU_SHARING)
	__ASSERT_NO_MSG(buffer != NULL);

	uint32_t CONTROL = __get_CONTROL();

	if (CONTROL & CONTROL_FPCA_Msk) {
   30b94:	075a      	lsls	r2, r3, #29
   30b96:	d512      	bpl.n	30bbe <z_arm_save_fp_context+0x2e>
		/* Store caller-saved and callee-saved FP registers. */
		__asm__ volatile(
   30b98:	f100 0240 	add.w	r2, r0, #64	; 0x40
   30b9c:	ec80 0a10 	vstmia	r0, {s0-s15}
   30ba0:	ec82 8a10 	vstmia	r2, {s16-s31}
  return __builtin_arm_get_fpscr();
   30ba4:	eef1 2a10 	vmrs	r2, fpscr
			"vstmia %0, {s0-s15}\n"
			"vstmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);

		buffer->fpscr = __get_FPSCR();
   30ba8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		buffer->ctx_saved = true;
   30bac:	2201      	movs	r2, #1

		/* Disable FPCA so no stacking of FP registers happens in TFM. */
		__set_CONTROL(CONTROL & ~CONTROL_FPCA_Msk);
   30bae:	f023 0304 	bic.w	r3, r3, #4
		buffer->ctx_saved = true;
   30bb2:	f880 2084 	strb.w	r2, [r0, #132]	; 0x84
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   30bb6:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   30bba:	f3bf 8f6f 	isb	sy
		 * here though, since FPCA should have no impact on instruction
		 * fetching.
		 */
	}
#endif
}
   30bbe:	4770      	bx	lr

00030bc0 <z_arm_restore_fp_context>:

void z_arm_restore_fp_context(const struct fpu_ctx_full *buffer)
{
#if defined(CONFIG_FPU_SHARING)
	if (buffer->ctx_saved) {
   30bc0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
   30bc4:	b18b      	cbz	r3, 30bea <z_arm_restore_fp_context+0x2a>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   30bc6:	f3ef 8314 	mrs	r3, CONTROL
		/* Set FPCA first so it is set even if an interrupt happens
		 * during restoration.
		 */
		__set_CONTROL(__get_CONTROL() | CONTROL_FPCA_Msk);
   30bca:	f043 0304 	orr.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   30bce:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
   30bd2:	f3bf 8f6f 	isb	sy
  __builtin_arm_set_fpscr(fpscr);
   30bd6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
   30bda:	eee1 3a10 	vmsr	fpscr, r3

		/* Restore FP state. */
		__set_FPSCR(buffer->fpscr);

		__asm__ volatile(
   30bde:	f100 0340 	add.w	r3, r0, #64	; 0x40
   30be2:	ec90 0a10 	vldmia	r0, {s0-s15}
   30be6:	ec93 8a10 	vldmia	r3, {s16-s31}
			"vldmia %1, {s16-s31}\n"
			:: "r" (buffer->caller_saved), "r" (buffer->callee_saved) :
		);
	}
#endif
}
   30bea:	4770      	bx	lr

00030bec <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   30bec:	e840 f000 	tt	r0, r0
   30bf0:	b2c3      	uxtb	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
   30bf2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
	}

	return -EINVAL;
}
   30bf6:	bf14      	ite	ne
   30bf8:	4618      	movne	r0, r3
   30bfa:	f06f 0015 	mvneq.w	r0, #21
   30bfe:	4770      	bx	lr

00030c00 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   30c00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   30c02:	ab0b      	add	r3, sp, #44	; 0x2c
   30c04:	9305      	str	r3, [sp, #20]
   30c06:	9303      	str	r3, [sp, #12]
   30c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   30c0a:	2201      	movs	r2, #1
   30c0c:	9302      	str	r3, [sp, #8]
   30c0e:	2300      	movs	r3, #0
   30c10:	4618      	mov	r0, r3
   30c12:	e9cd 3300 	strd	r3, r3, [sp]
   30c16:	f7ef fe39 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   30c1a:	b007      	add	sp, #28
   30c1c:	f85d fb04 	ldr.w	pc, [sp], #4

00030c20 <mpu_configure_region>:
{
   30c20:	b530      	push	{r4, r5, lr}
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   30c22:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   30c24:	680c      	ldr	r4, [r1, #0]
{
   30c26:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   30c28:	890a      	ldrh	r2, [r1, #8]
   30c2a:	894d      	ldrh	r5, [r1, #10]
	region_conf.base = new_region->start;
   30c2c:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   30c2e:	3b01      	subs	r3, #1
   30c30:	f024 041f 	bic.w	r4, r4, #31
   30c34:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   30c36:	f002 021f 	and.w	r2, r2, #31
   30c3a:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   30c3e:	f023 031f 	bic.w	r3, r3, #31
	return region_allocate_and_init(index,
   30c42:	4669      	mov	r1, sp
	p_attr->rbar = attr->rbar &
   30c44:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   30c48:	9303      	str	r3, [sp, #12]
   30c4a:	f7f1 fc51 	bl	224f0 <region_allocate_and_init>
}
   30c4e:	b005      	add	sp, #20
   30c50:	bd30      	pop	{r4, r5, pc}

00030c52 <malloc_prepare>:
}
   30c52:	2000      	movs	r0, #0
   30c54:	4770      	bx	lr

00030c56 <_stdout_hook_default>:
}
   30c56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30c5a:	4770      	bx	lr

00030c5c <_stdin_hook_default>:
}
   30c5c:	2000      	movs	r0, #0
   30c5e:	4770      	bx	lr

00030c60 <_read>:
{
   30c60:	4608      	mov	r0, r1
   30c62:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   30c64:	f7f1 bdc8 	b.w	227f8 <z_impl_zephyr_read_stdin>

00030c68 <_write>:
{
   30c68:	4608      	mov	r0, r1
   30c6a:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   30c6c:	f7f1 bdd8 	b.w	22820 <z_impl_zephyr_write_stdout>

00030c70 <_close>:
   30c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30c74:	4770      	bx	lr

00030c76 <_lseek>:
}
   30c76:	2000      	movs	r0, #0
   30c78:	4770      	bx	lr

00030c7a <_isatty>:
}
   30c7a:	2802      	cmp	r0, #2
   30c7c:	bfcc      	ite	gt
   30c7e:	2000      	movgt	r0, #0
   30c80:	2001      	movle	r0, #1
   30c82:	4770      	bx	lr

00030c84 <_kill>:
}
   30c84:	2000      	movs	r0, #0
   30c86:	4770      	bx	lr

00030c88 <_getpid>:
}
   30c88:	2000      	movs	r0, #0
   30c8a:	4770      	bx	lr

00030c8c <_fstat>:
	st->st_mode = S_IFCHR;
   30c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   30c90:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   30c92:	604b      	str	r3, [r1, #4]
}
   30c94:	4770      	bx	lr

00030c96 <__retarget_lock_init_recursive>:
{
   30c96:	b510      	push	{r4, lr}
   30c98:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   30c9a:	2014      	movs	r0, #20
   30c9c:	f7fc fb42 	bl	2d324 <malloc>
   30ca0:	6020      	str	r0, [r4, #0]
}
   30ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   30ca6:	f002 bb71 	b.w	3338c <z_impl_k_mutex_init>

00030caa <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   30caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   30cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   30cb2:	f7fb bb9f 	b.w	2c3f4 <z_impl_k_mutex_lock>

00030cb6 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   30cb6:	f7fb bc15 	b.w	2c4e4 <z_impl_k_mutex_unlock>

00030cba <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   30cba:	f7fb b8d1 	b.w	2be60 <z_impl_z_errno>

00030cbe <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   30cbe:	b508      	push	{r3, lr}
	net_if_init();
   30cc0:	f7f1 fdfe 	bl	228c0 <net_if_init>
	net_if_post_init();
   30cc4:	f7f1 fe1c 	bl	22900 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   30cc8:	2000      	movs	r0, #0
   30cca:	bd08      	pop	{r3, pc}

00030ccc <net_if_l2>:
	if (!iface || !iface->if_dev) {
   30ccc:	b110      	cbz	r0, 30cd4 <net_if_l2+0x8>
   30cce:	6800      	ldr	r0, [r0, #0]
   30cd0:	b100      	cbz	r0, 30cd4 <net_if_l2+0x8>
	return iface->if_dev->l2;
   30cd2:	6840      	ldr	r0, [r0, #4]
}
   30cd4:	4770      	bx	lr

00030cd6 <net_if_flag_is_set>:
	if (iface == NULL) {
   30cd6:	b138      	cbz	r0, 30ce8 <net_if_flag_is_set+0x12>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   30cd8:	6803      	ldr	r3, [r0, #0]
   30cda:	330c      	adds	r3, #12
   30cdc:	e8d3 3faf 	lda	r3, [r3]
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   30ce0:	fa43 f001 	asr.w	r0, r3, r1
   30ce4:	f000 0001 	and.w	r0, r0, #1
}
   30ce8:	4770      	bx	lr

00030cea <l2_flags_get.isra.0>:
static enum net_l2_flags l2_flags_get(struct net_if *iface)
   30cea:	b510      	push	{r4, lr}
   30cec:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   30cee:	f7ff ffed 	bl	30ccc <net_if_l2>
   30cf2:	b128      	cbz	r0, 30d00 <l2_flags_get.isra.0+0x16>
   30cf4:	68c2      	ldr	r2, [r0, #12]
   30cf6:	b11a      	cbz	r2, 30d00 <l2_flags_get.isra.0+0x16>
}
   30cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   30cfc:	4618      	mov	r0, r3
   30cfe:	4710      	bx	r2
}
   30d00:	bd10      	pop	{r4, pc}

00030d02 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   30d02:	2301      	movs	r3, #1
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   30d04:	094a      	lsrs	r2, r1, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   30d06:	f001 011f 	and.w	r1, r1, #31
   30d0a:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   30d0e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   30d12:	e8d0 3fef 	ldaex	r3, [r0]
   30d16:	430b      	orrs	r3, r1
   30d18:	e8c0 3fe2 	stlex	r2, r3, [r0]
   30d1c:	2a00      	cmp	r2, #0
   30d1e:	d1f8      	bne.n	30d12 <atomic_set_bit+0x10>
}
   30d20:	4770      	bx	lr

00030d22 <net_if_up>:
{
   30d22:	b538      	push	{r3, r4, r5, lr}
   30d24:	4605      	mov	r5, r0
	k_mutex_lock(&lock, K_FOREVER);
   30d26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   30d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   30d2e:	f7f1 fdb9 	bl	228a4 <k_mutex_lock.constprop.0.isra.0>
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   30d32:	2100      	movs	r1, #0
   30d34:	4628      	mov	r0, r5
   30d36:	f7ff ffce 	bl	30cd6 <net_if_flag_is_set>
   30d3a:	4604      	mov	r4, r0
   30d3c:	b9f0      	cbnz	r0, 30d7c <net_if_up+0x5a>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return (iface->if_dev->socket_offload != NULL);
   30d3e:	6828      	ldr	r0, [r5, #0]
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   30d40:	69c3      	ldr	r3, [r0, #28]
   30d42:	b133      	cbz	r3, 30d52 <net_if_up+0x30>
	atomic_set_bit(iface->if_dev->flags, value);
   30d44:	300c      	adds	r0, #12
   30d46:	f7ff ffdc 	bl	30d02 <atomic_set_bit>
	k_mutex_unlock(&lock);
   30d4a:	f7f1 fdb3 	bl	228b4 <k_mutex_unlock.constprop.0.isra.0>
}
   30d4e:	4620      	mov	r0, r4
   30d50:	bd38      	pop	{r3, r4, r5, pc}
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   30d52:	4628      	mov	r0, r5
   30d54:	f7ff ffba 	bl	30ccc <net_if_l2>
   30d58:	4604      	mov	r4, r0
   30d5a:	b130      	cbz	r0, 30d6a <net_if_up+0x48>
   30d5c:	6884      	ldr	r4, [r0, #8]
   30d5e:	b124      	cbz	r4, 30d6a <net_if_up+0x48>
	status = net_if_l2(iface)->enable(iface, true);
   30d60:	2101      	movs	r1, #1
   30d62:	4628      	mov	r0, r5
   30d64:	47a0      	blx	r4
	if (status < 0) {
   30d66:	1e04      	subs	r4, r0, #0
   30d68:	dbef      	blt.n	30d4a <net_if_up+0x28>
   30d6a:	6828      	ldr	r0, [r5, #0]
   30d6c:	2100      	movs	r1, #0
   30d6e:	300c      	adds	r0, #12
   30d70:	f7ff ffc7 	bl	30d02 <atomic_set_bit>
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   30d74:	4628      	mov	r0, r5
   30d76:	f7ff ffb8 	bl	30cea <l2_flags_get.isra.0>
notify:
   30d7a:	e7e6      	b.n	30d4a <net_if_up+0x28>
		status = -EALREADY;
   30d7c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   30d80:	e7e3      	b.n	30d4a <net_if_up+0x28>

00030d82 <net_byte_to_hex>:
{
   30d82:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   30d84:	090c      	lsrs	r4, r1, #4
		if (i == 0 && !pad && !val) {
   30d86:	b1b3      	cbz	r3, 30db6 <net_byte_to_hex+0x34>
		if (val < 10) {
   30d88:	2c09      	cmp	r4, #9
			*ptr++ = (char) (val - 10 + base);
   30d8a:	bf86      	itte	hi
   30d8c:	f1a2 050a 	subhi.w	r5, r2, #10
   30d90:	1964      	addhi	r4, r4, r5
			*ptr++ = (char) (val + '0');
   30d92:	3430      	addls	r4, #48	; 0x30
			*ptr++ = (char) (val - 10 + base);
   30d94:	1c43      	adds	r3, r0, #1
			*ptr++ = (char) (val + '0');
   30d96:	7004      	strb	r4, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   30d98:	f001 010f 	and.w	r1, r1, #15
		if (val < 10) {
   30d9c:	2909      	cmp	r1, #9
			*ptr++ = (char) (val - 10 + base);
   30d9e:	bf84      	itt	hi
   30da0:	3a0a      	subhi	r2, #10
   30da2:	1889      	addhi	r1, r1, r2
	*ptr = '\0';
   30da4:	f04f 0200 	mov.w	r2, #0
			*ptr++ = (char) (val - 10 + base);
   30da8:	bf8c      	ite	hi
   30daa:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   30dac:	3130      	addls	r1, #48	; 0x30
   30dae:	7019      	strb	r1, [r3, #0]
	*ptr = '\0';
   30db0:	705a      	strb	r2, [r3, #1]
			*ptr++ = (char) (val - 10 + base);
   30db2:	1c58      	adds	r0, r3, #1
}
   30db4:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   30db6:	2c00      	cmp	r4, #0
   30db8:	d1e6      	bne.n	30d88 <net_byte_to_hex+0x6>
   30dba:	4603      	mov	r3, r0
   30dbc:	e7ec      	b.n	30d98 <net_byte_to_hex+0x16>

00030dbe <cb_notify>:
{
   30dbe:	b570      	push	{r4, r5, r6, lr}
   30dc0:	4604      	mov	r4, r0
   30dc2:	460d      	mov	r5, r1
   30dc4:	461e      	mov	r6, r3
	if (cb == NULL) {
   30dc6:	b90a      	cbnz	r2, 30dcc <cb_notify+0xe>
		return 0;
   30dc8:	2000      	movs	r0, #0
}
   30dca:	bd70      	pop	{r4, r5, r6, pc}
	parser->state = *current_state;
   30dcc:	6803      	ldr	r3, [r0, #0]
   30dce:	7809      	ldrb	r1, [r1, #0]
   30dd0:	f361 2390 	bfi	r3, r1, #10, #7
   30dd4:	6003      	str	r3, [r0, #0]
	if (UNLIKELY(cb(parser) != 0)) {
   30dd6:	4790      	blx	r2
   30dd8:	b118      	cbz	r0, 30de2 <cb_notify+0x24>
		SET_ERRNO(cb_error);
   30dda:	7de3      	ldrb	r3, [r4, #23]
   30ddc:	f366 0306 	bfi	r3, r6, #0, #7
   30de0:	75e3      	strb	r3, [r4, #23]
	*current_state = parser->state;
   30de2:	6823      	ldr	r3, [r4, #0]
   30de4:	f3c3 2386 	ubfx	r3, r3, #10, #7
   30de8:	702b      	strb	r3, [r5, #0]
	if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {
   30dea:	7de3      	ldrb	r3, [r4, #23]
   30dec:	065b      	lsls	r3, r3, #25
   30dee:	d0eb      	beq.n	30dc8 <cb_notify+0xa>
		*parsed = already_parsed;
   30df0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   30df4:	601a      	str	r2, [r3, #0]
		return -HTTP_PARSER_ERRNO(parser);
   30df6:	7de0      	ldrb	r0, [r4, #23]
   30df8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   30dfc:	4240      	negs	r0, r0
   30dfe:	e7e4      	b.n	30dca <cb_notify+0xc>

00030e00 <cb_data>:
{
   30e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   30e04:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   30e08:	4605      	mov	r5, r0
	if (*mark == NULL) {
   30e0a:	f8d8 4000 	ldr.w	r4, [r8]
{
   30e0e:	460f      	mov	r7, r1
   30e10:	4691      	mov	r9, r2
   30e12:	461e      	mov	r6, r3
	if (*mark == NULL) {
   30e14:	b314      	cbz	r4, 30e5c <cb_data+0x5c>
	if (cb == NULL) {
   30e16:	b1e9      	cbz	r1, 30e54 <cb_data+0x54>
	parser->state = *current_state;
   30e18:	7832      	ldrb	r2, [r6, #0]
   30e1a:	6803      	ldr	r3, [r0, #0]
   30e1c:	f362 2390 	bfi	r3, r2, #10, #7
   30e20:	6003      	str	r3, [r0, #0]
	rc = cb(parser, *mark, len);
   30e22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   30e24:	f8d8 1000 	ldr.w	r1, [r8]
   30e28:	47b8      	blx	r7
	if (UNLIKELY(rc != 0)) {
   30e2a:	b118      	cbz	r0, 30e34 <cb_data+0x34>
		SET_ERRNO(cb_error);
   30e2c:	7deb      	ldrb	r3, [r5, #23]
   30e2e:	f369 0306 	bfi	r3, r9, #0, #7
   30e32:	75eb      	strb	r3, [r5, #23]
	*current_state = parser->state;
   30e34:	682b      	ldr	r3, [r5, #0]
   30e36:	f3c3 2386 	ubfx	r3, r3, #10, #7
   30e3a:	7033      	strb	r3, [r6, #0]
	if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {
   30e3c:	7deb      	ldrb	r3, [r5, #23]
   30e3e:	065b      	lsls	r3, r3, #25
   30e40:	d008      	beq.n	30e54 <cb_data+0x54>
		*parsed = already_parsed;
   30e42:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   30e46:	601a      	str	r2, [r3, #0]
		return -HTTP_PARSER_ERRNO(parser);
   30e48:	7de8      	ldrb	r0, [r5, #23]
   30e4a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   30e4e:	4240      	negs	r0, r0
}
   30e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*mark = NULL;
   30e54:	2000      	movs	r0, #0
   30e56:	f8c8 0000 	str.w	r0, [r8]
	return 0;
   30e5a:	e7f9      	b.n	30e50 <cb_data+0x50>
		return 0;
   30e5c:	4620      	mov	r0, r4
   30e5e:	e7f7      	b.n	30e50 <cb_data+0x50>

00030e60 <http_message_needs_eof>:
	if (parser->type == HTTP_REQUEST) {
   30e60:	7803      	ldrb	r3, [r0, #0]
   30e62:	f013 0303 	ands.w	r3, r3, #3
   30e66:	d016      	beq.n	30e96 <http_message_needs_eof+0x36>
	if (parser->status_code / 100 == 1U || /* 1xx e.g. Continue */
   30e68:	8a83      	ldrh	r3, [r0, #20]
   30e6a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
   30e6e:	2a63      	cmp	r2, #99	; 0x63
   30e70:	d911      	bls.n	30e96 <http_message_needs_eof+0x36>
   30e72:	2bcc      	cmp	r3, #204	; 0xcc
   30e74:	d00f      	beq.n	30e96 <http_message_needs_eof+0x36>
			parser->status_code == 204U ||     /* No Content */
   30e76:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
   30e7a:	d00c      	beq.n	30e96 <http_message_needs_eof+0x36>
			parser->flags & F_SKIPBODY) {     /* response to a HEAD
   30e7c:	8803      	ldrh	r3, [r0, #0]
   30e7e:	f3c3 0387 	ubfx	r3, r3, #2, #8
	if ((parser->flags & F_CHUNKED) ||
   30e82:	f003 0341 	and.w	r3, r3, #65	; 0x41
   30e86:	b933      	cbnz	r3, 30e96 <http_message_needs_eof+0x36>
   30e88:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   30e8c:	4018      	ands	r0, r3
   30e8e:	1c43      	adds	r3, r0, #1
   30e90:	4258      	negs	r0, r3
   30e92:	4158      	adcs	r0, r3
   30e94:	4770      	bx	lr
		return 0;
   30e96:	2000      	movs	r0, #0
}
   30e98:	4770      	bx	lr

00030e9a <http_parser_init>:


void http_parser_init(struct http_parser *parser, enum http_parser_type t)
{
   30e9a:	b570      	push	{r4, r5, r6, lr}
   30e9c:	2220      	movs	r2, #32
   30e9e:	460d      	mov	r5, r1
   30ea0:	2100      	movs	r1, #0
   30ea2:	4604      	mov	r4, r0
	void *data = parser->data; /* preserve application data */
   30ea4:	6986      	ldr	r6, [r0, #24]
   30ea6:	f002 fee2 	bl	33c6e <memset>

	(void)memset(parser, 0, sizeof(*parser));
	parser->data = data;
	parser->type = t;
   30eaa:	f04f 0300 	mov.w	r3, #0
   30eae:	f365 0301 	bfi	r3, r5, #0, #2
	parser->data = data;
   30eb2:	61a6      	str	r6, [r4, #24]
	parser->type = t;
   30eb4:	7023      	strb	r3, [r4, #0]
	parser->state =
		(t == HTTP_REQUEST ? s_start_req :
   30eb6:	b145      	cbz	r5, 30eca <http_parser_init+0x30>
   30eb8:	2d01      	cmp	r5, #1
   30eba:	bf0c      	ite	eq
   30ebc:	2204      	moveq	r2, #4
   30ebe:	2202      	movne	r2, #2
	parser->state =
   30ec0:	6823      	ldr	r3, [r4, #0]
   30ec2:	f362 2390 	bfi	r3, r2, #10, #7
   30ec6:	6023      	str	r3, [r4, #0]
		 (t == HTTP_RESPONSE ? s_start_res : s_start_req_or_res));
	parser->http_errno = HPE_OK;
}
   30ec8:	bd70      	pop	{r4, r5, r6, pc}
		(t == HTTP_REQUEST ? s_start_req :
   30eca:	2212      	movs	r2, #18
   30ecc:	e7f8      	b.n	30ec0 <http_parser_init+0x26>

00030ece <on_url>:
{
   30ece:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   30ed0:	6c83      	ldr	r3, [r0, #72]	; 0x48
   30ed2:	b113      	cbz	r3, 30eda <on_url+0xc>
	    req->internal.response.http_cb->on_url) {
   30ed4:	685b      	ldr	r3, [r3, #4]
	if (req->internal.response.http_cb &&
   30ed6:	b103      	cbz	r3, 30eda <on_url+0xc>
		req->internal.response.http_cb->on_url(parser, at, length);
   30ed8:	4798      	blx	r3
}
   30eda:	2000      	movs	r0, #0
   30edc:	bd08      	pop	{r3, pc}

00030ede <on_body>:
	req->internal.response.processed += length;
   30ede:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
   30ee0:	b570      	push	{r4, r5, r6, lr}
	req->internal.response.processed += length;
   30ee2:	4413      	add	r3, r2
	req->internal.response.body_found = 1;
   30ee4:	f890 608e 	ldrb.w	r6, [r0, #142]	; 0x8e
	req->internal.response.processed += length;
   30ee8:	6683      	str	r3, [r0, #104]	; 0x68
	if (req->internal.response.http_cb &&
   30eea:	6c83      	ldr	r3, [r0, #72]	; 0x48
	req->internal.response.body_found = 1;
   30eec:	f046 0602 	orr.w	r6, r6, #2
{
   30ef0:	4604      	mov	r4, r0
   30ef2:	460d      	mov	r5, r1
	req->internal.response.body_found = 1;
   30ef4:	f880 608e 	strb.w	r6, [r0, #142]	; 0x8e
	if (req->internal.response.http_cb &&
   30ef8:	b113      	cbz	r3, 30f00 <on_body+0x22>
	    req->internal.response.http_cb->on_body) {
   30efa:	699b      	ldr	r3, [r3, #24]
	if (req->internal.response.http_cb &&
   30efc:	b103      	cbz	r3, 30f00 <on_body+0x22>
		req->internal.response.http_cb->on_body(parser, at, length);
   30efe:	4798      	blx	r3
	if (!req->internal.response.body_frag_start) {
   30f00:	6d23      	ldr	r3, [r4, #80]	; 0x50
   30f02:	b903      	cbnz	r3, 30f06 <on_body+0x28>
		req->internal.response.body_frag_start = (uint8_t *)at;
   30f04:	6525      	str	r5, [r4, #80]	; 0x50
		(req->internal.response.body_frag_start - req->internal.response.recv_buf);
   30f06:	6d23      	ldr	r3, [r4, #80]	; 0x50
   30f08:	6da2      	ldr	r2, [r4, #88]	; 0x58
}
   30f0a:	2000      	movs	r0, #0
		(req->internal.response.body_frag_start - req->internal.response.recv_buf);
   30f0c:	1a9a      	subs	r2, r3, r2
	req->internal.response.body_frag_len = req->internal.response.data_len -
   30f0e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   30f10:	1a9b      	subs	r3, r3, r2
   30f12:	6563      	str	r3, [r4, #84]	; 0x54
}
   30f14:	bd70      	pop	{r4, r5, r6, pc}

00030f16 <on_message_begin>:
{
   30f16:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   30f18:	6c83      	ldr	r3, [r0, #72]	; 0x48
   30f1a:	b113      	cbz	r3, 30f22 <on_message_begin+0xc>
	    req->internal.response.http_cb->on_message_begin) {
   30f1c:	681b      	ldr	r3, [r3, #0]
	if (req->internal.response.http_cb &&
   30f1e:	b103      	cbz	r3, 30f22 <on_message_begin+0xc>
		req->internal.response.http_cb->on_message_begin(parser);
   30f20:	4798      	blx	r3
}
   30f22:	2000      	movs	r0, #0
   30f24:	bd08      	pop	{r3, pc}

00030f26 <on_message_complete>:
	if (req->internal.response.http_cb &&
   30f26:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   30f28:	b510      	push	{r4, lr}
   30f2a:	4604      	mov	r4, r0
	if (req->internal.response.http_cb &&
   30f2c:	b113      	cbz	r3, 30f34 <on_message_complete+0xe>
	    req->internal.response.http_cb->on_message_complete) {
   30f2e:	69db      	ldr	r3, [r3, #28]
	if (req->internal.response.http_cb &&
   30f30:	b103      	cbz	r3, 30f34 <on_message_complete+0xe>
		req->internal.response.http_cb->on_message_complete(parser);
   30f32:	4798      	blx	r3
	req->internal.response.message_complete = 1;
   30f34:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
}
   30f38:	2000      	movs	r0, #0
	req->internal.response.message_complete = 1;
   30f3a:	f043 0304 	orr.w	r3, r3, #4
   30f3e:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
}
   30f42:	bd10      	pop	{r4, pc}

00030f44 <on_chunk_header>:
{
   30f44:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   30f46:	6c83      	ldr	r3, [r0, #72]	; 0x48
   30f48:	b113      	cbz	r3, 30f50 <on_chunk_header+0xc>
	    req->internal.response.http_cb->on_chunk_header) {
   30f4a:	6a1b      	ldr	r3, [r3, #32]
	if (req->internal.response.http_cb &&
   30f4c:	b103      	cbz	r3, 30f50 <on_chunk_header+0xc>
		req->internal.response.http_cb->on_chunk_header(parser);
   30f4e:	4798      	blx	r3
}
   30f50:	2000      	movs	r0, #0
   30f52:	bd08      	pop	{r3, pc}

00030f54 <on_chunk_complete>:
{
   30f54:	b508      	push	{r3, lr}
	if (req->internal.response.http_cb &&
   30f56:	6c83      	ldr	r3, [r0, #72]	; 0x48
   30f58:	b113      	cbz	r3, 30f60 <on_chunk_complete+0xc>
	    req->internal.response.http_cb->on_chunk_complete) {
   30f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	if (req->internal.response.http_cb &&
   30f5c:	b103      	cbz	r3, 30f60 <on_chunk_complete+0xc>
		req->internal.response.http_cb->on_chunk_complete(parser);
   30f5e:	4798      	blx	r3
}
   30f60:	2000      	movs	r0, #0
   30f62:	bd08      	pop	{r3, pc}

00030f64 <on_header_value>:
{
   30f64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (req->internal.response.cl_present) {
   30f66:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
{
   30f6a:	4604      	mov	r4, r0
	if (req->internal.response.cl_present) {
   30f6c:	07db      	lsls	r3, r3, #31
{
   30f6e:	460e      	mov	r6, r1
   30f70:	4615      	mov	r5, r2
	if (req->internal.response.cl_present) {
   30f72:	d51a      	bpl.n	30faa <on_header_value+0x46>
		if (length <= MAX_NUM_DIGITS - 1) {
   30f74:	2a0f      	cmp	r2, #15
   30f76:	d812      	bhi.n	30f9e <on_header_value+0x3a>
			memcpy(str, at, length);
   30f78:	2310      	movs	r3, #16
   30f7a:	4668      	mov	r0, sp
   30f7c:	f002 fe64 	bl	33c48 <__memcpy_chk>
			str[length] = 0;
   30f80:	2100      	movs	r1, #0
   30f82:	ab04      	add	r3, sp, #16
   30f84:	442b      	add	r3, r5
   30f86:	f803 1c10 	strb.w	r1, [r3, #-16]
			num = strtol(str, NULL, 10);
   30f8a:	220a      	movs	r2, #10
   30f8c:	4668      	mov	r0, sp
   30f8e:	f7fd f827 	bl	2dfe0 <strtol>
			if (num == LONG_MIN || num == LONG_MAX) {
   30f92:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   30f96:	3b01      	subs	r3, #1
   30f98:	3303      	adds	r3, #3
   30f9a:	d811      	bhi.n	30fc0 <on_header_value+0x5c>
			req->internal.response.content_length = num;
   30f9c:	6660      	str	r0, [r4, #100]	; 0x64
		req->internal.response.cl_present = false;
   30f9e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   30fa2:	f36f 0300 	bfc	r3, #0, #1
   30fa6:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	if (req->internal.response.http_cb &&
   30faa:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   30fac:	b130      	cbz	r0, 30fbc <on_header_value+0x58>
	    req->internal.response.http_cb->on_header_value) {
   30fae:	6903      	ldr	r3, [r0, #16]
	if (req->internal.response.http_cb &&
   30fb0:	b14b      	cbz	r3, 30fc6 <on_header_value+0x62>
		req->internal.response.http_cb->on_header_value(parser, at,
   30fb2:	462a      	mov	r2, r5
   30fb4:	4631      	mov	r1, r6
   30fb6:	4620      	mov	r0, r4
   30fb8:	4798      	blx	r3
	return 0;
   30fba:	2000      	movs	r0, #0
}
   30fbc:	b004      	add	sp, #16
   30fbe:	bd70      	pop	{r4, r5, r6, pc}
				return -EINVAL;
   30fc0:	f06f 0015 	mvn.w	r0, #21
   30fc4:	e7fa      	b.n	30fbc <on_header_value+0x58>
	return 0;
   30fc6:	4618      	mov	r0, r3
   30fc8:	e7f8      	b.n	30fbc <on_header_value+0x58>

00030fca <on_headers_complete>:
	if (req->internal.response.http_cb &&
   30fca:	6c83      	ldr	r3, [r0, #72]	; 0x48
{
   30fcc:	b510      	push	{r4, lr}
   30fce:	4604      	mov	r4, r0
	if (req->internal.response.http_cb &&
   30fd0:	b113      	cbz	r3, 30fd8 <on_headers_complete+0xe>
	    req->internal.response.http_cb->on_headers_complete) {
   30fd2:	695b      	ldr	r3, [r3, #20]
	if (req->internal.response.http_cb &&
   30fd4:	b103      	cbz	r3, 30fd8 <on_headers_complete+0xe>
		req->internal.response.http_cb->on_headers_complete(parser);
   30fd6:	4798      	blx	r3
	if (parser->status_code >= 500 && parser->status_code < 600) {
   30fd8:	8aa3      	ldrh	r3, [r4, #20]
   30fda:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
   30fde:	b29b      	uxth	r3, r3
   30fe0:	2b63      	cmp	r3, #99	; 0x63
   30fe2:	d90a      	bls.n	30ffa <on_headers_complete+0x30>
	if ((req->method == HTTP_HEAD || req->method == HTTP_OPTIONS) &&
   30fe4:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   30fe8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   30fec:	2b02      	cmp	r3, #2
   30fee:	d106      	bne.n	30ffe <on_headers_complete+0x34>
   30ff0:	6e60      	ldr	r0, [r4, #100]	; 0x64
   30ff2:	3800      	subs	r0, #0
   30ff4:	bf18      	it	ne
   30ff6:	2001      	movne	r0, #1
}
   30ff8:	bd10      	pop	{r4, pc}
		return 1;
   30ffa:	2001      	movs	r0, #1
   30ffc:	e7fc      	b.n	30ff8 <on_headers_complete+0x2e>
	return 0;
   30ffe:	2000      	movs	r0, #0
   31000:	e7fa      	b.n	30ff8 <on_headers_complete+0x2e>

00031002 <on_status>:
	len = MIN(length, sizeof(req->internal.response.http_status) - 1);
   31002:	2a1f      	cmp	r2, #31
{
   31004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	len = MIN(length, sizeof(req->internal.response.http_status) - 1);
   31006:	4616      	mov	r6, r2
   31008:	bf28      	it	cs
   3100a:	261f      	movcs	r6, #31
{
   3100c:	4604      	mov	r4, r0
   3100e:	4615      	mov	r5, r2
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31010:	306c      	adds	r0, #108	; 0x6c
   31012:	4632      	mov	r2, r6
   31014:	460f      	mov	r7, r1
   31016:	f002 fe0a 	bl	33c2e <memcpy>
	req->internal.response.http_status[len] = 0;
   3101a:	2300      	movs	r3, #0
   3101c:	4426      	add	r6, r4
   3101e:	f886 306c 	strb.w	r3, [r6, #108]	; 0x6c
	req->internal.response.http_status_code =
   31022:	8aa3      	ldrh	r3, [r4, #20]
   31024:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
	if (req->internal.response.http_cb &&
   31028:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   3102a:	b12b      	cbz	r3, 31038 <on_status+0x36>
	    req->internal.response.http_cb->on_status) {
   3102c:	689b      	ldr	r3, [r3, #8]
	if (req->internal.response.http_cb &&
   3102e:	b11b      	cbz	r3, 31038 <on_status+0x36>
		req->internal.response.http_cb->on_status(parser, at, length);
   31030:	462a      	mov	r2, r5
   31032:	4639      	mov	r1, r7
   31034:	4620      	mov	r0, r4
   31036:	4798      	blx	r3
}
   31038:	2000      	movs	r0, #0
   3103a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003103c <sendall>:
{
   3103c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3103e:	4606      	mov	r6, r0
   31040:	460d      	mov	r5, r1
   31042:	4614      	mov	r4, r2
   31044:	2700      	movs	r7, #0
	while (len) {
   31046:	b90c      	cbnz	r4, 3104c <sendall+0x10>
	return 0;
   31048:	4620      	mov	r0, r4
   3104a:	e00d      	b.n	31068 <sendall+0x2c>
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3104c:	2300      	movs	r3, #0
   3104e:	4622      	mov	r2, r4
   31050:	4629      	mov	r1, r5
   31052:	4630      	mov	r0, r6
   31054:	e9cd 7700 	strd	r7, r7, [sp]
   31058:	f7ff fb89 	bl	3076e <z_impl_zsock_sendto>
		if (out_len < 0) {
   3105c:	1e03      	subs	r3, r0, #0
   3105e:	da05      	bge.n	3106c <sendall+0x30>
			return -errno;
   31060:	f7ff fe2b 	bl	30cba <__errno>
   31064:	6800      	ldr	r0, [r0, #0]
   31066:	4240      	negs	r0, r0
}
   31068:	b003      	add	sp, #12
   3106a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = (const char *)buf + out_len;
   3106c:	441d      	add	r5, r3
		len -= out_len;
   3106e:	1ae4      	subs	r4, r4, r3
   31070:	e7e9      	b.n	31046 <sendall+0xa>

00031072 <http_send_data.constprop.0>:
static int http_send_data(int sock, char *send_buf,
   31072:	b408      	push	{r3}
   31074:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31078:	4680      	mov	r8, r0
   3107a:	460d      	mov	r5, r1
	int sent = 0;
   3107c:	2600      	movs	r6, #0
static int http_send_data(int sock, char *send_buf,
   3107e:	ab0d      	add	r3, sp, #52	; 0x34
   31080:	f853 ab04 	ldr.w	sl, [r3], #4
	data = va_arg(va, const char *);
   31084:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   31086:	3304      	adds	r3, #4
	int ret, end_of_send = *send_buf_pos;
   31088:	f8da 4000 	ldr.w	r4, [sl]
	data = va_arg(va, const char *);
   3108c:	9303      	str	r3, [sp, #12]
	while (data) {
   3108e:	b95f      	cbnz	r7, 310a8 <http_send_data.constprop.0+0x36>
	if (end_of_send > (int)send_buf_max_len) {
   31090:	2cc0      	cmp	r4, #192	; 0xc0
	return sent;
   31092:	bfd6      	itet	le
   31094:	4630      	movle	r0, r6
		return -EMSGSIZE;
   31096:	f06f 0079 	mvngt.w	r0, #121	; 0x79
	*send_buf_pos = end_of_send;
   3109a:	f8ca 4000 	strle.w	r4, [sl]
}
   3109e:	b004      	add	sp, #16
   310a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   310a4:	b001      	add	sp, #4
   310a6:	4770      	bx	lr
		end_of_data = 0;
   310a8:	f04f 0900 	mov.w	r9, #0
			remaining_len = strlen(data + end_of_data);
   310ac:	eb07 0109 	add.w	r1, r7, r9
   310b0:	4608      	mov	r0, r1
   310b2:	9101      	str	r1, [sp, #4]
   310b4:	f7eb fff4 	bl	1d0a0 <strlen>
   310b8:	4602      	mov	r2, r0
			to_be_copied = send_buf_max_len - end_of_send;
   310ba:	f1c4 0bc0 	rsb	fp, r4, #192	; 0xc0
			if (remaining_len > to_be_copied) {
   310be:	455a      	cmp	r2, fp
   310c0:	9901      	ldr	r1, [sp, #4]
				strncpy(send_buf + end_of_send,
   310c2:	eb05 0004 	add.w	r0, r5, r4
			if (remaining_len > to_be_copied) {
   310c6:	dd0d      	ble.n	310e4 <http_send_data.constprop.0+0x72>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   310c8:	465a      	mov	r2, fp
   310ca:	f002 ff8e 	bl	33fea <strncpy>
				ret = sendall(sock, send_buf, end_of_send);
   310ce:	22c0      	movs	r2, #192	; 0xc0
   310d0:	4629      	mov	r1, r5
   310d2:	4640      	mov	r0, r8
   310d4:	f7ff ffb2 	bl	3103c <sendall>
				if (ret < 0) {
   310d8:	2800      	cmp	r0, #0
   310da:	dbe0      	blt.n	3109e <http_send_data.constprop.0+0x2c>
				end_of_send = 0;
   310dc:	2400      	movs	r4, #0
				end_of_data += to_be_copied;
   310de:	44d9      	add	r9, fp
				sent += end_of_send;
   310e0:	36c0      	adds	r6, #192	; 0xc0
		} while (remaining_len > 0);
   310e2:	e7e3      	b.n	310ac <http_send_data.constprop.0+0x3a>
   310e4:	9201      	str	r2, [sp, #4]
   310e6:	f002 ff80 	bl	33fea <strncpy>
		data = va_arg(va, const char *);
   310ea:	9b03      	ldr	r3, [sp, #12]
				end_of_send += remaining_len;
   310ec:	9a01      	ldr	r2, [sp, #4]
		data = va_arg(va, const char *);
   310ee:	681f      	ldr	r7, [r3, #0]
				end_of_send += remaining_len;
   310f0:	4414      	add	r4, r2
		data = va_arg(va, const char *);
   310f2:	1d1a      	adds	r2, r3, #4
   310f4:	9203      	str	r2, [sp, #12]
   310f6:	e7ca      	b.n	3108e <http_send_data.constprop.0+0x1c>

000310f8 <http_timeout>:
	(void)zsock_shutdown(data->sock, ZSOCK_SHUT_RD);
   310f8:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
	return z_impl_zsock_shutdown(sock, how);
   310fc:	2100      	movs	r1, #0
   310fe:	f7ff bae2 	b.w	306c6 <z_impl_zsock_shutdown>

00031102 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   31102:	220c      	movs	r2, #12
   31104:	6903      	ldr	r3, [r0, #16]
   31106:	b2c9      	uxtb	r1, r1
   31108:	fb01 3302 	mla	r3, r1, r2, r3
   3110c:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   3110e:	f000 0007 	and.w	r0, r0, #7
   31112:	4770      	bx	lr

00031114 <set_on_state>:
	__asm__ volatile(
   31114:	f04f 0320 	mov.w	r3, #32
   31118:	f3ef 8211 	mrs	r2, BASEPRI
   3111c:	f383 8812 	msr	BASEPRI_MAX, r3
   31120:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   31124:	6803      	ldr	r3, [r0, #0]
   31126:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3112a:	f043 0302 	orr.w	r3, r3, #2
   3112e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   31130:	f382 8811 	msr	BASEPRI, r2
   31134:	f3bf 8f6f 	isb	sy
}
   31138:	4770      	bx	lr

0003113a <stop>:
{
   3113a:	4603      	mov	r3, r0
   3113c:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   3113e:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   31140:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   31142:	f04f 0420 	mov.w	r4, #32
   31146:	f3ef 8611 	mrs	r6, BASEPRI
   3114a:	f384 8812 	msr	BASEPRI_MAX, r4
   3114e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   31152:	250c      	movs	r5, #12
   31154:	fb05 0401 	mla	r4, r5, r1, r0
   31158:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   3115a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   3115e:	d001      	beq.n	31164 <stop+0x2a>
   31160:	42a2      	cmp	r2, r4
   31162:	d111      	bne.n	31188 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   31164:	2201      	movs	r2, #1
   31166:	fb05 0001 	mla	r0, r5, r1, r0
   3116a:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   3116c:	2000      	movs	r0, #0
	__asm__ volatile(
   3116e:	f386 8811 	msr	BASEPRI, r6
   31172:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   31176:	b930      	cbnz	r0, 31186 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   31178:	220c      	movs	r2, #12
   3117a:	685b      	ldr	r3, [r3, #4]
   3117c:	fb02 3101 	mla	r1, r2, r1, r3
   31180:	684b      	ldr	r3, [r1, #4]
   31182:	4798      	blx	r3
	return 0;
   31184:	2000      	movs	r0, #0
}
   31186:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   31188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3118c:	e7ef      	b.n	3116e <stop+0x34>

0003118e <api_stop>:
	return stop(dev, subsys, CTX_API);
   3118e:	2280      	movs	r2, #128	; 0x80
   31190:	f7ff bfd3 	b.w	3113a <stop>

00031194 <async_start>:
{
   31194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31196:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   31198:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   3119a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   3119c:	f04f 0520 	mov.w	r5, #32
   311a0:	f3ef 8c11 	mrs	ip, BASEPRI
   311a4:	f385 8812 	msr	BASEPRI_MAX, r5
   311a8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   311ac:	260c      	movs	r6, #12
   311ae:	fb06 4601 	mla	r6, r6, r1, r4
   311b2:	6c35      	ldr	r5, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   311b4:	f005 0e07 	and.w	lr, r5, #7
   311b8:	f1be 0f01 	cmp.w	lr, #1
   311bc:	d110      	bne.n	311e0 <async_start+0x4c>
	int err = 0;
   311be:	2500      	movs	r5, #0
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   311c0:	6437      	str	r7, [r6, #64]	; 0x40
	__asm__ volatile(
   311c2:	f38c 8811 	msr	BASEPRI, ip
   311c6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   311ca:	b93d      	cbnz	r5, 311dc <async_start+0x48>
	subdata->cb = cb;
   311cc:	260c      	movs	r6, #12
   311ce:	4371      	muls	r1, r6
   311d0:	440c      	add	r4, r1
	subdata->user_data = user_data;
   311d2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   311d6:	6843      	ldr	r3, [r0, #4]
   311d8:	585b      	ldr	r3, [r3, r1]
   311da:	4798      	blx	r3
}
   311dc:	4628      	mov	r0, r5
   311de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   311e0:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
   311e4:	42af      	cmp	r7, r5
   311e6:	bf14      	ite	ne
   311e8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   311ec:	f06f 0577 	mvneq.w	r5, #119	; 0x77
   311f0:	e7e7      	b.n	311c2 <async_start+0x2e>

000311f2 <api_start>:
{
   311f2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   311f4:	2480      	movs	r4, #128	; 0x80
   311f6:	9400      	str	r4, [sp, #0]
   311f8:	f7ff ffcc 	bl	31194 <async_start>
}
   311fc:	b002      	add	sp, #8
   311fe:	bd10      	pop	{r4, pc}

00031200 <onoff_started_callback>:
{
   31200:	b410      	push	{r4}
	notify(mgr, 0);
   31202:	241c      	movs	r4, #28
	return &data->mgr[type];
   31204:	6900      	ldr	r0, [r0, #16]
   31206:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   31208:	fb03 0004 	mla	r0, r3, r4, r0
   3120c:	2100      	movs	r1, #0
}
   3120e:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   31212:	4710      	bx	r2

00031214 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   31214:	2000      	movs	r0, #0
   31216:	f7f8 b8d9 	b.w	293cc <nrfx_clock_start>

0003121a <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3121a:	2000      	movs	r0, #0
   3121c:	f000 bf50 	b.w	320c0 <nrfx_clock_stop>

00031220 <blocking_start_callback>:
{
   31220:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   31222:	f7fb b9cf 	b.w	2c5c4 <z_impl_k_sem_give>

00031226 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   31226:	6843      	ldr	r3, [r0, #4]
}
   31228:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3122a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3122c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3122e:	600b      	str	r3, [r1, #0]
}
   31230:	4770      	bx	lr

00031232 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   31232:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
   31234:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   31238:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
   3123a:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   3123e:	6098      	str	r0, [r3, #8]
}
   31240:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   31242:	60d9      	str	r1, [r3, #12]
   31244:	4770      	bx	lr

00031246 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   31246:	6843      	ldr	r3, [r0, #4]
}
   31248:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3124a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   3124c:	6099      	str	r1, [r3, #8]
}
   3124e:	4770      	bx	lr

00031250 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   31250:	6843      	ldr	r3, [r0, #4]
}
   31252:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   31254:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   31256:	60d9      	str	r1, [r3, #12]
}
   31258:	4770      	bx	lr

0003125a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3125a:	6843      	ldr	r3, [r0, #4]
   3125c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3125e:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
   31260:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   31264:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   31266:	6090      	str	r0, [r2, #8]
}
   31268:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   3126a:	60d3      	str	r3, [r2, #12]
   3126c:	4770      	bx	lr

0003126e <gpio_nrfx_manage_callback>:
	return port->data;
   3126e:	6903      	ldr	r3, [r0, #16]
{
   31270:	b530      	push	{r4, r5, lr}
	return list->head;
   31272:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   31274:	b158      	cbz	r0, 3128e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   31276:	2400      	movs	r4, #0
   31278:	4281      	cmp	r1, r0
   3127a:	d112      	bne.n	312a2 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   3127c:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   3127e:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   31280:	b954      	cbnz	r4, 31298 <gpio_nrfx_manage_callback+0x2a>
   31282:	428d      	cmp	r5, r1
	list->head = node;
   31284:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   31286:	d100      	bne.n	3128a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   31288:	6098      	str	r0, [r3, #8]
	parent->next = child;
   3128a:	2000      	movs	r0, #0
   3128c:	6008      	str	r0, [r1, #0]
	if (set) {
   3128e:	b96a      	cbnz	r2, 312ac <gpio_nrfx_manage_callback+0x3e>
	return 0;
   31290:	2000      	movs	r0, #0
}
   31292:	bd30      	pop	{r4, r5, pc}
   31294:	4628      	mov	r0, r5
   31296:	e7ef      	b.n	31278 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   31298:	428d      	cmp	r5, r1
	parent->next = child;
   3129a:	6020      	str	r0, [r4, #0]
	list->tail = node;
   3129c:	bf08      	it	eq
   3129e:	609c      	streq	r4, [r3, #8]
}
   312a0:	e7f3      	b.n	3128a <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   312a2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   312a4:	4604      	mov	r4, r0
   312a6:	2d00      	cmp	r5, #0
   312a8:	d1f4      	bne.n	31294 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   312aa:	b13a      	cbz	r2, 312bc <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
   312ac:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   312ae:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   312b0:	600a      	str	r2, [r1, #0]
	list->head = node;
   312b2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   312b4:	2800      	cmp	r0, #0
   312b6:	d1eb      	bne.n	31290 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   312b8:	6099      	str	r1, [r3, #8]
}
   312ba:	e7ea      	b.n	31292 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   312bc:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   312c0:	e7e7      	b.n	31292 <gpio_nrfx_manage_callback+0x24>

000312c2 <is_regular_addr_valid>:
{
   312c2:	b538      	push	{r3, r4, r5, lr}
   312c4:	4605      	mov	r5, r0
   312c6:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
   312c8:	f000 fefc 	bl	320c4 <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
   312cc:	2d00      	cmp	r5, #0
   312ce:	db07      	blt.n	312e0 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
   312d0:	42a8      	cmp	r0, r5
   312d2:	d905      	bls.n	312e0 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
   312d4:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
   312d6:	4284      	cmp	r4, r0
   312d8:	bf8c      	ite	hi
   312da:	2000      	movhi	r0, #0
   312dc:	2001      	movls	r0, #1
}
   312de:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
   312e0:	2000      	movs	r0, #0
   312e2:	e7fc      	b.n	312de <is_regular_addr_valid+0x1c>

000312e4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   312e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   312e6:	ab0b      	add	r3, sp, #44	; 0x2c
   312e8:	9305      	str	r3, [sp, #20]
   312ea:	9303      	str	r3, [sp, #12]
   312ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   312ee:	2201      	movs	r2, #1
   312f0:	9302      	str	r3, [sp, #8]
   312f2:	2300      	movs	r3, #0
   312f4:	4618      	mov	r0, r3
   312f6:	e9cd 3300 	strd	r3, r3, [sp]
   312fa:	f7ef fac7 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   312fe:	b007      	add	sp, #28
   31300:	f85d fb04 	ldr.w	pc, [sp], #4

00031304 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   31304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   31308:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   3130a:	6883      	ldr	r3, [r0, #8]
{
   3130c:	b086      	sub	sp, #24
   3130e:	4688      	mov	r8, r1
   31310:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   31312:	691b      	ldr	r3, [r3, #16]
   31314:	aa02      	add	r2, sp, #8
   31316:	a901      	add	r1, sp, #4
   31318:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   3131a:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   3131c:	4625      	mov	r5, r4
   3131e:	9b02      	ldr	r3, [sp, #8]
   31320:	42ab      	cmp	r3, r5
   31322:	d802      	bhi.n	3132a <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   31324:	b006      	add	sp, #24
   31326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   3132a:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   3132c:	9f01      	ldr	r7, [sp, #4]
   3132e:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   31332:	687b      	ldr	r3, [r7, #4]
   31334:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   31336:	683a      	ldr	r2, [r7, #0]
   31338:	eb0a 0306 	add.w	r3, sl, r6
   3133c:	42b2      	cmp	r2, r6
   3133e:	d802      	bhi.n	31346 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   31340:	469a      	mov	sl, r3
   31342:	3501      	adds	r5, #1
   31344:	e7eb      	b.n	3131e <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   31346:	4649      	mov	r1, r9
   31348:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   3134a:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   3134c:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   3134e:	47c0      	blx	r8
   31350:	2800      	cmp	r0, #0
   31352:	d0e7      	beq.n	31324 <flash_page_foreach+0x20>
			off += page_info.size;
   31354:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   31356:	3601      	adds	r6, #1
			off += page_info.size;
   31358:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   3135a:	e7ec      	b.n	31336 <flash_page_foreach+0x32>

0003135c <uarte_nrfx_config_get>:
{
   3135c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   3135e:	6902      	ldr	r2, [r0, #16]
   31360:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   31364:	e883 0003 	stmia.w	r3, {r0, r1}
}
   31368:	2000      	movs	r0, #0
   3136a:	4770      	bx	lr

0003136c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3136c:	6843      	ldr	r3, [r0, #4]
   3136e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   31370:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   31374:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   31378:	4770      	bx	lr

0003137a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   3137a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   3137c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   3137e:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31380:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   31384:	b150      	cbz	r0, 3139c <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31386:	2000      	movs	r0, #0
	*c = *data->rx_data;
   31388:	6992      	ldr	r2, [r2, #24]
   3138a:	7812      	ldrb	r2, [r2, #0]
   3138c:	700a      	strb	r2, [r1, #0]
   3138e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   31392:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   31396:	2201      	movs	r2, #1
   31398:	601a      	str	r2, [r3, #0]
	return 0;
   3139a:	4770      	bx	lr
		return -1;
   3139c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   313a0:	4770      	bx	lr

000313a2 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   313a2:	2a00      	cmp	r2, #0
   313a4:	dd10      	ble.n	313c8 <uarte_nrfx_fifo_read+0x26>
	return config->uarte_regs;
   313a6:	6843      	ldr	r3, [r0, #4]
   313a8:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   313aa:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   313ae:	b15b      	cbz	r3, 313c8 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
   313b0:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   313b2:	2000      	movs	r0, #0
   313b4:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   313b8:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   313bc:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
   313be:	699b      	ldr	r3, [r3, #24]
   313c0:	781b      	ldrb	r3, [r3, #0]
   313c2:	700b      	strb	r3, [r1, #0]
   313c4:	6010      	str	r0, [r2, #0]
}
   313c6:	4770      	bx	lr
	int num_rx = 0;
   313c8:	2000      	movs	r0, #0
   313ca:	4770      	bx	lr

000313cc <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   313cc:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   313ce:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   313d0:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   313d2:	f04f 0020 	mov.w	r0, #32
   313d6:	f3ef 8311 	mrs	r3, BASEPRI
   313da:	f380 8812 	msr	BASEPRI_MAX, r0
   313de:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   313e2:	2000      	movs	r0, #0
   313e4:	68c9      	ldr	r1, [r1, #12]
   313e6:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   313e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   313ec:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   313f0:	f383 8811 	msr	BASEPRI, r3
   313f4:	f3bf 8f6f 	isb	sy
}
   313f8:	4770      	bx	lr

000313fa <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   313fa:	2201      	movs	r2, #1
   313fc:	6903      	ldr	r3, [r0, #16]
   313fe:	68db      	ldr	r3, [r3, #12]
   31400:	739a      	strb	r2, [r3, #14]
}
   31402:	4770      	bx	lr

00031404 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   31404:	6903      	ldr	r3, [r0, #16]
   31406:	68db      	ldr	r3, [r3, #12]
   31408:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3140a:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   3140e:	b962      	cbnz	r2, 3142a <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   31410:	6842      	ldr	r2, [r0, #4]
   31412:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31414:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   31418:	b140      	cbz	r0, 3142c <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   3141a:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   3141e:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   31422:	d003      	beq.n	3142c <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   31424:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   31426:	6119      	str	r1, [r3, #16]
   31428:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3142a:	2000      	movs	r0, #0
}
   3142c:	4770      	bx	lr

0003142e <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   3142e:	6843      	ldr	r3, [r0, #4]
   31430:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31432:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   31436:	3800      	subs	r0, #0
   31438:	bf18      	it	ne
   3143a:	2001      	movne	r0, #1
   3143c:	4770      	bx	lr

0003143e <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   3143e:	2210      	movs	r2, #16
	return config->uarte_regs;
   31440:	6843      	ldr	r3, [r0, #4]
   31442:	681b      	ldr	r3, [r3, #0]
   31444:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   31448:	4770      	bx	lr

0003144a <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   3144a:	2210      	movs	r2, #16
	return config->uarte_regs;
   3144c:	6843      	ldr	r3, [r0, #4]
   3144e:	681b      	ldr	r3, [r3, #0]
   31450:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   31454:	4770      	bx	lr

00031456 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   31456:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3145a:	6843      	ldr	r3, [r0, #4]
   3145c:	681b      	ldr	r3, [r3, #0]
   3145e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   31462:	4770      	bx	lr

00031464 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   31464:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   31468:	6843      	ldr	r3, [r0, #4]
   3146a:	681b      	ldr	r3, [r3, #0]
   3146c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   31470:	4770      	bx	lr

00031472 <uarte_nrfx_irq_update>:
}
   31472:	2001      	movs	r0, #1
   31474:	4770      	bx	lr

00031476 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   31476:	6903      	ldr	r3, [r0, #16]
   31478:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   3147a:	e9c3 1200 	strd	r1, r2, [r3]
}
   3147e:	4770      	bx	lr

00031480 <uarte_nrfx_irq_is_pending>:
{
   31480:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   31482:	6843      	ldr	r3, [r0, #4]
{
   31484:	4604      	mov	r4, r0
	return config->uarte_regs;
   31486:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   31488:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   3148c:	025b      	lsls	r3, r3, #9
   3148e:	d405      	bmi.n	3149c <uarte_nrfx_irq_is_pending+0x1c>
   31490:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   31494:	f010 0010 	ands.w	r0, r0, #16
   31498:	d106      	bne.n	314a8 <uarte_nrfx_irq_is_pending+0x28>
}
   3149a:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3149c:	f7ff ffb2 	bl	31404 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   314a0:	2800      	cmp	r0, #0
   314a2:	d0f5      	beq.n	31490 <uarte_nrfx_irq_is_pending+0x10>
		||
   314a4:	2001      	movs	r0, #1
   314a6:	e7f8      	b.n	3149a <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   314a8:	4620      	mov	r0, r4
   314aa:	f7ff ffc0 	bl	3142e <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   314ae:	3800      	subs	r0, #0
   314b0:	bf18      	it	ne
   314b2:	2001      	movne	r0, #1
   314b4:	e7f1      	b.n	3149a <uarte_nrfx_irq_is_pending+0x1a>

000314b6 <tx_start.isra.0>:
	return config->uarte_regs;
   314b6:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   314b8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   314bc:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   314c0:	2200      	movs	r2, #0
   314c2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   314c6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   314ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   314ce:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   314d2:	6842      	ldr	r2, [r0, #4]
   314d4:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   314d6:	bf41      	itttt	mi
   314d8:	2208      	movmi	r2, #8
   314da:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   314de:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   314e2:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   314e6:	2201      	movs	r2, #1
   314e8:	609a      	str	r2, [r3, #8]
}
   314ea:	4770      	bx	lr

000314ec <is_tx_ready.isra.0>:
	return config->uarte_regs;
   314ec:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   314ee:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   314f2:	b943      	cbnz	r3, 31506 <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   314f4:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   314f6:	0789      	lsls	r1, r1, #30
   314f8:	d407      	bmi.n	3150a <is_tx_ready.isra.0+0x1e>
   314fa:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   314fe:	3800      	subs	r0, #0
   31500:	bf18      	it	ne
   31502:	2001      	movne	r0, #1
   31504:	4770      	bx	lr
   31506:	2001      	movs	r0, #1
   31508:	4770      	bx	lr
   3150a:	4618      	mov	r0, r3
}
   3150c:	4770      	bx	lr

0003150e <uarte_nrfx_fifo_fill>:
{
   3150e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   31510:	6906      	ldr	r6, [r0, #16]
{
   31512:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
   31514:	68f3      	ldr	r3, [r6, #12]
   31516:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   31518:	3310      	adds	r3, #16
   3151a:	4294      	cmp	r4, r2
   3151c:	bfa8      	it	ge
   3151e:	4614      	movge	r4, r2
   31520:	2201      	movs	r2, #1
   31522:	e8d3 0fef 	ldaex	r0, [r3]
   31526:	2800      	cmp	r0, #0
   31528:	d103      	bne.n	31532 <uarte_nrfx_fifo_fill+0x24>
   3152a:	e8c3 2fe7 	stlex	r7, r2, [r3]
   3152e:	2f00      	cmp	r7, #0
   31530:	d1f7      	bne.n	31522 <uarte_nrfx_fifo_fill+0x14>
   31532:	bf0c      	ite	eq
   31534:	4613      	moveq	r3, r2
   31536:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   31538:	d11f      	bne.n	3157a <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
   3153a:	68f3      	ldr	r3, [r6, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3153c:	4622      	mov	r2, r4
   3153e:	6898      	ldr	r0, [r3, #8]
   31540:	f002 fb75 	bl	33c2e <memcpy>
	__asm__ volatile(
   31544:	f04f 0320 	mov.w	r3, #32
   31548:	f3ef 8711 	mrs	r7, BASEPRI
   3154c:	f383 8812 	msr	BASEPRI_MAX, r3
   31550:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   31554:	6868      	ldr	r0, [r5, #4]
   31556:	f7ff ffc9 	bl	314ec <is_tx_ready.isra.0>
   3155a:	68f3      	ldr	r3, [r6, #12]
   3155c:	b938      	cbnz	r0, 3156e <uarte_nrfx_fifo_fill+0x60>
		len = 0;
   3155e:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   31560:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   31562:	f387 8811 	msr	BASEPRI, r7
   31566:	f3bf 8f6f 	isb	sy
}
   3156a:	4620      	mov	r0, r4
   3156c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   3156e:	4622      	mov	r2, r4
   31570:	6899      	ldr	r1, [r3, #8]
   31572:	6868      	ldr	r0, [r5, #4]
   31574:	f7ff ff9f 	bl	314b6 <tx_start.isra.0>
   31578:	e7f3      	b.n	31562 <uarte_nrfx_fifo_fill+0x54>
		return 0;
   3157a:	461c      	mov	r4, r3
   3157c:	e7f5      	b.n	3156a <uarte_nrfx_fifo_fill+0x5c>

0003157e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   3157e:	6842      	ldr	r2, [r0, #4]
{
   31580:	b410      	push	{r4}
	return config->uarte_regs;
   31582:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   31584:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   31588:	05c9      	lsls	r1, r1, #23
   3158a:	d518      	bpl.n	315be <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3158c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   31590:	b1a9      	cbz	r1, 315be <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   31592:	f04f 0420 	mov.w	r4, #32
   31596:	f3ef 8111 	mrs	r1, BASEPRI
   3159a:	f384 8812 	msr	BASEPRI_MAX, r4
   3159e:	f3bf 8f6f 	isb	sy
   315a2:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   315a6:	b134      	cbz	r4, 315b6 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   315a8:	2400      	movs	r4, #0
   315aa:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
   315ae:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   315b2:	2401      	movs	r4, #1
   315b4:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
   315b6:	f381 8811 	msr	BASEPRI, r1
   315ba:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   315be:	6852      	ldr	r2, [r2, #4]
   315c0:	06d2      	lsls	r2, r2, #27
   315c2:	d51a      	bpl.n	315fa <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
   315c4:	f04f 0220 	mov.w	r2, #32
   315c8:	f3ef 8111 	mrs	r1, BASEPRI
   315cc:	f382 8812 	msr	BASEPRI_MAX, r2
   315d0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   315d4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   315d8:	b112      	cbz	r2, 315e0 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   315da:	2200      	movs	r2, #0
   315dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   315e0:	6902      	ldr	r2, [r0, #16]
   315e2:	68d2      	ldr	r2, [r2, #12]
   315e4:	b10a      	cbz	r2, 315ea <uarte_nrfx_isr_int+0x6c>
   315e6:	6912      	ldr	r2, [r2, #16]
   315e8:	b91a      	cbnz	r2, 315f2 <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
   315ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   315ee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   315f2:	f381 8811 	msr	BASEPRI, r1
   315f6:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   315fa:	6902      	ldr	r2, [r0, #16]
   315fc:	68d2      	ldr	r2, [r2, #12]
   315fe:	b15a      	cbz	r2, 31618 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   31600:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   31604:	b159      	cbz	r1, 3161e <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
   31606:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   31608:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   3160a:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   3160c:	b13c      	cbz	r4, 3161e <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   3160e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   31612:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   31616:	7391      	strb	r1, [r2, #14]
}
   31618:	f85d 4b04 	ldr.w	r4, [sp], #4
   3161c:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3161e:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   31622:	b121      	cbz	r1, 3162e <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   31624:	2100      	movs	r1, #0
   31626:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   3162a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   3162e:	6813      	ldr	r3, [r2, #0]
   31630:	2b00      	cmp	r3, #0
   31632:	d0f1      	beq.n	31618 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   31634:	6851      	ldr	r1, [r2, #4]
}
   31636:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3163a:	4718      	bx	r3

0003163c <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   3163c:	4608      	mov	r0, r1
   3163e:	b508      	push	{r3, lr}
	int err = EINVAL;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status = PSA_ERROR_GENERIC_ERROR;

	status = psa_generate_random(buffer, length);
   31640:	4611      	mov	r1, r2
   31642:	f7f7 f9f5 	bl	28a30 <psa_generate_random>
	int err = EINVAL;
   31646:	2800      	cmp	r0, #0
		err = 0;
	}

	return err;
#endif /* defined(CONFIG_BUILD_WITH_TFM) */
}
   31648:	bf18      	it	ne
   3164a:	2016      	movne	r0, #22
   3164c:	bd08      	pop	{r3, pc}

0003164e <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   3164e:	b508      	push	{r3, lr}
	(void)dev;

#if defined(CONFIG_BUILD_WITH_TFM)
	psa_status_t status;

	status = psa_crypto_init();
   31650:	f000 fc7f 	bl	31f52 <psa_crypto_init>
	if (status != PSA_SUCCESS) {
		return -EINVAL;
   31654:	2800      	cmp	r0, #0
		return -EINVAL;
	}
#endif

	return 0;
}
   31656:	bf18      	it	ne
   31658:	f06f 0015 	mvnne.w	r0, #21
   3165c:	bd08      	pop	{r3, pc}

0003165e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   3165e:	4770      	bx	lr

00031660 <sys_clock_cycle_get_32>:
{
   31660:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   31662:	f7f3 fcff 	bl	25064 <z_nrf_rtc_timer_read>
}
   31666:	bd08      	pop	{r3, pc}

00031668 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   31668:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   3166a:	6843      	ldr	r3, [r0, #4]
   3166c:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
   3166e:	7a03      	ldrb	r3, [r0, #8]
   31670:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   31674:	3b01      	subs	r3, #1
   31676:	00db      	lsls	r3, r3, #3
   31678:	6845      	ldr	r5, [r0, #4]
   3167a:	6814      	ldr	r4, [r2, #0]
   3167c:	441d      	add	r5, r3
   3167e:	42ac      	cmp	r4, r5
   31680:	d902      	bls.n	31688 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
   31682:	f06f 0001 	mvn.w	r0, #1
}
   31686:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   31688:	7965      	ldrb	r5, [r4, #5]
   3168a:	428d      	cmp	r5, r1
   3168c:	d002      	beq.n	31694 <pinctrl_lookup_state+0x2c>
		(*state)++;
   3168e:	3408      	adds	r4, #8
   31690:	6014      	str	r4, [r2, #0]
   31692:	e7f1      	b.n	31678 <pinctrl_lookup_state+0x10>
			return 0;
   31694:	2000      	movs	r0, #0
   31696:	e7f6      	b.n	31686 <pinctrl_lookup_state+0x1e>

00031698 <nrf_modem_os_busywait>:
	z_impl_k_busy_wait(usec_to_wait);
   31698:	f002 b8fb 	b.w	33892 <z_impl_k_busy_wait>

0003169c <nrf_modem_os_errno_set>:
{
   3169c:	b510      	push	{r4, lr}
   3169e:	4604      	mov	r4, r0
	errno = err_code;
   316a0:	f7ff fb0b 	bl	30cba <__errno>
   316a4:	6004      	str	r4, [r0, #0]
}
   316a6:	bd10      	pop	{r4, pc}

000316a8 <nrf_modem_os_is_in_isr>:
	return k_is_in_isr();
   316a8:	f001 be54 	b.w	33354 <k_is_in_isr>

000316ac <nrf_modem_os_sem_give>:
	z_impl_k_sem_give(sem);
   316ac:	f7fa bf8a 	b.w	2c5c4 <z_impl_k_sem_give>

000316b0 <nrf_modem_os_sem_take>:
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   316b0:	1c4b      	adds	r3, r1, #1
{
   316b2:	b570      	push	{r4, r5, r6, lr}
   316b4:	4605      	mov	r5, r0
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   316b6:	d017      	beq.n	316e8 <nrf_modem_os_sem_take+0x38>
   316b8:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
   316bc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   316c0:	f240 30e7 	movw	r0, #999	; 0x3e7
   316c4:	2100      	movs	r1, #0
   316c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   316ca:	2300      	movs	r3, #0
   316cc:	fbc4 0106 	smlal	r0, r1, r4, r6
   316d0:	f7eb fb6e 	bl	1cdb0 <__aeabi_uldivmod>
   316d4:	4602      	mov	r2, r0
   316d6:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   316d8:	4628      	mov	r0, r5
   316da:	f7fa ff99 	bl	2c610 <z_impl_k_sem_take>
		return -NRF_EAGAIN;
   316de:	2800      	cmp	r0, #0
}
   316e0:	bf18      	it	ne
   316e2:	f06f 000a 	mvnne.w	r0, #10
   316e6:	bd70      	pop	{r4, r5, r6, pc}
	err = k_sem_take((struct k_sem *)sem, timeout == -1 ? K_FOREVER : K_MSEC(timeout));
   316e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   316ec:	4613      	mov	r3, r2
   316ee:	e7f3      	b.n	316d8 <nrf_modem_os_sem_take+0x28>

000316f0 <rpc_proxy_irq_handler>:
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   316f0:	4668      	mov	r0, sp
   316f2:	f020 0107 	bic.w	r1, r0, #7
   316f6:	468d      	mov	sp, r1
   316f8:	b501      	push	{r0, lr}
	nrf_modem_application_irq_handler();
   316fa:	f7f8 fd01 	bl	2a100 <nrf_modem_application_irq_handler>
	nrf_modem_os_event_notify();
   316fe:	f7f4 f887 	bl	25810 <nrf_modem_os_event_notify>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   31702:	f7f0 fa3d 	bl	21b80 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   31706:	f7f0 fb51 	bl	21dac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   3170a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3170e:	4685      	mov	sp, r0
   31710:	4770      	bx	lr

00031712 <read_task_create>:
{
   31712:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(APPLICATION_IRQ, APPLICATION_IRQ_PRIORITY,
   31714:	201c      	movs	r0, #28
   31716:	2200      	movs	r2, #0
   31718:	2106      	movs	r1, #6
   3171a:	f7f0 fa1b 	bl	21b54 <z_arm_irq_priority_set>
}
   3171e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(APPLICATION_IRQ);
   31722:	201c      	movs	r0, #28
   31724:	f7f0 b9f8 	b.w	21b18 <arch_irq_enable>

00031728 <nrf91_socket_offload_setsockopt>:
{
   31728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3172c:	460d      	mov	r5, r1
   3172e:	4614      	mov	r4, r2
   31730:	b086      	sub	sp, #24
	int sd = OBJ_TO_SD(obj);
   31732:	f8d0 8000 	ldr.w	r8, [r0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   31736:	4621      	mov	r1, r4
   31738:	4628      	mov	r0, r5
   3173a:	aa03      	add	r2, sp, #12
{
   3173c:	461e      	mov	r6, r3
   3173e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   31740:	f7f4 f8b2 	bl	258a8 <z_to_nrf_optname>
   31744:	2800      	cmp	r0, #0
   31746:	da08      	bge.n	3175a <nrf91_socket_offload_setsockopt+0x32>
		errno = ENOPROTOOPT;
   31748:	f7ff fab7 	bl	30cba <__errno>
   3174c:	236d      	movs	r3, #109	; 0x6d
   3174e:	6003      	str	r3, [r0, #0]
		return -1;
   31750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   31754:	b006      	add	sp, #24
   31756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3175a:	2d01      	cmp	r5, #1
   3175c:	d110      	bne.n	31780 <nrf91_socket_offload_setsockopt+0x58>
   3175e:	3c14      	subs	r4, #20
   31760:	2c01      	cmp	r4, #1
   31762:	d805      	bhi.n	31770 <nrf91_socket_offload_setsockopt+0x48>
		nrf_optlen = sizeof(struct nrf_timeval);
   31764:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   31766:	6833      	ldr	r3, [r6, #0]
   31768:	9304      	str	r3, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3176a:	68b3      	ldr	r3, [r6, #8]
		nrf_optval = &nrf_timeo;
   3176c:	ae04      	add	r6, sp, #16
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3176e:	9305      	str	r3, [sp, #20]
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   31770:	4633      	mov	r3, r6
   31772:	4629      	mov	r1, r5
   31774:	4640      	mov	r0, r8
   31776:	9a03      	ldr	r2, [sp, #12]
   31778:	9700      	str	r7, [sp, #0]
   3177a:	f7f9 fa7d 	bl	2ac78 <nrf_setsockopt>
	return retval;
   3177e:	e7e9      	b.n	31754 <nrf91_socket_offload_setsockopt+0x2c>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   31780:	f5b5 7f8d 	cmp.w	r5, #282	; 0x11a
   31784:	d1f4      	bne.n	31770 <nrf91_socket_offload_setsockopt+0x48>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   31786:	2c0c      	cmp	r4, #12
   31788:	bf08      	it	eq
   3178a:	2704      	moveq	r7, #4
   3178c:	e7f0      	b.n	31770 <nrf91_socket_offload_setsockopt+0x48>

0003178e <nrf91_socket_offload_getsockopt>:
{
   3178e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   31792:	461c      	mov	r4, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   31794:	2300      	movs	r3, #0
{
   31796:	460f      	mov	r7, r1
   31798:	4615      	mov	r5, r2
   3179a:	b086      	sub	sp, #24
   3179c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   317a0:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   317a4:	f8d8 3000 	ldr.w	r3, [r8]
	int sd = OBJ_TO_SD(obj);
   317a8:	6806      	ldr	r6, [r0, #0]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   317aa:	4629      	mov	r1, r5
   317ac:	4638      	mov	r0, r7
   317ae:	aa02      	add	r2, sp, #8
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   317b0:	9303      	str	r3, [sp, #12]
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0) {
   317b2:	f7f4 f879 	bl	258a8 <z_to_nrf_optname>
   317b6:	2800      	cmp	r0, #0
   317b8:	da09      	bge.n	317ce <nrf91_socket_offload_getsockopt+0x40>
		errno = ENOPROTOOPT;
   317ba:	f7ff fa7e 	bl	30cba <__errno>
   317be:	236d      	movs	r3, #109	; 0x6d
		return -1;
   317c0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
		errno = ENOPROTOOPT;
   317c4:	6003      	str	r3, [r0, #0]
}
   317c6:	4630      	mov	r0, r6
   317c8:	b006      	add	sp, #24
   317ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   317ce:	2f01      	cmp	r7, #1
   317d0:	d123      	bne.n	3181a <nrf91_socket_offload_getsockopt+0x8c>
   317d2:	f1a5 0314 	sub.w	r3, r5, #20
   317d6:	2b01      	cmp	r3, #1
   317d8:	d81f      	bhi.n	3181a <nrf91_socket_offload_getsockopt+0x8c>
		nrf_optlen = sizeof(struct nrf_timeval);
   317da:	2308      	movs	r3, #8
   317dc:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   317de:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   317e0:	aa03      	add	r2, sp, #12
   317e2:	4630      	mov	r0, r6
   317e4:	9200      	str	r2, [sp, #0]
   317e6:	4639      	mov	r1, r7
   317e8:	9a02      	ldr	r2, [sp, #8]
   317ea:	f001 fa70 	bl	32cce <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   317ee:	4606      	mov	r6, r0
   317f0:	2800      	cmp	r0, #0
   317f2:	d1e8      	bne.n	317c6 <nrf91_socket_offload_getsockopt+0x38>
   317f4:	2c00      	cmp	r4, #0
   317f6:	d0e6      	beq.n	317c6 <nrf91_socket_offload_getsockopt+0x38>
		*optlen = nrf_optlen;
   317f8:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   317fa:	2f01      	cmp	r7, #1
		*optlen = nrf_optlen;
   317fc:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   31800:	d1e1      	bne.n	317c6 <nrf91_socket_offload_getsockopt+0x38>
			if (optname == SO_ERROR) {
   31802:	2d04      	cmp	r5, #4
   31804:	d10b      	bne.n	3181e <nrf91_socket_offload_getsockopt+0x90>
				if (*(int *)optval != 0) {
   31806:	6820      	ldr	r0, [r4, #0]
   31808:	2800      	cmp	r0, #0
   3180a:	d0dc      	beq.n	317c6 <nrf91_socket_offload_getsockopt+0x38>
					nrf_modem_os_errno_set(*(int *)optval);
   3180c:	f7ff ff46 	bl	3169c <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   31810:	f7ff fa53 	bl	30cba <__errno>
   31814:	6803      	ldr	r3, [r0, #0]
   31816:	6023      	str	r3, [r4, #0]
   31818:	e7d5      	b.n	317c6 <nrf91_socket_offload_getsockopt+0x38>
   3181a:	4623      	mov	r3, r4
   3181c:	e7e0      	b.n	317e0 <nrf91_socket_offload_getsockopt+0x52>
			} else if ((optname == SO_RCVTIMEO) ||
   3181e:	3d14      	subs	r5, #20
   31820:	2d01      	cmp	r5, #1
   31822:	d8d0      	bhi.n	317c6 <nrf91_socket_offload_getsockopt+0x38>
					nrf_timeo.tv_sec;
   31824:	9b04      	ldr	r3, [sp, #16]
   31826:	e9c4 3000 	strd	r3, r0, [r4]
				((struct timeval *)optval)->tv_usec =
   3182a:	9b05      	ldr	r3, [sp, #20]
   3182c:	60a3      	str	r3, [r4, #8]
				*optlen = sizeof(struct timeval);
   3182e:	2310      	movs	r3, #16
   31830:	f8c8 3000 	str.w	r3, [r8]
   31834:	e7c7      	b.n	317c6 <nrf91_socket_offload_getsockopt+0x38>

00031836 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   31836:	6800      	ldr	r0, [r0, #0]
   31838:	f001 b89a 	b.w	32970 <nrf_listen>

0003183c <nrf91_socket_offload_freeaddrinfo>:
{
   3183c:	b538      	push	{r3, r4, r5, lr}
   3183e:	4604      	mov	r4, r0
	while (next != NULL) {
   31840:	b904      	cbnz	r4, 31844 <nrf91_socket_offload_freeaddrinfo+0x8>
}
   31842:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   31844:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   31846:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   31848:	f002 f9a7 	bl	33b9a <k_free>
		k_free(this);
   3184c:	4620      	mov	r0, r4
   3184e:	f002 f9a4 	bl	33b9a <k_free>
		next = next->ai_next;
   31852:	462c      	mov	r4, r5
   31854:	e7f4      	b.n	31840 <nrf91_socket_offload_freeaddrinfo+0x4>

00031856 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   31856:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   31858:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3185a:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3185c:	4603      	mov	r3, r0
{
   3185e:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   31860:	f823 2b04 	strh.w	r2, [r3], #4
   31864:	f101 0420 	add.w	r4, r1, #32
   31868:	f101 0210 	add.w	r2, r1, #16
   3186c:	f852 5b04 	ldr.w	r5, [r2], #4
   31870:	42a2      	cmp	r2, r4
   31872:	f843 5b04 	str.w	r5, [r3], #4
   31876:	d1f9      	bne.n	3186c <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   31878:	6a0b      	ldr	r3, [r1, #32]
   3187a:	7503      	strb	r3, [r0, #20]
}
   3187c:	bd30      	pop	{r4, r5, pc}

0003187e <z_to_nrf_ipv6>:
{
   3187e:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   31880:	2124      	movs	r1, #36	; 0x24
   31882:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   31884:	8841      	ldrh	r1, [r0, #2]
{
   31886:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   31888:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3188a:	2102      	movs	r1, #2
{
   3188c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   3188e:	6059      	str	r1, [r3, #4]
   31890:	1d04      	adds	r4, r0, #4
   31892:	f103 0610 	add.w	r6, r3, #16
   31896:	f100 0714 	add.w	r7, r0, #20
   3189a:	4635      	mov	r5, r6
   3189c:	6820      	ldr	r0, [r4, #0]
   3189e:	6861      	ldr	r1, [r4, #4]
   318a0:	3408      	adds	r4, #8
   318a2:	c503      	stmia	r5!, {r0, r1}
   318a4:	42bc      	cmp	r4, r7
   318a6:	462e      	mov	r6, r5
   318a8:	d1f7      	bne.n	3189a <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   318aa:	7d12      	ldrb	r2, [r2, #20]
   318ac:	621a      	str	r2, [r3, #32]
}
   318ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000318b0 <nrf91_socket_offload_sendto>:
{
   318b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   318b4:	b08d      	sub	sp, #52	; 0x34
   318b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
   318b8:	460e      	mov	r6, r1
   318ba:	4617      	mov	r7, r2
   318bc:	4698      	mov	r8, r3
	int sd = OBJ_TO_SD(obj);
   318be:	6805      	ldr	r5, [r0, #0]
	if (to == NULL) {
   318c0:	b934      	cbnz	r4, 318d0 <nrf91_socket_offload_sendto+0x20>
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   318c2:	4628      	mov	r0, r5
   318c4:	9415      	str	r4, [sp, #84]	; 0x54
}
   318c6:	b00d      	add	sp, #52	; 0x34
   318c8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		retval = nrf_sendto(sd, buf, len, flags, NULL,
   318cc:	f7f9 b8d4 	b.w	2aa78 <nrf_sendto>
	} else if (to->sa_family == AF_INET) {
   318d0:	8820      	ldrh	r0, [r4, #0]
   318d2:	2801      	cmp	r0, #1
   318d4:	d111      	bne.n	318fa <nrf91_socket_offload_sendto+0x4a>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   318d6:	2610      	movs	r6, #16
	nrf_out->sin_family = NRF_AF_INET;
   318d8:	9004      	str	r0, [sp, #16]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   318da:	6860      	ldr	r0, [r4, #4]
	nrf_out->sin_port = ptr->sin_port;
   318dc:	8867      	ldrh	r7, [r4, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   318de:	9006      	str	r0, [sp, #24]
		retval = nrf_sendto(sd, buf, len, flags,
   318e0:	a803      	add	r0, sp, #12
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   318e2:	f88d 600c 	strb.w	r6, [sp, #12]
	nrf_out->sin_port = ptr->sin_port;
   318e6:	f8ad 7014 	strh.w	r7, [sp, #20]
		retval = nrf_sendto(sd, buf, len, flags,
   318ea:	9601      	str	r6, [sp, #4]
   318ec:	9000      	str	r0, [sp, #0]
		retval = nrf_sendto(sd, buf, len, flags,
   318ee:	4628      	mov	r0, r5
   318f0:	f7f9 f8c2 	bl	2aa78 <nrf_sendto>
}
   318f4:	b00d      	add	sp, #52	; 0x34
   318f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (to->sa_family == AF_INET6) {
   318fa:	2802      	cmp	r0, #2
   318fc:	d10c      	bne.n	31918 <nrf91_socket_offload_sendto+0x68>
		z_to_nrf_ipv6(to, &ipv6);
   318fe:	f10d 090c 	add.w	r9, sp, #12
   31902:	4649      	mov	r1, r9
   31904:	4620      	mov	r0, r4
   31906:	f7ff ffba 	bl	3187e <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, flags,
   3190a:	2324      	movs	r3, #36	; 0x24
   3190c:	463a      	mov	r2, r7
   3190e:	e9cd 9300 	strd	r9, r3, [sp]
   31912:	4631      	mov	r1, r6
   31914:	4643      	mov	r3, r8
   31916:	e7ea      	b.n	318ee <nrf91_socket_offload_sendto+0x3e>
	errno = ENOTSUP;
   31918:	f7ff f9cf 	bl	30cba <__errno>
   3191c:	2386      	movs	r3, #134	; 0x86
   3191e:	6003      	str	r3, [r0, #0]
	return retval;
   31920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31924:	e7e6      	b.n	318f4 <nrf91_socket_offload_sendto+0x44>

00031926 <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   31926:	2300      	movs	r3, #0
{
   31928:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3192a:	e9cd 3300 	strd	r3, r3, [sp]
   3192e:	f7ff ffbf 	bl	318b0 <nrf91_socket_offload_sendto>
}
   31932:	b003      	add	sp, #12
   31934:	f85d fb04 	ldr.w	pc, [sp], #4

00031938 <nrf91_socket_offload_connect>:
{
   31938:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3193a:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   3193c:	8808      	ldrh	r0, [r1, #0]
{
   3193e:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   31940:	2801      	cmp	r0, #1
{
   31942:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   31944:	d10e      	bne.n	31964 <nrf91_socket_offload_connect+0x2c>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   31946:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   31948:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3194a:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3194c:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   31950:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   31954:	9002      	str	r0, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   31956:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   31958:	4620      	mov	r0, r4
   3195a:	a901      	add	r1, sp, #4
   3195c:	f000 ff24 	bl	327a8 <nrf_connect>
}
   31960:	b00a      	add	sp, #40	; 0x28
   31962:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   31964:	2802      	cmp	r0, #2
   31966:	d105      	bne.n	31974 <nrf91_socket_offload_connect+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   31968:	4618      	mov	r0, r3
   3196a:	a901      	add	r1, sp, #4
   3196c:	f7ff ff87 	bl	3187e <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (struct nrf_sockaddr *)&ipv6,
   31970:	2224      	movs	r2, #36	; 0x24
   31972:	e7f1      	b.n	31958 <nrf91_socket_offload_connect+0x20>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   31974:	4620      	mov	r0, r4
   31976:	f000 ff17 	bl	327a8 <nrf_connect>
		if (retval < 0) {
   3197a:	2800      	cmp	r0, #0
   3197c:	daf0      	bge.n	31960 <nrf91_socket_offload_connect+0x28>
	errno = ENOTSUP;
   3197e:	f7ff f99c 	bl	30cba <__errno>
   31982:	2386      	movs	r3, #134	; 0x86
   31984:	6003      	str	r3, [r0, #0]
	return retval;
   31986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3198a:	e7e9      	b.n	31960 <nrf91_socket_offload_connect+0x28>

0003198c <nrf91_socket_offload_bind>:
{
   3198c:	b510      	push	{r4, lr}
   3198e:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   31990:	8809      	ldrh	r1, [r1, #0]
	int sd = OBJ_TO_SD(obj);
   31992:	6804      	ldr	r4, [r0, #0]
	if (addr->sa_family == AF_INET) {
   31994:	2901      	cmp	r1, #1
{
   31996:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   31998:	d10e      	bne.n	319b8 <nrf91_socket_offload_bind+0x2c>
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3199a:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3199c:	8858      	ldrh	r0, [r3, #2]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3199e:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   319a0:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_port = ptr->sin_port;
   319a4:	f8ad 000c 	strh.w	r0, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   319a8:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   319aa:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   319ac:	4620      	mov	r0, r4
   319ae:	a901      	add	r1, sp, #4
   319b0:	f000 ff94 	bl	328dc <nrf_bind>
}
   319b4:	b00a      	add	sp, #40	; 0x28
   319b6:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   319b8:	2902      	cmp	r1, #2
   319ba:	d105      	bne.n	319c8 <nrf91_socket_offload_bind+0x3c>
		z_to_nrf_ipv6(addr, &ipv6);
   319bc:	4618      	mov	r0, r3
   319be:	a901      	add	r1, sp, #4
   319c0:	f7ff ff5d 	bl	3187e <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   319c4:	2224      	movs	r2, #36	; 0x24
   319c6:	e7f1      	b.n	319ac <nrf91_socket_offload_bind+0x20>
	errno = ENOTSUP;
   319c8:	f7ff f977 	bl	30cba <__errno>
   319cc:	2386      	movs	r3, #134	; 0x86
   319ce:	6003      	str	r3, [r0, #0]
	return retval;
   319d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   319d4:	e7ee      	b.n	319b4 <nrf91_socket_offload_bind+0x28>

000319d6 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   319d6:	f7fa bd0d 	b.w	2c3f4 <z_impl_k_mutex_lock>

000319da <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   319da:	f7fa bd83 	b.w	2c4e4 <z_impl_k_mutex_unlock>

000319de <nrf91_socket_offload_recvfrom>:
{
   319de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   319e2:	4606      	mov	r6, r0
	if (ctx->lock) {
   319e4:	6840      	ldr	r0, [r0, #4]
{
   319e6:	b08f      	sub	sp, #60	; 0x3c
   319e8:	460c      	mov	r4, r1
   319ea:	e9dd 5818 	ldrd	r5, r8, [sp, #96]	; 0x60
   319ee:	4691      	mov	r9, r2
	if (ctx->lock) {
   319f0:	b118      	cbz	r0, 319fa <nrf91_socket_offload_recvfrom+0x1c>
   319f2:	9303      	str	r3, [sp, #12]
		k_mutex_unlock(ctx->lock);
   319f4:	f7ff fff1 	bl	319da <k_mutex_unlock.isra.0>
   319f8:	9b03      	ldr	r3, [sp, #12]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   319fa:	f8d6 a000 	ldr.w	sl, [r6]
	if (from == NULL) {
   319fe:	b99d      	cbnz	r5, 31a28 <nrf91_socket_offload_recvfrom+0x4a>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   31a00:	4621      	mov	r1, r4
   31a02:	464a      	mov	r2, r9
   31a04:	4650      	mov	r0, sl
   31a06:	e9cd 5500 	strd	r5, r5, [sp]
   31a0a:	f001 f872 	bl	32af2 <nrf_recvfrom>
   31a0e:	4604      	mov	r4, r0
	if (ctx->lock) {
   31a10:	6870      	ldr	r0, [r6, #4]
   31a12:	b128      	cbz	r0, 31a20 <nrf91_socket_offload_recvfrom+0x42>
		k_mutex_lock(ctx->lock, K_FOREVER);
   31a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   31a18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   31a1c:	f7ff ffdb 	bl	319d6 <k_mutex_lock.constprop.0.isra.0>
}
   31a20:	4620      	mov	r0, r4
   31a22:	b00f      	add	sp, #60	; 0x3c
   31a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct nrf_sockaddr_in6 cliaddr_storage = { 0 };
   31a28:	f04f 0b24 	mov.w	fp, #36	; 0x24
   31a2c:	af05      	add	r7, sp, #20
   31a2e:	465a      	mov	r2, fp
   31a30:	2100      	movs	r1, #0
   31a32:	4638      	mov	r0, r7
   31a34:	9303      	str	r3, [sp, #12]
   31a36:	f002 f91a 	bl	33c6e <memset>
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   31a3a:	aa04      	add	r2, sp, #16
   31a3c:	4621      	mov	r1, r4
   31a3e:	e9cd 7200 	strd	r7, r2, [sp]
   31a42:	4650      	mov	r0, sl
   31a44:	464a      	mov	r2, r9
   31a46:	9b03      	ldr	r3, [sp, #12]
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   31a48:	f8cd b010 	str.w	fp, [sp, #16]
		retval = nrf_recvfrom(ctx->nrf_fd, buf, len, flags,
   31a4c:	f001 f851 	bl	32af2 <nrf_recvfrom>
		if (retval < 0) {
   31a50:	1e04      	subs	r4, r0, #0
   31a52:	dbdd      	blt.n	31a10 <nrf91_socket_offload_recvfrom+0x32>
		if (cliaddr->sa_family == NRF_AF_INET) {
   31a54:	9b06      	ldr	r3, [sp, #24]
   31a56:	2b01      	cmp	r3, #1
   31a58:	d109      	bne.n	31a6e <nrf91_socket_offload_recvfrom+0x90>
	ptr->sin_family = AF_INET;
   31a5a:	802b      	strh	r3, [r5, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   31a5c:	9b08      	ldr	r3, [sp, #32]
	ptr->sin_port = nrf_in->sin_port;
   31a5e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   31a62:	606b      	str	r3, [r5, #4]
			*fromlen = sizeof(struct sockaddr_in);
   31a64:	2308      	movs	r3, #8
	ptr->sin_port = nrf_in->sin_port;
   31a66:	806a      	strh	r2, [r5, #2]
			*fromlen = sizeof(struct sockaddr_in6);
   31a68:	f8c8 3000 	str.w	r3, [r8]
   31a6c:	e7d0      	b.n	31a10 <nrf91_socket_offload_recvfrom+0x32>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   31a6e:	2b02      	cmp	r3, #2
   31a70:	d1ce      	bne.n	31a10 <nrf91_socket_offload_recvfrom+0x32>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   31a72:	4639      	mov	r1, r7
   31a74:	4628      	mov	r0, r5
   31a76:	f7ff feee 	bl	31856 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   31a7a:	2318      	movs	r3, #24
   31a7c:	e7f4      	b.n	31a68 <nrf91_socket_offload_recvfrom+0x8a>

00031a7e <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   31a7e:	2300      	movs	r3, #0
{
   31a80:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   31a82:	e9cd 3300 	strd	r3, r3, [sp]
   31a86:	f7ff ffaa 	bl	319de <nrf91_socket_offload_recvfrom>
}
   31a8a:	b003      	add	sp, #12
   31a8c:	f85d fb04 	ldr.w	pc, [sp], #4

00031a90 <nrf91_socket_offload_close>:
{
   31a90:	b538      	push	{r3, r4, r5, lr}
   31a92:	4605      	mov	r5, r0
	retval = nrf_close(ctx->nrf_fd);
   31a94:	6800      	ldr	r0, [r0, #0]
   31a96:	f7f8 ffb9 	bl	2aa0c <nrf_close>
	if (retval == 0) {
   31a9a:	4604      	mov	r4, r0
   31a9c:	b910      	cbnz	r0, 31aa4 <nrf91_socket_offload_close+0x14>
		release_ctx(ctx);
   31a9e:	4628      	mov	r0, r5
   31aa0:	f7f4 f980 	bl	25da4 <release_ctx>
}
   31aa4:	4620      	mov	r0, r4
   31aa6:	bd38      	pop	{r3, r4, r5, pc}

00031aa8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   31aa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   31aaa:	ab0b      	add	r3, sp, #44	; 0x2c
   31aac:	9305      	str	r3, [sp, #20]
   31aae:	9303      	str	r3, [sp, #12]
   31ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31ab2:	9302      	str	r3, [sp, #8]
   31ab4:	2300      	movs	r3, #0
   31ab6:	4618      	mov	r0, r3
   31ab8:	e9cd 3300 	strd	r3, r3, [sp]
   31abc:	f7ee fee6 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   31ac0:	b007      	add	sp, #28
   31ac2:	f85d fb04 	ldr.w	pc, [sp], #4

00031ac6 <response_handler>:
	write_uart_string(response);
   31ac6:	f7f4 baf9 	b.w	260bc <write_uart_string>

00031aca <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   31aca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   31acc:	ab0b      	add	r3, sp, #44	; 0x2c
   31ace:	9305      	str	r3, [sp, #20]
   31ad0:	9303      	str	r3, [sp, #12]
   31ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31ad4:	9302      	str	r3, [sp, #8]
   31ad6:	2300      	movs	r3, #0
   31ad8:	4618      	mov	r0, r3
   31ada:	e9cd 3300 	strd	r3, r3, [sp]
   31ade:	f7ee fed5 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   31ae2:	b007      	add	sp, #28
   31ae4:	f85d fb04 	ldr.w	pc, [sp], #4

00031ae8 <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   31ae8:	280d      	cmp	r0, #13
   31aea:	d004      	beq.n	31af6 <is_lfcr+0xe>
   31aec:	f1a0 030a 	sub.w	r3, r0, #10
   31af0:	4258      	negs	r0, r3
   31af2:	4158      	adcs	r0, r3
   31af4:	4770      	bx	lr
		return true;
   31af6:	2001      	movs	r0, #1
}
   31af8:	4770      	bx	lr

00031afa <skip_command_prefix>:
{
   31afa:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   31afc:	6801      	ldr	r1, [r0, #0]
{
   31afe:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   31b00:	1c8b      	adds	r3, r1, #2
   31b02:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   31b04:	788c      	ldrb	r4, [r1, #2]
   31b06:	4620      	mov	r0, r4
   31b08:	f7ff ffee 	bl	31ae8 <is_lfcr>
   31b0c:	b910      	cbnz	r0, 31b14 <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   31b0e:	b10c      	cbz	r4, 31b14 <skip_command_prefix+0x1a>
	(*cmd)++;
   31b10:	3103      	adds	r1, #3
   31b12:	6011      	str	r1, [r2, #0]
}
   31b14:	bd10      	pop	{r4, pc}

00031b16 <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   31b16:	6813      	ldr	r3, [r2, #0]
   31b18:	f7f4 be6e 	b.w	267f8 <at_parser_max_params_from_str>

00031b1c <at_params_get>:
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");

	if (index >= list->param_count) {
   31b1c:	6803      	ldr	r3, [r0, #0]
   31b1e:	428b      	cmp	r3, r1
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   31b20:	bf86      	itte	hi
   31b22:	6840      	ldrhi	r0, [r0, #4]
   31b24:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
		return NULL;
   31b28:	2000      	movls	r0, #0
}
   31b2a:	4770      	bx	lr

00031b2c <at_param_clear>:
{
   31b2c:	b510      	push	{r4, lr}
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   31b2e:	7803      	ldrb	r3, [r0, #0]
{
   31b30:	4604      	mov	r4, r0
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   31b32:	3b02      	subs	r3, #2
   31b34:	2b01      	cmp	r3, #1
   31b36:	d802      	bhi.n	31b3e <at_param_clear+0x12>
		k_free(param->value.str_val);
   31b38:	6880      	ldr	r0, [r0, #8]
   31b3a:	f002 f82e 	bl	33b9a <k_free>
	param->value.int_val = 0;
   31b3e:	2200      	movs	r2, #0
   31b40:	2300      	movs	r3, #0
   31b42:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   31b46:	bd10      	pop	{r4, pc}

00031b48 <at_params_list_init>:

	return 0;
}

int at_params_list_init(struct at_param_list *list, size_t max_params_count)
{
   31b48:	b538      	push	{r3, r4, r5, lr}
   31b4a:	460d      	mov	r5, r1
	if (list == NULL) {
   31b4c:	4604      	mov	r4, r0
   31b4e:	b140      	cbz	r0, 31b62 <at_params_list_init+0x1a>
		return -EINVAL;
	}

	/* Array initialized with empty parameters. */
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   31b50:	2110      	movs	r1, #16
   31b52:	4628      	mov	r0, r5
   31b54:	f002 f82c 	bl	33bb0 <k_calloc>
   31b58:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   31b5a:	b128      	cbz	r0, 31b68 <at_params_list_init+0x20>
		return -ENOMEM;
	}

	list->param_count = max_params_count;
	return 0;
   31b5c:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   31b5e:	6025      	str	r5, [r4, #0]
}
   31b60:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   31b62:	f06f 0015 	mvn.w	r0, #21
   31b66:	e7fb      	b.n	31b60 <at_params_list_init+0x18>
		return -ENOMEM;
   31b68:	f06f 000b 	mvn.w	r0, #11
   31b6c:	e7f8      	b.n	31b60 <at_params_list_init+0x18>

00031b6e <at_params_list_clear>:

void at_params_list_clear(struct at_param_list *list)
{
   31b6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   31b70:	4604      	mov	r4, r0
   31b72:	b128      	cbz	r0, 31b80 <at_params_list_clear+0x12>
   31b74:	6843      	ldr	r3, [r0, #4]
   31b76:	b11b      	cbz	r3, 31b80 <at_params_list_clear+0x12>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   31b78:	2500      	movs	r5, #0
   31b7a:	6823      	ldr	r3, [r4, #0]
   31b7c:	429d      	cmp	r5, r3
   31b7e:	d301      	bcc.n	31b84 <at_params_list_clear+0x16>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   31b80:	b003      	add	sp, #12
   31b82:	bd30      	pop	{r4, r5, pc}
		at_param_clear(&params[i]);
   31b84:	6860      	ldr	r0, [r4, #4]
   31b86:	eb00 1005 	add.w	r0, r0, r5, lsl #4
   31b8a:	9001      	str	r0, [sp, #4]
   31b8c:	f7ff ffce 	bl	31b2c <at_param_clear>
__ssp_bos_icheck3(memset, void *, int)
   31b90:	2210      	movs	r2, #16
   31b92:	2100      	movs	r1, #0
   31b94:	9801      	ldr	r0, [sp, #4]
   31b96:	f002 f86a 	bl	33c6e <memset>
	for (size_t i = 0; i < list->param_count; ++i) {
   31b9a:	3501      	adds	r5, #1
   31b9c:	e7ed      	b.n	31b7a <at_params_list_clear+0xc>

00031b9e <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   31b9e:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   31ba0:	4604      	mov	r4, r0
   31ba2:	b148      	cbz	r0, 31bb8 <at_params_list_free+0x1a>
   31ba4:	6843      	ldr	r3, [r0, #4]
   31ba6:	b13b      	cbz	r3, 31bb8 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   31ba8:	2500      	movs	r5, #0
	at_params_list_clear(list);
   31baa:	f7ff ffe0 	bl	31b6e <at_params_list_clear>
	k_free(list->params);
   31bae:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   31bb0:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   31bb2:	f001 fff2 	bl	33b9a <k_free>
	list->params = NULL;
   31bb6:	6065      	str	r5, [r4, #4]
}
   31bb8:	bd38      	pop	{r3, r4, r5, pc}

00031bba <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   31bba:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   31bbc:	b178      	cbz	r0, 31bde <at_params_empty_put+0x24>
   31bbe:	6843      	ldr	r3, [r0, #4]
   31bc0:	b16b      	cbz	r3, 31bde <at_params_empty_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   31bc2:	f7ff ffab 	bl	31b1c <at_params_get>

	if (param == NULL) {
   31bc6:	4604      	mov	r4, r0
   31bc8:	b148      	cbz	r0, 31bde <at_params_empty_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   31bca:	f7ff ffaf 	bl	31b2c <at_param_clear>

	param->type = AT_PARAM_TYPE_EMPTY;
   31bce:	2304      	movs	r3, #4
	param->value.int_val = 0;
   31bd0:	2200      	movs	r2, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   31bd2:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   31bd4:	2300      	movs	r3, #0

	return 0;
   31bd6:	2000      	movs	r0, #0
	param->value.int_val = 0;
   31bd8:	e9c4 2302 	strd	r2, r3, [r4, #8]
}
   31bdc:	bd10      	pop	{r4, pc}
		return -EINVAL;
   31bde:	f06f 0015 	mvn.w	r0, #21
   31be2:	e7fb      	b.n	31bdc <at_params_empty_put+0x22>

00031be4 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index, int64_t value)
{
   31be4:	b570      	push	{r4, r5, r6, lr}
   31be6:	4616      	mov	r6, r2
   31be8:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL) {
   31bea:	b168      	cbz	r0, 31c08 <at_params_int_put+0x24>
   31bec:	6843      	ldr	r3, [r0, #4]
   31bee:	b15b      	cbz	r3, 31c08 <at_params_int_put+0x24>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   31bf0:	f7ff ff94 	bl	31b1c <at_params_get>

	if (param == NULL) {
   31bf4:	4604      	mov	r4, r0
   31bf6:	b138      	cbz	r0, 31c08 <at_params_int_put+0x24>
		return -EINVAL;
	}

	at_param_clear(param);
   31bf8:	f7ff ff98 	bl	31b2c <at_param_clear>

	param->type = AT_PARAM_TYPE_NUM_INT;
   31bfc:	2301      	movs	r3, #1
	param->value.int_val = value;
	return 0;
   31bfe:	2000      	movs	r0, #0
	param->value.int_val = value;
   31c00:	e9c4 6502 	strd	r6, r5, [r4, #8]
	param->type = AT_PARAM_TYPE_NUM_INT;
   31c04:	7023      	strb	r3, [r4, #0]
}
   31c06:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   31c08:	f06f 0015 	mvn.w	r0, #21
   31c0c:	e7fb      	b.n	31c06 <at_params_int_put+0x22>

00031c0e <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   31c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31c10:	4617      	mov	r7, r2
   31c12:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   31c14:	b1c0      	cbz	r0, 31c48 <at_params_string_put+0x3a>
   31c16:	6843      	ldr	r3, [r0, #4]
   31c18:	b1b3      	cbz	r3, 31c48 <at_params_string_put+0x3a>
   31c1a:	b1aa      	cbz	r2, 31c48 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   31c1c:	f7ff ff7e 	bl	31b1c <at_params_get>

	if (param == NULL) {
   31c20:	4604      	mov	r4, r0
   31c22:	b188      	cbz	r0, 31c48 <at_params_string_put+0x3a>
		return -EINVAL;
	}

	char *param_value = (char *)k_malloc(str_len + 1);
   31c24:	1c68      	adds	r0, r5, #1
   31c26:	f001 ffbf 	bl	33ba8 <k_malloc>

	if (param_value == NULL) {
   31c2a:	4606      	mov	r6, r0
   31c2c:	b178      	cbz	r0, 31c4e <at_params_string_put+0x40>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   31c2e:	462a      	mov	r2, r5
   31c30:	4639      	mov	r1, r7
   31c32:	f001 fffc 	bl	33c2e <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, str, str_len);

	at_param_clear(param);
   31c36:	4620      	mov	r0, r4
   31c38:	f7ff ff78 	bl	31b2c <at_param_clear>
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
   31c3c:	2302      	movs	r3, #2
	param->value.str_val = param_value;

	return 0;
   31c3e:	2000      	movs	r0, #0
	param->size = str_len;
   31c40:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   31c42:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   31c44:	60a6      	str	r6, [r4, #8]
}
   31c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   31c48:	f06f 0015 	mvn.w	r0, #21
   31c4c:	e7fb      	b.n	31c46 <at_params_string_put+0x38>
		return -ENOMEM;
   31c4e:	f06f 000b 	mvn.w	r0, #11
   31c52:	e7f8      	b.n	31c46 <at_params_string_put+0x38>

00031c54 <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   31c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   31c56:	4617      	mov	r7, r2
   31c58:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   31c5a:	b1c0      	cbz	r0, 31c8e <at_params_array_put+0x3a>
   31c5c:	6843      	ldr	r3, [r0, #4]
   31c5e:	b1b3      	cbz	r3, 31c8e <at_params_array_put+0x3a>
   31c60:	b1aa      	cbz	r2, 31c8e <at_params_array_put+0x3a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   31c62:	f7ff ff5b 	bl	31b1c <at_params_get>

	if (param == NULL) {
   31c66:	4604      	mov	r4, r0
   31c68:	b188      	cbz	r0, 31c8e <at_params_array_put+0x3a>
		return -EINVAL;
	}

	uint32_t *param_value = (uint32_t *)k_malloc(array_len);
   31c6a:	4628      	mov	r0, r5
   31c6c:	f001 ff9c 	bl	33ba8 <k_malloc>

	if (param_value == NULL) {
   31c70:	4606      	mov	r6, r0
   31c72:	b178      	cbz	r0, 31c94 <at_params_array_put+0x40>
   31c74:	462a      	mov	r2, r5
   31c76:	4639      	mov	r1, r7
   31c78:	f001 ffd9 	bl	33c2e <memcpy>
		return -ENOMEM;
	}

	memcpy(param_value, array, array_len);

	at_param_clear(param);
   31c7c:	4620      	mov	r0, r4
   31c7e:	f7ff ff55 	bl	31b2c <at_param_clear>
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
   31c82:	2303      	movs	r3, #3
	param->value.array_val = param_value;

	return 0;
   31c84:	2000      	movs	r0, #0
	param->size = array_len;
   31c86:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   31c88:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   31c8a:	60a6      	str	r6, [r4, #8]
}
   31c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   31c8e:	f06f 0015 	mvn.w	r0, #21
   31c92:	e7fb      	b.n	31c8c <at_params_array_put+0x38>
		return -ENOMEM;
   31c94:	f06f 000b 	mvn.w	r0, #11
   31c98:	e7f8      	b.n	31c8c <at_params_array_put+0x38>

00031c9a <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   31c9a:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   31c9c:	b1b0      	cbz	r0, 31ccc <at_params_short_get+0x32>
   31c9e:	6843      	ldr	r3, [r0, #4]
   31ca0:	b1a3      	cbz	r3, 31ccc <at_params_short_get+0x32>
   31ca2:	b19a      	cbz	r2, 31ccc <at_params_short_get+0x32>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   31ca4:	f7ff ff3a 	bl	31b1c <at_params_get>

	if (param == NULL) {
   31ca8:	b180      	cbz	r0, 31ccc <at_params_short_get+0x32>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   31caa:	7803      	ldrb	r3, [r0, #0]
   31cac:	2b01      	cmp	r3, #1
   31cae:	d10d      	bne.n	31ccc <at_params_short_get+0x32>
		return -EINVAL;
	}

	if ((param->value.int_val > INT16_MAX) || (param->value.int_val < INT16_MIN)) {
   31cb0:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   31cb4:	f513 4000 	adds.w	r0, r3, #32768	; 0x8000
   31cb8:	f141 0100 	adc.w	r1, r1, #0
   31cbc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   31cc0:	f171 0100 	sbcs.w	r1, r1, #0
   31cc4:	d202      	bcs.n	31ccc <at_params_short_get+0x32>
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
   31cc6:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   31cc8:	8013      	strh	r3, [r2, #0]
}
   31cca:	bd08      	pop	{r3, pc}
		return -EINVAL;
   31ccc:	f06f 0015 	mvn.w	r0, #21
   31cd0:	e7fb      	b.n	31cca <at_params_short_get+0x30>

00031cd2 <at_params_unsigned_short_get>:

int at_params_unsigned_short_get(const struct at_param_list *list, size_t index,
			uint16_t *value)
{
   31cd2:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   31cd4:	b190      	cbz	r0, 31cfc <at_params_unsigned_short_get+0x2a>
   31cd6:	6843      	ldr	r3, [r0, #4]
   31cd8:	b183      	cbz	r3, 31cfc <at_params_unsigned_short_get+0x2a>
   31cda:	b17a      	cbz	r2, 31cfc <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   31cdc:	f7ff ff1e 	bl	31b1c <at_params_get>

	if (param == NULL) {
   31ce0:	b160      	cbz	r0, 31cfc <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   31ce2:	7803      	ldrb	r3, [r0, #0]
   31ce4:	2b01      	cmp	r3, #1
   31ce6:	d109      	bne.n	31cfc <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > UINT16_MAX) || (param->value.int_val < 0)) {
   31ce8:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   31cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   31cf0:	f171 0100 	sbcs.w	r1, r1, #0
   31cf4:	d202      	bcs.n	31cfc <at_params_unsigned_short_get+0x2a>
		return -EINVAL;
	}

	*value = (uint16_t)param->value.int_val;
	return 0;
   31cf6:	2000      	movs	r0, #0
	*value = (uint16_t)param->value.int_val;
   31cf8:	8013      	strh	r3, [r2, #0]
}
   31cfa:	bd08      	pop	{r3, pc}
		return -EINVAL;
   31cfc:	f06f 0015 	mvn.w	r0, #21
   31d00:	e7fb      	b.n	31cfa <at_params_unsigned_short_get+0x28>

00031d02 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   31d02:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   31d04:	b190      	cbz	r0, 31d2c <at_params_int_get+0x2a>
   31d06:	6843      	ldr	r3, [r0, #4]
   31d08:	b183      	cbz	r3, 31d2c <at_params_int_get+0x2a>
   31d0a:	b17a      	cbz	r2, 31d2c <at_params_int_get+0x2a>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   31d0c:	f7ff ff06 	bl	31b1c <at_params_get>

	if (param == NULL) {
   31d10:	b160      	cbz	r0, 31d2c <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   31d12:	7803      	ldrb	r3, [r0, #0]
   31d14:	2b01      	cmp	r3, #1
   31d16:	d109      	bne.n	31d2c <at_params_int_get+0x2a>
		return -EINVAL;
	}

	if ((param->value.int_val > INT32_MAX) || (param->value.int_val < INT32_MIN)) {
   31d18:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
   31d1c:	f113 4000 	adds.w	r0, r3, #2147483648	; 0x80000000
   31d20:	f141 0100 	adc.w	r1, r1, #0
   31d24:	b911      	cbnz	r1, 31d2c <at_params_int_get+0x2a>
		return -EINVAL;
	}

	*value = (int32_t)param->value.int_val;
	return 0;
   31d26:	2000      	movs	r0, #0
	*value = (int32_t)param->value.int_val;
   31d28:	6013      	str	r3, [r2, #0]
}
   31d2a:	bd08      	pop	{r3, pc}
		return -EINVAL;
   31d2c:	f06f 0015 	mvn.w	r0, #21
   31d30:	e7fb      	b.n	31d2a <at_params_int_get+0x28>

00031d32 <at_params_int64_get>:
	*value = (uint32_t)param->value.int_val;
	return 0;
}

int at_params_int64_get(const struct at_param_list *list, size_t index, int64_t *value)
{
   31d32:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL || value == NULL) {
   31d34:	b170      	cbz	r0, 31d54 <at_params_int64_get+0x22>
   31d36:	6843      	ldr	r3, [r0, #4]
   31d38:	b163      	cbz	r3, 31d54 <at_params_int64_get+0x22>
   31d3a:	b15a      	cbz	r2, 31d54 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   31d3c:	f7ff feee 	bl	31b1c <at_params_get>

	if (param == NULL) {
   31d40:	b140      	cbz	r0, 31d54 <at_params_int64_get+0x22>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_NUM_INT) {
   31d42:	7803      	ldrb	r3, [r0, #0]
   31d44:	2b01      	cmp	r3, #1
   31d46:	d105      	bne.n	31d54 <at_params_int64_get+0x22>

	if ((param->value.int_val > INT64_MAX) || (param->value.int_val < INT64_MIN)) {
		return -EINVAL;
	}

	*value = param->value.int_val;
   31d48:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   31d4c:	e9c2 0100 	strd	r0, r1, [r2]
	return 0;
   31d50:	2000      	movs	r0, #0
}
   31d52:	bd08      	pop	{r3, pc}
		return -EINVAL;
   31d54:	f06f 0015 	mvn.w	r0, #21
   31d58:	e7fb      	b.n	31d52 <at_params_int64_get+0x20>

00031d5a <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   31d5a:	b570      	push	{r4, r5, r6, lr}
   31d5c:	4615      	mov	r5, r2
   31d5e:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   31d60:	b1a8      	cbz	r0, 31d8e <at_params_string_get+0x34>
   31d62:	6843      	ldr	r3, [r0, #4]
   31d64:	b19b      	cbz	r3, 31d8e <at_params_string_get+0x34>
   31d66:	b192      	cbz	r2, 31d8e <at_params_string_get+0x34>
	    value == NULL || len == NULL) {
   31d68:	b18c      	cbz	r4, 31d8e <at_params_string_get+0x34>
		return -EINVAL;
	}

	struct at_param *param = at_params_get(list, index);
   31d6a:	f7ff fed7 	bl	31b1c <at_params_get>

	if (param == NULL) {
   31d6e:	b170      	cbz	r0, 31d8e <at_params_string_get+0x34>
		return -EINVAL;
	}

	if (param->type != AT_PARAM_TYPE_STRING) {
   31d70:	7803      	ldrb	r3, [r0, #0]
   31d72:	2b02      	cmp	r3, #2
   31d74:	d10b      	bne.n	31d8e <at_params_string_get+0x34>
		return param->size;
   31d76:	6846      	ldr	r6, [r0, #4]
		return -EINVAL;
	}

	size_t param_len = at_param_size(param);

	if (*len < param_len) {
   31d78:	6823      	ldr	r3, [r4, #0]
   31d7a:	42b3      	cmp	r3, r6
   31d7c:	d30a      	bcc.n	31d94 <at_params_string_get+0x3a>
   31d7e:	6881      	ldr	r1, [r0, #8]
   31d80:	4632      	mov	r2, r6
   31d82:	4628      	mov	r0, r5
   31d84:	f001 ff53 	bl	33c2e <memcpy>
	}

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
   31d88:	2000      	movs	r0, #0
	*len = param_len;
   31d8a:	6026      	str	r6, [r4, #0]
}
   31d8c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   31d8e:	f06f 0015 	mvn.w	r0, #21
   31d92:	e7fb      	b.n	31d8c <at_params_string_get+0x32>
		return -ENOMEM;
   31d94:	f06f 000b 	mvn.w	r0, #11
   31d98:	e7f8      	b.n	31d8c <at_params_string_get+0x32>

00031d9a <at_params_valid_count_get>:
	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
	if (list == NULL || list->params == NULL) {
   31d9a:	4602      	mov	r2, r0
{
   31d9c:	b508      	push	{r3, lr}
	if (list == NULL || list->params == NULL) {
   31d9e:	b170      	cbz	r0, 31dbe <at_params_valid_count_get+0x24>
   31da0:	6840      	ldr	r0, [r0, #4]
   31da2:	b160      	cbz	r0, 31dbe <at_params_valid_count_get+0x24>
	if (index >= list->param_count) {
   31da4:	6811      	ldr	r1, [r2, #0]
   31da6:	b141      	cbz	r1, 31dba <at_params_valid_count_get+0x20>
   31da8:	2100      	movs	r1, #0
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   31daa:	7803      	ldrb	r3, [r0, #0]
   31dac:	b12b      	cbz	r3, 31dba <at_params_valid_count_get+0x20>
		valid_i += 1;
		param = at_params_get(list, valid_i);
   31dae:	4610      	mov	r0, r2
		valid_i += 1;
   31db0:	3101      	adds	r1, #1
		param = at_params_get(list, valid_i);
   31db2:	f7ff feb3 	bl	31b1c <at_params_get>
	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   31db6:	2800      	cmp	r0, #0
   31db8:	d1f7      	bne.n	31daa <at_params_valid_count_get+0x10>
	}

	return valid_i;
}
   31dba:	4608      	mov	r0, r1
   31dbc:	bd08      	pop	{r3, pc}
		return -EINVAL;
   31dbe:	f06f 0115 	mvn.w	r1, #21
   31dc2:	e7fa      	b.n	31dba <at_params_valid_count_get+0x20>

00031dc4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   31dc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   31dc6:	ab0b      	add	r3, sp, #44	; 0x2c
   31dc8:	9305      	str	r3, [sp, #20]
   31dca:	9303      	str	r3, [sp, #12]
   31dcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31dce:	9302      	str	r3, [sp, #8]
   31dd0:	2300      	movs	r3, #0
   31dd2:	4618      	mov	r0, r3
   31dd4:	e9cd 3300 	strd	r3, r3, [sp]
   31dd8:	f7ee fd58 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   31ddc:	b007      	add	sp, #28
   31dde:	f85d fb04 	ldr.w	pc, [sp], #4

00031de2 <lte_lc_power_off>:
{
   31de2:	b508      	push	{r3, lr}
	return lte_lc_func_mode_set(LTE_LC_FUNC_MODE_POWER_OFF) ? -EFAULT : 0;
   31de4:	2000      	movs	r0, #0
   31de6:	f7f5 fab9 	bl	2735c <lte_lc_func_mode_set>
   31dea:	2800      	cmp	r0, #0
}
   31dec:	bf18      	it	ne
   31dee:	f06f 000d 	mvnne.w	r0, #13
   31df2:	bd08      	pop	{r3, pc}

00031df4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   31df4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   31df6:	ab0b      	add	r3, sp, #44	; 0x2c
   31df8:	9305      	str	r3, [sp, #20]
   31dfa:	9303      	str	r3, [sp, #12]
   31dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31dfe:	9302      	str	r3, [sp, #8]
   31e00:	2300      	movs	r3, #0
   31e02:	4618      	mov	r0, r3
   31e04:	e9cd 3300 	strd	r3, r3, [sp]
   31e08:	f7ee fd40 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   31e0c:	b007      	add	sp, #28
   31e0e:	f85d fb04 	ldr.w	pc, [sp], #4

00031e12 <string_to_int>:
{
   31e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
   31e14:	460c      	mov	r4, r1
   31e16:	4605      	mov	r5, r0
   31e18:	4616      	mov	r6, r2
	errno = 0;
   31e1a:	f7fe ff4e 	bl	30cba <__errno>
   31e1e:	2300      	movs	r3, #0
	temp = strtol(str_buf, &end_ptr, base);
   31e20:	4622      	mov	r2, r4
	errno = 0;
   31e22:	6003      	str	r3, [r0, #0]
	temp = strtol(str_buf, &end_ptr, base);
   31e24:	a901      	add	r1, sp, #4
   31e26:	4628      	mov	r0, r5
   31e28:	f7fc f8da 	bl	2dfe0 <strtol>
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   31e2c:	9b01      	ldr	r3, [sp, #4]
	temp = strtol(str_buf, &end_ptr, base);
   31e2e:	4604      	mov	r4, r0
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   31e30:	42ab      	cmp	r3, r5
   31e32:	d103      	bne.n	31e3c <string_to_int+0x2a>
		return -ENODATA;
   31e34:	f06f 003c 	mvn.w	r0, #60	; 0x3c
}
   31e38:	b002      	add	sp, #8
   31e3a:	bd70      	pop	{r4, r5, r6, pc}
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   31e3c:	781b      	ldrb	r3, [r3, #0]
   31e3e:	2b00      	cmp	r3, #0
   31e40:	d1f8      	bne.n	31e34 <string_to_int+0x22>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   31e42:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   31e46:	3b01      	subs	r3, #1
	if (end_ptr == str_buf || *end_ptr != '\0' ||
   31e48:	3303      	adds	r3, #3
   31e4a:	d802      	bhi.n	31e52 <string_to_int+0x40>
	return 0;
   31e4c:	2000      	movs	r0, #0
	*output = temp;
   31e4e:	6034      	str	r4, [r6, #0]
	return 0;
   31e50:	e7f2      	b.n	31e38 <string_to_int+0x26>
	    ((temp == LONG_MAX || temp == LONG_MIN) && errno == ERANGE)) {
   31e52:	f7fe ff32 	bl	30cba <__errno>
   31e56:	6803      	ldr	r3, [r0, #0]
   31e58:	2b22      	cmp	r3, #34	; 0x22
   31e5a:	d1f7      	bne.n	31e4c <string_to_int+0x3a>
   31e5c:	e7ea      	b.n	31e34 <string_to_int+0x22>

00031e5e <string_param_to_int.constprop.0>:
static int string_param_to_int(struct at_param_list *resp_list,
   31e5e:	b530      	push	{r4, r5, lr}
	size_t len = sizeof(str_buf);
   31e60:	2510      	movs	r5, #16
static int string_param_to_int(struct at_param_list *resp_list,
   31e62:	b087      	sub	sp, #28
   31e64:	4614      	mov	r4, r2
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   31e66:	ab01      	add	r3, sp, #4
   31e68:	aa02      	add	r2, sp, #8
	size_t len = sizeof(str_buf);
   31e6a:	9501      	str	r5, [sp, #4]
	err = at_params_string_get(resp_list, idx, str_buf, &len);
   31e6c:	f7ff ff75 	bl	31d5a <at_params_string_get>
	if (err) {
   31e70:	b968      	cbnz	r0, 31e8e <string_param_to_int.constprop.0+0x30>
	str_buf[len] = '\0';
   31e72:	9b01      	ldr	r3, [sp, #4]
   31e74:	aa06      	add	r2, sp, #24
   31e76:	4413      	add	r3, r2
   31e78:	f803 0c10 	strb.w	r0, [r3, #-16]
	if (string_to_int(str_buf, base, output)) {
   31e7c:	4622      	mov	r2, r4
   31e7e:	4629      	mov	r1, r5
   31e80:	a802      	add	r0, sp, #8
   31e82:	f7ff ffc6 	bl	31e12 <string_to_int>
		return -ENODATA;
   31e86:	2800      	cmp	r0, #0
   31e88:	bf18      	it	ne
   31e8a:	f06f 003c 	mvnne.w	r0, #60	; 0x3c
}
   31e8e:	b007      	add	sp, #28
   31e90:	bd30      	pop	{r4, r5, pc}

00031e92 <on_modem_shutdown>:

static void on_modem_shutdown(void *ctx)
{
	(void)lte_lc_deinit();
   31e92:	f7f5 bac7 	b.w	27424 <lte_lc_deinit>

00031e96 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   31e96:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   31e98:	ab0b      	add	r3, sp, #44	; 0x2c
   31e9a:	9305      	str	r3, [sp, #20]
   31e9c:	9303      	str	r3, [sp, #12]
   31e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31ea0:	9302      	str	r3, [sp, #8]
   31ea2:	2300      	movs	r3, #0
   31ea4:	4618      	mov	r0, r3
   31ea6:	e9cd 3300 	strd	r3, r3, [sp]
   31eaa:	f7ee fcef 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   31eae:	b007      	add	sp, #28
   31eb0:	f85d fb04 	ldr.w	pc, [sp], #4

00031eb4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   31eb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   31eb6:	ab0b      	add	r3, sp, #44	; 0x2c
   31eb8:	9305      	str	r3, [sp, #20]
   31eba:	9303      	str	r3, [sp, #12]
   31ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31ebe:	2201      	movs	r2, #1
   31ec0:	9302      	str	r3, [sp, #8]
   31ec2:	2300      	movs	r3, #0
   31ec4:	4618      	mov	r0, r3
   31ec6:	e9cd 3300 	strd	r3, r3, [sp]
   31eca:	f7ee fcdf 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   31ece:	b007      	add	sp, #28
   31ed0:	f85d fb04 	ldr.w	pc, [sp], #4

00031ed4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   31ed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   31ed6:	ab0b      	add	r3, sp, #44	; 0x2c
   31ed8:	9305      	str	r3, [sp, #20]
   31eda:	9303      	str	r3, [sp, #12]
   31edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   31ede:	9302      	str	r3, [sp, #8]
   31ee0:	2300      	movs	r3, #0
   31ee2:	4618      	mov	r0, r3
   31ee4:	e9cd 3300 	strd	r3, r3, [sp]
   31ee8:	f7ee fcd0 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   31eec:	b007      	add	sp, #28
   31eee:	f85d fb04 	ldr.w	pc, [sp], #4

00031ef2 <ns_interface_init>:

	__ASSERT(tfm_ns_interface_init() == TFM_SUCCESS,
		"TF-M NS interface init failed");

	return 0;
}
   31ef2:	2000      	movs	r0, #0
   31ef4:	4770      	bx	lr

00031ef6 <tfm_platform_ioctl>:
enum tfm_platform_err_t
tfm_platform_ioctl(tfm_platform_ioctl_req_t request,
                   psa_invec *input, psa_outvec *output)
{
    tfm_platform_ioctl_req_t req = request;
    struct psa_invec in_vec[2] = { {0} };
   31ef6:	2300      	movs	r3, #0
{
   31ef8:	b570      	push	{r4, r5, r6, lr}
   31efa:	b088      	sub	sp, #32
    struct psa_invec in_vec[2] = { {0} };
   31efc:	e9cd 3306 	strd	r3, r3, [sp, #24]
    size_t inlen, outlen;
    psa_status_t status = PSA_ERROR_CONNECTION_REFUSED;
    psa_handle_t handle = PSA_NULL_HANDLE;

    in_vec[0].base = &req;
   31f00:	ab03      	add	r3, sp, #12
   31f02:	9304      	str	r3, [sp, #16]
    in_vec[0].len = sizeof(req);
   31f04:	2304      	movs	r3, #4
{
   31f06:	4614      	mov	r4, r2
    tfm_platform_ioctl_req_t req = request;
   31f08:	9003      	str	r0, [sp, #12]
    in_vec[0].len = sizeof(req);
   31f0a:	9305      	str	r3, [sp, #20]
    if (input != NULL) {
   31f0c:	b169      	cbz	r1, 31f2a <tfm_platform_ioctl+0x34>
        in_vec[1].base = input->base;
        in_vec[1].len = input->len;
        inlen = 2;
   31f0e:	2602      	movs	r6, #2
        in_vec[1].base = input->base;
   31f10:	680b      	ldr	r3, [r1, #0]
   31f12:	9306      	str	r3, [sp, #24]
        in_vec[1].len = input->len;
   31f14:	684b      	ldr	r3, [r1, #4]
   31f16:	9307      	str	r3, [sp, #28]
        outlen = 1;
    } else {
        outlen = 0;
    }

    handle = psa_connect(TFM_SP_PLATFORM_IOCTL_SID,
   31f18:	2101      	movs	r1, #1
   31f1a:	2041      	movs	r0, #65	; 0x41
   31f1c:	f7f6 fdc6 	bl	28aac <psa_connect>
                         TFM_SP_PLATFORM_IOCTL_VERSION);
    if (handle <= 0) {
   31f20:	1e05      	subs	r5, r0, #0
   31f22:	dc04      	bgt.n	31f2e <tfm_platform_ioctl+0x38>
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
   31f24:	2001      	movs	r0, #1
    if (status < PSA_SUCCESS) {
        return TFM_PLATFORM_ERR_SYSTEM_ERROR;
    } else {
        return (enum tfm_platform_err_t) status;
    }
}
   31f26:	b008      	add	sp, #32
   31f28:	bd70      	pop	{r4, r5, r6, pc}
        inlen = 1;
   31f2a:	2601      	movs	r6, #1
   31f2c:	e7f4      	b.n	31f18 <tfm_platform_ioctl+0x22>
    if (output != NULL) {
   31f2e:	1e23      	subs	r3, r4, #0
   31f30:	bf18      	it	ne
   31f32:	2301      	movne	r3, #1
    status = psa_call(handle, PSA_IPC_CALL,
   31f34:	2100      	movs	r1, #0
   31f36:	e9cd 4300 	strd	r4, r3, [sp]
   31f3a:	aa04      	add	r2, sp, #16
   31f3c:	4633      	mov	r3, r6
   31f3e:	f7f6 fd99 	bl	28a74 <psa_call>
   31f42:	4604      	mov	r4, r0
    psa_close(handle);
   31f44:	4628      	mov	r0, r5
   31f46:	f7f6 fdbf 	bl	28ac8 <psa_close>
    if (status < PSA_SUCCESS) {
   31f4a:	2c00      	cmp	r4, #0
   31f4c:	dbea      	blt.n	31f24 <tfm_platform_ioctl+0x2e>
        return (enum tfm_platform_err_t) status;
   31f4e:	4620      	mov	r0, r4
   31f50:	e7e9      	b.n	31f26 <tfm_platform_ioctl+0x30>

00031f52 <psa_crypto_init>:
}
   31f52:	2000      	movs	r0, #0
   31f54:	4770      	bx	lr

00031f56 <tfm_platform_mem_read>:
#include <tfm_platform_api.h>
#include <tfm_ioctl_core_api.h>

enum tfm_platform_err_t tfm_platform_mem_read(void *destination, uint32_t addr,
					      size_t len, uint32_t *result)
{
   31f56:	b510      	push	{r4, lr}
   31f58:	b088      	sub	sp, #32
   31f5a:	461c      	mov	r4, r3
	psa_invec in_vec;
	psa_outvec out_vec;
	struct tfm_read_service_args_t args;
	struct tfm_read_service_out_t out;

	in_vec.base = (const void *)&args;
   31f5c:	ab05      	add	r3, sp, #20
   31f5e:	9301      	str	r3, [sp, #4]
	in_vec.len = sizeof(args);
   31f60:	230c      	movs	r3, #12
   31f62:	9302      	str	r3, [sp, #8]

	out_vec.base = (void *)&out;
	out_vec.len = sizeof(out);
   31f64:	2304      	movs	r3, #4

	args.destination = destination;
	args.addr = addr;
	args.len = len;
   31f66:	e9cd 1206 	strd	r1, r2, [sp, #24]
	args.destination = destination;
   31f6a:	e9cd 3004 	strd	r3, r0, [sp, #16]

	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   31f6e:	eb0d 0103 	add.w	r1, sp, r3
   31f72:	aa03      	add	r2, sp, #12
   31f74:	2000      	movs	r0, #0
	out_vec.base = (void *)&out;
   31f76:	f8cd d00c 	str.w	sp, [sp, #12]
	ret = tfm_platform_ioctl(TFM_PLATFORM_IOCTL_READ_SERVICE, &in_vec,
   31f7a:	f7ff ffbc 	bl	31ef6 <tfm_platform_ioctl>
				 &out_vec);

	*result = out.result;
   31f7e:	9b00      	ldr	r3, [sp, #0]
   31f80:	6023      	str	r3, [r4, #0]

	return ret;
}
   31f82:	b008      	add	sp, #32
   31f84:	bd10      	pop	{r4, pc}

00031f86 <update_offset>:
{
   31f86:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   31f88:	4604      	mov	r4, r0
   31f8a:	b140      	cbz	r0, 31f9e <update_offset+0x18>
   31f8c:	6803      	ldr	r3, [r0, #0]
   31f8e:	b133      	cbz	r3, 31f9e <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   31f90:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   31f92:	4418      	add	r0, r3
   31f94:	f7eb f884 	bl	1d0a0 <strlen>
   31f98:	68a3      	ldr	r3, [r4, #8]
   31f9a:	4418      	add	r0, r3
   31f9c:	60a0      	str	r0, [r4, #8]
}
   31f9e:	bd10      	pop	{r4, pc}

00031fa0 <add_item_to_array>:
    if ((item == NULL) || (array == NULL) || (array == item))
   31fa0:	b181      	cbz	r1, 31fc4 <add_item_to_array+0x24>
   31fa2:	b138      	cbz	r0, 31fb4 <add_item_to_array+0x14>
   31fa4:	4281      	cmp	r1, r0
   31fa6:	d00d      	beq.n	31fc4 <add_item_to_array+0x24>
    child = array->child;
   31fa8:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   31faa:	b923      	cbnz	r3, 31fb6 <add_item_to_array+0x16>
        array->child = item;
   31fac:	6081      	str	r1, [r0, #8]
        item->next = NULL;
   31fae:	e9c1 3100 	strd	r3, r1, [r1]
   31fb2:	2001      	movs	r0, #1
}
   31fb4:	4770      	bx	lr
        if (child->prev)
   31fb6:	685a      	ldr	r2, [r3, #4]
   31fb8:	2a00      	cmp	r2, #0
   31fba:	d0fa      	beq.n	31fb2 <add_item_to_array+0x12>
    prev->next = item;
   31fbc:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   31fbe:	604a      	str	r2, [r1, #4]
            array->child->prev = item;
   31fc0:	6059      	str	r1, [r3, #4]
   31fc2:	e7f6      	b.n	31fb2 <add_item_to_array+0x12>
        return false;
   31fc4:	2000      	movs	r0, #0
   31fc6:	4770      	bx	lr

00031fc8 <ensure>:
{
   31fc8:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   31fca:	4604      	mov	r4, r0
   31fcc:	b1b8      	cbz	r0, 31ffe <ensure+0x36>
   31fce:	6805      	ldr	r5, [r0, #0]
   31fd0:	b165      	cbz	r5, 31fec <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   31fd2:	6842      	ldr	r2, [r0, #4]
   31fd4:	b112      	cbz	r2, 31fdc <ensure+0x14>
   31fd6:	6883      	ldr	r3, [r0, #8]
   31fd8:	429a      	cmp	r2, r3
   31fda:	d910      	bls.n	31ffe <ensure+0x36>
    if (needed > INT_MAX)
   31fdc:	2900      	cmp	r1, #0
   31fde:	db0e      	blt.n	31ffe <ensure+0x36>
    needed += p->offset + 1;
   31fe0:	68a0      	ldr	r0, [r4, #8]
   31fe2:	4401      	add	r1, r0
   31fe4:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   31fe6:	429a      	cmp	r2, r3
   31fe8:	d302      	bcc.n	31ff0 <ensure+0x28>
        return p->buffer + p->offset;
   31fea:	4405      	add	r5, r0
}
   31fec:	4628      	mov	r0, r5
   31fee:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   31ff0:	6922      	ldr	r2, [r4, #16]
   31ff2:	b922      	cbnz	r2, 31ffe <ensure+0x36>
    if (needed > (INT_MAX / 2))
   31ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   31ff8:	d303      	bcc.n	32002 <ensure+0x3a>
        if (needed <= INT_MAX)
   31ffa:	2b00      	cmp	r3, #0
   31ffc:	da0f      	bge.n	3201e <ensure+0x56>
        return NULL;
   31ffe:	2500      	movs	r5, #0
   32000:	e7f4      	b.n	31fec <ensure+0x24>
        newsize = needed + 1;
   32002:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   32004:	6a23      	ldr	r3, [r4, #32]
   32006:	b16b      	cbz	r3, 32024 <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   32008:	4628      	mov	r0, r5
   3200a:	4631      	mov	r1, r6
   3200c:	4798      	blx	r3
        if (newbuffer == NULL)
   3200e:	4605      	mov	r5, r0
   32010:	b9b0      	cbnz	r0, 32040 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   32012:	69e3      	ldr	r3, [r4, #28]
   32014:	6820      	ldr	r0, [r4, #0]
   32016:	4798      	blx	r3
            p->buffer = NULL;
   32018:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   3201c:	e7e6      	b.n	31fec <ensure+0x24>
            newsize = INT_MAX;
   3201e:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   32022:	e7ef      	b.n	32004 <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   32024:	4630      	mov	r0, r6
   32026:	69a3      	ldr	r3, [r4, #24]
   32028:	4798      	blx	r3
        if (!newbuffer)
   3202a:	4605      	mov	r5, r0
   3202c:	2800      	cmp	r0, #0
   3202e:	d0f0      	beq.n	32012 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   32030:	68a2      	ldr	r2, [r4, #8]
   32032:	6821      	ldr	r1, [r4, #0]
   32034:	3201      	adds	r2, #1
   32036:	f001 fdfa 	bl	33c2e <memcpy>
        p->hooks.deallocate(p->buffer);
   3203a:	69e3      	ldr	r3, [r4, #28]
   3203c:	6820      	ldr	r0, [r4, #0]
   3203e:	4798      	blx	r3
    return newbuffer + p->offset;
   32040:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   32042:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   32046:	441d      	add	r5, r3
   32048:	e7d0      	b.n	31fec <ensure+0x24>

0003204a <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   3204a:	4603      	mov	r3, r0
   3204c:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   3204e:	2028      	movs	r0, #40	; 0x28
   32050:	4798      	blx	r3
    if (node)
   32052:	4604      	mov	r4, r0
   32054:	b118      	cbz	r0, 3205e <cJSON_New_Item.isra.0+0x14>
__ssp_bos_icheck3(memset, void *, int)
   32056:	2228      	movs	r2, #40	; 0x28
   32058:	2100      	movs	r1, #0
   3205a:	f001 fe08 	bl	33c6e <memset>
}
   3205e:	4620      	mov	r0, r4
   32060:	bd10      	pop	{r4, pc}

00032062 <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   32062:	2200      	movs	r2, #0
   32064:	f7f6 bd86 	b.w	28b74 <get_object_item>

00032068 <cJSON_AddItemToObject>:
    return add_item_to_object(object, string, item, &global_hooks, false);
   32068:	2300      	movs	r3, #0
   3206a:	f7f6 be81 	b.w	28d70 <add_item_to_object.constprop.0>

0003206e <cJSON_DetachItemViaPointer>:
{
   3206e:	b510      	push	{r4, lr}
    if ((parent == NULL) || (item == NULL))
   32070:	b190      	cbz	r0, 32098 <cJSON_DetachItemViaPointer+0x2a>
   32072:	b179      	cbz	r1, 32094 <cJSON_DetachItemViaPointer+0x26>
    if (item != parent->child)
   32074:	6883      	ldr	r3, [r0, #8]
   32076:	428b      	cmp	r3, r1
        item->prev->next = item->next;
   32078:	bf1c      	itt	ne
   3207a:	e9d1 4200 	ldrdne	r4, r2, [r1]
   3207e:	6014      	strne	r4, [r2, #0]
    if (item->next != NULL)
   32080:	680a      	ldr	r2, [r1, #0]
   32082:	b15a      	cbz	r2, 3209c <cJSON_DetachItemViaPointer+0x2e>
        item->next->prev = item->prev;
   32084:	684c      	ldr	r4, [r1, #4]
    if (item == parent->child)
   32086:	428b      	cmp	r3, r1
        item->next->prev = item->prev;
   32088:	6054      	str	r4, [r2, #4]
    if (item == parent->child)
   3208a:	d100      	bne.n	3208e <cJSON_DetachItemViaPointer+0x20>
        parent->child = item->next;
   3208c:	6082      	str	r2, [r0, #8]
    item->prev = NULL;
   3208e:	2300      	movs	r3, #0
    item->next = NULL;
   32090:	e9c1 3300 	strd	r3, r3, [r1]
}
   32094:	4608      	mov	r0, r1
   32096:	bd10      	pop	{r4, pc}
        return NULL;
   32098:	4601      	mov	r1, r0
   3209a:	e7fb      	b.n	32094 <cJSON_DetachItemViaPointer+0x26>
    if (item == parent->child)
   3209c:	428b      	cmp	r3, r1
   3209e:	d0f5      	beq.n	3208c <cJSON_DetachItemViaPointer+0x1e>
        parent->child->prev = item->prev;
   320a0:	684a      	ldr	r2, [r1, #4]
   320a2:	605a      	str	r2, [r3, #4]
   320a4:	e7f3      	b.n	3208e <cJSON_DetachItemViaPointer+0x20>

000320a6 <cJSON_DetachItemFromObject>:
{
   320a6:	b510      	push	{r4, lr}
   320a8:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   320aa:	f7ff ffda 	bl	32062 <cJSON_GetObjectItem>
   320ae:	4601      	mov	r1, r0
    return cJSON_DetachItemViaPointer(object, to_detach);
   320b0:	4620      	mov	r0, r4
}
   320b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   320b6:	f7ff bfda 	b.w	3206e <cJSON_DetachItemViaPointer>

000320ba <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   320ba:	4700      	bx	r0

000320bc <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   320bc:	f001 bbe9 	b.w	33892 <z_impl_k_busy_wait>

000320c0 <nrfx_clock_stop>:
    clock_stop(domain);
   320c0:	f7f7 b918 	b.w	292f4 <clock_stop>

000320c4 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   320c4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   320c8:	4770      	bx	lr

000320ca <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   320ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   320ce:	4770      	bx	lr

000320d0 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   320d0:	f44f 7080 	mov.w	r0, #256	; 0x100
   320d4:	4770      	bx	lr

000320d6 <rpc_handle_ctrl_message>:
   320d6:	2902      	cmp	r1, #2
   320d8:	b510      	push	{r4, lr}
   320da:	4604      	mov	r4, r0
   320dc:	d005      	beq.n	320ea <rpc_handle_ctrl_message+0x14>
   320de:	2904      	cmp	r1, #4
   320e0:	d001      	beq.n	320e6 <rpc_handle_ctrl_message+0x10>
   320e2:	2901      	cmp	r1, #1
   320e4:	d107      	bne.n	320f6 <rpc_handle_ctrl_message+0x20>
   320e6:	2000      	movs	r0, #0
   320e8:	bd10      	pop	{r4, pc}
   320ea:	6880      	ldr	r0, [r0, #8]
   320ec:	2800      	cmp	r0, #0
   320ee:	d0fa      	beq.n	320e6 <rpc_handle_ctrl_message+0x10>
   320f0:	f000 f833 	bl	3215a <rpc_transport_local_data_free>
   320f4:	e7f7      	b.n	320e6 <rpc_handle_ctrl_message+0x10>
   320f6:	6880      	ldr	r0, [r0, #8]
   320f8:	b108      	cbz	r0, 320fe <rpc_handle_ctrl_message+0x28>
   320fa:	f000 f82e 	bl	3215a <rpc_transport_local_data_free>
   320fe:	4620      	mov	r0, r4
   32100:	f000 f827 	bl	32152 <rpc_transport_msg_free>
   32104:	e7ef      	b.n	320e6 <rpc_handle_ctrl_message+0x10>

00032106 <rpc_message_send>:
   32106:	6843      	ldr	r3, [r0, #4]
   32108:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   3210c:	f043 0302 	orr.w	r3, r3, #2
   32110:	6043      	str	r3, [r0, #4]
   32112:	f000 b826 	b.w	32162 <rpc_transport_data_msg_send>

00032116 <rpc_message_alloc>:
   32116:	b570      	push	{r4, r5, r6, lr}
   32118:	4606      	mov	r6, r0
   3211a:	b130      	cbz	r0, 3212a <rpc_message_alloc+0x14>
   3211c:	f000 f81b 	bl	32156 <rpc_transport_data_alloc>
   32120:	4605      	mov	r5, r0
   32122:	b918      	cbnz	r0, 3212c <rpc_message_alloc+0x16>
   32124:	2400      	movs	r4, #0
   32126:	4620      	mov	r0, r4
   32128:	bd70      	pop	{r4, r5, r6, pc}
   3212a:	4605      	mov	r5, r0
   3212c:	f000 f80f 	bl	3214e <rpc_transport_data_msg_alloc>
   32130:	4604      	mov	r4, r0
   32132:	b110      	cbz	r0, 3213a <rpc_message_alloc+0x24>
   32134:	60c6      	str	r6, [r0, #12]
   32136:	6085      	str	r5, [r0, #8]
   32138:	e7f5      	b.n	32126 <rpc_message_alloc+0x10>
   3213a:	2d00      	cmp	r5, #0
   3213c:	d0f2      	beq.n	32124 <rpc_message_alloc+0xe>
   3213e:	4628      	mov	r0, r5
   32140:	f000 f80b 	bl	3215a <rpc_transport_local_data_free>
   32144:	e7ef      	b.n	32126 <rpc_message_alloc+0x10>

00032146 <rpc_message_free>:
   32146:	f000 b804 	b.w	32152 <rpc_transport_msg_free>

0003214a <rpc_message_data_free>:
   3214a:	f000 b808 	b.w	3215e <rpc_transport_peer_data_free>

0003214e <rpc_transport_data_msg_alloc>:
   3214e:	f7f7 bf99 	b.w	2a084 <rpc_transport_ipc_data_msg_alloc>

00032152 <rpc_transport_msg_free>:
   32152:	f7f7 bfe9 	b.w	2a128 <rpc_transport_ipc_msg_free>

00032156 <rpc_transport_data_alloc>:
   32156:	f7f7 bfc9 	b.w	2a0ec <rpc_transport_ipc_data_alloc>

0003215a <rpc_transport_local_data_free>:
   3215a:	f000 b808 	b.w	3216e <rpc_transport_ipc_local_data_free>

0003215e <rpc_transport_peer_data_free>:
   3215e:	f7f8 b809 	b.w	2a174 <rpc_transport_ipc_peer_data_free>

00032162 <rpc_transport_data_msg_send>:
   32162:	f7f7 bf53 	b.w	2a00c <rpc_transport_ipc_data_msg_send>

00032166 <rpc_transport_rx_data_suspend>:
   32166:	f000 b809 	b.w	3217c <rpc_transport_ipc_rx_data_suspend>

0003216a <rpc_transport_rx_data_resume>:
   3216a:	f000 b80a 	b.w	32182 <rpc_transport_ipc_rx_data_resume>

0003216e <rpc_transport_ipc_local_data_free>:
   3216e:	b508      	push	{r3, lr}
   32170:	f7f3 fb7a 	bl	25868 <nrf_modem_os_shm_tx_free>
   32174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   32178:	f7f3 bb3a 	b.w	257f0 <nrf_modem_os_application_irq_set>

0003217c <rpc_transport_ipc_rx_data_suspend>:
   3217c:	2004      	movs	r0, #4
   3217e:	f7f7 bd47 	b.w	29c10 <nrfx_ipc_receive_event_disable>

00032182 <rpc_transport_ipc_rx_data_resume>:
   32182:	2004      	movs	r0, #4
   32184:	f7f7 bd3a 	b.w	29bfc <nrfx_ipc_receive_event_enable>

00032188 <rpc_client_request_alloc>:
   32188:	b508      	push	{r3, lr}
   3218a:	f7ff ffc4 	bl	32116 <rpc_message_alloc>
   3218e:	b100      	cbz	r0, 32192 <rpc_client_request_alloc+0xa>
   32190:	3008      	adds	r0, #8
   32192:	bd08      	pop	{r3, pc}

00032194 <rpc_client_request_send>:
   32194:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   32198:	4610      	mov	r0, r2
   3219a:	f840 1d08 	str.w	r1, [r0, #-8]!
   3219e:	f7ff bfb2 	b.w	32106 <rpc_message_send>

000321a2 <rpc_client_message_free>:
   321a2:	3808      	subs	r0, #8
   321a4:	f7ff bfcf 	b.w	32146 <rpc_message_free>

000321a8 <rpc_client_data_free>:
   321a8:	f7ff bfcf 	b.w	3214a <rpc_message_data_free>

000321ac <rpc_gnss_serialize_utc>:
   321ac:	b1c0      	cbz	r0, 321e0 <rpc_gnss_serialize_utc+0x34>
   321ae:	b1b9      	cbz	r1, 321e0 <rpc_gnss_serialize_utc+0x34>
   321b0:	2301      	movs	r3, #1
   321b2:	700b      	strb	r3, [r1, #0]
   321b4:	2300      	movs	r3, #0
   321b6:	704b      	strb	r3, [r1, #1]
   321b8:	6843      	ldr	r3, [r0, #4]
   321ba:	f8c1 3006 	str.w	r3, [r1, #6]
   321be:	6803      	ldr	r3, [r0, #0]
   321c0:	f8c1 3002 	str.w	r3, [r1, #2]
   321c4:	7a83      	ldrb	r3, [r0, #10]
   321c6:	730b      	strb	r3, [r1, #12]
   321c8:	7b43      	ldrb	r3, [r0, #13]
   321ca:	73cb      	strb	r3, [r1, #15]
   321cc:	7b03      	ldrb	r3, [r0, #12]
   321ce:	738b      	strb	r3, [r1, #14]
   321d0:	7a03      	ldrb	r3, [r0, #8]
   321d2:	728b      	strb	r3, [r1, #10]
   321d4:	7ac3      	ldrb	r3, [r0, #11]
   321d6:	734b      	strb	r3, [r1, #13]
   321d8:	7a43      	ldrb	r3, [r0, #9]
   321da:	2010      	movs	r0, #16
   321dc:	72cb      	strb	r3, [r1, #11]
   321de:	4770      	bx	lr
   321e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   321e4:	4770      	bx	lr

000321e6 <rpc_gnss_serialize_ephe>:
   321e6:	2800      	cmp	r0, #0
   321e8:	d044      	beq.n	32274 <rpc_gnss_serialize_ephe+0x8e>
   321ea:	2900      	cmp	r1, #0
   321ec:	d042      	beq.n	32274 <rpc_gnss_serialize_ephe+0x8e>
   321ee:	2302      	movs	r3, #2
   321f0:	700b      	strb	r3, [r1, #0]
   321f2:	2300      	movs	r3, #0
   321f4:	704b      	strb	r3, [r1, #1]
   321f6:	68c3      	ldr	r3, [r0, #12]
   321f8:	f8c1 300b 	str.w	r3, [r1, #11]
   321fc:	8903      	ldrh	r3, [r0, #8]
   321fe:	f8a1 3009 	strh.w	r3, [r1, #9]
   32202:	7983      	ldrb	r3, [r0, #6]
   32204:	720b      	strb	r3, [r1, #8]
   32206:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   3220a:	878b      	strh	r3, [r1, #60]	; 0x3c
   3220c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   3220e:	86cb      	strh	r3, [r1, #54]	; 0x36
   32210:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   32214:	874b      	strh	r3, [r1, #58]	; 0x3a
   32216:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   32218:	868b      	strh	r3, [r1, #52]	; 0x34
   3221a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   3221e:	87cb      	strh	r3, [r1, #62]	; 0x3e
   32220:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   32224:	870b      	strh	r3, [r1, #56]	; 0x38
   32226:	8b83      	ldrh	r3, [r0, #28]
   32228:	830b      	strh	r3, [r1, #24]
   3222a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   3222c:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   32230:	7c83      	ldrb	r3, [r0, #18]
   32232:	744b      	strb	r3, [r1, #17]
   32234:	7843      	ldrb	r3, [r0, #1]
   32236:	70cb      	strb	r3, [r1, #3]
   32238:	6b43      	ldr	r3, [r0, #52]	; 0x34
   3223a:	62cb      	str	r3, [r1, #44]	; 0x2c
   3223c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   3223e:	84cb      	strh	r3, [r1, #38]	; 0x26
   32240:	8843      	ldrh	r3, [r0, #2]
   32242:	808b      	strh	r3, [r1, #4]
   32244:	6a03      	ldr	r3, [r0, #32]
   32246:	f8c1 301a 	str.w	r3, [r1, #26]
   3224a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   3224c:	630b      	str	r3, [r1, #48]	; 0x30
   3224e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   32250:	f8c1 301e 	str.w	r3, [r1, #30]
   32254:	6b03      	ldr	r3, [r0, #48]	; 0x30
   32256:	628b      	str	r3, [r1, #40]	; 0x28
   32258:	7803      	ldrb	r3, [r0, #0]
   3225a:	708b      	strb	r3, [r1, #2]
   3225c:	7c03      	ldrb	r3, [r0, #16]
   3225e:	73cb      	strb	r3, [r1, #15]
   32260:	8883      	ldrh	r3, [r0, #4]
   32262:	80cb      	strh	r3, [r1, #6]
   32264:	8a83      	ldrh	r3, [r0, #20]
   32266:	824b      	strh	r3, [r1, #18]
   32268:	7c43      	ldrb	r3, [r0, #17]
   3226a:	740b      	strb	r3, [r1, #16]
   3226c:	6983      	ldr	r3, [r0, #24]
   3226e:	2040      	movs	r0, #64	; 0x40
   32270:	614b      	str	r3, [r1, #20]
   32272:	4770      	bx	lr
   32274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32278:	4770      	bx	lr

0003227a <rpc_gnss_serialize_alm>:
   3227a:	b340      	cbz	r0, 322ce <rpc_gnss_serialize_alm+0x54>
   3227c:	b339      	cbz	r1, 322ce <rpc_gnss_serialize_alm+0x54>
   3227e:	2303      	movs	r3, #3
   32280:	700b      	strb	r3, [r1, #0]
   32282:	2300      	movs	r3, #0
   32284:	704b      	strb	r3, [r1, #1]
   32286:	8b83      	ldrh	r3, [r0, #28]
   32288:	f8a1 301d 	strh.w	r3, [r1, #29]
   3228c:	8bc3      	ldrh	r3, [r0, #30]
   3228e:	f8a1 301f 	strh.w	r3, [r1, #31]
   32292:	88c3      	ldrh	r3, [r0, #6]
   32294:	810b      	strh	r3, [r1, #8]
   32296:	8883      	ldrh	r3, [r0, #4]
   32298:	80cb      	strh	r3, [r1, #6]
   3229a:	78c3      	ldrb	r3, [r0, #3]
   3229c:	714b      	strb	r3, [r1, #5]
   3229e:	6983      	ldr	r3, [r0, #24]
   322a0:	f8c1 3019 	str.w	r3, [r1, #25]
   322a4:	6903      	ldr	r3, [r0, #16]
   322a6:	f8c1 3011 	str.w	r3, [r1, #17]
   322aa:	8903      	ldrh	r3, [r0, #8]
   322ac:	814b      	strh	r3, [r1, #10]
   322ae:	68c3      	ldr	r3, [r0, #12]
   322b0:	f8c1 300d 	str.w	r3, [r1, #13]
   322b4:	7a83      	ldrb	r3, [r0, #10]
   322b6:	730b      	strb	r3, [r1, #12]
   322b8:	7803      	ldrb	r3, [r0, #0]
   322ba:	708b      	strb	r3, [r1, #2]
   322bc:	7883      	ldrb	r3, [r0, #2]
   322be:	710b      	strb	r3, [r1, #4]
   322c0:	6943      	ldr	r3, [r0, #20]
   322c2:	f8c1 3015 	str.w	r3, [r1, #21]
   322c6:	7843      	ldrb	r3, [r0, #1]
   322c8:	2021      	movs	r0, #33	; 0x21
   322ca:	70cb      	strb	r3, [r1, #3]
   322cc:	4770      	bx	lr
   322ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   322d2:	4770      	bx	lr

000322d4 <rpc_gnss_serialize_klob>:
   322d4:	b1b0      	cbz	r0, 32304 <rpc_gnss_serialize_klob+0x30>
   322d6:	b1a9      	cbz	r1, 32304 <rpc_gnss_serialize_klob+0x30>
   322d8:	2304      	movs	r3, #4
   322da:	700b      	strb	r3, [r1, #0]
   322dc:	2300      	movs	r3, #0
   322de:	704b      	strb	r3, [r1, #1]
   322e0:	7803      	ldrb	r3, [r0, #0]
   322e2:	708b      	strb	r3, [r1, #2]
   322e4:	7843      	ldrb	r3, [r0, #1]
   322e6:	70cb      	strb	r3, [r1, #3]
   322e8:	7883      	ldrb	r3, [r0, #2]
   322ea:	710b      	strb	r3, [r1, #4]
   322ec:	78c3      	ldrb	r3, [r0, #3]
   322ee:	714b      	strb	r3, [r1, #5]
   322f0:	7903      	ldrb	r3, [r0, #4]
   322f2:	718b      	strb	r3, [r1, #6]
   322f4:	7943      	ldrb	r3, [r0, #5]
   322f6:	71cb      	strb	r3, [r1, #7]
   322f8:	7983      	ldrb	r3, [r0, #6]
   322fa:	720b      	strb	r3, [r1, #8]
   322fc:	79c3      	ldrb	r3, [r0, #7]
   322fe:	200a      	movs	r0, #10
   32300:	724b      	strb	r3, [r1, #9]
   32302:	4770      	bx	lr
   32304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32308:	4770      	bx	lr

0003230a <rpc_gnss_serialize_nequick>:
   3230a:	b180      	cbz	r0, 3232e <rpc_gnss_serialize_nequick+0x24>
   3230c:	b179      	cbz	r1, 3232e <rpc_gnss_serialize_nequick+0x24>
   3230e:	2305      	movs	r3, #5
   32310:	700b      	strb	r3, [r1, #0]
   32312:	2300      	movs	r3, #0
   32314:	704b      	strb	r3, [r1, #1]
   32316:	8803      	ldrh	r3, [r0, #0]
   32318:	804b      	strh	r3, [r1, #2]
   3231a:	8843      	ldrh	r3, [r0, #2]
   3231c:	808b      	strh	r3, [r1, #4]
   3231e:	8883      	ldrh	r3, [r0, #4]
   32320:	80cb      	strh	r3, [r1, #6]
   32322:	7983      	ldrb	r3, [r0, #6]
   32324:	720b      	strb	r3, [r1, #8]
   32326:	79c3      	ldrb	r3, [r0, #7]
   32328:	200a      	movs	r0, #10
   3232a:	724b      	strb	r3, [r1, #9]
   3232c:	4770      	bx	lr
   3232e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32332:	4770      	bx	lr

00032334 <rpc_gnss_serialize_time_and_sv_tow>:
   32334:	b570      	push	{r4, r5, r6, lr}
   32336:	b1e8      	cbz	r0, 32374 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   32338:	b1e1      	cbz	r1, 32374 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   3233a:	2206      	movs	r2, #6
   3233c:	2300      	movs	r3, #0
   3233e:	700a      	strb	r2, [r1, #0]
   32340:	8802      	ldrh	r2, [r0, #0]
   32342:	704b      	strb	r3, [r1, #1]
   32344:	804a      	strh	r2, [r1, #2]
   32346:	68c2      	ldr	r2, [r0, #12]
   32348:	f101 0410 	add.w	r4, r1, #16
   3234c:	f8c1 200a 	str.w	r2, [r1, #10]
   32350:	8902      	ldrh	r2, [r0, #8]
   32352:	810a      	strh	r2, [r1, #8]
   32354:	6842      	ldr	r2, [r0, #4]
   32356:	604a      	str	r2, [r1, #4]
   32358:	8a06      	ldrh	r6, [r0, #16]
   3235a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   3235e:	188d      	adds	r5, r1, r2
   32360:	81ee      	strh	r6, [r5, #14]
   32362:	7c85      	ldrb	r5, [r0, #18]
   32364:	3301      	adds	r3, #1
   32366:	2b20      	cmp	r3, #32
   32368:	54a5      	strb	r5, [r4, r2]
   3236a:	f100 0004 	add.w	r0, r0, #4
   3236e:	d1f3      	bne.n	32358 <rpc_gnss_serialize_time_and_sv_tow+0x24>
   32370:	206e      	movs	r0, #110	; 0x6e
   32372:	bd70      	pop	{r4, r5, r6, pc}
   32374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32378:	e7fb      	b.n	32372 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

0003237a <rpc_gnss_serialize_location>:
   3237a:	b1c0      	cbz	r0, 323ae <rpc_gnss_serialize_location+0x34>
   3237c:	b1b9      	cbz	r1, 323ae <rpc_gnss_serialize_location+0x34>
   3237e:	2307      	movs	r3, #7
   32380:	700b      	strb	r3, [r1, #0]
   32382:	2300      	movs	r3, #0
   32384:	704b      	strb	r3, [r1, #1]
   32386:	8903      	ldrh	r3, [r0, #8]
   32388:	814b      	strh	r3, [r1, #10]
   3238a:	7b83      	ldrb	r3, [r0, #14]
   3238c:	740b      	strb	r3, [r1, #16]
   3238e:	6803      	ldr	r3, [r0, #0]
   32390:	f8c1 3002 	str.w	r3, [r1, #2]
   32394:	6843      	ldr	r3, [r0, #4]
   32396:	f8c1 3006 	str.w	r3, [r1, #6]
   3239a:	7b03      	ldrb	r3, [r0, #12]
   3239c:	738b      	strb	r3, [r1, #14]
   3239e:	7b43      	ldrb	r3, [r0, #13]
   323a0:	73cb      	strb	r3, [r1, #15]
   323a2:	7a83      	ldrb	r3, [r0, #10]
   323a4:	730b      	strb	r3, [r1, #12]
   323a6:	7ac3      	ldrb	r3, [r0, #11]
   323a8:	2011      	movs	r0, #17
   323aa:	734b      	strb	r3, [r1, #13]
   323ac:	4770      	bx	lr
   323ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   323b2:	4770      	bx	lr

000323b4 <rpc_gnss_serialize_integrity>:
   323b4:	b148      	cbz	r0, 323ca <rpc_gnss_serialize_integrity+0x16>
   323b6:	b141      	cbz	r1, 323ca <rpc_gnss_serialize_integrity+0x16>
   323b8:	2308      	movs	r3, #8
   323ba:	700b      	strb	r3, [r1, #0]
   323bc:	2300      	movs	r3, #0
   323be:	704b      	strb	r3, [r1, #1]
   323c0:	6803      	ldr	r3, [r0, #0]
   323c2:	2006      	movs	r0, #6
   323c4:	f8c1 3002 	str.w	r3, [r1, #2]
   323c8:	4770      	bx	lr
   323ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   323ce:	4770      	bx	lr

000323d0 <sock_has_pkt>:
   323d0:	6840      	ldr	r0, [r0, #4]
   323d2:	3800      	subs	r0, #0
   323d4:	bf18      	it	ne
   323d6:	2001      	movne	r0, #1
   323d8:	4770      	bx	lr

000323da <sock_pkt_append>:
   323da:	2300      	movs	r3, #0
   323dc:	600b      	str	r3, [r1, #0]
   323de:	6883      	ldr	r3, [r0, #8]
   323e0:	b913      	cbnz	r3, 323e8 <sock_pkt_append+0xe>
   323e2:	e9c0 1101 	strd	r1, r1, [r0, #4]
   323e6:	4770      	bx	lr
   323e8:	6019      	str	r1, [r3, #0]
   323ea:	6081      	str	r1, [r0, #8]
   323ec:	4770      	bx	lr

000323ee <sock_pkt_remove>:
   323ee:	b538      	push	{r3, r4, r5, lr}
   323f0:	4605      	mov	r5, r0
   323f2:	460c      	mov	r4, r1
   323f4:	f7ff feb7 	bl	32166 <rpc_transport_rx_data_suspend>
   323f8:	68aa      	ldr	r2, [r5, #8]
   323fa:	6823      	ldr	r3, [r4, #0]
   323fc:	4294      	cmp	r4, r2
   323fe:	606b      	str	r3, [r5, #4]
   32400:	bf08      	it	eq
   32402:	60ab      	streq	r3, [r5, #8]
   32404:	2300      	movs	r3, #0
   32406:	4620      	mov	r0, r4
   32408:	6023      	str	r3, [r4, #0]
   3240a:	f000 f8f6 	bl	325fa <pkt_free>
   3240e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   32412:	f7ff beaa 	b.w	3216a <rpc_transport_rx_data_resume>

00032416 <sock_pkt_peek_head>:
   32416:	6840      	ldr	r0, [r0, #4]
   32418:	4770      	bx	lr

0003241a <sock_is_stream>:
   3241a:	6900      	ldr	r0, [r0, #16]
   3241c:	1e43      	subs	r3, r0, #1
   3241e:	4258      	negs	r0, r3
   32420:	4158      	adcs	r0, r3
   32422:	4770      	bx	lr

00032424 <sock_is_datagram>:
   32424:	6900      	ldr	r0, [r0, #16]
   32426:	1e83      	subs	r3, r0, #2
   32428:	4258      	negs	r0, r3
   3242a:	4158      	adcs	r0, r3
   3242c:	4770      	bx	lr

0003242e <sock_is_raw>:
   3242e:	6900      	ldr	r0, [r0, #16]
   32430:	1ec3      	subs	r3, r0, #3
   32432:	4258      	negs	r0, r3
   32434:	4158      	adcs	r0, r3
   32436:	4770      	bx	lr

00032438 <sock_proto_is_secure>:
   32438:	6940      	ldr	r0, [r0, #20]
   3243a:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3243e:	d005      	beq.n	3244c <sock_proto_is_secure+0x14>
   32440:	f240 1311 	movw	r3, #273	; 0x111
   32444:	1ac3      	subs	r3, r0, r3
   32446:	4258      	negs	r0, r3
   32448:	4158      	adcs	r0, r3
   3244a:	4770      	bx	lr
   3244c:	2001      	movs	r0, #1
   3244e:	4770      	bx	lr

00032450 <sock_is_connecting>:
   32450:	7f00      	ldrb	r0, [r0, #28]
   32452:	f3c0 0080 	ubfx	r0, r0, #2, #1
   32456:	4770      	bx	lr

00032458 <sock_is_connected>:
   32458:	7f00      	ldrb	r0, [r0, #28]
   3245a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   3245e:	4770      	bx	lr

00032460 <sock_is_attaching>:
   32460:	7f00      	ldrb	r0, [r0, #28]
   32462:	f3c0 1000 	ubfx	r0, r0, #4, #1
   32466:	4770      	bx	lr

00032468 <sock_is_nonblock>:
   32468:	6b40      	ldr	r0, [r0, #52]	; 0x34
   3246a:	f000 0001 	and.w	r0, r0, #1
   3246e:	4770      	bx	lr

00032470 <sock_is_local_closed>:
   32470:	7f00      	ldrb	r0, [r0, #28]
   32472:	f000 0001 	and.w	r0, r0, #1
   32476:	4770      	bx	lr

00032478 <sock_is_closed>:
   32478:	7f00      	ldrb	r0, [r0, #28]
   3247a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   3247e:	4770      	bx	lr

00032480 <sock_has_error>:
   32480:	6983      	ldr	r3, [r0, #24]
   32482:	f033 0380 	bics.w	r3, r3, #128	; 0x80
   32486:	bf14      	ite	ne
   32488:	2001      	movne	r0, #1
   3248a:	2000      	moveq	r0, #0
   3248c:	4770      	bx	lr

0003248e <sock_has_flow_control>:
   3248e:	7f00      	ldrb	r0, [r0, #28]
   32490:	09c0      	lsrs	r0, r0, #7
   32492:	4770      	bx	lr

00032494 <sock_can_read>:
   32494:	6840      	ldr	r0, [r0, #4]
   32496:	3800      	subs	r0, #0
   32498:	bf18      	it	ne
   3249a:	2001      	movne	r0, #1
   3249c:	4770      	bx	lr

0003249e <sock_can_accept>:
   3249e:	7f00      	ldrb	r0, [r0, #28]
   324a0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   324a4:	4770      	bx	lr

000324a6 <sock_can_send>:
   324a6:	b508      	push	{r3, lr}
   324a8:	6903      	ldr	r3, [r0, #16]
   324aa:	4601      	mov	r1, r0
   324ac:	2b01      	cmp	r3, #1
   324ae:	bf0a      	itet	eq
   324b0:	7f02      	ldrbeq	r2, [r0, #28]
   324b2:	2201      	movne	r2, #1
   324b4:	f3c2 02c0 	ubfxeq	r2, r2, #3, #1
   324b8:	f7ff ffbe 	bl	32438 <sock_proto_is_secure>
   324bc:	b160      	cbz	r0, 324d8 <sock_can_send+0x32>
   324be:	7f08      	ldrb	r0, [r1, #28]
   324c0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   324c4:	b152      	cbz	r2, 324dc <sock_can_send+0x36>
   324c6:	b130      	cbz	r0, 324d6 <sock_can_send+0x30>
   324c8:	7f0a      	ldrb	r2, [r1, #28]
   324ca:	0793      	lsls	r3, r2, #30
   324cc:	bf4e      	itee	mi
   324ce:	2000      	movmi	r0, #0
   324d0:	f082 0280 	eorpl.w	r2, r2, #128	; 0x80
   324d4:	09d0      	lsrpl	r0, r2, #7
   324d6:	bd08      	pop	{r3, pc}
   324d8:	2a00      	cmp	r2, #0
   324da:	d1f5      	bne.n	324c8 <sock_can_send+0x22>
   324dc:	4610      	mov	r0, r2
   324de:	e7fa      	b.n	324d6 <sock_can_send+0x30>

000324e0 <sock_rcvtimeo_ms_get>:
   324e0:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   324e4:	ea53 0102 	orrs.w	r1, r3, r2
   324e8:	d009      	beq.n	324fe <sock_rcvtimeo_ms_get+0x1e>
   324ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   324ee:	fbb3 f0f1 	udiv	r0, r3, r1
   324f2:	fb01 0002 	mla	r0, r1, r2, r0
   324f6:	2801      	cmp	r0, #1
   324f8:	bfb8      	it	lt
   324fa:	2001      	movlt	r0, #1
   324fc:	4770      	bx	lr
   324fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32502:	4770      	bx	lr

00032504 <sock_sndtimeo_ms_get>:
   32504:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   32508:	ea53 0102 	orrs.w	r1, r3, r2
   3250c:	d009      	beq.n	32522 <sock_sndtimeo_ms_get+0x1e>
   3250e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   32512:	fbb3 f0f1 	udiv	r0, r3, r1
   32516:	fb01 0002 	mla	r0, r1, r2, r0
   3251a:	2801      	cmp	r0, #1
   3251c:	bfb8      	it	lt
   3251e:	2001      	movlt	r0, #1
   32520:	4770      	bx	lr
   32522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32526:	4770      	bx	lr

00032528 <sock_family_is_valid>:
   32528:	3801      	subs	r0, #1
   3252a:	2802      	cmp	r0, #2
   3252c:	bf8c      	ite	hi
   3252e:	2000      	movhi	r0, #0
   32530:	2001      	movls	r0, #1
   32532:	4770      	bx	lr

00032534 <sock_type_is_valid>:
   32534:	3801      	subs	r0, #1
   32536:	2802      	cmp	r0, #2
   32538:	bf8c      	ite	hi
   3253a:	2000      	movhi	r0, #0
   3253c:	2001      	movls	r0, #1
   3253e:	4770      	bx	lr

00032540 <sock_proto_is_valid>:
   32540:	b150      	cbz	r0, 32558 <sock_proto_is_valid+0x18>
   32542:	2806      	cmp	r0, #6
   32544:	d008      	beq.n	32558 <sock_proto_is_valid+0x18>
   32546:	f420 7380 	bic.w	r3, r0, #256	; 0x100
   3254a:	2b11      	cmp	r3, #17
   3254c:	d004      	beq.n	32558 <sock_proto_is_valid+0x18>
   3254e:	f5a0 7381 	sub.w	r3, r0, #258	; 0x102
   32552:	4258      	negs	r0, r3
   32554:	4158      	adcs	r0, r3
   32556:	4770      	bx	lr
   32558:	2001      	movs	r0, #1
   3255a:	4770      	bx	lr

0003255c <sock_proto_supports_type>:
   3255c:	2903      	cmp	r1, #3
   3255e:	d015      	beq.n	3258c <sock_proto_supports_type+0x30>
   32560:	2811      	cmp	r0, #17
   32562:	d00c      	beq.n	3257e <sock_proto_supports_type+0x22>
   32564:	dc04      	bgt.n	32570 <sock_proto_supports_type+0x14>
   32566:	b188      	cbz	r0, 3258c <sock_proto_supports_type+0x30>
   32568:	2806      	cmp	r0, #6
   3256a:	d00a      	beq.n	32582 <sock_proto_supports_type+0x26>
   3256c:	2000      	movs	r0, #0
   3256e:	4770      	bx	lr
   32570:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   32574:	d005      	beq.n	32582 <sock_proto_supports_type+0x26>
   32576:	f240 1311 	movw	r3, #273	; 0x111
   3257a:	4298      	cmp	r0, r3
   3257c:	d1f6      	bne.n	3256c <sock_proto_supports_type+0x10>
   3257e:	2902      	cmp	r1, #2
   32580:	e000      	b.n	32584 <sock_proto_supports_type+0x28>
   32582:	2901      	cmp	r1, #1
   32584:	bf14      	ite	ne
   32586:	2000      	movne	r0, #0
   32588:	2001      	moveq	r0, #1
   3258a:	4770      	bx	lr
   3258c:	2001      	movs	r0, #1
   3258e:	4770      	bx	lr

00032590 <sock_sockaddr_len_is_valid>:
   32590:	6843      	ldr	r3, [r0, #4]
   32592:	2b01      	cmp	r3, #1
   32594:	d003      	beq.n	3259e <sock_sockaddr_len_is_valid+0xe>
   32596:	2b02      	cmp	r3, #2
   32598:	d009      	beq.n	325ae <sock_sockaddr_len_is_valid+0x1e>
   3259a:	2000      	movs	r0, #0
   3259c:	4770      	bx	lr
   3259e:	7803      	ldrb	r3, [r0, #0]
   325a0:	2b10      	cmp	r3, #16
   325a2:	d1fa      	bne.n	3259a <sock_sockaddr_len_is_valid+0xa>
   325a4:	2910      	cmp	r1, #16
   325a6:	bf14      	ite	ne
   325a8:	2000      	movne	r0, #0
   325aa:	2001      	moveq	r0, #1
   325ac:	4770      	bx	lr
   325ae:	7803      	ldrb	r3, [r0, #0]
   325b0:	2b24      	cmp	r3, #36	; 0x24
   325b2:	d1f2      	bne.n	3259a <sock_sockaddr_len_is_valid+0xa>
   325b4:	2924      	cmp	r1, #36	; 0x24
   325b6:	e7f6      	b.n	325a6 <sock_sockaddr_len_is_valid+0x16>

000325b8 <sock_sockaddr_fam_is_valid>:
   325b8:	68c3      	ldr	r3, [r0, #12]
   325ba:	2b01      	cmp	r3, #1
   325bc:	d003      	beq.n	325c6 <sock_sockaddr_fam_is_valid+0xe>
   325be:	2b02      	cmp	r3, #2
   325c0:	d007      	beq.n	325d2 <sock_sockaddr_fam_is_valid+0x1a>
   325c2:	2001      	movs	r0, #1
   325c4:	4770      	bx	lr
   325c6:	6848      	ldr	r0, [r1, #4]
   325c8:	2801      	cmp	r0, #1
   325ca:	bf14      	ite	ne
   325cc:	2000      	movne	r0, #0
   325ce:	2001      	moveq	r0, #1
   325d0:	4770      	bx	lr
   325d2:	6848      	ldr	r0, [r1, #4]
   325d4:	2802      	cmp	r0, #2
   325d6:	e7f8      	b.n	325ca <sock_sockaddr_fam_is_valid+0x12>

000325d8 <pkt_has_next>:
   325d8:	b100      	cbz	r0, 325dc <pkt_has_next+0x4>
   325da:	6800      	ldr	r0, [r0, #0]
   325dc:	3800      	subs	r0, #0
   325de:	bf18      	it	ne
   325e0:	2001      	movne	r0, #1
   325e2:	4770      	bx	lr

000325e4 <pkt_peek_next>:
   325e4:	b100      	cbz	r0, 325e8 <pkt_peek_next+0x4>
   325e6:	6800      	ldr	r0, [r0, #0]
   325e8:	4770      	bx	lr

000325ea <pkt_bytes_get>:
   325ea:	8943      	ldrh	r3, [r0, #10]
   325ec:	6840      	ldr	r0, [r0, #4]
   325ee:	4418      	add	r0, r3
   325f0:	4770      	bx	lr

000325f2 <pkt_bytes_left>:
   325f2:	8902      	ldrh	r2, [r0, #8]
   325f4:	8940      	ldrh	r0, [r0, #10]
   325f6:	1a10      	subs	r0, r2, r0
   325f8:	4770      	bx	lr

000325fa <pkt_free>:
   325fa:	b510      	push	{r4, lr}
   325fc:	4604      	mov	r4, r0
   325fe:	6840      	ldr	r0, [r0, #4]
   32600:	f7ff fdd2 	bl	321a8 <rpc_client_data_free>
   32604:	68e0      	ldr	r0, [r4, #12]
   32606:	b108      	cbz	r0, 3260c <pkt_free+0x12>
   32608:	f7f3 f920 	bl	2584c <nrf_modem_os_free>
   3260c:	4620      	mov	r0, r4
   3260e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32612:	f7f3 b91b 	b.w	2584c <nrf_modem_os_free>

00032616 <pkt_flush>:
   32616:	b510      	push	{r4, lr}
   32618:	4604      	mov	r4, r0
   3261a:	6820      	ldr	r0, [r4, #0]
   3261c:	b900      	cbnz	r0, 32620 <pkt_flush+0xa>
   3261e:	bd10      	pop	{r4, pc}
   32620:	6862      	ldr	r2, [r4, #4]
   32622:	6803      	ldr	r3, [r0, #0]
   32624:	4290      	cmp	r0, r2
   32626:	6023      	str	r3, [r4, #0]
   32628:	bf08      	it	eq
   3262a:	6063      	streq	r3, [r4, #4]
   3262c:	f7ff ffe5 	bl	325fa <pkt_free>
   32630:	e7f3      	b.n	3261a <pkt_flush+0x4>

00032632 <on_conf_dnssrv_res>:
   32632:	f000 bd8e 	b.w	33152 <res_forward>

00032636 <nrf_freeaddrinfo>:
   32636:	b510      	push	{r4, lr}
   32638:	4604      	mov	r4, r0
   3263a:	b160      	cbz	r0, 32656 <nrf_freeaddrinfo+0x20>
   3263c:	6940      	ldr	r0, [r0, #20]
   3263e:	b108      	cbz	r0, 32644 <nrf_freeaddrinfo+0xe>
   32640:	f7f3 f904 	bl	2584c <nrf_modem_os_free>
   32644:	69a0      	ldr	r0, [r4, #24]
   32646:	b108      	cbz	r0, 3264c <nrf_freeaddrinfo+0x16>
   32648:	f7f3 f900 	bl	2584c <nrf_modem_os_free>
   3264c:	4620      	mov	r0, r4
   3264e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32652:	f7f3 b8fb 	b.w	2584c <nrf_modem_os_free>
   32656:	bd10      	pop	{r4, pc}

00032658 <nrf_setdnsaddr>:
   32658:	b570      	push	{r4, r5, r6, lr}
   3265a:	4606      	mov	r6, r0
   3265c:	460d      	mov	r5, r1
   3265e:	4614      	mov	r4, r2
   32660:	f7f9 fbce 	bl	2be00 <nrf_modem_state_is_initialized>
   32664:	b928      	cbnz	r0, 32672 <nrf_setdnsaddr+0x1a>
   32666:	2001      	movs	r0, #1
   32668:	f7ff f818 	bl	3169c <nrf_modem_os_errno_set>
   3266c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32670:	e031      	b.n	326d6 <nrf_setdnsaddr+0x7e>
   32672:	1e73      	subs	r3, r6, #1
   32674:	2b01      	cmp	r3, #1
   32676:	d901      	bls.n	3267c <nrf_setdnsaddr+0x24>
   32678:	206a      	movs	r0, #106	; 0x6a
   3267a:	e7f5      	b.n	32668 <nrf_setdnsaddr+0x10>
   3267c:	b115      	cbz	r5, 32684 <nrf_setdnsaddr+0x2c>
   3267e:	b954      	cbnz	r4, 32696 <nrf_setdnsaddr+0x3e>
   32680:	2016      	movs	r0, #22
   32682:	e7f1      	b.n	32668 <nrf_setdnsaddr+0x10>
   32684:	2c00      	cmp	r4, #0
   32686:	d1fb      	bne.n	32680 <nrf_setdnsaddr+0x28>
   32688:	2000      	movs	r0, #0
   3268a:	f7ff fd7d 	bl	32188 <rpc_client_request_alloc>
   3268e:	4604      	mov	r4, r0
   32690:	b940      	cbnz	r0, 326a4 <nrf_setdnsaddr+0x4c>
   32692:	2069      	movs	r0, #105	; 0x69
   32694:	e7e8      	b.n	32668 <nrf_setdnsaddr+0x10>
   32696:	2e01      	cmp	r6, #1
   32698:	d102      	bne.n	326a0 <nrf_setdnsaddr+0x48>
   3269a:	2c04      	cmp	r4, #4
   3269c:	d0f4      	beq.n	32688 <nrf_setdnsaddr+0x30>
   3269e:	e7ef      	b.n	32680 <nrf_setdnsaddr+0x28>
   326a0:	2c10      	cmp	r4, #16
   326a2:	e7fb      	b.n	3269c <nrf_setdnsaddr+0x44>
   326a4:	2300      	movs	r3, #0
   326a6:	2214      	movs	r2, #20
   326a8:	7243      	strb	r3, [r0, #9]
   326aa:	7202      	strb	r2, [r0, #8]
   326ac:	7283      	strb	r3, [r0, #10]
   326ae:	72c3      	strb	r3, [r0, #11]
   326b0:	b19d      	cbz	r5, 326da <nrf_setdnsaddr+0x82>
   326b2:	2e01      	cmp	r6, #1
   326b4:	bf0c      	ite	eq
   326b6:	2204      	moveq	r2, #4
   326b8:	2210      	movne	r2, #16
   326ba:	4629      	mov	r1, r5
   326bc:	6142      	str	r2, [r0, #20]
   326be:	3018      	adds	r0, #24
   326c0:	f001 fab5 	bl	33c2e <memcpy>
   326c4:	2200      	movs	r2, #0
   326c6:	4621      	mov	r1, r4
   326c8:	f247 000f 	movw	r0, #28687	; 0x700f
   326cc:	f7f8 fc8a 	bl	2afe4 <req_forward>
   326d0:	4603      	mov	r3, r0
   326d2:	2800      	cmp	r0, #0
   326d4:	d1c8      	bne.n	32668 <nrf_setdnsaddr+0x10>
   326d6:	4618      	mov	r0, r3
   326d8:	bd70      	pop	{r4, r5, r6, pc}
   326da:	7505      	strb	r5, [r0, #20]
   326dc:	7545      	strb	r5, [r0, #21]
   326de:	7585      	strb	r5, [r0, #22]
   326e0:	75c5      	strb	r5, [r0, #23]
   326e2:	e7ef      	b.n	326c4 <nrf_setdnsaddr+0x6c>

000326e4 <nrf_socket>:
   326e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   326e8:	4681      	mov	r9, r0
   326ea:	4688      	mov	r8, r1
   326ec:	4617      	mov	r7, r2
   326ee:	f7ff ff1b 	bl	32528 <sock_family_is_valid>
   326f2:	b938      	cbnz	r0, 32704 <nrf_socket+0x20>
   326f4:	206a      	movs	r0, #106	; 0x6a
   326f6:	f7fe ffd1 	bl	3169c <nrf_modem_os_errno_set>
   326fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   326fe:	b003      	add	sp, #12
   32700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32704:	4638      	mov	r0, r7
   32706:	f7ff ff1b 	bl	32540 <sock_proto_is_valid>
   3270a:	b908      	cbnz	r0, 32710 <nrf_socket+0x2c>
   3270c:	207b      	movs	r0, #123	; 0x7b
   3270e:	e7f2      	b.n	326f6 <nrf_socket+0x12>
   32710:	4640      	mov	r0, r8
   32712:	f7ff ff0f 	bl	32534 <sock_type_is_valid>
   32716:	b908      	cbnz	r0, 3271c <nrf_socket+0x38>
   32718:	206b      	movs	r0, #107	; 0x6b
   3271a:	e7ec      	b.n	326f6 <nrf_socket+0x12>
   3271c:	4641      	mov	r1, r8
   3271e:	4638      	mov	r0, r7
   32720:	f7ff ff1c 	bl	3255c <sock_proto_supports_type>
   32724:	2800      	cmp	r0, #0
   32726:	d0f7      	beq.n	32718 <nrf_socket+0x34>
   32728:	f7f7 fe2a 	bl	2a380 <sock_open>
   3272c:	4606      	mov	r6, r0
   3272e:	b908      	cbnz	r0, 32734 <nrf_socket+0x50>
   32730:	2017      	movs	r0, #23
   32732:	e7e0      	b.n	326f6 <nrf_socket+0x12>
   32734:	2000      	movs	r0, #0
   32736:	f7ff fd27 	bl	32188 <rpc_client_request_alloc>
   3273a:	4604      	mov	r4, r0
   3273c:	b920      	cbnz	r0, 32748 <nrf_socket+0x64>
   3273e:	6830      	ldr	r0, [r6, #0]
   32740:	f7f7 fe54 	bl	2a3ec <_sock_close>
   32744:	2069      	movs	r0, #105	; 0x69
   32746:	e7d6      	b.n	326f6 <nrf_socket+0x12>
   32748:	2300      	movs	r3, #0
   3274a:	220c      	movs	r2, #12
   3274c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   32750:	7202      	strb	r2, [r0, #8]
   32752:	7243      	strb	r3, [r0, #9]
   32754:	7283      	strb	r3, [r0, #10]
   32756:	72c3      	strb	r3, [r0, #11]
   32758:	7405      	strb	r5, [r0, #16]
   3275a:	7445      	strb	r5, [r0, #17]
   3275c:	7485      	strb	r5, [r0, #18]
   3275e:	74c5      	strb	r5, [r0, #19]
   32760:	4648      	mov	r0, r9
   32762:	f7f8 fc1f 	bl	2afa4 <nrf_af_to_rpc_af>
   32766:	6160      	str	r0, [r4, #20]
   32768:	4640      	mov	r0, r8
   3276a:	f000 fc98 	bl	3309e <nrf_type_to_rpc_type>
   3276e:	4601      	mov	r1, r0
   32770:	61a0      	str	r0, [r4, #24]
   32772:	4638      	mov	r0, r7
   32774:	f000 fc94 	bl	330a0 <nrf_proto_to_rpc_proto>
   32778:	4621      	mov	r1, r4
   3277a:	61e0      	str	r0, [r4, #28]
   3277c:	aa01      	add	r2, sp, #4
   3277e:	f247 0001 	movw	r0, #28673	; 0x7001
   32782:	f7f8 fc2f 	bl	2afe4 <req_forward>
   32786:	4604      	mov	r4, r0
   32788:	b120      	cbz	r0, 32794 <nrf_socket+0xb0>
   3278a:	4628      	mov	r0, r5
   3278c:	f7f7 fe2e 	bl	2a3ec <_sock_close>
   32790:	4620      	mov	r0, r4
   32792:	e7b0      	b.n	326f6 <nrf_socket+0x12>
   32794:	9801      	ldr	r0, [sp, #4]
   32796:	6983      	ldr	r3, [r0, #24]
   32798:	e9c6 9803 	strd	r9, r8, [r6, #12]
   3279c:	6033      	str	r3, [r6, #0]
   3279e:	6177      	str	r7, [r6, #20]
   327a0:	f7ff fcff 	bl	321a2 <rpc_client_message_free>
   327a4:	6830      	ldr	r0, [r6, #0]
   327a6:	e7aa      	b.n	326fe <nrf_socket+0x1a>

000327a8 <nrf_connect>:
   327a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   327aa:	4607      	mov	r7, r0
   327ac:	460c      	mov	r4, r1
   327ae:	4616      	mov	r6, r2
   327b0:	f7f7 fe0a 	bl	2a3c8 <sock_find>
   327b4:	4605      	mov	r5, r0
   327b6:	b938      	cbnz	r0, 327c8 <nrf_connect+0x20>
   327b8:	2009      	movs	r0, #9
   327ba:	f7fe ff6f 	bl	3169c <nrf_modem_os_errno_set>
   327be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   327c2:	4620      	mov	r0, r4
   327c4:	b003      	add	sp, #12
   327c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   327c8:	f7ff fe46 	bl	32458 <sock_is_connected>
   327cc:	b108      	cbz	r0, 327d2 <nrf_connect+0x2a>
   327ce:	207f      	movs	r0, #127	; 0x7f
   327d0:	e7f3      	b.n	327ba <nrf_connect+0x12>
   327d2:	4628      	mov	r0, r5
   327d4:	f7ff fe3c 	bl	32450 <sock_is_connecting>
   327d8:	b108      	cbz	r0, 327de <nrf_connect+0x36>
   327da:	2078      	movs	r0, #120	; 0x78
   327dc:	e7ed      	b.n	327ba <nrf_connect+0x12>
   327de:	4628      	mov	r0, r5
   327e0:	f7ff fe4a 	bl	32478 <sock_is_closed>
   327e4:	b108      	cbz	r0, 327ea <nrf_connect+0x42>
   327e6:	69a8      	ldr	r0, [r5, #24]
   327e8:	e7e7      	b.n	327ba <nrf_connect+0x12>
   327ea:	b90c      	cbnz	r4, 327f0 <nrf_connect+0x48>
   327ec:	200e      	movs	r0, #14
   327ee:	e7e4      	b.n	327ba <nrf_connect+0x12>
   327f0:	4631      	mov	r1, r6
   327f2:	4620      	mov	r0, r4
   327f4:	f7ff fecc 	bl	32590 <sock_sockaddr_len_is_valid>
   327f8:	b908      	cbnz	r0, 327fe <nrf_connect+0x56>
   327fa:	2016      	movs	r0, #22
   327fc:	e7dd      	b.n	327ba <nrf_connect+0x12>
   327fe:	4621      	mov	r1, r4
   32800:	4628      	mov	r0, r5
   32802:	f7ff fed9 	bl	325b8 <sock_sockaddr_fam_is_valid>
   32806:	b908      	cbnz	r0, 3280c <nrf_connect+0x64>
   32808:	206a      	movs	r0, #106	; 0x6a
   3280a:	e7d6      	b.n	327ba <nrf_connect+0x12>
   3280c:	4628      	mov	r0, r5
   3280e:	f7ff fe2b 	bl	32468 <sock_is_nonblock>
   32812:	b150      	cbz	r0, 3282a <nrf_connect+0x82>
   32814:	696e      	ldr	r6, [r5, #20]
   32816:	3e11      	subs	r6, #17
   32818:	bf18      	it	ne
   3281a:	2601      	movne	r6, #1
   3281c:	2000      	movs	r0, #0
   3281e:	f7ff fcb3 	bl	32188 <rpc_client_request_alloc>
   32822:	4602      	mov	r2, r0
   32824:	b918      	cbnz	r0, 3282e <nrf_connect+0x86>
   32826:	2069      	movs	r0, #105	; 0x69
   32828:	e7c7      	b.n	327ba <nrf_connect+0x12>
   3282a:	4606      	mov	r6, r0
   3282c:	e7f6      	b.n	3281c <nrf_connect+0x74>
   3282e:	2114      	movs	r1, #20
   32830:	2300      	movs	r3, #0
   32832:	7201      	strb	r1, [r0, #8]
   32834:	6861      	ldr	r1, [r4, #4]
   32836:	6107      	str	r7, [r0, #16]
   32838:	2901      	cmp	r1, #1
   3283a:	7243      	strb	r3, [r0, #9]
   3283c:	7283      	strb	r3, [r0, #10]
   3283e:	72c3      	strb	r3, [r0, #11]
   32840:	d00e      	beq.n	32860 <nrf_connect+0xb8>
   32842:	2902      	cmp	r1, #2
   32844:	d014      	beq.n	32870 <nrf_connect+0xc8>
   32846:	7f2b      	ldrb	r3, [r5, #28]
   32848:	f247 0102 	movw	r1, #28674	; 0x7002
   3284c:	f043 0304 	orr.w	r3, r3, #4
   32850:	772b      	strb	r3, [r5, #28]
   32852:	2004      	movs	r0, #4
   32854:	60d6      	str	r6, [r2, #12]
   32856:	f7ff fc9d 	bl	32194 <rpc_client_request_send>
   3285a:	b1ce      	cbz	r6, 32890 <nrf_connect+0xe8>
   3285c:	2077      	movs	r0, #119	; 0x77
   3285e:	e7ac      	b.n	327ba <nrf_connect+0x12>
   32860:	8921      	ldrh	r1, [r4, #8]
   32862:	75c3      	strb	r3, [r0, #23]
   32864:	8281      	strh	r1, [r0, #20]
   32866:	2104      	movs	r1, #4
   32868:	7581      	strb	r1, [r0, #22]
   3286a:	68e3      	ldr	r3, [r4, #12]
   3286c:	6183      	str	r3, [r0, #24]
   3286e:	e7ea      	b.n	32846 <nrf_connect+0x9e>
   32870:	8921      	ldrh	r1, [r4, #8]
   32872:	75c3      	strb	r3, [r0, #23]
   32874:	8281      	strh	r1, [r0, #20]
   32876:	2110      	movs	r1, #16
   32878:	1863      	adds	r3, r4, r1
   3287a:	7581      	strb	r1, [r0, #22]
   3287c:	3420      	adds	r4, #32
   3287e:	f100 0118 	add.w	r1, r0, #24
   32882:	f853 0b04 	ldr.w	r0, [r3], #4
   32886:	42a3      	cmp	r3, r4
   32888:	f841 0b04 	str.w	r0, [r1], #4
   3288c:	d1f9      	bne.n	32882 <nrf_connect+0xda>
   3288e:	e7da      	b.n	32846 <nrf_connect+0x9e>
   32890:	4628      	mov	r0, r5
   32892:	f7ff fe37 	bl	32504 <sock_sndtimeo_ms_get>
   32896:	9001      	str	r0, [sp, #4]
   32898:	4628      	mov	r0, r5
   3289a:	f7ff fdd9 	bl	32450 <sock_is_connecting>
   3289e:	b918      	cbnz	r0, 328a8 <nrf_connect+0x100>
   328a0:	69ac      	ldr	r4, [r5, #24]
   328a2:	b17c      	cbz	r4, 328c4 <nrf_connect+0x11c>
   328a4:	4620      	mov	r0, r4
   328a6:	e788      	b.n	327ba <nrf_connect+0x12>
   328a8:	2000      	movs	r0, #0
   328aa:	a901      	add	r1, sp, #4
   328ac:	f7f2 fec2 	bl	25634 <nrf_modem_os_timedwait>
   328b0:	f110 0f0b 	cmn.w	r0, #11
   328b4:	d004      	beq.n	328c0 <nrf_connect+0x118>
   328b6:	2800      	cmp	r0, #0
   328b8:	d0ee      	beq.n	32898 <nrf_connect+0xf0>
   328ba:	f001 f996 	bl	33bea <abs>
   328be:	e77c      	b.n	327ba <nrf_connect+0x12>
   328c0:	2074      	movs	r0, #116	; 0x74
   328c2:	e77a      	b.n	327ba <nrf_connect+0x12>
   328c4:	4628      	mov	r0, r5
   328c6:	f7ff fdb7 	bl	32438 <sock_proto_is_secure>
   328ca:	2800      	cmp	r0, #0
   328cc:	f43f af79 	beq.w	327c2 <nrf_connect+0x1a>
   328d0:	4628      	mov	r0, r5
   328d2:	9901      	ldr	r1, [sp, #4]
   328d4:	f7f8 faf6 	bl	2aec4 <tls_attach>
   328d8:	4604      	mov	r4, r0
   328da:	e772      	b.n	327c2 <nrf_connect+0x1a>

000328dc <nrf_bind>:
   328dc:	b538      	push	{r3, r4, r5, lr}
   328de:	4605      	mov	r5, r0
   328e0:	460c      	mov	r4, r1
   328e2:	f7f7 fd71 	bl	2a3c8 <sock_find>
   328e6:	b928      	cbnz	r0, 328f4 <nrf_bind+0x18>
   328e8:	2009      	movs	r0, #9
   328ea:	f7fe fed7 	bl	3169c <nrf_modem_os_errno_set>
   328ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   328f2:	e023      	b.n	3293c <nrf_bind+0x60>
   328f4:	b90c      	cbnz	r4, 328fa <nrf_bind+0x1e>
   328f6:	200e      	movs	r0, #14
   328f8:	e7f7      	b.n	328ea <nrf_bind+0xe>
   328fa:	4621      	mov	r1, r4
   328fc:	f7ff fe5c 	bl	325b8 <sock_sockaddr_fam_is_valid>
   32900:	b908      	cbnz	r0, 32906 <nrf_bind+0x2a>
   32902:	206a      	movs	r0, #106	; 0x6a
   32904:	e7f1      	b.n	328ea <nrf_bind+0xe>
   32906:	2000      	movs	r0, #0
   32908:	f7ff fc3e 	bl	32188 <rpc_client_request_alloc>
   3290c:	b908      	cbnz	r0, 32912 <nrf_bind+0x36>
   3290e:	2069      	movs	r0, #105	; 0x69
   32910:	e7eb      	b.n	328ea <nrf_bind+0xe>
   32912:	2214      	movs	r2, #20
   32914:	2300      	movs	r3, #0
   32916:	7202      	strb	r2, [r0, #8]
   32918:	6862      	ldr	r2, [r4, #4]
   3291a:	6105      	str	r5, [r0, #16]
   3291c:	2a01      	cmp	r2, #1
   3291e:	7243      	strb	r3, [r0, #9]
   32920:	7283      	strb	r3, [r0, #10]
   32922:	72c3      	strb	r3, [r0, #11]
   32924:	d00c      	beq.n	32940 <nrf_bind+0x64>
   32926:	2a02      	cmp	r2, #2
   32928:	d012      	beq.n	32950 <nrf_bind+0x74>
   3292a:	4601      	mov	r1, r0
   3292c:	2200      	movs	r2, #0
   3292e:	f247 0005 	movw	r0, #28677	; 0x7005
   32932:	f7f8 fb57 	bl	2afe4 <req_forward>
   32936:	4603      	mov	r3, r0
   32938:	2800      	cmp	r0, #0
   3293a:	d1d6      	bne.n	328ea <nrf_bind+0xe>
   3293c:	4618      	mov	r0, r3
   3293e:	bd38      	pop	{r3, r4, r5, pc}
   32940:	8922      	ldrh	r2, [r4, #8]
   32942:	75c3      	strb	r3, [r0, #23]
   32944:	8282      	strh	r2, [r0, #20]
   32946:	2204      	movs	r2, #4
   32948:	7582      	strb	r2, [r0, #22]
   3294a:	68e3      	ldr	r3, [r4, #12]
   3294c:	6183      	str	r3, [r0, #24]
   3294e:	e7ec      	b.n	3292a <nrf_bind+0x4e>
   32950:	8922      	ldrh	r2, [r4, #8]
   32952:	75c3      	strb	r3, [r0, #23]
   32954:	8282      	strh	r2, [r0, #20]
   32956:	2210      	movs	r2, #16
   32958:	18a3      	adds	r3, r4, r2
   3295a:	7582      	strb	r2, [r0, #22]
   3295c:	3420      	adds	r4, #32
   3295e:	f100 0218 	add.w	r2, r0, #24
   32962:	f853 1b04 	ldr.w	r1, [r3], #4
   32966:	42a3      	cmp	r3, r4
   32968:	f842 1b04 	str.w	r1, [r2], #4
   3296c:	d1f9      	bne.n	32962 <nrf_bind+0x86>
   3296e:	e7dc      	b.n	3292a <nrf_bind+0x4e>

00032970 <nrf_listen>:
   32970:	b538      	push	{r3, r4, r5, lr}
   32972:	4605      	mov	r5, r0
   32974:	460c      	mov	r4, r1
   32976:	f7f7 fd27 	bl	2a3c8 <sock_find>
   3297a:	b928      	cbnz	r0, 32988 <nrf_listen+0x18>
   3297c:	2009      	movs	r0, #9
   3297e:	f7fe fe8d 	bl	3169c <nrf_modem_os_errno_set>
   32982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   32986:	e01c      	b.n	329c2 <nrf_listen+0x52>
   32988:	f7ff fd47 	bl	3241a <sock_is_stream>
   3298c:	b908      	cbnz	r0, 32992 <nrf_listen+0x22>
   3298e:	205f      	movs	r0, #95	; 0x5f
   32990:	e7f5      	b.n	3297e <nrf_listen+0xe>
   32992:	2000      	movs	r0, #0
   32994:	f7ff fbf8 	bl	32188 <rpc_client_request_alloc>
   32998:	4601      	mov	r1, r0
   3299a:	b908      	cbnz	r0, 329a0 <nrf_listen+0x30>
   3299c:	2069      	movs	r0, #105	; 0x69
   3299e:	e7ee      	b.n	3297e <nrf_listen+0xe>
   329a0:	2200      	movs	r2, #0
   329a2:	2304      	movs	r3, #4
   329a4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   329a8:	7203      	strb	r3, [r0, #8]
   329aa:	6105      	str	r5, [r0, #16]
   329ac:	7242      	strb	r2, [r0, #9]
   329ae:	7282      	strb	r2, [r0, #10]
   329b0:	72c2      	strb	r2, [r0, #11]
   329b2:	6144      	str	r4, [r0, #20]
   329b4:	f247 0008 	movw	r0, #28680	; 0x7008
   329b8:	f7f8 fb14 	bl	2afe4 <req_forward>
   329bc:	4603      	mov	r3, r0
   329be:	2800      	cmp	r0, #0
   329c0:	d1dd      	bne.n	3297e <nrf_listen+0xe>
   329c2:	4618      	mov	r0, r3
   329c4:	bd38      	pop	{r3, r4, r5, pc}

000329c6 <nrf_accept>:
   329c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   329ca:	b08b      	sub	sp, #44	; 0x2c
   329cc:	4605      	mov	r5, r0
   329ce:	4689      	mov	r9, r1
   329d0:	4617      	mov	r7, r2
   329d2:	f7f7 fcf9 	bl	2a3c8 <sock_find>
   329d6:	4606      	mov	r6, r0
   329d8:	b938      	cbnz	r0, 329ea <nrf_accept+0x24>
   329da:	2009      	movs	r0, #9
   329dc:	f7fe fe5e 	bl	3169c <nrf_modem_os_errno_set>
   329e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   329e4:	b00b      	add	sp, #44	; 0x2c
   329e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   329ea:	f7ff fd16 	bl	3241a <sock_is_stream>
   329ee:	b908      	cbnz	r0, 329f4 <nrf_accept+0x2e>
   329f0:	205f      	movs	r0, #95	; 0x5f
   329f2:	e7f3      	b.n	329dc <nrf_accept+0x16>
   329f4:	4630      	mov	r0, r6
   329f6:	f7ff fd37 	bl	32468 <sock_is_nonblock>
   329fa:	b128      	cbz	r0, 32a08 <nrf_accept+0x42>
   329fc:	4630      	mov	r0, r6
   329fe:	f7ff fd4e 	bl	3249e <sock_can_accept>
   32a02:	b908      	cbnz	r0, 32a08 <nrf_accept+0x42>
   32a04:	200b      	movs	r0, #11
   32a06:	e7e9      	b.n	329dc <nrf_accept+0x16>
   32a08:	f7f7 fcba 	bl	2a380 <sock_open>
   32a0c:	4604      	mov	r4, r0
   32a0e:	b908      	cbnz	r0, 32a14 <nrf_accept+0x4e>
   32a10:	2017      	movs	r0, #23
   32a12:	e7e3      	b.n	329dc <nrf_accept+0x16>
   32a14:	7f33      	ldrb	r3, [r6, #28]
   32a16:	2000      	movs	r0, #0
   32a18:	f36f 1386 	bfc	r3, #6, #1
   32a1c:	7733      	strb	r3, [r6, #28]
   32a1e:	f7ff fbb3 	bl	32188 <rpc_client_request_alloc>
   32a22:	4601      	mov	r1, r0
   32a24:	b920      	cbnz	r0, 32a30 <nrf_accept+0x6a>
   32a26:	6820      	ldr	r0, [r4, #0]
   32a28:	f7f7 fce0 	bl	2a3ec <_sock_close>
   32a2c:	2069      	movs	r0, #105	; 0x69
   32a2e:	e7d5      	b.n	329dc <nrf_accept+0x16>
   32a30:	6105      	str	r5, [r0, #16]
   32a32:	466a      	mov	r2, sp
   32a34:	f247 000c 	movw	r0, #28684	; 0x700c
   32a38:	f7f8 fad4 	bl	2afe4 <req_forward>
   32a3c:	4680      	mov	r8, r0
   32a3e:	b120      	cbz	r0, 32a4a <nrf_accept+0x84>
   32a40:	6820      	ldr	r0, [r4, #0]
   32a42:	f7f7 fcd3 	bl	2a3ec <_sock_close>
   32a46:	4640      	mov	r0, r8
   32a48:	e7c8      	b.n	329dc <nrf_accept+0x16>
   32a4a:	9d00      	ldr	r5, [sp, #0]
   32a4c:	69ab      	ldr	r3, [r5, #24]
   32a4e:	6023      	str	r3, [r4, #0]
   32a50:	6933      	ldr	r3, [r6, #16]
   32a52:	6123      	str	r3, [r4, #16]
   32a54:	6973      	ldr	r3, [r6, #20]
   32a56:	6163      	str	r3, [r4, #20]
   32a58:	7f23      	ldrb	r3, [r4, #28]
   32a5a:	f043 0308 	orr.w	r3, r3, #8
   32a5e:	7723      	strb	r3, [r4, #28]
   32a60:	f1b9 0f00 	cmp.w	r9, #0
   32a64:	d005      	beq.n	32a72 <nrf_accept+0xac>
   32a66:	b127      	cbz	r7, 32a72 <nrf_accept+0xac>
   32a68:	8beb      	ldrh	r3, [r5, #30]
   32a6a:	2b04      	cmp	r3, #4
   32a6c:	d006      	beq.n	32a7c <nrf_accept+0xb6>
   32a6e:	2b10      	cmp	r3, #16
   32a70:	d01a      	beq.n	32aa8 <nrf_accept+0xe2>
   32a72:	4628      	mov	r0, r5
   32a74:	f7ff fb95 	bl	321a2 <rpc_client_message_free>
   32a78:	6820      	ldr	r0, [r4, #0]
   32a7a:	e7b3      	b.n	329e4 <nrf_accept+0x1e>
   32a7c:	2610      	movs	r6, #16
   32a7e:	2301      	movs	r3, #1
   32a80:	9001      	str	r0, [sp, #4]
   32a82:	9003      	str	r0, [sp, #12]
   32a84:	f88d 6004 	strb.w	r6, [sp, #4]
   32a88:	9302      	str	r3, [sp, #8]
   32a8a:	7f6a      	ldrb	r2, [r5, #29]
   32a8c:	7f2b      	ldrb	r3, [r5, #28]
   32a8e:	4648      	mov	r0, r9
   32a90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   32a94:	f8ad 300c 	strh.w	r3, [sp, #12]
   32a98:	6a2b      	ldr	r3, [r5, #32]
   32a9a:	683a      	ldr	r2, [r7, #0]
   32a9c:	a901      	add	r1, sp, #4
   32a9e:	9304      	str	r3, [sp, #16]
   32aa0:	f001 f8c5 	bl	33c2e <memcpy>
   32aa4:	603e      	str	r6, [r7, #0]
   32aa6:	e7e4      	b.n	32a72 <nrf_accept+0xac>
   32aa8:	2624      	movs	r6, #36	; 0x24
   32aaa:	4601      	mov	r1, r0
   32aac:	4632      	mov	r2, r6
   32aae:	a801      	add	r0, sp, #4
   32ab0:	f001 f8dd 	bl	33c6e <memset>
   32ab4:	2302      	movs	r3, #2
   32ab6:	f88d 6004 	strb.w	r6, [sp, #4]
   32aba:	9302      	str	r3, [sp, #8]
   32abc:	7f2b      	ldrb	r3, [r5, #28]
   32abe:	7f6a      	ldrb	r2, [r5, #29]
   32ac0:	ae05      	add	r6, sp, #20
   32ac2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   32ac6:	f8ad 300c 	strh.w	r3, [sp, #12]
   32aca:	f105 0c30 	add.w	ip, r5, #48	; 0x30
   32ace:	f105 0320 	add.w	r3, r5, #32
   32ad2:	4632      	mov	r2, r6
   32ad4:	6818      	ldr	r0, [r3, #0]
   32ad6:	6859      	ldr	r1, [r3, #4]
   32ad8:	3308      	adds	r3, #8
   32ada:	c203      	stmia	r2!, {r0, r1}
   32adc:	4563      	cmp	r3, ip
   32ade:	4616      	mov	r6, r2
   32ae0:	d1f7      	bne.n	32ad2 <nrf_accept+0x10c>
   32ae2:	4648      	mov	r0, r9
   32ae4:	683a      	ldr	r2, [r7, #0]
   32ae6:	a901      	add	r1, sp, #4
   32ae8:	f001 f8a1 	bl	33c2e <memcpy>
   32aec:	2324      	movs	r3, #36	; 0x24
   32aee:	603b      	str	r3, [r7, #0]
   32af0:	e7bf      	b.n	32a72 <nrf_accept+0xac>

00032af2 <nrf_recvfrom>:
   32af2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32af6:	b085      	sub	sp, #20
   32af8:	4690      	mov	r8, r2
   32afa:	e9dd a90e 	ldrd	sl, r9, [sp, #56]	; 0x38
   32afe:	461f      	mov	r7, r3
   32b00:	9101      	str	r1, [sp, #4]
   32b02:	f403 7b80 	and.w	fp, r3, #256	; 0x100
   32b06:	f7f7 fc5f 	bl	2a3c8 <sock_find>
   32b0a:	4604      	mov	r4, r0
   32b0c:	b940      	cbnz	r0, 32b20 <nrf_recvfrom+0x2e>
   32b0e:	2009      	movs	r0, #9
   32b10:	f7fe fdc4 	bl	3169c <nrf_modem_os_errno_set>
   32b14:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   32b18:	4630      	mov	r0, r6
   32b1a:	b005      	add	sp, #20
   32b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32b20:	f437 76a1 	bics.w	r6, r7, #322	; 0x142
   32b24:	d001      	beq.n	32b2a <nrf_recvfrom+0x38>
   32b26:	205f      	movs	r0, #95	; 0x5f
   32b28:	e7f2      	b.n	32b10 <nrf_recvfrom+0x1e>
   32b2a:	f1ba 0f00 	cmp.w	sl, #0
   32b2e:	d004      	beq.n	32b3a <nrf_recvfrom+0x48>
   32b30:	f1b9 0f00 	cmp.w	r9, #0
   32b34:	d104      	bne.n	32b40 <nrf_recvfrom+0x4e>
   32b36:	200e      	movs	r0, #14
   32b38:	e7ea      	b.n	32b10 <nrf_recvfrom+0x1e>
   32b3a:	f1b9 0f00 	cmp.w	r9, #0
   32b3e:	d1fa      	bne.n	32b36 <nrf_recvfrom+0x44>
   32b40:	4620      	mov	r0, r4
   32b42:	f7ff fc6a 	bl	3241a <sock_is_stream>
   32b46:	b128      	cbz	r0, 32b54 <nrf_recvfrom+0x62>
   32b48:	4620      	mov	r0, r4
   32b4a:	f7ff fc85 	bl	32458 <sock_is_connected>
   32b4e:	b908      	cbnz	r0, 32b54 <nrf_recvfrom+0x62>
   32b50:	2080      	movs	r0, #128	; 0x80
   32b52:	e7dd      	b.n	32b10 <nrf_recvfrom+0x1e>
   32b54:	f1bb 0f00 	cmp.w	fp, #0
   32b58:	d11b      	bne.n	32b92 <nrf_recvfrom+0xa0>
   32b5a:	4620      	mov	r0, r4
   32b5c:	f7ff fc84 	bl	32468 <sock_is_nonblock>
   32b60:	b9c8      	cbnz	r0, 32b96 <nrf_recvfrom+0xa4>
   32b62:	f3c7 1580 	ubfx	r5, r7, #6, #1
   32b66:	4620      	mov	r0, r4
   32b68:	f7ff fcba 	bl	324e0 <sock_rcvtimeo_ms_get>
   32b6c:	9003      	str	r0, [sp, #12]
   32b6e:	4620      	mov	r0, r4
   32b70:	f7ff fc82 	bl	32478 <sock_is_closed>
   32b74:	b918      	cbnz	r0, 32b7e <nrf_recvfrom+0x8c>
   32b76:	4620      	mov	r0, r4
   32b78:	f7ff fc2a 	bl	323d0 <sock_has_pkt>
   32b7c:	b168      	cbz	r0, 32b9a <nrf_recvfrom+0xa8>
   32b7e:	4620      	mov	r0, r4
   32b80:	f7ff fc26 	bl	323d0 <sock_has_pkt>
   32b84:	b9f0      	cbnz	r0, 32bc4 <nrf_recvfrom+0xd2>
   32b86:	4620      	mov	r0, r4
   32b88:	f7ff fc7a 	bl	32480 <sock_has_error>
   32b8c:	b180      	cbz	r0, 32bb0 <nrf_recvfrom+0xbe>
   32b8e:	69a0      	ldr	r0, [r4, #24]
   32b90:	e7be      	b.n	32b10 <nrf_recvfrom+0x1e>
   32b92:	2500      	movs	r5, #0
   32b94:	e7e7      	b.n	32b66 <nrf_recvfrom+0x74>
   32b96:	2501      	movs	r5, #1
   32b98:	e7e5      	b.n	32b66 <nrf_recvfrom+0x74>
   32b9a:	b10d      	cbz	r5, 32ba0 <nrf_recvfrom+0xae>
   32b9c:	200b      	movs	r0, #11
   32b9e:	e7b7      	b.n	32b10 <nrf_recvfrom+0x1e>
   32ba0:	a903      	add	r1, sp, #12
   32ba2:	f7f2 fd47 	bl	25634 <nrf_modem_os_timedwait>
   32ba6:	2800      	cmp	r0, #0
   32ba8:	d0e1      	beq.n	32b6e <nrf_recvfrom+0x7c>
   32baa:	f001 f81e 	bl	33bea <abs>
   32bae:	e7af      	b.n	32b10 <nrf_recvfrom+0x1e>
   32bb0:	4620      	mov	r0, r4
   32bb2:	f7ff fc32 	bl	3241a <sock_is_stream>
   32bb6:	2800      	cmp	r0, #0
   32bb8:	d1ae      	bne.n	32b18 <nrf_recvfrom+0x26>
   32bba:	4620      	mov	r0, r4
   32bbc:	f7ff fc32 	bl	32424 <sock_is_datagram>
   32bc0:	2800      	cmp	r0, #0
   32bc2:	d1a4      	bne.n	32b0e <nrf_recvfrom+0x1c>
   32bc4:	4620      	mov	r0, r4
   32bc6:	f7ff fc26 	bl	32416 <sock_pkt_peek_head>
   32bca:	4605      	mov	r5, r0
   32bcc:	f1ba 0f00 	cmp.w	sl, #0
   32bd0:	d00c      	beq.n	32bec <nrf_recvfrom+0xfa>
   32bd2:	68c1      	ldr	r1, [r0, #12]
   32bd4:	b381      	cbz	r1, 32c38 <nrf_recvfrom+0x146>
   32bd6:	780a      	ldrb	r2, [r1, #0]
   32bd8:	f8d9 3000 	ldr.w	r3, [r9]
   32bdc:	4650      	mov	r0, sl
   32bde:	429a      	cmp	r2, r3
   32be0:	bf28      	it	cs
   32be2:	461a      	movcs	r2, r3
   32be4:	f8c9 2000 	str.w	r2, [r9]
   32be8:	f001 f821 	bl	33c2e <memcpy>
   32bec:	f007 0902 	and.w	r9, r7, #2
   32bf0:	4628      	mov	r0, r5
   32bf2:	f7ff fcfe 	bl	325f2 <pkt_bytes_left>
   32bf6:	4540      	cmp	r0, r8
   32bf8:	d821      	bhi.n	32c3e <nrf_recvfrom+0x14c>
   32bfa:	4628      	mov	r0, r5
   32bfc:	f7ff fcf9 	bl	325f2 <pkt_bytes_left>
   32c00:	4607      	mov	r7, r0
   32c02:	2f00      	cmp	r7, #0
   32c04:	d088      	beq.n	32b18 <nrf_recvfrom+0x26>
   32c06:	9b01      	ldr	r3, [sp, #4]
   32c08:	4628      	mov	r0, r5
   32c0a:	eb03 0a06 	add.w	sl, r3, r6
   32c0e:	f7ff fcec 	bl	325ea <pkt_bytes_get>
   32c12:	463a      	mov	r2, r7
   32c14:	4601      	mov	r1, r0
   32c16:	4650      	mov	r0, sl
   32c18:	f001 f809 	bl	33c2e <memcpy>
   32c1c:	4620      	mov	r0, r4
   32c1e:	443e      	add	r6, r7
   32c20:	f7ff fc00 	bl	32424 <sock_is_datagram>
   32c24:	b168      	cbz	r0, 32c42 <nrf_recvfrom+0x150>
   32c26:	f1b9 0f00 	cmp.w	r9, #0
   32c2a:	f47f af75 	bne.w	32b18 <nrf_recvfrom+0x26>
   32c2e:	4629      	mov	r1, r5
   32c30:	4620      	mov	r0, r4
   32c32:	f7ff fbdc 	bl	323ee <sock_pkt_remove>
   32c36:	e76f      	b.n	32b18 <nrf_recvfrom+0x26>
   32c38:	f8c9 1000 	str.w	r1, [r9]
   32c3c:	e7d6      	b.n	32bec <nrf_recvfrom+0xfa>
   32c3e:	4647      	mov	r7, r8
   32c40:	e7df      	b.n	32c02 <nrf_recvfrom+0x110>
   32c42:	4620      	mov	r0, r4
   32c44:	f7ff fbf3 	bl	3242e <sock_is_raw>
   32c48:	2800      	cmp	r0, #0
   32c4a:	d1ec      	bne.n	32c26 <nrf_recvfrom+0x134>
   32c4c:	f1b9 0f00 	cmp.w	r9, #0
   32c50:	d10a      	bne.n	32c68 <nrf_recvfrom+0x176>
   32c52:	896b      	ldrh	r3, [r5, #10]
   32c54:	4628      	mov	r0, r5
   32c56:	443b      	add	r3, r7
   32c58:	816b      	strh	r3, [r5, #10]
   32c5a:	f7ff fcca 	bl	325f2 <pkt_bytes_left>
   32c5e:	b918      	cbnz	r0, 32c68 <nrf_recvfrom+0x176>
   32c60:	4629      	mov	r1, r5
   32c62:	4620      	mov	r0, r4
   32c64:	f7ff fbc3 	bl	323ee <sock_pkt_remove>
   32c68:	45b8      	cmp	r8, r7
   32c6a:	f43f af55 	beq.w	32b18 <nrf_recvfrom+0x26>
   32c6e:	f1bb 0f00 	cmp.w	fp, #0
   32c72:	d028      	beq.n	32cc6 <nrf_recvfrom+0x1d4>
   32c74:	f1b9 0f00 	cmp.w	r9, #0
   32c78:	d01c      	beq.n	32cb4 <nrf_recvfrom+0x1c2>
   32c7a:	4628      	mov	r0, r5
   32c7c:	f7ff fcac 	bl	325d8 <pkt_has_next>
   32c80:	b148      	cbz	r0, 32c96 <nrf_recvfrom+0x1a4>
   32c82:	4628      	mov	r0, r5
   32c84:	f7ff fcae 	bl	325e4 <pkt_peek_next>
   32c88:	4605      	mov	r5, r0
   32c8a:	2800      	cmp	r0, #0
   32c8c:	f43f af44 	beq.w	32b18 <nrf_recvfrom+0x26>
   32c90:	eba8 0807 	sub.w	r8, r8, r7
   32c94:	e7ac      	b.n	32bf0 <nrf_recvfrom+0xfe>
   32c96:	2000      	movs	r0, #0
   32c98:	a903      	add	r1, sp, #12
   32c9a:	f7f2 fccb 	bl	25634 <nrf_modem_os_timedwait>
   32c9e:	b118      	cbz	r0, 32ca8 <nrf_recvfrom+0x1b6>
   32ca0:	2e00      	cmp	r6, #0
   32ca2:	f47f af39 	bne.w	32b18 <nrf_recvfrom+0x26>
   32ca6:	e780      	b.n	32baa <nrf_recvfrom+0xb8>
   32ca8:	4620      	mov	r0, r4
   32caa:	f7ff fbe5 	bl	32478 <sock_is_closed>
   32cae:	2800      	cmp	r0, #0
   32cb0:	d0dd      	beq.n	32c6e <nrf_recvfrom+0x17c>
   32cb2:	e731      	b.n	32b18 <nrf_recvfrom+0x26>
   32cb4:	4620      	mov	r0, r4
   32cb6:	f7ff fb8b 	bl	323d0 <sock_has_pkt>
   32cba:	2800      	cmp	r0, #0
   32cbc:	d0eb      	beq.n	32c96 <nrf_recvfrom+0x1a4>
   32cbe:	4620      	mov	r0, r4
   32cc0:	f7ff fba9 	bl	32416 <sock_pkt_peek_head>
   32cc4:	e7e0      	b.n	32c88 <nrf_recvfrom+0x196>
   32cc6:	f1b9 0f00 	cmp.w	r9, #0
   32cca:	d1da      	bne.n	32c82 <nrf_recvfrom+0x190>
   32ccc:	e7f7      	b.n	32cbe <nrf_recvfrom+0x1cc>

00032cce <nrf_getsockopt>:
   32cce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   32cd2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   32cd4:	4681      	mov	r9, r0
   32cd6:	4688      	mov	r8, r1
   32cd8:	4614      	mov	r4, r2
   32cda:	461f      	mov	r7, r3
   32cdc:	f7f7 fb74 	bl	2a3c8 <sock_find>
   32ce0:	4606      	mov	r6, r0
   32ce2:	b928      	cbnz	r0, 32cf0 <nrf_getsockopt+0x22>
   32ce4:	2009      	movs	r0, #9
   32ce6:	f7fe fcd9 	bl	3169c <nrf_modem_os_errno_set>
   32cea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   32cee:	e05d      	b.n	32dac <nrf_getsockopt+0xde>
   32cf0:	b107      	cbz	r7, 32cf4 <nrf_getsockopt+0x26>
   32cf2:	b90d      	cbnz	r5, 32cf8 <nrf_getsockopt+0x2a>
   32cf4:	200e      	movs	r0, #14
   32cf6:	e7f6      	b.n	32ce6 <nrf_getsockopt+0x18>
   32cf8:	f5b8 7f8d 	cmp.w	r8, #282	; 0x11a
   32cfc:	d137      	bne.n	32d6e <nrf_getsockopt+0xa0>
   32cfe:	1e63      	subs	r3, r4, #1
   32d00:	2b0b      	cmp	r3, #11
   32d02:	d834      	bhi.n	32d6e <nrf_getsockopt+0xa0>
   32d04:	e8df f003 	tbb	[pc, r3]
   32d08:	33332517 	.word	0x33332517
   32d0c:	33330612 	.word	0x33330612
   32d10:	0d333333 	.word	0x0d333333
   32d14:	2304      	movs	r3, #4
   32d16:	602b      	str	r3, [r5, #0]
   32d18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   32d1c:	603b      	str	r3, [r7, #0]
   32d1e:	2400      	movs	r4, #0
   32d20:	e044      	b.n	32dac <nrf_getsockopt+0xde>
   32d22:	2304      	movs	r3, #4
   32d24:	602b      	str	r3, [r5, #0]
   32d26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
   32d2a:	e7f7      	b.n	32d1c <nrf_getsockopt+0x4e>
   32d2c:	2304      	movs	r3, #4
   32d2e:	602b      	str	r3, [r5, #0]
   32d30:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   32d34:	e7f2      	b.n	32d1c <nrf_getsockopt+0x4e>
   32d36:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   32d3a:	682b      	ldr	r3, [r5, #0]
   32d3c:	0092      	lsls	r2, r2, #2
   32d3e:	429a      	cmp	r2, r3
   32d40:	bf28      	it	cs
   32d42:	461a      	movcs	r2, r3
   32d44:	f100 0140 	add.w	r1, r0, #64	; 0x40
   32d48:	602a      	str	r2, [r5, #0]
   32d4a:	4638      	mov	r0, r7
   32d4c:	f000 ff6f 	bl	33c2e <memcpy>
   32d50:	e7e5      	b.n	32d1e <nrf_getsockopt+0x50>
   32d52:	6b80      	ldr	r0, [r0, #56]	; 0x38
   32d54:	f7ea f9a4 	bl	1d0a0 <strlen>
   32d58:	682a      	ldr	r2, [r5, #0]
   32d5a:	3001      	adds	r0, #1
   32d5c:	4290      	cmp	r0, r2
   32d5e:	d203      	bcs.n	32d68 <nrf_getsockopt+0x9a>
   32d60:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   32d62:	f7ea f99d 	bl	1d0a0 <strlen>
   32d66:	1c42      	adds	r2, r0, #1
   32d68:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   32d6a:	602a      	str	r2, [r5, #0]
   32d6c:	e7ed      	b.n	32d4a <nrf_getsockopt+0x7c>
   32d6e:	2c14      	cmp	r4, #20
   32d70:	d020      	beq.n	32db4 <nrf_getsockopt+0xe6>
   32d72:	dc07      	bgt.n	32d84 <nrf_getsockopt+0xb6>
   32d74:	2c04      	cmp	r4, #4
   32d76:	d014      	beq.n	32da2 <nrf_getsockopt+0xd4>
   32d78:	2c0e      	cmp	r4, #14
   32d7a:	d009      	beq.n	32d90 <nrf_getsockopt+0xc2>
   32d7c:	2c03      	cmp	r4, #3
   32d7e:	d007      	beq.n	32d90 <nrf_getsockopt+0xc2>
   32d80:	206d      	movs	r0, #109	; 0x6d
   32d82:	e7b0      	b.n	32ce6 <nrf_getsockopt+0x18>
   32d84:	2c15      	cmp	r4, #21
   32d86:	d01d      	beq.n	32dc4 <nrf_getsockopt+0xf6>
   32d88:	2c20      	cmp	r4, #32
   32d8a:	dc08      	bgt.n	32d9e <nrf_getsockopt+0xd0>
   32d8c:	2c1d      	cmp	r4, #29
   32d8e:	ddf7      	ble.n	32d80 <nrf_getsockopt+0xb2>
   32d90:	6828      	ldr	r0, [r5, #0]
   32d92:	f7ff f9f9 	bl	32188 <rpc_client_request_alloc>
   32d96:	4606      	mov	r6, r0
   32d98:	b9e0      	cbnz	r0, 32dd4 <nrf_getsockopt+0x106>
   32d9a:	2069      	movs	r0, #105	; 0x69
   32d9c:	e7a3      	b.n	32ce6 <nrf_getsockopt+0x18>
   32d9e:	2c37      	cmp	r4, #55	; 0x37
   32da0:	e7ed      	b.n	32d7e <nrf_getsockopt+0xb0>
   32da2:	602c      	str	r4, [r5, #0]
   32da4:	2400      	movs	r4, #0
   32da6:	69b3      	ldr	r3, [r6, #24]
   32da8:	61b4      	str	r4, [r6, #24]
   32daa:	603b      	str	r3, [r7, #0]
   32dac:	4620      	mov	r0, r4
   32dae:	b003      	add	sp, #12
   32db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   32db4:	682a      	ldr	r2, [r5, #0]
   32db6:	f106 0120 	add.w	r1, r6, #32
   32dba:	2a08      	cmp	r2, #8
   32dbc:	bf28      	it	cs
   32dbe:	2208      	movcs	r2, #8
   32dc0:	602a      	str	r2, [r5, #0]
   32dc2:	e7c2      	b.n	32d4a <nrf_getsockopt+0x7c>
   32dc4:	682a      	ldr	r2, [r5, #0]
   32dc6:	f106 0128 	add.w	r1, r6, #40	; 0x28
   32dca:	2a08      	cmp	r2, #8
   32dcc:	bf28      	it	cs
   32dce:	2208      	movcs	r2, #8
   32dd0:	602a      	str	r2, [r5, #0]
   32dd2:	e7ba      	b.n	32d4a <nrf_getsockopt+0x7c>
   32dd4:	2300      	movs	r3, #0
   32dd6:	2208      	movs	r2, #8
   32dd8:	7243      	strb	r3, [r0, #9]
   32dda:	7202      	strb	r2, [r0, #8]
   32ddc:	7283      	strb	r3, [r0, #10]
   32dde:	72c3      	strb	r3, [r0, #11]
   32de0:	f8c0 9010 	str.w	r9, [r0, #16]
   32de4:	4640      	mov	r0, r8
   32de6:	f000 f97b 	bl	330e0 <nrf_sol_to_rpc_sol>
   32dea:	6170      	str	r0, [r6, #20]
   32dec:	4620      	mov	r0, r4
   32dee:	f7f8 f8e1 	bl	2afb4 <nrf_so_to_rpc_so>
   32df2:	4631      	mov	r1, r6
   32df4:	61b0      	str	r0, [r6, #24]
   32df6:	aa01      	add	r2, sp, #4
   32df8:	f247 0004 	movw	r0, #28676	; 0x7004
   32dfc:	f8d6 9000 	ldr.w	r9, [r6]
   32e00:	f7f8 f8f0 	bl	2afe4 <req_forward>
   32e04:	4604      	mov	r4, r0
   32e06:	2800      	cmp	r0, #0
   32e08:	f47f af6d 	bne.w	32ce6 <nrf_getsockopt+0x18>
   32e0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
   32e10:	682b      	ldr	r3, [r5, #0]
   32e12:	f8d8 1000 	ldr.w	r1, [r8]
   32e16:	b181      	cbz	r1, 32e3a <nrf_getsockopt+0x16c>
   32e18:	f8d8 2004 	ldr.w	r2, [r8, #4]
   32e1c:	4638      	mov	r0, r7
   32e1e:	429a      	cmp	r2, r3
   32e20:	bf28      	it	cs
   32e22:	461a      	movcs	r2, r3
   32e24:	602a      	str	r2, [r5, #0]
   32e26:	f000 ff02 	bl	33c2e <memcpy>
   32e2a:	f8d8 0000 	ldr.w	r0, [r8]
   32e2e:	f7ff f9bb 	bl	321a8 <rpc_client_data_free>
   32e32:	9801      	ldr	r0, [sp, #4]
   32e34:	f7ff f9b5 	bl	321a2 <rpc_client_message_free>
   32e38:	e7b8      	b.n	32dac <nrf_getsockopt+0xde>
   32e3a:	6872      	ldr	r2, [r6, #4]
   32e3c:	4649      	mov	r1, r9
   32e3e:	429a      	cmp	r2, r3
   32e40:	bf28      	it	cs
   32e42:	461a      	movcs	r2, r3
   32e44:	4638      	mov	r0, r7
   32e46:	602a      	str	r2, [r5, #0]
   32e48:	f000 fef1 	bl	33c2e <memcpy>
   32e4c:	4648      	mov	r0, r9
   32e4e:	f7ff f984 	bl	3215a <rpc_transport_local_data_free>
   32e52:	e7ee      	b.n	32e32 <nrf_getsockopt+0x164>

00032e54 <tls_setopt_role>:
   32e54:	b508      	push	{r3, lr}
   32e56:	b109      	cbz	r1, 32e5c <tls_setopt_role+0x8>
   32e58:	2a04      	cmp	r2, #4
   32e5a:	d005      	beq.n	32e68 <tls_setopt_role+0x14>
   32e5c:	2016      	movs	r0, #22
   32e5e:	f7fe fc1d 	bl	3169c <nrf_modem_os_errno_set>
   32e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32e66:	e00a      	b.n	32e7e <tls_setopt_role+0x2a>
   32e68:	780b      	ldrb	r3, [r1, #0]
   32e6a:	b123      	cbz	r3, 32e76 <tls_setopt_role+0x22>
   32e6c:	2b01      	cmp	r3, #1
   32e6e:	d1f5      	bne.n	32e5c <tls_setopt_role+0x8>
   32e70:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
   32e74:	e002      	b.n	32e7c <tls_setopt_role+0x28>
   32e76:	2202      	movs	r2, #2
   32e78:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
   32e7c:	2000      	movs	r0, #0
   32e7e:	bd08      	pop	{r3, pc}

00032e80 <tls_setopt_taglist>:
   32e80:	b510      	push	{r4, lr}
   32e82:	f012 0403 	ands.w	r4, r2, #3
   32e86:	d100      	bne.n	32e8a <tls_setopt_taglist+0xa>
   32e88:	b92a      	cbnz	r2, 32e96 <tls_setopt_taglist+0x16>
   32e8a:	2016      	movs	r0, #22
   32e8c:	f7fe fc06 	bl	3169c <nrf_modem_os_errno_set>
   32e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32e94:	bd10      	pop	{r4, pc}
   32e96:	0893      	lsrs	r3, r2, #2
   32e98:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
   32e9c:	3040      	adds	r0, #64	; 0x40
   32e9e:	f000 fec6 	bl	33c2e <memcpy>
   32ea2:	4620      	mov	r0, r4
   32ea4:	e7f6      	b.n	32e94 <tls_setopt_taglist+0x14>

00032ea6 <tls_setopt_sess_cache>:
   32ea6:	b508      	push	{r3, lr}
   32ea8:	b109      	cbz	r1, 32eae <tls_setopt_sess_cache+0x8>
   32eaa:	2a04      	cmp	r2, #4
   32eac:	d005      	beq.n	32eba <tls_setopt_sess_cache+0x14>
   32eae:	2016      	movs	r0, #22
   32eb0:	f7fe fbf4 	bl	3169c <nrf_modem_os_errno_set>
   32eb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32eb8:	bd08      	pop	{r3, pc}
   32eba:	780b      	ldrb	r3, [r1, #0]
   32ebc:	3b00      	subs	r3, #0
   32ebe:	bf18      	it	ne
   32ec0:	2301      	movne	r3, #1
   32ec2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   32ec6:	2000      	movs	r0, #0
   32ec8:	e7f6      	b.n	32eb8 <tls_setopt_sess_cache+0x12>

00032eca <tls_setopt_peer_verify>:
   32eca:	b508      	push	{r3, lr}
   32ecc:	b109      	cbz	r1, 32ed2 <tls_setopt_peer_verify+0x8>
   32ece:	2a04      	cmp	r2, #4
   32ed0:	d005      	beq.n	32ede <tls_setopt_peer_verify+0x14>
   32ed2:	2016      	movs	r0, #22
   32ed4:	f7fe fbe2 	bl	3169c <nrf_modem_os_errno_set>
   32ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32edc:	bd08      	pop	{r3, pc}
   32ede:	680b      	ldr	r3, [r1, #0]
   32ee0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
   32ee4:	2000      	movs	r0, #0
   32ee6:	e7f9      	b.n	32edc <tls_setopt_peer_verify+0x12>

00032ee8 <tls_setopt_hostname>:
   32ee8:	b570      	push	{r4, r5, r6, lr}
   32eea:	4605      	mov	r5, r0
   32eec:	4614      	mov	r4, r2
   32eee:	460e      	mov	r6, r1
   32ef0:	b931      	cbnz	r1, 32f00 <tls_setopt_hostname+0x18>
   32ef2:	b13a      	cbz	r2, 32f04 <tls_setopt_hostname+0x1c>
   32ef4:	2016      	movs	r0, #22
   32ef6:	f7fe fbd1 	bl	3169c <nrf_modem_os_errno_set>
   32efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   32efe:	bd70      	pop	{r4, r5, r6, pc}
   32f00:	2a00      	cmp	r2, #0
   32f02:	d0f7      	beq.n	32ef4 <tls_setopt_hostname+0xc>
   32f04:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   32f06:	b108      	cbz	r0, 32f0c <tls_setopt_hostname+0x24>
   32f08:	f7f2 fca0 	bl	2584c <nrf_modem_os_free>
   32f0c:	b174      	cbz	r4, 32f2c <tls_setopt_hostname+0x44>
   32f0e:	1c60      	adds	r0, r4, #1
   32f10:	f7f2 fc94 	bl	2583c <nrf_modem_os_alloc>
   32f14:	63a8      	str	r0, [r5, #56]	; 0x38
   32f16:	b908      	cbnz	r0, 32f1c <tls_setopt_hostname+0x34>
   32f18:	2069      	movs	r0, #105	; 0x69
   32f1a:	e7ec      	b.n	32ef6 <tls_setopt_hostname+0xe>
   32f1c:	4622      	mov	r2, r4
   32f1e:	4631      	mov	r1, r6
   32f20:	f000 fe85 	bl	33c2e <memcpy>
   32f24:	2000      	movs	r0, #0
   32f26:	6bab      	ldr	r3, [r5, #56]	; 0x38
   32f28:	5518      	strb	r0, [r3, r4]
   32f2a:	e7e8      	b.n	32efe <tls_setopt_hostname+0x16>
   32f2c:	4620      	mov	r0, r4
   32f2e:	e7e6      	b.n	32efe <tls_setopt_hostname+0x16>

00032f30 <nrf_poll>:
   32f30:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   32f34:	4688      	mov	r8, r1
   32f36:	4607      	mov	r7, r0
   32f38:	9201      	str	r2, [sp, #4]
   32f3a:	b930      	cbnz	r0, 32f4a <nrf_poll+0x1a>
   32f3c:	b149      	cbz	r1, 32f52 <nrf_poll+0x22>
   32f3e:	200e      	movs	r0, #14
   32f40:	f7fe fbac 	bl	3169c <nrf_modem_os_errno_set>
   32f44:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   32f48:	e014      	b.n	32f74 <nrf_poll+0x44>
   32f4a:	2908      	cmp	r1, #8
   32f4c:	d901      	bls.n	32f52 <nrf_poll+0x22>
   32f4e:	2016      	movs	r0, #22
   32f50:	e7f6      	b.n	32f40 <nrf_poll+0x10>
   32f52:	f04f 0900 	mov.w	r9, #0
   32f56:	f04f 0a00 	mov.w	sl, #0
   32f5a:	463c      	mov	r4, r7
   32f5c:	4655      	mov	r5, sl
   32f5e:	45c2      	cmp	sl, r8
   32f60:	d10c      	bne.n	32f7c <nrf_poll+0x4c>
   32f62:	b93d      	cbnz	r5, 32f74 <nrf_poll+0x44>
   32f64:	4628      	mov	r0, r5
   32f66:	a901      	add	r1, sp, #4
   32f68:	f7f2 fb64 	bl	25634 <nrf_modem_os_timedwait>
   32f6c:	2800      	cmp	r0, #0
   32f6e:	d0f2      	beq.n	32f56 <nrf_poll+0x26>
   32f70:	306e      	adds	r0, #110	; 0x6e
   32f72:	d06f      	beq.n	33054 <nrf_poll+0x124>
   32f74:	4628      	mov	r0, r5
   32f76:	b002      	add	sp, #8
   32f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   32f7c:	6820      	ldr	r0, [r4, #0]
   32f7e:	f8a4 9006 	strh.w	r9, [r4, #6]
   32f82:	2800      	cmp	r0, #0
   32f84:	db4e      	blt.n	33024 <nrf_poll+0xf4>
   32f86:	f7f7 fa1f 	bl	2a3c8 <sock_find>
   32f8a:	4606      	mov	r6, r0
   32f8c:	b928      	cbnz	r0, 32f9a <nrf_poll+0x6a>
   32f8e:	88e3      	ldrh	r3, [r4, #6]
   32f90:	f043 0320 	orr.w	r3, r3, #32
   32f94:	80e3      	strh	r3, [r4, #6]
   32f96:	3501      	adds	r5, #1
   32f98:	e044      	b.n	33024 <nrf_poll+0xf4>
   32f9a:	f7ff fa69 	bl	32470 <sock_is_local_closed>
   32f9e:	2800      	cmp	r0, #0
   32fa0:	d1f5      	bne.n	32f8e <nrf_poll+0x5e>
   32fa2:	4630      	mov	r0, r6
   32fa4:	f7ff fa6c 	bl	32480 <sock_has_error>
   32fa8:	b348      	cbz	r0, 32ffe <nrf_poll+0xce>
   32faa:	88e3      	ldrh	r3, [r4, #6]
   32fac:	f043 0308 	orr.w	r3, r3, #8
   32fb0:	80e3      	strh	r3, [r4, #6]
   32fb2:	88a3      	ldrh	r3, [r4, #4]
   32fb4:	07da      	lsls	r2, r3, #31
   32fb6:	d517      	bpl.n	32fe8 <nrf_poll+0xb8>
   32fb8:	4630      	mov	r0, r6
   32fba:	f7ff fa6b 	bl	32494 <sock_can_read>
   32fbe:	b338      	cbz	r0, 33010 <nrf_poll+0xe0>
   32fc0:	88e3      	ldrh	r3, [r4, #6]
   32fc2:	f043 0301 	orr.w	r3, r3, #1
   32fc6:	80e3      	strh	r3, [r4, #6]
   32fc8:	4630      	mov	r0, r6
   32fca:	f7ff fa26 	bl	3241a <sock_is_stream>
   32fce:	b158      	cbz	r0, 32fe8 <nrf_poll+0xb8>
   32fd0:	4630      	mov	r0, r6
   32fd2:	f7ff fa51 	bl	32478 <sock_is_closed>
   32fd6:	b138      	cbz	r0, 32fe8 <nrf_poll+0xb8>
   32fd8:	4630      	mov	r0, r6
   32fda:	f7ff fa51 	bl	32480 <sock_has_error>
   32fde:	b918      	cbnz	r0, 32fe8 <nrf_poll+0xb8>
   32fe0:	88e3      	ldrh	r3, [r4, #6]
   32fe2:	f043 0301 	orr.w	r3, r3, #1
   32fe6:	80e3      	strh	r3, [r4, #6]
   32fe8:	88a3      	ldrh	r3, [r4, #4]
   32fea:	075b      	lsls	r3, r3, #29
   32fec:	d516      	bpl.n	3301c <nrf_poll+0xec>
   32fee:	4630      	mov	r0, r6
   32ff0:	f7ff fa59 	bl	324a6 <sock_can_send>
   32ff4:	b190      	cbz	r0, 3301c <nrf_poll+0xec>
   32ff6:	88e3      	ldrh	r3, [r4, #6]
   32ff8:	f043 0304 	orr.w	r3, r3, #4
   32ffc:	e7ca      	b.n	32f94 <nrf_poll+0x64>
   32ffe:	4630      	mov	r0, r6
   33000:	f7ff fa3a 	bl	32478 <sock_is_closed>
   33004:	2800      	cmp	r0, #0
   33006:	d0d4      	beq.n	32fb2 <nrf_poll+0x82>
   33008:	88e3      	ldrh	r3, [r4, #6]
   3300a:	f043 0310 	orr.w	r3, r3, #16
   3300e:	e7cf      	b.n	32fb0 <nrf_poll+0x80>
   33010:	4630      	mov	r0, r6
   33012:	f7ff fa44 	bl	3249e <sock_can_accept>
   33016:	2800      	cmp	r0, #0
   33018:	d1d2      	bne.n	32fc0 <nrf_poll+0x90>
   3301a:	e7d5      	b.n	32fc8 <nrf_poll+0x98>
   3301c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   33020:	2b00      	cmp	r3, #0
   33022:	d1b8      	bne.n	32f96 <nrf_poll+0x66>
   33024:	f10a 0a01 	add.w	sl, sl, #1
   33028:	3408      	adds	r4, #8
   3302a:	e798      	b.n	32f5e <nrf_poll+0x2e>
   3302c:	f857 0034 	ldr.w	r0, [r7, r4, lsl #3]
   33030:	2800      	cmp	r0, #0
   33032:	db08      	blt.n	33046 <nrf_poll+0x116>
   33034:	88fb      	ldrh	r3, [r7, #6]
   33036:	3501      	adds	r5, #1
   33038:	f043 0308 	orr.w	r3, r3, #8
   3303c:	80fb      	strh	r3, [r7, #6]
   3303e:	f7f7 f9c3 	bl	2a3c8 <sock_find>
   33042:	b100      	cbz	r0, 33046 <nrf_poll+0x116>
   33044:	6186      	str	r6, [r0, #24]
   33046:	3401      	adds	r4, #1
   33048:	4544      	cmp	r4, r8
   3304a:	d1ef      	bne.n	3302c <nrf_poll+0xfc>
   3304c:	2d00      	cmp	r5, #0
   3304e:	d191      	bne.n	32f74 <nrf_poll+0x44>
   33050:	2004      	movs	r0, #4
   33052:	e775      	b.n	32f40 <nrf_poll+0x10>
   33054:	462c      	mov	r4, r5
   33056:	266e      	movs	r6, #110	; 0x6e
   33058:	e7f6      	b.n	33048 <nrf_poll+0x118>

0003305a <nrf_fcntl>:
   3305a:	b538      	push	{r3, r4, r5, lr}
   3305c:	460d      	mov	r5, r1
   3305e:	4614      	mov	r4, r2
   33060:	f7f7 f9b2 	bl	2a3c8 <sock_find>
   33064:	b928      	cbnz	r0, 33072 <nrf_fcntl+0x18>
   33066:	2009      	movs	r0, #9
   33068:	f7fe fb18 	bl	3169c <nrf_modem_os_errno_set>
   3306c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   33070:	e006      	b.n	33080 <nrf_fcntl+0x26>
   33072:	2d03      	cmp	r5, #3
   33074:	d003      	beq.n	3307e <nrf_fcntl+0x24>
   33076:	2d04      	cmp	r5, #4
   33078:	d004      	beq.n	33084 <nrf_fcntl+0x2a>
   3307a:	2016      	movs	r0, #22
   3307c:	e7f4      	b.n	33068 <nrf_fcntl+0xe>
   3307e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   33080:	4618      	mov	r0, r3
   33082:	bd38      	pop	{r3, r4, r5, pc}
   33084:	f034 0301 	bics.w	r3, r4, #1
   33088:	d1f7      	bne.n	3307a <nrf_fcntl+0x20>
   3308a:	6344      	str	r4, [r0, #52]	; 0x34
   3308c:	e7f8      	b.n	33080 <nrf_fcntl+0x26>

0003308e <rpc_af_to_nrf_af>:
   3308e:	1f43      	subs	r3, r0, #5
   33090:	2b00      	cmp	r3, #0
   33092:	d803      	bhi.n	3309c <rpc_af_to_nrf_af+0xe>
   33094:	e8df f003 	tbb	[pc, r3]
   33098:	01          	.byte	0x01
   33099:	00          	.byte	0x00
   3309a:	2003      	movs	r0, #3
   3309c:	4770      	bx	lr

0003309e <nrf_type_to_rpc_type>:
   3309e:	4770      	bx	lr

000330a0 <nrf_proto_to_rpc_proto>:
   330a0:	2829      	cmp	r0, #41	; 0x29
   330a2:	d015      	beq.n	330d0 <nrf_proto_to_rpc_proto+0x30>
   330a4:	dc05      	bgt.n	330b2 <nrf_proto_to_rpc_proto+0x12>
   330a6:	2806      	cmp	r0, #6
   330a8:	d014      	beq.n	330d4 <nrf_proto_to_rpc_proto+0x34>
   330aa:	2811      	cmp	r0, #17
   330ac:	d014      	beq.n	330d8 <nrf_proto_to_rpc_proto+0x38>
   330ae:	b148      	cbz	r0, 330c4 <nrf_proto_to_rpc_proto+0x24>
   330b0:	4770      	bx	lr
   330b2:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   330b6:	d00d      	beq.n	330d4 <nrf_proto_to_rpc_proto+0x34>
   330b8:	f240 1311 	movw	r3, #273	; 0x111
   330bc:	4298      	cmp	r0, r3
   330be:	d00b      	beq.n	330d8 <nrf_proto_to_rpc_proto+0x38>
   330c0:	28ff      	cmp	r0, #255	; 0xff
   330c2:	d10c      	bne.n	330de <nrf_proto_to_rpc_proto+0x3e>
   330c4:	2901      	cmp	r1, #1
   330c6:	d009      	beq.n	330dc <nrf_proto_to_rpc_proto+0x3c>
   330c8:	2902      	cmp	r1, #2
   330ca:	bf08      	it	eq
   330cc:	2002      	moveq	r0, #2
   330ce:	4770      	bx	lr
   330d0:	2006      	movs	r0, #6
   330d2:	4770      	bx	lr
   330d4:	2001      	movs	r0, #1
   330d6:	4770      	bx	lr
   330d8:	2002      	movs	r0, #2
   330da:	4770      	bx	lr
   330dc:	4608      	mov	r0, r1
   330de:	4770      	bx	lr

000330e0 <nrf_sol_to_rpc_sol>:
   330e0:	2829      	cmp	r0, #41	; 0x29
   330e2:	d013      	beq.n	3310c <nrf_sol_to_rpc_sol+0x2c>
   330e4:	dc09      	bgt.n	330fa <nrf_sol_to_rpc_sol+0x1a>
   330e6:	2801      	cmp	r0, #1
   330e8:	d012      	beq.n	33110 <nrf_sol_to_rpc_sol+0x30>
   330ea:	2806      	cmp	r0, #6
   330ec:	d012      	beq.n	33114 <nrf_sol_to_rpc_sol+0x34>
   330ee:	2800      	cmp	r0, #0
   330f0:	bf14      	ite	ne
   330f2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   330f6:	2004      	moveq	r0, #4
   330f8:	4770      	bx	lr
   330fa:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   330fe:	d00b      	beq.n	33118 <nrf_sol_to_rpc_sol+0x38>
   33100:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   33104:	bf18      	it	ne
   33106:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   3310a:	4770      	bx	lr
   3310c:	2006      	movs	r0, #6
   3310e:	4770      	bx	lr
   33110:	2008      	movs	r0, #8
   33112:	4770      	bx	lr
   33114:	2001      	movs	r0, #1
   33116:	4770      	bx	lr
   33118:	f44f 7080 	mov.w	r0, #256	; 0x100
   3311c:	4770      	bx	lr

0003311e <rpc_error_to_nrf_gai_errno>:
   3311e:	b508      	push	{r3, lr}
   33120:	1f03      	subs	r3, r0, #4
   33122:	2b09      	cmp	r3, #9
   33124:	d80f      	bhi.n	33146 <rpc_error_to_nrf_gai_errno+0x28>
   33126:	e8df f003 	tbb	[pc, r3]
   3312a:	0508      	.short	0x0508
   3312c:	0e0e0e11 	.word	0x0e0e0e11
   33130:	110e0e0e 	.word	0x110e0e0e
   33134:	f06f 0063 	mvn.w	r0, #99	; 0x63
   33138:	bd08      	pop	{r3, pc}
   3313a:	2073      	movs	r0, #115	; 0x73
   3313c:	f7fe faae 	bl	3169c <nrf_modem_os_errno_set>
   33140:	f06f 000a 	mvn.w	r0, #10
   33144:	e7f8      	b.n	33138 <rpc_error_to_nrf_gai_errno+0x1a>
   33146:	f7f7 ff41 	bl	2afcc <rpc_error_to_nrf_errno>
   3314a:	e7f7      	b.n	3313c <rpc_error_to_nrf_gai_errno+0x1e>
   3314c:	f06f 0001 	mvn.w	r0, #1
   33150:	e7f2      	b.n	33138 <rpc_error_to_nrf_gai_errno+0x1a>

00033152 <res_forward>:
   33152:	68c3      	ldr	r3, [r0, #12]
   33154:	b113      	cbz	r3, 3315c <res_forward+0xa>
   33156:	6018      	str	r0, [r3, #0]
   33158:	2001      	movs	r0, #1
   3315a:	4770      	bx	lr
   3315c:	4618      	mov	r0, r3
   3315e:	4770      	bx	lr

00033160 <gnss_msg_alloc_and_set_common>:
   33160:	b538      	push	{r3, r4, r5, lr}
   33162:	4605      	mov	r5, r0
   33164:	f7ff f810 	bl	32188 <rpc_client_request_alloc>
   33168:	4604      	mov	r4, r0
   3316a:	b190      	cbz	r0, 33192 <gnss_msg_alloc_and_set_common+0x32>
   3316c:	6842      	ldr	r2, [r0, #4]
   3316e:	2100      	movs	r1, #0
   33170:	6800      	ldr	r0, [r0, #0]
   33172:	f000 fd7c 	bl	33c6e <memset>
   33176:	2300      	movs	r3, #0
   33178:	7223      	strb	r3, [r4, #8]
   3317a:	7263      	strb	r3, [r4, #9]
   3317c:	72a3      	strb	r3, [r4, #10]
   3317e:	72e3      	strb	r3, [r4, #11]
   33180:	2343      	movs	r3, #67	; 0x43
   33182:	7323      	strb	r3, [r4, #12]
   33184:	2354      	movs	r3, #84	; 0x54
   33186:	7363      	strb	r3, [r4, #13]
   33188:	2376      	movs	r3, #118	; 0x76
   3318a:	73a3      	strb	r3, [r4, #14]
   3318c:	2349      	movs	r3, #73	; 0x49
   3318e:	6065      	str	r5, [r4, #4]
   33190:	73e3      	strb	r3, [r4, #15]
   33192:	4620      	mov	r0, r4
   33194:	bd38      	pop	{r3, r4, r5, pc}

00033196 <nrf_modem_gnss_agps_write>:
   33196:	b570      	push	{r4, r5, r6, lr}
   33198:	4616      	mov	r6, r2
   3319a:	4604      	mov	r4, r0
   3319c:	2800      	cmp	r0, #0
   3319e:	d041      	beq.n	33224 <nrf_modem_gnss_agps_write+0x8e>
   331a0:	2900      	cmp	r1, #0
   331a2:	d03f      	beq.n	33224 <nrf_modem_gnss_agps_write+0x8e>
   331a4:	2072      	movs	r0, #114	; 0x72
   331a6:	f7ff ffdb 	bl	33160 <gnss_msg_alloc_and_set_common>
   331aa:	4605      	mov	r5, r0
   331ac:	2800      	cmp	r0, #0
   331ae:	d03c      	beq.n	3322a <nrf_modem_gnss_agps_write+0x94>
   331b0:	1e72      	subs	r2, r6, #1
   331b2:	6801      	ldr	r1, [r0, #0]
   331b4:	2a07      	cmp	r2, #7
   331b6:	d833      	bhi.n	33220 <nrf_modem_gnss_agps_write+0x8a>
   331b8:	e8df f002 	tbb	[pc, r2]
   331bc:	19140f04 	.word	0x19140f04
   331c0:	2d28231e 	.word	0x2d28231e
   331c4:	4620      	mov	r0, r4
   331c6:	3104      	adds	r1, #4
   331c8:	f7fe fff0 	bl	321ac <rpc_gnss_serialize_utc>
   331cc:	4629      	mov	r1, r5
   331ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   331d2:	f241 0005 	movw	r0, #4101	; 0x1005
   331d6:	f7f8 b947 	b.w	2b468 <send_message>
   331da:	4620      	mov	r0, r4
   331dc:	3104      	adds	r1, #4
   331de:	f7ff f802 	bl	321e6 <rpc_gnss_serialize_ephe>
   331e2:	e7f3      	b.n	331cc <nrf_modem_gnss_agps_write+0x36>
   331e4:	4620      	mov	r0, r4
   331e6:	3104      	adds	r1, #4
   331e8:	f7ff f847 	bl	3227a <rpc_gnss_serialize_alm>
   331ec:	e7ee      	b.n	331cc <nrf_modem_gnss_agps_write+0x36>
   331ee:	4620      	mov	r0, r4
   331f0:	3104      	adds	r1, #4
   331f2:	f7ff f86f 	bl	322d4 <rpc_gnss_serialize_klob>
   331f6:	e7e9      	b.n	331cc <nrf_modem_gnss_agps_write+0x36>
   331f8:	4620      	mov	r0, r4
   331fa:	3104      	adds	r1, #4
   331fc:	f7ff f885 	bl	3230a <rpc_gnss_serialize_nequick>
   33200:	e7e4      	b.n	331cc <nrf_modem_gnss_agps_write+0x36>
   33202:	4620      	mov	r0, r4
   33204:	3104      	adds	r1, #4
   33206:	f7ff f895 	bl	32334 <rpc_gnss_serialize_time_and_sv_tow>
   3320a:	e7df      	b.n	331cc <nrf_modem_gnss_agps_write+0x36>
   3320c:	4620      	mov	r0, r4
   3320e:	3104      	adds	r1, #4
   33210:	f7ff f8b3 	bl	3237a <rpc_gnss_serialize_location>
   33214:	e7da      	b.n	331cc <nrf_modem_gnss_agps_write+0x36>
   33216:	4620      	mov	r0, r4
   33218:	3104      	adds	r1, #4
   3321a:	f7ff f8cb 	bl	323b4 <rpc_gnss_serialize_integrity>
   3321e:	e7d5      	b.n	331cc <nrf_modem_gnss_agps_write+0x36>
   33220:	f7fe ffbf 	bl	321a2 <rpc_client_message_free>
   33224:	f06f 0015 	mvn.w	r0, #21
   33228:	bd70      	pop	{r4, r5, r6, pc}
   3322a:	f06f 000b 	mvn.w	r0, #11
   3322e:	e7fb      	b.n	33228 <nrf_modem_gnss_agps_write+0x92>

00033230 <nrf_modem_is_initialized>:
   33230:	f7f8 bde6 	b.w	2be00 <nrf_modem_state_is_initialized>

00033234 <z_device_state_init>:
}
   33234:	4770      	bx	lr

00033236 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   33236:	b138      	cbz	r0, 33248 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   33238:	68c3      	ldr	r3, [r0, #12]
   3323a:	8818      	ldrh	r0, [r3, #0]
   3323c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   33240:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   33244:	4258      	negs	r0, r3
   33246:	4158      	adcs	r0, r3
}
   33248:	4770      	bx	lr

0003324a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   3324a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   3324c:	ab0b      	add	r3, sp, #44	; 0x2c
   3324e:	9305      	str	r3, [sp, #20]
   33250:	9303      	str	r3, [sp, #12]
   33252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   33254:	2201      	movs	r2, #1
   33256:	9302      	str	r3, [sp, #8]
   33258:	2300      	movs	r3, #0
   3325a:	4618      	mov	r0, r3
   3325c:	e9cd 3300 	strd	r3, r3, [sp]
   33260:	f7ed fb14 	bl	2088c <z_impl_z_log_msg_runtime_vcreate>
}
   33264:	b007      	add	sp, #28
   33266:	f85d fb04 	ldr.w	pc, [sp], #4

0003326a <z_early_memset>:
   3326a:	f000 bd00 	b.w	33c6e <memset>

0003326e <z_early_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3326e:	f000 bcde 	b.w	33c2e <memcpy>

00033272 <k_heap_init>:
{
   33272:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   33274:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   33278:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   3327c:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   33280:	f7fc bd3f 	b.w	2fd02 <sys_heap_init>

00033284 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   33284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33288:	b085      	sub	sp, #20
   3328a:	4606      	mov	r6, r0
   3328c:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   3328e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   33292:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   33294:	f000 fb01 	bl	3389a <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   33298:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   3329c:	4605      	mov	r5, r0
   3329e:	460f      	mov	r7, r1
	__asm__ volatile(
   332a0:	f04f 0320 	mov.w	r3, #32
   332a4:	f3ef 8411 	mrs	r4, BASEPRI
   332a8:	f383 8812 	msr	BASEPRI_MAX, r3
   332ac:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   332b0:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   332b4:	464a      	mov	r2, r9
   332b6:	4641      	mov	r1, r8
   332b8:	4630      	mov	r0, r6
   332ba:	f7fc fcb9 	bl	2fc30 <sys_heap_aligned_alloc>
   332be:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   332c0:	f7f9 ff32 	bl	2d128 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   332c4:	9b03      	ldr	r3, [sp, #12]
   332c6:	b13b      	cbz	r3, 332d8 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   332c8:	f384 8811 	msr	BASEPRI, r4
   332cc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   332d0:	4618      	mov	r0, r3
   332d2:	b005      	add	sp, #20
   332d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   332d8:	1a28      	subs	r0, r5, r0
   332da:	eb67 0101 	sbc.w	r1, r7, r1
   332de:	2801      	cmp	r0, #1
   332e0:	f171 0200 	sbcs.w	r2, r1, #0
   332e4:	dbf0      	blt.n	332c8 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   332e6:	e9cd 0100 	strd	r0, r1, [sp]
   332ea:	465a      	mov	r2, fp
   332ec:	4621      	mov	r1, r4
   332ee:	4650      	mov	r0, sl
   332f0:	f7f9 fc12 	bl	2cb18 <z_pend_curr>
	__asm__ volatile(
   332f4:	f04f 0320 	mov.w	r3, #32
   332f8:	f3ef 8411 	mrs	r4, BASEPRI
   332fc:	f383 8812 	msr	BASEPRI_MAX, r3
   33300:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   33304:	e7d6      	b.n	332b4 <k_heap_aligned_alloc+0x30>

00033306 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   33306:	b507      	push	{r0, r1, r2, lr}
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   33308:	e9cd 2300 	strd	r2, r3, [sp]
   3330c:	460a      	mov	r2, r1
   3330e:	2104      	movs	r1, #4
   33310:	f7ff ffb8 	bl	33284 <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   33314:	b003      	add	sp, #12
   33316:	f85d fb04 	ldr.w	pc, [sp], #4

0003331a <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   3331a:	b538      	push	{r3, r4, r5, lr}
   3331c:	4604      	mov	r4, r0
   3331e:	f04f 0320 	mov.w	r3, #32
   33322:	f3ef 8511 	mrs	r5, BASEPRI
   33326:	f383 8812 	msr	BASEPRI_MAX, r3
   3332a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   3332e:	f7fc fc45 	bl	2fbbc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   33332:	f104 000c 	add.w	r0, r4, #12
   33336:	f000 fa38 	bl	337aa <z_unpend_all>
   3333a:	b130      	cbz	r0, 3334a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   3333c:	4629      	mov	r1, r5
   3333e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   33342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   33346:	f7f9 ba93 	b.w	2c870 <z_reschedule>
	__asm__ volatile(
   3334a:	f385 8811 	msr	BASEPRI, r5
   3334e:	f3bf 8f6f 	isb	sy
}
   33352:	bd38      	pop	{r3, r4, r5, pc}

00033354 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   33354:	f3ef 8005 	mrs	r0, IPSR
}
   33358:	3800      	subs	r0, #0
   3335a:	bf18      	it	ne
   3335c:	2001      	movne	r0, #1
   3335e:	4770      	bx	lr

00033360 <z_impl_k_thread_name_set>:
}
   33360:	f06f 0057 	mvn.w	r0, #87	; 0x57
   33364:	4770      	bx	lr

00033366 <k_thread_name_get>:
}
   33366:	2000      	movs	r0, #0
   33368:	4770      	bx	lr

0003336a <z_impl_k_thread_start>:
	z_sched_start(thread);
   3336a:	f7f9 bb79 	b.w	2ca60 <z_sched_start>

0003336e <z_pm_save_idle_exit>:
{
   3336e:	b508      	push	{r3, lr}
	pm_system_resume();
   33370:	f7ee fa22 	bl	217b8 <pm_system_resume>
}
   33374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   33378:	f7fe b971 	b.w	3165e <sys_clock_idle_exit>

0003337c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   3337c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   33380:	428b      	cmp	r3, r1
   33382:	d001      	beq.n	33388 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   33384:	f7f9 bbdc 	b.w	2cb40 <z_set_prio>
}
   33388:	2000      	movs	r0, #0
   3338a:	4770      	bx	lr

0003338c <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   3338c:	2300      	movs	r3, #0
   3338e:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   33392:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   33396:	4618      	mov	r0, r3
   33398:	4770      	bx	lr

0003339a <queue_insert>:
{
   3339a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3339e:	4699      	mov	r9, r3
   333a0:	4604      	mov	r4, r0
   333a2:	460d      	mov	r5, r1
   333a4:	4690      	mov	r8, r2
   333a6:	f89d 3020 	ldrb.w	r3, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   333aa:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   333ae:	f04f 0220 	mov.w	r2, #32
   333b2:	f3ef 8711 	mrs	r7, BASEPRI
   333b6:	f382 8812 	msr	BASEPRI_MAX, r2
   333ba:	f3bf 8f6f 	isb	sy
	if (is_append) {
   333be:	b103      	cbz	r3, 333c2 <queue_insert+0x28>
	return list->tail;
   333c0:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   333c2:	4630      	mov	r0, r6
   333c4:	f000 f9d9 	bl	3377a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   333c8:	b158      	cbz	r0, 333e2 <queue_insert+0x48>
   333ca:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   333cc:	f8c0 8014 	str.w	r8, [r0, #20]
   333d0:	67c4      	str	r4, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   333d2:	f000 f976 	bl	336c2 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   333d6:	4630      	mov	r0, r6
   333d8:	4639      	mov	r1, r7
   333da:	f7f9 fa49 	bl	2c870 <z_reschedule>
	return 0;
   333de:	2000      	movs	r0, #0
   333e0:	e00c      	b.n	333fc <queue_insert+0x62>
	if (alloc) {
   333e2:	f1b9 0f00 	cmp.w	r9, #0
   333e6:	d01b      	beq.n	33420 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   333e8:	2108      	movs	r1, #8
   333ea:	f7f9 ff49 	bl	2d280 <z_thread_aligned_alloc>
		if (anode == NULL) {
   333ee:	b938      	cbnz	r0, 33400 <queue_insert+0x66>
	__asm__ volatile(
   333f0:	f387 8811 	msr	BASEPRI, r7
   333f4:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   333f8:	f06f 000b 	mvn.w	r0, #11
}
   333fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   33400:	2301      	movs	r3, #1
		anode->data = data;
   33402:	f8c0 8004 	str.w	r8, [r0, #4]
   33406:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   33408:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   3340a:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   3340e:	b95d      	cbnz	r5, 33428 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   33410:	6823      	ldr	r3, [r4, #0]
   33412:	4313      	orrs	r3, r2
   33414:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   33416:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   33418:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   3341a:	b973      	cbnz	r3, 3343a <queue_insert+0xa0>
	list->tail = node;
   3341c:	6060      	str	r0, [r4, #4]
}
   3341e:	e00c      	b.n	3343a <queue_insert+0xa0>
}
   33420:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   33422:	f8c8 9000 	str.w	r9, [r8]
}
   33426:	e7ef      	b.n	33408 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   33428:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   3342a:	f033 0303 	bics.w	r3, r3, #3
   3342e:	d110      	bne.n	33452 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   33430:	6002      	str	r2, [r0, #0]
	return list->tail;
   33432:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   33434:	b93a      	cbnz	r2, 33446 <queue_insert+0xac>
	list->head = node;
   33436:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   3343a:	2104      	movs	r1, #4
   3343c:	f104 0010 	add.w	r0, r4, #16
   33440:	f000 fb8a 	bl	33b58 <z_handle_obj_poll_events>
   33444:	e7c7      	b.n	333d6 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   33446:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   33448:	f003 0303 	and.w	r3, r3, #3
   3344c:	4303      	orrs	r3, r0
   3344e:	6013      	str	r3, [r2, #0]
   33450:	e7e4      	b.n	3341c <queue_insert+0x82>
   33452:	4313      	orrs	r3, r2
   33454:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   33456:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   33458:	f003 0303 	and.w	r3, r3, #3
   3345c:	4303      	orrs	r3, r0
   3345e:	602b      	str	r3, [r5, #0]
}
   33460:	e7eb      	b.n	3343a <queue_insert+0xa0>

00033462 <z_queue_node_peek>:
{
   33462:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   33464:	4604      	mov	r4, r0
   33466:	b130      	cbz	r0, 33476 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   33468:	6802      	ldr	r2, [r0, #0]
   3346a:	0793      	lsls	r3, r2, #30
   3346c:	d003      	beq.n	33476 <z_queue_node_peek+0x14>
		ret = anode->data;
   3346e:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   33470:	b109      	cbz	r1, 33476 <z_queue_node_peek+0x14>
			k_free(anode);
   33472:	f000 fb92 	bl	33b9a <k_free>
}
   33476:	4620      	mov	r0, r4
   33478:	bd10      	pop	{r4, pc}

0003347a <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   3347a:	2301      	movs	r3, #1
{
   3347c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3347e:	9300      	str	r3, [sp, #0]
   33480:	2300      	movs	r3, #0
{
   33482:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   33484:	4619      	mov	r1, r3
   33486:	f7ff ff88 	bl	3339a <queue_insert>
}
   3348a:	b003      	add	sp, #12
   3348c:	f85d fb04 	ldr.w	pc, [sp], #4

00033490 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   33490:	b15a      	cbz	r2, 334aa <z_impl_k_sem_init+0x1a>
   33492:	428a      	cmp	r2, r1
   33494:	d309      	bcc.n	334aa <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   33496:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3349a:	e9c0 1202 	strd	r1, r2, [r0, #8]
   3349e:	e9c0 0000 	strd	r0, r0, [r0]
   334a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   334a6:	2000      	movs	r0, #0
   334a8:	4770      	bx	lr
		return -EINVAL;
   334aa:	f06f 0015 	mvn.w	r0, #21
}
   334ae:	4770      	bx	lr

000334b0 <flag_test_and_clear>:
	*flagp &= ~BIT(bit);
   334b0:	2301      	movs	r3, #1
	return (*flagp & BIT(bit)) != 0U;
   334b2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   334b4:	408b      	lsls	r3, r1
   334b6:	ea22 0303 	bic.w	r3, r2, r3
   334ba:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   334bc:	fa22 f001 	lsr.w	r0, r2, r1
}
   334c0:	f000 0001 	and.w	r0, r0, #1
   334c4:	4770      	bx	lr

000334c6 <unschedule_locked>:
{
   334c6:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   334c8:	2103      	movs	r1, #3
{
   334ca:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   334cc:	300c      	adds	r0, #12
   334ce:	f7ff ffef 	bl	334b0 <flag_test_and_clear>
   334d2:	4604      	mov	r4, r0
   334d4:	b118      	cbz	r0, 334de <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   334d6:	f105 0010 	add.w	r0, r5, #16
   334da:	f000 f993 	bl	33804 <z_abort_timeout>
}
   334de:	4620      	mov	r0, r4
   334e0:	bd38      	pop	{r3, r4, r5, pc}

000334e2 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   334e2:	b120      	cbz	r0, 334ee <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   334e4:	2200      	movs	r2, #0
   334e6:	30d0      	adds	r0, #208	; 0xd0
   334e8:	4611      	mov	r1, r2
   334ea:	f000 b96e 	b.w	337ca <z_sched_wake>
}
   334ee:	4770      	bx	lr

000334f0 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   334f0:	68c3      	ldr	r3, [r0, #12]
{
   334f2:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   334f4:	f3c3 0540 	ubfx	r5, r3, #1, #1
   334f8:	079b      	lsls	r3, r3, #30
{
   334fa:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   334fc:	d416      	bmi.n	3352c <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   334fe:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   33500:	2102      	movs	r1, #2
   33502:	300c      	adds	r0, #12
   33504:	f7ff ffd4 	bl	334b0 <flag_test_and_clear>
   33508:	b180      	cbz	r0, 3352c <cancel_async_locked+0x3c>
	return list->head;
   3350a:	f8d6 20c8 	ldr.w	r2, [r6, #200]	; 0xc8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3350e:	b16a      	cbz	r2, 3352c <cancel_async_locked+0x3c>
   33510:	4294      	cmp	r4, r2
   33512:	d11b      	bne.n	3354c <cancel_async_locked+0x5c>
	return node->next;
   33514:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   33516:	f8d6 10cc 	ldr.w	r1, [r6, #204]	; 0xcc
Z_GENLIST_REMOVE(slist, snode)
   3351a:	b98d      	cbnz	r5, 33540 <cancel_async_locked+0x50>
   3351c:	428c      	cmp	r4, r1
	list->head = node;
   3351e:	f8c6 20c8 	str.w	r2, [r6, #200]	; 0xc8
Z_GENLIST_REMOVE(slist, snode)
   33522:	d101      	bne.n	33528 <cancel_async_locked+0x38>
	list->tail = node;
   33524:	f8c6 20cc 	str.w	r2, [r6, #204]	; 0xcc
	parent->next = child;
   33528:	2300      	movs	r3, #0
   3352a:	6023      	str	r3, [r4, #0]
	return *flagp;
   3352c:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   3352e:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   33532:	bf1e      	ittt	ne
   33534:	f043 0302 	orrne.w	r3, r3, #2
   33538:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   3353a:	f003 000f 	andne.w	r0, r3, #15
}
   3353e:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   33540:	428c      	cmp	r4, r1
	parent->next = child;
   33542:	602a      	str	r2, [r5, #0]
	list->tail = node;
   33544:	bf08      	it	eq
   33546:	f8c6 50cc 	streq.w	r5, [r6, #204]	; 0xcc
}
   3354a:	e7ed      	b.n	33528 <cancel_async_locked+0x38>
	return node->next;
   3354c:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   3354e:	6812      	ldr	r2, [r2, #0]
   33550:	e7dd      	b.n	3350e <cancel_async_locked+0x1e>

00033552 <work_timeout>:
{
   33552:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33554:	4604      	mov	r4, r0
	__asm__ volatile(
   33556:	f04f 0320 	mov.w	r3, #32
   3355a:	f3ef 8511 	mrs	r5, BASEPRI
   3355e:	f383 8812 	msr	BASEPRI_MAX, r3
   33562:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   33566:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   33568:	f1a0 0610 	sub.w	r6, r0, #16
   3356c:	2103      	movs	r1, #3
   3356e:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   33570:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   33572:	f7ff ff9d 	bl	334b0 <flag_test_and_clear>
   33576:	b128      	cbz	r0, 33584 <__kernel_ram_size+0x14>
		queue = dw->queue;
   33578:	69a3      	ldr	r3, [r4, #24]
		(void)submit_to_queue_locked(wp, &queue);
   3357a:	4630      	mov	r0, r6
   3357c:	a901      	add	r1, sp, #4
		queue = dw->queue;
   3357e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   33580:	f7f9 f86e 	bl	2c660 <submit_to_queue_locked>
	__asm__ volatile(
   33584:	f385 8811 	msr	BASEPRI, r5
   33588:	f3bf 8f6f 	isb	sy
}
   3358c:	b002      	add	sp, #8
   3358e:	bd70      	pop	{r4, r5, r6, pc}

00033590 <k_work_init>:
{
   33590:	b538      	push	{r3, r4, r5, lr}
   33592:	4604      	mov	r4, r0
   33594:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   33596:	2210      	movs	r2, #16
   33598:	2100      	movs	r1, #0
   3359a:	f000 fb68 	bl	33c6e <memset>
   3359e:	6065      	str	r5, [r4, #4]
}
   335a0:	bd38      	pop	{r3, r4, r5, pc}

000335a2 <z_work_submit_to_queue>:
{
   335a2:	b513      	push	{r0, r1, r4, lr}
   335a4:	9001      	str	r0, [sp, #4]
   335a6:	4608      	mov	r0, r1
	__asm__ volatile(
   335a8:	f04f 0320 	mov.w	r3, #32
   335ac:	f3ef 8411 	mrs	r4, BASEPRI
   335b0:	f383 8812 	msr	BASEPRI_MAX, r3
   335b4:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   335b8:	a901      	add	r1, sp, #4
   335ba:	f7f9 f851 	bl	2c660 <submit_to_queue_locked>
	__asm__ volatile(
   335be:	f384 8811 	msr	BASEPRI, r4
   335c2:	f3bf 8f6f 	isb	sy
}
   335c6:	b002      	add	sp, #8
   335c8:	bd10      	pop	{r4, pc}

000335ca <k_work_submit_to_queue>:
{
   335ca:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   335cc:	f7ff ffe9 	bl	335a2 <z_work_submit_to_queue>
	if (ret > 0) {
   335d0:	1e04      	subs	r4, r0, #0
   335d2:	dd09      	ble.n	335e8 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   335d4:	f04f 0320 	mov.w	r3, #32
   335d8:	f3ef 8011 	mrs	r0, BASEPRI
   335dc:	f383 8812 	msr	BASEPRI_MAX, r3
   335e0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   335e4:	f000 f851 	bl	3368a <z_reschedule_irqlock>
}
   335e8:	4620      	mov	r0, r4
   335ea:	bd10      	pop	{r4, pc}

000335ec <k_work_init_delayable>:
{
   335ec:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   335ee:	2230      	movs	r2, #48	; 0x30
{
   335f0:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   335f2:	2100      	movs	r1, #0
{
   335f4:	4604      	mov	r4, r0
	*dwork = (struct k_work_delayable){
   335f6:	f000 fb3a 	bl	33c6e <memset>
   335fa:	f44f 7380 	mov.w	r3, #256	; 0x100
   335fe:	6065      	str	r5, [r4, #4]
   33600:	60e3      	str	r3, [r4, #12]
}
   33602:	bd38      	pop	{r3, r4, r5, pc}

00033604 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   33604:	b538      	push	{r3, r4, r5, lr}
   33606:	4604      	mov	r4, r0
   33608:	f04f 0320 	mov.w	r3, #32
   3360c:	f3ef 8511 	mrs	r5, BASEPRI
   33610:	f383 8812 	msr	BASEPRI_MAX, r3
   33614:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   33618:	f7ff ff55 	bl	334c6 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   3361c:	4620      	mov	r0, r4
   3361e:	f7ff ff67 	bl	334f0 <cancel_async_locked>
	__asm__ volatile(
   33622:	f385 8811 	msr	BASEPRI, r5
   33626:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   3362a:	bd38      	pop	{r3, r4, r5, pc}

0003362c <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   3362c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   33630:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   33632:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   33634:	2300      	movs	r3, #0
	node->prev = NULL;
   33636:	e9c0 3300 	strd	r3, r3, [r0]
}
   3363a:	4770      	bx	lr

0003363c <unpend_thread_no_timeout>:
{
   3363c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   3363e:	f7ff fff5 	bl	3362c <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   33642:	7b43      	ldrb	r3, [r0, #13]
   33644:	f023 0302 	bic.w	r3, r3, #2
   33648:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   3364a:	2300      	movs	r3, #0
   3364c:	6083      	str	r3, [r0, #8]
}
   3364e:	bd08      	pop	{r3, pc}

00033650 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   33650:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   33654:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   33658:	4283      	cmp	r3, r0
		return b2 - b1;
   3365a:	bf14      	ite	ne
   3365c:	1ac0      	subne	r0, r0, r3
	return 0;
   3365e:	2000      	moveq	r0, #0
}
   33660:	4770      	bx	lr

00033662 <z_unpend_thread>:
{
   33662:	b510      	push	{r4, lr}
	__asm__ volatile(
   33664:	f04f 0320 	mov.w	r3, #32
   33668:	f3ef 8411 	mrs	r4, BASEPRI
   3366c:	f383 8812 	msr	BASEPRI_MAX, r3
   33670:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   33674:	f7ff ffe2 	bl	3363c <unpend_thread_no_timeout>
	__asm__ volatile(
   33678:	f384 8811 	msr	BASEPRI, r4
   3367c:	f3bf 8f6f 	isb	sy
}
   33680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33684:	3018      	adds	r0, #24
   33686:	f000 b8bd 	b.w	33804 <z_abort_timeout>

0003368a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   3368a:	4603      	mov	r3, r0
   3368c:	b920      	cbnz	r0, 33698 <z_reschedule_irqlock+0xe>
   3368e:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   33692:	b90a      	cbnz	r2, 33698 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   33694:	f7ee bab4 	b.w	21c00 <arch_swap>
   33698:	f383 8811 	msr	BASEPRI, r3
   3369c:	f3bf 8f6f 	isb	sy
}
   336a0:	4770      	bx	lr

000336a2 <z_reschedule_unlocked>:
	__asm__ volatile(
   336a2:	f04f 0320 	mov.w	r3, #32
   336a6:	f3ef 8011 	mrs	r0, BASEPRI
   336aa:	f383 8812 	msr	BASEPRI_MAX, r3
   336ae:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   336b2:	f7ff bfea 	b.w	3368a <z_reschedule_irqlock>

000336b6 <z_priq_dumb_best>:
	return list->head == list;
   336b6:	6803      	ldr	r3, [r0, #0]
}
   336b8:	4298      	cmp	r0, r3
   336ba:	bf14      	ite	ne
   336bc:	4618      	movne	r0, r3
   336be:	2000      	moveq	r0, #0
   336c0:	4770      	bx	lr

000336c2 <z_ready_thread>:
{
   336c2:	b510      	push	{r4, lr}
   336c4:	f04f 0320 	mov.w	r3, #32
   336c8:	f3ef 8411 	mrs	r4, BASEPRI
   336cc:	f383 8812 	msr	BASEPRI_MAX, r3
   336d0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   336d4:	f7f9 f98e 	bl	2c9f4 <ready_thread>
	__asm__ volatile(
   336d8:	f384 8811 	msr	BASEPRI, r4
   336dc:	f3bf 8f6f 	isb	sy
}
   336e0:	bd10      	pop	{r4, pc}

000336e2 <z_thread_timeout>:
{
   336e2:	4601      	mov	r1, r0
   336e4:	b510      	push	{r4, lr}
	__asm__ volatile(
   336e6:	f04f 0320 	mov.w	r3, #32
   336ea:	f3ef 8411 	mrs	r4, BASEPRI
   336ee:	f383 8812 	msr	BASEPRI_MAX, r3
   336f2:	f3bf 8f6f 	isb	sy
		if (!killed) {
   336f6:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   336fa:	f013 0f28 	tst.w	r3, #40	; 0x28
   336fe:	d10d      	bne.n	3371c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   33700:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   33704:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   33706:	b10b      	cbz	r3, 3370c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   33708:	f7ff ff98 	bl	3363c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   3370c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   33710:	f023 0314 	bic.w	r3, r3, #20
   33714:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   33718:	f7f9 f96c 	bl	2c9f4 <ready_thread>
	__asm__ volatile(
   3371c:	f384 8811 	msr	BASEPRI, r4
   33720:	f3bf 8f6f 	isb	sy
}
   33724:	bd10      	pop	{r4, pc}

00033726 <add_to_waitq_locked>:
{
   33726:	b538      	push	{r3, r4, r5, lr}
   33728:	4604      	mov	r4, r0
   3372a:	460d      	mov	r5, r1
	unready_thread(thread);
   3372c:	f7f9 f9b6 	bl	2ca9c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   33730:	7b63      	ldrb	r3, [r4, #13]
   33732:	f043 0302 	orr.w	r3, r3, #2
   33736:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   33738:	b195      	cbz	r5, 33760 <add_to_waitq_locked+0x3a>
   3373a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   3373c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3373e:	429d      	cmp	r5, r3
   33740:	d015      	beq.n	3376e <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   33742:	b1a3      	cbz	r3, 3376e <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   33744:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   33748:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   3374c:	4291      	cmp	r1, r2
   3374e:	d008      	beq.n	33762 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   33750:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   33752:	2a00      	cmp	r2, #0
   33754:	dd05      	ble.n	33762 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   33756:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   33758:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   3375c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   3375e:	605c      	str	r4, [r3, #4]
}
   33760:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   33762:	686a      	ldr	r2, [r5, #4]
   33764:	4293      	cmp	r3, r2
   33766:	d002      	beq.n	3376e <add_to_waitq_locked+0x48>
   33768:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3376a:	2b00      	cmp	r3, #0
   3376c:	d1ec      	bne.n	33748 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   3376e:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   33770:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   33774:	601c      	str	r4, [r3, #0]
	list->tail = node;
   33776:	606c      	str	r4, [r5, #4]
}
   33778:	e7f2      	b.n	33760 <add_to_waitq_locked+0x3a>

0003377a <z_unpend_first_thread>:
{
   3377a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3377c:	f04f 0320 	mov.w	r3, #32
   33780:	f3ef 8511 	mrs	r5, BASEPRI
   33784:	f383 8812 	msr	BASEPRI_MAX, r3
   33788:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   3378c:	f7ff ff93 	bl	336b6 <z_priq_dumb_best>
		if (thread != NULL) {
   33790:	4604      	mov	r4, r0
   33792:	b120      	cbz	r0, 3379e <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   33794:	f7ff ff52 	bl	3363c <unpend_thread_no_timeout>
   33798:	3018      	adds	r0, #24
   3379a:	f000 f833 	bl	33804 <z_abort_timeout>
	__asm__ volatile(
   3379e:	f385 8811 	msr	BASEPRI, r5
   337a2:	f3bf 8f6f 	isb	sy
}
   337a6:	4620      	mov	r0, r4
   337a8:	bd38      	pop	{r3, r4, r5, pc}

000337aa <z_unpend_all>:
{
   337aa:	b538      	push	{r3, r4, r5, lr}
   337ac:	4605      	mov	r5, r0
	int need_sched = 0;
   337ae:	2000      	movs	r0, #0
	return list->head == list;
   337b0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   337b2:	42a5      	cmp	r5, r4
   337b4:	d000      	beq.n	337b8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   337b6:	b904      	cbnz	r4, 337ba <z_unpend_all+0x10>
}
   337b8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   337ba:	4620      	mov	r0, r4
   337bc:	f7ff ff51 	bl	33662 <z_unpend_thread>
		z_ready_thread(thread);
   337c0:	4620      	mov	r0, r4
   337c2:	f7ff ff7e 	bl	336c2 <z_ready_thread>
		need_sched = 1;
   337c6:	2001      	movs	r0, #1
   337c8:	e7f2      	b.n	337b0 <z_unpend_all+0x6>

000337ca <z_sched_wake>:
{
   337ca:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   337cc:	f04f 0320 	mov.w	r3, #32
   337d0:	f3ef 8511 	mrs	r5, BASEPRI
   337d4:	f383 8812 	msr	BASEPRI_MAX, r3
   337d8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   337dc:	f7ff ff6b 	bl	336b6 <z_priq_dumb_best>
		if (thread != NULL) {
   337e0:	4604      	mov	r4, r0
   337e2:	b150      	cbz	r0, 337fa <z_sched_wake+0x30>
   337e4:	67c1      	str	r1, [r0, #124]	; 0x7c
	thread->base.swap_data = data;
   337e6:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   337e8:	f7ff ff28 	bl	3363c <unpend_thread_no_timeout>
   337ec:	3018      	adds	r0, #24
   337ee:	f000 f809 	bl	33804 <z_abort_timeout>
			ready_thread(thread);
   337f2:	4620      	mov	r0, r4
   337f4:	f7f9 f8fe 	bl	2c9f4 <ready_thread>
			ret = true;
   337f8:	2001      	movs	r0, #1
	__asm__ volatile(
   337fa:	f385 8811 	msr	BASEPRI, r5
   337fe:	f3bf 8f6f 	isb	sy
}
   33802:	bd38      	pop	{r3, r4, r5, pc}

00033804 <z_abort_timeout>:
{
   33804:	b510      	push	{r4, lr}
	__asm__ volatile(
   33806:	f04f 0220 	mov.w	r2, #32
   3380a:	f3ef 8411 	mrs	r4, BASEPRI
   3380e:	f382 8812 	msr	BASEPRI_MAX, r2
   33812:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   33816:	6803      	ldr	r3, [r0, #0]
   33818:	b13b      	cbz	r3, 3382a <z_abort_timeout+0x26>
			remove_timeout(to);
   3381a:	f7f9 fb97 	bl	2cf4c <remove_timeout>
			ret = 0;
   3381e:	2000      	movs	r0, #0
	__asm__ volatile(
   33820:	f384 8811 	msr	BASEPRI, r4
   33824:	f3bf 8f6f 	isb	sy
}
   33828:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   3382a:	f06f 0015 	mvn.w	r0, #21
   3382e:	e7f7      	b.n	33820 <z_abort_timeout+0x1c>

00033830 <z_get_next_timeout_expiry>:
{
   33830:	b510      	push	{r4, lr}
	__asm__ volatile(
   33832:	f04f 0320 	mov.w	r3, #32
   33836:	f3ef 8411 	mrs	r4, BASEPRI
   3383a:	f383 8812 	msr	BASEPRI_MAX, r3
   3383e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   33842:	f7f9 fb5d 	bl	2cf00 <next_timeout>
	__asm__ volatile(
   33846:	f384 8811 	msr	BASEPRI, r4
   3384a:	f3bf 8f6f 	isb	sy
}
   3384e:	bd10      	pop	{r4, pc}

00033850 <z_set_timeout_expiry>:
{
   33850:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33852:	4604      	mov	r4, r0
   33854:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   33856:	f04f 0320 	mov.w	r3, #32
   3385a:	f3ef 8511 	mrs	r5, BASEPRI
   3385e:	f383 8812 	msr	BASEPRI_MAX, r3
   33862:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   33866:	f7f9 fb4b 	bl	2cf00 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   3386a:	2801      	cmp	r0, #1
   3386c:	dd05      	ble.n	3387a <z_set_timeout_expiry+0x2a>
   3386e:	42a0      	cmp	r0, r4
   33870:	9901      	ldr	r1, [sp, #4]
   33872:	db02      	blt.n	3387a <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   33874:	4620      	mov	r0, r4
   33876:	f7f1 fd6f 	bl	25358 <sys_clock_set_timeout>
	__asm__ volatile(
   3387a:	f385 8811 	msr	BASEPRI, r5
   3387e:	f3bf 8f6f 	isb	sy
}
   33882:	b003      	add	sp, #12
   33884:	bd30      	pop	{r4, r5, pc}

00033886 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   33886:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   33888:	f7f9 fc4e 	bl	2d128 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3388c:	bd08      	pop	{r3, pc}

0003388e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   3388e:	f7f9 bc4b 	b.w	2d128 <sys_clock_tick_get>

00033892 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   33892:	b108      	cbz	r0, 33898 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   33894:	f7ec bef0 	b.w	20678 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   33898:	4770      	bx	lr

0003389a <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3389a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   3389e:	bf08      	it	eq
   338a0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   338a4:	b538      	push	{r3, r4, r5, lr}
   338a6:	4605      	mov	r5, r0
   338a8:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   338aa:	d020      	beq.n	338ee <sys_clock_timeout_end_calc+0x54>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   338ac:	ea51 0300 	orrs.w	r3, r1, r0
   338b0:	d103      	bne.n	338ba <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   338b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   338b6:	f7f9 bc37 	b.w	2d128 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   338ba:	f06f 0301 	mvn.w	r3, #1
   338be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   338c2:	1a1b      	subs	r3, r3, r0
   338c4:	eb61 0204 	sbc.w	r2, r1, r4
   338c8:	2a00      	cmp	r2, #0
   338ca:	db02      	blt.n	338d2 <sys_clock_timeout_end_calc+0x38>
			return Z_TICK_ABS(dt);
   338cc:	4618      	mov	r0, r3
   338ce:	4611      	mov	r1, r2
}
   338d0:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   338d2:	f7f9 fc29 	bl	2d128 <sys_clock_tick_get>
   338d6:	2d01      	cmp	r5, #1
   338d8:	4622      	mov	r2, r4
   338da:	f174 0400 	sbcs.w	r4, r4, #0
   338de:	462b      	mov	r3, r5
   338e0:	bfbc      	itt	lt
   338e2:	2301      	movlt	r3, #1
   338e4:	2200      	movlt	r2, #0
   338e6:	1818      	adds	r0, r3, r0
   338e8:	eb41 0102 	adc.w	r1, r1, r2
   338ec:	e7f0      	b.n	338d0 <sys_clock_timeout_end_calc+0x36>
		return UINT64_MAX;
   338ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   338f2:	4601      	mov	r1, r0
   338f4:	e7ec      	b.n	338d0 <sys_clock_timeout_end_calc+0x36>

000338f6 <add_event>:
{
   338f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   338f8:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   338fa:	e9d0 1300 	ldrd	r1, r3, [r0]
   338fe:	4288      	cmp	r0, r1
   33900:	4604      	mov	r4, r0
   33902:	d00d      	beq.n	33920 <add_event+0x2a>
	if ((pending == NULL) ||
   33904:	b163      	cbz	r3, 33920 <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   33906:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   33908:	b100      	cbz	r0, 3390c <add_event+0x16>
   3390a:	3860      	subs	r0, #96	; 0x60
   3390c:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   33910:	4639      	mov	r1, r7
   33912:	f7ff fe9d 	bl	33650 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   33916:	2800      	cmp	r0, #0
   33918:	dc02      	bgt.n	33920 <add_event+0x2a>
	return list->head == list;
   3391a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3391c:	42b4      	cmp	r4, r6
   3391e:	d109      	bne.n	33934 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   33920:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   33922:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   33926:	601d      	str	r5, [r3, #0]
	list->tail = node;
   33928:	6065      	str	r5, [r4, #4]
}
   3392a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   3392c:	6863      	ldr	r3, [r4, #4]
   3392e:	42b3      	cmp	r3, r6
   33930:	d0f6      	beq.n	33920 <add_event+0x2a>
   33932:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   33934:	2e00      	cmp	r6, #0
   33936:	d0f3      	beq.n	33920 <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   33938:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3393a:	b101      	cbz	r1, 3393e <add_event+0x48>
   3393c:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   3393e:	4638      	mov	r0, r7
   33940:	f7ff fe86 	bl	33650 <z_sched_prio_cmp>
   33944:	2800      	cmp	r0, #0
   33946:	ddf1      	ble.n	3392c <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   33948:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   3394a:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   3394e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   33950:	6075      	str	r5, [r6, #4]
			return;
   33952:	e7ea      	b.n	3392a <add_event+0x34>

00033954 <register_events>:
{
   33954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   33958:	2500      	movs	r5, #0
{
   3395a:	468b      	mov	fp, r1
   3395c:	4614      	mov	r4, r2
   3395e:	461f      	mov	r7, r3
   33960:	4682      	mov	sl, r0
	int events_registered = 0;
   33962:	462e      	mov	r6, r5
	event->poller = NULL;
   33964:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   33966:	455d      	cmp	r5, fp
   33968:	db02      	blt.n	33970 <register_events+0x1c>
}
   3396a:	4630      	mov	r0, r6
   3396c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   33970:	f04f 0320 	mov.w	r3, #32
   33974:	f3ef 8911 	mrs	r9, BASEPRI
   33978:	f383 8812 	msr	BASEPRI_MAX, r3
   3397c:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   33980:	f89a 300d 	ldrb.w	r3, [sl, #13]
   33984:	f003 031f 	and.w	r3, r3, #31
   33988:	3b01      	subs	r3, #1
   3398a:	2b07      	cmp	r3, #7
   3398c:	d80f      	bhi.n	339ae <register_events+0x5a>
   3398e:	e8df f003 	tbb	[pc, r3]
   33992:	041e      	.short	0x041e
   33994:	0e0e0a0e 	.word	0x0e0e0a0e
   33998:	250e      	.short	0x250e
		if (k_sem_count_get(event->sem) > 0U) {
   3399a:	f8da 3010 	ldr.w	r3, [sl, #16]
   3399e:	689b      	ldr	r3, [r3, #8]
   339a0:	b12b      	cbz	r3, 339ae <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   339a2:	2302      	movs	r3, #2
   339a4:	e020      	b.n	339e8 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   339a6:	f8da 3010 	ldr.w	r3, [sl, #16]
   339aa:	681b      	ldr	r3, [r3, #0]
   339ac:	bb8b      	cbnz	r3, 33a12 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   339ae:	bb47      	cbnz	r7, 33a02 <register_events+0xae>
   339b0:	7823      	ldrb	r3, [r4, #0]
   339b2:	b333      	cbz	r3, 33a02 <register_events+0xae>
	switch (event->type) {
   339b4:	f89a 300d 	ldrb.w	r3, [sl, #13]
   339b8:	f003 031f 	and.w	r3, r3, #31
   339bc:	3b01      	subs	r3, #1
   339be:	2b07      	cmp	r3, #7
   339c0:	d830      	bhi.n	33a24 <register_events+0xd0>
   339c2:	e8df f003 	tbb	[pc, r3]
   339c6:	2833      	.short	0x2833
   339c8:	2f2f282f 	.word	0x2f2f282f
   339cc:	382f      	.short	0x382f
		if (event->signal->signaled != 0U) {
   339ce:	f8da 3010 	ldr.w	r3, [sl, #16]
   339d2:	689b      	ldr	r3, [r3, #8]
   339d4:	2b00      	cmp	r3, #0
   339d6:	d0ea      	beq.n	339ae <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   339d8:	2301      	movs	r3, #1
   339da:	e005      	b.n	339e8 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   339dc:	f8da 3010 	ldr.w	r3, [sl, #16]
   339e0:	6a1b      	ldr	r3, [r3, #32]
   339e2:	2b00      	cmp	r3, #0
   339e4:	d0e3      	beq.n	339ae <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   339e6:	2310      	movs	r3, #16
	event->state |= state;
   339e8:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   339ec:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   339f0:	f3c2 3145 	ubfx	r1, r2, #13, #6
   339f4:	430b      	orrs	r3, r1
   339f6:	f363 3252 	bfi	r2, r3, #13, #6
   339fa:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   339fe:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   33a02:	f389 8811 	msr	BASEPRI, r9
   33a06:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   33a0a:	3501      	adds	r5, #1
   33a0c:	f10a 0a14 	add.w	sl, sl, #20
   33a10:	e7a9      	b.n	33966 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   33a12:	2304      	movs	r3, #4
   33a14:	e7e8      	b.n	339e8 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   33a16:	4622      	mov	r2, r4
   33a18:	4651      	mov	r1, sl
   33a1a:	f8da 0010 	ldr.w	r0, [sl, #16]
   33a1e:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   33a20:	f7ff ff69 	bl	338f6 <add_event>
	event->poller = poller;
   33a24:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   33a28:	3601      	adds	r6, #1
   33a2a:	e7ea      	b.n	33a02 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   33a2c:	4622      	mov	r2, r4
   33a2e:	4651      	mov	r1, sl
   33a30:	f8da 0010 	ldr.w	r0, [sl, #16]
   33a34:	e7f4      	b.n	33a20 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   33a36:	f8da 0010 	ldr.w	r0, [sl, #16]
   33a3a:	4622      	mov	r2, r4
   33a3c:	4651      	mov	r1, sl
   33a3e:	3024      	adds	r0, #36	; 0x24
   33a40:	e7ee      	b.n	33a20 <register_events+0xcc>

00033a42 <signal_poll_event>:
{
   33a42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   33a46:	6884      	ldr	r4, [r0, #8]
{
   33a48:	4605      	mov	r5, r0
   33a4a:	460e      	mov	r6, r1
	if (poller != NULL) {
   33a4c:	b144      	cbz	r4, 33a60 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   33a4e:	7863      	ldrb	r3, [r4, #1]
   33a50:	2b01      	cmp	r3, #1
   33a52:	d137      	bne.n	33ac4 <signal_poll_event+0x82>
	if (!z_is_thread_pending(thread)) {
   33a54:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   33a58:	f013 0302 	ands.w	r3, r3, #2
   33a5c:	d10a      	bne.n	33a74 <signal_poll_event+0x32>
		poller->is_polling = false;
   33a5e:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   33a60:	2000      	movs	r0, #0
	event->state |= state;
   33a62:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   33a64:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   33a66:	f3c3 3145 	ubfx	r1, r3, #13, #6
   33a6a:	430e      	orrs	r6, r1
   33a6c:	f366 3352 	bfi	r3, r6, #13, #6
   33a70:	60eb      	str	r3, [r5, #12]
	return retcode;
   33a72:	e00b      	b.n	33a8c <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   33a74:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   33a78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   33a7c:	bf08      	it	eq
   33a7e:	f112 0f02 	cmneq.w	r2, #2
   33a82:	d106      	bne.n	33a92 <signal_poll_event+0x50>
		poller->is_polling = false;
   33a84:	2300      	movs	r3, #0
		return -EAGAIN;
   33a86:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   33a8a:	7023      	strb	r3, [r4, #0]
}
   33a8c:	b002      	add	sp, #8
   33a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   33a92:	f1a4 0060 	sub.w	r0, r4, #96	; 0x60
	z_unpend_thread(thread);
   33a96:	9001      	str	r0, [sp, #4]
   33a98:	f7ff fde3 	bl	33662 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   33a9c:	2e08      	cmp	r6, #8
   33a9e:	bf0c      	ite	eq
   33aa0:	f06f 0303 	mvneq.w	r3, #3
   33aa4:	2300      	movne	r3, #0
   33aa6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   33aa8:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   33aac:	06db      	lsls	r3, r3, #27
   33aae:	d103      	bne.n	33ab8 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   33ab0:	f854 7c48 	ldr.w	r7, [r4, #-72]
   33ab4:	9801      	ldr	r0, [sp, #4]
   33ab6:	b10f      	cbz	r7, 33abc <signal_poll_event+0x7a>
		poller->is_polling = false;
   33ab8:	2300      	movs	r3, #0
   33aba:	e7d0      	b.n	33a5e <signal_poll_event+0x1c>
	z_ready_thread(thread);
   33abc:	f7ff fe01 	bl	336c2 <z_ready_thread>
		poller->is_polling = false;
   33ac0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   33ac2:	e7cd      	b.n	33a60 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   33ac4:	2b02      	cmp	r3, #2
   33ac6:	d1f7      	bne.n	33ab8 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   33ac8:	7823      	ldrb	r3, [r4, #0]
   33aca:	2b00      	cmp	r3, #0
   33acc:	d0c8      	beq.n	33a60 <signal_poll_event+0x1e>
   33ace:	f854 7c04 	ldr.w	r7, [r4, #-4]
   33ad2:	2f00      	cmp	r7, #0
   33ad4:	d0f4      	beq.n	33ac0 <signal_poll_event+0x7e>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   33ad6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   33ada:	f1a4 0114 	sub.w	r1, r4, #20
   33ade:	f104 0014 	add.w	r0, r4, #20
   33ae2:	9101      	str	r1, [sp, #4]
   33ae4:	f7ff fe8e 	bl	33804 <z_abort_timeout>
		z_work_submit_to_queue(work_q, &twork->work);
   33ae8:	4638      	mov	r0, r7
   33aea:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   33aec:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   33af0:	f7ff fd57 	bl	335a2 <z_work_submit_to_queue>
		poller->is_polling = false;
   33af4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   33af8:	e7b2      	b.n	33a60 <signal_poll_event+0x1e>

00033afa <clear_event_registrations>:
	while (num_events--) {
   33afa:	2314      	movs	r3, #20
{
   33afc:	b5f0      	push	{r4, r5, r6, r7, lr}
	event->poller = NULL;
   33afe:	2400      	movs	r4, #0
   33b00:	2601      	movs	r6, #1
   33b02:	fb03 0001 	mla	r0, r3, r1, r0
	while (num_events--) {
   33b06:	b901      	cbnz	r1, 33b0a <clear_event_registrations+0x10>
}
   33b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   33b0a:	f810 3c07 	ldrb.w	r3, [r0, #-7]
   33b0e:	f1a0 0714 	sub.w	r7, r0, #20
   33b12:	f003 031f 	and.w	r3, r3, #31
   33b16:	2b08      	cmp	r3, #8
	event->poller = NULL;
   33b18:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   33b1c:	d80d      	bhi.n	33b3a <clear_event_registrations+0x40>
   33b1e:	fa06 f303 	lsl.w	r3, r6, r3
   33b22:	f413 7f8b 	tst.w	r3, #278	; 0x116
   33b26:	d008      	beq.n	33b3a <clear_event_registrations+0x40>
	return node->next != NULL;
   33b28:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   33b2c:	b12b      	cbz	r3, 33b3a <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   33b2e:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   33b32:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   33b34:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   33b36:	e940 4405 	strd	r4, r4, [r0, #-20]
   33b3a:	f382 8811 	msr	BASEPRI, r2
   33b3e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   33b42:	f04f 0320 	mov.w	r3, #32
   33b46:	f3ef 8211 	mrs	r2, BASEPRI
   33b4a:	f383 8812 	msr	BASEPRI_MAX, r3
   33b4e:	f3bf 8f6f 	isb	sy
   33b52:	4638      	mov	r0, r7
   33b54:	3901      	subs	r1, #1
   33b56:	e7d6      	b.n	33b06 <clear_event_registrations+0xc>

00033b58 <z_handle_obj_poll_events>:
{
   33b58:	4603      	mov	r3, r0
	return list->head == list;
   33b5a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   33b5c:	4283      	cmp	r3, r0
   33b5e:	d008      	beq.n	33b72 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   33b60:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   33b64:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   33b66:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   33b68:	2300      	movs	r3, #0
	node->prev = NULL;
   33b6a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   33b6e:	f7ff bf68 	b.w	33a42 <signal_poll_event>
}
   33b72:	4770      	bx	lr

00033b74 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   33b74:	3204      	adds	r2, #4
{
   33b76:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   33b78:	4604      	mov	r4, r0
   33b7a:	d208      	bcs.n	33b8e <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   33b7c:	2600      	movs	r6, #0
   33b7e:	2700      	movs	r7, #0
   33b80:	f041 0104 	orr.w	r1, r1, #4
   33b84:	e9cd 6700 	strd	r6, r7, [sp]
   33b88:	f7ff fb7c 	bl	33284 <k_heap_aligned_alloc>
	if (mem == NULL) {
   33b8c:	b910      	cbnz	r0, 33b94 <z_heap_aligned_alloc+0x20>
		return NULL;
   33b8e:	2000      	movs	r0, #0
}
   33b90:	b002      	add	sp, #8
   33b92:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   33b94:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   33b98:	e7fa      	b.n	33b90 <z_heap_aligned_alloc+0x1c>

00033b9a <k_free>:
	if (ptr != NULL) {
   33b9a:	b120      	cbz	r0, 33ba6 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   33b9c:	1f01      	subs	r1, r0, #4
   33b9e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   33ba2:	f7ff bbba 	b.w	3331a <k_heap_free>
}
   33ba6:	4770      	bx	lr

00033ba8 <k_malloc>:
{
   33ba8:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   33baa:	2004      	movs	r0, #4
   33bac:	f7f9 bb5a 	b.w	2d264 <k_aligned_alloc>

00033bb0 <k_calloc>:
{
   33bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return __builtin_mul_overflow(a, b, result);
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_mul_overflow(a, b, result);
   33bb2:	fba0 2401 	umull	r2, r4, r0, r1
   33bb6:	b94c      	cbnz	r4, 33bcc <k_calloc+0x1c>
	ret = k_malloc(bounds);
   33bb8:	4610      	mov	r0, r2
   33bba:	9201      	str	r2, [sp, #4]
   33bbc:	f7ff fff4 	bl	33ba8 <k_malloc>
	if (ret != NULL) {
   33bc0:	9a01      	ldr	r2, [sp, #4]
   33bc2:	4605      	mov	r5, r0
   33bc4:	b920      	cbnz	r0, 33bd0 <k_calloc+0x20>
}
   33bc6:	4628      	mov	r0, r5
   33bc8:	b003      	add	sp, #12
   33bca:	bd30      	pop	{r4, r5, pc}
		return NULL;
   33bcc:	2500      	movs	r5, #0
   33bce:	e7fa      	b.n	33bc6 <k_calloc+0x16>
__ssp_bos_icheck3(memset, void *, int)
   33bd0:	4621      	mov	r1, r4
   33bd2:	f000 f84c 	bl	33c6e <memset>
   33bd6:	e7f6      	b.n	33bc6 <k_calloc+0x16>

00033bd8 <fabs>:
   33bd8:	ec51 0b10 	vmov	r0, r1, d0
   33bdc:	ee10 2a10 	vmov	r2, s0
   33be0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   33be4:	ec43 2b10 	vmov	d0, r2, r3
   33be8:	4770      	bx	lr

00033bea <abs>:
   33bea:	2800      	cmp	r0, #0
   33bec:	bfb8      	it	lt
   33bee:	4240      	neglt	r0, r0
   33bf0:	4770      	bx	lr

00033bf2 <memchr>:
   33bf2:	b2c9      	uxtb	r1, r1
   33bf4:	4402      	add	r2, r0
   33bf6:	b510      	push	{r4, lr}
   33bf8:	4290      	cmp	r0, r2
   33bfa:	4603      	mov	r3, r0
   33bfc:	d101      	bne.n	33c02 <memchr+0x10>
   33bfe:	2300      	movs	r3, #0
   33c00:	e003      	b.n	33c0a <memchr+0x18>
   33c02:	781c      	ldrb	r4, [r3, #0]
   33c04:	3001      	adds	r0, #1
   33c06:	428c      	cmp	r4, r1
   33c08:	d1f6      	bne.n	33bf8 <memchr+0x6>
   33c0a:	4618      	mov	r0, r3
   33c0c:	bd10      	pop	{r4, pc}

00033c0e <memcmp>:
   33c0e:	3901      	subs	r1, #1
   33c10:	4402      	add	r2, r0
   33c12:	b510      	push	{r4, lr}
   33c14:	4290      	cmp	r0, r2
   33c16:	d101      	bne.n	33c1c <memcmp+0xe>
   33c18:	2000      	movs	r0, #0
   33c1a:	e005      	b.n	33c28 <memcmp+0x1a>
   33c1c:	7803      	ldrb	r3, [r0, #0]
   33c1e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   33c22:	42a3      	cmp	r3, r4
   33c24:	d001      	beq.n	33c2a <memcmp+0x1c>
   33c26:	1b18      	subs	r0, r3, r4
   33c28:	bd10      	pop	{r4, pc}
   33c2a:	3001      	adds	r0, #1
   33c2c:	e7f2      	b.n	33c14 <memcmp+0x6>

00033c2e <memcpy>:
   33c2e:	440a      	add	r2, r1
   33c30:	1e43      	subs	r3, r0, #1
   33c32:	4291      	cmp	r1, r2
   33c34:	d100      	bne.n	33c38 <memcpy+0xa>
   33c36:	4770      	bx	lr
   33c38:	b510      	push	{r4, lr}
   33c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
   33c3e:	4291      	cmp	r1, r2
   33c40:	f803 4f01 	strb.w	r4, [r3, #1]!
   33c44:	d1f9      	bne.n	33c3a <memcpy+0xc>
   33c46:	bd10      	pop	{r4, pc}

00033c48 <__memcpy_chk>:
   33c48:	429a      	cmp	r2, r3
   33c4a:	b508      	push	{r3, lr}
   33c4c:	d901      	bls.n	33c52 <__memcpy_chk+0xa>
   33c4e:	f7ee fe1b 	bl	22888 <__chk_fail>
   33c52:	4281      	cmp	r1, r0
   33c54:	d804      	bhi.n	33c60 <__memcpy_chk+0x18>
   33c56:	188b      	adds	r3, r1, r2
   33c58:	4298      	cmp	r0, r3
   33c5a:	d3f8      	bcc.n	33c4e <__memcpy_chk+0x6>
   33c5c:	4281      	cmp	r1, r0
   33c5e:	d102      	bne.n	33c66 <__memcpy_chk+0x1e>
   33c60:	1883      	adds	r3, r0, r2
   33c62:	4299      	cmp	r1, r3
   33c64:	d3f3      	bcc.n	33c4e <__memcpy_chk+0x6>
   33c66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   33c6a:	f7ff bfe0 	b.w	33c2e <memcpy>

00033c6e <memset>:
   33c6e:	4402      	add	r2, r0
   33c70:	4603      	mov	r3, r0
   33c72:	4293      	cmp	r3, r2
   33c74:	d100      	bne.n	33c78 <memset+0xa>
   33c76:	4770      	bx	lr
   33c78:	f803 1b01 	strb.w	r1, [r3], #1
   33c7c:	e7f9      	b.n	33c72 <memset+0x4>

00033c7e <_calloc_r>:
   33c7e:	434a      	muls	r2, r1
   33c80:	b513      	push	{r0, r1, r4, lr}
   33c82:	4611      	mov	r1, r2
   33c84:	9201      	str	r2, [sp, #4]
   33c86:	f7f9 fba9 	bl	2d3dc <_malloc_r>
   33c8a:	4604      	mov	r4, r0
   33c8c:	b118      	cbz	r0, 33c96 <_calloc_r+0x18>
   33c8e:	9a01      	ldr	r2, [sp, #4]
   33c90:	2100      	movs	r1, #0
   33c92:	f7ff ffec 	bl	33c6e <memset>
   33c96:	4620      	mov	r0, r4
   33c98:	b002      	add	sp, #8
   33c9a:	bd10      	pop	{r4, pc}

00033c9c <__sfputc_r>:
   33c9c:	6893      	ldr	r3, [r2, #8]
   33c9e:	3b01      	subs	r3, #1
   33ca0:	2b00      	cmp	r3, #0
   33ca2:	6093      	str	r3, [r2, #8]
   33ca4:	b410      	push	{r4}
   33ca6:	da08      	bge.n	33cba <__sfputc_r+0x1e>
   33ca8:	6994      	ldr	r4, [r2, #24]
   33caa:	42a3      	cmp	r3, r4
   33cac:	db01      	blt.n	33cb2 <__sfputc_r+0x16>
   33cae:	290a      	cmp	r1, #10
   33cb0:	d103      	bne.n	33cba <__sfputc_r+0x1e>
   33cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
   33cb6:	f7fa baf5 	b.w	2e2a4 <__swbuf_r>
   33cba:	6813      	ldr	r3, [r2, #0]
   33cbc:	1c58      	adds	r0, r3, #1
   33cbe:	6010      	str	r0, [r2, #0]
   33cc0:	4608      	mov	r0, r1
   33cc2:	7019      	strb	r1, [r3, #0]
   33cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
   33cc8:	4770      	bx	lr

00033cca <__sfputs_r>:
   33cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33ccc:	4606      	mov	r6, r0
   33cce:	460f      	mov	r7, r1
   33cd0:	4614      	mov	r4, r2
   33cd2:	18d5      	adds	r5, r2, r3
   33cd4:	42ac      	cmp	r4, r5
   33cd6:	d101      	bne.n	33cdc <__sfputs_r+0x12>
   33cd8:	2000      	movs	r0, #0
   33cda:	e007      	b.n	33cec <__sfputs_r+0x22>
   33cdc:	463a      	mov	r2, r7
   33cde:	f814 1b01 	ldrb.w	r1, [r4], #1
   33ce2:	4630      	mov	r0, r6
   33ce4:	f7ff ffda 	bl	33c9c <__sfputc_r>
   33ce8:	1c43      	adds	r3, r0, #1
   33cea:	d1f3      	bne.n	33cd4 <__sfputs_r+0xa>
   33cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00033cee <__cvt>:
   33cee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   33cf2:	ec55 4b10 	vmov	r4, r5, d0
   33cf6:	2d00      	cmp	r5, #0
   33cf8:	460e      	mov	r6, r1
   33cfa:	4619      	mov	r1, r3
   33cfc:	462b      	mov	r3, r5
   33cfe:	bfb4      	ite	lt
   33d00:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   33d04:	2300      	movge	r3, #0
   33d06:	4691      	mov	r9, r2
   33d08:	bfbf      	itttt	lt
   33d0a:	4622      	movlt	r2, r4
   33d0c:	461d      	movlt	r5, r3
   33d0e:	232d      	movlt	r3, #45	; 0x2d
   33d10:	4614      	movlt	r4, r2
   33d12:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   33d16:	700b      	strb	r3, [r1, #0]
   33d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   33d1a:	f023 0820 	bic.w	r8, r3, #32
   33d1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   33d22:	d005      	beq.n	33d30 <__cvt+0x42>
   33d24:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   33d28:	d100      	bne.n	33d2c <__cvt+0x3e>
   33d2a:	3601      	adds	r6, #1
   33d2c:	2102      	movs	r1, #2
   33d2e:	e000      	b.n	33d32 <__cvt+0x44>
   33d30:	2103      	movs	r1, #3
   33d32:	ab03      	add	r3, sp, #12
   33d34:	4632      	mov	r2, r6
   33d36:	9301      	str	r3, [sp, #4]
   33d38:	ab02      	add	r3, sp, #8
   33d3a:	ec45 4b10 	vmov	d0, r4, r5
   33d3e:	9300      	str	r3, [sp, #0]
   33d40:	4653      	mov	r3, sl
   33d42:	f7ea fae9 	bl	1e318 <_dtoa_r>
   33d46:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   33d4a:	4607      	mov	r7, r0
   33d4c:	d102      	bne.n	33d54 <__cvt+0x66>
   33d4e:	f019 0f01 	tst.w	r9, #1
   33d52:	d022      	beq.n	33d9a <__cvt+0xac>
   33d54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   33d58:	eb07 0906 	add.w	r9, r7, r6
   33d5c:	d110      	bne.n	33d80 <__cvt+0x92>
   33d5e:	783b      	ldrb	r3, [r7, #0]
   33d60:	2b30      	cmp	r3, #48	; 0x30
   33d62:	d10a      	bne.n	33d7a <__cvt+0x8c>
   33d64:	2200      	movs	r2, #0
   33d66:	2300      	movs	r3, #0
   33d68:	4620      	mov	r0, r4
   33d6a:	4629      	mov	r1, r5
   33d6c:	f7e8 ff10 	bl	1cb90 <__aeabi_dcmpeq>
   33d70:	b918      	cbnz	r0, 33d7a <__cvt+0x8c>
   33d72:	f1c6 0601 	rsb	r6, r6, #1
   33d76:	f8ca 6000 	str.w	r6, [sl]
   33d7a:	f8da 3000 	ldr.w	r3, [sl]
   33d7e:	4499      	add	r9, r3
   33d80:	2200      	movs	r2, #0
   33d82:	2300      	movs	r3, #0
   33d84:	4620      	mov	r0, r4
   33d86:	4629      	mov	r1, r5
   33d88:	f7e8 ff02 	bl	1cb90 <__aeabi_dcmpeq>
   33d8c:	b108      	cbz	r0, 33d92 <__cvt+0xa4>
   33d8e:	f8cd 900c 	str.w	r9, [sp, #12]
   33d92:	2230      	movs	r2, #48	; 0x30
   33d94:	9b03      	ldr	r3, [sp, #12]
   33d96:	454b      	cmp	r3, r9
   33d98:	d307      	bcc.n	33daa <__cvt+0xbc>
   33d9a:	9b03      	ldr	r3, [sp, #12]
   33d9c:	4638      	mov	r0, r7
   33d9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   33da0:	1bdb      	subs	r3, r3, r7
   33da2:	6013      	str	r3, [r2, #0]
   33da4:	b004      	add	sp, #16
   33da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33daa:	1c59      	adds	r1, r3, #1
   33dac:	9103      	str	r1, [sp, #12]
   33dae:	701a      	strb	r2, [r3, #0]
   33db0:	e7f0      	b.n	33d94 <__cvt+0xa6>

00033db2 <__exponent>:
   33db2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33db4:	2900      	cmp	r1, #0
   33db6:	4603      	mov	r3, r0
   33db8:	bfb8      	it	lt
   33dba:	4249      	neglt	r1, r1
   33dbc:	f803 2b02 	strb.w	r2, [r3], #2
   33dc0:	bfb4      	ite	lt
   33dc2:	222d      	movlt	r2, #45	; 0x2d
   33dc4:	222b      	movge	r2, #43	; 0x2b
   33dc6:	2909      	cmp	r1, #9
   33dc8:	7042      	strb	r2, [r0, #1]
   33dca:	dd2a      	ble.n	33e22 <__exponent+0x70>
   33dcc:	f10d 0407 	add.w	r4, sp, #7
   33dd0:	270a      	movs	r7, #10
   33dd2:	46a4      	mov	ip, r4
   33dd4:	460a      	mov	r2, r1
   33dd6:	46a6      	mov	lr, r4
   33dd8:	3c01      	subs	r4, #1
   33dda:	2a63      	cmp	r2, #99	; 0x63
   33ddc:	fb91 f6f7 	sdiv	r6, r1, r7
   33de0:	fb07 1516 	mls	r5, r7, r6, r1
   33de4:	4631      	mov	r1, r6
   33de6:	f105 0530 	add.w	r5, r5, #48	; 0x30
   33dea:	f80e 5c01 	strb.w	r5, [lr, #-1]
   33dee:	dcf1      	bgt.n	33dd4 <__exponent+0x22>
   33df0:	3130      	adds	r1, #48	; 0x30
   33df2:	f1ae 0502 	sub.w	r5, lr, #2
   33df6:	f804 1c01 	strb.w	r1, [r4, #-1]
   33dfa:	1c44      	adds	r4, r0, #1
   33dfc:	4629      	mov	r1, r5
   33dfe:	4561      	cmp	r1, ip
   33e00:	d30a      	bcc.n	33e18 <__exponent+0x66>
   33e02:	f10d 0209 	add.w	r2, sp, #9
   33e06:	eba2 020e 	sub.w	r2, r2, lr
   33e0a:	4565      	cmp	r5, ip
   33e0c:	bf88      	it	hi
   33e0e:	2200      	movhi	r2, #0
   33e10:	4413      	add	r3, r2
   33e12:	1a18      	subs	r0, r3, r0
   33e14:	b003      	add	sp, #12
   33e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33e18:	f811 2b01 	ldrb.w	r2, [r1], #1
   33e1c:	f804 2f01 	strb.w	r2, [r4, #1]!
   33e20:	e7ed      	b.n	33dfe <__exponent+0x4c>
   33e22:	2330      	movs	r3, #48	; 0x30
   33e24:	3130      	adds	r1, #48	; 0x30
   33e26:	7083      	strb	r3, [r0, #2]
   33e28:	1d03      	adds	r3, r0, #4
   33e2a:	70c1      	strb	r1, [r0, #3]
   33e2c:	e7f1      	b.n	33e12 <__exponent+0x60>

00033e2e <_printf_common>:
   33e2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   33e32:	4616      	mov	r6, r2
   33e34:	4699      	mov	r9, r3
   33e36:	688a      	ldr	r2, [r1, #8]
   33e38:	4607      	mov	r7, r0
   33e3a:	690b      	ldr	r3, [r1, #16]
   33e3c:	460c      	mov	r4, r1
   33e3e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   33e42:	4293      	cmp	r3, r2
   33e44:	bfb8      	it	lt
   33e46:	4613      	movlt	r3, r2
   33e48:	6033      	str	r3, [r6, #0]
   33e4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   33e4e:	b10a      	cbz	r2, 33e54 <_printf_common+0x26>
   33e50:	3301      	adds	r3, #1
   33e52:	6033      	str	r3, [r6, #0]
   33e54:	6823      	ldr	r3, [r4, #0]
   33e56:	0699      	lsls	r1, r3, #26
   33e58:	bf42      	ittt	mi
   33e5a:	6833      	ldrmi	r3, [r6, #0]
   33e5c:	3302      	addmi	r3, #2
   33e5e:	6033      	strmi	r3, [r6, #0]
   33e60:	6825      	ldr	r5, [r4, #0]
   33e62:	f015 0506 	ands.w	r5, r5, #6
   33e66:	d106      	bne.n	33e76 <_printf_common+0x48>
   33e68:	f104 0a19 	add.w	sl, r4, #25
   33e6c:	68e3      	ldr	r3, [r4, #12]
   33e6e:	6832      	ldr	r2, [r6, #0]
   33e70:	1a9b      	subs	r3, r3, r2
   33e72:	42ab      	cmp	r3, r5
   33e74:	dc29      	bgt.n	33eca <_printf_common+0x9c>
   33e76:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   33e7a:	1e13      	subs	r3, r2, #0
   33e7c:	6822      	ldr	r2, [r4, #0]
   33e7e:	bf18      	it	ne
   33e80:	2301      	movne	r3, #1
   33e82:	0692      	lsls	r2, r2, #26
   33e84:	d42e      	bmi.n	33ee4 <_printf_common+0xb6>
   33e86:	f104 0243 	add.w	r2, r4, #67	; 0x43
   33e8a:	4649      	mov	r1, r9
   33e8c:	4638      	mov	r0, r7
   33e8e:	47c0      	blx	r8
   33e90:	3001      	adds	r0, #1
   33e92:	d021      	beq.n	33ed8 <_printf_common+0xaa>
   33e94:	6823      	ldr	r3, [r4, #0]
   33e96:	341a      	adds	r4, #26
   33e98:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   33e9c:	f003 0306 	and.w	r3, r3, #6
   33ea0:	6832      	ldr	r2, [r6, #0]
   33ea2:	2600      	movs	r6, #0
   33ea4:	2b04      	cmp	r3, #4
   33ea6:	f854 3c12 	ldr.w	r3, [r4, #-18]
   33eaa:	bf08      	it	eq
   33eac:	1aad      	subeq	r5, r5, r2
   33eae:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   33eb2:	bf14      	ite	ne
   33eb4:	2500      	movne	r5, #0
   33eb6:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   33eba:	4293      	cmp	r3, r2
   33ebc:	bfc4      	itt	gt
   33ebe:	1a9b      	subgt	r3, r3, r2
   33ec0:	18ed      	addgt	r5, r5, r3
   33ec2:	42b5      	cmp	r5, r6
   33ec4:	d11a      	bne.n	33efc <_printf_common+0xce>
   33ec6:	2000      	movs	r0, #0
   33ec8:	e008      	b.n	33edc <_printf_common+0xae>
   33eca:	2301      	movs	r3, #1
   33ecc:	4652      	mov	r2, sl
   33ece:	4649      	mov	r1, r9
   33ed0:	4638      	mov	r0, r7
   33ed2:	47c0      	blx	r8
   33ed4:	3001      	adds	r0, #1
   33ed6:	d103      	bne.n	33ee0 <_printf_common+0xb2>
   33ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   33edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   33ee0:	3501      	adds	r5, #1
   33ee2:	e7c3      	b.n	33e6c <_printf_common+0x3e>
   33ee4:	18e1      	adds	r1, r4, r3
   33ee6:	1c5a      	adds	r2, r3, #1
   33ee8:	2030      	movs	r0, #48	; 0x30
   33eea:	3302      	adds	r3, #2
   33eec:	4422      	add	r2, r4
   33eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   33ef2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   33ef6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   33efa:	e7c4      	b.n	33e86 <_printf_common+0x58>
   33efc:	2301      	movs	r3, #1
   33efe:	4622      	mov	r2, r4
   33f00:	4649      	mov	r1, r9
   33f02:	4638      	mov	r0, r7
   33f04:	47c0      	blx	r8
   33f06:	3001      	adds	r0, #1
   33f08:	d0e6      	beq.n	33ed8 <_printf_common+0xaa>
   33f0a:	3601      	adds	r6, #1
   33f0c:	e7d9      	b.n	33ec2 <_printf_common+0x94>

00033f0e <__sread>:
   33f0e:	b510      	push	{r4, lr}
   33f10:	460c      	mov	r4, r1
   33f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   33f16:	f7fb fb75 	bl	2f604 <_read_r>
   33f1a:	2800      	cmp	r0, #0
   33f1c:	bfab      	itete	ge
   33f1e:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   33f20:	89a3      	ldrhlt	r3, [r4, #12]
   33f22:	181b      	addge	r3, r3, r0
   33f24:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   33f28:	bfac      	ite	ge
   33f2a:	6563      	strge	r3, [r4, #84]	; 0x54
   33f2c:	81a3      	strhlt	r3, [r4, #12]
   33f2e:	bd10      	pop	{r4, pc}

00033f30 <__seofread>:
   33f30:	2000      	movs	r0, #0
   33f32:	4770      	bx	lr

00033f34 <__swrite>:
   33f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   33f38:	461f      	mov	r7, r3
   33f3a:	898b      	ldrh	r3, [r1, #12]
   33f3c:	4605      	mov	r5, r0
   33f3e:	460c      	mov	r4, r1
   33f40:	05db      	lsls	r3, r3, #23
   33f42:	4616      	mov	r6, r2
   33f44:	d505      	bpl.n	33f52 <__swrite+0x1e>
   33f46:	2302      	movs	r3, #2
   33f48:	2200      	movs	r2, #0
   33f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   33f4e:	f7fa fc0f 	bl	2e770 <_lseek_r>
   33f52:	89a3      	ldrh	r3, [r4, #12]
   33f54:	4632      	mov	r2, r6
   33f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   33f5a:	4628      	mov	r0, r5
   33f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   33f60:	81a3      	strh	r3, [r4, #12]
   33f62:	463b      	mov	r3, r7
   33f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   33f68:	f7fa b9ee 	b.w	2e348 <_write_r>

00033f6c <__sseek>:
   33f6c:	b510      	push	{r4, lr}
   33f6e:	460c      	mov	r4, r1
   33f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   33f74:	f7fa fbfc 	bl	2e770 <_lseek_r>
   33f78:	1c43      	adds	r3, r0, #1
   33f7a:	89a3      	ldrh	r3, [r4, #12]
   33f7c:	bf15      	itete	ne
   33f7e:	6560      	strne	r0, [r4, #84]	; 0x54
   33f80:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   33f84:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   33f88:	81a3      	strheq	r3, [r4, #12]
   33f8a:	bf18      	it	ne
   33f8c:	81a3      	strhne	r3, [r4, #12]
   33f8e:	bd10      	pop	{r4, pc}

00033f90 <__sclose>:
   33f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   33f94:	f7fa ba58 	b.w	2e448 <_close_r>

00033f98 <strchr>:
   33f98:	b2c9      	uxtb	r1, r1
   33f9a:	4603      	mov	r3, r0
   33f9c:	f810 2b01 	ldrb.w	r2, [r0], #1
   33fa0:	b11a      	cbz	r2, 33faa <strchr+0x12>
   33fa2:	428a      	cmp	r2, r1
   33fa4:	d1f9      	bne.n	33f9a <strchr+0x2>
   33fa6:	4618      	mov	r0, r3
   33fa8:	4770      	bx	lr
   33faa:	2900      	cmp	r1, #0
   33fac:	bf18      	it	ne
   33fae:	2300      	movne	r3, #0
   33fb0:	e7f9      	b.n	33fa6 <strchr+0xe>

00033fb2 <strcpy>:
   33fb2:	4603      	mov	r3, r0
   33fb4:	f811 2b01 	ldrb.w	r2, [r1], #1
   33fb8:	f803 2b01 	strb.w	r2, [r3], #1
   33fbc:	2a00      	cmp	r2, #0
   33fbe:	d1f9      	bne.n	33fb4 <strcpy+0x2>
   33fc0:	4770      	bx	lr

00033fc2 <strncmp>:
   33fc2:	b510      	push	{r4, lr}
   33fc4:	b17a      	cbz	r2, 33fe6 <strncmp+0x24>
   33fc6:	4603      	mov	r3, r0
   33fc8:	3901      	subs	r1, #1
   33fca:	1884      	adds	r4, r0, r2
   33fcc:	f813 0b01 	ldrb.w	r0, [r3], #1
   33fd0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   33fd4:	4290      	cmp	r0, r2
   33fd6:	d101      	bne.n	33fdc <strncmp+0x1a>
   33fd8:	42a3      	cmp	r3, r4
   33fda:	d101      	bne.n	33fe0 <strncmp+0x1e>
   33fdc:	1a80      	subs	r0, r0, r2
   33fde:	bd10      	pop	{r4, pc}
   33fe0:	2800      	cmp	r0, #0
   33fe2:	d1f3      	bne.n	33fcc <strncmp+0xa>
   33fe4:	e7fa      	b.n	33fdc <strncmp+0x1a>
   33fe6:	4610      	mov	r0, r2
   33fe8:	e7f9      	b.n	33fde <strncmp+0x1c>

00033fea <strncpy>:
   33fea:	3901      	subs	r1, #1
   33fec:	4603      	mov	r3, r0
   33fee:	b510      	push	{r4, lr}
   33ff0:	b132      	cbz	r2, 34000 <strncpy+0x16>
   33ff2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   33ff6:	3a01      	subs	r2, #1
   33ff8:	f803 4b01 	strb.w	r4, [r3], #1
   33ffc:	2c00      	cmp	r4, #0
   33ffe:	d1f7      	bne.n	33ff0 <strncpy+0x6>
   34000:	441a      	add	r2, r3
   34002:	2100      	movs	r1, #0
   34004:	4293      	cmp	r3, r2
   34006:	d100      	bne.n	3400a <strncpy+0x20>
   34008:	bd10      	pop	{r4, pc}
   3400a:	f803 1b01 	strb.w	r1, [r3], #1
   3400e:	e7f9      	b.n	34004 <strncpy+0x1a>

00034010 <strnlen>:
   34010:	4602      	mov	r2, r0
   34012:	4401      	add	r1, r0
   34014:	b510      	push	{r4, lr}
   34016:	428a      	cmp	r2, r1
   34018:	4613      	mov	r3, r2
   3401a:	d003      	beq.n	34024 <strnlen+0x14>
   3401c:	781c      	ldrb	r4, [r3, #0]
   3401e:	3201      	adds	r2, #1
   34020:	2c00      	cmp	r4, #0
   34022:	d1f8      	bne.n	34016 <strnlen+0x6>
   34024:	1a18      	subs	r0, r3, r0
   34026:	bd10      	pop	{r4, pc}

00034028 <strstr>:
   34028:	780a      	ldrb	r2, [r1, #0]
   3402a:	b570      	push	{r4, r5, r6, lr}
   3402c:	b96a      	cbnz	r2, 3404a <strstr+0x22>
   3402e:	bd70      	pop	{r4, r5, r6, pc}
   34030:	429a      	cmp	r2, r3
   34032:	d109      	bne.n	34048 <strstr+0x20>
   34034:	460c      	mov	r4, r1
   34036:	4605      	mov	r5, r0
   34038:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   3403c:	2b00      	cmp	r3, #0
   3403e:	d0f6      	beq.n	3402e <strstr+0x6>
   34040:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   34044:	429e      	cmp	r6, r3
   34046:	d0f7      	beq.n	34038 <strstr+0x10>
   34048:	3001      	adds	r0, #1
   3404a:	7803      	ldrb	r3, [r0, #0]
   3404c:	2b00      	cmp	r3, #0
   3404e:	d1ef      	bne.n	34030 <strstr+0x8>
   34050:	4618      	mov	r0, r3
   34052:	e7ec      	b.n	3402e <strstr+0x6>

00034054 <_strtol_r>:
   34054:	f7f9 bf42 	b.w	2dedc <_strtol_l.constprop.0>

00034058 <_strtoul_r>:
   34058:	f7fa b86c 	b.w	2e134 <_strtoul_l.constprop.0>

0003405c <_vsniprintf_r>:
   3405c:	b530      	push	{r4, r5, lr}
   3405e:	4614      	mov	r4, r2
   34060:	b09b      	sub	sp, #108	; 0x6c
   34062:	4605      	mov	r5, r0
   34064:	461a      	mov	r2, r3
   34066:	2c00      	cmp	r4, #0
   34068:	da05      	bge.n	34076 <_vsniprintf_r+0x1a>
   3406a:	238b      	movs	r3, #139	; 0x8b
   3406c:	6003      	str	r3, [r0, #0]
   3406e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34072:	b01b      	add	sp, #108	; 0x6c
   34074:	bd30      	pop	{r4, r5, pc}
   34076:	f44f 7302 	mov.w	r3, #520	; 0x208
   3407a:	9100      	str	r1, [sp, #0]
   3407c:	9104      	str	r1, [sp, #16]
   3407e:	4669      	mov	r1, sp
   34080:	f8ad 300c 	strh.w	r3, [sp, #12]
   34084:	bf14      	ite	ne
   34086:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   3408a:	4623      	moveq	r3, r4
   3408c:	9302      	str	r3, [sp, #8]
   3408e:	9305      	str	r3, [sp, #20]
   34090:	f64f 73ff 	movw	r3, #65535	; 0xffff
   34094:	f8ad 300e 	strh.w	r3, [sp, #14]
   34098:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   3409a:	f7fa fee5 	bl	2ee68 <_svfiprintf_r>
   3409e:	1c43      	adds	r3, r0, #1
   340a0:	bfbc      	itt	lt
   340a2:	238b      	movlt	r3, #139	; 0x8b
   340a4:	602b      	strlt	r3, [r5, #0]
   340a6:	2c00      	cmp	r4, #0
   340a8:	d0e3      	beq.n	34072 <_vsniprintf_r+0x16>
   340aa:	9b00      	ldr	r3, [sp, #0]
   340ac:	2200      	movs	r2, #0
   340ae:	701a      	strb	r2, [r3, #0]
   340b0:	e7df      	b.n	34072 <_vsniprintf_r+0x16>

000340b2 <quorem>:
   340b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   340b6:	6903      	ldr	r3, [r0, #16]
   340b8:	4607      	mov	r7, r0
   340ba:	690c      	ldr	r4, [r1, #16]
   340bc:	42a3      	cmp	r3, r4
   340be:	f2c0 8085 	blt.w	341cc <quorem+0x11a>
   340c2:	3c01      	subs	r4, #1
   340c4:	f100 0514 	add.w	r5, r0, #20
   340c8:	f101 0814 	add.w	r8, r1, #20
   340cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   340d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   340d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   340d8:	9301      	str	r3, [sp, #4]
   340da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   340de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   340e2:	3301      	adds	r3, #1
   340e4:	429a      	cmp	r2, r3
   340e6:	fbb2 f6f3 	udiv	r6, r2, r3
   340ea:	d333      	bcc.n	34154 <quorem+0xa2>
   340ec:	f04f 0e00 	mov.w	lr, #0
   340f0:	4640      	mov	r0, r8
   340f2:	46ac      	mov	ip, r5
   340f4:	46f2      	mov	sl, lr
   340f6:	f850 2b04 	ldr.w	r2, [r0], #4
   340fa:	b293      	uxth	r3, r2
   340fc:	4581      	cmp	r9, r0
   340fe:	ea4f 4212 	mov.w	r2, r2, lsr #16
   34102:	fb06 e303 	mla	r3, r6, r3, lr
   34106:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   3410a:	b29b      	uxth	r3, r3
   3410c:	fb06 e202 	mla	r2, r6, r2, lr
   34110:	ebaa 0303 	sub.w	r3, sl, r3
   34114:	f8dc a000 	ldr.w	sl, [ip]
   34118:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   3411c:	fa1f fa8a 	uxth.w	sl, sl
   34120:	4453      	add	r3, sl
   34122:	fa1f fa82 	uxth.w	sl, r2
   34126:	f8dc 2000 	ldr.w	r2, [ip]
   3412a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   3412e:	eb02 4223 	add.w	r2, r2, r3, asr #16
   34132:	b29b      	uxth	r3, r3
   34134:	ea4f 4a22 	mov.w	sl, r2, asr #16
   34138:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   3413c:	f84c 3b04 	str.w	r3, [ip], #4
   34140:	d2d9      	bcs.n	340f6 <quorem+0x44>
   34142:	f855 300b 	ldr.w	r3, [r5, fp]
   34146:	b92b      	cbnz	r3, 34154 <quorem+0xa2>
   34148:	9b01      	ldr	r3, [sp, #4]
   3414a:	3b04      	subs	r3, #4
   3414c:	429d      	cmp	r5, r3
   3414e:	461a      	mov	r2, r3
   34150:	d330      	bcc.n	341b4 <quorem+0x102>
   34152:	613c      	str	r4, [r7, #16]
   34154:	4638      	mov	r0, r7
   34156:	f000 f910 	bl	3437a <__mcmp>
   3415a:	2800      	cmp	r0, #0
   3415c:	db26      	blt.n	341ac <quorem+0xfa>
   3415e:	3601      	adds	r6, #1
   34160:	4628      	mov	r0, r5
   34162:	f04f 0c00 	mov.w	ip, #0
   34166:	f858 1b04 	ldr.w	r1, [r8], #4
   3416a:	f8d0 e000 	ldr.w	lr, [r0]
   3416e:	b28b      	uxth	r3, r1
   34170:	45c1      	cmp	r9, r8
   34172:	fa1f f28e 	uxth.w	r2, lr
   34176:	ebac 0303 	sub.w	r3, ip, r3
   3417a:	4413      	add	r3, r2
   3417c:	ea4f 4211 	mov.w	r2, r1, lsr #16
   34180:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   34184:	eb02 4223 	add.w	r2, r2, r3, asr #16
   34188:	b29b      	uxth	r3, r3
   3418a:	ea4f 4c22 	mov.w	ip, r2, asr #16
   3418e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   34192:	f840 3b04 	str.w	r3, [r0], #4
   34196:	d2e6      	bcs.n	34166 <quorem+0xb4>
   34198:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   3419c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   341a0:	b922      	cbnz	r2, 341ac <quorem+0xfa>
   341a2:	3b04      	subs	r3, #4
   341a4:	429d      	cmp	r5, r3
   341a6:	461a      	mov	r2, r3
   341a8:	d30a      	bcc.n	341c0 <quorem+0x10e>
   341aa:	613c      	str	r4, [r7, #16]
   341ac:	4630      	mov	r0, r6
   341ae:	b003      	add	sp, #12
   341b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   341b4:	6812      	ldr	r2, [r2, #0]
   341b6:	3b04      	subs	r3, #4
   341b8:	2a00      	cmp	r2, #0
   341ba:	d1ca      	bne.n	34152 <quorem+0xa0>
   341bc:	3c01      	subs	r4, #1
   341be:	e7c5      	b.n	3414c <quorem+0x9a>
   341c0:	6812      	ldr	r2, [r2, #0]
   341c2:	3b04      	subs	r3, #4
   341c4:	2a00      	cmp	r2, #0
   341c6:	d1f0      	bne.n	341aa <quorem+0xf8>
   341c8:	3c01      	subs	r4, #1
   341ca:	e7eb      	b.n	341a4 <quorem+0xf2>
   341cc:	2000      	movs	r0, #0
   341ce:	e7ee      	b.n	341ae <quorem+0xfc>

000341d0 <__sfmoreglue>:
   341d0:	b570      	push	{r4, r5, r6, lr}
   341d2:	2268      	movs	r2, #104	; 0x68
   341d4:	1e4d      	subs	r5, r1, #1
   341d6:	460e      	mov	r6, r1
   341d8:	4355      	muls	r5, r2
   341da:	f105 0174 	add.w	r1, r5, #116	; 0x74
   341de:	f7f9 f8fd 	bl	2d3dc <_malloc_r>
   341e2:	4604      	mov	r4, r0
   341e4:	b140      	cbz	r0, 341f8 <__sfmoreglue+0x28>
   341e6:	2100      	movs	r1, #0
   341e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
   341ec:	e9c0 1600 	strd	r1, r6, [r0]
   341f0:	300c      	adds	r0, #12
   341f2:	60a0      	str	r0, [r4, #8]
   341f4:	f7ff fd3b 	bl	33c6e <memset>
   341f8:	4620      	mov	r0, r4
   341fa:	bd70      	pop	{r4, r5, r6, pc}

000341fc <_fwalk_reent>:
   341fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   34200:	4606      	mov	r6, r0
   34202:	4688      	mov	r8, r1
   34204:	f100 0448 	add.w	r4, r0, #72	; 0x48
   34208:	2700      	movs	r7, #0
   3420a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   3420e:	f1b9 0901 	subs.w	r9, r9, #1
   34212:	d505      	bpl.n	34220 <_fwalk_reent+0x24>
   34214:	6824      	ldr	r4, [r4, #0]
   34216:	2c00      	cmp	r4, #0
   34218:	d1f7      	bne.n	3420a <_fwalk_reent+0xe>
   3421a:	4638      	mov	r0, r7
   3421c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   34220:	89ab      	ldrh	r3, [r5, #12]
   34222:	2b01      	cmp	r3, #1
   34224:	d907      	bls.n	34236 <_fwalk_reent+0x3a>
   34226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   3422a:	3301      	adds	r3, #1
   3422c:	d003      	beq.n	34236 <_fwalk_reent+0x3a>
   3422e:	4629      	mov	r1, r5
   34230:	4630      	mov	r0, r6
   34232:	47c0      	blx	r8
   34234:	4307      	orrs	r7, r0
   34236:	3568      	adds	r5, #104	; 0x68
   34238:	e7e9      	b.n	3420e <_fwalk_reent+0x12>

0003423a <__swhatbuf_r>:
   3423a:	b570      	push	{r4, r5, r6, lr}
   3423c:	460e      	mov	r6, r1
   3423e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   34242:	b096      	sub	sp, #88	; 0x58
   34244:	4614      	mov	r4, r2
   34246:	2900      	cmp	r1, #0
   34248:	461d      	mov	r5, r3
   3424a:	da08      	bge.n	3425e <__swhatbuf_r+0x24>
   3424c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   34250:	2200      	movs	r2, #0
   34252:	602a      	str	r2, [r5, #0]
   34254:	061a      	lsls	r2, r3, #24
   34256:	d410      	bmi.n	3427a <__swhatbuf_r+0x40>
   34258:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3425c:	e00e      	b.n	3427c <__swhatbuf_r+0x42>
   3425e:	466a      	mov	r2, sp
   34260:	f7fb fa00 	bl	2f664 <_fstat_r>
   34264:	2800      	cmp	r0, #0
   34266:	dbf1      	blt.n	3424c <__swhatbuf_r+0x12>
   34268:	9a01      	ldr	r2, [sp, #4]
   3426a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   3426e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   34272:	425a      	negs	r2, r3
   34274:	415a      	adcs	r2, r3
   34276:	602a      	str	r2, [r5, #0]
   34278:	e7ee      	b.n	34258 <__swhatbuf_r+0x1e>
   3427a:	2340      	movs	r3, #64	; 0x40
   3427c:	2000      	movs	r0, #0
   3427e:	6023      	str	r3, [r4, #0]
   34280:	b016      	add	sp, #88	; 0x58
   34282:	bd70      	pop	{r4, r5, r6, pc}

00034284 <__ascii_mbtowc>:
   34284:	b082      	sub	sp, #8
   34286:	b901      	cbnz	r1, 3428a <__ascii_mbtowc+0x6>
   34288:	a901      	add	r1, sp, #4
   3428a:	b142      	cbz	r2, 3429e <__ascii_mbtowc+0x1a>
   3428c:	b14b      	cbz	r3, 342a2 <__ascii_mbtowc+0x1e>
   3428e:	7813      	ldrb	r3, [r2, #0]
   34290:	600b      	str	r3, [r1, #0]
   34292:	7812      	ldrb	r2, [r2, #0]
   34294:	1e10      	subs	r0, r2, #0
   34296:	bf18      	it	ne
   34298:	2001      	movne	r0, #1
   3429a:	b002      	add	sp, #8
   3429c:	4770      	bx	lr
   3429e:	4610      	mov	r0, r2
   342a0:	e7fb      	b.n	3429a <__ascii_mbtowc+0x16>
   342a2:	f06f 0001 	mvn.w	r0, #1
   342a6:	e7f8      	b.n	3429a <__ascii_mbtowc+0x16>

000342a8 <memmove>:
   342a8:	4288      	cmp	r0, r1
   342aa:	b510      	push	{r4, lr}
   342ac:	eb01 0402 	add.w	r4, r1, r2
   342b0:	d902      	bls.n	342b8 <memmove+0x10>
   342b2:	4284      	cmp	r4, r0
   342b4:	4623      	mov	r3, r4
   342b6:	d807      	bhi.n	342c8 <memmove+0x20>
   342b8:	1e43      	subs	r3, r0, #1
   342ba:	42a1      	cmp	r1, r4
   342bc:	d008      	beq.n	342d0 <memmove+0x28>
   342be:	f811 2b01 	ldrb.w	r2, [r1], #1
   342c2:	f803 2f01 	strb.w	r2, [r3, #1]!
   342c6:	e7f8      	b.n	342ba <memmove+0x12>
   342c8:	4402      	add	r2, r0
   342ca:	4601      	mov	r1, r0
   342cc:	428a      	cmp	r2, r1
   342ce:	d100      	bne.n	342d2 <memmove+0x2a>
   342d0:	bd10      	pop	{r4, pc}
   342d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   342d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   342da:	e7f7      	b.n	342cc <memmove+0x24>

000342dc <__hi0bits>:
   342dc:	0c03      	lsrs	r3, r0, #16
   342de:	041b      	lsls	r3, r3, #16
   342e0:	b9d3      	cbnz	r3, 34318 <__hi0bits+0x3c>
   342e2:	0400      	lsls	r0, r0, #16
   342e4:	2310      	movs	r3, #16
   342e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   342ea:	bf04      	itt	eq
   342ec:	0200      	lsleq	r0, r0, #8
   342ee:	3308      	addeq	r3, #8
   342f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   342f4:	bf04      	itt	eq
   342f6:	0100      	lsleq	r0, r0, #4
   342f8:	3304      	addeq	r3, #4
   342fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   342fe:	bf04      	itt	eq
   34300:	0080      	lsleq	r0, r0, #2
   34302:	3302      	addeq	r3, #2
   34304:	2800      	cmp	r0, #0
   34306:	db05      	blt.n	34314 <__hi0bits+0x38>
   34308:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   3430c:	f103 0301 	add.w	r3, r3, #1
   34310:	bf08      	it	eq
   34312:	2320      	moveq	r3, #32
   34314:	4618      	mov	r0, r3
   34316:	4770      	bx	lr
   34318:	2300      	movs	r3, #0
   3431a:	e7e4      	b.n	342e6 <__hi0bits+0xa>

0003431c <__lo0bits>:
   3431c:	6803      	ldr	r3, [r0, #0]
   3431e:	4601      	mov	r1, r0
   34320:	f013 0207 	ands.w	r2, r3, #7
   34324:	d00b      	beq.n	3433e <__lo0bits+0x22>
   34326:	07da      	lsls	r2, r3, #31
   34328:	d423      	bmi.n	34372 <__lo0bits+0x56>
   3432a:	0798      	lsls	r0, r3, #30
   3432c:	bf47      	ittee	mi
   3432e:	085b      	lsrmi	r3, r3, #1
   34330:	2001      	movmi	r0, #1
   34332:	089b      	lsrpl	r3, r3, #2
   34334:	2002      	movpl	r0, #2
   34336:	bf4c      	ite	mi
   34338:	600b      	strmi	r3, [r1, #0]
   3433a:	600b      	strpl	r3, [r1, #0]
   3433c:	4770      	bx	lr
   3433e:	b298      	uxth	r0, r3
   34340:	b9a8      	cbnz	r0, 3436e <__lo0bits+0x52>
   34342:	0c1b      	lsrs	r3, r3, #16
   34344:	2010      	movs	r0, #16
   34346:	b2da      	uxtb	r2, r3
   34348:	b90a      	cbnz	r2, 3434e <__lo0bits+0x32>
   3434a:	3008      	adds	r0, #8
   3434c:	0a1b      	lsrs	r3, r3, #8
   3434e:	071a      	lsls	r2, r3, #28
   34350:	bf04      	itt	eq
   34352:	091b      	lsreq	r3, r3, #4
   34354:	3004      	addeq	r0, #4
   34356:	079a      	lsls	r2, r3, #30
   34358:	bf04      	itt	eq
   3435a:	089b      	lsreq	r3, r3, #2
   3435c:	3002      	addeq	r0, #2
   3435e:	07da      	lsls	r2, r3, #31
   34360:	d403      	bmi.n	3436a <__lo0bits+0x4e>
   34362:	085b      	lsrs	r3, r3, #1
   34364:	f100 0001 	add.w	r0, r0, #1
   34368:	d005      	beq.n	34376 <__lo0bits+0x5a>
   3436a:	600b      	str	r3, [r1, #0]
   3436c:	4770      	bx	lr
   3436e:	4610      	mov	r0, r2
   34370:	e7e9      	b.n	34346 <__lo0bits+0x2a>
   34372:	2000      	movs	r0, #0
   34374:	4770      	bx	lr
   34376:	2020      	movs	r0, #32
   34378:	4770      	bx	lr

0003437a <__mcmp>:
   3437a:	6902      	ldr	r2, [r0, #16]
   3437c:	b530      	push	{r4, r5, lr}
   3437e:	690c      	ldr	r4, [r1, #16]
   34380:	1b12      	subs	r2, r2, r4
   34382:	d10e      	bne.n	343a2 <__mcmp+0x28>
   34384:	f100 0314 	add.w	r3, r0, #20
   34388:	3114      	adds	r1, #20
   3438a:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   3438e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   34392:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   34396:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   3439a:	42a5      	cmp	r5, r4
   3439c:	d003      	beq.n	343a6 <__mcmp+0x2c>
   3439e:	d305      	bcc.n	343ac <__mcmp+0x32>
   343a0:	2201      	movs	r2, #1
   343a2:	4610      	mov	r0, r2
   343a4:	bd30      	pop	{r4, r5, pc}
   343a6:	4283      	cmp	r3, r0
   343a8:	d3f3      	bcc.n	34392 <__mcmp+0x18>
   343aa:	e7fa      	b.n	343a2 <__mcmp+0x28>
   343ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   343b0:	e7f7      	b.n	343a2 <__mcmp+0x28>

000343b2 <_realloc_r>:
   343b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   343b4:	4607      	mov	r7, r0
   343b6:	4614      	mov	r4, r2
   343b8:	460e      	mov	r6, r1
   343ba:	b921      	cbnz	r1, 343c6 <_realloc_r+0x14>
   343bc:	4611      	mov	r1, r2
   343be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   343c2:	f7f9 b80b 	b.w	2d3dc <_malloc_r>
   343c6:	b922      	cbnz	r2, 343d2 <_realloc_r+0x20>
   343c8:	4625      	mov	r5, r4
   343ca:	f7f8 ffbb 	bl	2d344 <_free_r>
   343ce:	4628      	mov	r0, r5
   343d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   343d2:	f000 f945 	bl	34660 <_malloc_usable_size_r>
   343d6:	42a0      	cmp	r0, r4
   343d8:	d20f      	bcs.n	343fa <_realloc_r+0x48>
   343da:	4621      	mov	r1, r4
   343dc:	4638      	mov	r0, r7
   343de:	f7f8 fffd 	bl	2d3dc <_malloc_r>
   343e2:	4605      	mov	r5, r0
   343e4:	2800      	cmp	r0, #0
   343e6:	d0f2      	beq.n	343ce <_realloc_r+0x1c>
   343e8:	4631      	mov	r1, r6
   343ea:	4622      	mov	r2, r4
   343ec:	f7ff fc1f 	bl	33c2e <memcpy>
   343f0:	4631      	mov	r1, r6
   343f2:	4638      	mov	r0, r7
   343f4:	f7f8 ffa6 	bl	2d344 <_free_r>
   343f8:	e7e9      	b.n	343ce <_realloc_r+0x1c>
   343fa:	4635      	mov	r5, r6
   343fc:	e7e7      	b.n	343ce <_realloc_r+0x1c>

000343fe <__ssputs_r>:
   343fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   34402:	688e      	ldr	r6, [r1, #8]
   34404:	4682      	mov	sl, r0
   34406:	460c      	mov	r4, r1
   34408:	4690      	mov	r8, r2
   3440a:	429e      	cmp	r6, r3
   3440c:	461f      	mov	r7, r3
   3440e:	d838      	bhi.n	34482 <__ssputs_r+0x84>
   34410:	898a      	ldrh	r2, [r1, #12]
   34412:	f412 6f90 	tst.w	r2, #1152	; 0x480
   34416:	d032      	beq.n	3447e <__ssputs_r+0x80>
   34418:	6825      	ldr	r5, [r4, #0]
   3441a:	3301      	adds	r3, #1
   3441c:	6909      	ldr	r1, [r1, #16]
   3441e:	eba5 0901 	sub.w	r9, r5, r1
   34422:	6965      	ldr	r5, [r4, #20]
   34424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   34428:	444b      	add	r3, r9
   3442a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   3442e:	106d      	asrs	r5, r5, #1
   34430:	429d      	cmp	r5, r3
   34432:	bf38      	it	cc
   34434:	461d      	movcc	r5, r3
   34436:	0553      	lsls	r3, r2, #21
   34438:	d531      	bpl.n	3449e <__ssputs_r+0xa0>
   3443a:	4629      	mov	r1, r5
   3443c:	f7f8 ffce 	bl	2d3dc <_malloc_r>
   34440:	4606      	mov	r6, r0
   34442:	b950      	cbnz	r0, 3445a <__ssputs_r+0x5c>
   34444:	230c      	movs	r3, #12
   34446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   3444a:	f8ca 3000 	str.w	r3, [sl]
   3444e:	89a3      	ldrh	r3, [r4, #12]
   34450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   34454:	81a3      	strh	r3, [r4, #12]
   34456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3445a:	464a      	mov	r2, r9
   3445c:	6921      	ldr	r1, [r4, #16]
   3445e:	f7ff fbe6 	bl	33c2e <memcpy>
   34462:	89a3      	ldrh	r3, [r4, #12]
   34464:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   34468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3446c:	81a3      	strh	r3, [r4, #12]
   3446e:	6126      	str	r6, [r4, #16]
   34470:	444e      	add	r6, r9
   34472:	6165      	str	r5, [r4, #20]
   34474:	eba5 0509 	sub.w	r5, r5, r9
   34478:	6026      	str	r6, [r4, #0]
   3447a:	463e      	mov	r6, r7
   3447c:	60a5      	str	r5, [r4, #8]
   3447e:	42be      	cmp	r6, r7
   34480:	d900      	bls.n	34484 <__ssputs_r+0x86>
   34482:	463e      	mov	r6, r7
   34484:	4632      	mov	r2, r6
   34486:	4641      	mov	r1, r8
   34488:	6820      	ldr	r0, [r4, #0]
   3448a:	f7ff ff0d 	bl	342a8 <memmove>
   3448e:	68a3      	ldr	r3, [r4, #8]
   34490:	2000      	movs	r0, #0
   34492:	1b9b      	subs	r3, r3, r6
   34494:	60a3      	str	r3, [r4, #8]
   34496:	6823      	ldr	r3, [r4, #0]
   34498:	4433      	add	r3, r6
   3449a:	6023      	str	r3, [r4, #0]
   3449c:	e7db      	b.n	34456 <__ssputs_r+0x58>
   3449e:	462a      	mov	r2, r5
   344a0:	f7ff ff87 	bl	343b2 <_realloc_r>
   344a4:	4606      	mov	r6, r0
   344a6:	2800      	cmp	r0, #0
   344a8:	d1e1      	bne.n	3446e <__ssputs_r+0x70>
   344aa:	6921      	ldr	r1, [r4, #16]
   344ac:	4650      	mov	r0, sl
   344ae:	f7f8 ff49 	bl	2d344 <_free_r>
   344b2:	e7c7      	b.n	34444 <__ssputs_r+0x46>

000344b4 <_sungetc_r>:
   344b4:	b538      	push	{r3, r4, r5, lr}
   344b6:	1c4b      	adds	r3, r1, #1
   344b8:	4614      	mov	r4, r2
   344ba:	d103      	bne.n	344c4 <_sungetc_r+0x10>
   344bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   344c0:	4628      	mov	r0, r5
   344c2:	bd38      	pop	{r3, r4, r5, pc}
   344c4:	8993      	ldrh	r3, [r2, #12]
   344c6:	b2cd      	uxtb	r5, r1
   344c8:	f023 0320 	bic.w	r3, r3, #32
   344cc:	8193      	strh	r3, [r2, #12]
   344ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
   344d0:	6852      	ldr	r2, [r2, #4]
   344d2:	b18b      	cbz	r3, 344f8 <_sungetc_r+0x44>
   344d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   344d6:	4293      	cmp	r3, r2
   344d8:	dd08      	ble.n	344ec <_sungetc_r+0x38>
   344da:	6823      	ldr	r3, [r4, #0]
   344dc:	1e5a      	subs	r2, r3, #1
   344de:	6022      	str	r2, [r4, #0]
   344e0:	f803 5c01 	strb.w	r5, [r3, #-1]
   344e4:	6863      	ldr	r3, [r4, #4]
   344e6:	3301      	adds	r3, #1
   344e8:	6063      	str	r3, [r4, #4]
   344ea:	e7e9      	b.n	344c0 <_sungetc_r+0xc>
   344ec:	4621      	mov	r1, r4
   344ee:	f000 f873 	bl	345d8 <__submore>
   344f2:	2800      	cmp	r0, #0
   344f4:	d0f1      	beq.n	344da <_sungetc_r+0x26>
   344f6:	e7e1      	b.n	344bc <_sungetc_r+0x8>
   344f8:	6921      	ldr	r1, [r4, #16]
   344fa:	6823      	ldr	r3, [r4, #0]
   344fc:	b151      	cbz	r1, 34514 <_sungetc_r+0x60>
   344fe:	4299      	cmp	r1, r3
   34500:	d208      	bcs.n	34514 <_sungetc_r+0x60>
   34502:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   34506:	42a9      	cmp	r1, r5
   34508:	d104      	bne.n	34514 <_sungetc_r+0x60>
   3450a:	3b01      	subs	r3, #1
   3450c:	3201      	adds	r2, #1
   3450e:	6023      	str	r3, [r4, #0]
   34510:	6062      	str	r2, [r4, #4]
   34512:	e7d5      	b.n	344c0 <_sungetc_r+0xc>
   34514:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   34518:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3451c:	6363      	str	r3, [r4, #52]	; 0x34
   3451e:	2303      	movs	r3, #3
   34520:	63a3      	str	r3, [r4, #56]	; 0x38
   34522:	4623      	mov	r3, r4
   34524:	f803 5f46 	strb.w	r5, [r3, #70]!
   34528:	6023      	str	r3, [r4, #0]
   3452a:	2301      	movs	r3, #1
   3452c:	e7dc      	b.n	344e8 <_sungetc_r+0x34>

0003452e <__ssrefill_r>:
   3452e:	b510      	push	{r4, lr}
   34530:	460c      	mov	r4, r1
   34532:	6b49      	ldr	r1, [r1, #52]	; 0x34
   34534:	b169      	cbz	r1, 34552 <__ssrefill_r+0x24>
   34536:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3453a:	4299      	cmp	r1, r3
   3453c:	d001      	beq.n	34542 <__ssrefill_r+0x14>
   3453e:	f7f8 ff01 	bl	2d344 <_free_r>
   34542:	2000      	movs	r0, #0
   34544:	6c23      	ldr	r3, [r4, #64]	; 0x40
   34546:	6360      	str	r0, [r4, #52]	; 0x34
   34548:	6063      	str	r3, [r4, #4]
   3454a:	b113      	cbz	r3, 34552 <__ssrefill_r+0x24>
   3454c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   3454e:	6023      	str	r3, [r4, #0]
   34550:	bd10      	pop	{r4, pc}
   34552:	6923      	ldr	r3, [r4, #16]
   34554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34558:	6023      	str	r3, [r4, #0]
   3455a:	2300      	movs	r3, #0
   3455c:	6063      	str	r3, [r4, #4]
   3455e:	89a3      	ldrh	r3, [r4, #12]
   34560:	f043 0320 	orr.w	r3, r3, #32
   34564:	81a3      	strh	r3, [r4, #12]
   34566:	e7f3      	b.n	34550 <__ssrefill_r+0x22>

00034568 <__sccl>:
   34568:	b570      	push	{r4, r5, r6, lr}
   3456a:	780b      	ldrb	r3, [r1, #0]
   3456c:	4604      	mov	r4, r0
   3456e:	2b5e      	cmp	r3, #94	; 0x5e
   34570:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   34574:	bf13      	iteet	ne
   34576:	1c48      	addne	r0, r1, #1
   34578:	1c88      	addeq	r0, r1, #2
   3457a:	784b      	ldrbeq	r3, [r1, #1]
   3457c:	2200      	movne	r2, #0
   3457e:	bf08      	it	eq
   34580:	2201      	moveq	r2, #1
   34582:	1e61      	subs	r1, r4, #1
   34584:	f801 2f01 	strb.w	r2, [r1, #1]!
   34588:	42a9      	cmp	r1, r5
   3458a:	d1fb      	bne.n	34584 <__sccl+0x1c>
   3458c:	b90b      	cbnz	r3, 34592 <__sccl+0x2a>
   3458e:	3801      	subs	r0, #1
   34590:	bd70      	pop	{r4, r5, r6, pc}
   34592:	f082 0201 	eor.w	r2, r2, #1
   34596:	4605      	mov	r5, r0
   34598:	54e2      	strb	r2, [r4, r3]
   3459a:	4628      	mov	r0, r5
   3459c:	f810 1b01 	ldrb.w	r1, [r0], #1
   345a0:	292d      	cmp	r1, #45	; 0x2d
   345a2:	d006      	beq.n	345b2 <__sccl+0x4a>
   345a4:	295d      	cmp	r1, #93	; 0x5d
   345a6:	d0f3      	beq.n	34590 <__sccl+0x28>
   345a8:	b909      	cbnz	r1, 345ae <__sccl+0x46>
   345aa:	4628      	mov	r0, r5
   345ac:	e7f0      	b.n	34590 <__sccl+0x28>
   345ae:	460b      	mov	r3, r1
   345b0:	e7f1      	b.n	34596 <__sccl+0x2e>
   345b2:	786e      	ldrb	r6, [r5, #1]
   345b4:	2e5d      	cmp	r6, #93	; 0x5d
   345b6:	d0fa      	beq.n	345ae <__sccl+0x46>
   345b8:	42b3      	cmp	r3, r6
   345ba:	dcf8      	bgt.n	345ae <__sccl+0x46>
   345bc:	3502      	adds	r5, #2
   345be:	4619      	mov	r1, r3
   345c0:	3101      	adds	r1, #1
   345c2:	428e      	cmp	r6, r1
   345c4:	5462      	strb	r2, [r4, r1]
   345c6:	dcfb      	bgt.n	345c0 <__sccl+0x58>
   345c8:	1af1      	subs	r1, r6, r3
   345ca:	1c58      	adds	r0, r3, #1
   345cc:	3901      	subs	r1, #1
   345ce:	42b3      	cmp	r3, r6
   345d0:	bfa8      	it	ge
   345d2:	2100      	movge	r1, #0
   345d4:	1843      	adds	r3, r0, r1
   345d6:	e7e0      	b.n	3459a <__sccl+0x32>

000345d8 <__submore>:
   345d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   345dc:	460c      	mov	r4, r1
   345de:	6b49      	ldr	r1, [r1, #52]	; 0x34
   345e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   345e4:	4299      	cmp	r1, r3
   345e6:	d11a      	bne.n	3461e <__submore+0x46>
   345e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
   345ec:	f7f8 fef6 	bl	2d3dc <_malloc_r>
   345f0:	b918      	cbnz	r0, 345fa <__submore+0x22>
   345f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   345f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   345fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   345fe:	6360      	str	r0, [r4, #52]	; 0x34
   34600:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   34604:	63a3      	str	r3, [r4, #56]	; 0x38
   34606:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   3460a:	7083      	strb	r3, [r0, #2]
   3460c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   34610:	7043      	strb	r3, [r0, #1]
   34612:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   34616:	7003      	strb	r3, [r0, #0]
   34618:	6020      	str	r0, [r4, #0]
   3461a:	2000      	movs	r0, #0
   3461c:	e7eb      	b.n	345f6 <__submore+0x1e>
   3461e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   34620:	0077      	lsls	r7, r6, #1
   34622:	463a      	mov	r2, r7
   34624:	f7ff fec5 	bl	343b2 <_realloc_r>
   34628:	4605      	mov	r5, r0
   3462a:	2800      	cmp	r0, #0
   3462c:	d0e1      	beq.n	345f2 <__submore+0x1a>
   3462e:	eb00 0806 	add.w	r8, r0, r6
   34632:	4601      	mov	r1, r0
   34634:	4632      	mov	r2, r6
   34636:	4640      	mov	r0, r8
   34638:	f7ff faf9 	bl	33c2e <memcpy>
   3463c:	f8c4 8000 	str.w	r8, [r4]
   34640:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   34644:	e7e9      	b.n	3461a <__submore+0x42>

00034646 <__ascii_wctomb>:
   34646:	b149      	cbz	r1, 3465c <__ascii_wctomb+0x16>
   34648:	2aff      	cmp	r2, #255	; 0xff
   3464a:	bf8d      	iteet	hi
   3464c:	238a      	movhi	r3, #138	; 0x8a
   3464e:	2001      	movls	r0, #1
   34650:	700a      	strbls	r2, [r1, #0]
   34652:	6003      	strhi	r3, [r0, #0]
   34654:	bf88      	it	hi
   34656:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   3465a:	4770      	bx	lr
   3465c:	4608      	mov	r0, r1
   3465e:	4770      	bx	lr

00034660 <_malloc_usable_size_r>:
   34660:	f851 3c04 	ldr.w	r3, [r1, #-4]
   34664:	1f18      	subs	r0, r3, #4
   34666:	2b00      	cmp	r3, #0
   34668:	bfbc      	itt	lt
   3466a:	580b      	ldrlt	r3, [r1, r0]
   3466c:	18c0      	addlt	r0, r0, r3
   3466e:	4770      	bx	lr

00034670 <abort>:
   34670:	2006      	movs	r0, #6
   34672:	b508      	push	{r3, lr}
   34674:	f7fb f818 	bl	2f6a8 <raise>
   34678:	2001      	movs	r0, #1
   3467a:	f7ee f8e9 	bl	22850 <_exit>

0003467e <_raise_r>:
   3467e:	291f      	cmp	r1, #31
   34680:	b538      	push	{r3, r4, r5, lr}
   34682:	4604      	mov	r4, r0
   34684:	460d      	mov	r5, r1
   34686:	d904      	bls.n	34692 <_raise_r+0x14>
   34688:	2316      	movs	r3, #22
   3468a:	6003      	str	r3, [r0, #0]
   3468c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   34690:	bd38      	pop	{r3, r4, r5, pc}
   34692:	6c42      	ldr	r2, [r0, #68]	; 0x44
   34694:	b112      	cbz	r2, 3469c <_raise_r+0x1e>
   34696:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   3469a:	b94b      	cbnz	r3, 346b0 <_raise_r+0x32>
   3469c:	4620      	mov	r0, r4
   3469e:	f000 f816 	bl	346ce <_getpid_r>
   346a2:	462a      	mov	r2, r5
   346a4:	4601      	mov	r1, r0
   346a6:	4620      	mov	r0, r4
   346a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   346ac:	f7fb b804 	b.w	2f6b8 <_kill_r>
   346b0:	2b01      	cmp	r3, #1
   346b2:	d00a      	beq.n	346ca <_raise_r+0x4c>
   346b4:	1c59      	adds	r1, r3, #1
   346b6:	d103      	bne.n	346c0 <_raise_r+0x42>
   346b8:	2316      	movs	r3, #22
   346ba:	6003      	str	r3, [r0, #0]
   346bc:	2001      	movs	r0, #1
   346be:	e7e7      	b.n	34690 <_raise_r+0x12>
   346c0:	2400      	movs	r4, #0
   346c2:	4628      	mov	r0, r5
   346c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   346c8:	4798      	blx	r3
   346ca:	2000      	movs	r0, #0
   346cc:	e7e0      	b.n	34690 <_raise_r+0x12>

000346ce <_getpid_r>:
   346ce:	f7fc badb 	b.w	30c88 <_getpid>
