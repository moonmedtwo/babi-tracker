
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	e0 fc 00 20 25 21 00 00 bb 61 00 00 f9 20 00 00     ... %!...a... ..
  10:	f9 20 00 00 f9 20 00 00 f9 20 00 00 f9 20 00 00     . ... ... ... ..
	...
  2c:	b1 1c 00 00 f9 20 00 00 00 00 00 00 f9 20 00 00     ..... ....... ..
  3c:	f9 20 00 00                                         . ..

00000040 <_irq_vector_table>:
  40:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
  50:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
  60:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
  70:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
  80:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
  90:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
  a0:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
  b0:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
  c0:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
  d0:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
  e0:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
  f0:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
 100:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
 110:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
 120:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
 130:	11 1d 00 00 11 1d 00 00 11 1d 00 00 11 1d 00 00     ................
 140:	11 1d 00 00                                         ....

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     158:	f000 b80c 	b.w	174 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f808 	bl	178 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__aeabi_idiv0>:
     174:	4770      	bx	lr
     176:	bf00      	nop

00000178 <__udivmoddi4>:
     178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     17c:	9e09      	ldr	r6, [sp, #36]	; 0x24
     17e:	4688      	mov	r8, r1
     180:	468e      	mov	lr, r1
     182:	4615      	mov	r5, r2
     184:	4604      	mov	r4, r0
     186:	4619      	mov	r1, r3
     188:	2b00      	cmp	r3, #0
     18a:	f040 80c6 	bne.w	31a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x1a>
     18e:	4542      	cmp	r2, r8
     190:	fab2 f782 	clz	r7, r2
     194:	d946      	bls.n	224 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x24>
     196:	b14f      	cbz	r7, 1ac <__udivmoddi4+0x34>
     198:	f1c7 0c20 	rsb	ip, r7, #32
     19c:	fa08 f307 	lsl.w	r3, r8, r7
     1a0:	40bd      	lsls	r5, r7
     1a2:	40bc      	lsls	r4, r7
     1a4:	fa20 fc0c 	lsr.w	ip, r0, ip
     1a8:	ea4c 0e03 	orr.w	lr, ip, r3
     1ac:	ea4f 4815 	mov.w	r8, r5, lsr #16
     1b0:	fa1f fc85 	uxth.w	ip, r5
     1b4:	0c22      	lsrs	r2, r4, #16
     1b6:	fbbe f9f8 	udiv	r9, lr, r8
     1ba:	fb08 e319 	mls	r3, r8, r9, lr
     1be:	fb09 fa0c 	mul.w	sl, r9, ip
     1c2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     1c6:	459a      	cmp	sl, r3
     1c8:	d928      	bls.n	21c <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x1c>
     1ca:	18eb      	adds	r3, r5, r3
     1cc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     1d0:	d204      	bcs.n	1dc <__udivmoddi4+0x64>
     1d2:	459a      	cmp	sl, r3
     1d4:	d902      	bls.n	1dc <__udivmoddi4+0x64>
     1d6:	f1a9 0002 	sub.w	r0, r9, #2
     1da:	442b      	add	r3, r5
     1dc:	eba3 030a 	sub.w	r3, r3, sl
     1e0:	b2a4      	uxth	r4, r4
     1e2:	fbb3 f2f8 	udiv	r2, r3, r8
     1e6:	fb08 3312 	mls	r3, r8, r2, r3
     1ea:	fb02 fc0c 	mul.w	ip, r2, ip
     1ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1f2:	45a4      	cmp	ip, r4
     1f4:	d914      	bls.n	220 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x20>
     1f6:	192c      	adds	r4, r5, r4
     1f8:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1fc:	d203      	bcs.n	206 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x6>
     1fe:	45a4      	cmp	ip, r4
     200:	d901      	bls.n	206 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x6>
     202:	1e93      	subs	r3, r2, #2
     204:	442c      	add	r4, r5
     206:	eba4 040c 	sub.w	r4, r4, ip
     20a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     20e:	b11e      	cbz	r6, 218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     210:	40fc      	lsrs	r4, r7
     212:	2300      	movs	r3, #0
     214:	6034      	str	r4, [r6, #0]
     216:	6073      	str	r3, [r6, #4]
     218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     21c:	4648      	mov	r0, r9
     21e:	e7dd      	b.n	1dc <__udivmoddi4+0x64>
     220:	4613      	mov	r3, r2
     222:	e7f0      	b.n	206 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x6>
     224:	b902      	cbnz	r2, 228 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x28>
     226:	deff      	udf	#255	; 0xff
     228:	bb8f      	cbnz	r7, 28e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xe>
     22a:	eba8 0302 	sub.w	r3, r8, r2
     22e:	2101      	movs	r1, #1
     230:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     234:	b2aa      	uxth	r2, r5
     236:	0c20      	lsrs	r0, r4, #16
     238:	fbb3 fcfe 	udiv	ip, r3, lr
     23c:	fb0e 331c 	mls	r3, lr, ip, r3
     240:	fb0c f802 	mul.w	r8, ip, r2
     244:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     248:	4598      	cmp	r8, r3
     24a:	d962      	bls.n	312 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x12>
     24c:	18eb      	adds	r3, r5, r3
     24e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     252:	d204      	bcs.n	25e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x5e>
     254:	4598      	cmp	r8, r3
     256:	d902      	bls.n	25e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x5e>
     258:	f1ac 0002 	sub.w	r0, ip, #2
     25c:	442b      	add	r3, r5
     25e:	eba3 0308 	sub.w	r3, r3, r8
     262:	b2a4      	uxth	r4, r4
     264:	fbb3 fcfe 	udiv	ip, r3, lr
     268:	fb0e 331c 	mls	r3, lr, ip, r3
     26c:	fb0c f202 	mul.w	r2, ip, r2
     270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     274:	42a2      	cmp	r2, r4
     276:	d94e      	bls.n	316 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x16>
     278:	192c      	adds	r4, r5, r4
     27a:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     27e:	d204      	bcs.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     280:	42a2      	cmp	r2, r4
     282:	d902      	bls.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     284:	f1ac 0302 	sub.w	r3, ip, #2
     288:	442c      	add	r4, r5
     28a:	1aa4      	subs	r4, r4, r2
     28c:	e7bd      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     28e:	f1c7 0c20 	rsb	ip, r7, #32
     292:	40bd      	lsls	r5, r7
     294:	fa08 f307 	lsl.w	r3, r8, r7
     298:	40bc      	lsls	r4, r7
     29a:	fa28 f90c 	lsr.w	r9, r8, ip
     29e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2a2:	fa20 fc0c 	lsr.w	ip, r0, ip
     2a6:	ea4c 0203 	orr.w	r2, ip, r3
     2aa:	b2ab      	uxth	r3, r5
     2ac:	fbb9 fcfe 	udiv	ip, r9, lr
     2b0:	0c11      	lsrs	r1, r2, #16
     2b2:	fb0e 901c 	mls	r0, lr, ip, r9
     2b6:	fb0c f803 	mul.w	r8, ip, r3
     2ba:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     2be:	4580      	cmp	r8, r0
     2c0:	d923      	bls.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     2c2:	1828      	adds	r0, r5, r0
     2c4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2c8:	d204      	bcs.n	2d4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x54>
     2ca:	4580      	cmp	r8, r0
     2cc:	d902      	bls.n	2d4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x54>
     2ce:	f1ac 0102 	sub.w	r1, ip, #2
     2d2:	4428      	add	r0, r5
     2d4:	eba0 0008 	sub.w	r0, r0, r8
     2d8:	b292      	uxth	r2, r2
     2da:	fbb0 fcfe 	udiv	ip, r0, lr
     2de:	fb0e 001c 	mls	r0, lr, ip, r0
     2e2:	fb0c f803 	mul.w	r8, ip, r3
     2e6:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2ea:	4598      	cmp	r8, r3
     2ec:	d90f      	bls.n	30e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe>
     2ee:	18eb      	adds	r3, r5, r3
     2f0:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2f4:	d204      	bcs.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     2f6:	4598      	cmp	r8, r3
     2f8:	d902      	bls.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     2fa:	f1ac 0202 	sub.w	r2, ip, #2
     2fe:	442b      	add	r3, r5
     300:	eba3 0308 	sub.w	r3, r3, r8
     304:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     308:	e792      	b.n	230 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x30>
     30a:	4661      	mov	r1, ip
     30c:	e7e2      	b.n	2d4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x54>
     30e:	4662      	mov	r2, ip
     310:	e7f6      	b.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     312:	4660      	mov	r0, ip
     314:	e7a3      	b.n	25e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x5e>
     316:	4663      	mov	r3, ip
     318:	e7b7      	b.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     31a:	4543      	cmp	r3, r8
     31c:	d905      	bls.n	32a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2a>
     31e:	b10e      	cbz	r6, 324 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x24>
     320:	e9c6 0800 	strd	r0, r8, [r6]
     324:	2100      	movs	r1, #0
     326:	4608      	mov	r0, r1
     328:	e776      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     32a:	fab3 fc83 	clz	ip, r3
     32e:	f1bc 0f00 	cmp.w	ip, #0
     332:	d110      	bne.n	356 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x56>
     334:	4543      	cmp	r3, r8
     336:	d301      	bcc.n	33c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x3c>
     338:	4282      	cmp	r2, r0
     33a:	d80a      	bhi.n	352 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x52>
     33c:	1a84      	subs	r4, r0, r2
     33e:	eb68 0303 	sbc.w	r3, r8, r3
     342:	2001      	movs	r0, #1
     344:	469e      	mov	lr, r3
     346:	2e00      	cmp	r6, #0
     348:	d068      	beq.n	41c <CONFIG_FLASH_SIZE+0x1c>
     34a:	e9c6 4e00 	strd	r4, lr, [r6]
     34e:	2100      	movs	r1, #0
     350:	e762      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>
     352:	4660      	mov	r0, ip
     354:	e7f7      	b.n	346 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x46>
     356:	f1cc 0e20 	rsb	lr, ip, #32
     35a:	fa03 f30c 	lsl.w	r3, r3, ip
     35e:	fa02 f50c 	lsl.w	r5, r2, ip
     362:	fa00 f70c 	lsl.w	r7, r0, ip
     366:	fa22 f40e 	lsr.w	r4, r2, lr
     36a:	fa28 fb0e 	lsr.w	fp, r8, lr
     36e:	fa20 f10e 	lsr.w	r1, r0, lr
     372:	431c      	orrs	r4, r3
     374:	fa08 f30c 	lsl.w	r3, r8, ip
     378:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37c:	4319      	orrs	r1, r3
     37e:	b2a3      	uxth	r3, r4
     380:	0c0a      	lsrs	r2, r1, #16
     382:	fbbb f8f9 	udiv	r8, fp, r9
     386:	fb09 bb18 	mls	fp, r9, r8, fp
     38a:	fb08 fa03 	mul.w	sl, r8, r3
     38e:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     392:	4592      	cmp	sl, r2
     394:	d93e      	bls.n	414 <CONFIG_FLASH_SIZE+0x14>
     396:	18a2      	adds	r2, r4, r2
     398:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     39c:	d204      	bcs.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     39e:	4592      	cmp	sl, r2
     3a0:	d902      	bls.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     3a2:	f1a8 0002 	sub.w	r0, r8, #2
     3a6:	4422      	add	r2, r4
     3a8:	eba2 020a 	sub.w	r2, r2, sl
     3ac:	b289      	uxth	r1, r1
     3ae:	fbb2 f8f9 	udiv	r8, r2, r9
     3b2:	fb09 2218 	mls	r2, r9, r8, r2
     3b6:	fb08 f303 	mul.w	r3, r8, r3
     3ba:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
     3be:	4293      	cmp	r3, r2
     3c0:	d92a      	bls.n	418 <CONFIG_FLASH_SIZE+0x18>
     3c2:	18a2      	adds	r2, r4, r2
     3c4:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
     3c8:	d204      	bcs.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     3ca:	4293      	cmp	r3, r2
     3cc:	d902      	bls.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     3ce:	f1a8 0102 	sub.w	r1, r8, #2
     3d2:	4422      	add	r2, r4
     3d4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     3d8:	1ad2      	subs	r2, r2, r3
     3da:	fba0 9805 	umull	r9, r8, r0, r5
     3de:	4542      	cmp	r2, r8
     3e0:	464b      	mov	r3, r9
     3e2:	4641      	mov	r1, r8
     3e4:	d302      	bcc.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3e6:	d106      	bne.n	3f6 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf6>
     3e8:	454f      	cmp	r7, r9
     3ea:	d204      	bcs.n	3f6 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf6>
     3ec:	3801      	subs	r0, #1
     3ee:	ebb9 0305 	subs.w	r3, r9, r5
     3f2:	eb68 0104 	sbc.w	r1, r8, r4
     3f6:	b18e      	cbz	r6, 41c <CONFIG_FLASH_SIZE+0x1c>
     3f8:	1afc      	subs	r4, r7, r3
     3fa:	eb62 0701 	sbc.w	r7, r2, r1
     3fe:	fa07 fe0e 	lsl.w	lr, r7, lr
     402:	fa24 f30c 	lsr.w	r3, r4, ip
     406:	fa27 f70c 	lsr.w	r7, r7, ip
     40a:	ea4e 0303 	orr.w	r3, lr, r3
     40e:	e9c6 3700 	strd	r3, r7, [r6]
     412:	e79c      	b.n	34e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x4e>
     414:	4640      	mov	r0, r8
     416:	e7c7      	b.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     418:	4641      	mov	r1, r8
     41a:	e7db      	b.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     41c:	4631      	mov	r1, r6
     41e:	e6fb      	b.n	218 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x18>

00000420 <main>:
    return (bool)pin_active;
}
#endif

void main(void)
{
     420:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     422:	4b2f      	ldr	r3, [pc, #188]	; (4e0 <FIH_LABEL_FIH_CALL_END_241+0x86>)
     424:	4a2f      	ldr	r2, [pc, #188]	; (4e4 <FIH_LABEL_FIH_CALL_END_241+0x8a>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     426:	2149      	movs	r1, #73	; 0x49
     428:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     42c:	482e      	ldr	r0, [pc, #184]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     42e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
{
     432:	b085      	sub	sp, #20
     434:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     438:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     43c:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     440:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     444:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     448:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
    BOOT_LOG_INF("Starting bootloader");
     44c:	f005 fe2d 	bl	60aa <z_log_minimal_printk>
#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
#endif

    os_heap_init();
     450:	f005 f9e4 	bl	581c <os_heap_init>

00000454 <FIH_LABEL_FIH_CALL_START_228>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     454:	a801      	add	r0, sp, #4
     456:	f000 fc61 	bl	d1c <boot_go>

0000045a <FIH_LABEL_FIH_CALL_END_241>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     45a:	4b24      	ldr	r3, [pc, #144]	; (4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>)
     45c:	681b      	ldr	r3, [r3, #0]
     45e:	4283      	cmp	r3, r0
     460:	d004      	beq.n	46c <FIH_LABEL_FIH_CALL_END_241+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     462:	2145      	movs	r1, #69	; 0x45
     464:	4822      	ldr	r0, [pc, #136]	; (4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>)
     466:	f005 fe20 	bl	60aa <z_log_minimal_printk>

        mcuboot_status_change(MCUBOOT_STATUS_NO_BOOTABLE_IMAGE_FOUND);

        FIH_PANIC;
     46a:	e7fe      	b.n	46a <FIH_LABEL_FIH_CALL_END_241+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     46c:	9a03      	ldr	r2, [sp, #12]
     46e:	2149      	movs	r1, #73	; 0x49
     470:	4820      	ldr	r0, [pc, #128]	; (4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>)
     472:	f005 fe1a 	bl	60aa <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     476:	2149      	movs	r1, #73	; 0x49
     478:	481f      	ldr	r0, [pc, #124]	; (4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>)
     47a:	f005 fe16 	bl	60aa <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     47e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     482:	2000      	movs	r0, #0
     484:	f002 fea2 	bl	31cc <fprotect_area>

    if (rc != 0) {
     488:	4604      	mov	r4, r0
     48a:	b120      	cbz	r0, 496 <FIH_LABEL_FIH_CALL_END_241+0x3c>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     48c:	2145      	movs	r1, #69	; 0x45
     48e:	481b      	ldr	r0, [pc, #108]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     490:	f005 fe0b 	bl	60aa <z_log_minimal_printk>
        while (1)
     494:	e7fe      	b.n	494 <FIH_LABEL_FIH_CALL_END_241+0x3a>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     496:	4669      	mov	r1, sp
     498:	f89d 0008 	ldrb.w	r0, [sp, #8]
     49c:	f000 f832 	bl	504 <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4a0:	9b00      	ldr	r3, [sp, #0]
     4a2:	9d03      	ldr	r5, [sp, #12]
     4a4:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     4a6:	9b01      	ldr	r3, [sp, #4]
     4a8:	891e      	ldrh	r6, [r3, #8]
    nrf_cleanup_peripheral();
     4aa:	f000 ff4b 	bl	1344 <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     4ae:	19af      	adds	r7, r5, r6
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     4b0:	f000 ff2c 	bl	130c <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     4b4:	f001 fe78 	bl	21a8 <z_arm_clear_arm_mpu_config>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
     4b8:	f384 880b 	msr	PSPLIM, r4
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
     4bc:	f384 880a 	msr	MSPLIM, r4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4c0:	59ab      	ldr	r3, [r5, r6]
     4c2:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     4c6:	f384 8814 	msr	CONTROL, r4
  __ASM volatile ("isb 0xF":::"memory");
     4ca:	f3bf 8f6f 	isb	sy
     4ce:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	4798      	blx	r3

    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
     4d6:	2145      	movs	r1, #69	; 0x45
     4d8:	4809      	ldr	r0, [pc, #36]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     4da:	f005 fde6 	bl	60aa <z_log_minimal_printk>
    while (1)
     4de:	e7fe      	b.n	4de <FIH_LABEL_FIH_CALL_END_241+0x84>
     4e0:	50018000 	.word	0x50018000
     4e4:	6e524635 	.word	0x6e524635
     4e8:	0000701c 	.word	0x0000701c
     4ec:	2000c6c0 	.word	0x2000c6c0
     4f0:	00007035 	.word	0x00007035
     4f4:	00007058 	.word	0x00007058
     4f8:	00007087 	.word	0x00007087
     4fc:	000070ac 	.word	0x000070ac
     500:	000070df 	.word	0x000070df

00000504 <flash_device_base>:
#endif

static const struct device *flash_dev = DEVICE_DT_GET(FLASH_DEVICE_NODE);

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     504:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     506:	b140      	cbz	r0, 51a <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     508:	4602      	mov	r2, r0
     50a:	2300      	movs	r3, #0
     50c:	4804      	ldr	r0, [pc, #16]	; (520 <flash_device_base+0x1c>)
     50e:	2145      	movs	r1, #69	; 0x45
     510:	f005 fdcb 	bl	60aa <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     514:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     518:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     51a:	6008      	str	r0, [r1, #0]
    return 0;
     51c:	e7fc      	b.n	518 <flash_device_base+0x14>
     51e:	bf00      	nop
     520:	00007102 	.word	0x00007102

00000524 <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     528:	461d      	mov	r5, r3
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     52a:	4b83      	ldr	r3, [pc, #524]	; (738 <FIH_LABEL_FIH_CALL_END_936+0x26>)
{
     52c:	b0db      	sub	sp, #364	; 0x16c
     52e:	4617      	mov	r7, r2
     530:	e9dd 4866 	ldrd	r4, r8, [sp, #408]	; 0x198
    fih_int valid_signature = FIH_FAILURE;
     534:	681e      	ldr	r6, [r3, #0]
{
     536:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
}

/* Enable and disable cc310 to reduce power consumption */
static inline void cc310_sha256_init(nrf_cc310_bl_hash_context_sha256_t * ctx)
{
    cc310_init();
     53a:	f000 feb5 	bl	12a8 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     53e:	2201      	movs	r2, #1
     540:	4b7e      	ldr	r3, [pc, #504]	; (73c <FIH_LABEL_FIH_CALL_END_936+0x2a>)
    nrf_cc310_enable();
    nrf_cc310_bl_hash_sha256_init(ctx);
     542:	a83a      	add	r0, sp, #232	; 0xe8
    NRF_CRYPTOCELL->ENABLE=1;
     544:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     548:	f004 f896 	bl	4678 <nrf_cc310_bl_hash_sha256_init>
    if (seed && (seed_len > 0)) {
     54c:	b13c      	cbz	r4, 55e <bootutil_img_validate+0x3a>
     54e:	f1b8 0f00 	cmp.w	r8, #0
     552:	dd04      	ble.n	55e <bootutil_img_validate+0x3a>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    cc310_sha256_update(ctx, data, data_len);
     554:	4642      	mov	r2, r8
     556:	4621      	mov	r1, r4
     558:	a83a      	add	r0, sp, #232	; 0xe8
     55a:	f005 fcb2 	bl	5ec2 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     55e:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     562:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     564:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     568:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     56a:	68fb      	ldr	r3, [r7, #12]
     56c:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     56e:	45c8      	cmp	r8, r9
     570:	d84e      	bhi.n	610 <FIH_LABEL_FIH_CALL_END_388+0xe>
}

static inline void cc310_sha256_finalize(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     572:	a90d      	add	r1, sp, #52	; 0x34
     574:	a83a      	add	r0, sp, #232	; 0xe8
     576:	f004 f8f1 	bl	475c <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     57a:	2200      	movs	r2, #0
     57c:	4b6f      	ldr	r3, [pc, #444]	; (73c <FIH_LABEL_FIH_CALL_END_936+0x2a>)
     57e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     582:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     586:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
     588:	b123      	cbz	r3, 594 <bootutil_img_validate+0x70>
        memcpy(out_hash, hash, 32);
     58a:	2220      	movs	r2, #32
     58c:	4618      	mov	r0, r3
     58e:	a90d      	add	r1, sp, #52	; 0x34
     590:	f005 fe32 	bl	61f8 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     594:	2300      	movs	r3, #0
     596:	462a      	mov	r2, r5
     598:	9300      	str	r3, [sp, #0]
     59a:	4639      	mov	r1, r7
     59c:	f64f 73ff 	movw	r3, #65535	; 0xffff
     5a0:	a807      	add	r0, sp, #28
     5a2:	f005 f93c 	bl	581e <bootutil_tlv_iter_begin>
    if (rc) {
     5a6:	4604      	mov	r4, r0
     5a8:	2800      	cmp	r0, #0
     5aa:	d144      	bne.n	636 <FIH_LABEL_FIH_CALL_END_388+0x34>
    int key_id = -1;
     5ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     5b0:	f8df a194 	ldr.w	sl, [pc, #404]	; 748 <FIH_LABEL_FIH_CALL_END_936+0x36>
     5b4:	f8df 8184 	ldr.w	r8, [pc, #388]	; 73c <FIH_LABEL_FIH_CALL_END_936+0x2a>
    int sha256_valid = 0;
     5b8:	9002      	str	r0, [sp, #8]
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     5ba:	f10d 0316 	add.w	r3, sp, #22
     5be:	aa05      	add	r2, sp, #20
     5c0:	a906      	add	r1, sp, #24
     5c2:	a807      	add	r0, sp, #28
     5c4:	f005 f977 	bl	58b6 <bootutil_tlv_iter_next>
        if (rc < 0) {
     5c8:	1e04      	subs	r4, r0, #0
     5ca:	db34      	blt.n	636 <FIH_LABEL_FIH_CALL_END_388+0x34>
        } else if (rc > 0) {
     5cc:	f040 80a4 	bne.w	718 <FIH_LABEL_FIH_CALL_END_936+0x6>
        if (type == IMAGE_TLV_SHA256) {
     5d0:	f8bd 9016 	ldrh.w	r9, [sp, #22]
     5d4:	f1b9 0f10 	cmp.w	r9, #16
     5d8:	d138      	bne.n	64c <FIH_LABEL_FIH_CALL_END_388+0x4a>
            if (len != sizeof(hash)) {
     5da:	f8bd 9014 	ldrh.w	r9, [sp, #20]
     5de:	f1b9 0f20 	cmp.w	r9, #32
     5e2:	f040 80a3 	bne.w	72c <FIH_LABEL_FIH_CALL_END_936+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     5e6:	464b      	mov	r3, r9
     5e8:	4628      	mov	r0, r5
     5ea:	9906      	ldr	r1, [sp, #24]
     5ec:	aa3a      	add	r2, sp, #232	; 0xe8
     5ee:	f005 fd6a 	bl	60c6 <flash_area_read>
            if (rc) {
     5f2:	4604      	mov	r4, r0
     5f4:	b9f8      	cbnz	r0, 636 <FIH_LABEL_FIH_CALL_END_388+0x34>

000005f6 <FIH_LABEL_FIH_CALL_START_369>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     5f6:	464a      	mov	r2, r9
     5f8:	a93a      	add	r1, sp, #232	; 0xe8
     5fa:	a80d      	add	r0, sp, #52	; 0x34
     5fc:	f005 f9d2 	bl	59a4 <boot_fih_memequal>
     600:	4604      	mov	r4, r0

00000602 <FIH_LABEL_FIH_CALL_END_388>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     602:	4b4f      	ldr	r3, [pc, #316]	; (740 <FIH_LABEL_FIH_CALL_END_936+0x2e>)
     604:	681b      	ldr	r3, [r3, #0]
     606:	4283      	cmp	r3, r0
     608:	d115      	bne.n	636 <FIH_LABEL_FIH_CALL_END_388+0x34>
            sha256_valid = 1;
     60a:	2301      	movs	r3, #1
     60c:	9302      	str	r3, [sp, #8]
     60e:	e7d4      	b.n	5ba <bootutil_img_validate+0x96>
        blk_sz = size - off;
     610:	9a65      	ldr	r2, [sp, #404]	; 0x194
     612:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     616:	429a      	cmp	r2, r3
     618:	bf28      	it	cs
     61a:	461a      	movcs	r2, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     61c:	4649      	mov	r1, r9
     61e:	4613      	mov	r3, r2
     620:	4692      	mov	sl, r2
     622:	4628      	mov	r0, r5
     624:	465a      	mov	r2, fp
     626:	f005 fd4e 	bl	60c6 <flash_area_read>
        if (rc) {
     62a:	4604      	mov	r4, r0
     62c:	b138      	cbz	r0, 63e <FIH_LABEL_FIH_CALL_END_388+0x3c>
     62e:	2200      	movs	r2, #0
     630:	4b42      	ldr	r3, [pc, #264]	; (73c <FIH_LABEL_FIH_CALL_END_936+0x2a>)
     632:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     636:	4620      	mov	r0, r4
     638:	b05b      	add	sp, #364	; 0x16c
     63a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     63e:	4652      	mov	r2, sl
     640:	4659      	mov	r1, fp
     642:	a83a      	add	r0, sp, #232	; 0xe8
     644:	f005 fc3d 	bl	5ec2 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     648:	44d1      	add	r9, sl
     64a:	e790      	b.n	56e <bootutil_img_validate+0x4a>
        } else if (type == IMAGE_TLV_KEYHASH) {
     64c:	f1b9 0f01 	cmp.w	r9, #1
     650:	d13e      	bne.n	6d0 <FIH_LABEL_FIH_CALL_END_388+0xce>
            if (len > 32) {
     652:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     656:	2b20      	cmp	r3, #32
     658:	d868      	bhi.n	72c <FIH_LABEL_FIH_CALL_END_936+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     65a:	4628      	mov	r0, r5
     65c:	9906      	ldr	r1, [sp, #24]
     65e:	aa3a      	add	r2, sp, #232	; 0xe8
     660:	f005 fd31 	bl	60c6 <flash_area_read>
            if (rc) {
     664:	4604      	mov	r4, r0
     666:	2800      	cmp	r0, #0
     668:	d1e5      	bne.n	636 <FIH_LABEL_FIH_CALL_END_388+0x34>
            key_id = bootutil_find_key(buf, len);
     66a:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     66e:	f1bb 0f20 	cmp.w	fp, #32
     672:	d809      	bhi.n	688 <FIH_LABEL_FIH_CALL_END_388+0x86>
    for (i = 0; i < bootutil_key_cnt; i++) {
     674:	f8da 3000 	ldr.w	r3, [sl]
     678:	4f32      	ldr	r7, [pc, #200]	; (744 <FIH_LABEL_FIH_CALL_END_936+0x32>)
     67a:	9303      	str	r3, [sp, #12]
     67c:	9b03      	ldr	r3, [sp, #12]
     67e:	429c      	cmp	r4, r3
     680:	db05      	blt.n	68e <FIH_LABEL_FIH_CALL_END_388+0x8c>
     682:	2300      	movs	r3, #0
     684:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
        return -1;
     688:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     68c:	e01c      	b.n	6c8 <FIH_LABEL_FIH_CALL_END_388+0xc6>
    cc310_init();
     68e:	f000 fe0b 	bl	12a8 <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     692:	f8c8 9500 	str.w	r9, [r8, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     696:	a81d      	add	r0, sp, #116	; 0x74
     698:	f003 ffee 	bl	4678 <nrf_cc310_bl_hash_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     69c:	687a      	ldr	r2, [r7, #4]
     69e:	a81d      	add	r0, sp, #116	; 0x74
     6a0:	6812      	ldr	r2, [r2, #0]
     6a2:	f857 1b08 	ldr.w	r1, [r7], #8
     6a6:	f005 fc0c 	bl	5ec2 <cc310_sha256_update>
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     6aa:	a915      	add	r1, sp, #84	; 0x54
     6ac:	a81d      	add	r0, sp, #116	; 0x74
     6ae:	f004 f855 	bl	475c <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     6b2:	2200      	movs	r2, #0
        if (!memcmp(hash, keyhash, keyhash_len)) {
     6b4:	a93a      	add	r1, sp, #232	; 0xe8
     6b6:	f8c8 2500 	str.w	r2, [r8, #1280]	; 0x500
     6ba:	a815      	add	r0, sp, #84	; 0x54
     6bc:	465a      	mov	r2, fp
     6be:	f005 fd8a 	bl	61d6 <memcmp>
     6c2:	b918      	cbnz	r0, 6cc <FIH_LABEL_FIH_CALL_END_388+0xca>
     6c4:	f8c8 0500 	str.w	r0, [r8, #1280]	; 0x500
            key_id = bootutil_find_key(buf, len);
     6c8:	4627      	mov	r7, r4
     6ca:	e776      	b.n	5ba <bootutil_img_validate+0x96>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6cc:	3401      	adds	r4, #1
     6ce:	e7d5      	b.n	67c <FIH_LABEL_FIH_CALL_END_388+0x7a>
        } else if (type == EXPECTED_SIG_TLV) {
     6d0:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
     6d4:	f47f af71 	bne.w	5ba <bootutil_img_validate+0x96>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     6d8:	1c7b      	adds	r3, r7, #1
     6da:	f43f af6e 	beq.w	5ba <bootutil_img_validate+0x96>
     6de:	f8da 3000 	ldr.w	r3, [sl]
     6e2:	42bb      	cmp	r3, r7
     6e4:	dd15      	ble.n	712 <FIH_LABEL_FIH_CALL_END_936>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     6e6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     6ea:	2b80      	cmp	r3, #128	; 0x80
     6ec:	d81e      	bhi.n	72c <FIH_LABEL_FIH_CALL_END_936+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6ee:	4628      	mov	r0, r5
     6f0:	9906      	ldr	r1, [sp, #24]
     6f2:	aa3a      	add	r2, sp, #232	; 0xe8
     6f4:	f005 fce7 	bl	60c6 <flash_area_read>
            if (rc) {
     6f8:	4604      	mov	r4, r0
     6fa:	2800      	cmp	r0, #0
     6fc:	d19b      	bne.n	636 <FIH_LABEL_FIH_CALL_END_388+0x34>

000006fe <FIH_LABEL_FIH_CALL_START_914>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     6fe:	b2ff      	uxtb	r7, r7
     700:	2120      	movs	r1, #32
     702:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     706:	9700      	str	r7, [sp, #0]
     708:	aa3a      	add	r2, sp, #232	; 0xe8
     70a:	a80d      	add	r0, sp, #52	; 0x34
     70c:	f000 f81e 	bl	74c <bootutil_verify_sig>
     710:	4606      	mov	r6, r0

00000712 <FIH_LABEL_FIH_CALL_END_936>:
                key_id = -1;
     712:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     716:	e750      	b.n	5ba <bootutil_img_validate+0x96>
    if (rc) {
     718:	9b02      	ldr	r3, [sp, #8]
     71a:	b153      	cbz	r3, 732 <FIH_LABEL_FIH_CALL_END_936+0x20>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     71c:	4b08      	ldr	r3, [pc, #32]	; (740 <FIH_LABEL_FIH_CALL_END_936+0x2e>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     71e:	681b      	ldr	r3, [r3, #0]
     720:	42b3      	cmp	r3, r6
     722:	d001      	beq.n	728 <FIH_LABEL_FIH_CALL_END_936+0x16>
        return FIH_FAILURE;
     724:	4b04      	ldr	r3, [pc, #16]	; (738 <FIH_LABEL_FIH_CALL_END_936+0x26>)
     726:	681e      	ldr	r6, [r3, #0]
                rc = -1;
     728:	4634      	mov	r4, r6
     72a:	e784      	b.n	636 <FIH_LABEL_FIH_CALL_END_388+0x34>
     72c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     730:	e781      	b.n	636 <FIH_LABEL_FIH_CALL_END_388+0x34>
     732:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     734:	e77f      	b.n	636 <FIH_LABEL_FIH_CALL_END_388+0x34>
     736:	bf00      	nop
     738:	2000c4e8 	.word	0x2000c4e8
     73c:	50840000 	.word	0x50840000
     740:	2000c6c0 	.word	0x2000c6c0
     744:	00006c6c 	.word	0x00006c6c
     748:	00006c68 	.word	0x00006c68

0000074c <bootutil_verify_sig>:
#endif /* not MCUBOOT_ECDSA_NEED_ASN1_SIG */

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     750:	b096      	sub	sp, #88	; 0x58
     752:	4617      	mov	r7, r2
     754:	461d      	mov	r5, r3
     756:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    uint8_t signature[2 * NUM_ECC_BYTES];
#endif

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     75a:	4b35      	ldr	r3, [pc, #212]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
{
     75c:	460e      	mov	r6, r1
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     75e:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
    end = pubkey + *bootutil_keys[key_id].len;
     762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     766:	685b      	ldr	r3, [r3, #4]
{
     768:	4680      	mov	r8, r0
    end = pubkey + *bootutil_keys[key_id].len;
     76a:	6818      	ldr	r0, [r3, #0]
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     76c:	9101      	str	r1, [sp, #4]
    if (mbedtls_asn1_get_tag(cp, end, &len,
     76e:	2330      	movs	r3, #48	; 0x30
     770:	4401      	add	r1, r0
     772:	aa02      	add	r2, sp, #8
     774:	a801      	add	r0, sp, #4
     776:	f005 fb31 	bl	5ddc <mbedtls_asn1_get_tag>
     77a:	b110      	cbz	r0, 782 <bootutil_verify_sig+0x36>
    }
    rc = mbedtls_ecdsa_read_signature(&ctx, hash, hlen, sig, slen);

#else /* CY_MBEDTLS_HW_ACCELERATION */
    if (hlen != NUM_ECC_BYTES) {
        return -1;
     77c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     780:	e053      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
    end = *cp + len;
     782:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
     786:	441c      	add	r4, r3
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     788:	4621      	mov	r1, r4
     78a:	ab06      	add	r3, sp, #24
     78c:	aa03      	add	r2, sp, #12
     78e:	a801      	add	r0, sp, #4
     790:	f005 fb4c 	bl	5e2c <mbedtls_asn1_get_alg>
     794:	2800      	cmp	r0, #0
     796:	d1f1      	bne.n	77c <bootutil_verify_sig+0x30>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     798:	9a04      	ldr	r2, [sp, #16]
     79a:	2a07      	cmp	r2, #7
     79c:	d1ee      	bne.n	77c <bootutil_verify_sig+0x30>
        memcmp(alg.MBEDTLS_CONTEXT_MEMBER(p), ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     79e:	4925      	ldr	r1, [pc, #148]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     7a0:	9805      	ldr	r0, [sp, #20]
     7a2:	f005 fd18 	bl	61d6 <memcmp>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     7a6:	2800      	cmp	r0, #0
     7a8:	d1e8      	bne.n	77c <bootutil_verify_sig+0x30>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     7aa:	9a07      	ldr	r2, [sp, #28]
     7ac:	2a08      	cmp	r2, #8
     7ae:	d1e5      	bne.n	77c <bootutil_verify_sig+0x30>
        memcmp(param.MBEDTLS_CONTEXT_MEMBER(p), ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     7b0:	4921      	ldr	r1, [pc, #132]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     7b2:	9808      	ldr	r0, [sp, #32]
     7b4:	f005 fd0f 	bl	61d6 <memcmp>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     7b8:	2800      	cmp	r0, #0
     7ba:	d1df      	bne.n	77c <bootutil_verify_sig+0x30>
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     7bc:	4621      	mov	r1, r4
     7be:	aa02      	add	r2, sp, #8
     7c0:	a801      	add	r0, sp, #4
     7c2:	f005 fb1f 	bl	5e04 <mbedtls_asn1_get_bitstring_null>
     7c6:	2800      	cmp	r0, #0
     7c8:	d1d8      	bne.n	77c <bootutil_verify_sig+0x30>
    if (*cp + len != end) {
     7ca:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
     7ce:	4413      	add	r3, r2
     7d0:	429c      	cmp	r4, r3
     7d2:	d1d3      	bne.n	77c <bootutil_verify_sig+0x30>
    if (len != 2 * NUM_ECC_BYTES + 1) {
     7d4:	2a41      	cmp	r2, #65	; 0x41
     7d6:	d1d1      	bne.n	77c <bootutil_verify_sig+0x30>
    rc = bootutil_decode_sig(signature, sig, sig + slen);
     7d8:	443d      	add	r5, r7
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     7da:	2330      	movs	r3, #48	; 0x30
     7dc:	4629      	mov	r1, r5
     7de:	aa03      	add	r2, sp, #12
     7e0:	a802      	add	r0, sp, #8
     7e2:	9702      	str	r7, [sp, #8]
     7e4:	f005 fafa 	bl	5ddc <mbedtls_asn1_get_tag>
    if (rc) {
     7e8:	2800      	cmp	r0, #0
     7ea:	d1c7      	bne.n	77c <bootutil_verify_sig+0x30>
    if (cp + len > end) {
     7ec:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     7f0:	4413      	add	r3, r2
     7f2:	429d      	cmp	r5, r3
     7f4:	d3c2      	bcc.n	77c <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature, &cp, end);
     7f6:	462a      	mov	r2, r5
     7f8:	a902      	add	r1, sp, #8
     7fa:	a806      	add	r0, sp, #24
     7fc:	f005 f8a6 	bl	594c <bootutil_read_bigint>
    if (rc) {
     800:	2800      	cmp	r0, #0
     802:	d1bb      	bne.n	77c <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     804:	462a      	mov	r2, r5
     806:	a902      	add	r1, sp, #8
     808:	a80e      	add	r0, sp, #56	; 0x38
     80a:	f005 f89f 	bl	594c <bootutil_read_bigint>
    if (rc) {
     80e:	2800      	cmp	r0, #0
     810:	d1b4      	bne.n	77c <bootutil_verify_sig+0x30>
    if (hlen != NUM_ECC_BYTES) {
     812:	2e20      	cmp	r6, #32
     814:	d1b2      	bne.n	77c <bootutil_verify_sig+0x30>

    bootutil_ecdsa_p256_init(&ctx);
#ifdef MCUBOOT_ECDSA_NEED_ASN1_SIG
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, sig, slen);
#else
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, signature,
     816:	9901      	ldr	r1, [sp, #4]
    (void)ctx;
    (void)pk_len;
    (void)sig_len;

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     818:	780b      	ldrb	r3, [r1, #0]
     81a:	2b04      	cmp	r3, #4
     81c:	d1ae      	bne.n	77c <bootutil_verify_sig+0x30>
        return -1;
    }
    pk++;

    return cc310_ecdsa_verify_secp256r1(hash, pk, sig, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE);
     81e:	4633      	mov	r3, r6
     820:	4640      	mov	r0, r8
     822:	aa06      	add	r2, sp, #24
     824:	3101      	adds	r1, #1
     826:	f000 fd57 	bl	12d8 <cc310_ecdsa_verify_secp256r1>
#endif /* CY_MBEDTLS_HW_ACCELERATION */

    bootutil_ecdsa_p256_drop(&ctx);

    return rc;
}
     82a:	b016      	add	sp, #88	; 0x58
     82c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     830:	00006c6c 	.word	0x00006c6c
     834:	00007128 	.word	0x00007128
     838:	00007130 	.word	0x00007130

0000083c <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     840:	2303      	movs	r3, #3
{
     842:	b086      	sub	sp, #24
     844:	460d      	mov	r5, r1
     846:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     848:	2600      	movs	r6, #0
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     84a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8b4 <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     84e:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     852:	f817 0b01 	ldrb.w	r0, [r7], #1
     856:	a901      	add	r1, sp, #4
     858:	f001 f91a 	bl	1a90 <flash_area_open>
        if (rc != 0) {
     85c:	4604      	mov	r4, r0
     85e:	b9a0      	cbnz	r0, 88a <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     860:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     862:	2310      	movs	r3, #16
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     864:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     866:	aa02      	add	r2, sp, #8
     868:	3910      	subs	r1, #16
     86a:	f005 fc2c 	bl	60c6 <flash_area_read>
     86e:	4604      	mov	r4, r0
        flash_area_close(*fap);
     870:	9801      	ldr	r0, [sp, #4]
     872:	f005 fc27 	bl	60c4 <flash_area_close>
        if (rc != 0) {
     876:	b944      	cbnz	r4, 88a <boot_read_swap_size+0x4e>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     878:	2210      	movs	r2, #16
     87a:	4641      	mov	r1, r8
     87c:	a802      	add	r0, sp, #8
     87e:	f005 fcaa 	bl	61d6 <memcmp>
     882:	b140      	cbz	r0, 896 <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     884:	b12e      	cbz	r6, 892 <boot_read_swap_size+0x56>
    return -1;
     886:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     88a:	4620      	mov	r0, r4
     88c:	b006      	add	sp, #24
     88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     892:	2601      	movs	r6, #1
     894:	e7dd      	b.n	852 <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     896:	9801      	ldr	r0, [sp, #4]
     898:	f005 fea1 	bl	65de <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     89c:	2304      	movs	r3, #4
     89e:	f1a0 0108 	sub.w	r1, r0, #8
     8a2:	462a      	mov	r2, r5
     8a4:	9801      	ldr	r0, [sp, #4]
     8a6:	f005 fc0e 	bl	60c6 <flash_area_read>
     8aa:	4604      	mov	r4, r0
        flash_area_close(fap);
     8ac:	9801      	ldr	r0, [sp, #4]
     8ae:	f005 fc09 	bl	60c4 <flash_area_close>
     8b2:	e7ea      	b.n	88a <boot_read_swap_size+0x4e>
     8b4:	0000700c 	.word	0x0000700c

000008b8 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     8bc:	4b38      	ldr	r3, [pc, #224]	; (9a0 <FIH_LABEL_FIH_CALL_END_296+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     8be:	b088      	sub	sp, #32
     8c0:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8c2:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     8c4:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     8c6:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8c8:	f004 ff9d 	bl	5806 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     8cc:	a906      	add	r1, sp, #24
     8ce:	b2c0      	uxtb	r0, r0
     8d0:	f001 f8de 	bl	1a90 <flash_area_open>
    if (rc != 0) {
     8d4:	2800      	cmp	r0, #0
     8d6:	d157      	bne.n	988 <FIH_LABEL_FIH_CALL_END_296+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     8d8:	4629      	mov	r1, r5
     8da:	f004 ff94 	bl	5806 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     8de:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     8e0:	a907      	add	r1, sp, #28
     8e2:	b2c0      	uxtb	r0, r0
     8e4:	fb04 6405 	mla	r4, r4, r5, r6
     8e8:	f001 f8d2 	bl	1a90 <flash_area_open>
    if (rc != 0) {
     8ec:	2800      	cmp	r0, #0
     8ee:	d036      	beq.n	95e <FIH_LABEL_FIH_CALL_END_296+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     8f0:	f04f 082c 	mov.w	r8, #44	; 0x2c
     8f4:	fb08 f805 	mul.w	r8, r8, r5
     8f8:	eb06 0708 	add.w	r7, r6, r8
     8fc:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     8fe:	f011 0110 	ands.w	r1, r1, #16
     902:	d137      	bne.n	974 <FIH_LABEL_FIH_CALL_END_296+0x54>

00000904 <FIH_LABEL_FIH_CALL_START_240>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     904:	f44f 7380 	mov.w	r3, #256	; 0x100
     908:	9301      	str	r3, [sp, #4]
     90a:	4b26      	ldr	r3, [pc, #152]	; (9a4 <FIH_LABEL_FIH_CALL_END_296+0x84>)
     90c:	4622      	mov	r2, r4
     90e:	9300      	str	r3, [sp, #0]
     910:	4608      	mov	r0, r1
     912:	e9cd 1103 	strd	r1, r1, [sp, #12]
     916:	9b06      	ldr	r3, [sp, #24]
     918:	9102      	str	r1, [sp, #8]
     91a:	f7ff fe03 	bl	524 <bootutil_img_validate>
     91e:	4604      	mov	r4, r0

00000920 <FIH_LABEL_FIH_CALL_END_296>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     920:	4b21      	ldr	r3, [pc, #132]	; (9a8 <FIH_LABEL_FIH_CALL_END_296+0x88>)
     922:	f856 2008 	ldr.w	r2, [r6, r8]
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     926:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     928:	429a      	cmp	r2, r3
     92a:	d10c      	bne.n	946 <FIH_LABEL_FIH_CALL_END_296+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     92c:	893a      	ldrh	r2, [r7, #8]
     92e:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     930:	43d1      	mvns	r1, r2
     932:	428b      	cmp	r3, r1
     934:	d807      	bhi.n	946 <FIH_LABEL_FIH_CALL_END_296+0x26>
        *dest = a + b;
     936:	4413      	add	r3, r2
    if (size >= flash_area_get_size(fap)) {
     938:	6882      	ldr	r2, [r0, #8]
     93a:	4293      	cmp	r3, r2
     93c:	d203      	bcs.n	946 <FIH_LABEL_FIH_CALL_END_296+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     93e:	4b1b      	ldr	r3, [pc, #108]	; (9ac <FIH_LABEL_FIH_CALL_END_296+0x8c>)
     940:	681b      	ldr	r3, [r3, #0]
     942:	42a3      	cmp	r3, r4
     944:	d01d      	beq.n	982 <FIH_LABEL_FIH_CALL_END_296+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     946:	b345      	cbz	r5, 99a <FIH_LABEL_FIH_CALL_END_296+0x7a>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     948:	6882      	ldr	r2, [r0, #8]
     94a:	2100      	movs	r1, #0
     94c:	f005 fbe5 	bl	611a <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     950:	4a17      	ldr	r2, [pc, #92]	; (9b0 <FIH_LABEL_FIH_CALL_END_296+0x90>)
     952:	2145      	movs	r1, #69	; 0x45
     954:	4817      	ldr	r0, [pc, #92]	; (9b4 <FIH_LABEL_FIH_CALL_END_296+0x94>)
     956:	f005 fba8 	bl	60aa <z_log_minimal_printk>
        fih_rc = fih_int_encode(1);
     95a:	2401      	movs	r4, #1
     95c:	e011      	b.n	982 <FIH_LABEL_FIH_CALL_END_296+0x62>
    erased_val = flash_area_erased_val(fap);
     95e:	9807      	ldr	r0, [sp, #28]
     960:	f005 fbf9 	bl	6156 <flash_area_erased_val>
     964:	4607      	mov	r7, r0
    flash_area_close(fap);
     966:	9807      	ldr	r0, [sp, #28]
     968:	f005 fbac 	bl	60c4 <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     96c:	1e63      	subs	r3, r4, #1
     96e:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     970:	4293      	cmp	r3, r2
     972:	d10d      	bne.n	990 <FIH_LABEL_FIH_CALL_END_296+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     974:	2d00      	cmp	r5, #0
     976:	d0f0      	beq.n	95a <FIH_LABEL_FIH_CALL_END_296+0x3a>
            swap_erase_trailer_sectors(state, fap);
     978:	4630      	mov	r0, r6
     97a:	9906      	ldr	r1, [sp, #24]
     97c:	f005 f90d 	bl	5b9a <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     980:	462c      	mov	r4, r5
        }
    }
#endif

out:
    flash_area_close(fap);
     982:	9806      	ldr	r0, [sp, #24]
     984:	f005 fb9e 	bl	60c4 <flash_area_close>

    FIH_RET(fih_rc);
}
     988:	4620      	mov	r0, r4
     98a:	b008      	add	sp, #32
     98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     990:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     994:	42b9      	cmp	r1, r7
     996:	d0eb      	beq.n	970 <FIH_LABEL_FIH_CALL_END_296+0x50>
     998:	e7aa      	b.n	8f0 <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     99a:	4a07      	ldr	r2, [pc, #28]	; (9b8 <FIH_LABEL_FIH_CALL_END_296+0x98>)
     99c:	e7d9      	b.n	952 <FIH_LABEL_FIH_CALL_END_296+0x32>
     99e:	bf00      	nop
     9a0:	2000c4e8 	.word	0x2000c4e8
     9a4:	2000d3d8 	.word	0x2000d3d8
     9a8:	96f3b83d 	.word	0x96f3b83d
     9ac:	2000c6c0 	.word	0x2000c6c0
     9b0:	00007139 	.word	0x00007139
     9b4:	0000714b 	.word	0x0000714b
     9b8:	00007143 	.word	0x00007143

000009bc <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     9bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
     9be:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     9c0:	2100      	movs	r1, #0
{
     9c2:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     9c4:	4628      	mov	r0, r5
    size = copy_size = 0;
     9c6:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     9ca:	f005 f8a5 	bl	5b18 <boot_status_is_reset>
     9ce:	b330      	cbz	r0, a1e <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     9d0:	4e16      	ldr	r6, [pc, #88]	; (a2c <boot_swap_image+0x70>)
     9d2:	6823      	ldr	r3, [r4, #0]
     9d4:	42b3      	cmp	r3, r6
     9d6:	d103      	bne.n	9e0 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     9d8:	4620      	mov	r0, r4
     9da:	aa01      	add	r2, sp, #4
     9dc:	f005 f831 	bl	5a42 <boot_read_image_size.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     9e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     9e2:	42b3      	cmp	r3, r6
     9e4:	d104      	bne.n	9f0 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     9e6:	466a      	mov	r2, sp
     9e8:	2101      	movs	r1, #1
     9ea:	4620      	mov	r0, r4
     9ec:	f005 f829 	bl	5a42 <boot_read_image_size.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        if (size > copy_size) {
     9f0:	e9dd 3200 	ldrd	r3, r2, [sp]
     9f4:	4293      	cmp	r3, r2
            copy_size = size;
     9f6:	bf88      	it	hi
     9f8:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     9fa:	9b01      	ldr	r3, [sp, #4]
     9fc:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     9fe:	9a01      	ldr	r2, [sp, #4]
     a00:	4629      	mov	r1, r5
     a02:	4620      	mov	r0, r4
     a04:	f000 fb34 	bl	1070 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     a08:	4b09      	ldr	r3, [pc, #36]	; (a30 <boot_swap_image+0x74>)
     a0a:	681a      	ldr	r2, [r3, #0]
     a0c:	2a00      	cmp	r2, #0
     a0e:	dd03      	ble.n	a18 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     a10:	2157      	movs	r1, #87	; 0x57
     a12:	4808      	ldr	r0, [pc, #32]	; (a34 <boot_swap_image+0x78>)
     a14:	f005 fb49 	bl	60aa <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     a18:	2000      	movs	r0, #0
     a1a:	b002      	add	sp, #8
     a1c:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     a1e:	f105 0108 	add.w	r1, r5, #8
     a22:	f7ff ff0b 	bl	83c <boot_read_swap_size>
        copy_size = bs->swap_size;
     a26:	68ab      	ldr	r3, [r5, #8]
     a28:	9301      	str	r3, [sp, #4]
     a2a:	e7e8      	b.n	9fe <boot_swap_image+0x42>
     a2c:	96f3b83d 	.word	0x96f3b83d
     a30:	2000d324 	.word	0x2000d324
     a34:	00007173 	.word	0x00007173

00000a38 <boot_copy_region>:
{
     a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a3c:	468a      	mov	sl, r1
     a3e:	4690      	mov	r8, r2
     a40:	4699      	mov	r9, r3
    bytes_copied = 0;
     a42:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a44:	f8df b070 	ldr.w	fp, [pc, #112]	; ab8 <boot_copy_region+0x80>
     a48:	4c19      	ldr	r4, [pc, #100]	; (ab0 <boot_copy_region+0x78>)
     a4a:	4d1a      	ldr	r5, [pc, #104]	; (ab4 <boot_copy_region+0x7c>)
    while (bytes_copied < sz) {
     a4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     a4e:	429e      	cmp	r6, r3
     a50:	d301      	bcc.n	a56 <boot_copy_region+0x1e>
    return 0;
     a52:	2000      	movs	r0, #0
     a54:	e00f      	b.n	a76 <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     a56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a58:	4650      	mov	r0, sl
        if (sz - bytes_copied > sizeof buf) {
     a5a:	1b9f      	subs	r7, r3, r6
     a5c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     a60:	bf28      	it	cs
     a62:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     a66:	4a14      	ldr	r2, [pc, #80]	; (ab8 <boot_copy_region+0x80>)
     a68:	463b      	mov	r3, r7
     a6a:	eb06 0109 	add.w	r1, r6, r9
     a6e:	f005 fb2a 	bl	60c6 <flash_area_read>
        if (rc != 0) {
     a72:	b110      	cbz	r0, a7a <boot_copy_region+0x42>
            return BOOT_EFLASH;
     a74:	2001      	movs	r0, #1
}
     a76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     a7a:	990a      	ldr	r1, [sp, #40]	; 0x28
     a7c:	463b      	mov	r3, r7
     a7e:	465a      	mov	r2, fp
     a80:	4640      	mov	r0, r8
     a82:	1871      	adds	r1, r6, r1
     a84:	f005 fb34 	bl	60f0 <flash_area_write>
        if (rc != 0) {
     a88:	2800      	cmp	r0, #0
     a8a:	d1f3      	bne.n	a74 <boot_copy_region+0x3c>
     a8c:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     a90:	443e      	add	r6, r7
     a92:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     a96:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     a9a:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     a9e:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     aa2:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     aa6:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     aaa:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     aae:	e7cd      	b.n	a4c <boot_copy_region+0x14>
     ab0:	50018000 	.word	0x50018000
     ab4:	6e524635 	.word	0x6e524635
     ab8:	2000c724 	.word	0x2000c724

00000abc <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     ac0:	460f      	mov	r7, r1

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ac2:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     ac4:	4b8d      	ldr	r3, [pc, #564]	; (cfc <FIH_LABEL_FIH_CALL_END_2425+0x46>)
{
     ac6:	b085      	sub	sp, #20
    fih_int fih_rc = FIH_FAILURE;
     ac8:	681e      	ldr	r6, [r3, #0]
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     aca:	4b8d      	ldr	r3, [pc, #564]	; (d00 <FIH_LABEL_FIH_CALL_END_2425+0x4a>)
{
     acc:	4604      	mov	r4, r0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     ace:	6243      	str	r3, [r0, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     ad0:	4b8c      	ldr	r3, [pc, #560]	; (d04 <FIH_LABEL_FIH_CALL_END_2425+0x4e>)
     ad2:	6503      	str	r3, [r0, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ad4:	4608      	mov	r0, r1
     ad6:	f004 fe96 	bl	5806 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     ada:	f104 0120 	add.w	r1, r4, #32
     ade:	b2c0      	uxtb	r0, r0
     ae0:	f000 ffd6 	bl	1a90 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     ae4:	2101      	movs	r1, #1
     ae6:	2000      	movs	r0, #0
     ae8:	f004 fe8d 	bl	5806 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     aec:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     af0:	b2c0      	uxtb	r0, r0
     af2:	f000 ffcd 	bl	1a90 <flash_area_open>
     af6:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     af8:	4620      	mov	r0, r4
     afa:	f004 ffe3 	bl	5ac4 <boot_read_sectors>
    if (rc != 0) {
     afe:	4680      	mov	r8, r0
     b00:	b968      	cbnz	r0, b1e <context_boot_go+0x62>
    rc = boot_read_image_headers(state, false, NULL);
     b02:	2200      	movs	r2, #0
     b04:	4620      	mov	r0, r4
     b06:	4611      	mov	r1, r2
     b08:	f004 ff82 	bl	5a10 <boot_read_image_headers>
    if (rc != 0) {
     b0c:	4680      	mov	r8, r0
     b0e:	b300      	cbz	r0, b52 <context_boot_go+0x96>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     b10:	2200      	movs	r2, #0
     b12:	2157      	movs	r1, #87	; 0x57
     b14:	487c      	ldr	r0, [pc, #496]	; (d08 <FIH_LABEL_FIH_CALL_END_2425+0x52>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     b16:	f005 fac8 	bl	60aa <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b1a:	2301      	movs	r3, #1
     b1c:	e091      	b.n	c42 <FIH_LABEL_FIH_CALL_END_2212+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     b1e:	2280      	movs	r2, #128	; 0x80
     b20:	2157      	movs	r1, #87	; 0x57
     b22:	487a      	ldr	r0, [pc, #488]	; (d0c <FIH_LABEL_FIH_CALL_END_2425+0x56>)
     b24:	f005 fac1 	bl	60aa <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b28:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     b2a:	4598      	cmp	r8, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     b2c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     b30:	d1e7      	bne.n	b02 <context_boot_go+0x46>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     b32:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     b36:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     b38:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     b3c:	f200 8084 	bhi.w	c48 <FIH_LABEL_FIH_CALL_END_2212+0x14>
     b40:	2b01      	cmp	r3, #1
     b42:	f200 8088 	bhi.w	c56 <FIH_LABEL_FIH_CALL_END_2212+0x22>
     b46:	f000 809f 	beq.w	c88 <FIH_LABEL_FIH_CALL_END_2212+0x54>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     b4a:	23ff      	movs	r3, #255	; 0xff
     b4c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     b50:	e09a      	b.n	c88 <FIH_LABEL_FIH_CALL_END_2212+0x54>
    if (boot_slots_compatible(state)) {
     b52:	4620      	mov	r0, r4
     b54:	f000 f9a4 	bl	ea0 <boot_slots_compatible>
     b58:	2800      	cmp	r0, #0
     b5a:	d0de      	beq.n	b1a <context_boot_go+0x5e>
        boot_status_reset(bs);
     b5c:	4668      	mov	r0, sp
     b5e:	f004 ffd2 	bl	5b06 <boot_status_reset>
        rc = swap_read_status(state, bs);
     b62:	4669      	mov	r1, sp
     b64:	4620      	mov	r0, r4
     b66:	f005 f86d 	bl	5c44 <swap_read_status>
        if (rc != 0) {
     b6a:	b118      	cbz	r0, b74 <context_boot_go+0xb8>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     b6c:	4642      	mov	r2, r8
     b6e:	2157      	movs	r1, #87	; 0x57
     b70:	4867      	ldr	r0, [pc, #412]	; (d10 <FIH_LABEL_FIH_CALL_END_2425+0x5a>)
     b72:	e7d0      	b.n	b16 <context_boot_go+0x5a>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     b74:	4668      	mov	r0, sp
     b76:	f004 ffcf 	bl	5b18 <boot_status_is_reset>
     b7a:	f080 0001 	eor.w	r0, r0, #1
     b7e:	466a      	mov	r2, sp
     b80:	b2c1      	uxtb	r1, r0
     b82:	4620      	mov	r0, r4
     b84:	f004 ff44 	bl	5a10 <boot_read_image_headers>
        if (rc != 0) {
     b88:	4602      	mov	r2, r0
     b8a:	2800      	cmp	r0, #0
     b8c:	d1c0      	bne.n	b10 <context_boot_go+0x54>
        if (!boot_status_is_reset(bs)) {
     b8e:	4668      	mov	r0, sp
     b90:	f004 ffc2 	bl	5b18 <boot_status_is_reset>
     b94:	4680      	mov	r8, r0
     b96:	bb60      	cbnz	r0, bf2 <context_boot_go+0x136>
    rc = boot_swap_image(state, bs);
     b98:	4669      	mov	r1, sp
     b9a:	4620      	mov	r0, r4
     b9c:	f7ff ff0e 	bl	9bc <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
     ba4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     ba8:	3b03      	subs	r3, #3
     baa:	2b01      	cmp	r3, #1
     bac:	d806      	bhi.n	bbc <context_boot_go+0x100>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     bae:	4640      	mov	r0, r8
     bb0:	f005 f897 	bl	5ce2 <swap_set_image_ok>
        if (rc != 0) {
     bb4:	b110      	cbz	r0, bbc <context_boot_go+0x100>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bb6:	23ff      	movs	r3, #255	; 0xff
     bb8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     bbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
     bc0:	3b02      	subs	r3, #2
     bc2:	2b02      	cmp	r3, #2
     bc4:	d80b      	bhi.n	bde <context_boot_go+0x122>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     bc6:	2000      	movs	r0, #0
     bc8:	f005 f879 	bl	5cbe <swap_set_copy_done>
        if (rc != 0) {
     bcc:	b138      	cbz	r0, bde <context_boot_go+0x122>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     bce:	23ff      	movs	r3, #255	; 0xff
     bd0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     bd4:	2145      	movs	r1, #69	; 0x45
     bd6:	484f      	ldr	r0, [pc, #316]	; (d14 <FIH_LABEL_FIH_CALL_END_2425+0x5e>)
     bd8:	f005 fa67 	bl	60aa <z_log_minimal_printk>
        while (1) {}
     bdc:	e7fe      	b.n	bdc <context_boot_go+0x120>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     bde:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     be2:	2bff      	cmp	r3, #255	; 0xff
     be4:	d0f6      	beq.n	bd4 <context_boot_go+0x118>
            rc = boot_read_image_headers(state, false, bs);
     be6:	466a      	mov	r2, sp
     be8:	2100      	movs	r1, #0
     bea:	4620      	mov	r0, r4
     bec:	f004 ff10 	bl	5a10 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     bf0:	e793      	b.n	b1a <context_boot_go+0x5e>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     bf2:	f89d 9007 	ldrb.w	r9, [sp, #7]
     bf6:	f1b9 0f01 	cmp.w	r9, #1
     bfa:	d117      	bne.n	c2c <FIH_LABEL_FIH_CALL_START_2192>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     bfc:	4610      	mov	r0, r2
     bfe:	f002 fb81 	bl	3304 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c02:	1e83      	subs	r3, r0, #2
     c04:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     c06:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     c08:	d80d      	bhi.n	c26 <FIH_LABEL_FIH_CALL_END_2127+0x14>

00000c0a <FIH_LABEL_FIH_CALL_START_2103>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     c0a:	4649      	mov	r1, r9
     c0c:	4620      	mov	r0, r4
     c0e:	f7ff fe53 	bl	8b8 <boot_validate_slot.isra.0>

00000c12 <FIH_LABEL_FIH_CALL_END_2127>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c12:	4b41      	ldr	r3, [pc, #260]	; (d18 <FIH_LABEL_FIH_CALL_END_2425+0x62>)
     c14:	681b      	ldr	r3, [r3, #0]
     c16:	4298      	cmp	r0, r3
     c18:	d005      	beq.n	c26 <FIH_LABEL_FIH_CALL_END_2127+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     c1a:	2801      	cmp	r0, #1
     c1c:	bf0c      	ite	eq
     c1e:	f04f 0801 	moveq.w	r8, #1
     c22:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     c26:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
     c2a:	e782      	b.n	b32 <context_boot_go+0x76>

00000c2c <FIH_LABEL_FIH_CALL_START_2192>:
                FIH_CALL(boot_validate_slot, fih_rc,
     c2c:	2101      	movs	r1, #1
     c2e:	4620      	mov	r0, r4
     c30:	f7ff fe42 	bl	8b8 <boot_validate_slot.isra.0>

00000c34 <FIH_LABEL_FIH_CALL_END_2212>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     c34:	4b38      	ldr	r3, [pc, #224]	; (d18 <FIH_LABEL_FIH_CALL_END_2425+0x62>)
     c36:	681b      	ldr	r3, [r3, #0]
     c38:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     c3a:	bf14      	ite	ne
     c3c:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c3e:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c42:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c46:	e774      	b.n	b32 <context_boot_go+0x76>
        switch (BOOT_SWAP_TYPE(state)) {
     c48:	2b05      	cmp	r3, #5
     c4a:	f47f af7e 	bne.w	b4a <context_boot_go+0x8e>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c4e:	2000      	movs	r0, #0
     c50:	f005 f847 	bl	5ce2 <swap_set_image_ok>
     c54:	e013      	b.n	c7e <FIH_LABEL_FIH_CALL_END_2212+0x4a>
        rc = boot_swap_image(state, bs);
     c56:	4669      	mov	r1, sp
     c58:	4620      	mov	r0, r4
     c5a:	f7ff feaf 	bl	9bc <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     c5e:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     c62:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     c64:	1eda      	subs	r2, r3, #3
     c66:	2a01      	cmp	r2, #1
     c68:	d80c      	bhi.n	c84 <FIH_LABEL_FIH_CALL_END_2212+0x50>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c6a:	2000      	movs	r0, #0
     c6c:	f005 f839 	bl	5ce2 <swap_set_image_ok>
        if (rc != 0) {
     c70:	4605      	mov	r5, r0
     c72:	2800      	cmp	r0, #0
     c74:	f47f af69 	bne.w	b4a <context_boot_go+0x8e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     c78:	2000      	movs	r0, #0
     c7a:	f005 f820 	bl	5cbe <swap_set_copy_done>
            if (rc != 0) {
     c7e:	4605      	mov	r5, r0
     c80:	b110      	cbz	r0, c88 <FIH_LABEL_FIH_CALL_END_2212+0x54>
     c82:	e762      	b.n	b4a <context_boot_go+0x8e>
    if (BOOT_IS_UPGRADE(swap_type)) {
     c84:	2b02      	cmp	r3, #2
     c86:	d0f7      	beq.n	c78 <FIH_LABEL_FIH_CALL_END_2212+0x44>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     c88:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     c8c:	2bff      	cmp	r3, #255	; 0xff
     c8e:	d104      	bne.n	c9a <FIH_LABEL_FIH_CALL_END_2212+0x66>
            BOOT_LOG_ERR("panic!");
     c90:	2145      	movs	r1, #69	; 0x45
     c92:	4820      	ldr	r0, [pc, #128]	; (d14 <FIH_LABEL_FIH_CALL_END_2425+0x5e>)
     c94:	f005 fa09 	bl	60aa <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     c98:	e7fe      	b.n	c98 <FIH_LABEL_FIH_CALL_END_2212+0x64>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     c9a:	2b01      	cmp	r3, #1
     c9c:	d006      	beq.n	cac <FIH_LABEL_FIH_CALL_START_2409>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     c9e:	466a      	mov	r2, sp
     ca0:	2100      	movs	r1, #0
     ca2:	4620      	mov	r0, r4
     ca4:	f004 feb4 	bl	5a10 <boot_read_image_headers>
            if (rc != 0) {
     ca8:	4605      	mov	r5, r0
     caa:	b9d0      	cbnz	r0, ce2 <FIH_LABEL_FIH_CALL_END_2425+0x2c>

00000cac <FIH_LABEL_FIH_CALL_START_2409>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     cac:	2100      	movs	r1, #0
     cae:	4620      	mov	r0, r4
     cb0:	f7ff fe02 	bl	8b8 <boot_validate_slot.isra.0>
     cb4:	4606      	mov	r6, r0

00000cb6 <FIH_LABEL_FIH_CALL_END_2425>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     cb6:	f8df 8060 	ldr.w	r8, [pc, #96]	; d18 <FIH_LABEL_FIH_CALL_END_2425+0x62>
     cba:	f8d8 3000 	ldr.w	r3, [r8]
     cbe:	4298      	cmp	r0, r3
     cc0:	d10f      	bne.n	ce2 <FIH_LABEL_FIH_CALL_END_2425+0x2c>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     cc2:	2210      	movs	r2, #16
     cc4:	2100      	movs	r1, #0
     cc6:	4668      	mov	r0, sp
     cc8:	f005 faa1 	bl	620e <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     ccc:	6a20      	ldr	r0, [r4, #32]
     cce:	f004 fda3 	bl	5818 <flash_area_get_device_id>
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
     cd2:	2500      	movs	r5, #0
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     cd4:	7138      	strb	r0, [r7, #4]
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     cd6:	6a23      	ldr	r3, [r4, #32]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     cd8:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     cdc:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     cde:	603c      	str	r4, [r7, #0]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     ce0:	60bb      	str	r3, [r7, #8]
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     ce2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     ce4:	f005 f9ee 	bl	60c4 <flash_area_close>
     ce8:	6a20      	ldr	r0, [r4, #32]
     cea:	f005 f9eb 	bl	60c4 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     cee:	2d00      	cmp	r5, #0
     cf0:	bf14      	ite	ne
     cf2:	4628      	movne	r0, r5
     cf4:	4630      	moveq	r0, r6
     cf6:	b005      	add	sp, #20
     cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     cfc:	2000c4e8 	.word	0x2000c4e8
     d00:	2000cb24 	.word	0x2000cb24
     d04:	2000cf24 	.word	0x2000cf24
     d08:	000071e4 	.word	0x000071e4
     d0c:	000071a2 	.word	0x000071a2
     d10:	00007210 	.word	0x00007210
     d14:	0000723a 	.word	0x0000723a
     d18:	2000c6c0 	.word	0x2000c6c0

00000d1c <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     d1c:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d1e:	4d06      	ldr	r5, [pc, #24]	; (d38 <FIH_LABEL_FIH_CALL_END_3111+0x4>)
{
     d20:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     d22:	2260      	movs	r2, #96	; 0x60
     d24:	2100      	movs	r1, #0
     d26:	4628      	mov	r0, r5
     d28:	f005 fa71 	bl	620e <memset>

00000d2c <FIH_LABEL_FIH_CALL_START_3096>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     d2c:	4621      	mov	r1, r4
     d2e:	4628      	mov	r0, r5
     d30:	f7ff fec4 	bl	abc <context_boot_go>

00000d34 <FIH_LABEL_FIH_CALL_END_3111>:
}
     d34:	bd38      	pop	{r3, r4, r5, pc}
     d36:	bf00      	nop
     d38:	2000c6c4 	.word	0x2000c6c4

00000d3c <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     d3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     d3e:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     d40:	461c      	mov	r4, r3
     d42:	b333      	cbz	r3, d92 <boot_read_image_header+0x56>
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     d44:	6a43      	ldr	r3, [r0, #36]	; 0x24
     d46:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     d48:	7963      	ldrb	r3, [r4, #5]
     d4a:	2b01      	cmp	r3, #1
     d4c:	d115      	bne.n	d7a <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     d4e:	bb01      	cbnz	r1, d92 <boot_read_image_header+0x56>
     d50:	4b1f      	ldr	r3, [pc, #124]	; (dd0 <boot_read_image_header+0x94>)
     d52:	6822      	ldr	r2, [r4, #0]
     d54:	681b      	ldr	r3, [r3, #0]
    off = 0;
     d56:	429a      	cmp	r2, r3
     d58:	bf98      	it	ls
     d5a:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     d5c:	2000      	movs	r0, #0
     d5e:	f004 fd52 	bl	5806 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     d62:	a901      	add	r1, sp, #4
     d64:	b2c0      	uxtb	r0, r0
     d66:	f000 fe93 	bl	1a90 <flash_area_open>
    if (rc != 0) {
     d6a:	b1f0      	cbz	r0, daa <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     d6c:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     d6e:	9801      	ldr	r0, [sp, #4]
     d70:	f005 f9a8 	bl	60c4 <flash_area_close>
    return rc;
}
     d74:	4628      	mov	r0, r5
     d76:	b002      	add	sp, #8
     d78:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     d7a:	2b02      	cmp	r3, #2
     d7c:	d109      	bne.n	d92 <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     d7e:	6823      	ldr	r3, [r4, #0]
     d80:	2b01      	cmp	r3, #1
     d82:	d908      	bls.n	d96 <boot_read_image_header+0x5a>
     d84:	4a12      	ldr	r2, [pc, #72]	; (dd0 <boot_read_image_header+0x94>)
     d86:	6812      	ldr	r2, [r2, #0]
     d88:	4293      	cmp	r3, r2
     d8a:	d802      	bhi.n	d92 <boot_read_image_header+0x56>
                if (slot == 0) {
     d8c:	fab1 f181 	clz	r1, r1
     d90:	0949      	lsrs	r1, r1, #5
    off = 0;
     d92:	2500      	movs	r5, #0
     d94:	e7e2      	b.n	d5c <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     d96:	d1fc      	bne.n	d92 <boot_read_image_header+0x56>
                if (slot == 0) {
     d98:	2900      	cmp	r1, #0
     d9a:	d0df      	beq.n	d5c <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     d9c:	2901      	cmp	r1, #1
     d9e:	d1f8      	bne.n	d92 <boot_read_image_header+0x56>
     da0:	7921      	ldrb	r1, [r4, #4]
     da2:	3902      	subs	r1, #2
     da4:	bf18      	it	ne
     da6:	2101      	movne	r1, #1
     da8:	e7f3      	b.n	d92 <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     daa:	4629      	mov	r1, r5
     dac:	2320      	movs	r3, #32
     dae:	4632      	mov	r2, r6
     db0:	9801      	ldr	r0, [sp, #4]
     db2:	f005 f988 	bl	60c6 <flash_area_read>
    if (rc != 0) {
     db6:	4605      	mov	r5, r0
     db8:	2800      	cmp	r0, #0
     dba:	d1d7      	bne.n	d6c <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     dbc:	2c00      	cmp	r4, #0
     dbe:	d0d6      	beq.n	d6e <boot_read_image_header+0x32>
     dc0:	6835      	ldr	r5, [r6, #0]
     dc2:	4804      	ldr	r0, [pc, #16]	; (dd4 <boot_read_image_header+0x98>)
     dc4:	1a2d      	subs	r5, r5, r0
     dc6:	bf18      	it	ne
     dc8:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
     dcc:	e7cf      	b.n	d6e <boot_read_image_header+0x32>
     dce:	bf00      	nop
     dd0:	2000c4ec 	.word	0x2000c4ec
     dd4:	96f3b83d 	.word	0x96f3b83d

00000dd8 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ddc:	4607      	mov	r7, r0
     dde:	460c      	mov	r4, r1
     de0:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     de2:	4601      	mov	r1, r0
     de4:	2000      	movs	r0, #0
{
     de6:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     de8:	f004 fde3 	bl	59b2 <boot_status_entries>
    if (max_entries < 0) {
     dec:	1e05      	subs	r5, r0, #0
     dee:	db51      	blt.n	e94 <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     df0:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     df2:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     df4:	f004 fdea 	bl	59cc <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     df8:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     dfc:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     e00:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     e04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     e08:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
     e0c:	fb09 0808 	mla	r8, r9, r8, r0
    for (i = max_entries; i > 0; i--) {
     e10:	b99d      	cbnz	r5, e3a <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     e12:	f1ba 0f01 	cmp.w	sl, #1
     e16:	dd03      	ble.n	e20 <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     e18:	2145      	movs	r1, #69	; 0x45
     e1a:	4820      	ldr	r0, [pc, #128]	; (e9c <swap_read_status_bytes+0xc4>)
     e1c:	f005 f945 	bl	60aa <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     e20:	1c63      	adds	r3, r4, #1
     e22:	d006      	beq.n	e32 <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     e24:	2c7f      	cmp	r4, #127	; 0x7f
     e26:	dc2a      	bgt.n	e7e <swap_read_status_bytes+0xa6>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e28:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e2c:	3401      	adds	r4, #1
     e2e:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     e30:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     e32:	4628      	mov	r0, r5
     e34:	b005      	add	sp, #20
     e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     e3a:	1e6b      	subs	r3, r5, #1
     e3c:	9300      	str	r3, [sp, #0]
     e3e:	4641      	mov	r1, r8
     e40:	2301      	movs	r3, #1
     e42:	4638      	mov	r0, r7
     e44:	f10d 020f 	add.w	r2, sp, #15
     e48:	f005 f93d 	bl	60c6 <flash_area_read>
        if (rc < 0) {
     e4c:	1e03      	subs	r3, r0, #0
     e4e:	9301      	str	r3, [sp, #4]
     e50:	db22      	blt.n	e98 <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     e52:	2201      	movs	r2, #1
     e54:	4638      	mov	r0, r7
     e56:	f10d 010f 	add.w	r1, sp, #15
     e5a:	f005 fbd4 	bl	6606 <bootutil_buffer_is_erased>
     e5e:	9b01      	ldr	r3, [sp, #4]
     e60:	b140      	cbz	r0, e74 <swap_read_status_bytes+0x9c>
            if (rc != last_rc) {
     e62:	455b      	cmp	r3, fp
     e64:	d001      	beq.n	e6a <swap_read_status_bytes+0x92>
                erased_sections++;
     e66:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     e6a:	469b      	mov	fp, r3
     e6c:	9d00      	ldr	r5, [sp, #0]
     e6e:	eba8 0809 	sub.w	r8, r8, r9
     e72:	e7cd      	b.n	e10 <swap_read_status_bytes+0x38>
     e74:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
     e78:	bf08      	it	eq
     e7a:	462c      	moveq	r4, r5
     e7c:	e7f5      	b.n	e6a <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
     e7e:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e80:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
     e82:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e84:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     e86:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e8a:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     e8c:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     e8e:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     e90:	7134      	strb	r4, [r6, #4]
     e92:	e7ce      	b.n	e32 <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
     e94:	2507      	movs	r5, #7
     e96:	e7cc      	b.n	e32 <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
     e98:	2501      	movs	r5, #1
     e9a:	e7ca      	b.n	e32 <swap_read_status_bytes+0x5a>
     e9c:	00007246 	.word	0x00007246

00000ea0 <boot_slots_compatible>:
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     ea0:	6a81      	ldr	r1, [r0, #40]	; 0x28
     ea2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     ea4:	b538      	push	{r3, r4, r5, lr}
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     ea6:	4291      	cmp	r1, r2
     ea8:	d008      	beq.n	ebc <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     eaa:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     eac:	428b      	cmp	r3, r1
     eae:	d005      	beq.n	ebc <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     eb0:	2157      	movs	r1, #87	; 0x57
     eb2:	4813      	ldr	r0, [pc, #76]	; (f00 <boot_slots_compatible+0x60>)

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     eb4:	f005 f8f9 	bl	60aa <z_log_minimal_printk>
            return 0;
     eb8:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     eba:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     ebc:	2980      	cmp	r1, #128	; 0x80
     ebe:	d91c      	bls.n	efa <boot_slots_compatible+0x5a>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     ec0:	2157      	movs	r1, #87	; 0x57
     ec2:	4810      	ldr	r0, [pc, #64]	; (f04 <boot_slots_compatible+0x64>)
     ec4:	e7f6      	b.n	eb4 <boot_slots_compatible+0x14>
     ec6:	6a44      	ldr	r4, [r0, #36]	; 0x24
     ec8:	6d05      	ldr	r5, [r0, #80]	; 0x50
     eca:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     ece:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     ed2:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     ed4:	686d      	ldr	r5, [r5, #4]
     ed6:	42ac      	cmp	r4, r5
     ed8:	d002      	beq.n	ee0 <boot_slots_compatible+0x40>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     eda:	2157      	movs	r1, #87	; 0x57
     edc:	480a      	ldr	r0, [pc, #40]	; (f08 <boot_slots_compatible+0x68>)
     ede:	e7e9      	b.n	eb4 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
     ee0:	3301      	adds	r3, #1
     ee2:	429a      	cmp	r2, r3
     ee4:	d1ef      	bne.n	ec6 <boot_slots_compatible+0x26>
    if (num_sectors_pri > num_sectors_sec) {
     ee6:	4291      	cmp	r1, r2
     ee8:	d905      	bls.n	ef6 <boot_slots_compatible+0x56>
     eea:	6a43      	ldr	r3, [r0, #36]	; 0x24
     eec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
     ef0:	6853      	ldr	r3, [r2, #4]
     ef2:	42a3      	cmp	r3, r4
     ef4:	d1f1      	bne.n	eda <boot_slots_compatible+0x3a>
    return 1;
     ef6:	2001      	movs	r0, #1
     ef8:	e7df      	b.n	eba <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
     efa:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
     efc:	461c      	mov	r4, r3
     efe:	e7f0      	b.n	ee2 <boot_slots_compatible+0x42>
     f00:	00007269 	.word	0x00007269
     f04:	000072a1 	.word	0x000072a1
     f08:	000072d0 	.word	0x000072d0

00000f0c <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
     f0c:	b500      	push	{lr}
     f0e:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     f10:	2003      	movs	r0, #3
     f12:	a904      	add	r1, sp, #16
     f14:	f005 fbdd 	bl	66d2 <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     f18:	f89d 2010 	ldrb.w	r2, [sp, #16]
     f1c:	2a01      	cmp	r2, #1
     f1e:	d041      	beq.n	fa4 <swap_status_source+0x98>
     f20:	4b25      	ldr	r3, [pc, #148]	; (fb8 <swap_status_source+0xac>)
     f22:	4926      	ldr	r1, [pc, #152]	; (fbc <swap_status_source+0xb0>)
     f24:	2a03      	cmp	r2, #3
     f26:	bf18      	it	ne
     f28:	460b      	movne	r3, r1
     f2a:	f89d 2013 	ldrb.w	r2, [sp, #19]
     f2e:	2149      	movs	r1, #73	; 0x49
     f30:	9202      	str	r2, [sp, #8]
     f32:	f89d 2012 	ldrb.w	r2, [sp, #18]
     f36:	4822      	ldr	r0, [pc, #136]	; (fc0 <swap_status_source+0xb4>)
     f38:	9201      	str	r2, [sp, #4]
     f3a:	f89d 2011 	ldrb.w	r2, [sp, #17]
     f3e:	9200      	str	r2, [sp, #0]
     f40:	4a20      	ldr	r2, [pc, #128]	; (fc4 <swap_status_source+0xb8>)
     f42:	f005 f8b2 	bl	60aa <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
     f46:	2009      	movs	r0, #9
     f48:	a906      	add	r1, sp, #24
     f4a:	f005 fbc2 	bl	66d2 <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     f4e:	f89d 2018 	ldrb.w	r2, [sp, #24]
     f52:	2a01      	cmp	r2, #1
     f54:	d028      	beq.n	fa8 <swap_status_source+0x9c>
     f56:	4b18      	ldr	r3, [pc, #96]	; (fb8 <swap_status_source+0xac>)
     f58:	4918      	ldr	r1, [pc, #96]	; (fbc <swap_status_source+0xb0>)
     f5a:	2a03      	cmp	r2, #3
     f5c:	bf18      	it	ne
     f5e:	460b      	movne	r3, r1
     f60:	f89d 201b 	ldrb.w	r2, [sp, #27]
     f64:	2149      	movs	r1, #73	; 0x49
     f66:	9202      	str	r2, [sp, #8]
     f68:	f89d 201a 	ldrb.w	r2, [sp, #26]
     f6c:	4814      	ldr	r0, [pc, #80]	; (fc0 <swap_status_source+0xb4>)
     f6e:	9201      	str	r2, [sp, #4]
     f70:	f89d 2019 	ldrb.w	r2, [sp, #25]
     f74:	9200      	str	r2, [sp, #0]
     f76:	4a14      	ldr	r2, [pc, #80]	; (fc8 <swap_status_source+0xbc>)
     f78:	f005 f897 	bl	60aa <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
     f7c:	f89d 3010 	ldrb.w	r3, [sp, #16]
     f80:	2b01      	cmp	r3, #1
     f82:	d113      	bne.n	fac <swap_status_source+0xa0>
     f84:	f89d 3012 	ldrb.w	r3, [sp, #18]
     f88:	2b03      	cmp	r3, #3
     f8a:	d10f      	bne.n	fac <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
     f8c:	f89d 3018 	ldrb.w	r3, [sp, #24]
     f90:	2b01      	cmp	r3, #1
     f92:	d00b      	beq.n	fac <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
     f94:	480d      	ldr	r0, [pc, #52]	; (fcc <swap_status_source+0xc0>)
     f96:	2149      	movs	r1, #73	; 0x49
     f98:	f005 f887 	bl	60aa <z_log_minimal_printk>
        return source;
     f9c:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
     f9e:	b009      	add	sp, #36	; 0x24
     fa0:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
     fa4:	4b0a      	ldr	r3, [pc, #40]	; (fd0 <swap_status_source+0xc4>)
     fa6:	e7c0      	b.n	f2a <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
     fa8:	4b09      	ldr	r3, [pc, #36]	; (fd0 <swap_status_source+0xc4>)
     faa:	e7d9      	b.n	f60 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
     fac:	4809      	ldr	r0, [pc, #36]	; (fd4 <swap_status_source+0xc8>)
     fae:	2149      	movs	r1, #73	; 0x49
     fb0:	f005 f87b 	bl	60aa <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
     fb4:	2000      	movs	r0, #0
     fb6:	e7f2      	b.n	f9e <swap_status_source+0x92>
     fb8:	00007301 	.word	0x00007301
     fbc:	00007307 	.word	0x00007307
     fc0:	00007319 	.word	0x00007319
     fc4:	0000730b 	.word	0x0000730b
     fc8:	0000735a 	.word	0x0000735a
     fcc:	0000736a 	.word	0x0000736a
     fd0:	000072fc 	.word	0x000072fc
     fd4:	00007389 	.word	0x00007389

00000fd8 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
     fd8:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     fda:	684b      	ldr	r3, [r1, #4]
{
     fdc:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     fde:	4a1e      	ldr	r2, [pc, #120]	; (1058 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x58>)
     fe0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
     fe4:	4293      	cmp	r3, r2
{
     fe6:	4606      	mov	r6, r0
     fe8:	460d      	mov	r5, r1
     fea:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
     fec:	d12f      	bne.n	104e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4e>
        bs->op != BOOT_STATUS_OP_MOVE ||
     fee:	680b      	ldr	r3, [r1, #0]
     ff0:	2b01      	cmp	r3, #1
     ff2:	d12c      	bne.n	104e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4e>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
     ff4:	4620      	mov	r0, r4
     ff6:	a904      	add	r1, sp, #16
     ff8:	f002 f930 	bl	325c <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
     ffc:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1000:	2a01      	cmp	r2, #1
    1002:	d026      	beq.n	1052 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x52>
    1004:	4b15      	ldr	r3, [pc, #84]	; (105c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5c>)
    1006:	4916      	ldr	r1, [pc, #88]	; (1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>)
    1008:	2a03      	cmp	r2, #3
    100a:	bf18      	it	ne
    100c:	460b      	movne	r3, r1
    100e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    1012:	2149      	movs	r1, #73	; 0x49
    1014:	9202      	str	r2, [sp, #8]
    1016:	f89d 2012 	ldrb.w	r2, [sp, #18]
    101a:	4812      	ldr	r0, [pc, #72]	; (1064 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x64>)
    101c:	9201      	str	r2, [sp, #4]
    101e:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1022:	9200      	str	r2, [sp, #0]
    1024:	4a10      	ldr	r2, [pc, #64]	; (1068 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x68>)
    1026:	f005 f840 	bl	60aa <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    102a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    102e:	2b03      	cmp	r3, #3
    1030:	d10d      	bne.n	104e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4e>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1032:	4621      	mov	r1, r4
    1034:	4630      	mov	r0, r6
    1036:	f004 fdb0 	bl	5b9a <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    103a:	4620      	mov	r0, r4
    103c:	f005 fb3c 	bl	66b8 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    1040:	4620      	mov	r0, r4
    1042:	68a9      	ldr	r1, [r5, #8]
    1044:	f004 fcd5 	bl	59f2 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    1048:	4620      	mov	r0, r4
    104a:	f002 f8e7 	bl	321c <boot_write_magic>
        assert(rc == 0);
    }
}
    104e:	b006      	add	sp, #24
    1050:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1052:	4b06      	ldr	r3, [pc, #24]	; (106c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6c>)
    1054:	e7db      	b.n	100e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xe>
    1056:	bf00      	nop
    1058:	04000100 	.word	0x04000100
    105c:	00007301 	.word	0x00007301
    1060:	00007307 	.word	0x00007307
    1064:	00007319 	.word	0x00007319
    1068:	0000735a 	.word	0x0000735a
    106c:	000072fc 	.word	0x000072fc

00001070 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    1070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1074:	ed2d 8b02 	vpush	{d8}
    1078:	4605      	mov	r5, r0
    107a:	460c      	mov	r4, r1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    BOOT_LOG_INF("Starting swap using move algorithm.");
    107c:	4885      	ldr	r0, [pc, #532]	; (1294 <swap_run+0x224>)
    107e:	2149      	movs	r1, #73	; 0x49
{
    1080:	b089      	sub	sp, #36	; 0x24
    1082:	4617      	mov	r7, r2
    BOOT_LOG_INF("Starting swap using move algorithm.");
    1084:	f005 f811 	bl	60aa <z_log_minimal_printk>
    1088:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    108a:	2201      	movs	r2, #1
    108c:	685e      	ldr	r6, [r3, #4]

    sz = 0;
    108e:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    1090:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    1092:	42bb      	cmp	r3, r7
    1094:	4611      	mov	r1, r2
    1096:	f102 0201 	add.w	r2, r2, #1
    109a:	d3f9      	bcc.n	1090 <swap_run+0x20>
    109c:	f8df b200 	ldr.w	fp, [pc, #512]	; 12a0 <swap_run+0x230>
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    10a0:	4620      	mov	r0, r4
    10a2:	f8cb 1000 	str.w	r1, [fp]
    10a6:	f004 fd37 	bl	5b18 <boot_status_is_reset>
    10aa:	b318      	cbz	r0, 10f4 <swap_run+0x84>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    10ac:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    10ae:	f004 fc7b 	bl	59a8 <boot_trailer_sz>
        sz = 0;
    10b2:	2300      	movs	r3, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    10b4:	6aaf      	ldr	r7, [r5, #40]	; 0x28
    10b6:	3f01      	subs	r7, #1

        while (1) {
            sz += sector_sz;
    10b8:	4433      	add	r3, r6
            if  (sz >= trailer_sz) {
    10ba:	4283      	cmp	r3, r0
    10bc:	d201      	bcs.n	10c2 <swap_run+0x52>
                break;
            }
            first_trailer_idx--;
    10be:	3f01      	subs	r7, #1
            sz += sector_sz;
    10c0:	e7fa      	b.n	10b8 <swap_run+0x48>
        }

        if (g_last_idx >= first_trailer_idx) {
    10c2:	f8db 3000 	ldr.w	r3, [fp]
    10c6:	42bb      	cmp	r3, r7
    10c8:	d314      	bcc.n	10f4 <swap_run+0x84>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    10ca:	2157      	movs	r1, #87	; 0x57
    10cc:	4872      	ldr	r0, [pc, #456]	; (1298 <swap_run+0x228>)
    10ce:	f004 ffec 	bl	60aa <z_log_minimal_printk>
            BOOT_LOG_WRN("required %d bytes but only %d are available",
    10d2:	f8db 2000 	ldr.w	r2, [fp]
    10d6:	fb07 f306 	mul.w	r3, r7, r6
    10da:	2157      	movs	r1, #87	; 0x57
    10dc:	fb02 6206 	mla	r2, r2, r6, r6
    10e0:	486e      	ldr	r0, [pc, #440]	; (129c <swap_run+0x22c>)
    10e2:	f004 ffe2 	bl	60aa <z_log_minimal_printk>
                         (g_last_idx + 1) * sector_sz ,
                         first_trailer_idx * sector_sz);
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    10e6:	2301      	movs	r3, #1
    10e8:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    10ea:	b009      	add	sp, #36	; 0x24
    10ec:	ecbd 8b02 	vpop	{d8}
    10f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    10f4:	a906      	add	r1, sp, #24
    10f6:	2003      	movs	r0, #3
    10f8:	f000 fcca 	bl	1a90 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    10fc:	a907      	add	r1, sp, #28
    10fe:	2009      	movs	r0, #9
    1100:	f000 fcc6 	bl	1a90 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    1104:	4621      	mov	r1, r4
    1106:	4628      	mov	r0, r5
    1108:	9a07      	ldr	r2, [sp, #28]
    110a:	f7ff ff65 	bl	fd8 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    110e:	7963      	ldrb	r3, [r4, #5]
    1110:	2b01      	cmp	r3, #1
    1112:	d108      	bne.n	1126 <swap_run+0xb6>
        idx = g_last_idx;
    1114:	f8db 7000 	ldr.w	r7, [fp]
    BOOT_STATUS_ASSERT(rc == 0);
    1118:	f8df a188 	ldr.w	sl, [pc, #392]	; 12a4 <swap_run+0x234>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    111c:	f8db 3000 	ldr.w	r3, [fp]
        while (idx > 0) {
    1120:	b9a7      	cbnz	r7, 114c <swap_run+0xdc>
        bs->idx = BOOT_STATUS_IDX_0;
    1122:	2301      	movs	r3, #1
    1124:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    1126:	f04f 0302 	mov.w	r3, #2
    idx = 1;
    112a:	2701      	movs	r7, #1
        BOOT_STATUS_ASSERT(rc == 0);
    112c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 12a4 <swap_run+0x234>
    bs->op = BOOT_STATUS_OP_SWAP;
    1130:	7163      	strb	r3, [r4, #5]
    while (idx <= g_last_idx) {
    1132:	f8db 3000 	ldr.w	r3, [fp]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1136:	f8dd 9018 	ldr.w	r9, [sp, #24]
    while (idx <= g_last_idx) {
    113a:	429f      	cmp	r7, r3
    113c:	d94d      	bls.n	11da <swap_run+0x16a>
    flash_area_close(fap_pri);
    113e:	4648      	mov	r0, r9
    1140:	f004 ffc0 	bl	60c4 <flash_area_close>
    flash_area_close(fap_sec);
    1144:	9807      	ldr	r0, [sp, #28]
    1146:	f004 ffbd 	bl	60c4 <flash_area_close>
    114a:	e7ce      	b.n	10ea <swap_run+0x7a>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    114c:	6822      	ldr	r2, [r4, #0]
    114e:	3301      	adds	r3, #1
    1150:	1a9b      	subs	r3, r3, r2
    1152:	429f      	cmp	r7, r3
    1154:	d83f      	bhi.n	11d6 <swap_run+0x166>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    1156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    1158:	2a01      	cmp	r2, #1
	return fs->fs_off;
    115a:	6819      	ldr	r1, [r3, #0]
    115c:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    1160:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    1164:	f853 3c08 	ldr.w	r3, [r3, #-8]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    1168:	f8dd 8018 	ldr.w	r8, [sp, #24]
    116c:	eba3 0301 	sub.w	r3, r3, r1
    1170:	ee08 3a10 	vmov	s16, r3
    1174:	eba0 0901 	sub.w	r9, r0, r1
    if (bs->idx == BOOT_STATUS_IDX_0) {
    1178:	d112      	bne.n	11a0 <swap_run+0x130>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    117a:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    117c:	9b07      	ldr	r3, [sp, #28]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    117e:	2a02      	cmp	r2, #2
    1180:	d00a      	beq.n	1198 <swap_run+0x128>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    1182:	4641      	mov	r1, r8
    1184:	4628      	mov	r0, r5
    1186:	9302      	str	r3, [sp, #8]
    1188:	f004 fd07 	bl	5b9a <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    118c:	4622      	mov	r2, r4
    118e:	4641      	mov	r1, r8
    1190:	4628      	mov	r0, r5
    1192:	f004 fd38 	bl	5c06 <swap_status_init>
    1196:	9b02      	ldr	r3, [sp, #8]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1198:	4619      	mov	r1, r3
    119a:	4628      	mov	r0, r5
    119c:	f004 fcfd 	bl	5b9a <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    11a0:	4632      	mov	r2, r6
    11a2:	4649      	mov	r1, r9
    11a4:	4640      	mov	r0, r8
    11a6:	f004 fcf6 	bl	5b96 <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    11aa:	ee18 3a10 	vmov	r3, s16
    11ae:	4642      	mov	r2, r8
    11b0:	4641      	mov	r1, r8
    11b2:	4628      	mov	r0, r5
    11b4:	e9cd 9600 	strd	r9, r6, [sp]
    11b8:	f7ff fc3e 	bl	a38 <boot_copy_region>
    rc = boot_write_status(state, bs);
    11bc:	4621      	mov	r1, r4
    11be:	4628      	mov	r0, r5
    11c0:	f004 fcb7 	bl	5b32 <boot_write_status>
    bs->idx++;
    11c4:	6823      	ldr	r3, [r4, #0]
    11c6:	3301      	adds	r3, #1
    11c8:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    11ca:	b120      	cbz	r0, 11d6 <swap_run+0x166>
    11cc:	f8da 3000 	ldr.w	r3, [sl]
    11d0:	3301      	adds	r3, #1
    11d2:	f8ca 3000 	str.w	r3, [sl]
            idx--;
    11d6:	3f01      	subs	r7, #1
    11d8:	e7a0      	b.n	111c <swap_run+0xac>
        if (idx >= bs->idx) {
    11da:	6823      	ldr	r3, [r4, #0]
    11dc:	429f      	cmp	r7, r3
    11de:	d357      	bcc.n	1290 <swap_run+0x220>
    11e0:	6a69      	ldr	r1, [r5, #36]	; 0x24
    11e2:	6d28      	ldr	r0, [r5, #80]	; 0x50
    11e4:	f851 3037 	ldr.w	r3, [r1, r7, lsl #3]
    11e8:	00fa      	lsls	r2, r7, #3
    11ea:	9303      	str	r3, [sp, #12]
    11ec:	680b      	ldr	r3, [r1, #0]
    11ee:	3a08      	subs	r2, #8
    11f0:	f850 c002 	ldr.w	ip, [r0, r2]
    11f4:	9302      	str	r3, [sp, #8]
    11f6:	6803      	ldr	r3, [r0, #0]
    if (bs->state == BOOT_STATUS_STATE_0) {
    11f8:	7920      	ldrb	r0, [r4, #4]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    11fa:	f8dd a01c 	ldr.w	sl, [sp, #28]
    if (bs->state == BOOT_STATUS_STATE_0) {
    11fe:	2801      	cmp	r0, #1
    1200:	ebac 0303 	sub.w	r3, ip, r3
    1204:	d142      	bne.n	128c <swap_run+0x21c>
    1206:	5889      	ldr	r1, [r1, r2]
    1208:	9305      	str	r3, [sp, #20]
    120a:	9b02      	ldr	r3, [sp, #8]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    120c:	4632      	mov	r2, r6
    120e:	1ac9      	subs	r1, r1, r3
    1210:	4648      	mov	r0, r9
    1212:	9104      	str	r1, [sp, #16]
    1214:	f004 fcbf 	bl	5b96 <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    1218:	9904      	ldr	r1, [sp, #16]
    121a:	9b05      	ldr	r3, [sp, #20]
    121c:	464a      	mov	r2, r9
    121e:	9100      	str	r1, [sp, #0]
    1220:	4628      	mov	r0, r5
    1222:	4651      	mov	r1, sl
    1224:	9601      	str	r6, [sp, #4]
    1226:	9304      	str	r3, [sp, #16]
    1228:	f7ff fc06 	bl	a38 <boot_copy_region>
        rc = boot_write_status(state, bs);
    122c:	4621      	mov	r1, r4
    122e:	4628      	mov	r0, r5
    1230:	f004 fc7f 	bl	5b32 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1234:	f04f 0302 	mov.w	r3, #2
    1238:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    123a:	9b04      	ldr	r3, [sp, #16]
    123c:	b120      	cbz	r0, 1248 <swap_run+0x1d8>
    123e:	f8d8 2000 	ldr.w	r2, [r8]
    1242:	3201      	adds	r2, #1
    1244:	f8c8 2000 	str.w	r2, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    1248:	4619      	mov	r1, r3
    124a:	4632      	mov	r2, r6
    124c:	4650      	mov	r0, sl
    124e:	9304      	str	r3, [sp, #16]
    1250:	f004 fca1 	bl	5b96 <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1254:	9b04      	ldr	r3, [sp, #16]
    1256:	4649      	mov	r1, r9
    1258:	9300      	str	r3, [sp, #0]
    125a:	4628      	mov	r0, r5
    125c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1260:	9601      	str	r6, [sp, #4]
    1262:	1a9b      	subs	r3, r3, r2
    1264:	4652      	mov	r2, sl
    1266:	f7ff fbe7 	bl	a38 <boot_copy_region>
        rc = boot_write_status(state, bs);
    126a:	4621      	mov	r1, r4
    126c:	4628      	mov	r0, r5
    126e:	f004 fc60 	bl	5b32 <boot_write_status>
        bs->idx++;
    1272:	6823      	ldr	r3, [r4, #0]
    1274:	3301      	adds	r3, #1
    1276:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    1278:	f04f 0301 	mov.w	r3, #1
    127c:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    127e:	b138      	cbz	r0, 1290 <swap_run+0x220>
    1280:	f8d8 3000 	ldr.w	r3, [r8]
    1284:	3301      	adds	r3, #1
    1286:	f8c8 3000 	str.w	r3, [r8]
    128a:	e001      	b.n	1290 <swap_run+0x220>
    if (bs->state == BOOT_STATUS_STATE_1) {
    128c:	2802      	cmp	r0, #2
    128e:	d0db      	beq.n	1248 <swap_run+0x1d8>
        idx++;
    1290:	3701      	adds	r7, #1
    1292:	e74e      	b.n	1132 <swap_run+0xc2>
    1294:	000073a0 	.word	0x000073a0
    1298:	000073c9 	.word	0x000073c9
    129c:	000073f8 	.word	0x000073f8
    12a0:	2000c4ec 	.word	0x2000c4ec
    12a4:	2000d324 	.word	0x2000d324

000012a8 <cc310_init>:
 */

#include "cc310_glue.h"

int cc310_init(void)
{
    12a8:	b570      	push	{r4, r5, r6, lr}
    /* Only initialize once */
    static bool initialized;

    if (!initialized) {
    12aa:	4d09      	ldr	r5, [pc, #36]	; (12d0 <cc310_init+0x28>)
    12ac:	782b      	ldrb	r3, [r5, #0]
    12ae:	b953      	cbnz	r3, 12c6 <cc310_init+0x1e>
    NRF_CRYPTOCELL->ENABLE=1;
    12b0:	2601      	movs	r6, #1
    12b2:	4c08      	ldr	r4, [pc, #32]	; (12d4 <cc310_init+0x2c>)
    12b4:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        nrf_cc310_enable();
        if (nrf_cc310_bl_init() != 0) {
    12b8:	f003 fa80 	bl	47bc <nrf_cc310_bl_init>
    12bc:	b928      	cbnz	r0, 12ca <cc310_init+0x22>
            return -1;
        }
        initialized = true;
    12be:	702e      	strb	r6, [r5, #0]
    NRF_CRYPTOCELL->ENABLE=0;
    12c0:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        nrf_cc310_disable();
    }

    return 0;
}
    12c4:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    12c6:	2000      	movs	r0, #0
    12c8:	e7fc      	b.n	12c4 <cc310_init+0x1c>
            return -1;
    12ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    12ce:	e7f9      	b.n	12c4 <cc310_init+0x1c>
    12d0:	2000d4d8 	.word	0x2000d4d8
    12d4:	50840000 	.word	0x50840000

000012d8 <cc310_ecdsa_verify_secp256r1>:

int cc310_ecdsa_verify_secp256r1(uint8_t *hash,
                                 uint8_t *public_key,
                                 uint8_t *signature,
                                 size_t hash_len)
{
    12d8:	b570      	push	{r4, r5, r6, lr}
    12da:	b0ae      	sub	sp, #184	; 0xb8
    12dc:	461d      	mov	r5, r3
    12de:	4604      	mov	r4, r0
    12e0:	e9cd 2102 	strd	r2, r1, [sp, #8]
        int rc;
        nrf_cc310_bl_ecdsa_verify_context_secp256r1_t ctx;
        cc310_init();
    12e4:	f7ff ffe0 	bl	12a8 <cc310_init>
        nrf_cc310_enable();
        rc = nrf_cc310_bl_ecdsa_verify_secp256r1(&ctx,
    12e8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    NRF_CRYPTOCELL->ENABLE=1;
    12ec:	2301      	movs	r3, #1
    12ee:	4e06      	ldr	r6, [pc, #24]	; (1308 <cc310_ecdsa_verify_secp256r1+0x30>)
    12f0:	a805      	add	r0, sp, #20
    12f2:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
    12f6:	4623      	mov	r3, r4
    12f8:	9500      	str	r5, [sp, #0]
    12fa:	f005 fae1 	bl	68c0 <nrf_cc310_bl_ecdsa_verify_secp256r1>
    NRF_CRYPTOCELL->ENABLE=0;
    12fe:	2300      	movs	r3, #0
    1300:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
                                                 (nrf_cc310_bl_ecc_signature_secp256r1_t  *) signature,
                                                 hash,
                                                 hash_len);
        nrf_cc310_disable();
        return rc;
}
    1304:	b02e      	add	sp, #184	; 0xb8
    1306:	bd70      	pop	{r4, r5, r6, pc}
    1308:	50840000 	.word	0x50840000

0000130c <cleanup_arm_nvic>:
    130c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    1310:	b672      	cpsid	i
    1312:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1318:	4a09      	ldr	r2, [pc, #36]	; (1340 <cleanup_arm_nvic+0x34>)
    131a:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    131e:	3301      	adds	r3, #1
    1320:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1322:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1326:	d1f8      	bne.n	131a <cleanup_arm_nvic+0xe>
    1328:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    132a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    132e:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1332:	3301      	adds	r3, #1
    1334:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1336:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    133a:	d1f8      	bne.n	132e <cleanup_arm_nvic+0x22>
	}
}
    133c:	4770      	bx	lr
    133e:	bf00      	nop
    1340:	e000e100 	.word	0xe000e100

00001344 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    1344:	b510      	push	{r4, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1346:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1348:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    134c:	2100      	movs	r1, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    134e:	4b19      	ldr	r3, [pc, #100]	; (13b4 <nrf_cleanup_peripheral+0x70>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1350:	4819      	ldr	r0, [pc, #100]	; (13b8 <nrf_cleanup_peripheral+0x74>)
    1352:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1354:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1358:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    135c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1360:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1362:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1366:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    136a:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    136e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    1372:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    1374:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1378:	f004 ff49 	bl	620e <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    137c:	2280      	movs	r2, #128	; 0x80
    137e:	2100      	movs	r1, #0
    1380:	480e      	ldr	r0, [pc, #56]	; (13bc <nrf_cleanup_peripheral+0x78>)
    1382:	f004 ff44 	bl	620e <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1386:	2100      	movs	r1, #0
    1388:	4b0d      	ldr	r3, [pc, #52]	; (13c0 <nrf_cleanup_peripheral+0x7c>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    138a:	2280      	movs	r2, #128	; 0x80
    138c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    1390:	480c      	ldr	r0, [pc, #48]	; (13c4 <nrf_cleanup_peripheral+0x80>)
    p_reg->INTENCLR = mask;
    1392:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    1396:	f004 ff3a 	bl	620e <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    139a:	2280      	movs	r2, #128	; 0x80
    139c:	2100      	movs	r1, #0
    139e:	480a      	ldr	r0, [pc, #40]	; (13c8 <nrf_cleanup_peripheral+0x84>)
    13a0:	f004 ff35 	bl	620e <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    13a4:	4b09      	ldr	r3, [pc, #36]	; (13cc <nrf_cleanup_peripheral+0x88>)
    13a6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    13aa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    13ae:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    13b2:	bd10      	pop	{r4, pc}
    13b4:	50014000 	.word	0x50014000
    13b8:	50008080 	.word	0x50008080
    13bc:	50008180 	.word	0x50008180
    13c0:	50009000 	.word	0x50009000
    13c4:	50009080 	.word	0x50009080
    13c8:	50009180 	.word	0x50009180
    13cc:	50017000 	.word	0x50017000

000013d0 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    13d0:	4b01      	ldr	r3, [pc, #4]	; (13d8 <char_out+0x8>)
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	4718      	bx	r3
    13d6:	bf00      	nop
    13d8:	2000c4f0 	.word	0x2000c4f0

000013dc <__printk_hook_install>:
	_char_out = fn;
    13dc:	4b01      	ldr	r3, [pc, #4]	; (13e4 <__printk_hook_install+0x8>)
    13de:	6018      	str	r0, [r3, #0]
}
    13e0:	4770      	bx	lr
    13e2:	bf00      	nop
    13e4:	2000c4f0 	.word	0x2000c4f0

000013e8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    13e8:	b507      	push	{r0, r1, r2, lr}
    13ea:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    13ec:	2100      	movs	r1, #0
    13ee:	4602      	mov	r2, r0
    13f0:	9100      	str	r1, [sp, #0]
    13f2:	4803      	ldr	r0, [pc, #12]	; (1400 <vprintk+0x18>)
    13f4:	f000 f8ea 	bl	15cc <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    13f8:	b003      	add	sp, #12
    13fa:	f85d fb04 	ldr.w	pc, [sp], #4
    13fe:	bf00      	nop
    1400:	000013d1 	.word	0x000013d1

00001404 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1408:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    140c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    140e:	f019 0808 	ands.w	r8, r9, #8
{
    1412:	4693      	mov	fp, r2
	if (processing) {
    1414:	d00e      	beq.n	1434 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    1416:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1418:	bf0c      	ite	eq
    141a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    141e:	f049 0920 	orrne.w	r9, r9, #32
    1422:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1426:	f38b 8811 	msr	BASEPRI, fp
    142a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    142e:	b003      	add	sp, #12
    1430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    1434:	f8df a190 	ldr.w	sl, [pc, #400]	; 15c8 <process_event+0x1c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1438:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    143c:	2902      	cmp	r1, #2
    143e:	d107      	bne.n	1450 <process_event+0x4c>
			evt = process_recheck(mgr);
    1440:	4620      	mov	r0, r4
    1442:	f004 fd85 	bl	5f50 <process_recheck>
		if (evt == EVT_NOP) {
    1446:	2800      	cmp	r0, #0
    1448:	d0ed      	beq.n	1426 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    144a:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    144c:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    144e:	d14b      	bne.n	14e8 <process_event+0xe4>
			res = mgr->last_res;
    1450:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1452:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1454:	2f00      	cmp	r7, #0
    1456:	da15      	bge.n	1484 <process_event+0x80>
		*clients = mgr->clients;
    1458:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    145a:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    145e:	e9c4 8800 	strd	r8, r8, [r4]
    1462:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1466:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1468:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    146a:	8b21      	ldrh	r1, [r4, #24]
    146c:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1470:	454a      	cmp	r2, r9
    1472:	d002      	beq.n	147a <process_event+0x76>
		if (do_monitors
    1474:	68a3      	ldr	r3, [r4, #8]
    1476:	2b00      	cmp	r3, #0
    1478:	d157      	bne.n	152a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    147a:	b90d      	cbnz	r5, 1480 <process_event+0x7c>
		    || (transit != NULL)) {
    147c:	2e00      	cmp	r6, #0
    147e:	d06f      	beq.n	1560 <process_event+0x15c>
    1480:	2300      	movs	r3, #0
    1482:	e053      	b.n	152c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1484:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1488:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    148a:	2a01      	cmp	r2, #1
    148c:	d81d      	bhi.n	14ca <process_event+0xc6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    148e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1492:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1494:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1496:	b289      	uxth	r1, r1
    1498:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    149c:	d10a      	bne.n	14b4 <process_event+0xb0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    149e:	b13d      	cbz	r5, 14b0 <process_event+0xac>
    14a0:	462a      	mov	r2, r5
    14a2:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    14a4:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    14a6:	3301      	adds	r3, #1
    14a8:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    14aa:	2a00      	cmp	r2, #0
    14ac:	d1fa      	bne.n	14a4 <process_event+0xa0>
    14ae:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14b0:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    14b4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    14b6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    14b8:	f004 fd4a 	bl	5f50 <process_recheck>
    14bc:	2800      	cmp	r0, #0
    14be:	d0d3      	beq.n	1468 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14c0:	8b23      	ldrh	r3, [r4, #24]
    14c2:	f043 0320 	orr.w	r3, r3, #32
    14c6:	8323      	strh	r3, [r4, #24]
    14c8:	e7ce      	b.n	1468 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    14ca:	2b04      	cmp	r3, #4
    14cc:	d10a      	bne.n	14e4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14ce:	f021 0107 	bic.w	r1, r1, #7
    14d2:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    14d4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    14d6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    14d8:	f004 fd3a 	bl	5f50 <process_recheck>
    14dc:	b110      	cbz	r0, 14e4 <process_event+0xe0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14de:	f041 0120 	orr.w	r1, r1, #32
    14e2:	8321      	strh	r1, [r4, #24]
    14e4:	2500      	movs	r5, #0
    14e6:	e7bf      	b.n	1468 <process_event+0x64>
		} else if (evt == EVT_START) {
    14e8:	2803      	cmp	r0, #3
    14ea:	d109      	bne.n	1500 <process_event+0xfc>
			transit = mgr->transitions->start;
    14ec:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14ee:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    14f2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14f4:	f043 0306 	orr.w	r3, r3, #6
}
    14f8:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    14fa:	8323      	strh	r3, [r4, #24]
		res = 0;
    14fc:	462f      	mov	r7, r5
    14fe:	e7b4      	b.n	146a <process_event+0x66>
		} else if (evt == EVT_STOP) {
    1500:	2804      	cmp	r0, #4
    1502:	d106      	bne.n	1512 <process_event+0x10e>
			transit = mgr->transitions->stop;
    1504:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1506:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    150a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    150c:	f043 0304 	orr.w	r3, r3, #4
    1510:	e7f2      	b.n	14f8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    1512:	2805      	cmp	r0, #5
    1514:	d106      	bne.n	1524 <process_event+0x120>
			transit = mgr->transitions->reset;
    1516:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1518:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    151c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    151e:	f043 0305 	orr.w	r3, r3, #5
    1522:	e7e9      	b.n	14f8 <process_event+0xf4>
    1524:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1526:	462e      	mov	r6, r5
    1528:	e7e8      	b.n	14fc <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    152a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    152c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1530:	8321      	strh	r1, [r4, #24]
    1532:	f38b 8811 	msr	BASEPRI, fp
    1536:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    153a:	bb03      	cbnz	r3, 157e <process_event+0x17a>
	while (!sys_slist_is_empty(list)) {
    153c:	2d00      	cmp	r5, #0
    153e:	d131      	bne.n	15a4 <process_event+0x1a0>
			if (transit != NULL) {
    1540:	b116      	cbz	r6, 1548 <process_event+0x144>
				transit(mgr, transition_complete);
    1542:	4651      	mov	r1, sl
    1544:	4620      	mov	r0, r4
    1546:	47b0      	blx	r6
	__asm__ volatile(
    1548:	f04f 0320 	mov.w	r3, #32
    154c:	f3ef 8b11 	mrs	fp, BASEPRI
    1550:	f383 8812 	msr	BASEPRI_MAX, r3
    1554:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1558:	8b23      	ldrh	r3, [r4, #24]
    155a:	f023 0308 	bic.w	r3, r3, #8
    155e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1560:	8b23      	ldrh	r3, [r4, #24]
    1562:	06da      	lsls	r2, r3, #27
    1564:	d527      	bpl.n	15b6 <process_event+0x1b2>
			evt = EVT_COMPLETE;
    1566:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1568:	f023 0310 	bic.w	r3, r3, #16
    156c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    156e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1572:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1576:	2900      	cmp	r1, #0
    1578:	f47f af60 	bne.w	143c <process_event+0x38>
out:
    157c:	e753      	b.n	1426 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    157e:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1580:	2900      	cmp	r1, #0
    1582:	d0db      	beq.n	153c <process_event+0x138>
	return node->next;
    1584:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    1588:	463b      	mov	r3, r7
    158a:	4620      	mov	r0, r4
    158c:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1590:	9201      	str	r2, [sp, #4]
    1592:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1594:	9a01      	ldr	r2, [sp, #4]
    1596:	f1b9 0f00 	cmp.w	r9, #0
    159a:	d0cf      	beq.n	153c <process_event+0x138>
    159c:	4649      	mov	r1, r9
    159e:	f8d9 9000 	ldr.w	r9, [r9]
    15a2:	e7f1      	b.n	1588 <process_event+0x184>
    15a4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    15a6:	463b      	mov	r3, r7
    15a8:	4620      	mov	r0, r4
    15aa:	9201      	str	r2, [sp, #4]
    15ac:	682d      	ldr	r5, [r5, #0]
    15ae:	f004 fceb 	bl	5f88 <notify_one>
	while (!sys_slist_is_empty(list)) {
    15b2:	9a01      	ldr	r2, [sp, #4]
    15b4:	e7c2      	b.n	153c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    15b6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    15ba:	bf1e      	ittt	ne
    15bc:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    15c0:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    15c2:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    15c4:	e7d3      	b.n	156e <process_event+0x16a>
    15c6:	bf00      	nop
    15c8:	00005fb5 	.word	0x00005fb5

000015cc <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    15cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15d0:	468a      	mov	sl, r1
	size_t count = 0;
    15d2:	f04f 0900 	mov.w	r9, #0
{
    15d6:	b08f      	sub	sp, #60	; 0x3c
    15d8:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    15da:	1e53      	subs	r3, r2, #1
{
    15dc:	9001      	str	r0, [sp, #4]
	fmt--;
    15de:	9302      	str	r3, [sp, #8]

start:
	while (*++fmt != '%') {
    15e0:	9b02      	ldr	r3, [sp, #8]
    15e2:	7858      	ldrb	r0, [r3, #1]
    15e4:	1c5c      	adds	r4, r3, #1
    15e6:	2825      	cmp	r0, #37	; 0x25
    15e8:	d121      	bne.n	162e <z_cbvprintf_impl+0x62>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    15ea:	f04f 0c00 	mov.w	ip, #0
	precision = -1;
    15ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	for (fmt++ ; ; fmt++) {
    15f2:	4618      	mov	r0, r3
	length_mod = 0;
    15f4:	4661      	mov	r1, ip
	min_width = -1;
    15f6:	463c      	mov	r4, r7
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    15f8:	260a      	movs	r6, #10
	for (fmt++ ; ; fmt++) {
    15fa:	3002      	adds	r0, #2
	padding_mode = 0;
    15fc:	f8cd c00c 	str.w	ip, [sp, #12]
		switch (*fmt) {
    1600:	7802      	ldrb	r2, [r0, #0]
    1602:	9002      	str	r0, [sp, #8]
    1604:	2a39      	cmp	r2, #57	; 0x39
    1606:	f100 0001 	add.w	r0, r0, #1
    160a:	d859      	bhi.n	16c0 <z_cbvprintf_impl+0xf4>
    160c:	2a1f      	cmp	r2, #31
    160e:	d818      	bhi.n	1642 <z_cbvprintf_impl+0x76>
    1610:	2a00      	cmp	r2, #0
    1612:	f000 81f7 	beq.w	1a04 <z_cbvprintf_impl+0x438>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    1616:	4651      	mov	r1, sl
    1618:	9b01      	ldr	r3, [sp, #4]
    161a:	2025      	movs	r0, #37	; 0x25
    161c:	4798      	blx	r3
			OUTC(*fmt);
    161e:	9b02      	ldr	r3, [sp, #8]
    1620:	4651      	mov	r1, sl
    1622:	7818      	ldrb	r0, [r3, #0]
    1624:	9b01      	ldr	r3, [sp, #4]
    1626:	4798      	blx	r3
    1628:	f109 0902 	add.w	r9, r9, #2
			goto start;
    162c:	e7d8      	b.n	15e0 <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    162e:	2800      	cmp	r0, #0
    1630:	f000 81e8 	beq.w	1a04 <z_cbvprintf_impl+0x438>
		OUTC(*fmt);
    1634:	4651      	mov	r1, sl
    1636:	9b01      	ldr	r3, [sp, #4]
    1638:	4798      	blx	r3
    163a:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    163e:	9402      	str	r4, [sp, #8]
    1640:	e7ce      	b.n	15e0 <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    1642:	f1a2 0320 	sub.w	r3, r2, #32
    1646:	2b19      	cmp	r3, #25
    1648:	d8e5      	bhi.n	1616 <z_cbvprintf_impl+0x4a>
    164a:	f20f 0e08 	addw	lr, pc, #8
    164e:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    1652:	bf00      	nop
    1654:	000016bd 	.word	0x000016bd
    1658:	00001617 	.word	0x00001617
    165c:	00001617 	.word	0x00001617
    1660:	000016bd 	.word	0x000016bd
    1664:	00001617 	.word	0x00001617
    1668:	00001741 	.word	0x00001741
    166c:	00001617 	.word	0x00001617
    1670:	00001617 	.word	0x00001617
    1674:	00001617 	.word	0x00001617
    1678:	00001617 	.word	0x00001617
    167c:	00001783 	.word	0x00001783
    1680:	000016bd 	.word	0x000016bd
    1684:	00001617 	.word	0x00001617
    1688:	00001797 	.word	0x00001797
    168c:	0000174f 	.word	0x0000174f
    1690:	00001617 	.word	0x00001617
    1694:	0000175b 	.word	0x0000175b
    1698:	00001777 	.word	0x00001777
    169c:	00001777 	.word	0x00001777
    16a0:	00001777 	.word	0x00001777
    16a4:	00001777 	.word	0x00001777
    16a8:	00001777 	.word	0x00001777
    16ac:	00001777 	.word	0x00001777
    16b0:	00001777 	.word	0x00001777
    16b4:	00001777 	.word	0x00001777
    16b8:	00001777 	.word	0x00001777
    16bc:	4694      	mov	ip, r2
    16be:	e79f      	b.n	1600 <z_cbvprintf_impl+0x34>
    16c0:	2a58      	cmp	r2, #88	; 0x58
    16c2:	f000 811b 	beq.w	18fc <z_cbvprintf_impl+0x330>
    16c6:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
    16ca:	fa5f fe83 	uxtb.w	lr, r3
    16ce:	f1be 0f17 	cmp.w	lr, #23
    16d2:	d8a0      	bhi.n	1616 <z_cbvprintf_impl+0x4a>
    16d4:	2b17      	cmp	r3, #23
    16d6:	d89e      	bhi.n	1616 <z_cbvprintf_impl+0x4a>
    16d8:	f20f 0e04 	addw	lr, pc, #4
    16dc:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    16e0:	0000195f 	.word	0x0000195f
    16e4:	000017bd 	.word	0x000017bd
    16e8:	00001617 	.word	0x00001617
    16ec:	00001617 	.word	0x00001617
    16f0:	00001617 	.word	0x00001617
    16f4:	0000179d 	.word	0x0000179d
    16f8:	000017bd 	.word	0x000017bd
    16fc:	00001617 	.word	0x00001617
    1700:	00001617 	.word	0x00001617
    1704:	0000179d 	.word	0x0000179d
    1708:	00001617 	.word	0x00001617
    170c:	00001617 	.word	0x00001617
    1710:	00001617 	.word	0x00001617
    1714:	000018a7 	.word	0x000018a7
    1718:	00001617 	.word	0x00001617
    171c:	00001617 	.word	0x00001617
    1720:	0000193f 	.word	0x0000193f
    1724:	00001617 	.word	0x00001617
    1728:	000017bd 	.word	0x000017bd
    172c:	00001617 	.word	0x00001617
    1730:	00001617 	.word	0x00001617
    1734:	000018a7 	.word	0x000018a7
    1738:	00001617 	.word	0x00001617
    173c:	0000179d 	.word	0x0000179d
			OUTC('%');
    1740:	4651      	mov	r1, sl
    1742:	2025      	movs	r0, #37	; 0x25
    1744:	9b01      	ldr	r3, [sp, #4]
    1746:	4798      	blx	r3
    1748:	f109 0901 	add.w	r9, r9, #1
			goto start;
    174c:	e748      	b.n	15e0 <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    174e:	9b03      	ldr	r3, [sp, #12]
			precision = 0;
    1750:	2700      	movs	r7, #0
			padding_mode &= (char)~PAD_ZERO;
    1752:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1756:	9303      	str	r3, [sp, #12]
			continue;
    1758:	e752      	b.n	1600 <z_cbvprintf_impl+0x34>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    175a:	2c00      	cmp	r4, #0
    175c:	da0b      	bge.n	1776 <z_cbvprintf_impl+0x1aa>
    175e:	2f00      	cmp	r7, #0
    1760:	da0b      	bge.n	177a <z_cbvprintf_impl+0x1ae>
    1762:	9b03      	ldr	r3, [sp, #12]
    1764:	2b00      	cmp	r3, #0
    1766:	f000 8149 	beq.w	19fc <z_cbvprintf_impl+0x430>
				min_width = 10 * min_width + *fmt - '0';
    176a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    176e:	fb06 2404 	mla	r4, r6, r4, r2
    1772:	3c30      	subs	r4, #48	; 0x30
    1774:	e744      	b.n	1600 <z_cbvprintf_impl+0x34>
			if (precision >= 0) {
    1776:	2f00      	cmp	r7, #0
    1778:	dbf7      	blt.n	176a <z_cbvprintf_impl+0x19e>
				precision = 10 * precision + *fmt - '0';
    177a:	fb06 2707 	mla	r7, r6, r7, r2
    177e:	3f30      	subs	r7, #48	; 0x30
    1780:	e73e      	b.n	1600 <z_cbvprintf_impl+0x34>
			if (precision >= 0) {
    1782:	2f00      	cmp	r7, #0
    1784:	f855 3b04 	ldr.w	r3, [r5], #4
    1788:	db01      	blt.n	178e <z_cbvprintf_impl+0x1c2>
				precision = va_arg(ap, int);
    178a:	461f      	mov	r7, r3
    178c:	e738      	b.n	1600 <z_cbvprintf_impl+0x34>
				if (min_width < 0) {
    178e:	1e1c      	subs	r4, r3, #0
    1790:	f6bf af36 	bge.w	1600 <z_cbvprintf_impl+0x34>
					min_width = -min_width;
    1794:	4264      	negs	r4, r4
		switch (*fmt) {
    1796:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
    1798:	9303      	str	r3, [sp, #12]
    179a:	e731      	b.n	1600 <z_cbvprintf_impl+0x34>
			if (*fmt == 'h' && length_mod == 'h') {
    179c:	2a68      	cmp	r2, #104	; 0x68
    179e:	d103      	bne.n	17a8 <z_cbvprintf_impl+0x1dc>
    17a0:	2968      	cmp	r1, #104	; 0x68
    17a2:	d106      	bne.n	17b2 <z_cbvprintf_impl+0x1e6>
				length_mod = 'H';
    17a4:	2148      	movs	r1, #72	; 0x48
    17a6:	e72b      	b.n	1600 <z_cbvprintf_impl+0x34>
			} else if (*fmt == 'l' && length_mod == 'l') {
    17a8:	2a6c      	cmp	r2, #108	; 0x6c
    17aa:	d102      	bne.n	17b2 <z_cbvprintf_impl+0x1e6>
    17ac:	296c      	cmp	r1, #108	; 0x6c
    17ae:	f000 8127 	beq.w	1a00 <z_cbvprintf_impl+0x434>
			} else if (length_mod == '\0') {
    17b2:	2900      	cmp	r1, #0
    17b4:	f47f af2f 	bne.w	1616 <z_cbvprintf_impl+0x4a>
    17b8:	4611      	mov	r1, r2
		switch (*fmt) {
    17ba:	e721      	b.n	1600 <z_cbvprintf_impl+0x34>
			if (length_mod == 'z') {
    17bc:	297a      	cmp	r1, #122	; 0x7a
    17be:	d107      	bne.n	17d0 <z_cbvprintf_impl+0x204>
			} else if (*fmt == 'u') {
    17c0:	2a75      	cmp	r2, #117	; 0x75
				precision = va_arg(ap, int);
    17c2:	f105 0604 	add.w	r6, r5, #4
				d = va_arg(ap, unsigned int);
    17c6:	682d      	ldr	r5, [r5, #0]
			} else if (*fmt == 'u') {
    17c8:	d162      	bne.n	1890 <z_cbvprintf_impl+0x2c4>
				d = va_arg(ap, unsigned int);
    17ca:	f04f 0800 	mov.w	r8, #0
    17ce:	e00d      	b.n	17ec <z_cbvprintf_impl+0x220>
			} else if (length_mod == 'l') {
    17d0:	296c      	cmp	r1, #108	; 0x6c
    17d2:	d0f5      	beq.n	17c0 <z_cbvprintf_impl+0x1f4>
			} else if (length_mod == 'L') {
    17d4:	294c      	cmp	r1, #76	; 0x4c
    17d6:	d1f3      	bne.n	17c0 <z_cbvprintf_impl+0x1f4>
					unsigned long long llu =
    17d8:	1deb      	adds	r3, r5, #7
    17da:	f023 0307 	bic.w	r3, r3, #7
    17de:	461e      	mov	r6, r3
				if (*fmt == 'u') {
    17e0:	2a75      	cmp	r2, #117	; 0x75
					unsigned long long llu =
    17e2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
				if (*fmt == 'u') {
    17e6:	d107      	bne.n	17f8 <z_cbvprintf_impl+0x22c>
					unsigned long long llu =
    17e8:	e9d3 5800 	ldrd	r5, r8, [r3]
			} else if (special == ' ') {
    17ec:	f1bc 0f20 	cmp.w	ip, #32
    17f0:	d151      	bne.n	1896 <z_cbvprintf_impl+0x2ca>
				prefix = " ";
    17f2:	4b86      	ldr	r3, [pc, #536]	; (1a0c <z_cbvprintf_impl+0x440>)
				min_width--;
    17f4:	3c01      	subs	r4, #1
    17f6:	e009      	b.n	180c <z_cbvprintf_impl+0x240>
					d = (int_value_type) lld;
    17f8:	4605      	mov	r5, r0
    17fa:	4688      	mov	r8, r1
			if (*fmt != 'u' && (int_value_type)d < 0) {
    17fc:	f1b8 0f00 	cmp.w	r8, #0
    1800:	daf4      	bge.n	17ec <z_cbvprintf_impl+0x220>
				d = -d;
    1802:	426d      	negs	r5, r5
				prefix = "-";
    1804:	4b82      	ldr	r3, [pc, #520]	; (1a10 <z_cbvprintf_impl+0x444>)
				d = -d;
    1806:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
				min_width--;
    180a:	3c01      	subs	r4, #1
	int i = 0;
    180c:	f04f 0b00 	mov.w	fp, #0
	prefix = "";
    1810:	9300      	str	r3, [sp, #0]
	int i = 0;
    1812:	ab0d      	add	r3, sp, #52	; 0x34
    1814:	9305      	str	r3, [sp, #20]
		unsigned int c = num % base;
    1816:	4628      	mov	r0, r5
    1818:	4641      	mov	r1, r8
    181a:	220a      	movs	r2, #10
    181c:	2300      	movs	r3, #0
    181e:	f8cd b010 	str.w	fp, [sp, #16]
    1822:	f7fe fc8f 	bl	144 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    1826:	9b05      	ldr	r3, [sp, #20]
    1828:	3230      	adds	r2, #48	; 0x30
    182a:	f803 2901 	strb.w	r2, [r3], #-1
    182e:	e9cd 3505 	strd	r3, r5, [sp, #20]
		num /= base;
    1832:	4628      	mov	r0, r5
    1834:	2300      	movs	r3, #0
    1836:	4641      	mov	r1, r8
    1838:	220a      	movs	r2, #10
    183a:	f8cd 801c 	str.w	r8, [sp, #28]
    183e:	f7fe fc81 	bl	144 <__aeabi_uldivmod>
	} while (num);
    1842:	9b06      	ldr	r3, [sp, #24]
		num /= base;
    1844:	4605      	mov	r5, r0
	} while (num);
    1846:	2b0a      	cmp	r3, #10
    1848:	9b07      	ldr	r3, [sp, #28]
		num /= base;
    184a:	4688      	mov	r8, r1
	} while (num);
    184c:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1850:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	} while (num);
    1854:	d2df      	bcs.n	1816 <z_cbvprintf_impl+0x24a>
	return -i;
    1856:	9b04      	ldr	r3, [sp, #16]
			data = buf + sizeof(buf) - data_len;
    1858:	9a04      	ldr	r2, [sp, #16]
	return -i;
    185a:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    185e:	ab0e      	add	r3, sp, #56	; 0x38
    1860:	189d      	adds	r5, r3, r2
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1862:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
    1864:	f1a5 0504 	sub.w	r5, r5, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1868:	da04      	bge.n	1874 <z_cbvprintf_impl+0x2a8>
    186a:	9b03      	ldr	r3, [sp, #12]
    186c:	f013 0f01 	tst.w	r3, #1
    1870:	bf18      	it	ne
    1872:	4627      	movne	r7, r4
		precision -= data_len;
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1874:	9b03      	ldr	r3, [sp, #12]
		precision -= data_len;
    1876:	eba7 080b 	sub.w	r8, r7, fp
		if (precision > 0) {
    187a:	f1b8 0f00 	cmp.w	r8, #0
		min_width -= data_len;
    187e:	bfd4      	ite	le
    1880:	eba4 040b 	suble.w	r4, r4, fp
			min_width -= precision;
    1884:	1be4      	subgt	r4, r4, r7
		if (!(padding_mode & PAD_TAIL)) {
    1886:	079b      	lsls	r3, r3, #30
    1888:	f100 8081 	bmi.w	198e <z_cbvprintf_impl+0x3c2>
    188c:	4627      	mov	r7, r4
    188e:	e077      	b.n	1980 <z_cbvprintf_impl+0x3b4>
				d = va_arg(ap, int);
    1890:	ea4f 78e5 	mov.w	r8, r5, asr #31
    1894:	e7b2      	b.n	17fc <z_cbvprintf_impl+0x230>
			} else if (special == '+') {
    1896:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
    189a:	bf0a      	itet	eq
    189c:	4b5d      	ldreq	r3, [pc, #372]	; (1a14 <z_cbvprintf_impl+0x448>)
	prefix = "";
    189e:	4b5e      	ldrne	r3, [pc, #376]	; (1a18 <z_cbvprintf_impl+0x44c>)
				min_width--;
    18a0:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    18a4:	e7b2      	b.n	180c <z_cbvprintf_impl+0x240>
			if (*fmt == 'p') {
    18a6:	2a70      	cmp	r2, #112	; 0x70
    18a8:	d128      	bne.n	18fc <z_cbvprintf_impl+0x330>
				x = (uintptr_t)va_arg(ap, void *);
    18aa:	462e      	mov	r6, r5
    18ac:	f856 1b04 	ldr.w	r1, [r6], #4
    18b0:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    18b2:	2900      	cmp	r1, #0
    18b4:	d05c      	beq.n	1970 <z_cbvprintf_impl+0x3a4>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    18b6:	4859      	ldr	r0, [pc, #356]	; (1a1c <z_cbvprintf_impl+0x450>)
    18b8:	9000      	str	r0, [sp, #0]
				min_width -= 2;
    18ba:	3c02      	subs	r4, #2
	int i = 0;
    18bc:	2500      	movs	r5, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    18be:	f002 0260 	and.w	r2, r2, #96	; 0x60
    18c2:	f1a2 0839 	sub.w	r8, r2, #57	; 0x39
	int i = 0;
    18c6:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
		unsigned int c = num % base;
    18ca:	f001 020f 	and.w	r2, r1, #15
		if (c >= 10) {
    18ce:	2a09      	cmp	r2, #9
			c += alpha;
    18d0:	bf88      	it	hi
    18d2:	4442      	addhi	r2, r8
		buftop[--i] = c + '0';
    18d4:	3230      	adds	r2, #48	; 0x30
    18d6:	f80e 2901 	strb.w	r2, [lr], #-1
	} while (num);
    18da:	2910      	cmp	r1, #16
		num /= base;
    18dc:	ea4f 1211 	mov.w	r2, r1, lsr #4
    18e0:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    18e4:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    18e8:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    18ec:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
	} while (num);
    18f0:	d221      	bcs.n	1936 <z_cbvprintf_impl+0x36a>
			data = buf + sizeof(buf) - data_len;
    18f2:	ab0e      	add	r3, sp, #56	; 0x38
	return -i;
    18f4:	f1c5 0b01 	rsb	fp, r5, #1
			data = buf + sizeof(buf) - data_len;
    18f8:	441d      	add	r5, r3
    18fa:	e7b2      	b.n	1862 <z_cbvprintf_impl+0x296>
			} else if (length_mod == 'l') {
    18fc:	296c      	cmp	r1, #108	; 0x6c
    18fe:	d104      	bne.n	190a <z_cbvprintf_impl+0x33e>
				x = va_arg(ap, unsigned int);
    1900:	462e      	mov	r6, r5
    1902:	2300      	movs	r3, #0
    1904:	f856 1b04 	ldr.w	r1, [r6], #4
    1908:	e008      	b.n	191c <z_cbvprintf_impl+0x350>
			} else if (length_mod == 'L') {
    190a:	294c      	cmp	r1, #76	; 0x4c
    190c:	d1f8      	bne.n	1900 <z_cbvprintf_impl+0x334>
				unsigned long long llx =
    190e:	3507      	adds	r5, #7
    1910:	f025 0507 	bic.w	r5, r5, #7
    1914:	462e      	mov	r6, r5
    1916:	686b      	ldr	r3, [r5, #4]
    1918:	f856 1b08 	ldr.w	r1, [r6], #8
			if (special == '#') {
    191c:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    1920:	d106      	bne.n	1930 <z_cbvprintf_impl+0x364>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1922:	4d3f      	ldr	r5, [pc, #252]	; (1a20 <z_cbvprintf_impl+0x454>)
    1924:	f012 0f20 	tst.w	r2, #32
    1928:	483c      	ldr	r0, [pc, #240]	; (1a1c <z_cbvprintf_impl+0x450>)
    192a:	bf08      	it	eq
    192c:	4628      	moveq	r0, r5
    192e:	e7c3      	b.n	18b8 <z_cbvprintf_impl+0x2ec>
	prefix = "";
    1930:	4839      	ldr	r0, [pc, #228]	; (1a18 <z_cbvprintf_impl+0x44c>)
    1932:	9000      	str	r0, [sp, #0]
    1934:	e7c2      	b.n	18bc <z_cbvprintf_impl+0x2f0>
		buftop[--i] = c + '0';
    1936:	4665      	mov	r5, ip
		num /= base;
    1938:	4611      	mov	r1, r2
    193a:	4603      	mov	r3, r0
    193c:	e7c5      	b.n	18ca <z_cbvprintf_impl+0x2fe>
			data = va_arg(ap, char *);
    193e:	462e      	mov	r6, r5
    1940:	f856 5b04 	ldr.w	r5, [r6], #4
			data_len = strlen(data);
    1944:	4628      	mov	r0, r5
    1946:	f004 fc3f 	bl	61c8 <strlen>
			if (precision >= 0 && data_len > precision) {
    194a:	2f00      	cmp	r7, #0
			data_len = strlen(data);
    194c:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    194e:	db02      	blt.n	1956 <z_cbvprintf_impl+0x38a>
    1950:	42b8      	cmp	r0, r7
    1952:	bfa8      	it	ge
    1954:	46bb      	movge	fp, r7
    1956:	4b30      	ldr	r3, [pc, #192]	; (1a18 <z_cbvprintf_impl+0x44c>)
    1958:	2700      	movs	r7, #0
    195a:	9300      	str	r3, [sp, #0]
    195c:	e78a      	b.n	1874 <z_cbvprintf_impl+0x2a8>
			c = va_arg(ap, int);
    195e:	462e      	mov	r6, r5
			buf[0] = c;
    1960:	f856 3b04 	ldr.w	r3, [r6], #4
			data_len = 1;
    1964:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1968:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    196c:	ad08      	add	r5, sp, #32
    196e:	e7f2      	b.n	1956 <z_cbvprintf_impl+0x38a>
					data_len = 5;
    1970:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1974:	4d2b      	ldr	r5, [pc, #172]	; (1a24 <z_cbvprintf_impl+0x458>)
    1976:	e7ee      	b.n	1956 <z_cbvprintf_impl+0x38a>
			while (--min_width >= 0) {
				OUTC(' ');
    1978:	4651      	mov	r1, sl
    197a:	2020      	movs	r0, #32
    197c:	9b01      	ldr	r3, [sp, #4]
    197e:	4798      	blx	r3
			while (--min_width >= 0) {
    1980:	3f01      	subs	r7, #1
    1982:	d5f9      	bpl.n	1978 <z_cbvprintf_impl+0x3ac>
    1984:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    1988:	3c01      	subs	r4, #1
    198a:	4499      	add	r9, r3
    198c:	1ae4      	subs	r4, r4, r3
    198e:	9b00      	ldr	r3, [sp, #0]
    1990:	eba9 0903 	sub.w	r9, r9, r3
    1994:	e004      	b.n	19a0 <z_cbvprintf_impl+0x3d4>
    1996:	9300      	str	r3, [sp, #0]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1998:	4651      	mov	r1, sl
    199a:	9b01      	ldr	r3, [sp, #4]
    199c:	4798      	blx	r3
    199e:	9b00      	ldr	r3, [sp, #0]
    19a0:	eb09 0703 	add.w	r7, r9, r3
		while (*prefix) {
    19a4:	f813 0b01 	ldrb.w	r0, [r3], #1
    19a8:	2800      	cmp	r0, #0
    19aa:	d1f4      	bne.n	1996 <z_cbvprintf_impl+0x3ca>
		precision -= data_len;
    19ac:	46c1      	mov	r9, r8
		}
		while (--precision >= 0) {
    19ae:	f1b9 0901 	subs.w	r9, r9, #1
    19b2:	d513      	bpl.n	19dc <z_cbvprintf_impl+0x410>
    19b4:	46d9      	mov	r9, fp
    19b6:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
			OUTC('0');
		}
		while (--data_len >= 0) {
    19ba:	f1b9 0901 	subs.w	r9, r9, #1
    19be:	d512      	bpl.n	19e6 <z_cbvprintf_impl+0x41a>
    19c0:	f1bb 0f00 	cmp.w	fp, #0
    19c4:	bfa8      	it	ge
    19c6:	44d8      	addge	r8, fp
    19c8:	4625      	mov	r5, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    19ca:	3d01      	subs	r5, #1
    19cc:	d511      	bpl.n	19f2 <z_cbvprintf_impl+0x426>
    19ce:	2c00      	cmp	r4, #0
    19d0:	bfa8      	it	ge
    19d2:	44a0      	addge	r8, r4
    19d4:	4635      	mov	r5, r6
    19d6:	eb08 0907 	add.w	r9, r8, r7
    19da:	e601      	b.n	15e0 <z_cbvprintf_impl+0x14>
			OUTC('0');
    19dc:	4651      	mov	r1, sl
    19de:	9b01      	ldr	r3, [sp, #4]
    19e0:	2030      	movs	r0, #48	; 0x30
    19e2:	4798      	blx	r3
    19e4:	e7e3      	b.n	19ae <z_cbvprintf_impl+0x3e2>
			OUTC(*data++);
    19e6:	4651      	mov	r1, sl
    19e8:	f815 0b01 	ldrb.w	r0, [r5], #1
    19ec:	9b01      	ldr	r3, [sp, #4]
    19ee:	4798      	blx	r3
    19f0:	e7e3      	b.n	19ba <z_cbvprintf_impl+0x3ee>
			OUTC(' ');
    19f2:	4651      	mov	r1, sl
    19f4:	9b01      	ldr	r3, [sp, #4]
    19f6:	2020      	movs	r0, #32
    19f8:	4798      	blx	r3
    19fa:	e7e6      	b.n	19ca <z_cbvprintf_impl+0x3fe>
				padding_mode = PAD_ZERO;
    19fc:	2301      	movs	r3, #1
    19fe:	e6cb      	b.n	1798 <z_cbvprintf_impl+0x1cc>
				length_mod = 'L';
    1a00:	214c      	movs	r1, #76	; 0x4c
    1a02:	e5fd      	b.n	1600 <z_cbvprintf_impl+0x34>
		}

		goto start;
	}
}
    1a04:	4648      	mov	r0, r9
    1a06:	b00f      	add	sp, #60	; 0x3c
    1a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a0c:	0000785c 	.word	0x0000785c
    1a10:	00007484 	.word	0x00007484
    1a14:	00007486 	.word	0x00007486
    1a18:	00007b96 	.word	0x00007b96
    1a1c:	0000748b 	.word	0x0000748b
    1a20:	00007488 	.word	0x00007488
    1a24:	0000748e 	.word	0x0000748e

00001a28 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1a28:	b508      	push	{r3, lr}
    1a2a:	f04f 0220 	mov.w	r2, #32
    1a2e:	f3ef 8311 	mrs	r3, BASEPRI
    1a32:	f382 8812 	msr	BASEPRI_MAX, r2
    1a36:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1a3a:	f000 fba3 	bl	2184 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1a3e:	4803      	ldr	r0, [pc, #12]	; (1a4c <sys_reboot+0x24>)
    1a40:	f004 fa79 	bl	5f36 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1a44:	f000 f888 	bl	1b58 <arch_cpu_idle>
    1a48:	e7fc      	b.n	1a44 <sys_reboot+0x1c>
    1a4a:	bf00      	nop
    1a4c:	00007494 	.word	0x00007494

00001a50 <nordicsemi_nrf91_init>:
    1a50:	f04f 0220 	mov.w	r2, #32
    1a54:	f3ef 8311 	mrs	r3, BASEPRI
    1a58:	f382 8812 	msr	BASEPRI_MAX, r2
    1a5c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1a60:	2101      	movs	r1, #1
    1a62:	4a04      	ldr	r2, [pc, #16]	; (1a74 <nordicsemi_nrf91_init+0x24>)
    1a64:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1a68:	f383 8811 	msr	BASEPRI, r3
    1a6c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1a70:	2000      	movs	r0, #0
    1a72:	4770      	bx	lr
    1a74:	50039000 	.word	0x50039000

00001a78 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1a78:	b120      	cbz	r0, 1a84 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1a7a:	4b03      	ldr	r3, [pc, #12]	; (1a88 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1a7c:	0180      	lsls	r0, r0, #6
    1a7e:	f043 0301 	orr.w	r3, r3, #1
    1a82:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1a84:	4770      	bx	lr
    1a86:	bf00      	nop
    1a88:	00006c60 	.word	0x00006c60

00001a8c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1a8c:	f001 bcba 	b.w	3404 <SystemInit>

00001a90 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1a90:	4b11      	ldr	r3, [pc, #68]	; (1ad8 <flash_area_open+0x48>)
{
    1a92:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    1a94:	681b      	ldr	r3, [r3, #0]
{
    1a96:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    1a98:	b18b      	cbz	r3, 1abe <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1a9a:	4a10      	ldr	r2, [pc, #64]	; (1adc <flash_area_open+0x4c>)
    1a9c:	6811      	ldr	r1, [r2, #0]
    1a9e:	2200      	movs	r2, #0
    1aa0:	428a      	cmp	r2, r1
    1aa2:	db02      	blt.n	1aaa <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1aa4:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    1aa8:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1aaa:	461d      	mov	r5, r3
    1aac:	f813 6b10 	ldrb.w	r6, [r3], #16
    1ab0:	4286      	cmp	r6, r0
    1ab2:	d007      	beq.n	1ac4 <flash_area_open+0x34>
	for (int i = 0; i < flash_map_entries; i++) {
    1ab4:	3201      	adds	r2, #1
    1ab6:	e7f3      	b.n	1aa0 <flash_area_open+0x10>
	return 0;
    1ab8:	2000      	movs	r0, #0
	*fap = area;
    1aba:	6025      	str	r5, [r4, #0]
	return 0;
    1abc:	e7f4      	b.n	1aa8 <flash_area_open+0x18>
		return -EACCES;
    1abe:	f06f 000c 	mvn.w	r0, #12
    1ac2:	e7f1      	b.n	1aa8 <flash_area_open+0x18>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1ac4:	68e8      	ldr	r0, [r5, #12]
    1ac6:	b118      	cbz	r0, 1ad0 <flash_area_open+0x40>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1ac8:	f004 fee2 	bl	6890 <z_device_is_ready>
    1acc:	2800      	cmp	r0, #0
    1ace:	d1f3      	bne.n	1ab8 <flash_area_open+0x28>
		return -ENODEV;
    1ad0:	f06f 0012 	mvn.w	r0, #18
    1ad4:	e7e8      	b.n	1aa8 <flash_area_open+0x18>
    1ad6:	bf00      	nop
    1ad8:	2000c4f4 	.word	0x2000c4f4
    1adc:	00006d58 	.word	0x00006d58

00001ae0 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1ae0:	b570      	push	{r4, r5, r6, lr}
    1ae2:	b088      	sub	sp, #32
    1ae4:	4605      	mov	r5, r0
    1ae6:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1ae8:	b2c0      	uxtb	r0, r0
    1aea:	4669      	mov	r1, sp
{
    1aec:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1aee:	f7ff ffcf 	bl	1a90 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1af2:	2800      	cmp	r0, #0
    1af4:	db1b      	blt.n	1b2e <flash_area_get_sectors+0x4e>
    1af6:	9800      	ldr	r0, [sp, #0]
    1af8:	b1c8      	cbz	r0, 1b2e <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    1afa:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1afc:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1afe:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1b00:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    1b02:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1b04:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1b08:	2300      	movs	r3, #0
	flash_dev = fa->fa_dev;
    1b0a:	68c5      	ldr	r5, [r0, #12]
	cb_data->status = 0;
    1b0c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1b10:	9305      	str	r3, [sp, #20]
	flash_area_close(fa);
    1b12:	f004 fad7 	bl	60c4 <flash_area_close>
	if (flash_dev == NULL) {
    1b16:	b16d      	cbz	r5, 1b34 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    1b18:	4628      	mov	r0, r5
    1b1a:	4908      	ldr	r1, [pc, #32]	; (1b3c <flash_area_get_sectors+0x5c>)
    1b1c:	aa01      	add	r2, sp, #4
    1b1e:	f004 fc73 	bl	6408 <flash_page_foreach>
	if (cb_data->status == 0) {
    1b22:	9807      	ldr	r0, [sp, #28]
    1b24:	b908      	cbnz	r0, 1b2a <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    1b26:	9b05      	ldr	r3, [sp, #20]
    1b28:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1b2a:	b008      	add	sp, #32
    1b2c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1b2e:	f06f 0015 	mvn.w	r0, #21
    1b32:	e7fa      	b.n	1b2a <flash_area_get_sectors+0x4a>
		return -ENODEV;
    1b34:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1b38:	e7f7      	b.n	1b2a <flash_area_get_sectors+0x4a>
    1b3a:	bf00      	nop
    1b3c:	00006165 	.word	0x00006165

00001b40 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1b40:	4801      	ldr	r0, [pc, #4]	; (1b48 <nrf_cc3xx_platform_abort_init+0x8>)
    1b42:	f002 baf1 	b.w	4128 <nrf_cc3xx_platform_set_abort>
    1b46:	bf00      	nop
    1b48:	00006d5c 	.word	0x00006d5c

00001b4c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1b4c:	4901      	ldr	r1, [pc, #4]	; (1b54 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1b4e:	2210      	movs	r2, #16
	str	r2, [r1]
    1b50:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1b52:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1b54:	e000ed10 	.word	0xe000ed10

00001b58 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1b58:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1b5a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1b5c:	f380 8811 	msr	BASEPRI, r0
	isb
    1b60:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1b64:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1b68:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1b6a:	b662      	cpsie	i
	isb
    1b6c:	f3bf 8f6f 	isb	sy

	bx	lr
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop

00001b74 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1b74:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1b76:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1b78:	f381 8811 	msr	BASEPRI, r1

	wfe
    1b7c:	bf20      	wfe

	msr	BASEPRI, r0
    1b7e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1b82:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1b84:	4770      	bx	lr
    1b86:	bf00      	nop

00001b88 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1b8a:	4605      	mov	r5, r0

	if (esf != NULL) {
    1b8c:	460c      	mov	r4, r1
    1b8e:	b1c9      	cbz	r1, 1bc4 <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1b90:	688b      	ldr	r3, [r1, #8]
    1b92:	4810      	ldr	r0, [pc, #64]	; (1bd4 <z_arm_fatal_error+0x4c>)
    1b94:	9300      	str	r3, [sp, #0]
    1b96:	e9d1 2300 	ldrd	r2, r3, [r1]
    1b9a:	2145      	movs	r1, #69	; 0x45
    1b9c:	f004 fa85 	bl	60aa <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1ba0:	6963      	ldr	r3, [r4, #20]
    1ba2:	2145      	movs	r1, #69	; 0x45
    1ba4:	9300      	str	r3, [sp, #0]
    1ba6:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    1baa:	480b      	ldr	r0, [pc, #44]	; (1bd8 <z_arm_fatal_error+0x50>)
    1bac:	f004 fa7d 	bl	60aa <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1bb0:	2145      	movs	r1, #69	; 0x45
    1bb2:	69e2      	ldr	r2, [r4, #28]
    1bb4:	4809      	ldr	r0, [pc, #36]	; (1bdc <z_arm_fatal_error+0x54>)
    1bb6:	f004 fa78 	bl	60aa <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    1bba:	2145      	movs	r1, #69	; 0x45
    1bbc:	69a2      	ldr	r2, [r4, #24]
    1bbe:	4808      	ldr	r0, [pc, #32]	; (1be0 <z_arm_fatal_error+0x58>)
    1bc0:	f004 fa73 	bl	60aa <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    1bc4:	4621      	mov	r1, r4
    1bc6:	4628      	mov	r0, r5
}
    1bc8:	b003      	add	sp, #12
    1bca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    1bce:	f002 b909 	b.w	3de4 <z_fatal_error>
    1bd2:	bf00      	nop
    1bd4:	000074c1 	.word	0x000074c1
    1bd8:	000074f5 	.word	0x000074f5
    1bdc:	00007529 	.word	0x00007529
    1be0:	0000753d 	.word	0x0000753d

00001be4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1be4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1be6:	2b00      	cmp	r3, #0
    1be8:	db08      	blt.n	1bfc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1bea:	2201      	movs	r2, #1
    1bec:	f000 001f 	and.w	r0, r0, #31
    1bf0:	fa02 f000 	lsl.w	r0, r2, r0
    1bf4:	4a02      	ldr	r2, [pc, #8]	; (1c00 <arch_irq_enable+0x1c>)
    1bf6:	095b      	lsrs	r3, r3, #5
    1bf8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1bfc:	4770      	bx	lr
    1bfe:	bf00      	nop
    1c00:	e000e100 	.word	0xe000e100

00001c04 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1c04:	4b05      	ldr	r3, [pc, #20]	; (1c1c <arch_irq_is_enabled+0x18>)
    1c06:	0942      	lsrs	r2, r0, #5
    1c08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1c0c:	2301      	movs	r3, #1
    1c0e:	f000 001f 	and.w	r0, r0, #31
    1c12:	fa03 f000 	lsl.w	r0, r3, r0
}
    1c16:	4010      	ands	r0, r2
    1c18:	4770      	bx	lr
    1c1a:	bf00      	nop
    1c1c:	e000e100 	.word	0xe000e100

00001c20 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1c20:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1c22:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    1c24:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c28:	bfac      	ite	ge
    1c2a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c2e:	4b06      	ldrlt	r3, [pc, #24]	; (1c48 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c30:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1c34:	b2c9      	uxtb	r1, r1
    1c36:	bfab      	itete	ge
    1c38:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c3c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c40:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c44:	5419      	strblt	r1, [r3, r0]
}
    1c46:	4770      	bx	lr
    1c48:	e000ed14 	.word	0xe000ed14

00001c4c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1c4c:	bf30      	wfi
    b z_SysNmiOnReset
    1c4e:	f7ff bffd 	b.w	1c4c <z_SysNmiOnReset>
    1c52:	bf00      	nop

00001c54 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c54:	4a14      	ldr	r2, [pc, #80]	; (1ca8 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1c56:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1c58:	4b14      	ldr	r3, [pc, #80]	; (1cac <z_arm_prep_c+0x58>)
    1c5a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1c5e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1c60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c64:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1c68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1c6c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    1c74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1c78:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    1c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    1c80:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    1c84:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    1c88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c8c:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    1c90:	2300      	movs	r3, #0
    1c92:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1c96:	f002 f8fb 	bl	3e90 <z_bss_zero>
	z_data_copy();
    1c9a:	f002 f93b 	bl	3f14 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1c9e:	f000 fa35 	bl	210c <z_arm_interrupt_init>
	z_cstart();
    1ca2:	f002 f901 	bl	3ea8 <z_cstart>
    1ca6:	bf00      	nop
    1ca8:	00000000 	.word	0x00000000
    1cac:	e000ed00 	.word	0xe000ed00

00001cb0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1cb0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1cb4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1cb6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1cba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1cbe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1cc0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1cc4:	2902      	cmp	r1, #2
    beq _oops
    1cc6:	d0ff      	beq.n	1cc8 <_oops>

00001cc8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1cc8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1cca:	f004 fa6e 	bl	61aa <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    1cce:	bd01      	pop	{r0, pc}

00001cd0 <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    1cd0:	4604      	mov	r4, r0
    1cd2:	4608      	mov	r0, r1
    1cd4:	4611      	mov	r1, r2
    1cd6:	461a      	mov	r2, r3
    1cd8:	2300      	movs	r3, #0
    1cda:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1cde:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    1ce2:	4b0a      	ldr	r3, [pc, #40]	; (1d0c <loop+0x2>)
    1ce4:	2520      	movs	r5, #32
    1ce6:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    1cea:	f386 880b 	msr	PSPLIM, r6
    1cee:	f383 8809 	msr	PSP, r3
    1cf2:	b663      	cpsie	if
    1cf4:	f04f 0300 	mov.w	r3, #0
    1cf8:	f383 8811 	msr	BASEPRI, r3
    1cfc:	f3bf 8f6f 	isb	sy
    1d00:	47a0      	blx	r4
    1d02:	f385 8811 	msr	BASEPRI, r5
    1d06:	f3bf 8f6f 	isb	sy

00001d0a <loop>:
    1d0a:	e7fe      	b.n	1d0a <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    1d0c:	2000fce0 	.word	0x2000fce0

00001d10 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1d10:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1d12:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1d16:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1d1a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1d1e:	4904      	ldr	r1, [pc, #16]	; (1d30 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1d20:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1d22:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1d24:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1d26:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1d2a:	4902      	ldr	r1, [pc, #8]	; (1d34 <_isr_wrapper+0x24>)
	bx r1
    1d2c:	4708      	bx	r1
    1d2e:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    1d30:	000069e8 	.word	0x000069e8
	ldr r1, =z_arm_int_exit
    1d34:	00001d39 	.word	0x00001d39

00001d38 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1d38:	4770      	bx	lr
    1d3a:	bf00      	nop

00001d3c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    1d3c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d3e:	4c21      	ldr	r4, [pc, #132]	; (1dc4 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1d40:	2145      	movs	r1, #69	; 0x45
    1d42:	4821      	ldr	r0, [pc, #132]	; (1dc8 <usage_fault.constprop.0+0x8c>)
    1d44:	f004 f9b1 	bl	60aa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1d48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d4a:	019d      	lsls	r5, r3, #6
    1d4c:	d503      	bpl.n	1d56 <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    1d4e:	2145      	movs	r1, #69	; 0x45
    1d50:	481e      	ldr	r0, [pc, #120]	; (1dcc <usage_fault.constprop.0+0x90>)
    1d52:	f004 f9aa 	bl	60aa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1d56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d58:	01dc      	lsls	r4, r3, #7
    1d5a:	d503      	bpl.n	1d64 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    1d5c:	2145      	movs	r1, #69	; 0x45
    1d5e:	481c      	ldr	r0, [pc, #112]	; (1dd0 <usage_fault.constprop.0+0x94>)
    1d60:	f004 f9a3 	bl	60aa <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1d64:	4d17      	ldr	r5, [pc, #92]	; (1dc4 <usage_fault.constprop.0+0x88>)
    1d66:	6aac      	ldr	r4, [r5, #40]	; 0x28
    1d68:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    1d6c:	d004      	beq.n	1d78 <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    1d6e:	2145      	movs	r1, #69	; 0x45
    1d70:	4818      	ldr	r0, [pc, #96]	; (1dd4 <usage_fault.constprop.0+0x98>)
    1d72:	f004 f99a 	bl	60aa <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    1d76:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1d78:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1d7a:	0318      	lsls	r0, r3, #12
    1d7c:	d503      	bpl.n	1d86 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    1d7e:	2145      	movs	r1, #69	; 0x45
    1d80:	4815      	ldr	r0, [pc, #84]	; (1dd8 <usage_fault.constprop.0+0x9c>)
    1d82:	f004 f992 	bl	60aa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1d86:	4d0f      	ldr	r5, [pc, #60]	; (1dc4 <usage_fault.constprop.0+0x88>)
    1d88:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1d8a:	0359      	lsls	r1, r3, #13
    1d8c:	d503      	bpl.n	1d96 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    1d8e:	2145      	movs	r1, #69	; 0x45
    1d90:	4812      	ldr	r0, [pc, #72]	; (1ddc <usage_fault.constprop.0+0xa0>)
    1d92:	f004 f98a 	bl	60aa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1d96:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1d98:	039a      	lsls	r2, r3, #14
    1d9a:	d503      	bpl.n	1da4 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1d9c:	2145      	movs	r1, #69	; 0x45
    1d9e:	4810      	ldr	r0, [pc, #64]	; (1de0 <usage_fault.constprop.0+0xa4>)
    1da0:	f004 f983 	bl	60aa <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1da4:	4d07      	ldr	r5, [pc, #28]	; (1dc4 <usage_fault.constprop.0+0x88>)
    1da6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1da8:	03db      	lsls	r3, r3, #15
    1daa:	d503      	bpl.n	1db4 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1dac:	2145      	movs	r1, #69	; 0x45
    1dae:	480d      	ldr	r0, [pc, #52]	; (1de4 <usage_fault.constprop.0+0xa8>)
    1db0:	f004 f97b 	bl	60aa <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1db4:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    1db6:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1db8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1dbc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1dc0:	62ab      	str	r3, [r5, #40]	; 0x28
}
    1dc2:	bd38      	pop	{r3, r4, r5, pc}
    1dc4:	e000ed00 	.word	0xe000ed00
    1dc8:	00007570 	.word	0x00007570
    1dcc:	0000758d 	.word	0x0000758d
    1dd0:	000075a5 	.word	0x000075a5
    1dd4:	000075c4 	.word	0x000075c4
    1dd8:	000075f3 	.word	0x000075f3
    1ddc:	00007616 	.word	0x00007616
    1de0:	00007640 	.word	0x00007640
    1de4:	0000765f 	.word	0x0000765f

00001de8 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1de8:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1dea:	4c23      	ldr	r4, [pc, #140]	; (1e78 <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1dec:	4606      	mov	r6, r0
    1dee:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1df0:	4822      	ldr	r0, [pc, #136]	; (1e7c <bus_fault.constprop.0+0x94>)
    1df2:	2145      	movs	r1, #69	; 0x45
    1df4:	f004 f959 	bl	60aa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1df8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1dfa:	04d9      	lsls	r1, r3, #19
    1dfc:	d503      	bpl.n	1e06 <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    1dfe:	2145      	movs	r1, #69	; 0x45
    1e00:	481f      	ldr	r0, [pc, #124]	; (1e80 <bus_fault.constprop.0+0x98>)
    1e02:	f004 f952 	bl	60aa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1e06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e08:	051a      	lsls	r2, r3, #20
    1e0a:	d503      	bpl.n	1e14 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1e0c:	2145      	movs	r1, #69	; 0x45
    1e0e:	481d      	ldr	r0, [pc, #116]	; (1e84 <bus_fault.constprop.0+0x9c>)
    1e10:	f004 f94b 	bl	60aa <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1e14:	4c18      	ldr	r4, [pc, #96]	; (1e78 <bus_fault.constprop.0+0x90>)
    1e16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e18:	059b      	lsls	r3, r3, #22
    1e1a:	d510      	bpl.n	1e3e <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    1e1c:	481a      	ldr	r0, [pc, #104]	; (1e88 <bus_fault.constprop.0+0xa0>)
    1e1e:	2145      	movs	r1, #69	; 0x45
    1e20:	f004 f943 	bl	60aa <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1e24:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1e26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e28:	0418      	lsls	r0, r3, #16
    1e2a:	d508      	bpl.n	1e3e <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1e2c:	2145      	movs	r1, #69	; 0x45
    1e2e:	4817      	ldr	r0, [pc, #92]	; (1e8c <bus_fault.constprop.0+0xa4>)
    1e30:	f004 f93b 	bl	60aa <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1e34:	b11e      	cbz	r6, 1e3e <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1e36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1e3c:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1e3e:	4c0e      	ldr	r4, [pc, #56]	; (1e78 <bus_fault.constprop.0+0x90>)
    1e40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e42:	0559      	lsls	r1, r3, #21
    1e44:	d503      	bpl.n	1e4e <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    1e46:	2145      	movs	r1, #69	; 0x45
    1e48:	4811      	ldr	r0, [pc, #68]	; (1e90 <bus_fault.constprop.0+0xa8>)
    1e4a:	f004 f92e 	bl	60aa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1e4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e50:	05da      	lsls	r2, r3, #23
    1e52:	d50b      	bpl.n	1e6c <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    1e54:	2145      	movs	r1, #69	; 0x45
    1e56:	480f      	ldr	r0, [pc, #60]	; (1e94 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1e58:	f004 f927 	bl	60aa <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    1e5c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1e5e:	4a06      	ldr	r2, [pc, #24]	; (1e78 <bus_fault.constprop.0+0x90>)
    1e60:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1e62:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1e66:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1e68:	7028      	strb	r0, [r5, #0]
}
    1e6a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1e6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1e6e:	049b      	lsls	r3, r3, #18
    1e70:	d5f4      	bpl.n	1e5c <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1e72:	2145      	movs	r1, #69	; 0x45
    1e74:	4808      	ldr	r0, [pc, #32]	; (1e98 <bus_fault.constprop.0+0xb0>)
    1e76:	e7ef      	b.n	1e58 <bus_fault.constprop.0+0x70>
    1e78:	e000ed00 	.word	0xe000ed00
    1e7c:	0000768f 	.word	0x0000768f
    1e80:	000076aa 	.word	0x000076aa
    1e84:	000076c0 	.word	0x000076c0
    1e88:	000076d8 	.word	0x000076d8
    1e8c:	000076f6 	.word	0x000076f6
    1e90:	00007710 	.word	0x00007710
    1e94:	00007730 	.word	0x00007730
    1e98:	0000774d 	.word	0x0000774d

00001e9c <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1e9c:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1e9e:	4c26      	ldr	r4, [pc, #152]	; (1f38 <mem_manage_fault.constprop.0+0x9c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1ea0:	4606      	mov	r6, r0
    1ea2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1ea4:	4825      	ldr	r0, [pc, #148]	; (1f3c <mem_manage_fault.constprop.0+0xa0>)
    1ea6:	2145      	movs	r1, #69	; 0x45
    1ea8:	f004 f8ff 	bl	60aa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1eac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1eae:	06d8      	lsls	r0, r3, #27
    1eb0:	d503      	bpl.n	1eba <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    1eb2:	2145      	movs	r1, #69	; 0x45
    1eb4:	4822      	ldr	r0, [pc, #136]	; (1f40 <mem_manage_fault.constprop.0+0xa4>)
    1eb6:	f004 f8f8 	bl	60aa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ebc:	0719      	lsls	r1, r3, #28
    1ebe:	d503      	bpl.n	1ec8 <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    1ec0:	2145      	movs	r1, #69	; 0x45
    1ec2:	4820      	ldr	r0, [pc, #128]	; (1f44 <mem_manage_fault.constprop.0+0xa8>)
    1ec4:	f004 f8f1 	bl	60aa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1ec8:	4c1b      	ldr	r4, [pc, #108]	; (1f38 <mem_manage_fault.constprop.0+0x9c>)
    1eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ecc:	079a      	lsls	r2, r3, #30
    1ece:	d510      	bpl.n	1ef2 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    1ed0:	2145      	movs	r1, #69	; 0x45
    1ed2:	481d      	ldr	r0, [pc, #116]	; (1f48 <mem_manage_fault.constprop.0+0xac>)
    1ed4:	f004 f8e9 	bl	60aa <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    1ed8:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1edc:	061b      	lsls	r3, r3, #24
    1ede:	d508      	bpl.n	1ef2 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    1ee0:	2145      	movs	r1, #69	; 0x45
    1ee2:	481a      	ldr	r0, [pc, #104]	; (1f4c <mem_manage_fault.constprop.0+0xb0>)
    1ee4:	f004 f8e1 	bl	60aa <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1ee8:	b11e      	cbz	r6, 1ef2 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1eea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1ef0:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1ef2:	4c11      	ldr	r4, [pc, #68]	; (1f38 <mem_manage_fault.constprop.0+0x9c>)
    1ef4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ef6:	07de      	lsls	r6, r3, #31
    1ef8:	d503      	bpl.n	1f02 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    1efa:	2145      	movs	r1, #69	; 0x45
    1efc:	4814      	ldr	r0, [pc, #80]	; (1f50 <mem_manage_fault.constprop.0+0xb4>)
    1efe:	f004 f8d4 	bl	60aa <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1f02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1f04:	0698      	lsls	r0, r3, #26
    1f06:	d503      	bpl.n	1f10 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    1f08:	2145      	movs	r1, #69	; 0x45
    1f0a:	4812      	ldr	r0, [pc, #72]	; (1f54 <mem_manage_fault.constprop.0+0xb8>)
    1f0c:	f004 f8cd 	bl	60aa <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    1f10:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1f12:	4b09      	ldr	r3, [pc, #36]	; (1f38 <mem_manage_fault.constprop.0+0x9c>)
    1f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f16:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1f18:	bf58      	it	pl
    1f1a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    1f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1f1e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1f20:	bf42      	ittt	mi
    1f22:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1f24:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1f28:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1f2a:	4a03      	ldr	r2, [pc, #12]	; (1f38 <mem_manage_fault.constprop.0+0x9c>)
    1f2c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1f2e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1f32:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1f34:	7028      	strb	r0, [r5, #0]
}
    1f36:	bd70      	pop	{r4, r5, r6, pc}
    1f38:	e000ed00 	.word	0xe000ed00
    1f3c:	00007781 	.word	0x00007781
    1f40:	0000779c 	.word	0x0000779c
    1f44:	000076c0 	.word	0x000076c0
    1f48:	000077d4 	.word	0x000077d4
    1f4c:	000077f1 	.word	0x000077f1
    1f50:	0000780c 	.word	0x0000780c
    1f54:	0000774d 	.word	0x0000774d

00001f58 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f5c:	4b55      	ldr	r3, [pc, #340]	; (20b4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb4>)
    1f5e:	2500      	movs	r5, #0
    1f60:	685e      	ldr	r6, [r3, #4]
{
    1f62:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1f64:	f3c6 0408 	ubfx	r4, r6, #0, #9
    1f68:	f385 8811 	msr	BASEPRI, r5
    1f6c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1f70:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1f74:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1f78:	d107      	bne.n	1f8a <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1f7a:	f002 030c 	and.w	r3, r2, #12
    1f7e:	2b08      	cmp	r3, #8
    1f80:	d105      	bne.n	1f8e <z_arm_fault+0x36>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1f82:	2145      	movs	r1, #69	; 0x45
    1f84:	484c      	ldr	r0, [pc, #304]	; (20b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb8>)
    1f86:	f004 f890 	bl	60aa <z_log_minimal_printk>
		return NULL;
    1f8a:	462f      	mov	r7, r5
    1f8c:	e004      	b.n	1f98 <z_arm_fault+0x40>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1f8e:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1f90:	bf4e      	itee	mi
    1f92:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    1f94:	4607      	movpl	r7, r0
			*nested_exc = true;
    1f96:	2501      	movpl	r5, #1
	*recoverable = false;
    1f98:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    1f9c:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    1f9e:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    1fa2:	2b09      	cmp	r3, #9
    1fa4:	d874      	bhi.n	2090 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x90>
    1fa6:	e8df f003 	tbb	[pc, r3]
    1faa:	6805      	.short	0x6805
    1fac:	7373656c 	.word	0x7373656c
    1fb0:	70737373 	.word	0x70737373
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1fb4:	4e3f      	ldr	r6, [pc, #252]	; (20b4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb4>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    1fb6:	2145      	movs	r1, #69	; 0x45
    1fb8:	4840      	ldr	r0, [pc, #256]	; (20bc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbc>)
    1fba:	f004 f876 	bl	60aa <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1fbe:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    1fc0:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1fc4:	f014 0402 	ands.w	r4, r4, #2
    1fc8:	d005      	beq.n	1fd6 <z_arm_fault+0x7e>
		PR_EXC("  Bus fault on vector table read");
    1fca:	2145      	movs	r1, #69	; 0x45
    1fcc:	483c      	ldr	r0, [pc, #240]	; (20c0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc0>)
	PR_FAULT_INFO(
    1fce:	f004 f86c 	bl	60aa <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1fd2:	2400      	movs	r4, #0
}
    1fd4:	e006      	b.n	1fe4 <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1fd6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    1fd8:	2b00      	cmp	r3, #0
    1fda:	da1d      	bge.n	2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>
		PR_EXC("  Debug event");
    1fdc:	2145      	movs	r1, #69	; 0x45
    1fde:	4839      	ldr	r0, [pc, #228]	; (20c4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc4>)
    1fe0:	f004 f863 	bl	60aa <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1fe4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1fe8:	b99b      	cbnz	r3, 2012 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x12>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1fea:	2220      	movs	r2, #32
    1fec:	4639      	mov	r1, r7
    1fee:	a802      	add	r0, sp, #8
    1ff0:	f004 f902 	bl	61f8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ff6:	2d00      	cmp	r5, #0
    1ff8:	d057      	beq.n	20aa <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xaa>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1ffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1ffe:	b922      	cbnz	r2, 200a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2000:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2004:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2008:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    200a:	4620      	mov	r0, r4
    200c:	a902      	add	r1, sp, #8
    200e:	f7ff fdbb 	bl	1b88 <z_arm_fatal_error>
}
    2012:	b00a      	add	sp, #40	; 0x28
    2014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2018:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    201a:	005b      	lsls	r3, r3, #1
    201c:	d5e2      	bpl.n	1fe4 <z_arm_fault+0x8c>
		PR_EXC("  Fault escalation (see below)");
    201e:	2145      	movs	r1, #69	; 0x45
    2020:	4829      	ldr	r0, [pc, #164]	; (20c8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc8>)
    2022:	f004 f842 	bl	60aa <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    2026:	69bb      	ldr	r3, [r7, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2028:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    202c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2030:	429a      	cmp	r2, r3
    2032:	d009      	beq.n	2048 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x48>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    2034:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2036:	b2db      	uxtb	r3, r3
    2038:	b16b      	cbz	r3, 2056 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
    203a:	2001      	movs	r0, #1
    203c:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2040:	f7ff ff2c 	bl	1e9c <mem_manage_fault.constprop.0>
    2044:	4604      	mov	r4, r0
		break;
    2046:	e7cd      	b.n	1fe4 <z_arm_fault+0x8c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2048:	2145      	movs	r1, #69	; 0x45
    204a:	683a      	ldr	r2, [r7, #0]
    204c:	481f      	ldr	r0, [pc, #124]	; (20cc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xcc>)
    204e:	f004 f82c 	bl	60aa <z_log_minimal_printk>
			reason = esf->basic.r0;
    2052:	683c      	ldr	r4, [r7, #0]
    2054:	e7c6      	b.n	1fe4 <z_arm_fault+0x8c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    2056:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2058:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    205c:	d005      	beq.n	206a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a>
			reason = bus_fault(esf, 1, recoverable);
    205e:	2001      	movs	r0, #1
    2060:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    2064:	f7ff fec0 	bl	1de8 <bus_fault.constprop.0>
    2068:	e7ec      	b.n	2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    206a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    206c:	0c1b      	lsrs	r3, r3, #16
    206e:	041b      	lsls	r3, r3, #16
    2070:	2b00      	cmp	r3, #0
    2072:	d0b7      	beq.n	1fe4 <z_arm_fault+0x8c>
		reason = usage_fault(esf);
    2074:	f7ff fe62 	bl	1d3c <usage_fault.constprop.0>
    2078:	e7e4      	b.n	2044 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    207a:	2000      	movs	r0, #0
    207c:	f10d 0107 	add.w	r1, sp, #7
    2080:	e7de      	b.n	2040 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x40>
		reason = bus_fault(esf, 0, recoverable);
    2082:	2000      	movs	r0, #0
    2084:	f10d 0107 	add.w	r1, sp, #7
    2088:	e7ec      	b.n	2064 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x64>
	PR_FAULT_INFO(
    208a:	2145      	movs	r1, #69	; 0x45
    208c:	4810      	ldr	r0, [pc, #64]	; (20d0 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xd0>)
    208e:	e79e      	b.n	1fce <z_arm_fault+0x76>
	PR_FAULT_INFO("***** %s %d) *****",
    2090:	4910      	ldr	r1, [pc, #64]	; (20d4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xd4>)
    2092:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    2096:	4a10      	ldr	r2, [pc, #64]	; (20d8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xd8>)
    2098:	4810      	ldr	r0, [pc, #64]	; (20dc <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xdc>)
    209a:	bf08      	it	eq
    209c:	460a      	moveq	r2, r1
    209e:	f1a4 0310 	sub.w	r3, r4, #16
    20a2:	2145      	movs	r1, #69	; 0x45
    20a4:	f004 f801 	bl	60aa <z_log_minimal_printk>
    20a8:	e793      	b.n	1fd2 <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    20aa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    20ae:	f023 0301 	bic.w	r3, r3, #1
    20b2:	e7a9      	b.n	2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>
    20b4:	e000ed00 	.word	0xe000ed00
    20b8:	0000785e 	.word	0x0000785e
    20bc:	0000788e 	.word	0x0000788e
    20c0:	000078aa 	.word	0x000078aa
    20c4:	000078d0 	.word	0x000078d0
    20c8:	000078e3 	.word	0x000078e3
    20cc:	00007907 	.word	0x00007907
    20d0:	00007928 	.word	0x00007928
    20d4:	00007830 	.word	0x00007830
    20d8:	00007845 	.word	0x00007845
    20dc:	00007951 	.word	0x00007951

000020e0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    20e0:	4b04      	ldr	r3, [pc, #16]	; (20f4 <z_arm_fault_init+0x14>)
    20e2:	695a      	ldr	r2, [r3, #20]
    20e4:	f042 0210 	orr.w	r2, r2, #16
    20e8:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    20ea:	695a      	ldr	r2, [r3, #20]
    20ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    20f0:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    20f2:	4770      	bx	lr
    20f4:	e000ed00 	.word	0xe000ed00

000020f8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    20f8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    20fc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2100:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2102:	4672      	mov	r2, lr
	bl z_arm_fault
    2104:	f7ff ff28 	bl	1f58 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2108:	bd01      	pop	{r0, pc}
    210a:	bf00      	nop

0000210c <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    210c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    210e:	2120      	movs	r1, #32
    2110:	4803      	ldr	r0, [pc, #12]	; (2120 <z_arm_interrupt_init+0x14>)
    2112:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2114:	3301      	adds	r3, #1
    2116:	2b41      	cmp	r3, #65	; 0x41
    2118:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    211c:	d1f9      	bne.n	2112 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    211e:	4770      	bx	lr
    2120:	e000e100 	.word	0xe000e100

00002124 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2124:	2000      	movs	r0, #0
    msr CONTROL, r0
    2126:	f380 8814 	msr	CONTROL, r0
    isb
    212a:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    212e:	2000      	movs	r0, #0
    msr MSPLIM, r0
    2130:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    2134:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2138:	f7ff fca8 	bl	1a8c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    213c:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    213e:	490e      	ldr	r1, [pc, #56]	; (2178 <__start+0x54>)
    str r0, [r1]
    2140:	6008      	str	r0, [r1, #0]
    dsb
    2142:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2146:	480d      	ldr	r0, [pc, #52]	; (217c <__start+0x58>)
    msr msp, r0
    2148:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    214c:	f000 f83e 	bl	21cc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2150:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2152:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2156:	480a      	ldr	r0, [pc, #40]	; (2180 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2158:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    215c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    215e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2162:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2166:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2168:	4308      	orrs	r0, r1
    msr CONTROL, r0
    216a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    216e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2172:	f7ff fd6f 	bl	1c54 <z_arm_prep_c>
    2176:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    2178:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    217c:	2000fce0 	.word	0x2000fce0
    ldr r0, =z_interrupt_stacks
    2180:	2000fce0 	.word	0x2000fce0

00002184 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2184:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2188:	4905      	ldr	r1, [pc, #20]	; (21a0 <sys_arch_reboot+0x1c>)
    218a:	4b06      	ldr	r3, [pc, #24]	; (21a4 <sys_arch_reboot+0x20>)
    218c:	68ca      	ldr	r2, [r1, #12]
    218e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2192:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2194:	60cb      	str	r3, [r1, #12]
    2196:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    219a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    219c:	e7fd      	b.n	219a <sys_arch_reboot+0x16>
    219e:	bf00      	nop
    21a0:	e000ed00 	.word	0xe000ed00
    21a4:	05fa0004 	.word	0x05fa0004

000021a8 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    21a8:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    21aa:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    21ac:	4906      	ldr	r1, [pc, #24]	; (21c8 <z_arm_clear_arm_mpu_config+0x20>)
    21ae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    21b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    21b6:	4293      	cmp	r3, r2
    21b8:	d100      	bne.n	21bc <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    21ba:	4770      	bx	lr
  mpu->RNR = rnr;
    21bc:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    21c0:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    21c4:	3301      	adds	r3, #1
    21c6:	e7f6      	b.n	21b6 <z_arm_clear_arm_mpu_config+0xe>
    21c8:	e000ed00 	.word	0xe000ed00

000021cc <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    21cc:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    21ce:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    21d0:	2400      	movs	r4, #0
    21d2:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    21d6:	f7ff ffe7 	bl	21a8 <z_arm_clear_arm_mpu_config>
    21da:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    21dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    21e0:	4a0b      	ldr	r2, [pc, #44]	; (2210 <z_arm_init_arch_hw_at_boot+0x44>)
    21e2:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    21e6:	3301      	adds	r3, #1
    21e8:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    21ea:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    21ee:	d1f8      	bne.n	21e2 <z_arm_init_arch_hw_at_boot+0x16>
    21f0:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    21f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    21f6:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    21fa:	3301      	adds	r3, #1
    21fc:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    21fe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    2202:	d1f8      	bne.n	21f6 <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    2204:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2206:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    220a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    220e:	bd10      	pop	{r4, pc}
    2210:	e000e100 	.word	0xe000e100

00002214 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    2214:	4b01      	ldr	r3, [pc, #4]	; (221c <__stdout_hook_install+0x8>)
    2216:	6018      	str	r0, [r3, #0]
}
    2218:	4770      	bx	lr
    221a:	bf00      	nop
    221c:	2000c4f8 	.word	0x2000c4f8

00002220 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2220:	4b08      	ldr	r3, [pc, #32]	; (2244 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2222:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2224:	1ac3      	subs	r3, r0, r3
{
    2226:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2228:	4907      	ldr	r1, [pc, #28]	; (2248 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    222a:	109b      	asrs	r3, r3, #2
{
    222c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    222e:	4359      	muls	r1, r3
    2230:	2240      	movs	r2, #64	; 0x40
    2232:	4806      	ldr	r0, [pc, #24]	; (224c <onoff_stop+0x2c>)
    2234:	f004 f813 	bl	625e <stop>
	notify(mgr, res);
    2238:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    223a:	4601      	mov	r1, r0
	notify(mgr, res);
    223c:	4620      	mov	r0, r4
}
    223e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2242:	4718      	bx	r3
    2244:	2000d338 	.word	0x2000d338
    2248:	b6db6db7 	.word	0xb6db6db7
    224c:	00006970 	.word	0x00006970

00002250 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2250:	2340      	movs	r3, #64	; 0x40
{
    2252:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2254:	4c0b      	ldr	r4, [pc, #44]	; (2284 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2256:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    2258:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    225a:	460b      	mov	r3, r1
{
    225c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    225e:	490a      	ldr	r1, [pc, #40]	; (2288 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    2260:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2262:	4361      	muls	r1, r4
{
    2264:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2266:	4a09      	ldr	r2, [pc, #36]	; (228c <onoff_start+0x3c>)
    2268:	4809      	ldr	r0, [pc, #36]	; (2290 <onoff_start+0x40>)
    226a:	f004 f825 	bl	62b8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    226e:	1e01      	subs	r1, r0, #0
    2270:	da05      	bge.n	227e <onoff_start+0x2e>
		notify(mgr, err);
    2272:	4630      	mov	r0, r6
    2274:	462b      	mov	r3, r5
	}
}
    2276:	b002      	add	sp, #8
    2278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    227c:	4718      	bx	r3
}
    227e:	b002      	add	sp, #8
    2280:	bd70      	pop	{r4, r5, r6, pc}
    2282:	bf00      	nop
    2284:	2000d338 	.word	0x2000d338
    2288:	b6db6db7 	.word	0xb6db6db7
    228c:	0000632b 	.word	0x0000632b
    2290:	00006970 	.word	0x00006970

00002294 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2294:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2296:	2200      	movs	r2, #0
    2298:	2101      	movs	r1, #1
{
    229a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    229c:	2005      	movs	r0, #5
    229e:	f7ff fcbf 	bl	1c20 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    22a2:	480f      	ldr	r0, [pc, #60]	; (22e0 <clk_init+0x4c>)
    22a4:	f001 f9b8 	bl	3618 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    22a8:	4b0e      	ldr	r3, [pc, #56]	; (22e4 <clk_init+0x50>)
    22aa:	4298      	cmp	r0, r3
    22ac:	d115      	bne.n	22da <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    22ae:	f004 fa94 	bl	67da <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    22b2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    22b4:	490c      	ldr	r1, [pc, #48]	; (22e8 <clk_init+0x54>)
    22b6:	4630      	mov	r0, r6
    22b8:	f003 fe9a 	bl	5ff0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    22bc:	2800      	cmp	r0, #0
    22be:	db0b      	blt.n	22d8 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    22c0:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
    22c2:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    22c4:	4908      	ldr	r1, [pc, #32]	; (22e8 <clk_init+0x54>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    22c6:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    22c8:	f104 001c 	add.w	r0, r4, #28
    22cc:	f003 fe90 	bl	5ff0 <onoff_manager_init>
		if (err < 0) {
    22d0:	2800      	cmp	r0, #0
    22d2:	db01      	blt.n	22d8 <clk_init+0x44>
	}

	return 0;
    22d4:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    22d6:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    22d8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    22da:	f06f 0004 	mvn.w	r0, #4
    22de:	e7fb      	b.n	22d8 <clk_init+0x44>
    22e0:	00002329 	.word	0x00002329
    22e4:	0bad0000 	.word	0x0bad0000
    22e8:	00006d98 	.word	0x00006d98

000022ec <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    22ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    22ee:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    22f0:	4601      	mov	r1, r0
	sub_data->cb = NULL;
    22f2:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
    22f4:	434b      	muls	r3, r1
    22f6:	480a      	ldr	r0, [pc, #40]	; (2320 <clkstarted_handle.constprop.0+0x34>)
    22f8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    22fa:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    22fc:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2300:	4418      	add	r0, r3
	sub_data->cb = NULL;
    2302:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
    2304:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    2306:	f003 ff97 	bl	6238 <set_on_state>
	if (callback) {
    230a:	b135      	cbz	r5, 231a <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    230c:	462b      	mov	r3, r5
    230e:	9a01      	ldr	r2, [sp, #4]
    2310:	4804      	ldr	r0, [pc, #16]	; (2324 <clkstarted_handle.constprop.0+0x38>)
}
    2312:	b002      	add	sp, #8
    2314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2318:	4718      	bx	r3
}
    231a:	b002      	add	sp, #8
    231c:	bd70      	pop	{r4, r5, r6, pc}
    231e:	bf00      	nop
    2320:	2000d338 	.word	0x2000d338
    2324:	00006970 	.word	0x00006970

00002328 <clock_event_handler>:
	switch (event) {
    2328:	b110      	cbz	r0, 2330 <clock_event_handler+0x8>
    232a:	2801      	cmp	r0, #1
    232c:	d004      	beq.n	2338 <clock_event_handler+0x10>
    232e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2330:	4b03      	ldr	r3, [pc, #12]	; (2340 <clock_event_handler+0x18>)
    2332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2334:	075b      	lsls	r3, r3, #29
    2336:	d101      	bne.n	233c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2338:	f7ff bfd8 	b.w	22ec <clkstarted_handle.constprop.0>
}
    233c:	4770      	bx	lr
    233e:	bf00      	nop
    2340:	2000d338 	.word	0x2000d338

00002344 <generic_hfclk_start>:
{
    2344:	b508      	push	{r3, lr}
	__asm__ volatile(
    2346:	f04f 0320 	mov.w	r3, #32
    234a:	f3ef 8111 	mrs	r1, BASEPRI
    234e:	f383 8812 	msr	BASEPRI_MAX, r3
    2352:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2356:	4a12      	ldr	r2, [pc, #72]	; (23a0 <generic_hfclk_start+0x5c>)
    2358:	6813      	ldr	r3, [r2, #0]
    235a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    235e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2362:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2364:	d00c      	beq.n	2380 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2366:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    236a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    236e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2372:	f013 0301 	ands.w	r3, r3, #1
    2376:	d003      	beq.n	2380 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2378:	480a      	ldr	r0, [pc, #40]	; (23a4 <generic_hfclk_start+0x60>)
    237a:	f003 ff5d 	bl	6238 <set_on_state>
			already_started = true;
    237e:	2301      	movs	r3, #1
	__asm__ volatile(
    2380:	f381 8811 	msr	BASEPRI, r1
    2384:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2388:	b123      	cbz	r3, 2394 <generic_hfclk_start+0x50>
}
    238a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    238e:	2000      	movs	r0, #0
    2390:	f7ff bfac 	b.w	22ec <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2394:	2001      	movs	r0, #1
}
    2396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    239a:	f004 ba2c 	b.w	67f6 <nrfx_clock_start>
    239e:	bf00      	nop
    23a0:	2000d388 	.word	0x2000d388
    23a4:	2000d378 	.word	0x2000d378

000023a8 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    23a8:	4b07      	ldr	r3, [pc, #28]	; (23c8 <generic_hfclk_stop+0x20>)
    23aa:	e8d3 2fef 	ldaex	r2, [r3]
    23ae:	f022 0102 	bic.w	r1, r2, #2
    23b2:	e8c3 1fe0 	stlex	r0, r1, [r3]
    23b6:	2800      	cmp	r0, #0
    23b8:	d1f7      	bne.n	23aa <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    23ba:	07d3      	lsls	r3, r2, #31
    23bc:	d402      	bmi.n	23c4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    23be:	2001      	movs	r0, #1
    23c0:	f004 ba5a 	b.w	6878 <nrfx_clock_stop>
}
    23c4:	4770      	bx	lr
    23c6:	bf00      	nop
    23c8:	2000d388 	.word	0x2000d388

000023cc <z_nrf_clock_control_lf_on>:
{
    23cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    23d0:	2201      	movs	r2, #1
    23d2:	4607      	mov	r7, r0
    23d4:	4935      	ldr	r1, [pc, #212]	; (24ac <z_nrf_clock_control_lf_on+0xe0>)
    23d6:	e8d1 3fef 	ldaex	r3, [r1]
    23da:	e8c1 2fe0 	stlex	r0, r2, [r1]
    23de:	2800      	cmp	r0, #0
    23e0:	d1f9      	bne.n	23d6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    23e2:	b933      	cbnz	r3, 23f2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    23e4:	4932      	ldr	r1, [pc, #200]	; (24b0 <z_nrf_clock_control_lf_on+0xe4>)
		err = onoff_request(mgr, &cli);
    23e6:	4833      	ldr	r0, [pc, #204]	; (24b4 <z_nrf_clock_control_lf_on+0xe8>)
    23e8:	604b      	str	r3, [r1, #4]
    23ea:	60cb      	str	r3, [r1, #12]
    23ec:	608a      	str	r2, [r1, #8]
    23ee:	f003 fe12 	bl	6016 <onoff_request>
	switch (start_mode) {
    23f2:	1e7b      	subs	r3, r7, #1
    23f4:	2b01      	cmp	r3, #1
    23f6:	d831      	bhi.n	245c <z_nrf_clock_control_lf_on+0x90>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    23f8:	2f01      	cmp	r7, #1
    23fa:	d107      	bne.n	240c <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    23fc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2400:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2404:	f003 0303 	and.w	r3, r3, #3
    2408:	2b02      	cmp	r3, #2
    240a:	d027      	beq.n	245c <z_nrf_clock_control_lf_on+0x90>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    240c:	f004 fa4e 	bl	68ac <k_is_in_isr>
    2410:	4604      	mov	r4, r0
    2412:	b918      	cbnz	r0, 241c <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    2414:	4b28      	ldr	r3, [pc, #160]	; (24b8 <z_nrf_clock_control_lf_on+0xec>)
	int key = isr_mode ? irq_lock() : 0;
    2416:	781b      	ldrb	r3, [r3, #0]
    2418:	2b00      	cmp	r3, #0
    241a:	d13f      	bne.n	249c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    241c:	f04f 0320 	mov.w	r3, #32
    2420:	f3ef 8611 	mrs	r6, BASEPRI
    2424:	f383 8812 	msr	BASEPRI_MAX, r3
    2428:	f3bf 8f6f 	isb	sy
    242c:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    242e:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2432:	f04f 0800 	mov.w	r8, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2436:	f8df 9084 	ldr.w	r9, [pc, #132]	; 24bc <z_nrf_clock_control_lf_on+0xf0>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    243a:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    243e:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    2442:	03d2      	lsls	r2, r2, #15
    2444:	d50c      	bpl.n	2460 <z_nrf_clock_control_lf_on+0x94>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2446:	f003 0303 	and.w	r3, r3, #3
    244a:	2b02      	cmp	r3, #2
    244c:	d001      	beq.n	2452 <z_nrf_clock_control_lf_on+0x86>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    244e:	2f01      	cmp	r7, #1
    2450:	d106      	bne.n	2460 <z_nrf_clock_control_lf_on+0x94>
	if (isr_mode) {
    2452:	b1ec      	cbz	r4, 2490 <z_nrf_clock_control_lf_on+0xc4>
	__asm__ volatile(
    2454:	f386 8811 	msr	BASEPRI, r6
    2458:	f3bf 8f6f 	isb	sy
}
    245c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2460:	4630      	mov	r0, r6
    2462:	f7ff fb87 	bl	1b74 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2466:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    246a:	b2db      	uxtb	r3, r3
    246c:	2b01      	cmp	r3, #1
    246e:	d1e4      	bne.n	243a <z_nrf_clock_control_lf_on+0x6e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2470:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2474:	2a00      	cmp	r2, #0
    2476:	d0e0      	beq.n	243a <z_nrf_clock_control_lf_on+0x6e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2478:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    247c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2480:	2202      	movs	r2, #2
    2482:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    2486:	2220      	movs	r2, #32
    2488:	f8c9 2180 	str.w	r2, [r9, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    248c:	60ab      	str	r3, [r5, #8]
}
    248e:	e7d4      	b.n	243a <z_nrf_clock_control_lf_on+0x6e>
    p_reg->INTENSET = mask;
    2490:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2494:	2202      	movs	r2, #2
    2496:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    249a:	e7df      	b.n	245c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    249c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    24a0:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    24a2:	4606      	mov	r6, r0
    24a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    24a8:	e7c1      	b.n	242e <z_nrf_clock_control_lf_on+0x62>
    24aa:	bf00      	nop
    24ac:	2000d38c 	.word	0x2000d38c
    24b0:	2000d328 	.word	0x2000d328
    24b4:	2000d354 	.word	0x2000d354
    24b8:	2000d4dd 	.word	0x2000d4dd
    24bc:	e000e100 	.word	0xe000e100

000024c0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    24c0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    24c2:	4808      	ldr	r0, [pc, #32]	; (24e4 <uart_console_init+0x24>)
    24c4:	4b08      	ldr	r3, [pc, #32]	; (24e8 <uart_console_init+0x28>)
    24c6:	6018      	str	r0, [r3, #0]
    24c8:	f004 f9e2 	bl	6890 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    24cc:	b138      	cbz	r0, 24de <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    24ce:	4807      	ldr	r0, [pc, #28]	; (24ec <uart_console_init+0x2c>)
    24d0:	f7ff fea0 	bl	2214 <__stdout_hook_install>
	__printk_hook_install(console_out);
    24d4:	4805      	ldr	r0, [pc, #20]	; (24ec <uart_console_init+0x2c>)
    24d6:	f7fe ff81 	bl	13dc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    24da:	2000      	movs	r0, #0
}
    24dc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    24de:	f06f 0012 	mvn.w	r0, #18
    24e2:	e7fb      	b.n	24dc <uart_console_init+0x1c>
    24e4:	000069b8 	.word	0x000069b8
    24e8:	2000d390 	.word	0x2000d390
    24ec:	000024f1 	.word	0x000024f1

000024f0 <console_out>:
	if ('\n' == c) {
    24f0:	280a      	cmp	r0, #10
{
    24f2:	b538      	push	{r3, r4, r5, lr}
    24f4:	4604      	mov	r4, r0
    24f6:	4d07      	ldr	r5, [pc, #28]	; (2514 <console_out+0x24>)
	if ('\n' == c) {
    24f8:	d104      	bne.n	2504 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    24fa:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    24fc:	6883      	ldr	r3, [r0, #8]
    24fe:	210d      	movs	r1, #13
    2500:	685b      	ldr	r3, [r3, #4]
    2502:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2504:	6828      	ldr	r0, [r5, #0]
    2506:	6883      	ldr	r3, [r0, #8]
    2508:	b2e1      	uxtb	r1, r4
    250a:	685b      	ldr	r3, [r3, #4]
    250c:	4798      	blx	r3
}
    250e:	4620      	mov	r0, r4
    2510:	bd38      	pop	{r3, r4, r5, pc}
    2512:	bf00      	nop
    2514:	2000d390 	.word	0x2000d390

00002518 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2518:	b530      	push	{r4, r5, lr}
	return port->config;
    251a:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    251c:	f001 051f 	and.w	r5, r1, #31
    2520:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2522:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2526:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    252a:	b085      	sub	sp, #20
    252c:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    2530:	d105      	bne.n	253e <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
    2532:	4628      	mov	r0, r5
    2534:	f001 fafe 	bl	3b34 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    2538:	2000      	movs	r0, #0
}
    253a:	b005      	add	sp, #20
    253c:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
    253e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2542:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    2546:	d12e      	bne.n	25a6 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    2548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    254c:	bf0c      	ite	eq
    254e:	2304      	moveq	r3, #4
    2550:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2552:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    2556:	6883      	ldr	r3, [r0, #8]
    2558:	fa23 f101 	lsr.w	r1, r3, r1
    255c:	07c9      	lsls	r1, r1, #31
    255e:	d414      	bmi.n	258a <gpio_nrfx_pin_interrupt_configure+0x72>
    2560:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2564:	d111      	bne.n	258a <gpio_nrfx_pin_interrupt_configure+0x72>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2566:	4a1b      	ldr	r2, [pc, #108]	; (25d4 <gpio_nrfx_pin_interrupt_configure+0xbc>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2568:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    256c:	3380      	adds	r3, #128	; 0x80
    256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    2572:	07db      	lsls	r3, r3, #31
    2574:	d409      	bmi.n	258a <gpio_nrfx_pin_interrupt_configure+0x72>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2576:	f10d 0407 	add.w	r4, sp, #7
    257a:	4621      	mov	r1, r4
    257c:	4628      	mov	r0, r5
    257e:	f001 fa41 	bl	3a04 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    2582:	4b15      	ldr	r3, [pc, #84]	; (25d8 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    2584:	4298      	cmp	r0, r3
    2586:	d019      	beq.n	25bc <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    2588:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    258a:	2300      	movs	r3, #0
    258c:	4628      	mov	r0, r5
    258e:	4619      	mov	r1, r3
    2590:	aa02      	add	r2, sp, #8
    2592:	f001 f90d 	bl	37b0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2596:	4b11      	ldr	r3, [pc, #68]	; (25dc <gpio_nrfx_pin_interrupt_configure+0xc4>)
    2598:	4298      	cmp	r0, r3
    259a:	d118      	bne.n	25ce <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    259c:	2101      	movs	r1, #1
    259e:	4628      	mov	r0, r5
    25a0:	f001 fa84 	bl	3aac <nrfx_gpiote_trigger_enable>
    25a4:	e7c8      	b.n	2538 <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    25a6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    25aa:	d005      	beq.n	25b8 <gpio_nrfx_pin_interrupt_configure+0xa0>
    25ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    25b0:	bf0c      	ite	eq
    25b2:	2302      	moveq	r3, #2
    25b4:	2301      	movne	r3, #1
    25b6:	e7cc      	b.n	2552 <gpio_nrfx_pin_interrupt_configure+0x3a>
    25b8:	2303      	movs	r3, #3
    25ba:	e7ca      	b.n	2552 <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
    25bc:	4620      	mov	r0, r4
    25be:	f001 fa6f 	bl	3aa0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    25c2:	4b06      	ldr	r3, [pc, #24]	; (25dc <gpio_nrfx_pin_interrupt_configure+0xc4>)
    25c4:	4298      	cmp	r0, r3
    25c6:	d0df      	beq.n	2588 <gpio_nrfx_pin_interrupt_configure+0x70>
				return -ENOMEM;
    25c8:	f06f 000b 	mvn.w	r0, #11
    25cc:	e7b5      	b.n	253a <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
    25ce:	f06f 0015 	mvn.w	r0, #21
    25d2:	e7b2      	b.n	253a <gpio_nrfx_pin_interrupt_configure+0x22>
    25d4:	50842500 	.word	0x50842500
    25d8:	0bad0004 	.word	0x0bad0004
    25dc:	0bad0000 	.word	0x0bad0000

000025e0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    25e0:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    25e2:	f001 fa4d 	bl	3a80 <nrfx_gpiote_is_init>
    25e6:	4604      	mov	r4, r0
    25e8:	b968      	cbnz	r0, 2606 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    25ea:	f001 fa21 	bl	3a30 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    25ee:	4b08      	ldr	r3, [pc, #32]	; (2610 <gpio_nrfx_init+0x30>)
    25f0:	4298      	cmp	r0, r3
    25f2:	d10a      	bne.n	260a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    25f4:	4621      	mov	r1, r4
    25f6:	4807      	ldr	r0, [pc, #28]	; (2614 <gpio_nrfx_init+0x34>)
    25f8:	f001 f9fe 	bl	39f8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    25fc:	4622      	mov	r2, r4
    25fe:	2105      	movs	r1, #5
    2600:	200d      	movs	r0, #13
    2602:	f7ff fb0d 	bl	1c20 <z_arm_irq_priority_set>
		return 0;
    2606:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    2608:	bd10      	pop	{r4, pc}
		return -EIO;
    260a:	f06f 0004 	mvn.w	r0, #4
    260e:	e7fb      	b.n	2608 <gpio_nrfx_init+0x28>
    2610:	0bad0000 	.word	0x0bad0000
    2614:	00002619 	.word	0x00002619

00002618 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2618:	0943      	lsrs	r3, r0, #5
{
    261a:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    261c:	d111      	bne.n	2642 <nrfx_gpio_handler+0x2a>
	return list->head;
    261e:	4b09      	ldr	r3, [pc, #36]	; (2644 <nrfx_gpio_handler+0x2c>)
    2620:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2622:	b171      	cbz	r1, 2642 <nrfx_gpio_handler+0x2a>
	gpio_fire_callbacks(list, port, BIT(pin));
    2624:	2301      	movs	r3, #1
	return node->next;
    2626:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2628:	4e07      	ldr	r6, [pc, #28]	; (2648 <nrfx_gpio_handler+0x30>)
    262a:	fa03 f500 	lsl.w	r5, r3, r0
		if (cb->pin_mask & pins) {
    262e:	688a      	ldr	r2, [r1, #8]
    2630:	402a      	ands	r2, r5
    2632:	d002      	beq.n	263a <nrfx_gpio_handler+0x22>
			cb->handler(port, cb, cb->pin_mask & pins);
    2634:	4630      	mov	r0, r6
    2636:	684b      	ldr	r3, [r1, #4]
    2638:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    263a:	b114      	cbz	r4, 2642 <nrfx_gpio_handler+0x2a>
    263c:	4621      	mov	r1, r4
    263e:	6824      	ldr	r4, [r4, #0]
    2640:	e7f5      	b.n	262e <nrfx_gpio_handler+0x16>
}
    2642:	bd70      	pop	{r4, r5, r6, pc}
    2644:	2000d394 	.word	0x2000d394
    2648:	00006988 	.word	0x00006988

0000264c <gpio_nrfx_pin_configure>:
{
    264c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    2650:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2654:	f001 061f 	and.w	r6, r1, #31
    2658:	f898 300c 	ldrb.w	r3, [r8, #12]
{
    265c:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    265e:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
    2662:	4614      	mov	r4, r2
    2664:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2666:	4630      	mov	r0, r6
    2668:	f10d 0103 	add.w	r1, sp, #3
    266c:	f001 f9ca 	bl	3a04 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2670:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2674:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2676:	d10b      	bne.n	2690 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2678:	4630      	mov	r0, r6
    267a:	f001 fa83 	bl	3b84 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    267e:	4b42      	ldr	r3, [pc, #264]	; (2788 <gpio_nrfx_pin_configure+0x13c>)
    2680:	4599      	cmp	r9, r3
    2682:	d103      	bne.n	268c <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
    2684:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2688:	f001 fa04 	bl	3a94 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    268c:	2000      	movs	r0, #0
    268e:	e056      	b.n	273e <gpio_nrfx_pin_configure+0xf2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2690:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2692:	4630      	mov	r0, r6
    2694:	4619      	mov	r1, r3
    2696:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    2698:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    269c:	f001 f888 	bl	37b0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    26a0:	4b39      	ldr	r3, [pc, #228]	; (2788 <gpio_nrfx_pin_configure+0x13c>)
    26a2:	4298      	cmp	r0, r3
    26a4:	d002      	beq.n	26ac <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    26a6:	f06f 0015 	mvn.w	r0, #21
    26aa:	e048      	b.n	273e <gpio_nrfx_pin_configure+0xf2>
	if (free_ch) {
    26ac:	4581      	cmp	r9, r0
    26ae:	d103      	bne.n	26b8 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
    26b0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    26b4:	f001 f9ee 	bl	3a94 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    26b8:	03a5      	lsls	r5, r4, #14
    26ba:	d552      	bpl.n	2762 <gpio_nrfx_pin_configure+0x116>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    26bc:	f240 3306 	movw	r3, #774	; 0x306
    26c0:	4023      	ands	r3, r4
    26c2:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    26c6:	d03d      	beq.n	2744 <gpio_nrfx_pin_configure+0xf8>
    26c8:	d80c      	bhi.n	26e4 <gpio_nrfx_pin_configure+0x98>
    26ca:	2b06      	cmp	r3, #6
    26cc:	d015      	beq.n	26fa <gpio_nrfx_pin_configure+0xae>
    26ce:	d804      	bhi.n	26da <gpio_nrfx_pin_configure+0x8e>
    26d0:	b19b      	cbz	r3, 26fa <gpio_nrfx_pin_configure+0xae>
    26d2:	2b02      	cmp	r3, #2
    26d4:	d1e7      	bne.n	26a6 <gpio_nrfx_pin_configure+0x5a>
    26d6:	2304      	movs	r3, #4
    26d8:	e00f      	b.n	26fa <gpio_nrfx_pin_configure+0xae>
    26da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    26de:	d1e2      	bne.n	26a6 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
    26e0:	2301      	movs	r3, #1
    26e2:	e00a      	b.n	26fa <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    26e4:	f240 2202 	movw	r2, #514	; 0x202
    26e8:	4293      	cmp	r3, r2
    26ea:	d02d      	beq.n	2748 <gpio_nrfx_pin_configure+0xfc>
    26ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    26f0:	d02c      	beq.n	274c <gpio_nrfx_pin_configure+0x100>
    26f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    26f6:	d1d6      	bne.n	26a6 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
    26f8:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    26fa:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    26fe:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2702:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    2706:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    2708:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    270c:	bf4c      	ite	mi
    270e:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    2710:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2714:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    2716:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    271a:	d519      	bpl.n	2750 <gpio_nrfx_pin_configure+0x104>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    271c:	2101      	movs	r1, #1
    271e:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2722:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
    2726:	609f      	str	r7, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2728:	2200      	movs	r2, #0
    272a:	4630      	mov	r0, r6
    272c:	a901      	add	r1, sp, #4
    272e:	f001 f8e9 	bl	3904 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2732:	4b15      	ldr	r3, [pc, #84]	; (2788 <gpio_nrfx_pin_configure+0x13c>)
    2734:	4298      	cmp	r0, r3
    2736:	bf14      	ite	ne
    2738:	f06f 0015 	mvnne.w	r0, #21
    273c:	2000      	moveq	r0, #0
}
    273e:	b005      	add	sp, #20
    2740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
    2744:	2307      	movs	r3, #7
    2746:	e7d8      	b.n	26fa <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
    2748:	2305      	movs	r3, #5
    274a:	e7d6      	b.n	26fa <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
    274c:	2303      	movs	r3, #3
    274e:	e7d4      	b.n	26fa <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2750:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2752:	bf41      	itttt	mi
    2754:	2101      	movmi	r1, #1
    2756:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
    275a:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
    275e:	60df      	strmi	r7, [r3, #12]
}
    2760:	e7e2      	b.n	2728 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    2762:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2764:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2768:	bf4c      	ite	mi
    276a:	2403      	movmi	r4, #3
    276c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2770:	461a      	mov	r2, r3
    2772:	4630      	mov	r0, r6
    2774:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    2776:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    277a:	f001 f819 	bl	37b0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    277e:	4b02      	ldr	r3, [pc, #8]	; (2788 <gpio_nrfx_pin_configure+0x13c>)
    2780:	4298      	cmp	r0, r3
    2782:	d083      	beq.n	268c <gpio_nrfx_pin_configure+0x40>
    2784:	e78f      	b.n	26a6 <gpio_nrfx_pin_configure+0x5a>
    2786:	bf00      	nop
    2788:	0bad0000 	.word	0x0bad0000

0000278c <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    278c:	4b02      	ldr	r3, [pc, #8]	; (2798 <flash_nrf_pages_layout+0xc>)
    278e:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2790:	2301      	movs	r3, #1
    2792:	6013      	str	r3, [r2, #0]
}
    2794:	4770      	bx	lr
    2796:	bf00      	nop
    2798:	2000d3a0 	.word	0x2000d3a0

0000279c <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    279c:	4800      	ldr	r0, [pc, #0]	; (27a0 <flash_nrf_get_parameters+0x4>)
    279e:	4770      	bx	lr
    27a0:	00006dec 	.word	0x00006dec

000027a4 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    27a4:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    27a6:	f004 f86f 	bl	6888 <nrfx_nvmc_flash_page_count_get>
    27aa:	4c03      	ldr	r4, [pc, #12]	; (27b8 <nrf_flash_init+0x14>)
    27ac:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    27ae:	f004 f868 	bl	6882 <nrfx_nvmc_flash_page_size_get>
    27b2:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    27b4:	2000      	movs	r0, #0
    27b6:	bd10      	pop	{r4, pc}
    27b8:	2000d3a0 	.word	0x2000d3a0

000027bc <flash_nrf_erase>:
{
    27bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27be:	460e      	mov	r6, r1
    27c0:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    27c2:	f004 f85e 	bl	6882 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    27c6:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    27c8:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    27ca:	4630      	mov	r0, r6
    27cc:	f003 fe0b 	bl	63e6 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    27d0:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    27d2:	b1f8      	cbz	r0, 2814 <CONFIG_MAIN_STACK_SIZE+0x14>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    27d4:	fbb6 f3f5 	udiv	r3, r6, r5
    27d8:	fb05 6313 	mls	r3, r5, r3, r6
    27dc:	b923      	cbnz	r3, 27e8 <flash_nrf_erase+0x2c>
    27de:	fbb4 f3f5 	udiv	r3, r4, r5
    27e2:	fb05 4013 	mls	r0, r5, r3, r4
    27e6:	b140      	cbz	r0, 27fa <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    27e8:	4623      	mov	r3, r4
    27ea:	4632      	mov	r2, r6
    27ec:	2145      	movs	r1, #69	; 0x45
    27ee:	480c      	ldr	r0, [pc, #48]	; (2820 <CONFIG_MAIN_STACK_SIZE+0x20>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    27f0:	f003 fc5b 	bl	60aa <z_log_minimal_printk>
		return -EINVAL;
    27f4:	f06f 0015 	mvn.w	r0, #21
    27f8:	e00b      	b.n	2812 <CONFIG_MAIN_STACK_SIZE+0x12>
		if (!n_pages) {
    27fa:	42a5      	cmp	r5, r4
    27fc:	d809      	bhi.n	2812 <CONFIG_MAIN_STACK_SIZE+0x12>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    27fe:	f004 f840 	bl	6882 <nrfx_nvmc_flash_page_size_get>
    2802:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    2804:	4638      	mov	r0, r7
    2806:	f001 fa9f 	bl	3d48 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    280a:	1b64      	subs	r4, r4, r5
    280c:	442f      	add	r7, r5
    280e:	d1f9      	bne.n	2804 <CONFIG_MAIN_STACK_SIZE+0x4>
	return ret;
    2810:	4620      	mov	r0, r4
}
    2812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2814:	4623      	mov	r3, r4
    2816:	4632      	mov	r2, r6
    2818:	2145      	movs	r1, #69	; 0x45
    281a:	4802      	ldr	r0, [pc, #8]	; (2824 <CONFIG_MAIN_STACK_SIZE+0x24>)
    281c:	e7e8      	b.n	27f0 <flash_nrf_erase+0x34>
    281e:	bf00      	nop
    2820:	0000799a 	.word	0x0000799a
    2824:	000079be 	.word	0x000079be

00002828 <flash_nrf_write>:
{
    2828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    282a:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    282c:	4619      	mov	r1, r3
    282e:	4630      	mov	r0, r6
{
    2830:	4617      	mov	r7, r2
    2832:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    2834:	f003 fdd7 	bl	63e6 <is_regular_addr_valid>
    2838:	b940      	cbnz	r0, 284c <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    283a:	4623      	mov	r3, r4
    283c:	4632      	mov	r2, r6
    283e:	2145      	movs	r1, #69	; 0x45
    2840:	4812      	ldr	r0, [pc, #72]	; (288c <flash_nrf_write+0x64>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2842:	f003 fc32 	bl	60aa <z_log_minimal_printk>
		return -EINVAL;
    2846:	f06f 0015 	mvn.w	r0, #21
}
    284a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    284c:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    2850:	f015 0503 	ands.w	r5, r5, #3
    2854:	d004      	beq.n	2860 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2856:	4623      	mov	r3, r4
    2858:	4632      	mov	r2, r6
    285a:	2145      	movs	r1, #69	; 0x45
    285c:	480c      	ldr	r0, [pc, #48]	; (2890 <flash_nrf_write+0x68>)
    285e:	e7f0      	b.n	2842 <flash_nrf_write+0x1a>
	if (!len) {
    2860:	b18c      	cbz	r4, 2886 <flash_nrf_write+0x5e>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    2862:	f024 0403 	bic.w	r4, r4, #3
    2866:	42ac      	cmp	r4, r5
    2868:	eb05 0006 	add.w	r0, r5, r6
    286c:	d106      	bne.n	287c <flash_nrf_write+0x54>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    286e:	4a09      	ldr	r2, [pc, #36]	; (2894 <flash_nrf_write+0x6c>)
    2870:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    2874:	07db      	lsls	r3, r3, #31
    2876:	d5fb      	bpl.n	2870 <flash_nrf_write+0x48>
	return ret;
    2878:	2000      	movs	r0, #0
    287a:	e7e6      	b.n	284a <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
    287c:	5979      	ldr	r1, [r7, r5]
    287e:	f001 fa81 	bl	3d84 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    2882:	3504      	adds	r5, #4
}
    2884:	e7ef      	b.n	2866 <flash_nrf_write+0x3e>
		return 0;
    2886:	4620      	mov	r0, r4
    2888:	e7df      	b.n	284a <flash_nrf_write+0x22>
    288a:	bf00      	nop
    288c:	000079be 	.word	0x000079be
    2890:	000079e0 	.word	0x000079e0
    2894:	50039000 	.word	0x50039000

00002898 <flash_nrf_read>:
{
    2898:	b537      	push	{r0, r1, r2, r4, r5, lr}
    289a:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
    289c:	4619      	mov	r1, r3
    289e:	4620      	mov	r0, r4
    28a0:	9301      	str	r3, [sp, #4]
{
    28a2:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
    28a4:	f003 fd9f 	bl	63e6 <is_regular_addr_valid>
    28a8:	9b01      	ldr	r3, [sp, #4]
    28aa:	b940      	cbnz	r0, 28be <flash_nrf_read+0x26>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    28ac:	4809      	ldr	r0, [pc, #36]	; (28d4 <flash_nrf_read+0x3c>)
    28ae:	4622      	mov	r2, r4
    28b0:	2145      	movs	r1, #69	; 0x45
    28b2:	f003 fbfa 	bl	60aa <z_log_minimal_printk>
    28b6:	f06f 0015 	mvn.w	r0, #21
}
    28ba:	b003      	add	sp, #12
    28bc:	bd30      	pop	{r4, r5, pc}
	if (!len) {
    28be:	b133      	cbz	r3, 28ce <flash_nrf_read+0x36>
	memcpy(data, (void *)addr, len);
    28c0:	461a      	mov	r2, r3
    28c2:	4621      	mov	r1, r4
    28c4:	4628      	mov	r0, r5
    28c6:	f003 fc97 	bl	61f8 <memcpy>
	return 0;
    28ca:	2000      	movs	r0, #0
    28cc:	e7f5      	b.n	28ba <flash_nrf_read+0x22>
		return 0;
    28ce:	4618      	mov	r0, r3
    28d0:	e7f3      	b.n	28ba <flash_nrf_read+0x22>
    28d2:	bf00      	nop
    28d4:	000079be 	.word	0x000079be

000028d8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    28d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28dc:	4604      	mov	r4, r0
    28de:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    28e0:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    28e2:	f003 ffe3 	bl	68ac <k_is_in_isr>
    28e6:	b910      	cbnz	r0, 28ee <uarte_nrfx_poll_out+0x16>
	return !z_sys_post_kernel;
    28e8:	4b2b      	ldr	r3, [pc, #172]	; (2998 <uarte_nrfx_poll_out+0xc0>)

		t = now;
	}
#endif

	if (isr_mode) {
    28ea:	781b      	ldrb	r3, [r3, #0]
    28ec:	b9ab      	cbnz	r3, 291a <uarte_nrfx_poll_out+0x42>
	__asm__ volatile(
    28ee:	f04f 0320 	mov.w	r3, #32
    28f2:	f3ef 8811 	mrs	r8, BASEPRI
    28f6:	f383 8812 	msr	BASEPRI_MAX, r3
    28fa:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    28fe:	6860      	ldr	r0, [r4, #4]
    2900:	4646      	mov	r6, r8
    2902:	f003 fdd0 	bl	64a6 <is_tx_ready.isra.0>
    2906:	bb08      	cbnz	r0, 294c <uarte_nrfx_poll_out+0x74>
	__asm__ volatile(
    2908:	f388 8811 	msr	BASEPRI, r8
    290c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2910:	e7ed      	b.n	28ee <uarte_nrfx_poll_out+0x16>
	__asm__ volatile(
    2912:	f388 8811 	msr	BASEPRI, r8
    2916:	f3bf 8f6f 	isb	sy
{
    291a:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    291c:	6860      	ldr	r0, [r4, #4]
    291e:	f003 fdc2 	bl	64a6 <is_tx_ready.isra.0>
    2922:	b928      	cbnz	r0, 2930 <uarte_nrfx_poll_out+0x58>
    2924:	2001      	movs	r0, #1
    2926:	f003 ff0a 	bl	673e <nrfx_busy_wait>
    292a:	3e01      	subs	r6, #1
    292c:	d1f6      	bne.n	291c <uarte_nrfx_poll_out+0x44>
    292e:	e7f4      	b.n	291a <uarte_nrfx_poll_out+0x42>
	__asm__ volatile(
    2930:	f04f 0320 	mov.w	r3, #32
    2934:	f3ef 8811 	mrs	r8, BASEPRI
    2938:	f383 8812 	msr	BASEPRI_MAX, r3
    293c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2940:	6860      	ldr	r0, [r4, #4]
    2942:	4646      	mov	r6, r8
    2944:	f003 fdaf 	bl	64a6 <is_tx_ready.isra.0>
    2948:	2800      	cmp	r0, #0
    294a:	d0e2      	beq.n	2912 <uarte_nrfx_poll_out+0x3a>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	*data->char_out = c;
    294c:	693b      	ldr	r3, [r7, #16]
    294e:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    2950:	6862      	ldr	r2, [r4, #4]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2952:	6939      	ldr	r1, [r7, #16]
	return config->uarte_regs;
    2954:	6813      	ldr	r3, [r2, #0]
    2956:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    295a:	2101      	movs	r1, #1
    295c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2960:	2100      	movs	r1, #0
    2962:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    2966:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    296a:	f8c3 1158 	str.w	r1, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    296e:	6852      	ldr	r2, [r2, #4]
    2970:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
    2974:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2976:	bf41      	itttt	mi
    2978:	2208      	movmi	r2, #8
    297a:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    297e:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2982:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2986:	2201      	movs	r2, #1
    2988:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    298a:	f386 8811 	msr	BASEPRI, r6
    298e:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2996:	bf00      	nop
    2998:	2000d4dd 	.word	0x2000d4dd

0000299c <uarte_nrfx_configure>:
{
    299c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    299e:	794b      	ldrb	r3, [r1, #5]
    29a0:	2b01      	cmp	r3, #1
    29a2:	d026      	beq.n	29f2 <uarte_nrfx_configure+0x56>
    29a4:	2b03      	cmp	r3, #3
    29a6:	d121      	bne.n	29ec <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    29a8:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    29aa:	798b      	ldrb	r3, [r1, #6]
    29ac:	2b03      	cmp	r3, #3
    29ae:	d11d      	bne.n	29ec <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    29b0:	79cc      	ldrb	r4, [r1, #7]
    29b2:	b10c      	cbz	r4, 29b8 <uarte_nrfx_configure+0x1c>
    29b4:	2c01      	cmp	r4, #1
    29b6:	d119      	bne.n	29ec <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    29b8:	790a      	ldrb	r2, [r1, #4]
    29ba:	b112      	cbz	r2, 29c2 <uarte_nrfx_configure+0x26>
    29bc:	2a02      	cmp	r2, #2
    29be:	d115      	bne.n	29ec <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    29c0:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    29c2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    29c4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    29c6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    29ca:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    29cc:	d065      	beq.n	2a9a <uarte_nrfx_configure+0xfe>
    29ce:	d82d      	bhi.n	2a2c <uarte_nrfx_configure+0x90>
    29d0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    29d4:	d064      	beq.n	2aa0 <uarte_nrfx_configure+0x104>
    29d6:	d816      	bhi.n	2a06 <uarte_nrfx_configure+0x6a>
    29d8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    29dc:	d062      	beq.n	2aa4 <uarte_nrfx_configure+0x108>
    29de:	d80a      	bhi.n	29f6 <uarte_nrfx_configure+0x5a>
    29e0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    29e4:	d061      	beq.n	2aaa <uarte_nrfx_configure+0x10e>
    29e6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    29ea:	d061      	beq.n	2ab0 <uarte_nrfx_configure+0x114>
    29ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
    29f0:	e052      	b.n	2a98 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    29f2:	2600      	movs	r6, #0
    29f4:	e7d9      	b.n	29aa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    29f6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    29fa:	d05c      	beq.n	2ab6 <uarte_nrfx_configure+0x11a>
    29fc:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2a00:	d1f4      	bne.n	29ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2a02:	4b37      	ldr	r3, [pc, #220]	; (2ae0 <uarte_nrfx_configure+0x144>)
    2a04:	e03c      	b.n	2a80 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2a06:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2a0a:	d057      	beq.n	2abc <uarte_nrfx_configure+0x120>
    2a0c:	d807      	bhi.n	2a1e <uarte_nrfx_configure+0x82>
    2a0e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2a12:	d055      	beq.n	2ac0 <uarte_nrfx_configure+0x124>
    2a14:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2a18:	d1e8      	bne.n	29ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2a1a:	4b32      	ldr	r3, [pc, #200]	; (2ae4 <uarte_nrfx_configure+0x148>)
    2a1c:	e030      	b.n	2a80 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2a1e:	f647 2712 	movw	r7, #31250	; 0x7a12
    2a22:	42bb      	cmp	r3, r7
    2a24:	d1e2      	bne.n	29ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2a26:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2a2a:	e029      	b.n	2a80 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2a2c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2a30:	d048      	beq.n	2ac4 <uarte_nrfx_configure+0x128>
    2a32:	d813      	bhi.n	2a5c <uarte_nrfx_configure+0xc0>
    2a34:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2a38:	d047      	beq.n	2aca <uarte_nrfx_configure+0x12e>
    2a3a:	d809      	bhi.n	2a50 <uarte_nrfx_configure+0xb4>
    2a3c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2a40:	42bb      	cmp	r3, r7
    2a42:	d044      	beq.n	2ace <uarte_nrfx_configure+0x132>
    2a44:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2a48:	d1d0      	bne.n	29ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2a4a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2a4e:	e017      	b.n	2a80 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2a50:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2a54:	d1ca      	bne.n	29ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2a56:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2a5a:	e011      	b.n	2a80 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2a5c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2a60:	d038      	beq.n	2ad4 <uarte_nrfx_configure+0x138>
    2a62:	d808      	bhi.n	2a76 <uarte_nrfx_configure+0xda>
    2a64:	4f20      	ldr	r7, [pc, #128]	; (2ae8 <uarte_nrfx_configure+0x14c>)
    2a66:	42bb      	cmp	r3, r7
    2a68:	d037      	beq.n	2ada <uarte_nrfx_configure+0x13e>
    2a6a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2a6e:	d1bd      	bne.n	29ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2a70:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2a74:	e004      	b.n	2a80 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2a76:	4f1d      	ldr	r7, [pc, #116]	; (2aec <uarte_nrfx_configure+0x150>)
    2a78:	42bb      	cmp	r3, r7
    2a7a:	d1b7      	bne.n	29ec <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2a7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    2a80:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    2a82:	4334      	orrs	r4, r6
    p_reg->BAUDRATE = baudrate;
    2a84:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    2a88:	4322      	orrs	r2, r4
	data->uart_config = *cfg;
    2a8a:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2a8c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2a90:	c903      	ldmia	r1, {r0, r1}
    2a92:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    2a96:	2000      	movs	r0, #0
}
    2a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2a9a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2a9e:	e7ef      	b.n	2a80 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2aa0:	4b13      	ldr	r3, [pc, #76]	; (2af0 <uarte_nrfx_configure+0x154>)
    2aa2:	e7ed      	b.n	2a80 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2aa4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2aa8:	e7ea      	b.n	2a80 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    2aaa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2aae:	e7e7      	b.n	2a80 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    2ab0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2ab4:	e7e4      	b.n	2a80 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2ab6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2aba:	e7e1      	b.n	2a80 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2abc:	4b0d      	ldr	r3, [pc, #52]	; (2af4 <uarte_nrfx_configure+0x158>)
    2abe:	e7df      	b.n	2a80 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2ac0:	4b0d      	ldr	r3, [pc, #52]	; (2af8 <uarte_nrfx_configure+0x15c>)
    2ac2:	e7dd      	b.n	2a80 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2ac4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2ac8:	e7da      	b.n	2a80 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2aca:	4b0c      	ldr	r3, [pc, #48]	; (2afc <uarte_nrfx_configure+0x160>)
    2acc:	e7d8      	b.n	2a80 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2ace:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2ad2:	e7d5      	b.n	2a80 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2ad4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2ad8:	e7d2      	b.n	2a80 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2ada:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2ade:	e7cf      	b.n	2a80 <uarte_nrfx_configure+0xe4>
    2ae0:	0013b000 	.word	0x0013b000
    2ae4:	004ea000 	.word	0x004ea000
    2ae8:	0003d090 	.word	0x0003d090
    2aec:	000f4240 	.word	0x000f4240
    2af0:	00275000 	.word	0x00275000
    2af4:	0075c000 	.word	0x0075c000
    2af8:	003af000 	.word	0x003af000
    2afc:	013a9000 	.word	0x013a9000

00002b00 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    2b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2b04:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    2b06:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    2b0a:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    2b0c:	f8d8 4000 	ldr.w	r4, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    2b10:	f8d8 900c 	ldr.w	r9, [r8, #12]
    2b14:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
    2b18:	4607      	mov	r7, r0
	data->dev = dev;
    2b1a:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2b1c:	aa01      	add	r2, sp, #4
    2b1e:	4648      	mov	r0, r9
    2b20:	f003 fd29 	bl	6576 <pinctrl_lookup_state>
	if (ret < 0) {
    2b24:	1e05      	subs	r5, r0, #0
    2b26:	db1f      	blt.n	2b68 <uarte_instance_init.constprop.0+0x68>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2b28:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2b2a:	f8d9 2000 	ldr.w	r2, [r9]
    2b2e:	7919      	ldrb	r1, [r3, #4]
    2b30:	6818      	ldr	r0, [r3, #0]
    2b32:	f000 fab9 	bl	30a8 <pinctrl_configure_pins>
	if (err < 0) {
    2b36:	1e05      	subs	r5, r0, #0
    2b38:	db16      	blt.n	2b68 <uarte_instance_init.constprop.0+0x68>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    2b3a:	4638      	mov	r0, r7
    2b3c:	1d31      	adds	r1, r6, #4
    2b3e:	f7ff ff2d 	bl	299c <uarte_nrfx_configure>
	if (err) {
    2b42:	4605      	mov	r5, r0
    2b44:	b980      	cbnz	r0, 2b68 <uarte_instance_init.constprop.0+0x68>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2b46:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2b4a:	0799      	lsls	r1, r3, #30
    2b4c:	d51c      	bpl.n	2b88 <uarte_instance_init.constprop.0+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2b4e:	f106 0018 	add.w	r0, r6, #24
    2b52:	f000 fda5 	bl	36a0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2b56:	4b21      	ldr	r3, [pc, #132]	; (2bdc <uarte_instance_init.constprop.0+0xdc>)
    2b58:	4298      	cmp	r0, r3
    2b5a:	d009      	beq.n	2b70 <uarte_instance_init.constprop.0+0x70>
		LOG_ERR("Failed to allocate PPI Channel");
    2b5c:	2145      	movs	r1, #69	; 0x45
    2b5e:	4820      	ldr	r0, [pc, #128]	; (2be0 <uarte_instance_init.constprop.0+0xe0>)
    2b60:	f003 faa3 	bl	60aa <z_log_minimal_printk>
		return -EIO;
    2b64:	f06f 0504 	mvn.w	r5, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    2b68:	4628      	mov	r0, r5
    2b6a:	b003      	add	sp, #12
    2b6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2b70:	7e32      	ldrb	r2, [r6, #24]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2b72:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    2b76:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2b7a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2b7e:	2301      	movs	r3, #1
    2b80:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    2b82:	4a18      	ldr	r2, [pc, #96]	; (2be4 <uarte_instance_init.constprop.0+0xe4>)
    2b84:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2b88:	2308      	movs	r3, #8
    2b8a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2b8e:	f898 3008 	ldrb.w	r3, [r8, #8]
    2b92:	b953      	cbnz	r3, 2baa <uarte_instance_init.constprop.0+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b94:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2b98:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2b9c:	6973      	ldr	r3, [r6, #20]
    2b9e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2ba2:	2301      	movs	r3, #1
    2ba4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ba8:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2baa:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2bae:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    2bb0:	bf5c      	itt	pl
    2bb2:	f44f 7280 	movpl.w	r2, #256	; 0x100
    2bb6:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2bba:	06db      	lsls	r3, r3, #27
    2bbc:	bf44      	itt	mi
    2bbe:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    2bc2:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    2bc6:	6933      	ldr	r3, [r6, #16]
    2bc8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2bcc:	2300      	movs	r3, #0
    2bce:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2bd2:	2301      	movs	r3, #1
    2bd4:	60a3      	str	r3, [r4, #8]
    2bd6:	60e3      	str	r3, [r4, #12]
	return 0;
    2bd8:	e7c6      	b.n	2b68 <uarte_instance_init.constprop.0+0x68>
    2bda:	bf00      	nop
    2bdc:	0bad0000 	.word	0x0bad0000
    2be0:	00007a24 	.word	0x00007a24
    2be4:	50017000 	.word	0x50017000

00002be8 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2be8:	2301      	movs	r3, #1
    2bea:	4083      	lsls	r3, r0
{
    2bec:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2bee:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2bf0:	4a0d      	ldr	r2, [pc, #52]	; (2c28 <compare_int_lock+0x40>)
    2bf2:	e8d2 1fef 	ldaex	r1, [r2]
    2bf6:	ea01 0c04 	and.w	ip, r1, r4
    2bfa:	e8c2 cfee 	stlex	lr, ip, [r2]
    2bfe:	f1be 0f00 	cmp.w	lr, #0
    2c02:	d1f6      	bne.n	2bf2 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2c04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2c08:	fa02 f000 	lsl.w	r0, r2, r0
    2c0c:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    2c10:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2c14:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c18:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2c1c:	420b      	tst	r3, r1
}
    2c1e:	bf14      	ite	ne
    2c20:	2001      	movne	r0, #1
    2c22:	2000      	moveq	r0, #0
    2c24:	bd10      	pop	{r4, pc}
    2c26:	bf00      	nop
    2c28:	2000d3ac 	.word	0x2000d3ac

00002c2c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2c2c:	4919      	ldr	r1, [pc, #100]	; (2c94 <sys_clock_timeout_handler+0x68>)
{
    2c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2c30:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2c32:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2c36:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2c38:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2c3c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2c40:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2c42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2c46:	d222      	bcs.n	2c8e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2c48:	4b13      	ldr	r3, [pc, #76]	; (2c98 <sys_clock_timeout_handler+0x6c>)
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	0a1a      	lsrs	r2, r3, #8
    2c4e:	061b      	lsls	r3, r3, #24
    2c50:	195e      	adds	r6, r3, r5
    2c52:	4b12      	ldr	r3, [pc, #72]	; (2c9c <sys_clock_timeout_handler+0x70>)
    2c54:	f142 0700 	adc.w	r7, r2, #0
    2c58:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    2c5c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2c5e:	f001 f9b5 	bl	3fcc <sys_clock_announce>
    return p_reg->CC[ch];
    2c62:	00a3      	lsls	r3, r4, #2
    2c64:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    2c68:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2c6c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2c70:	42aa      	cmp	r2, r5
    2c72:	d10b      	bne.n	2c8c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2c74:	b91e      	cbnz	r6, 2c7e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    2c76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    2c7a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2c7e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    p_reg->EVTENSET = mask;
    2c82:	4b07      	ldr	r3, [pc, #28]	; (2ca0 <sys_clock_timeout_handler+0x74>)
    2c84:	fa00 f404 	lsl.w	r4, r0, r4
    2c88:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    2c8e:	2600      	movs	r6, #0
    2c90:	e7e5      	b.n	2c5e <sys_clock_timeout_handler+0x32>
    2c92:	bf00      	nop
    2c94:	2000c630 	.word	0x2000c630
    2c98:	2000d3b0 	.word	0x2000d3b0
    2c9c:	2000c618 	.word	0x2000c618
    2ca0:	50015000 	.word	0x50015000

00002ca4 <compare_int_unlock>:
	if (key) {
    2ca4:	b1e1      	cbz	r1, 2ce0 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
    2ca6:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2ca8:	4a0e      	ldr	r2, [pc, #56]	; (2ce4 <compare_int_unlock+0x40>)
    2caa:	4083      	lsls	r3, r0
    2cac:	e8d2 1fef 	ldaex	r1, [r2]
    2cb0:	4319      	orrs	r1, r3
    2cb2:	e8c2 1fec 	stlex	ip, r1, [r2]
    2cb6:	f1bc 0f00 	cmp.w	ip, #0
    2cba:	d1f7      	bne.n	2cac <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2cbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    2cc0:	4a09      	ldr	r2, [pc, #36]	; (2ce8 <compare_int_unlock+0x44>)
    2cc2:	4083      	lsls	r3, r0
    2cc4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2cc8:	4b08      	ldr	r3, [pc, #32]	; (2cec <compare_int_unlock+0x48>)
    2cca:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2cce:	fa23 f000 	lsr.w	r0, r3, r0
    2cd2:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cd4:	bf42      	ittt	mi
    2cd6:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    2cda:	4b05      	ldrmi	r3, [pc, #20]	; (2cf0 <compare_int_unlock+0x4c>)
    2cdc:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    2ce0:	4770      	bx	lr
    2ce2:	bf00      	nop
    2ce4:	2000d3ac 	.word	0x2000d3ac
    2ce8:	50015000 	.word	0x50015000
    2cec:	2000d3a8 	.word	0x2000d3a8
    2cf0:	e000e100 	.word	0xe000e100

00002cf4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2cf4:	4b0d      	ldr	r3, [pc, #52]	; (2d2c <z_nrf_rtc_timer_read+0x38>)
    2cf6:	6818      	ldr	r0, [r3, #0]
    2cf8:	0a01      	lsrs	r1, r0, #8
    2cfa:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2cfc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    2d00:	4b0b      	ldr	r3, [pc, #44]	; (2d30 <z_nrf_rtc_timer_read+0x3c>)
    2d02:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    2d06:	1818      	adds	r0, r3, r0
    2d08:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2d10:	d20a      	bcs.n	2d28 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2d12:	4b08      	ldr	r3, [pc, #32]	; (2d34 <z_nrf_rtc_timer_read+0x40>)
    2d14:	e9d3 2300 	ldrd	r2, r3, [r3]
    2d18:	4290      	cmp	r0, r2
    2d1a:	eb71 0303 	sbcs.w	r3, r1, r3
    2d1e:	d203      	bcs.n	2d28 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2d20:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2d24:	f141 0100 	adc.w	r1, r1, #0
}
    2d28:	4770      	bx	lr
    2d2a:	bf00      	nop
    2d2c:	2000d3b0 	.word	0x2000d3b0
    2d30:	50015000 	.word	0x50015000
    2d34:	2000c618 	.word	0x2000c618

00002d38 <compare_set>:
{
    2d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d3c:	ed2d 8b02 	vpush	{d8}
    2d40:	b085      	sub	sp, #20
    2d42:	4616      	mov	r6, r2
    2d44:	4698      	mov	r8, r3
    2d46:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    2d48:	f7ff ff4e 	bl	2be8 <compare_int_lock>
    2d4c:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2d50:	f7ff ffd0 	bl	2cf4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2d54:	42b0      	cmp	r0, r6
    2d56:	eb71 0308 	sbcs.w	r3, r1, r8
    2d5a:	d279      	bcs.n	2e50 <compare_set+0x118>
		if (target_time - curr_time > COUNTER_SPAN) {
    2d5c:	4b44      	ldr	r3, [pc, #272]	; (2e70 <compare_set+0x138>)
    2d5e:	1a30      	subs	r0, r6, r0
    2d60:	eb68 0101 	sbc.w	r1, r8, r1
    2d64:	4298      	cmp	r0, r3
    2d66:	f171 0300 	sbcs.w	r3, r1, #0
    2d6a:	d27e      	bcs.n	2e6a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    2d6c:	4b41      	ldr	r3, [pc, #260]	; (2e74 <compare_set+0x13c>)
    2d6e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    2d72:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    2d76:	45d8      	cmp	r8, fp
    2d78:	bf08      	it	eq
    2d7a:	4556      	cmpeq	r6, sl
    2d7c:	d050      	beq.n	2e20 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    2d82:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    2d86:	4614      	mov	r4, r2
    2d88:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2d8c:	f105 0750 	add.w	r7, r5, #80	; 0x50
    2d90:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    2d94:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2d96:	40ab      	lsls	r3, r5
    2d98:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2d9c:	b2bf      	uxth	r7, r7
    2d9e:	f107 2750 	add.w	r7, r7, #1342197760	; 0x50005000
    2da2:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    2da4:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    2da8:	4b33      	ldr	r3, [pc, #204]	; (2e78 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2daa:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
     return p_reg->COUNTER;
    2dae:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2db2:	1a40      	subs	r0, r0, r1
    2db4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2db8:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    2dbc:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    2dbe:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    2dc2:	d107      	bne.n	2dd4 <compare_set+0x9c>
    2dc4:	e9cd 2102 	strd	r2, r1, [sp, #8]
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    2dc8:	2013      	movs	r0, #19
    2dca:	f003 fd75 	bl	68b8 <z_impl_k_busy_wait>
    2dce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    2dd2:	4b29      	ldr	r3, [pc, #164]	; (2e78 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    2dd4:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    2dd8:	eba4 000c 	sub.w	r0, r4, ip
    2ddc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    2de0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2de4:	bf88      	it	hi
    2de6:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2de8:	2000      	movs	r0, #0
    2dea:	6038      	str	r0, [r7, #0]
    2dec:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    2dee:	9801      	ldr	r0, [sp, #4]
    2df0:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2df4:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2df8:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    2dfc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    2e00:	4281      	cmp	r1, r0
    2e02:	d006      	beq.n	2e12 <compare_set+0xda>
	return (a - b) & COUNTER_MAX;
    2e04:	1a20      	subs	r0, r4, r0
    2e06:	3802      	subs	r0, #2
    2e08:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    2e0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2e10:	d81c      	bhi.n	2e4c <compare_set+0x114>
	return (a - b) & COUNTER_MAX;
    2e12:	1aa4      	subs	r4, r4, r2
    2e14:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    2e18:	eb14 0a06 	adds.w	sl, r4, r6
    2e1c:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
    2e20:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    2e22:	4914      	ldr	r1, [pc, #80]	; (2e74 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    2e24:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
    2e26:	012b      	lsls	r3, r5, #4
    2e28:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
    2e2c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    2e2e:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
    2e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2e34:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    2e36:	4628      	mov	r0, r5
    2e38:	ee18 1a10 	vmov	r1, s16
    2e3c:	f7ff ff32 	bl	2ca4 <compare_int_unlock>
}
    2e40:	4620      	mov	r0, r4
    2e42:	b005      	add	sp, #20
    2e44:	ecbd 8b02 	vpop	{d8}
    2e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e4c:	4620      	mov	r0, r4
    2e4e:	e7ae      	b.n	2dae <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    2e50:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2e52:	4a0a      	ldr	r2, [pc, #40]	; (2e7c <compare_set+0x144>)
    2e54:	40ab      	lsls	r3, r5
    2e56:	e8d2 1fef 	ldaex	r1, [r2]
    2e5a:	4319      	orrs	r1, r3
    2e5c:	e8c2 1fe0 	stlex	r0, r1, [r2]
    2e60:	2800      	cmp	r0, #0
    2e62:	d1f8      	bne.n	2e56 <compare_set+0x11e>
    2e64:	46b2      	mov	sl, r6
    2e66:	46c3      	mov	fp, r8
    2e68:	e7da      	b.n	2e20 <compare_set+0xe8>
			return -EINVAL;
    2e6a:	f06f 0415 	mvn.w	r4, #21
    2e6e:	e7e2      	b.n	2e36 <compare_set+0xfe>
    2e70:	01000001 	.word	0x01000001
    2e74:	2000c620 	.word	0x2000c620
    2e78:	50015000 	.word	0x50015000
    2e7c:	2000d3a8 	.word	0x2000d3a8

00002e80 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2e80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    2e82:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2e88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2e8c:	4d16      	ldr	r5, [pc, #88]	; (2ee8 <sys_clock_driver_init+0x68>)
    2e8e:	4b17      	ldr	r3, [pc, #92]	; (2eec <sys_clock_driver_init+0x6c>)
    2e90:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    2e94:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2e9c:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2e9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2ea2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    2ea6:	4b12      	ldr	r3, [pc, #72]	; (2ef0 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2ea8:	2101      	movs	r1, #1
    2eaa:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    2eae:	2015      	movs	r0, #21
    2eb0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2eb4:	4622      	mov	r2, r4
    2eb6:	f7fe feb3 	bl	1c20 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2eba:	2015      	movs	r0, #21
    2ebc:	f7fe fe92 	bl	1be4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2ec0:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2ec2:	4a0c      	ldr	r2, [pc, #48]	; (2ef4 <sys_clock_driver_init+0x74>)
    2ec4:	60ab      	str	r3, [r5, #8]
    2ec6:	602b      	str	r3, [r5, #0]
    2ec8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2eca:	4b0b      	ldr	r3, [pc, #44]	; (2ef8 <sys_clock_driver_init+0x78>)
    2ecc:	4a0b      	ldr	r2, [pc, #44]	; (2efc <sys_clock_driver_init+0x7c>)
    2ece:	9300      	str	r3, [sp, #0]
    2ed0:	4620      	mov	r0, r4
    2ed2:	2300      	movs	r3, #0
    2ed4:	9401      	str	r4, [sp, #4]
    2ed6:	f7ff ff2f 	bl	2d38 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2eda:	4630      	mov	r0, r6
    2edc:	f7ff fa76 	bl	23cc <z_nrf_clock_control_lf_on>

	return 0;
}
    2ee0:	4620      	mov	r0, r4
    2ee2:	b002      	add	sp, #8
    2ee4:	bd70      	pop	{r4, r5, r6, pc}
    2ee6:	bf00      	nop
    2ee8:	50015000 	.word	0x50015000
    2eec:	2000c620 	.word	0x2000c620
    2ef0:	e000e100 	.word	0xe000e100
    2ef4:	2000d3ac 	.word	0x2000d3ac
    2ef8:	00002c2d 	.word	0x00002c2d
    2efc:	007fffff 	.word	0x007fffff

00002f00 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    2f00:	4b35      	ldr	r3, [pc, #212]	; (2fd8 <rtc_nrf_isr+0xd8>)
{
    2f02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2f06:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2f0a:	0791      	lsls	r1, r2, #30
    2f0c:	d50b      	bpl.n	2f26 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f0e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    2f12:	b142      	cbz	r2, 2f26 <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2f14:	2200      	movs	r2, #0
    2f16:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    2f1a:	4a30      	ldr	r2, [pc, #192]	; (2fdc <rtc_nrf_isr+0xdc>)
    2f1c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2f20:	6813      	ldr	r3, [r2, #0]
    2f22:	3301      	adds	r3, #1
    2f24:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    2f26:	f04f 0320 	mov.w	r3, #32
    2f2a:	f3ef 8111 	mrs	r1, BASEPRI
    2f2e:	f383 8812 	msr	BASEPRI_MAX, r3
    2f32:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    2f36:	4b28      	ldr	r3, [pc, #160]	; (2fd8 <rtc_nrf_isr+0xd8>)
    2f38:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2f3c:	03d2      	lsls	r2, r2, #15
    2f3e:	d50d      	bpl.n	2f5c <rtc_nrf_isr+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2f40:	4a27      	ldr	r2, [pc, #156]	; (2fe0 <rtc_nrf_isr+0xe0>)
    2f42:	e8d2 0fef 	ldaex	r0, [r2]
    2f46:	f020 0401 	bic.w	r4, r0, #1
    2f4a:	e8c2 4fe5 	stlex	r5, r4, [r2]
    2f4e:	2d00      	cmp	r5, #0
    2f50:	d1f7      	bne.n	2f42 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2f52:	2800      	cmp	r0, #0
    2f54:	d136      	bne.n	2fc4 <rtc_nrf_isr+0xc4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f56:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
    2f5a:	bb9a      	cbnz	r2, 2fc4 <rtc_nrf_isr+0xc4>
{
    2f5c:	2300      	movs	r3, #0
	__asm__ volatile(
    2f5e:	f381 8811 	msr	BASEPRI, r1
    2f62:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    2f66:	b353      	cbz	r3, 2fbe <rtc_nrf_isr+0xbe>
		curr_time = z_nrf_rtc_timer_read();
    2f68:	f7ff fec4 	bl	2cf4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2f6c:	f04f 0320 	mov.w	r3, #32
    2f70:	f3ef 8711 	mrs	r7, BASEPRI
    2f74:	f383 8812 	msr	BASEPRI_MAX, r3
    2f78:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2f7c:	4b19      	ldr	r3, [pc, #100]	; (2fe4 <rtc_nrf_isr+0xe4>)
    2f7e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
    2f82:	42a0      	cmp	r0, r4
    2f84:	eb71 0205 	sbcs.w	r2, r1, r5
    2f88:	f04f 0200 	mov.w	r2, #0
    2f8c:	d321      	bcc.n	2fd2 <rtc_nrf_isr+0xd2>
			user_context = cc_data[chan].user_context;
    2f8e:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2f92:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    2f96:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    2f9a:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    2f9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2fa0:	e9c3 8902 	strd	r8, r9, [r3, #8]
    2fa4:	4b0c      	ldr	r3, [pc, #48]	; (2fd8 <rtc_nrf_isr+0xd8>)
    2fa6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
    2faa:	f387 8811 	msr	BASEPRI, r7
    2fae:	f3bf 8f6f 	isb	sy
		if (handler) {
    2fb2:	b121      	cbz	r1, 2fbe <rtc_nrf_isr+0xbe>
			handler(chan, expire_time, user_context);
    2fb4:	4622      	mov	r2, r4
    2fb6:	462b      	mov	r3, r5
    2fb8:	2000      	movs	r0, #0
    2fba:	9600      	str	r6, [sp, #0]
    2fbc:	4788      	blx	r1
}
    2fbe:	b003      	add	sp, #12
    2fc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2fc4:	2200      	movs	r2, #0
    2fc6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    2fca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2fce:	2301      	movs	r3, #1
}
    2fd0:	e7c5      	b.n	2f5e <rtc_nrf_isr+0x5e>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2fd2:	4611      	mov	r1, r2
    2fd4:	e7e9      	b.n	2faa <rtc_nrf_isr+0xaa>
    2fd6:	bf00      	nop
    2fd8:	50015000 	.word	0x50015000
    2fdc:	2000d3b0 	.word	0x2000d3b0
    2fe0:	2000d3a8 	.word	0x2000d3a8
    2fe4:	2000c620 	.word	0x2000c620

00002fe8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2fe8:	1c43      	adds	r3, r0, #1
{
    2fea:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2fec:	d020      	beq.n	3030 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2fee:	2801      	cmp	r0, #1
    2ff0:	dd20      	ble.n	3034 <sys_clock_set_timeout+0x4c>
    2ff2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2ff6:	da1f      	bge.n	3038 <sys_clock_set_timeout+0x50>
    2ff8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2ffa:	f7ff fe7b 	bl	2cf4 <z_nrf_rtc_timer_read>
    2ffe:	4b0f      	ldr	r3, [pc, #60]	; (303c <sys_clock_set_timeout+0x54>)
    3000:	e9d3 1300 	ldrd	r1, r3, [r3]
    3004:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3006:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    300a:	bf28      	it	cs
    300c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    300e:	3001      	adds	r0, #1
    3010:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3012:	480b      	ldr	r0, [pc, #44]	; (3040 <sys_clock_set_timeout+0x58>)
    3014:	4282      	cmp	r2, r0
    3016:	bf28      	it	cs
    3018:	4602      	movcs	r2, r0
    301a:	2000      	movs	r0, #0
    301c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    301e:	4909      	ldr	r1, [pc, #36]	; (3044 <sys_clock_set_timeout+0x5c>)
    3020:	9001      	str	r0, [sp, #4]
    3022:	9100      	str	r1, [sp, #0]
    3024:	f143 0300 	adc.w	r3, r3, #0
    3028:	f7ff fe86 	bl	2d38 <compare_set>
}
    302c:	b002      	add	sp, #8
    302e:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3030:	4803      	ldr	r0, [pc, #12]	; (3040 <sys_clock_set_timeout+0x58>)
    3032:	e7e1      	b.n	2ff8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3034:	2400      	movs	r4, #0
    3036:	e7e0      	b.n	2ffa <sys_clock_set_timeout+0x12>
    3038:	4c01      	ldr	r4, [pc, #4]	; (3040 <sys_clock_set_timeout+0x58>)
    303a:	e7de      	b.n	2ffa <sys_clock_set_timeout+0x12>
    303c:	2000c630 	.word	0x2000c630
    3040:	007fffff 	.word	0x007fffff
    3044:	00002c2d 	.word	0x00002c2d

00003048 <sys_clock_elapsed>:
{
    3048:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    304a:	f7ff fe53 	bl	2cf4 <z_nrf_rtc_timer_read>
    304e:	4b02      	ldr	r3, [pc, #8]	; (3058 <sys_clock_elapsed+0x10>)
    3050:	681b      	ldr	r3, [r3, #0]
}
    3052:	1ac0      	subs	r0, r0, r3
    3054:	bd08      	pop	{r3, pc}
    3056:	bf00      	nop
    3058:	2000c630 	.word	0x2000c630

0000305c <nrf_gpio_pin_write>:
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    305c:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
    305e:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3062:	fa03 f000 	lsl.w	r0, r3, r0
    3066:	4b03      	ldr	r3, [pc, #12]	; (3074 <nrf_gpio_pin_write+0x18>)
    if (value == 0)
    3068:	b909      	cbnz	r1, 306e <nrf_gpio_pin_write+0x12>
    p_reg->OUTCLR = clr_mask;
    306a:	60d8      	str	r0, [r3, #12]
}
    306c:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    306e:	6098      	str	r0, [r3, #8]
}
    3070:	4770      	bx	lr
    3072:	bf00      	nop
    3074:	50842500 	.word	0x50842500

00003078 <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
    3078:	b510      	push	{r4, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    307a:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    307e:	2c00      	cmp	r4, #0
    3080:	bf1c      	itt	ne
    3082:	2100      	movne	r1, #0
    3084:	2201      	movne	r2, #1
    *p_pin = pin_number & 0x1F;
    3086:	f000 041f 	and.w	r4, r0, #31
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    308a:	021b      	lsls	r3, r3, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    308c:	f3c0 1081 	ubfx	r0, r0, #6, #2
    3090:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    3094:	430b      	orrs	r3, r1
    3096:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    309a:	4b02      	ldr	r3, [pc, #8]	; (30a4 <nrf_pin_configure+0x2c>)
    309c:	3480      	adds	r4, #128	; 0x80
    309e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
		     NRF_GPIO_PIN_NOSENSE);
}
    30a2:	bd10      	pop	{r4, pc}
    30a4:	50842500 	.word	0x50842500

000030a8 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    30a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    30ac:	4616      	mov	r6, r2
    30ae:	4605      	mov	r5, r0
			break;
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    30b0:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
    30b2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 31c8 <pinctrl_configure_pins+0x120>
    30b6:	eb00 0981 	add.w	r9, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    30ba:	454d      	cmp	r5, r9
    30bc:	d103      	bne.n	30c6 <pinctrl_configure_pins+0x1e>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    30be:	2000      	movs	r0, #0
}
    30c0:	b003      	add	sp, #12
    30c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    30c6:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
    30c8:	0c22      	lsrs	r2, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    30ca:	f3c4 2303 	ubfx	r3, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    30ce:	2a19      	cmp	r2, #25
    30d0:	d877      	bhi.n	31c2 <pinctrl_configure_pins+0x11a>
    30d2:	e8df f002 	tbb	[pc, r2]
    30d6:	1a0d      	.short	0x1a0d
    30d8:	38264421 	.word	0x38264421
    30dc:	76767644 	.word	0x76767644
    30e0:	76514976 	.word	0x76514976
    30e4:	76767676 	.word	0x76767676
    30e8:	76767676 	.word	0x76767676
    30ec:	706a6456 	.word	0x706a6456
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    30f0:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    30f4:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    30f8:	682a      	ldr	r2, [r5, #0]
    30fa:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    30fe:	fa07 f202 	lsl.w	r2, r7, r2
    p_reg->OUTSET = set_mask;
    3102:	f8c8 2008 	str.w	r2, [r8, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3106:	2201      	movs	r2, #1
    3108:	e004      	b.n	3114 <pinctrl_configure_pins+0x6c>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    310a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    310e:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3112:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    3114:	4611      	mov	r1, r2
    3116:	e011      	b.n	313c <pinctrl_configure_pins+0x94>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    3118:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    311c:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    3120:	e7ea      	b.n	30f8 <pinctrl_configure_pins+0x50>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    3122:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    3126:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    312a:	682a      	ldr	r2, [r5, #0]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    312c:	2101      	movs	r1, #1
    312e:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3132:	fa07 f202 	lsl.w	r2, r7, r2
    p_reg->OUTCLR = clr_mask;
    3136:	f8c8 200c 	str.w	r2, [r8, #12]
    313a:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    313c:	6828      	ldr	r0, [r5, #0]
    313e:	f7ff ff9b 	bl	3078 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    3142:	3504      	adds	r5, #4
    3144:	e7b9      	b.n	30ba <pinctrl_configure_pins+0x12>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    3146:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    314a:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    314e:	682a      	ldr	r2, [r5, #0]
    3150:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3154:	fa07 f202 	lsl.w	r2, r7, r2
    p_reg->OUTCLR = clr_mask;
    3158:	f8c8 200c 	str.w	r2, [r8, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    315c:	e7d3      	b.n	3106 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    315e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    3162:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3166:	e7d4      	b.n	3112 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    3168:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    316c:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
    3170:	2b00      	cmp	r3, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    3172:	bf08      	it	eq
    3174:	2306      	moveq	r3, #6
    3176:	e7cc      	b.n	3112 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    3178:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    317c:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    3180:	e7f6      	b.n	3170 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    3182:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    3186:	9301      	str	r3, [sp, #4]
    3188:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    318c:	6828      	ldr	r0, [r5, #0]
    318e:	f3c0 3140 	ubfx	r1, r0, #13, #1
    3192:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    3196:	f7ff ff61 	bl	305c <nrf_gpio_pin_write>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    319a:	9b01      	ldr	r3, [sp, #4]
    319c:	e7b3      	b.n	3106 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    319e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    31a2:	9301      	str	r3, [sp, #4]
    31a4:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    31a8:	e7f0      	b.n	318c <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    31aa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    31ae:	9301      	str	r3, [sp, #4]
    31b0:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    31b4:	e7ea      	b.n	318c <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    31b6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    31ba:	9301      	str	r3, [sp, #4]
    31bc:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
    31c0:	e7e4      	b.n	318c <pinctrl_configure_pins+0xe4>
		switch (NRF_GET_FUN(pins[i])) {
    31c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    31c6:	e77b      	b.n	30c0 <pinctrl_configure_pins+0x18>
    31c8:	50842500 	.word	0x50842500

000031cc <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    31cc:	ea40 0301 	orr.w	r3, r0, r1
    31d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
    31d4:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    31d6:	b98b      	cbnz	r3, 31fc <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    31d8:	f240 1515 	movw	r5, #277	; 0x115
    31dc:	4c09      	ldr	r4, [pc, #36]	; (3204 <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    31de:	0bc9      	lsrs	r1, r1, #15
		nrf_spu_flashregion_set(NRF_SPU_S,
    31e0:	f3c0 30c7 	ubfx	r0, r0, #15, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    31e4:	4299      	cmp	r1, r3
    31e6:	d101      	bne.n	31ec <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    31e8:	2000      	movs	r0, #0
}
    31ea:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    31ec:	18c2      	adds	r2, r0, r3
    31ee:	b2d2      	uxtb	r2, r2
    31f0:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    31f4:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    31f8:	3301      	adds	r3, #1
    31fa:	e7f3      	b.n	31e4 <fprotect_area+0x18>
		return -EINVAL;
    31fc:	f06f 0015 	mvn.w	r0, #21
    3200:	e7f3      	b.n	31ea <fprotect_area+0x1e>
    3202:	bf00      	nop
    3204:	50003000 	.word	0x50003000

00003208 <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3208:	4803      	ldr	r0, [pc, #12]	; (3218 <k_sys_fatal_error_handler+0x10>)
    320a:	2145      	movs	r1, #69	; 0x45
{
    320c:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    320e:	f002 ff4c 	bl	60aa <z_log_minimal_printk>
		sys_arch_reboot(0);
    3212:	2000      	movs	r0, #0
    3214:	f7fe ffb6 	bl	2184 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3218:	00007a6c 	.word	0x00007a6c

0000321c <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    321c:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    321e:	6881      	ldr	r1, [r0, #8]
{
    3220:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3222:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    3224:	f021 0407 	bic.w	r4, r1, #7
{
    3228:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    322a:	f002 ff94 	bl	6156 <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    322e:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    3230:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    3232:	4668      	mov	r0, sp
    3234:	f002 ffeb 	bl	620e <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    3238:	2210      	movs	r2, #16
    323a:	4668      	mov	r0, sp
    323c:	4906      	ldr	r1, [pc, #24]	; (3258 <boot_write_magic+0x3c>)
    323e:	f002 ffdb 	bl	61f8 <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    3242:	2310      	movs	r3, #16
    3244:	466a      	mov	r2, sp
    3246:	4621      	mov	r1, r4
    3248:	4628      	mov	r0, r5
    324a:	f002 ff51 	bl	60f0 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    324e:	3800      	subs	r0, #0
    3250:	bf18      	it	ne
    3252:	2001      	movne	r0, #1
    3254:	b005      	add	sp, #20
    3256:	bd30      	pop	{r4, r5, pc}
    3258:	0000700c 	.word	0x0000700c

0000325c <boot_read_swap_state>:
{
    325c:	b530      	push	{r4, r5, lr}
    325e:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    3260:	6881      	ldr	r1, [r0, #8]
{
    3262:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    3264:	2310      	movs	r3, #16
    3266:	aa02      	add	r2, sp, #8
    3268:	3910      	subs	r1, #16
{
    326a:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    326c:	f002 ff2b 	bl	60c6 <flash_area_read>
    if (rc < 0) {
    3270:	2800      	cmp	r0, #0
    3272:	da02      	bge.n	327a <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    3274:	2001      	movs	r0, #1
}
    3276:	b007      	add	sp, #28
    3278:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
    327a:	2210      	movs	r2, #16
    327c:	4628      	mov	r0, r5
    327e:	a902      	add	r1, sp, #8
    3280:	f003 f99c 	bl	65bc <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    3284:	b390      	cbz	r0, 32ec <boot_read_swap_state+0x90>
        state->magic = BOOT_MAGIC_UNSET;
    3286:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    3288:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
    328a:	4628      	mov	r0, r5
    328c:	f003 f9a7 	bl	65de <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3290:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    3292:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    3294:	f10d 0207 	add.w	r2, sp, #7
    3298:	4628      	mov	r0, r5
    329a:	f002 ff14 	bl	60c6 <flash_area_read>
    if (rc < 0) {
    329e:	2800      	cmp	r0, #0
    32a0:	dbe8      	blt.n	3274 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    32a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    32a6:	4628      	mov	r0, r5
    32a8:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    32ac:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    32ae:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    32b0:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    32b2:	2201      	movs	r2, #1
    32b4:	f10d 0107 	add.w	r1, sp, #7
    32b8:	f003 f980 	bl	65bc <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    32bc:	b910      	cbnz	r0, 32c4 <boot_read_swap_state+0x68>
    32be:	7863      	ldrb	r3, [r4, #1]
    32c0:	2b04      	cmp	r3, #4
    32c2:	d903      	bls.n	32cc <boot_read_swap_state+0x70>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    32c4:	2301      	movs	r3, #1
    32c6:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    32c8:	2300      	movs	r3, #0
    32ca:	7123      	strb	r3, [r4, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    32cc:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    32ce:	4628      	mov	r0, r5
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    32d0:	3a18      	subs	r2, #24
    32d2:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    32d6:	3a08      	subs	r2, #8
    32d8:	1ca1      	adds	r1, r4, #2
    32da:	f003 f99a 	bl	6612 <boot_read_flag>
    if (rc) {
    32de:	2800      	cmp	r0, #0
    32e0:	d1c8      	bne.n	3274 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    32e2:	4628      	mov	r0, r5
    32e4:	1ce1      	adds	r1, r4, #3
    32e6:	f003 f9ee 	bl	66c6 <boot_read_image_ok>
    32ea:	e7c4      	b.n	3276 <boot_read_swap_state+0x1a>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    32ec:	2210      	movs	r2, #16
    32ee:	4904      	ldr	r1, [pc, #16]	; (3300 <boot_read_swap_state+0xa4>)
    32f0:	a802      	add	r0, sp, #8
    32f2:	f002 ff70 	bl	61d6 <memcmp>
        return BOOT_MAGIC_GOOD;
    32f6:	2800      	cmp	r0, #0
    32f8:	bf14      	ite	ne
    32fa:	2302      	movne	r3, #2
    32fc:	2301      	moveq	r3, #1
    32fe:	e7c3      	b.n	3288 <boot_read_swap_state+0x2c>
    3300:	0000700c 	.word	0x0000700c

00003304 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    3304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3308:	b085      	sub	sp, #20
    330a:	4606      	mov	r6, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    330c:	4669      	mov	r1, sp
    330e:	2003      	movs	r0, #3
    3310:	f003 f9df 	bl	66d2 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    3314:	4605      	mov	r5, r0
    3316:	b118      	cbz	r0, 3320 <boot_swap_type_multi+0x1c>
        return BOOT_SWAP_TYPE_PANIC;
    3318:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    331a:	b005      	add	sp, #20
    331c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3320:	2009      	movs	r0, #9
    3322:	a902      	add	r1, sp, #8
    3324:	f003 f9d5 	bl	66d2 <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    3328:	2801      	cmp	r0, #1
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    332a:	4604      	mov	r4, r0
    if (rc == BOOT_EFLASH) {
    332c:	d13f      	bne.n	33ae <boot_swap_type_multi+0xaa>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    332e:	4632      	mov	r2, r6
    3330:	2149      	movs	r1, #73	; 0x49
    3332:	482c      	ldr	r0, [pc, #176]	; (33e4 <boot_swap_type_multi+0xe0>)
    3334:	f002 feb9 	bl	60aa <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    3338:	2303      	movs	r3, #3
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
    333a:	f88d 4009 	strb.w	r4, [sp, #9]
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    333e:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
    3342:	f88d 300a 	strb.w	r3, [sp, #10]
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    3346:	f88d 300b 	strb.w	r3, [sp, #11]
        secondary_slot.image_num = 0;
    334a:	f88d 500c 	strb.w	r5, [sp, #12]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    334e:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3350:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    3354:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3358:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    335c:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    3360:	f89d 9002 	ldrb.w	r9, [sp, #2]
    3364:	4c20      	ldr	r4, [pc, #128]	; (33e8 <boot_swap_type_multi+0xe4>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3366:	4629      	mov	r1, r5
    3368:	7820      	ldrb	r0, [r4, #0]
    336a:	f003 f93e 	bl	65ea <boot_magic_compatible_check>
    336e:	b318      	cbz	r0, 33b8 <boot_swap_type_multi+0xb4>
            boot_magic_compatible_check(table->magic_secondary_slot,
    3370:	4631      	mov	r1, r6
    3372:	7860      	ldrb	r0, [r4, #1]
    3374:	f003 f939 	bl	65ea <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    3378:	b1f0      	cbz	r0, 33b8 <boot_swap_type_multi+0xb4>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    337a:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    337c:	2b04      	cmp	r3, #4
    337e:	d001      	beq.n	3384 <boot_swap_type_multi+0x80>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3380:	42bb      	cmp	r3, r7
    3382:	d119      	bne.n	33b8 <boot_swap_type_multi+0xb4>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3384:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3386:	2b04      	cmp	r3, #4
    3388:	d001      	beq.n	338e <boot_swap_type_multi+0x8a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    338a:	4543      	cmp	r3, r8
    338c:	d114      	bne.n	33b8 <boot_swap_type_multi+0xb4>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    338e:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    3390:	2b04      	cmp	r3, #4
    3392:	d10f      	bne.n	33b4 <boot_swap_type_multi+0xb0>
            BOOT_LOG_INF("Swap type: %s",
    3394:	7963      	ldrb	r3, [r4, #5]
    3396:	2b02      	cmp	r3, #2
    3398:	d119      	bne.n	33ce <boot_swap_type_multi+0xca>
    339a:	4a14      	ldr	r2, [pc, #80]	; (33ec <boot_swap_type_multi+0xe8>)
    339c:	4814      	ldr	r0, [pc, #80]	; (33f0 <boot_swap_type_multi+0xec>)
    339e:	2149      	movs	r1, #73	; 0x49
    33a0:	f002 fe83 	bl	60aa <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    33a4:	7960      	ldrb	r0, [r4, #5]
    33a6:	1e83      	subs	r3, r0, #2
    33a8:	2b02      	cmp	r3, #2
    33aa:	d9b6      	bls.n	331a <boot_swap_type_multi+0x16>
    33ac:	e7b4      	b.n	3318 <boot_swap_type_multi+0x14>
    } else if (rc) {
    33ae:	2800      	cmp	r0, #0
    33b0:	d0cd      	beq.n	334e <boot_swap_type_multi+0x4a>
    33b2:	e7b1      	b.n	3318 <boot_swap_type_multi+0x14>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    33b4:	454b      	cmp	r3, r9
    33b6:	d0ed      	beq.n	3394 <boot_swap_type_multi+0x90>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    33b8:	3201      	adds	r2, #1
    33ba:	2a03      	cmp	r2, #3
    33bc:	f104 0406 	add.w	r4, r4, #6
    33c0:	d1d1      	bne.n	3366 <boot_swap_type_multi+0x62>
    BOOT_LOG_INF("Swap type: none");
    33c2:	480c      	ldr	r0, [pc, #48]	; (33f4 <boot_swap_type_multi+0xf0>)
    33c4:	2149      	movs	r1, #73	; 0x49
    33c6:	f002 fe70 	bl	60aa <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    33ca:	2001      	movs	r0, #1
    33cc:	e7a5      	b.n	331a <boot_swap_type_multi+0x16>
            BOOT_LOG_INF("Swap type: %s",
    33ce:	2b03      	cmp	r3, #3
    33d0:	d005      	beq.n	33de <boot_swap_type_multi+0xda>
    33d2:	4a09      	ldr	r2, [pc, #36]	; (33f8 <boot_swap_type_multi+0xf4>)
    33d4:	4909      	ldr	r1, [pc, #36]	; (33fc <boot_swap_type_multi+0xf8>)
    33d6:	2b04      	cmp	r3, #4
    33d8:	bf18      	it	ne
    33da:	460a      	movne	r2, r1
    33dc:	e7de      	b.n	339c <boot_swap_type_multi+0x98>
    33de:	4a08      	ldr	r2, [pc, #32]	; (3400 <boot_swap_type_multi+0xfc>)
    33e0:	e7dc      	b.n	339c <boot_swap_type_multi+0x98>
    33e2:	bf00      	nop
    33e4:	00007ab1 	.word	0x00007ab1
    33e8:	00007b24 	.word	0x00007b24
    33ec:	00007a95 	.word	0x00007a95
    33f0:	00007afc 	.word	0x00007afc
    33f4:	00007b0f 	.word	0x00007b0f
    33f8:	00007a8e 	.word	0x00007a8e
    33fc:	00007a9f 	.word	0x00007a9f
    3400:	00007a9a 	.word	0x00007a9a

00003404 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    3404:	b508      	push	{r3, lr}
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    3406:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    340a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    340e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    3412:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    3416:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    3418:	bf01      	itttt	eq
    341a:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    341e:	2200      	moveq	r2, #0
    3420:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    3424:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    3428:	f003 f978 	bl	671c <nrf91_errata_14>
    342c:	b128      	cbz	r0, 343a <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    342e:	2201      	movs	r2, #1
    3430:	4b51      	ldr	r3, [pc, #324]	; (3578 <SystemInit+0x174>)
    3432:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3436:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    343a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    343e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    3442:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    3446:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    344a:	2a09      	cmp	r2, #9
    344c:	d105      	bne.n	345a <SystemInit+0x56>
            {
                switch(var2)
    344e:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3450:	bf1e      	ittt	ne
    3452:	2201      	movne	r2, #1
    3454:	4b48      	ldrne	r3, [pc, #288]	; (3578 <SystemInit+0x174>)
    3456:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    345a:	f003 f95f 	bl	671c <nrf91_errata_14>
    345e:	b118      	cbz	r0, 3468 <SystemInit+0x64>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    3460:	220e      	movs	r2, #14
    3462:	4b46      	ldr	r3, [pc, #280]	; (357c <SystemInit+0x178>)
    3464:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    3468:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    346c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    3470:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    3474:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    3478:	2a09      	cmp	r2, #9
    347a:	d106      	bne.n	348a <SystemInit+0x86>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    347c:	2200      	movs	r2, #0
    347e:	4b3e      	ldr	r3, [pc, #248]	; (3578 <SystemInit+0x174>)
    3480:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    3484:	2201      	movs	r2, #1
    3486:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    348a:	2200      	movs	r2, #0
    348c:	00d3      	lsls	r3, r2, #3
    348e:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    3492:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    3496:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    349a:	3101      	adds	r1, #1
    349c:	d008      	beq.n	34b0 <SystemInit+0xac>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    349e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    34a2:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    34a4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    34a8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    34ac:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    34ae:	d1ed      	bne.n	348c <SystemInit+0x88>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    34b0:	4b33      	ldr	r3, [pc, #204]	; (3580 <SystemInit+0x17c>)
    34b2:	69da      	ldr	r2, [r3, #28]
    34b4:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    34b8:	07d1      	lsls	r1, r2, #31
    34ba:	d543      	bpl.n	3544 <SystemInit+0x140>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    34bc:	4b31      	ldr	r3, [pc, #196]	; (3584 <SystemInit+0x180>)
    34be:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    34c2:	2a01      	cmp	r2, #1
    34c4:	d1fb      	bne.n	34be <SystemInit+0xba>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    34c6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    34ca:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    34ce:	2a01      	cmp	r2, #1
    34d0:	d1fb      	bne.n	34ca <SystemInit+0xc6>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    34d2:	4b2b      	ldr	r3, [pc, #172]	; (3580 <SystemInit+0x17c>)
    34d4:	69da      	ldr	r2, [r3, #28]
    34d6:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    34da:	07d2      	lsls	r2, r2, #31
    34dc:	d50a      	bpl.n	34f4 <SystemInit+0xf0>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    34de:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    34e0:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    34e4:	61da      	str	r2, [r3, #28]
    34e6:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    34ea:	4a26      	ldr	r2, [pc, #152]	; (3584 <SystemInit+0x180>)
    34ec:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    34f0:	2b01      	cmp	r3, #1
    34f2:	d1fb      	bne.n	34ec <SystemInit+0xe8>
        uint32_t val = *word;
    34f4:	4a22      	ldr	r2, [pc, #136]	; (3580 <SystemInit+0x17c>)
    34f6:	6a13      	ldr	r3, [r2, #32]
    34f8:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    34fc:	3301      	adds	r3, #1
    34fe:	d10c      	bne.n	351a <SystemInit+0x116>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    3500:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    3502:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    3506:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    350a:	6213      	str	r3, [r2, #32]
    350c:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3510:	4a1c      	ldr	r2, [pc, #112]	; (3584 <SystemInit+0x180>)
    3512:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3516:	2b01      	cmp	r3, #1
    3518:	d1fb      	bne.n	3512 <SystemInit+0x10e>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    351a:	2200      	movs	r2, #0
    351c:	4b19      	ldr	r3, [pc, #100]	; (3584 <SystemInit+0x180>)
    351e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3522:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3526:	2a01      	cmp	r2, #1
    3528:	d1fb      	bne.n	3522 <SystemInit+0x11e>
    352a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    352e:	4916      	ldr	r1, [pc, #88]	; (3588 <SystemInit+0x184>)
    3530:	4b16      	ldr	r3, [pc, #88]	; (358c <SystemInit+0x188>)
    3532:	68ca      	ldr	r2, [r1, #12]
    3534:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3538:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    353a:	60cb      	str	r3, [r1, #12]
    353c:	f3bf 8f4f 	dsb	sy
    __NOP();
    3540:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3542:	e7fd      	b.n	3540 <SystemInit+0x13c>
        uint32_t val = *word;
    3544:	6a1b      	ldr	r3, [r3, #32]
    3546:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    354a:	3301      	adds	r3, #1
    354c:	d0b6      	beq.n	34bc <SystemInit+0xb8>
        SCB->NSACR |= (3UL << 10);
    354e:	4b0e      	ldr	r3, [pc, #56]	; (3588 <SystemInit+0x184>)
    3550:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    3554:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    3558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    355c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3560:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    3564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3568:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    356c:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    3570:	4b07      	ldr	r3, [pc, #28]	; (3590 <SystemInit+0x18c>)
    3572:	4a08      	ldr	r2, [pc, #32]	; (3594 <SystemInit+0x190>)
    3574:	601a      	str	r2, [r3, #0]
}
    3576:	bd08      	pop	{r3, pc}
    3578:	50004000 	.word	0x50004000
    357c:	5003a000 	.word	0x5003a000
    3580:	00ff8000 	.word	0x00ff8000
    3584:	50039000 	.word	0x50039000
    3588:	e000ed00 	.word	0xe000ed00
    358c:	05fa0004 	.word	0x05fa0004
    3590:	2000c534 	.word	0x2000c534
    3594:	03d09000 	.word	0x03d09000

00003598 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    3598:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    359a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    359c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    359e:	fab2 f382 	clz	r3, r2
    35a2:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    35a6:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    35a8:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    35aa:	d010      	beq.n	35ce <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    35ac:	fa05 f303 	lsl.w	r3, r5, r3
    35b0:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    35b4:	e8d0 6fef 	ldaex	r6, [r0]
    35b8:	4296      	cmp	r6, r2
    35ba:	d104      	bne.n	35c6 <nrfx_flag32_alloc+0x2e>
    35bc:	e8c0 3fec 	stlex	ip, r3, [r0]
    35c0:	f1bc 0f00 	cmp.w	ip, #0
    35c4:	d1f6      	bne.n	35b4 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    35c6:	d1e9      	bne.n	359c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    35c8:	4802      	ldr	r0, [pc, #8]	; (35d4 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    35ca:	700c      	strb	r4, [r1, #0]
}
    35cc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    35ce:	4802      	ldr	r0, [pc, #8]	; (35d8 <nrfx_flag32_alloc+0x40>)
    35d0:	e7fc      	b.n	35cc <nrfx_flag32_alloc+0x34>
    35d2:	bf00      	nop
    35d4:	0bad0000 	.word	0x0bad0000
    35d8:	0bad0002 	.word	0x0bad0002

000035dc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    35dc:	6803      	ldr	r3, [r0, #0]
{
    35de:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    35e0:	40cb      	lsrs	r3, r1
    35e2:	07db      	lsls	r3, r3, #31
    35e4:	d411      	bmi.n	360a <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    35e6:	2301      	movs	r3, #1
    35e8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    35ec:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    35ee:	ea41 0203 	orr.w	r2, r1, r3
    35f2:	e8d0 4fef 	ldaex	r4, [r0]
    35f6:	429c      	cmp	r4, r3
    35f8:	d104      	bne.n	3604 <nrfx_flag32_free+0x28>
    35fa:	e8c0 2fec 	stlex	ip, r2, [r0]
    35fe:	f1bc 0f00 	cmp.w	ip, #0
    3602:	d1f6      	bne.n	35f2 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    3604:	d1f2      	bne.n	35ec <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    3606:	4802      	ldr	r0, [pc, #8]	; (3610 <nrfx_flag32_free+0x34>)
}
    3608:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    360a:	4802      	ldr	r0, [pc, #8]	; (3614 <nrfx_flag32_free+0x38>)
    360c:	e7fc      	b.n	3608 <nrfx_flag32_free+0x2c>
    360e:	bf00      	nop
    3610:	0bad0000 	.word	0x0bad0000
    3614:	0bad0004 	.word	0x0bad0004

00003618 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3618:	4b04      	ldr	r3, [pc, #16]	; (362c <nrfx_clock_init+0x14>)
    361a:	791a      	ldrb	r2, [r3, #4]
    361c:	b922      	cbnz	r2, 3628 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    361e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3620:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3622:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3624:	4802      	ldr	r0, [pc, #8]	; (3630 <nrfx_clock_init+0x18>)
    3626:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3628:	4802      	ldr	r0, [pc, #8]	; (3634 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    362a:	4770      	bx	lr
    362c:	2000d3b4 	.word	0x2000d3b4
    3630:	0bad0000 	.word	0x0bad0000
    3634:	0bad000c 	.word	0x0bad000c

00003638 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3638:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    363c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3640:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3642:	b152      	cbz	r2, 365a <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3644:	2000      	movs	r0, #0
    3646:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    364a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    364e:	2201      	movs	r2, #1
    3650:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3654:	4b11      	ldr	r3, [pc, #68]	; (369c <nrfx_power_clock_irq_handler+0x64>)
    3656:	681b      	ldr	r3, [r3, #0]
    3658:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    365a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    365e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3662:	b18a      	cbz	r2, 3688 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3664:	2200      	movs	r2, #0
    3666:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    366a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    366e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3672:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3676:	f002 0203 	and.w	r2, r2, #3
    367a:	2a01      	cmp	r2, #1
    367c:	f04f 0102 	mov.w	r1, #2
    3680:	d103      	bne.n	368a <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3682:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3686:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    3688:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    368a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    368e:	4b03      	ldr	r3, [pc, #12]	; (369c <nrfx_power_clock_irq_handler+0x64>)
    3690:	2001      	movs	r0, #1
}
    3692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3696:	681b      	ldr	r3, [r3, #0]
    3698:	4718      	bx	r3
    369a:	bf00      	nop
    369c:	2000d3b4 	.word	0x2000d3b4

000036a0 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    36a0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    36a2:	4801      	ldr	r0, [pc, #4]	; (36a8 <nrfx_dppi_channel_alloc+0x8>)
    36a4:	f7ff bf78 	b.w	3598 <nrfx_flag32_alloc>
    36a8:	2000c538 	.word	0x2000c538

000036ac <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    36ac:	4a06      	ldr	r2, [pc, #24]	; (36c8 <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    36ae:	f000 001f 	and.w	r0, r0, #31
    36b2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    36b6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
    36ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    36be:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    36c2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
    36c6:	4770      	bx	lr
    36c8:	50842500 	.word	0x50842500

000036cc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    36cc:	4b03      	ldr	r3, [pc, #12]	; (36dc <pin_in_use_by_te+0x10>)
    36ce:	3008      	adds	r0, #8
    36d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    36d4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    36d8:	4770      	bx	lr
    36da:	bf00      	nop
    36dc:	2000c53c 	.word	0x2000c53c

000036e0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    36e0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    36e2:	4c0d      	ldr	r4, [pc, #52]	; (3718 <call_handler+0x38>)
    36e4:	f100 0308 	add.w	r3, r0, #8
    36e8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    36ec:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    36ee:	05da      	lsls	r2, r3, #23
{
    36f0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    36f2:	d507      	bpl.n	3704 <call_handler+0x24>
    36f4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    36f8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    36fc:	6852      	ldr	r2, [r2, #4]
    36fe:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    3702:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    3704:	68a3      	ldr	r3, [r4, #8]
    3706:	b12b      	cbz	r3, 3714 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3708:	4631      	mov	r1, r6
    370a:	4628      	mov	r0, r5
    370c:	68e2      	ldr	r2, [r4, #12]
    }
}
    370e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    3712:	4718      	bx	r3
}
    3714:	bd70      	pop	{r4, r5, r6, pc}
    3716:	bf00      	nop
    3718:	2000c53c 	.word	0x2000c53c

0000371c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    371c:	4a13      	ldr	r2, [pc, #76]	; (376c <release_handler+0x50>)
    371e:	3008      	adds	r0, #8
    3720:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
    3724:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3726:	05d9      	lsls	r1, r3, #23
    3728:	d51c      	bpl.n	3764 <release_handler+0x48>
    372a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    372e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3732:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3736:	2000      	movs	r0, #0
    3738:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    373c:	f834 3b02 	ldrh.w	r3, [r4], #2
    3740:	f413 7f80 	tst.w	r3, #256	; 0x100
    3744:	d003      	beq.n	374e <release_handler+0x32>
    3746:	f3c3 2343 	ubfx	r3, r3, #9, #4
    374a:	4299      	cmp	r1, r3
    374c:	d00a      	beq.n	3764 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    374e:	3001      	adds	r0, #1
    3750:	2820      	cmp	r0, #32
    3752:	d1f3      	bne.n	373c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    3754:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3756:	4806      	ldr	r0, [pc, #24]	; (3770 <release_handler+0x54>)
}
    3758:	f85d 4b04 	ldr.w	r4, [sp], #4
        m_cb.handlers[handler_id].handler = NULL;
    375c:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3760:	f7ff bf3c 	b.w	35dc <nrfx_flag32_free>
}
    3764:	f85d 4b04 	ldr.w	r4, [sp], #4
    3768:	4770      	bx	lr
    376a:	bf00      	nop
    376c:	2000c53c 	.word	0x2000c53c
    3770:	2000c590 	.word	0x2000c590

00003774 <pin_handler_trigger_uninit>:
{
    3774:	b538      	push	{r3, r4, r5, lr}
    3776:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3778:	f7ff ffa8 	bl	36cc <pin_in_use_by_te>
    377c:	4c0b      	ldr	r4, [pc, #44]	; (37ac <pin_handler_trigger_uninit+0x38>)
    377e:	f102 0508 	add.w	r5, r2, #8
    3782:	b160      	cbz	r0, 379e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3784:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3786:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    378a:	0b5b      	lsrs	r3, r3, #13
    378c:	009b      	lsls	r3, r3, #2
    378e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3792:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3796:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    379a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    379e:	4610      	mov	r0, r2
    37a0:	f7ff ffbc 	bl	371c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    37a4:	2300      	movs	r3, #0
    37a6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    37aa:	bd38      	pop	{r3, r4, r5, pc}
    37ac:	2000c53c 	.word	0x2000c53c

000037b0 <nrfx_gpiote_input_configure>:
{
    37b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    37b4:	4604      	mov	r4, r0
    37b6:	461d      	mov	r5, r3
    if (p_input_config)
    37b8:	b309      	cbz	r1, 37fe <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    37ba:	4f4d      	ldr	r7, [pc, #308]	; (38f0 <nrfx_gpiote_input_configure+0x140>)
    37bc:	f100 0808 	add.w	r8, r0, #8
    37c0:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    37c4:	07b3      	lsls	r3, r6, #30
    37c6:	d506      	bpl.n	37d6 <nrfx_gpiote_input_configure+0x26>
    37c8:	f7ff ff80 	bl	36cc <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    37cc:	b118      	cbz	r0, 37d6 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    37ce:	4849      	ldr	r0, [pc, #292]	; (38f4 <nrfx_gpiote_input_configure+0x144>)
}
    37d0:	b002      	add	sp, #8
    37d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    37d6:	4b48      	ldr	r3, [pc, #288]	; (38f8 <nrfx_gpiote_input_configure+0x148>)
    *p_pin = pin_number & 0x1F;
    37d8:	f004 001f 	and.w	r0, r4, #31
    37dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    37e0:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    37e4:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    37e6:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    37ea:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    37ee:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    37f2:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    37f6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    37fa:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    37fe:	b192      	cbz	r2, 3826 <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3800:	4b3b      	ldr	r3, [pc, #236]	; (38f0 <nrfx_gpiote_input_configure+0x140>)
    3802:	f104 0608 	add.w	r6, r4, #8
    3806:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    380a:	7810      	ldrb	r0, [r2, #0]
        if (pin_is_output(pin))
    380c:	078f      	lsls	r7, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    380e:	6852      	ldr	r2, [r2, #4]
        if (pin_is_output(pin))
    3810:	d50c      	bpl.n	382c <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    3812:	2a00      	cmp	r2, #0
    3814:	d1db      	bne.n	37ce <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3816:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    381a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    381e:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
    3822:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (p_handler_config)
    3826:	bbcd      	cbnz	r5, 389c <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    3828:	4834      	ldr	r0, [pc, #208]	; (38fc <nrfx_gpiote_input_configure+0x14c>)
    382a:	e7d1      	b.n	37d0 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    382c:	f021 0120 	bic.w	r1, r1, #32
    3830:	04c9      	lsls	r1, r1, #19
    3832:	0cc9      	lsrs	r1, r1, #19
    3834:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    3838:	2a00      	cmp	r2, #0
    383a:	d0ec      	beq.n	3816 <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    383c:	2803      	cmp	r0, #3
    383e:	d8c6      	bhi.n	37ce <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3840:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3844:	4662      	mov	r2, ip
    3846:	0092      	lsls	r2, r2, #2
    3848:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    384c:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3850:	b920      	cbnz	r0, 385c <nrfx_gpiote_input_configure+0xac>
    p_reg->CONFIG[idx] = 0;
    3852:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    3856:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#endif
}
    385a:	e7dc      	b.n	3816 <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    385c:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3860:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    3864:	f027 0703 	bic.w	r7, r7, #3
    3868:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    386c:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
    3870:	f041 0120 	orr.w	r1, r1, #32
    3874:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
    3878:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    387c:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3880:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    3884:	0227      	lsls	r7, r4, #8
    3886:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    388a:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
    388e:	ea47 070e 	orr.w	r7, r7, lr
    3892:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    3896:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    389a:	e7bc      	b.n	3816 <nrfx_gpiote_input_configure+0x66>
    release_handler(pin);
    389c:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    389e:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    38a2:	f7ff ff3b 	bl	371c <release_handler>
    if (!handler)
    38a6:	2e00      	cmp	r6, #0
    38a8:	d0be      	beq.n	3828 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    38aa:	4d11      	ldr	r5, [pc, #68]	; (38f0 <nrfx_gpiote_input_configure+0x140>)
    38ac:	682b      	ldr	r3, [r5, #0]
    38ae:	429e      	cmp	r6, r3
    38b0:	d104      	bne.n	38bc <nrfx_gpiote_input_configure+0x10c>
    38b2:	686b      	ldr	r3, [r5, #4]
    38b4:	429f      	cmp	r7, r3
    38b6:	d101      	bne.n	38bc <nrfx_gpiote_input_configure+0x10c>
    38b8:	2200      	movs	r2, #0
    38ba:	e009      	b.n	38d0 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    38bc:	4810      	ldr	r0, [pc, #64]	; (3900 <nrfx_gpiote_input_configure+0x150>)
    38be:	f10d 0107 	add.w	r1, sp, #7
    38c2:	f7ff fe69 	bl	3598 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    38c6:	4b0d      	ldr	r3, [pc, #52]	; (38fc <nrfx_gpiote_input_configure+0x14c>)
    38c8:	4298      	cmp	r0, r3
    38ca:	d181      	bne.n	37d0 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    38cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    38d0:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    38d4:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    38d6:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    38d8:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    38dc:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    38e0:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    38e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    38e8:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    38ec:	e79c      	b.n	3828 <nrfx_gpiote_input_configure+0x78>
    38ee:	bf00      	nop
    38f0:	2000c53c 	.word	0x2000c53c
    38f4:	0bad0004 	.word	0x0bad0004
    38f8:	50842500 	.word	0x50842500
    38fc:	0bad0000 	.word	0x0bad0000
    3900:	2000c590 	.word	0x2000c590

00003904 <nrfx_gpiote_output_configure>:
{
    3904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3906:	4604      	mov	r4, r0
    if (p_config)
    3908:	b369      	cbz	r1, 3966 <nrfx_gpiote_output_configure+0x62>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    390a:	4e37      	ldr	r6, [pc, #220]	; (39e8 <nrfx_gpiote_output_configure+0xe4>)
    390c:	f100 0708 	add.w	r7, r0, #8
    3910:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3914:	07ab      	lsls	r3, r5, #30
    3916:	d404      	bmi.n	3922 <nrfx_gpiote_output_configure+0x1e>
    3918:	f7ff fed8 	bl	36cc <pin_in_use_by_te>
    391c:	b108      	cbz	r0, 3922 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    391e:	4833      	ldr	r0, [pc, #204]	; (39ec <nrfx_gpiote_output_configure+0xe8>)
}
    3920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3922:	f015 0f1c 	tst.w	r5, #28
    3926:	784b      	ldrb	r3, [r1, #1]
    3928:	d001      	beq.n	392e <nrfx_gpiote_output_configure+0x2a>
    392a:	2b01      	cmp	r3, #1
    392c:	d0f7      	beq.n	391e <nrfx_gpiote_output_configure+0x1a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    392e:	4830      	ldr	r0, [pc, #192]	; (39f0 <nrfx_gpiote_output_configure+0xec>)
    *p_pin = pin_number & 0x1F;
    3930:	f004 0c1f 	and.w	ip, r4, #31
    3934:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3938:	f8dc 0200 	ldr.w	r0, [ip, #512]	; 0x200
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    393c:	f891 e000 	ldrb.w	lr, [r1]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3940:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    3942:	f420 60e1 	bic.w	r0, r0, #1800	; 0x708
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3946:	7889      	ldrb	r1, [r1, #2]
    3948:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    cnf &= ~to_update;
    394c:	f020 0007 	bic.w	r0, r0, #7
    3950:	4303      	orrs	r3, r0
    3952:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3956:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    395a:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    395e:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
    3962:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    3966:	b90a      	cbnz	r2, 396c <nrfx_gpiote_output_configure+0x68>
    return NRFX_SUCCESS;
    3968:	4822      	ldr	r0, [pc, #136]	; (39f4 <nrfx_gpiote_output_configure+0xf0>)
    396a:	e7d9      	b.n	3920 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    396c:	4e1e      	ldr	r6, [pc, #120]	; (39e8 <nrfx_gpiote_output_configure+0xe4>)
    396e:	f104 0708 	add.w	r7, r4, #8
    3972:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3976:	0783      	lsls	r3, r0, #30
    3978:	d5d1      	bpl.n	391e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    397a:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    397e:	2300      	movs	r3, #0
    3980:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3982:	f020 0020 	bic.w	r0, r0, #32
    3986:	0089      	lsls	r1, r1, #2
    3988:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    398c:	04c0      	lsls	r0, r0, #19
    398e:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    3992:	0cc0      	lsrs	r0, r0, #19
    3994:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3998:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    399c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    39a0:	7855      	ldrb	r5, [r2, #1]
    39a2:	2d00      	cmp	r5, #0
    39a4:	d0e0      	beq.n	3968 <nrfx_gpiote_output_configure+0x64>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    39a6:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    39aa:	7892      	ldrb	r2, [r2, #2]
    39ac:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    39b0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    39b4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    39b8:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    39bc:	0223      	lsls	r3, r4, #8
    39be:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    39c2:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    39c4:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    39c8:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    39cc:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    39ce:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    39d0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    39d4:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    39d8:	4313      	orrs	r3, r2
    39da:	f040 0020 	orr.w	r0, r0, #32
    39de:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    39e2:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    39e6:	e7bf      	b.n	3968 <nrfx_gpiote_output_configure+0x64>
    39e8:	2000c53c 	.word	0x2000c53c
    39ec:	0bad0004 	.word	0x0bad0004
    39f0:	50842500 	.word	0x50842500
    39f4:	0bad0000 	.word	0x0bad0000

000039f8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    39f8:	4b01      	ldr	r3, [pc, #4]	; (3a00 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    39fa:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    39fe:	4770      	bx	lr
    3a00:	2000c53c 	.word	0x2000c53c

00003a04 <nrfx_gpiote_channel_get>:
{
    3a04:	b508      	push	{r3, lr}
    3a06:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3a08:	f7ff fe60 	bl	36cc <pin_in_use_by_te>
    3a0c:	b138      	cbz	r0, 3a1e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3a0e:	4b05      	ldr	r3, [pc, #20]	; (3a24 <nrfx_gpiote_channel_get+0x20>)
    3a10:	3208      	adds	r2, #8
    3a12:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    3a16:	4804      	ldr	r0, [pc, #16]	; (3a28 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3a18:	0b5b      	lsrs	r3, r3, #13
    3a1a:	700b      	strb	r3, [r1, #0]
}
    3a1c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3a1e:	4803      	ldr	r0, [pc, #12]	; (3a2c <nrfx_gpiote_channel_get+0x28>)
    3a20:	e7fc      	b.n	3a1c <nrfx_gpiote_channel_get+0x18>
    3a22:	bf00      	nop
    3a24:	2000c53c 	.word	0x2000c53c
    3a28:	0bad0000 	.word	0x0bad0000
    3a2c:	0bad0004 	.word	0x0bad0004

00003a30 <nrfx_gpiote_init>:
{
    3a30:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3a32:	4c0f      	ldr	r4, [pc, #60]	; (3a70 <nrfx_gpiote_init+0x40>)
    3a34:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    3a38:	b9bd      	cbnz	r5, 3a6a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3a3a:	2240      	movs	r2, #64	; 0x40
    3a3c:	4629      	mov	r1, r5
    3a3e:	f104 0010 	add.w	r0, r4, #16
    3a42:	f002 fbe4 	bl	620e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3a46:	200d      	movs	r0, #13
    3a48:	f7fe f8cc 	bl	1be4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a4c:	4b09      	ldr	r3, [pc, #36]	; (3a74 <nrfx_gpiote_init+0x44>)
    return err_code;
    3a4e:	480a      	ldr	r0, [pc, #40]	; (3a78 <nrfx_gpiote_init+0x48>)
    3a50:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3a54:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3a58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3a5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3a60:	2301      	movs	r3, #1
    3a62:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3a66:	6563      	str	r3, [r4, #84]	; 0x54
}
    3a68:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3a6a:	4804      	ldr	r0, [pc, #16]	; (3a7c <nrfx_gpiote_init+0x4c>)
    3a6c:	e7fc      	b.n	3a68 <nrfx_gpiote_init+0x38>
    3a6e:	bf00      	nop
    3a70:	2000c53c 	.word	0x2000c53c
    3a74:	5000d000 	.word	0x5000d000
    3a78:	0bad0000 	.word	0x0bad0000
    3a7c:	0bad0005 	.word	0x0bad0005

00003a80 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3a80:	4b03      	ldr	r3, [pc, #12]	; (3a90 <nrfx_gpiote_is_init+0x10>)
    3a82:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    3a86:	3800      	subs	r0, #0
    3a88:	bf18      	it	ne
    3a8a:	2001      	movne	r0, #1
    3a8c:	4770      	bx	lr
    3a8e:	bf00      	nop
    3a90:	2000c53c 	.word	0x2000c53c

00003a94 <nrfx_gpiote_channel_free>:
{
    3a94:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3a96:	4801      	ldr	r0, [pc, #4]	; (3a9c <nrfx_gpiote_channel_free+0x8>)
    3a98:	f7ff bda0 	b.w	35dc <nrfx_flag32_free>
    3a9c:	2000c58c 	.word	0x2000c58c

00003aa0 <nrfx_gpiote_channel_alloc>:
{
    3aa0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3aa2:	4801      	ldr	r0, [pc, #4]	; (3aa8 <nrfx_gpiote_channel_alloc+0x8>)
    3aa4:	f7ff bd78 	b.w	3598 <nrfx_flag32_alloc>
    3aa8:	2000c58c 	.word	0x2000c58c

00003aac <nrfx_gpiote_trigger_enable>:
{
    3aac:	4602      	mov	r2, r0
    3aae:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3ab0:	f7ff fe0c 	bl	36cc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3ab4:	4b1c      	ldr	r3, [pc, #112]	; (3b28 <nrfx_gpiote_trigger_enable+0x7c>)
    3ab6:	f102 0408 	add.w	r4, r2, #8
    3aba:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3abe:	b1e0      	cbz	r0, 3afa <nrfx_gpiote_trigger_enable+0x4e>
    3ac0:	f013 0402 	ands.w	r4, r3, #2
    3ac4:	d119      	bne.n	3afa <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3ac6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3ac8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3aca:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    3ace:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    3ad2:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3ad6:	6004      	str	r4, [r0, #0]
    3ad8:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3adc:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3ade:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    3ae2:	f040 0001 	orr.w	r0, r0, #1
    3ae6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    3aea:	b129      	cbz	r1, 3af8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3aec:	2201      	movs	r2, #1
    3aee:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    3af2:	4a0e      	ldr	r2, [pc, #56]	; (3b2c <nrfx_gpiote_trigger_enable+0x80>)
    3af4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3af8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3afa:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    3afe:	2b04      	cmp	r3, #4
    3b00:	d00e      	beq.n	3b20 <nrfx_gpiote_trigger_enable+0x74>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    3b02:	2b05      	cmp	r3, #5
    3b04:	d00e      	beq.n	3b24 <nrfx_gpiote_trigger_enable+0x78>
    return p_reg->IN;
    3b06:	4b0a      	ldr	r3, [pc, #40]	; (3b30 <nrfx_gpiote_trigger_enable+0x84>)
    3b08:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    3b0a:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3b0e:	40d9      	lsrs	r1, r3
    3b10:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3b14:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3b16:	4610      	mov	r0, r2
}
    3b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3b1c:	f7ff bdc6 	b.w	36ac <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3b20:	2103      	movs	r1, #3
    3b22:	e7f8      	b.n	3b16 <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3b24:	2102      	movs	r1, #2
    3b26:	e7f6      	b.n	3b16 <nrfx_gpiote_trigger_enable+0x6a>
    3b28:	2000c53c 	.word	0x2000c53c
    3b2c:	5000d000 	.word	0x5000d000
    3b30:	50842500 	.word	0x50842500

00003b34 <nrfx_gpiote_trigger_disable>:
{
    3b34:	b508      	push	{r3, lr}
    3b36:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3b38:	f7ff fdc8 	bl	36cc <pin_in_use_by_te>
    3b3c:	b1c0      	cbz	r0, 3b70 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3b3e:	4b0f      	ldr	r3, [pc, #60]	; (3b7c <nrfx_gpiote_trigger_disable+0x48>)
    3b40:	f102 0108 	add.w	r1, r2, #8
    3b44:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3b48:	0799      	lsls	r1, r3, #30
    3b4a:	d411      	bmi.n	3b70 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3b4c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3b4e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3b50:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3b52:	490b      	ldr	r1, [pc, #44]	; (3b80 <nrfx_gpiote_trigger_disable+0x4c>)
    3b54:	009b      	lsls	r3, r3, #2
    3b56:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3b5a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3b5e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3b62:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3b66:	f022 0203 	bic.w	r2, r2, #3
    3b6a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    3b6e:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3b70:	2100      	movs	r1, #0
}
    3b72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3b76:	4610      	mov	r0, r2
    3b78:	f7ff bd98 	b.w	36ac <nrf_gpio_cfg_sense_set>
    3b7c:	2000c53c 	.word	0x2000c53c
    3b80:	5000d000 	.word	0x5000d000

00003b84 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3b84:	4b0c      	ldr	r3, [pc, #48]	; (3bb8 <nrfx_gpiote_pin_uninit+0x34>)
    3b86:	f100 0208 	add.w	r2, r0, #8
    3b8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    3b8e:	b510      	push	{r4, lr}
    if (!pin_in_use(pin))
    3b90:	07db      	lsls	r3, r3, #31
{
    3b92:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3b94:	d50d      	bpl.n	3bb2 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    3b96:	f7ff ffcd 	bl	3b34 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3b9a:	4620      	mov	r0, r4
    3b9c:	f7ff fdea 	bl	3774 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    3ba0:	2202      	movs	r2, #2
    3ba2:	4b06      	ldr	r3, [pc, #24]	; (3bbc <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    3ba4:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    3ba8:	3480      	adds	r4, #128	; 0x80
    3baa:	4805      	ldr	r0, [pc, #20]	; (3bc0 <nrfx_gpiote_pin_uninit+0x3c>)
    3bac:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    3bb0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3bb2:	4804      	ldr	r0, [pc, #16]	; (3bc4 <nrfx_gpiote_pin_uninit+0x40>)
    3bb4:	e7fc      	b.n	3bb0 <nrfx_gpiote_pin_uninit+0x2c>
    3bb6:	bf00      	nop
    3bb8:	2000c53c 	.word	0x2000c53c
    3bbc:	50842500 	.word	0x50842500
    3bc0:	0bad0000 	.word	0x0bad0000
    3bc4:	0bad0004 	.word	0x0bad0004

00003bc8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    3bcc:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3bce:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3bd0:	462c      	mov	r4, r5
{
    3bd2:	4b4d      	ldr	r3, [pc, #308]	; (3d08 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    3bd4:	484d      	ldr	r0, [pc, #308]	; (3d0c <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3bd6:	494e      	ldr	r1, [pc, #312]	; (3d10 <nrfx_gpiote_irq_handler+0x148>)
{
    3bd8:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bda:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3bdc:	b136      	cbz	r6, 3bec <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    3bde:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    3be2:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3be4:	bf1e      	ittt	ne
    3be6:	601c      	strne	r4, [r3, #0]
    3be8:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    3bea:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3bec:	3304      	adds	r3, #4
    3bee:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    3bf0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3bf4:	d1f1      	bne.n	3bda <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bf6:	4f45      	ldr	r7, [pc, #276]	; (3d0c <nrfx_gpiote_irq_handler+0x144>)
    3bf8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3bfc:	b193      	cbz	r3, 3c24 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    3bfe:	4e45      	ldr	r6, [pc, #276]	; (3d14 <nrfx_gpiote_irq_handler+0x14c>)
    3c00:	6a33      	ldr	r3, [r6, #32]
    3c02:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    3c04:	6233      	str	r3, [r6, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3c06:	f04f 0901 	mov.w	r9, #1
    3c0a:	f10d 080c 	add.w	r8, sp, #12
            while (latch[i])
    3c0e:	9803      	ldr	r0, [sp, #12]
    3c10:	b950      	cbnz	r0, 3c28 <nrfx_gpiote_irq_handler+0x60>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3c12:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    3c16:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    3c1a:	6a33      	ldr	r3, [r6, #32]
    3c1c:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    3c1e:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    3c20:	2b00      	cmp	r3, #0
    3c22:	d1f0      	bne.n	3c06 <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    3c24:	2401      	movs	r4, #1
    3c26:	e069      	b.n	3cfc <nrfx_gpiote_irq_handler+0x134>
                uint32_t pin = NRF_CTZ(latch[i]);
    3c28:	fa90 faa0 	rbit	sl, r0
    3c2c:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3c30:	4a39      	ldr	r2, [pc, #228]	; (3d18 <nrfx_gpiote_irq_handler+0x150>)
    3c32:	f10a 0308 	add.w	r3, sl, #8
    3c36:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3c3a:	ea4f 0cda 	mov.w	ip, sl, lsr #3
    bit = BITMASK_RELBIT_GET(bit);
    3c3e:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3c42:	fa09 f403 	lsl.w	r4, r9, r3
    3c46:	f818 300c 	ldrb.w	r3, [r8, ip]
    3c4a:	f3c1 0282 	ubfx	r2, r1, #2, #3
    3c4e:	ea23 0304 	bic.w	r3, r3, r4
    3c52:	f808 300c 	strb.w	r3, [r8, ip]
    3c56:	eb06 038a 	add.w	r3, r6, sl, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3c5a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (is_level(trigger))
    3c5e:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3c60:	4693      	mov	fp, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3c62:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    3c66:	d518      	bpl.n	3c9a <nrfx_gpiote_irq_handler+0xd2>
        call_handler(pin, trigger);
    3c68:	4611      	mov	r1, r2
    3c6a:	4650      	mov	r0, sl
    3c6c:	9301      	str	r3, [sp, #4]
    3c6e:	f7ff fd37 	bl	36e0 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3c72:	9b01      	ldr	r3, [sp, #4]
    3c74:	b2e4      	uxtb	r4, r4
    3c76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3c7a:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3c7e:	429c      	cmp	r4, r3
    3c80:	d107      	bne.n	3c92 <nrfx_gpiote_irq_handler+0xca>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3c82:	2100      	movs	r1, #0
    3c84:	4650      	mov	r0, sl
    3c86:	f7ff fd11 	bl	36ac <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3c8a:	4621      	mov	r1, r4
    3c8c:	4650      	mov	r0, sl
    3c8e:	f7ff fd0d 	bl	36ac <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    3c92:	fa09 f00a 	lsl.w	r0, r9, sl
    3c96:	6230      	str	r0, [r6, #32]
}
    3c98:	e7b9      	b.n	3c0e <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3c9a:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    3c9c:	bf0c      	ite	eq
    3c9e:	2103      	moveq	r1, #3
    3ca0:	2102      	movne	r1, #2
    3ca2:	4650      	mov	r0, sl
    3ca4:	9201      	str	r2, [sp, #4]
    3ca6:	f7ff fd01 	bl	36ac <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3caa:	9a01      	ldr	r2, [sp, #4]
    3cac:	2a03      	cmp	r2, #3
    3cae:	d004      	beq.n	3cba <nrfx_gpiote_irq_handler+0xf2>
    3cb0:	2c02      	cmp	r4, #2
    3cb2:	d107      	bne.n	3cc4 <nrfx_gpiote_irq_handler+0xfc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3cb4:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3cb8:	d1eb      	bne.n	3c92 <nrfx_gpiote_irq_handler+0xca>
            call_handler(pin, trigger);
    3cba:	4659      	mov	r1, fp
    3cbc:	4650      	mov	r0, sl
    3cbe:	f7ff fd0f 	bl	36e0 <call_handler>
    3cc2:	e7e6      	b.n	3c92 <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3cc4:	2c03      	cmp	r4, #3
    3cc6:	d1e4      	bne.n	3c92 <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3cc8:	f1bb 0f02 	cmp.w	fp, #2
    3ccc:	e7f4      	b.n	3cb8 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    3cce:	fa95 f3a5 	rbit	r3, r5
    3cd2:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3cd6:	fa04 f203 	lsl.w	r2, r4, r3
    3cda:	009b      	lsls	r3, r3, #2
    3cdc:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3ce0:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3ce4:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3ce8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3cec:	f3c0 2004 	ubfx	r0, r0, #8, #5
    3cf0:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    3cf4:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3cf8:	f7ff fcf2 	bl	36e0 <call_handler>
    while (mask)
    3cfc:	2d00      	cmp	r5, #0
    3cfe:	d1e6      	bne.n	3cce <nrfx_gpiote_irq_handler+0x106>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3d00:	b005      	add	sp, #20
    3d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3d06:	bf00      	nop
    3d08:	5000d100 	.word	0x5000d100
    3d0c:	5000d000 	.word	0x5000d000
    3d10:	5000d120 	.word	0x5000d120
    3d14:	50842500 	.word	0x50842500
    3d18:	2000c53c 	.word	0x2000c53c

00003d1c <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    3d1c:	2200      	movs	r2, #0
    3d1e:	4b03      	ldr	r3, [pc, #12]	; (3d2c <nvmc_readonly_mode_set+0x10>)
    3d20:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3d24:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    3d28:	4770      	bx	lr
    3d2a:	bf00      	nop
    3d2c:	50039000 	.word	0x50039000

00003d30 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    3d30:	4a04      	ldr	r2, [pc, #16]	; (3d44 <nvmc_word_write+0x14>)
    3d32:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    3d36:	07db      	lsls	r3, r3, #31
    3d38:	d5fb      	bpl.n	3d32 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    3d3a:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    3d3c:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    3d40:	4770      	bx	lr
    3d42:	bf00      	nop
    3d44:	50039000 	.word	0x50039000

00003d48 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    3d48:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    3d4a:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    3d4e:	b983      	cbnz	r3, 3d72 <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    3d50:	2202      	movs	r2, #2
    3d52:	4b09      	ldr	r3, [pc, #36]	; (3d78 <nrfx_nvmc_page_erase+0x30>)
    3d54:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3d58:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    3d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3d60:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3d62:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3d66:	07d2      	lsls	r2, r2, #31
    3d68:	d5fb      	bpl.n	3d62 <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    3d6a:	f7ff ffd7 	bl	3d1c <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    3d6e:	4803      	ldr	r0, [pc, #12]	; (3d7c <nrfx_nvmc_page_erase+0x34>)
}
    3d70:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    3d72:	4803      	ldr	r0, [pc, #12]	; (3d80 <nrfx_nvmc_page_erase+0x38>)
    3d74:	e7fc      	b.n	3d70 <nrfx_nvmc_page_erase+0x28>
    3d76:	bf00      	nop
    3d78:	50039000 	.word	0x50039000
    3d7c:	0bad0000 	.word	0x0bad0000
    3d80:	0bad000a 	.word	0x0bad000a

00003d84 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    3d84:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    3d86:	b508      	push	{r3, lr}
    3d88:	4b05      	ldr	r3, [pc, #20]	; (3da0 <nrfx_nvmc_word_write+0x1c>)
    3d8a:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    3d8e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    3d92:	f7ff ffcd 	bl	3d30 <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    3d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    3d9a:	f7ff bfbf 	b.w	3d1c <nvmc_readonly_mode_set>
    3d9e:	bf00      	nop
    3da0:	50039000 	.word	0x50039000

00003da4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3da4:	4b0e      	ldr	r3, [pc, #56]	; (3de0 <z_sys_init_run_level+0x3c>)
{
    3da6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3da8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3dac:	3001      	adds	r0, #1
    3dae:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3db2:	42a6      	cmp	r6, r4
    3db4:	d800      	bhi.n	3db8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3db6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3db8:	e9d4 3500 	ldrd	r3, r5, [r4]
    3dbc:	4628      	mov	r0, r5
    3dbe:	4798      	blx	r3
		if (dev != NULL) {
    3dc0:	b165      	cbz	r5, 3ddc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    3dc2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    3dc4:	b130      	cbz	r0, 3dd4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3dc6:	2800      	cmp	r0, #0
    3dc8:	bfb8      	it	lt
    3dca:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3dcc:	28ff      	cmp	r0, #255	; 0xff
    3dce:	bfa8      	it	ge
    3dd0:	20ff      	movge	r0, #255	; 0xff
    3dd2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3dd4:	785a      	ldrb	r2, [r3, #1]
    3dd6:	f042 0201 	orr.w	r2, r2, #1
    3dda:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3ddc:	3408      	adds	r4, #8
    3dde:	e7e8      	b.n	3db2 <z_sys_init_run_level+0xe>
    3de0:	00006e70 	.word	0x00006e70

00003de4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3de4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3de6:	4604      	mov	r4, r0
    3de8:	460d      	mov	r5, r1
	__asm__ volatile(
    3dea:	f04f 0320 	mov.w	r3, #32
    3dee:	f3ef 8611 	mrs	r6, BASEPRI
    3df2:	f383 8812 	msr	BASEPRI_MAX, r3
    3df6:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3dfa:	2200      	movs	r2, #0
    3dfc:	2804      	cmp	r0, #4
    3dfe:	bf96      	itet	ls
    3e00:	4b11      	ldrls	r3, [pc, #68]	; (3e48 <z_fatal_error+0x64>)
    3e02:	4b12      	ldrhi	r3, [pc, #72]	; (3e4c <z_fatal_error+0x68>)
	return 0;
    3e04:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3e08:	9200      	str	r2, [sp, #0]
    3e0a:	2145      	movs	r1, #69	; 0x45
    3e0c:	4602      	mov	r2, r0
    3e0e:	4810      	ldr	r0, [pc, #64]	; (3e50 <z_fatal_error+0x6c>)
    3e10:	f002 f94b 	bl	60aa <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    3e14:	b13d      	cbz	r5, 3e26 <z_fatal_error+0x42>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    3e16:	69eb      	ldr	r3, [r5, #28]
    3e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3e1c:	b11b      	cbz	r3, 3e26 <z_fatal_error+0x42>
		LOG_ERR("Fault during interrupt handling\n");
    3e1e:	2145      	movs	r1, #69	; 0x45
    3e20:	480c      	ldr	r0, [pc, #48]	; (3e54 <z_fatal_error+0x70>)
    3e22:	f002 f942 	bl	60aa <z_log_minimal_printk>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    3e26:	2200      	movs	r2, #0
    3e28:	4b0b      	ldr	r3, [pc, #44]	; (3e58 <z_fatal_error+0x74>)
    3e2a:	2145      	movs	r1, #69	; 0x45
    3e2c:	480b      	ldr	r0, [pc, #44]	; (3e5c <z_fatal_error+0x78>)
    3e2e:	f002 f93c 	bl	60aa <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    3e32:	4629      	mov	r1, r5
    3e34:	4620      	mov	r0, r4
    3e36:	f7ff f9e7 	bl	3208 <k_sys_fatal_error_handler>
	__asm__ volatile(
    3e3a:	f386 8811 	msr	BASEPRI, r6
    3e3e:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    3e42:	b002      	add	sp, #8
    3e44:	bd70      	pop	{r4, r5, r6, pc}
    3e46:	bf00      	nop
    3e48:	00006e84 	.word	0x00006e84
    3e4c:	00007b36 	.word	0x00007b36
    3e50:	00007b44 	.word	0x00007b44
    3e54:	00007b71 	.word	0x00007b71
    3e58:	00007b97 	.word	0x00007b97
    3e5c:	00007b9f 	.word	0x00007b9f

00003e60 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    3e60:	2201      	movs	r2, #1
{
    3e62:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3e64:	4b08      	ldr	r3, [pc, #32]	; (3e88 <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3e66:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3e68:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3e6a:	f7ff ff9b 	bl	3da4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    3e6e:	f000 f907 	bl	4080 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3e72:	2003      	movs	r0, #3
    3e74:	f7ff ff96 	bl	3da4 <z_sys_init_run_level>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    3e78:	f7fc fad2 	bl	420 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3e7c:	4a03      	ldr	r2, [pc, #12]	; (3e8c <bg_thread_main+0x2c>)
    3e7e:	7b13      	ldrb	r3, [r2, #12]
    3e80:	f023 0301 	bic.w	r3, r3, #1
    3e84:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3e86:	bd08      	pop	{r3, pc}
    3e88:	2000d4dd 	.word	0x2000d4dd
    3e8c:	2000c638 	.word	0x2000c638

00003e90 <z_bss_zero>:
{
    3e90:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3e92:	4803      	ldr	r0, [pc, #12]	; (3ea0 <z_bss_zero+0x10>)
    3e94:	4a03      	ldr	r2, [pc, #12]	; (3ea4 <z_bss_zero+0x14>)
    3e96:	2100      	movs	r1, #0
    3e98:	1a12      	subs	r2, r2, r0
    3e9a:	f002 fd03 	bl	68a4 <z_early_memset>
}
    3e9e:	bd08      	pop	{r3, pc}
    3ea0:	2000c618 	.word	0x2000c618
    3ea4:	2000d4e0 	.word	0x2000d4e0

00003ea8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3ea8:	b508      	push	{r3, lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3eaa:	4b17      	ldr	r3, [pc, #92]	; (3f08 <z_cstart+0x60>)
	uint32_t msp =
    3eac:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3eb0:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3eb4:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3eb8:	2500      	movs	r5, #0
    3eba:	23e0      	movs	r3, #224	; 0xe0
    3ebc:	4c13      	ldr	r4, [pc, #76]	; (3f0c <z_cstart+0x64>)
    3ebe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3ec2:	77e5      	strb	r5, [r4, #31]
    3ec4:	7625      	strb	r5, [r4, #24]
    3ec6:	7665      	strb	r5, [r4, #25]
    3ec8:	76a5      	strb	r5, [r4, #26]
    3eca:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3ed0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3ed4:	6263      	str	r3, [r4, #36]	; 0x24
    3ed6:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3eda:	f7fe f901 	bl	20e0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3ede:	f7fd fe35 	bl	1b4c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3ee2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3ee6:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3ee8:	62e3      	str	r3, [r4, #44]	; 0x2c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3eea:	f002 fcd0 	bl	688e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3eee:	4628      	mov	r0, r5
    3ef0:	f7ff ff58 	bl	3da4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3ef4:	2001      	movs	r0, #1
    3ef6:	f7ff ff55 	bl	3da4 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    3efa:	462b      	mov	r3, r5
    3efc:	462a      	mov	r2, r5
    3efe:	4629      	mov	r1, r5
    3f00:	4803      	ldr	r0, [pc, #12]	; (3f10 <z_cstart+0x68>)
    3f02:	f7fd fee5 	bl	1cd0 <z_arm_switch_to_main_no_multithreading>
    3f06:	bf00      	nop
    3f08:	2000fce0 	.word	0x2000fce0
    3f0c:	e000ed00 	.word	0xe000ed00
    3f10:	00003e61 	.word	0x00003e61

00003f14 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    3f14:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    3f16:	4806      	ldr	r0, [pc, #24]	; (3f30 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    3f18:	4a06      	ldr	r2, [pc, #24]	; (3f34 <z_data_copy+0x20>)
    3f1a:	4907      	ldr	r1, [pc, #28]	; (3f38 <z_data_copy+0x24>)
    3f1c:	1a12      	subs	r2, r2, r0
    3f1e:	f002 fcc3 	bl	68a8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3f22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3f26:	4a05      	ldr	r2, [pc, #20]	; (3f3c <z_data_copy+0x28>)
    3f28:	4905      	ldr	r1, [pc, #20]	; (3f40 <z_data_copy+0x2c>)
    3f2a:	4806      	ldr	r0, [pc, #24]	; (3f44 <z_data_copy+0x30>)
    3f2c:	f002 bcbc 	b.w	68a8 <z_early_memcpy>
    3f30:	2000c4e8 	.word	0x2000c4e8
    3f34:	2000c614 	.word	0x2000c614
    3f38:	00007c40 	.word	0x00007c40
    3f3c:	00000000 	.word	0x00000000
    3f40:	00007c40 	.word	0x00007c40
    3f44:	2000c4e8 	.word	0x2000c4e8

00003f48 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3f48:	4b03      	ldr	r3, [pc, #12]	; (3f58 <elapsed+0x10>)
    3f4a:	681b      	ldr	r3, [r3, #0]
    3f4c:	b90b      	cbnz	r3, 3f52 <elapsed+0xa>
    3f4e:	f7ff b87b 	b.w	3048 <sys_clock_elapsed>
}
    3f52:	2000      	movs	r0, #0
    3f54:	4770      	bx	lr
    3f56:	bf00      	nop
    3f58:	2000d3bc 	.word	0x2000d3bc

00003f5c <next_timeout>:
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3f5c:	4b0d      	ldr	r3, [pc, #52]	; (3f94 <next_timeout+0x38>)

static int32_t next_timeout(void)
{
    3f5e:	b510      	push	{r4, lr}
    3f60:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f62:	429c      	cmp	r4, r3
    3f64:	bf08      	it	eq
    3f66:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3f68:	f7ff ffee 	bl	3f48 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    3f6c:	b174      	cbz	r4, 3f8c <next_timeout+0x30>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    3f6e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    3f72:	1a1b      	subs	r3, r3, r0
    3f74:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    3f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    3f7c:	f170 0200 	sbcs.w	r2, r0, #0
    3f80:	da04      	bge.n	3f8c <next_timeout+0x30>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    3f82:	2800      	cmp	r0, #0
    3f84:	bfac      	ite	ge
    3f86:	4618      	movge	r0, r3
    3f88:	2000      	movlt	r0, #0
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3f8a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    3f8c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	return ret;
    3f90:	e7fb      	b.n	3f8a <next_timeout+0x2e>
    3f92:	bf00      	nop
    3f94:	2000c598 	.word	0x2000c598

00003f98 <remove_timeout>:
{
    3f98:	b530      	push	{r4, r5, lr}
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3f9a:	6803      	ldr	r3, [r0, #0]
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3f9c:	b168      	cbz	r0, 3fba <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    3f9e:	4a0a      	ldr	r2, [pc, #40]	; (3fc8 <remove_timeout+0x30>)
    3fa0:	6852      	ldr	r2, [r2, #4]
    3fa2:	4290      	cmp	r0, r2
    3fa4:	d009      	beq.n	3fba <remove_timeout+0x22>
	if (next(t) != NULL) {
    3fa6:	b143      	cbz	r3, 3fba <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    3fa8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    3fac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    3fb0:	1912      	adds	r2, r2, r4
    3fb2:	eb41 0105 	adc.w	r1, r1, r5
    3fb6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    3fba:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    3fbc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3fbe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3fc0:	2300      	movs	r3, #0
	node->prev = NULL;
    3fc2:	e9c0 3300 	strd	r3, r3, [r0]
}
    3fc6:	bd30      	pop	{r4, r5, pc}
    3fc8:	2000c598 	.word	0x2000c598

00003fcc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    3fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__asm__ volatile(
    3fd0:	f04f 0320 	mov.w	r3, #32
    3fd4:	f3ef 8511 	mrs	r5, BASEPRI
    3fd8:	f383 8812 	msr	BASEPRI_MAX, r3
    3fdc:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    3fe0:	4f24      	ldr	r7, [pc, #144]	; (4074 <sys_clock_announce+0xa8>)
	return list->head == list;
    3fe2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 407c <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    3fe6:	4e24      	ldr	r6, [pc, #144]	; (4078 <sys_clock_announce+0xac>)
	announce_remaining = ticks;
    3fe8:	6038      	str	r0, [r7, #0]
    3fea:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3fee:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ff0:	4540      	cmp	r0, r8
    3ff2:	ea4f 71e3 	mov.w	r1, r3, asr #31
		curr_tick += dt;
    3ff6:	e9d6 2e00 	ldrd	r2, lr, [r6]
    3ffa:	d00b      	beq.n	4014 <sys_clock_announce+0x48>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3ffc:	b150      	cbz	r0, 4014 <sys_clock_announce+0x48>
    3ffe:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
    4002:	42a3      	cmp	r3, r4
    4004:	eb71 090c 	sbcs.w	r9, r1, ip
    4008:	da16      	bge.n	4038 <sys_clock_announce+0x6c>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    400a:	1ae4      	subs	r4, r4, r3
    400c:	eb6c 0c01 	sbc.w	ip, ip, r1
    4010:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    4014:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4016:	189b      	adds	r3, r3, r2
    4018:	eb4e 0101 	adc.w	r1, lr, r1
    401c:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
    4020:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4022:	f7ff ff9b 	bl	3f5c <next_timeout>
    4026:	4621      	mov	r1, r4
    4028:	f7fe ffde 	bl	2fe8 <sys_clock_set_timeout>
	__asm__ volatile(
    402c:	f385 8811 	msr	BASEPRI, r5
    4030:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    4038:	18a2      	adds	r2, r4, r2
    403a:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
		t->dticks = 0;
    403e:	2300      	movs	r3, #0
		curr_tick += dt;
    4040:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
    4044:	2200      	movs	r2, #0
    4046:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    404a:	f7ff ffa5 	bl	3f98 <remove_timeout>
    404e:	f385 8811 	msr	BASEPRI, r5
    4052:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4056:	6883      	ldr	r3, [r0, #8]
    4058:	4798      	blx	r3
	__asm__ volatile(
    405a:	f04f 0320 	mov.w	r3, #32
    405e:	f3ef 8511 	mrs	r5, BASEPRI
    4062:	f383 8812 	msr	BASEPRI_MAX, r3
    4066:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    406a:	683b      	ldr	r3, [r7, #0]
    406c:	1b1b      	subs	r3, r3, r4
    406e:	603b      	str	r3, [r7, #0]
    4070:	e7bb      	b.n	3fea <sys_clock_announce+0x1e>
    4072:	bf00      	nop
    4074:	2000d3bc 	.word	0x2000d3bc
    4078:	2000c6b8 	.word	0x2000c6b8
    407c:	2000c598 	.word	0x2000c598

00004080 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4080:	4a02      	ldr	r2, [pc, #8]	; (408c <boot_banner+0xc>)
    4082:	4903      	ldr	r1, [pc, #12]	; (4090 <boot_banner+0x10>)
    4084:	4803      	ldr	r0, [pc, #12]	; (4094 <boot_banner+0x14>)
    4086:	f001 bf56 	b.w	5f36 <printk>
    408a:	bf00      	nop
    408c:	00007b96 	.word	0x00007b96
    4090:	00007c09 	.word	0x00007c09
    4094:	00007c16 	.word	0x00007c16

00004098 <nrf_cc3xx_platform_init_no_rng>:
    4098:	b510      	push	{r4, lr}
    409a:	4c0a      	ldr	r4, [pc, #40]	; (40c4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    409c:	6823      	ldr	r3, [r4, #0]
    409e:	b11b      	cbz	r3, 40a8 <nrf_cc3xx_platform_init_no_rng+0x10>
    40a0:	2301      	movs	r3, #1
    40a2:	2000      	movs	r0, #0
    40a4:	6023      	str	r3, [r4, #0]
    40a6:	bd10      	pop	{r4, pc}
    40a8:	f000 f850 	bl	414c <CC_LibInitNoRng>
    40ac:	2800      	cmp	r0, #0
    40ae:	d0f7      	beq.n	40a0 <nrf_cc3xx_platform_init_no_rng+0x8>
    40b0:	3801      	subs	r0, #1
    40b2:	2806      	cmp	r0, #6
    40b4:	d803      	bhi.n	40be <nrf_cc3xx_platform_init_no_rng+0x26>
    40b6:	4b04      	ldr	r3, [pc, #16]	; (40c8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    40b8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    40bc:	bd10      	pop	{r4, pc}
    40be:	4803      	ldr	r0, [pc, #12]	; (40cc <nrf_cc3xx_platform_init_no_rng+0x34>)
    40c0:	bd10      	pop	{r4, pc}
    40c2:	bf00      	nop
    40c4:	2000d3c0 	.word	0x2000d3c0
    40c8:	00006e98 	.word	0x00006e98
    40cc:	ffff8ffe 	.word	0xffff8ffe

000040d0 <nrf_cc3xx_platform_abort>:
    40d0:	f3bf 8f4f 	dsb	sy
    40d4:	4905      	ldr	r1, [pc, #20]	; (40ec <nrf_cc3xx_platform_abort+0x1c>)
    40d6:	4b06      	ldr	r3, [pc, #24]	; (40f0 <nrf_cc3xx_platform_abort+0x20>)
    40d8:	68ca      	ldr	r2, [r1, #12]
    40da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    40de:	4313      	orrs	r3, r2
    40e0:	60cb      	str	r3, [r1, #12]
    40e2:	f3bf 8f4f 	dsb	sy
    40e6:	bf00      	nop
    40e8:	e7fd      	b.n	40e6 <nrf_cc3xx_platform_abort+0x16>
    40ea:	bf00      	nop
    40ec:	e000ed00 	.word	0xe000ed00
    40f0:	05fa0004 	.word	0x05fa0004

000040f4 <CC_PalAbort>:
    40f4:	b430      	push	{r4, r5}
    40f6:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    40fa:	2500      	movs	r5, #0
    40fc:	4b07      	ldr	r3, [pc, #28]	; (411c <CC_PalAbort+0x28>)
    40fe:	4c08      	ldr	r4, [pc, #32]	; (4120 <CC_PalAbort+0x2c>)
    4100:	4908      	ldr	r1, [pc, #32]	; (4124 <CC_PalAbort+0x30>)
    4102:	6849      	ldr	r1, [r1, #4]
    4104:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4108:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    410c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4110:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4114:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4118:	bc30      	pop	{r4, r5}
    411a:	4708      	bx	r1
    411c:	50841000 	.word	0x50841000
    4120:	50840000 	.word	0x50840000
    4124:	2000c5a0 	.word	0x2000c5a0

00004128 <nrf_cc3xx_platform_set_abort>:
    4128:	4b02      	ldr	r3, [pc, #8]	; (4134 <nrf_cc3xx_platform_set_abort+0xc>)
    412a:	e9d0 1200 	ldrd	r1, r2, [r0]
    412e:	e9c3 1200 	strd	r1, r2, [r3]
    4132:	4770      	bx	lr
    4134:	2000c5a0 	.word	0x2000c5a0

00004138 <mbedtls_platform_zeroize>:
    4138:	b138      	cbz	r0, 414a <mbedtls_platform_zeroize+0x12>
    413a:	b131      	cbz	r1, 414a <mbedtls_platform_zeroize+0x12>
    413c:	2200      	movs	r2, #0
    413e:	4401      	add	r1, r0
    4140:	4603      	mov	r3, r0
    4142:	3001      	adds	r0, #1
    4144:	4288      	cmp	r0, r1
    4146:	701a      	strb	r2, [r3, #0]
    4148:	d1fa      	bne.n	4140 <mbedtls_platform_zeroize+0x8>
    414a:	4770      	bx	lr

0000414c <CC_LibInitNoRng>:
    414c:	b538      	push	{r3, r4, r5, lr}
    414e:	f000 f82f 	bl	41b0 <CC_HalInit>
    4152:	b120      	cbz	r0, 415e <CC_LibInitNoRng+0x12>
    4154:	2403      	movs	r4, #3
    4156:	f000 f863 	bl	4220 <CC_PalTerminate>
    415a:	4620      	mov	r0, r4
    415c:	bd38      	pop	{r3, r4, r5, pc}
    415e:	f000 f831 	bl	41c4 <CC_PalInit>
    4162:	b998      	cbnz	r0, 418c <CC_LibInitNoRng+0x40>
    4164:	f000 f8ac 	bl	42c0 <CC_PalPowerSaveModeSelect>
    4168:	b998      	cbnz	r0, 4192 <CC_LibInitNoRng+0x46>
    416a:	4d0f      	ldr	r5, [pc, #60]	; (41a8 <CC_LibInitNoRng+0x5c>)
    416c:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    4170:	0e1b      	lsrs	r3, r3, #24
    4172:	2bf0      	cmp	r3, #240	; 0xf0
    4174:	d108      	bne.n	4188 <CC_LibInitNoRng+0x3c>
    4176:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    417a:	4b0c      	ldr	r3, [pc, #48]	; (41ac <CC_LibInitNoRng+0x60>)
    417c:	429a      	cmp	r2, r3
    417e:	d00a      	beq.n	4196 <CC_LibInitNoRng+0x4a>
    4180:	2407      	movs	r4, #7
    4182:	f000 f817 	bl	41b4 <CC_HalTerminate>
    4186:	e7e6      	b.n	4156 <CC_LibInitNoRng+0xa>
    4188:	2406      	movs	r4, #6
    418a:	e7fa      	b.n	4182 <CC_LibInitNoRng+0x36>
    418c:	2404      	movs	r4, #4
    418e:	4620      	mov	r0, r4
    4190:	bd38      	pop	{r3, r4, r5, pc}
    4192:	2400      	movs	r4, #0
    4194:	e7f5      	b.n	4182 <CC_LibInitNoRng+0x36>
    4196:	2001      	movs	r0, #1
    4198:	f000 f892 	bl	42c0 <CC_PalPowerSaveModeSelect>
    419c:	4604      	mov	r4, r0
    419e:	2800      	cmp	r0, #0
    41a0:	d1f7      	bne.n	4192 <CC_LibInitNoRng+0x46>
    41a2:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    41a6:	e7d8      	b.n	415a <CC_LibInitNoRng+0xe>
    41a8:	50841000 	.word	0x50841000
    41ac:	20e00000 	.word	0x20e00000

000041b0 <CC_HalInit>:
    41b0:	2000      	movs	r0, #0
    41b2:	4770      	bx	lr

000041b4 <CC_HalTerminate>:
    41b4:	2000      	movs	r0, #0
    41b6:	4770      	bx	lr

000041b8 <CC_HalMaskInterrupt>:
    41b8:	4b01      	ldr	r3, [pc, #4]	; (41c0 <CC_HalMaskInterrupt+0x8>)
    41ba:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    41be:	4770      	bx	lr
    41c0:	50841000 	.word	0x50841000

000041c4 <CC_PalInit>:
    41c4:	b510      	push	{r4, lr}
    41c6:	4811      	ldr	r0, [pc, #68]	; (420c <CC_PalInit+0x48>)
    41c8:	f000 f848 	bl	425c <CC_PalMutexCreate>
    41cc:	b100      	cbz	r0, 41d0 <CC_PalInit+0xc>
    41ce:	bd10      	pop	{r4, pc}
    41d0:	480f      	ldr	r0, [pc, #60]	; (4210 <CC_PalInit+0x4c>)
    41d2:	f000 f843 	bl	425c <CC_PalMutexCreate>
    41d6:	2800      	cmp	r0, #0
    41d8:	d1f9      	bne.n	41ce <CC_PalInit+0xa>
    41da:	4c0e      	ldr	r4, [pc, #56]	; (4214 <CC_PalInit+0x50>)
    41dc:	4620      	mov	r0, r4
    41de:	f000 f83d 	bl	425c <CC_PalMutexCreate>
    41e2:	2800      	cmp	r0, #0
    41e4:	d1f3      	bne.n	41ce <CC_PalInit+0xa>
    41e6:	4b0c      	ldr	r3, [pc, #48]	; (4218 <CC_PalInit+0x54>)
    41e8:	480c      	ldr	r0, [pc, #48]	; (421c <CC_PalInit+0x58>)
    41ea:	601c      	str	r4, [r3, #0]
    41ec:	f000 f836 	bl	425c <CC_PalMutexCreate>
    41f0:	4601      	mov	r1, r0
    41f2:	2800      	cmp	r0, #0
    41f4:	d1eb      	bne.n	41ce <CC_PalInit+0xa>
    41f6:	f000 f82d 	bl	4254 <CC_PalDmaInit>
    41fa:	4604      	mov	r4, r0
    41fc:	b108      	cbz	r0, 4202 <CC_PalInit+0x3e>
    41fe:	4620      	mov	r0, r4
    4200:	bd10      	pop	{r4, pc}
    4202:	f000 f83f 	bl	4284 <CC_PalPowerSaveModeInit>
    4206:	4620      	mov	r0, r4
    4208:	e7fa      	b.n	4200 <CC_PalInit+0x3c>
    420a:	bf00      	nop
    420c:	2000c5b4 	.word	0x2000c5b4
    4210:	2000c5a8 	.word	0x2000c5a8
    4214:	2000c5b0 	.word	0x2000c5b0
    4218:	2000c5b8 	.word	0x2000c5b8
    421c:	2000c5ac 	.word	0x2000c5ac

00004220 <CC_PalTerminate>:
    4220:	b508      	push	{r3, lr}
    4222:	4808      	ldr	r0, [pc, #32]	; (4244 <CC_PalTerminate+0x24>)
    4224:	f000 f824 	bl	4270 <CC_PalMutexDestroy>
    4228:	4807      	ldr	r0, [pc, #28]	; (4248 <CC_PalTerminate+0x28>)
    422a:	f000 f821 	bl	4270 <CC_PalMutexDestroy>
    422e:	4807      	ldr	r0, [pc, #28]	; (424c <CC_PalTerminate+0x2c>)
    4230:	f000 f81e 	bl	4270 <CC_PalMutexDestroy>
    4234:	4806      	ldr	r0, [pc, #24]	; (4250 <CC_PalTerminate+0x30>)
    4236:	f000 f81b 	bl	4270 <CC_PalMutexDestroy>
    423a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    423e:	f000 b80b 	b.w	4258 <CC_PalDmaTerminate>
    4242:	bf00      	nop
    4244:	2000c5b4 	.word	0x2000c5b4
    4248:	2000c5a8 	.word	0x2000c5a8
    424c:	2000c5b0 	.word	0x2000c5b0
    4250:	2000c5ac 	.word	0x2000c5ac

00004254 <CC_PalDmaInit>:
    4254:	2000      	movs	r0, #0
    4256:	4770      	bx	lr

00004258 <CC_PalDmaTerminate>:
    4258:	4770      	bx	lr
    425a:	bf00      	nop

0000425c <CC_PalMutexCreate>:
    425c:	b508      	push	{r3, lr}
    425e:	4b03      	ldr	r3, [pc, #12]	; (426c <CC_PalMutexCreate+0x10>)
    4260:	6802      	ldr	r2, [r0, #0]
    4262:	681b      	ldr	r3, [r3, #0]
    4264:	6810      	ldr	r0, [r2, #0]
    4266:	4798      	blx	r3
    4268:	2000      	movs	r0, #0
    426a:	bd08      	pop	{r3, pc}
    426c:	2000c5c4 	.word	0x2000c5c4

00004270 <CC_PalMutexDestroy>:
    4270:	b508      	push	{r3, lr}
    4272:	4b03      	ldr	r3, [pc, #12]	; (4280 <CC_PalMutexDestroy+0x10>)
    4274:	6802      	ldr	r2, [r0, #0]
    4276:	685b      	ldr	r3, [r3, #4]
    4278:	6810      	ldr	r0, [r2, #0]
    427a:	4798      	blx	r3
    427c:	2000      	movs	r0, #0
    427e:	bd08      	pop	{r3, pc}
    4280:	2000c5c4 	.word	0x2000c5c4

00004284 <CC_PalPowerSaveModeInit>:
    4284:	b570      	push	{r4, r5, r6, lr}
    4286:	4c09      	ldr	r4, [pc, #36]	; (42ac <CC_PalPowerSaveModeInit+0x28>)
    4288:	4d09      	ldr	r5, [pc, #36]	; (42b0 <CC_PalPowerSaveModeInit+0x2c>)
    428a:	6920      	ldr	r0, [r4, #16]
    428c:	68ab      	ldr	r3, [r5, #8]
    428e:	4798      	blx	r3
    4290:	b118      	cbz	r0, 429a <CC_PalPowerSaveModeInit+0x16>
    4292:	4b08      	ldr	r3, [pc, #32]	; (42b4 <CC_PalPowerSaveModeInit+0x30>)
    4294:	4808      	ldr	r0, [pc, #32]	; (42b8 <CC_PalPowerSaveModeInit+0x34>)
    4296:	685b      	ldr	r3, [r3, #4]
    4298:	4798      	blx	r3
    429a:	2100      	movs	r1, #0
    429c:	4a07      	ldr	r2, [pc, #28]	; (42bc <CC_PalPowerSaveModeInit+0x38>)
    429e:	68eb      	ldr	r3, [r5, #12]
    42a0:	6011      	str	r1, [r2, #0]
    42a2:	6920      	ldr	r0, [r4, #16]
    42a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    42a8:	4718      	bx	r3
    42aa:	bf00      	nop
    42ac:	2000c5d4 	.word	0x2000c5d4
    42b0:	2000c5c4 	.word	0x2000c5c4
    42b4:	2000c5a0 	.word	0x2000c5a0
    42b8:	00006eb4 	.word	0x00006eb4
    42bc:	2000d3c4 	.word	0x2000d3c4

000042c0 <CC_PalPowerSaveModeSelect>:
    42c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42c2:	4d1a      	ldr	r5, [pc, #104]	; (432c <CC_PalPowerSaveModeSelect+0x6c>)
    42c4:	4e1a      	ldr	r6, [pc, #104]	; (4330 <CC_PalPowerSaveModeSelect+0x70>)
    42c6:	4604      	mov	r4, r0
    42c8:	68b2      	ldr	r2, [r6, #8]
    42ca:	6928      	ldr	r0, [r5, #16]
    42cc:	4790      	blx	r2
    42ce:	b9e8      	cbnz	r0, 430c <CC_PalPowerSaveModeSelect+0x4c>
    42d0:	4f18      	ldr	r7, [pc, #96]	; (4334 <CC_PalPowerSaveModeSelect+0x74>)
    42d2:	683b      	ldr	r3, [r7, #0]
    42d4:	b14c      	cbz	r4, 42ea <CC_PalPowerSaveModeSelect+0x2a>
    42d6:	b1a3      	cbz	r3, 4302 <CC_PalPowerSaveModeSelect+0x42>
    42d8:	2b01      	cmp	r3, #1
    42da:	d019      	beq.n	4310 <CC_PalPowerSaveModeSelect+0x50>
    42dc:	3b01      	subs	r3, #1
    42de:	603b      	str	r3, [r7, #0]
    42e0:	6928      	ldr	r0, [r5, #16]
    42e2:	68f3      	ldr	r3, [r6, #12]
    42e4:	4798      	blx	r3
    42e6:	2000      	movs	r0, #0
    42e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42ea:	b943      	cbnz	r3, 42fe <CC_PalPowerSaveModeSelect+0x3e>
    42ec:	2101      	movs	r1, #1
    42ee:	4a12      	ldr	r2, [pc, #72]	; (4338 <CC_PalPowerSaveModeSelect+0x78>)
    42f0:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    42f4:	4911      	ldr	r1, [pc, #68]	; (433c <CC_PalPowerSaveModeSelect+0x7c>)
    42f6:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    42fa:	2a00      	cmp	r2, #0
    42fc:	d1fb      	bne.n	42f6 <CC_PalPowerSaveModeSelect+0x36>
    42fe:	3301      	adds	r3, #1
    4300:	603b      	str	r3, [r7, #0]
    4302:	68f3      	ldr	r3, [r6, #12]
    4304:	6928      	ldr	r0, [r5, #16]
    4306:	4798      	blx	r3
    4308:	2000      	movs	r0, #0
    430a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    430c:	480c      	ldr	r0, [pc, #48]	; (4340 <CC_PalPowerSaveModeSelect+0x80>)
    430e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4310:	4a0a      	ldr	r2, [pc, #40]	; (433c <CC_PalPowerSaveModeSelect+0x7c>)
    4312:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    4316:	2b00      	cmp	r3, #0
    4318:	d1fb      	bne.n	4312 <CC_PalPowerSaveModeSelect+0x52>
    431a:	4a07      	ldr	r2, [pc, #28]	; (4338 <CC_PalPowerSaveModeSelect+0x78>)
    431c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    4320:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    4324:	f7ff ff48 	bl	41b8 <CC_HalMaskInterrupt>
    4328:	683b      	ldr	r3, [r7, #0]
    432a:	e7d7      	b.n	42dc <CC_PalPowerSaveModeSelect+0x1c>
    432c:	2000c5d4 	.word	0x2000c5d4
    4330:	2000c5c4 	.word	0x2000c5c4
    4334:	2000d3c4 	.word	0x2000d3c4
    4338:	50840000 	.word	0x50840000
    433c:	50841000 	.word	0x50841000
    4340:	ffff8fe9 	.word	0xffff8fe9

00004344 <mutex_free>:
    4344:	b510      	push	{r4, lr}
    4346:	4604      	mov	r4, r0
    4348:	b130      	cbz	r0, 4358 <mutex_free+0x14>
    434a:	6863      	ldr	r3, [r4, #4]
    434c:	06db      	lsls	r3, r3, #27
    434e:	d502      	bpl.n	4356 <mutex_free+0x12>
    4350:	2300      	movs	r3, #0
    4352:	6023      	str	r3, [r4, #0]
    4354:	6063      	str	r3, [r4, #4]
    4356:	bd10      	pop	{r4, pc}
    4358:	4b02      	ldr	r3, [pc, #8]	; (4364 <mutex_free+0x20>)
    435a:	4803      	ldr	r0, [pc, #12]	; (4368 <mutex_free+0x24>)
    435c:	685b      	ldr	r3, [r3, #4]
    435e:	4798      	blx	r3
    4360:	e7f3      	b.n	434a <mutex_free+0x6>
    4362:	bf00      	nop
    4364:	2000c5a0 	.word	0x2000c5a0
    4368:	00006ed4 	.word	0x00006ed4

0000436c <mutex_lock>:
    436c:	b1b0      	cbz	r0, 439c <mutex_lock+0x30>
    436e:	6843      	ldr	r3, [r0, #4]
    4370:	b193      	cbz	r3, 4398 <mutex_lock+0x2c>
    4372:	06db      	lsls	r3, r3, #27
    4374:	d50e      	bpl.n	4394 <mutex_lock+0x28>
    4376:	2301      	movs	r3, #1
    4378:	e850 2f00 	ldrex	r2, [r0]
    437c:	4619      	mov	r1, r3
    437e:	e840 1c00 	strex	ip, r1, [r0]
    4382:	f09c 0f00 	teq	ip, #0
    4386:	d1f7      	bne.n	4378 <mutex_lock+0xc>
    4388:	2a01      	cmp	r2, #1
    438a:	d0f5      	beq.n	4378 <mutex_lock+0xc>
    438c:	f3bf 8f5f 	dmb	sy
    4390:	2000      	movs	r0, #0
    4392:	4770      	bx	lr
    4394:	4803      	ldr	r0, [pc, #12]	; (43a4 <mutex_lock+0x38>)
    4396:	4770      	bx	lr
    4398:	4803      	ldr	r0, [pc, #12]	; (43a8 <mutex_lock+0x3c>)
    439a:	4770      	bx	lr
    439c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    43a0:	4770      	bx	lr
    43a2:	bf00      	nop
    43a4:	ffff8fe9 	.word	0xffff8fe9
    43a8:	ffff8fea 	.word	0xffff8fea

000043ac <mutex_unlock>:
    43ac:	4603      	mov	r3, r0
    43ae:	b168      	cbz	r0, 43cc <mutex_unlock+0x20>
    43b0:	6842      	ldr	r2, [r0, #4]
    43b2:	b13a      	cbz	r2, 43c4 <mutex_unlock+0x18>
    43b4:	06d2      	lsls	r2, r2, #27
    43b6:	d507      	bpl.n	43c8 <mutex_unlock+0x1c>
    43b8:	f3bf 8f5f 	dmb	sy
    43bc:	2200      	movs	r2, #0
    43be:	4610      	mov	r0, r2
    43c0:	601a      	str	r2, [r3, #0]
    43c2:	4770      	bx	lr
    43c4:	4803      	ldr	r0, [pc, #12]	; (43d4 <mutex_unlock+0x28>)
    43c6:	4770      	bx	lr
    43c8:	4803      	ldr	r0, [pc, #12]	; (43d8 <mutex_unlock+0x2c>)
    43ca:	4770      	bx	lr
    43cc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    43d0:	4770      	bx	lr
    43d2:	bf00      	nop
    43d4:	ffff8fea 	.word	0xffff8fea
    43d8:	ffff8fe9 	.word	0xffff8fe9

000043dc <mutex_init>:
    43dc:	b510      	push	{r4, lr}
    43de:	4604      	mov	r4, r0
    43e0:	b120      	cbz	r0, 43ec <mutex_init+0x10>
    43e2:	2200      	movs	r2, #0
    43e4:	2311      	movs	r3, #17
    43e6:	6022      	str	r2, [r4, #0]
    43e8:	6063      	str	r3, [r4, #4]
    43ea:	bd10      	pop	{r4, pc}
    43ec:	4801      	ldr	r0, [pc, #4]	; (43f4 <mutex_init+0x18>)
    43ee:	f7ff fe81 	bl	40f4 <CC_PalAbort>
    43f2:	e7f6      	b.n	43e2 <mutex_init+0x6>
    43f4:	00006efc 	.word	0x00006efc

000043f8 <verify_context_ecdsa_verify_secp256r1>:
    43f8:	b130      	cbz	r0, 4408 <verify_context_ecdsa_verify_secp256r1+0x10>
    43fa:	6802      	ldr	r2, [r0, #0]
    43fc:	4b03      	ldr	r3, [pc, #12]	; (440c <verify_context_ecdsa_verify_secp256r1+0x14>)
    43fe:	4804      	ldr	r0, [pc, #16]	; (4410 <verify_context_ecdsa_verify_secp256r1+0x18>)
    4400:	429a      	cmp	r2, r3
    4402:	bf08      	it	eq
    4404:	2000      	moveq	r0, #0
    4406:	4770      	bx	lr
    4408:	4802      	ldr	r0, [pc, #8]	; (4414 <verify_context_ecdsa_verify_secp256r1+0x1c>)
    440a:	4770      	bx	lr
    440c:	bbaa55dd 	.word	0xbbaa55dd
    4410:	00f00882 	.word	0x00f00882
    4414:	00f00871 	.word	0x00f00871

00004418 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>:
    4418:	b538      	push	{r3, r4, r5, lr}
    441a:	460d      	mov	r5, r1
    441c:	4604      	mov	r4, r0
    441e:	b1b0      	cbz	r0, 444e <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x36>
    4420:	22a0      	movs	r2, #160	; 0xa0
    4422:	2100      	movs	r1, #0
    4424:	3004      	adds	r0, #4
    4426:	f002 fa64 	bl	68f2 <SaSi_PalMemSet>
    442a:	b195      	cbz	r5, 4452 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x3a>
    442c:	2208      	movs	r2, #8
    442e:	4629      	mov	r1, r5
    4430:	f104 0064 	add.w	r0, r4, #100	; 0x64
    4434:	f002 fa63 	bl	68fe <CRYS_COMMON_ReverseMemcpy32>
    4438:	2208      	movs	r2, #8
    443a:	f105 0120 	add.w	r1, r5, #32
    443e:	f104 0084 	add.w	r0, r4, #132	; 0x84
    4442:	f002 fa5c 	bl	68fe <CRYS_COMMON_ReverseMemcpy32>
    4446:	2000      	movs	r0, #0
    4448:	4b03      	ldr	r3, [pc, #12]	; (4458 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x40>)
    444a:	6023      	str	r3, [r4, #0]
    444c:	bd38      	pop	{r3, r4, r5, pc}
    444e:	4803      	ldr	r0, [pc, #12]	; (445c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x44>)
    4450:	e7fc      	b.n	444c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    4452:	4803      	ldr	r0, [pc, #12]	; (4460 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x48>)
    4454:	e7fa      	b.n	444c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    4456:	bf00      	nop
    4458:	bbaa55dd 	.word	0xbbaa55dd
    445c:	00f00871 	.word	0x00f00871
    4460:	00f00883 	.word	0x00f00883

00004464 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>:
    4464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4468:	4605      	mov	r5, r0
    446a:	460e      	mov	r6, r1
    446c:	4699      	mov	r9, r3
    446e:	4611      	mov	r1, r2
    4470:	f7ff ffc2 	bl	43f8 <verify_context_ecdsa_verify_secp256r1>
    4474:	4604      	mov	r4, r0
    4476:	2800      	cmp	r0, #0
    4478:	f040 8084 	bne.w	4584 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    447c:	2e00      	cmp	r6, #0
    447e:	f000 8085 	beq.w	458c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x128>
    4482:	2900      	cmp	r1, #0
    4484:	f000 8084 	beq.w	4590 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x12c>
    4488:	f1b9 0f20 	cmp.w	r9, #32
    448c:	f040 8082 	bne.w	4594 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x130>
    4490:	f105 0444 	add.w	r4, r5, #68	; 0x44
    4494:	2208      	movs	r2, #8
    4496:	f105 0804 	add.w	r8, r5, #4
    449a:	4620      	mov	r0, r4
    449c:	f002 fa2f 	bl	68fe <CRYS_COMMON_ReverseMemcpy32>
    44a0:	f105 0724 	add.w	r7, r5, #36	; 0x24
    44a4:	2208      	movs	r2, #8
    44a6:	4631      	mov	r1, r6
    44a8:	4640      	mov	r0, r8
    44aa:	f002 fa28 	bl	68fe <CRYS_COMMON_ReverseMemcpy32>
    44ae:	f106 0120 	add.w	r1, r6, #32
    44b2:	2208      	movs	r2, #8
    44b4:	4638      	mov	r0, r7
    44b6:	f002 fa22 	bl	68fe <CRYS_COMMON_ReverseMemcpy32>
    44ba:	a902      	add	r1, sp, #8
    44bc:	f841 9d04 	str.w	r9, [r1, #-4]!
    44c0:	f44f 7080 	mov.w	r0, #256	; 0x100
    44c4:	f002 fa0f 	bl	68e6 <PkaInitAndMutexLock>
    44c8:	2800      	cmp	r0, #0
    44ca:	d165      	bne.n	4598 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x134>
    44cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    44d0:	4a32      	ldr	r2, [pc, #200]	; (459c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x138>)
    44d2:	2101      	movs	r1, #1
    44d4:	6013      	str	r3, [r2, #0]
    44d6:	6093      	str	r3, [r2, #8]
    44d8:	2308      	movs	r3, #8
    44da:	4a31      	ldr	r2, [pc, #196]	; (45a0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x13c>)
    44dc:	f000 fb34 	bl	4b48 <PkaCopyDataIntoPkaReg>
    44e0:	2101      	movs	r1, #1
    44e2:	2305      	movs	r3, #5
    44e4:	4608      	mov	r0, r1
    44e6:	4a2f      	ldr	r2, [pc, #188]	; (45a4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x140>)
    44e8:	f000 fb2e 	bl	4b48 <PkaCopyDataIntoPkaReg>
    44ec:	2308      	movs	r3, #8
    44ee:	4642      	mov	r2, r8
    44f0:	2101      	movs	r1, #1
    44f2:	201c      	movs	r0, #28
    44f4:	f000 fb28 	bl	4b48 <PkaCopyDataIntoPkaReg>
    44f8:	2308      	movs	r3, #8
    44fa:	463a      	mov	r2, r7
    44fc:	2101      	movs	r1, #1
    44fe:	2003      	movs	r0, #3
    4500:	f000 fb22 	bl	4b48 <PkaCopyDataIntoPkaReg>
    4504:	4622      	mov	r2, r4
    4506:	2308      	movs	r3, #8
    4508:	2101      	movs	r1, #1
    450a:	2002      	movs	r0, #2
    450c:	f000 fb1c 	bl	4b48 <PkaCopyDataIntoPkaReg>
    4510:	2308      	movs	r3, #8
    4512:	4a25      	ldr	r2, [pc, #148]	; (45a8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x144>)
    4514:	2101      	movs	r1, #1
    4516:	201a      	movs	r0, #26
    4518:	f000 fb16 	bl	4b48 <PkaCopyDataIntoPkaReg>
    451c:	2305      	movs	r3, #5
    451e:	4a23      	ldr	r2, [pc, #140]	; (45ac <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x148>)
    4520:	2101      	movs	r1, #1
    4522:	201b      	movs	r0, #27
    4524:	f000 fb10 	bl	4b48 <PkaCopyDataIntoPkaReg>
    4528:	2308      	movs	r3, #8
    452a:	4a21      	ldr	r2, [pc, #132]	; (45b0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x14c>)
    452c:	2101      	movs	r1, #1
    452e:	2014      	movs	r0, #20
    4530:	f000 fb0a 	bl	4b48 <PkaCopyDataIntoPkaReg>
    4534:	2308      	movs	r3, #8
    4536:	4a1f      	ldr	r2, [pc, #124]	; (45b4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x150>)
    4538:	2101      	movs	r1, #1
    453a:	2015      	movs	r0, #21
    453c:	f000 fb04 	bl	4b48 <PkaCopyDataIntoPkaReg>
    4540:	2308      	movs	r3, #8
    4542:	f105 0264 	add.w	r2, r5, #100	; 0x64
    4546:	2101      	movs	r1, #1
    4548:	2016      	movs	r0, #22
    454a:	f000 fafd 	bl	4b48 <PkaCopyDataIntoPkaReg>
    454e:	2308      	movs	r3, #8
    4550:	f105 0284 	add.w	r2, r5, #132	; 0x84
    4554:	2101      	movs	r1, #1
    4556:	2017      	movs	r0, #23
    4558:	f000 faf6 	bl	4b48 <PkaCopyDataIntoPkaReg>
    455c:	2308      	movs	r3, #8
    455e:	4a16      	ldr	r2, [pc, #88]	; (45b8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x154>)
    4560:	2101      	movs	r1, #1
    4562:	200b      	movs	r0, #11
    4564:	f000 faf0 	bl	4b48 <PkaCopyDataIntoPkaReg>
    4568:	f000 fb4a 	bl	4c00 <PkaEcdsaVerify>
    456c:	4604      	mov	r4, r0
    456e:	9801      	ldr	r0, [sp, #4]
    4570:	f000 fad8 	bl	4b24 <PkaFinishAndMutexUnlock>
    4574:	4b11      	ldr	r3, [pc, #68]	; (45bc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    4576:	2c00      	cmp	r4, #0
    4578:	bf18      	it	ne
    457a:	461c      	movne	r4, r3
    457c:	21a4      	movs	r1, #164	; 0xa4
    457e:	4628      	mov	r0, r5
    4580:	f002 f9b9 	bl	68f6 <SaSi_PalMemSetZero>
    4584:	4620      	mov	r0, r4
    4586:	b003      	add	sp, #12
    4588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    458c:	4c0c      	ldr	r4, [pc, #48]	; (45c0 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x15c>)
    458e:	e7f9      	b.n	4584 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4590:	4c0c      	ldr	r4, [pc, #48]	; (45c4 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x160>)
    4592:	e7f7      	b.n	4584 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4594:	4c0c      	ldr	r4, [pc, #48]	; (45c8 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x164>)
    4596:	e7f5      	b.n	4584 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    4598:	4c08      	ldr	r4, [pc, #32]	; (45bc <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    459a:	e7ef      	b.n	457c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x118>
    459c:	50841090 	.word	0x50841090
    45a0:	00006f60 	.word	0x00006f60
    45a4:	00006fd8 	.word	0x00006fd8
    45a8:	00006f20 	.word	0x00006f20
    45ac:	00006fc4 	.word	0x00006fc4
    45b0:	00006f84 	.word	0x00006f84
    45b4:	00006fa4 	.word	0x00006fa4
    45b8:	00006f40 	.word	0x00006f40
    45bc:	00f00884 	.word	0x00f00884
    45c0:	00f00876 	.word	0x00f00876
    45c4:	00f00880 	.word	0x00f00880
    45c8:	00f00881 	.word	0x00f00881

000045cc <set_digest_in_hw_sha256>:
    45cc:	69c2      	ldr	r2, [r0, #28]
    45ce:	4b0c      	ldr	r3, [pc, #48]	; (4600 <set_digest_in_hw_sha256+0x34>)
    45d0:	601a      	str	r2, [r3, #0]
    45d2:	6982      	ldr	r2, [r0, #24]
    45d4:	f843 2c04 	str.w	r2, [r3, #-4]
    45d8:	6942      	ldr	r2, [r0, #20]
    45da:	f843 2c08 	str.w	r2, [r3, #-8]
    45de:	6902      	ldr	r2, [r0, #16]
    45e0:	f843 2c0c 	str.w	r2, [r3, #-12]
    45e4:	68c2      	ldr	r2, [r0, #12]
    45e6:	f843 2c10 	str.w	r2, [r3, #-16]
    45ea:	6882      	ldr	r2, [r0, #8]
    45ec:	f843 2c14 	str.w	r2, [r3, #-20]
    45f0:	6842      	ldr	r2, [r0, #4]
    45f2:	f843 2c18 	str.w	r2, [r3, #-24]
    45f6:	6802      	ldr	r2, [r0, #0]
    45f8:	f843 2c1c 	str.w	r2, [r3, #-28]
    45fc:	4770      	bx	lr
    45fe:	bf00      	nop
    4600:	5084165c 	.word	0x5084165c

00004604 <read_digest_in_hw_sha256>:
    4604:	4b0c      	ldr	r3, [pc, #48]	; (4638 <read_digest_in_hw_sha256+0x34>)
    4606:	681b      	ldr	r3, [r3, #0]
    4608:	61c3      	str	r3, [r0, #28]
    460a:	4b0c      	ldr	r3, [pc, #48]	; (463c <read_digest_in_hw_sha256+0x38>)
    460c:	681b      	ldr	r3, [r3, #0]
    460e:	6183      	str	r3, [r0, #24]
    4610:	4b0b      	ldr	r3, [pc, #44]	; (4640 <read_digest_in_hw_sha256+0x3c>)
    4612:	681b      	ldr	r3, [r3, #0]
    4614:	6143      	str	r3, [r0, #20]
    4616:	4b0b      	ldr	r3, [pc, #44]	; (4644 <read_digest_in_hw_sha256+0x40>)
    4618:	681b      	ldr	r3, [r3, #0]
    461a:	6103      	str	r3, [r0, #16]
    461c:	4b0a      	ldr	r3, [pc, #40]	; (4648 <read_digest_in_hw_sha256+0x44>)
    461e:	681b      	ldr	r3, [r3, #0]
    4620:	60c3      	str	r3, [r0, #12]
    4622:	4b0a      	ldr	r3, [pc, #40]	; (464c <read_digest_in_hw_sha256+0x48>)
    4624:	681b      	ldr	r3, [r3, #0]
    4626:	6083      	str	r3, [r0, #8]
    4628:	4b09      	ldr	r3, [pc, #36]	; (4650 <read_digest_in_hw_sha256+0x4c>)
    462a:	681b      	ldr	r3, [r3, #0]
    462c:	6043      	str	r3, [r0, #4]
    462e:	4b09      	ldr	r3, [pc, #36]	; (4654 <read_digest_in_hw_sha256+0x50>)
    4630:	681b      	ldr	r3, [r3, #0]
    4632:	6003      	str	r3, [r0, #0]
    4634:	4770      	bx	lr
    4636:	bf00      	nop
    4638:	5084165c 	.word	0x5084165c
    463c:	50841658 	.word	0x50841658
    4640:	50841654 	.word	0x50841654
    4644:	50841650 	.word	0x50841650
    4648:	5084164c 	.word	0x5084164c
    464c:	50841648 	.word	0x50841648
    4650:	50841644 	.word	0x50841644
    4654:	50841640 	.word	0x50841640

00004658 <verify_context_hash_sha256>:
    4658:	b130      	cbz	r0, 4668 <verify_context_hash_sha256+0x10>
    465a:	6802      	ldr	r2, [r0, #0]
    465c:	4b03      	ldr	r3, [pc, #12]	; (466c <verify_context_hash_sha256+0x14>)
    465e:	4804      	ldr	r0, [pc, #16]	; (4670 <verify_context_hash_sha256+0x18>)
    4660:	429a      	cmp	r2, r3
    4662:	bf08      	it	eq
    4664:	2000      	moveq	r0, #0
    4666:	4770      	bx	lr
    4668:	4802      	ldr	r0, [pc, #8]	; (4674 <verify_context_hash_sha256+0x1c>)
    466a:	4770      	bx	lr
    466c:	bbaa55dd 	.word	0xbbaa55dd
    4670:	00f00202 	.word	0x00f00202
    4674:	00f00200 	.word	0x00f00200

00004678 <nrf_cc310_bl_hash_sha256_init>:
    4678:	b538      	push	{r3, r4, r5, lr}
    467a:	4604      	mov	r4, r0
    467c:	b168      	cbz	r0, 469a <nrf_cc310_bl_hash_sha256_init+0x22>
    467e:	1d05      	adds	r5, r0, #4
    4680:	2170      	movs	r1, #112	; 0x70
    4682:	4628      	mov	r0, r5
    4684:	f002 f937 	bl	68f6 <SaSi_PalMemSetZero>
    4688:	4628      	mov	r0, r5
    468a:	2220      	movs	r2, #32
    468c:	4904      	ldr	r1, [pc, #16]	; (46a0 <nrf_cc310_bl_hash_sha256_init+0x28>)
    468e:	f002 f92e 	bl	68ee <SaSi_PalMemCopy>
    4692:	2000      	movs	r0, #0
    4694:	4b03      	ldr	r3, [pc, #12]	; (46a4 <nrf_cc310_bl_hash_sha256_init+0x2c>)
    4696:	6023      	str	r3, [r4, #0]
    4698:	bd38      	pop	{r3, r4, r5, pc}
    469a:	4803      	ldr	r0, [pc, #12]	; (46a8 <nrf_cc310_bl_hash_sha256_init+0x30>)
    469c:	e7fc      	b.n	4698 <nrf_cc310_bl_hash_sha256_init+0x20>
    469e:	bf00      	nop
    46a0:	00006fec 	.word	0x00006fec
    46a4:	bbaa55dd 	.word	0xbbaa55dd
    46a8:	00f00200 	.word	0x00f00200

000046ac <nrf_cc310_bl_hash_sha256_update>:
    46ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    46b0:	b085      	sub	sp, #20
    46b2:	4615      	mov	r5, r2
    46b4:	466f      	mov	r7, sp
    46b6:	4b27      	ldr	r3, [pc, #156]	; (4754 <nrf_cc310_bl_hash_sha256_update+0xa8>)
    46b8:	4604      	mov	r4, r0
    46ba:	460e      	mov	r6, r1
    46bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    46be:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    46c2:	b92d      	cbnz	r5, 46d0 <nrf_cc310_bl_hash_sha256_update+0x24>
    46c4:	f04f 0900 	mov.w	r9, #0
    46c8:	4648      	mov	r0, r9
    46ca:	b005      	add	sp, #20
    46cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    46d0:	4620      	mov	r0, r4
    46d2:	f7ff ffc1 	bl	4658 <verify_context_hash_sha256>
    46d6:	4681      	mov	r9, r0
    46d8:	2800      	cmp	r0, #0
    46da:	d1f5      	bne.n	46c8 <nrf_cc310_bl_hash_sha256_update+0x1c>
    46dc:	1d23      	adds	r3, r4, #4
    46de:	9301      	str	r3, [sp, #4]
    46e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    46e2:	bba3      	cbnz	r3, 474e <nrf_cc310_bl_hash_sha256_update+0xa2>
    46e4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    46e6:	b18b      	cbz	r3, 470c <nrf_cc310_bl_hash_sha256_update+0x60>
    46e8:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
    46ec:	45a8      	cmp	r8, r5
    46ee:	bf28      	it	cs
    46f0:	46a8      	movcs	r8, r5
    46f2:	f104 0030 	add.w	r0, r4, #48	; 0x30
    46f6:	4631      	mov	r1, r6
    46f8:	4418      	add	r0, r3
    46fa:	4642      	mov	r2, r8
    46fc:	f002 f8f7 	bl	68ee <SaSi_PalMemCopy>
    4700:	6f23      	ldr	r3, [r4, #112]	; 0x70
    4702:	4446      	add	r6, r8
    4704:	4443      	add	r3, r8
    4706:	6723      	str	r3, [r4, #112]	; 0x70
    4708:	eba5 0508 	sub.w	r5, r5, r8
    470c:	6f22      	ldr	r2, [r4, #112]	; 0x70
    470e:	2a40      	cmp	r2, #64	; 0x40
    4710:	d106      	bne.n	4720 <nrf_cc310_bl_hash_sha256_update+0x74>
    4712:	f104 0130 	add.w	r1, r4, #48	; 0x30
    4716:	4638      	mov	r0, r7
    4718:	f000 fbb4 	bl	4e84 <nrf_cc310_bl_hash_update_internal>
    471c:	2300      	movs	r3, #0
    471e:	6723      	str	r3, [r4, #112]	; 0x70
    4720:	f005 083f 	and.w	r8, r5, #63	; 0x3f
    4724:	f035 053f 	bics.w	r5, r5, #63	; 0x3f
    4728:	d005      	beq.n	4736 <nrf_cc310_bl_hash_sha256_update+0x8a>
    472a:	4631      	mov	r1, r6
    472c:	462a      	mov	r2, r5
    472e:	4638      	mov	r0, r7
    4730:	f000 fba8 	bl	4e84 <nrf_cc310_bl_hash_update_internal>
    4734:	442e      	add	r6, r5
    4736:	f1b8 0f00 	cmp.w	r8, #0
    473a:	d0c3      	beq.n	46c4 <nrf_cc310_bl_hash_sha256_update+0x18>
    473c:	4642      	mov	r2, r8
    473e:	4631      	mov	r1, r6
    4740:	f104 0030 	add.w	r0, r4, #48	; 0x30
    4744:	f002 f8d3 	bl	68ee <SaSi_PalMemCopy>
    4748:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
    474c:	e7bc      	b.n	46c8 <nrf_cc310_bl_hash_sha256_update+0x1c>
    474e:	f8df 9008 	ldr.w	r9, [pc, #8]	; 4758 <nrf_cc310_bl_hash_sha256_update+0xac>
    4752:	e7b9      	b.n	46c8 <nrf_cc310_bl_hash_sha256_update+0x1c>
    4754:	00006c50 	.word	0x00006c50
    4758:	00f0020c 	.word	0x00f0020c

0000475c <nrf_cc310_bl_hash_sha256_finalize>:
    475c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4760:	4604      	mov	r4, r0
    4762:	466f      	mov	r7, sp
    4764:	4b13      	ldr	r3, [pc, #76]	; (47b4 <nrf_cc310_bl_hash_sha256_finalize+0x58>)
    4766:	460e      	mov	r6, r1
    4768:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    476a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    476e:	4620      	mov	r0, r4
    4770:	f7ff ff72 	bl	4658 <verify_context_hash_sha256>
    4774:	4680      	mov	r8, r0
    4776:	b9b0      	cbnz	r0, 47a6 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    4778:	b1ce      	cbz	r6, 47ae <nrf_cc310_bl_hash_sha256_finalize+0x52>
    477a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    477c:	1d25      	adds	r5, r4, #4
    477e:	9501      	str	r5, [sp, #4]
    4780:	b93b      	cbnz	r3, 4792 <nrf_cc310_bl_hash_sha256_finalize+0x36>
    4782:	2301      	movs	r3, #1
    4784:	6f22      	ldr	r2, [r4, #112]	; 0x70
    4786:	6263      	str	r3, [r4, #36]	; 0x24
    4788:	f104 0130 	add.w	r1, r4, #48	; 0x30
    478c:	4638      	mov	r0, r7
    478e:	f000 fb79 	bl	4e84 <nrf_cc310_bl_hash_update_internal>
    4792:	462b      	mov	r3, r5
    4794:	3e04      	subs	r6, #4
    4796:	3424      	adds	r4, #36	; 0x24
    4798:	f853 2b04 	ldr.w	r2, [r3], #4
    479c:	ba12      	rev	r2, r2
    479e:	42a3      	cmp	r3, r4
    47a0:	f846 2f04 	str.w	r2, [r6, #4]!
    47a4:	d1f8      	bne.n	4798 <nrf_cc310_bl_hash_sha256_finalize+0x3c>
    47a6:	4640      	mov	r0, r8
    47a8:	b004      	add	sp, #16
    47aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47ae:	f8df 8008 	ldr.w	r8, [pc, #8]	; 47b8 <nrf_cc310_bl_hash_sha256_finalize+0x5c>
    47b2:	e7f8      	b.n	47a6 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    47b4:	00006c50 	.word	0x00006c50
    47b8:	00f00205 	.word	0x00f00205

000047bc <nrf_cc310_bl_init>:
    47bc:	4b08      	ldr	r3, [pc, #32]	; (47e0 <nrf_cc310_bl_init+0x24>)
    47be:	681b      	ldr	r3, [r3, #0]
    47c0:	0e1b      	lsrs	r3, r3, #24
    47c2:	2bf0      	cmp	r3, #240	; 0xf0
    47c4:	d108      	bne.n	47d8 <nrf_cc310_bl_init+0x1c>
    47c6:	4b07      	ldr	r3, [pc, #28]	; (47e4 <nrf_cc310_bl_init+0x28>)
    47c8:	681a      	ldr	r2, [r3, #0]
    47ca:	4b07      	ldr	r3, [pc, #28]	; (47e8 <nrf_cc310_bl_init+0x2c>)
    47cc:	429a      	cmp	r2, r3
    47ce:	d105      	bne.n	47dc <nrf_cc310_bl_init+0x20>
    47d0:	2000      	movs	r0, #0
    47d2:	4b06      	ldr	r3, [pc, #24]	; (47ec <nrf_cc310_bl_init+0x30>)
    47d4:	6018      	str	r0, [r3, #0]
    47d6:	4770      	bx	lr
    47d8:	2005      	movs	r0, #5
    47da:	4770      	bx	lr
    47dc:	2006      	movs	r0, #6
    47de:	4770      	bx	lr
    47e0:	50841928 	.word	0x50841928
    47e4:	50841a24 	.word	0x50841a24
    47e8:	20e00000 	.word	0x20e00000
    47ec:	50841a0c 	.word	0x50841a0c

000047f0 <PkaSetRegsMapTab>:
    47f0:	2200      	movs	r2, #0
    47f2:	b530      	push	{r4, r5, lr}
    47f4:	4613      	mov	r3, r2
    47f6:	f640 75fc 	movw	r5, #4092	; 0xffc
    47fa:	0049      	lsls	r1, r1, #1
    47fc:	3802      	subs	r0, #2
    47fe:	f102 54a1 	add.w	r4, r2, #337641472	; 0x14200000
    4802:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
    4806:	4290      	cmp	r0, r2
    4808:	ea4f 0484 	mov.w	r4, r4, lsl #2
    480c:	f102 0201 	add.w	r2, r2, #1
    4810:	bfca      	itet	gt
    4812:	6023      	strgt	r3, [r4, #0]
    4814:	6025      	strle	r5, [r4, #0]
    4816:	185b      	addgt	r3, r3, r1
    4818:	2a1e      	cmp	r2, #30
    481a:	d1f0      	bne.n	47fe <PkaSetRegsMapTab+0xe>
    481c:	4a03      	ldr	r2, [pc, #12]	; (482c <PkaSetRegsMapTab+0x3c>)
    481e:	6013      	str	r3, [r2, #0]
    4820:	440b      	add	r3, r1
    4822:	6053      	str	r3, [r2, #4]
    4824:	4b02      	ldr	r3, [pc, #8]	; (4830 <PkaSetRegsMapTab+0x40>)
    4826:	4a03      	ldr	r2, [pc, #12]	; (4834 <PkaSetRegsMapTab+0x44>)
    4828:	601a      	str	r2, [r3, #0]
    482a:	bd30      	pop	{r4, r5, pc}
    482c:	50841078 	.word	0x50841078
    4830:	50841084 	.word	0x50841084
    4834:	000ff820 	.word	0x000ff820

00004838 <PkaGetRegEffectiveSizeInBits>:
    4838:	4b1e      	ldr	r3, [pc, #120]	; (48b4 <PkaGetRegEffectiveSizeInBits+0x7c>)
    483a:	b530      	push	{r4, r5, lr}
    483c:	461a      	mov	r2, r3
    483e:	b085      	sub	sp, #20
    4840:	6819      	ldr	r1, [r3, #0]
    4842:	9100      	str	r1, [sp, #0]
    4844:	9900      	ldr	r1, [sp, #0]
    4846:	07cc      	lsls	r4, r1, #31
    4848:	d5fa      	bpl.n	4840 <PkaGetRegEffectiveSizeInBits+0x8>
    484a:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    484e:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4852:	0080      	lsls	r0, r0, #2
    4854:	6801      	ldr	r1, [r0, #0]
    4856:	6813      	ldr	r3, [r2, #0]
    4858:	9301      	str	r3, [sp, #4]
    485a:	9b01      	ldr	r3, [sp, #4]
    485c:	07d8      	lsls	r0, r3, #31
    485e:	d5fa      	bpl.n	4856 <PkaGetRegEffectiveSizeInBits+0x1e>
    4860:	4b15      	ldr	r3, [pc, #84]	; (48b8 <PkaGetRegEffectiveSizeInBits+0x80>)
    4862:	4c16      	ldr	r4, [pc, #88]	; (48bc <PkaGetRegEffectiveSizeInBits+0x84>)
    4864:	6818      	ldr	r0, [r3, #0]
    4866:	2320      	movs	r3, #32
    4868:	301f      	adds	r0, #31
    486a:	fb90 f0f3 	sdiv	r0, r0, r3
    486e:	4d14      	ldr	r5, [pc, #80]	; (48c0 <PkaGetRegEffectiveSizeInBits+0x88>)
    4870:	3801      	subs	r0, #1
    4872:	2800      	cmp	r0, #0
    4874:	da10      	bge.n	4898 <PkaGetRegEffectiveSizeInBits+0x60>
    4876:	2300      	movs	r3, #0
    4878:	3001      	adds	r0, #1
    487a:	0140      	lsls	r0, r0, #5
    487c:	b153      	cbz	r3, 4894 <PkaGetRegEffectiveSizeInBits+0x5c>
    487e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4882:	f1a0 0120 	sub.w	r1, r0, #32
    4886:	4213      	tst	r3, r2
    4888:	d104      	bne.n	4894 <PkaGetRegEffectiveSizeInBits+0x5c>
    488a:	3801      	subs	r0, #1
    488c:	4288      	cmp	r0, r1
    488e:	ea4f 0252 	mov.w	r2, r2, lsr #1
    4892:	d1f8      	bne.n	4886 <PkaGetRegEffectiveSizeInBits+0x4e>
    4894:	b005      	add	sp, #20
    4896:	bd30      	pop	{r4, r5, pc}
    4898:	6813      	ldr	r3, [r2, #0]
    489a:	9303      	str	r3, [sp, #12]
    489c:	9b03      	ldr	r3, [sp, #12]
    489e:	07db      	lsls	r3, r3, #31
    48a0:	d5fa      	bpl.n	4898 <PkaGetRegEffectiveSizeInBits+0x60>
    48a2:	1843      	adds	r3, r0, r1
    48a4:	6023      	str	r3, [r4, #0]
    48a6:	682b      	ldr	r3, [r5, #0]
    48a8:	9302      	str	r3, [sp, #8]
    48aa:	9b02      	ldr	r3, [sp, #8]
    48ac:	2b00      	cmp	r3, #0
    48ae:	d1e3      	bne.n	4878 <PkaGetRegEffectiveSizeInBits+0x40>
    48b0:	3801      	subs	r0, #1
    48b2:	e7de      	b.n	4872 <PkaGetRegEffectiveSizeInBits+0x3a>
    48b4:	508410b4 	.word	0x508410b4
    48b8:	508410ac 	.word	0x508410ac
    48bc:	508410e4 	.word	0x508410e4
    48c0:	508410dc 	.word	0x508410dc

000048c4 <PkaGetNextMsBit>:
    48c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    48c6:	681d      	ldr	r5, [r3, #0]
    48c8:	b085      	sub	sp, #20
    48ca:	f001 041f 	and.w	r4, r1, #31
    48ce:	b90d      	cbnz	r5, 48d4 <PkaGetNextMsBit+0x10>
    48d0:	2c1f      	cmp	r4, #31
    48d2:	d128      	bne.n	4926 <PkaGetNextMsBit+0x62>
    48d4:	4d17      	ldr	r5, [pc, #92]	; (4934 <PkaGetNextMsBit+0x70>)
    48d6:	462e      	mov	r6, r5
    48d8:	682f      	ldr	r7, [r5, #0]
    48da:	9701      	str	r7, [sp, #4]
    48dc:	9f01      	ldr	r7, [sp, #4]
    48de:	07ff      	lsls	r7, r7, #31
    48e0:	d5fa      	bpl.n	48d8 <PkaGetNextMsBit+0x14>
    48e2:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    48e6:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    48ea:	0080      	lsls	r0, r0, #2
    48ec:	6800      	ldr	r0, [r0, #0]
    48ee:	6835      	ldr	r5, [r6, #0]
    48f0:	9503      	str	r5, [sp, #12]
    48f2:	9d03      	ldr	r5, [sp, #12]
    48f4:	07ed      	lsls	r5, r5, #31
    48f6:	d5fa      	bpl.n	48ee <PkaGetNextMsBit+0x2a>
    48f8:	2c1f      	cmp	r4, #31
    48fa:	eb00 1061 	add.w	r0, r0, r1, asr #5
    48fe:	bf18      	it	ne
    4900:	43c9      	mvnne	r1, r1
    4902:	4d0d      	ldr	r5, [pc, #52]	; (4938 <PkaGetNextMsBit+0x74>)
    4904:	bf18      	it	ne
    4906:	f001 011f 	andne.w	r1, r1, #31
    490a:	6028      	str	r0, [r5, #0]
    490c:	480b      	ldr	r0, [pc, #44]	; (493c <PkaGetNextMsBit+0x78>)
    490e:	6800      	ldr	r0, [r0, #0]
    4910:	9002      	str	r0, [sp, #8]
    4912:	9802      	ldr	r0, [sp, #8]
    4914:	bf1c      	itt	ne
    4916:	fa00 f101 	lslne.w	r1, r0, r1
    491a:	6011      	strne	r1, [r2, #0]
    491c:	f04f 0100 	mov.w	r1, #0
    4920:	bf08      	it	eq
    4922:	6010      	streq	r0, [r2, #0]
    4924:	6019      	str	r1, [r3, #0]
    4926:	6810      	ldr	r0, [r2, #0]
    4928:	0043      	lsls	r3, r0, #1
    492a:	0fc0      	lsrs	r0, r0, #31
    492c:	6013      	str	r3, [r2, #0]
    492e:	b005      	add	sp, #20
    4930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4932:	bf00      	nop
    4934:	508410b4 	.word	0x508410b4
    4938:	508410e4 	.word	0x508410e4
    493c:	508410dc 	.word	0x508410dc

00004940 <PkaSetRegsSizesTab>:
    4940:	4b0c      	ldr	r3, [pc, #48]	; (4974 <PkaSetRegsSizesTab+0x34>)
    4942:	0189      	lsls	r1, r1, #6
    4944:	6018      	str	r0, [r3, #0]
    4946:	303f      	adds	r0, #63	; 0x3f
    4948:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    494c:	3040      	adds	r0, #64	; 0x40
    494e:	6058      	str	r0, [r3, #4]
    4950:	6099      	str	r1, [r3, #8]
    4952:	4809      	ldr	r0, [pc, #36]	; (4978 <PkaSetRegsSizesTab+0x38>)
    4954:	60d9      	str	r1, [r3, #12]
    4956:	6119      	str	r1, [r3, #16]
    4958:	6159      	str	r1, [r3, #20]
    495a:	6199      	str	r1, [r3, #24]
    495c:	331c      	adds	r3, #28
    495e:	b082      	sub	sp, #8
    4960:	6019      	str	r1, [r3, #0]
    4962:	6802      	ldr	r2, [r0, #0]
    4964:	9201      	str	r2, [sp, #4]
    4966:	9a01      	ldr	r2, [sp, #4]
    4968:	07d2      	lsls	r2, r2, #31
    496a:	d5fa      	bpl.n	4962 <PkaSetRegsSizesTab+0x22>
    496c:	6019      	str	r1, [r3, #0]
    496e:	b002      	add	sp, #8
    4970:	4770      	bx	lr
    4972:	bf00      	nop
    4974:	50841090 	.word	0x50841090
    4978:	508410b4 	.word	0x508410b4

0000497c <PkaInitPka>:
    497c:	b538      	push	{r3, r4, r5, lr}
    497e:	f1a0 0320 	sub.w	r3, r0, #32
    4982:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
    4986:	4605      	mov	r5, r0
    4988:	d82c      	bhi.n	49e4 <PkaInitPka+0x68>
    498a:	288f      	cmp	r0, #143	; 0x8f
    498c:	d826      	bhi.n	49dc <PkaInitPka+0x60>
    498e:	f100 0347 	add.w	r3, r0, #71	; 0x47
    4992:	f100 0466 	add.w	r4, r0, #102	; 0x66
    4996:	06db      	lsls	r3, r3, #27
    4998:	ea4f 1454 	mov.w	r4, r4, lsr #5
    499c:	d000      	beq.n	49a0 <PkaInitPka+0x24>
    499e:	3401      	adds	r4, #1
    49a0:	0164      	lsls	r4, r4, #5
    49a2:	343f      	adds	r4, #63	; 0x3f
    49a4:	09a4      	lsrs	r4, r4, #6
    49a6:	3401      	adds	r4, #1
    49a8:	b111      	cbz	r1, 49b0 <PkaInitPka+0x34>
    49aa:	42a1      	cmp	r1, r4
    49ac:	d31a      	bcc.n	49e4 <PkaInitPka+0x68>
    49ae:	460c      	mov	r4, r1
    49b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    49b4:	00e3      	lsls	r3, r4, #3
    49b6:	fbb0 f0f3 	udiv	r0, r0, r3
    49ba:	2820      	cmp	r0, #32
    49bc:	bf28      	it	cs
    49be:	2020      	movcs	r0, #32
    49c0:	b102      	cbz	r2, 49c4 <PkaInitPka+0x48>
    49c2:	6010      	str	r0, [r2, #0]
    49c4:	2201      	movs	r2, #1
    49c6:	4b08      	ldr	r3, [pc, #32]	; (49e8 <PkaInitPka+0x6c>)
    49c8:	4621      	mov	r1, r4
    49ca:	601a      	str	r2, [r3, #0]
    49cc:	f7ff ff10 	bl	47f0 <PkaSetRegsMapTab>
    49d0:	4628      	mov	r0, r5
    49d2:	4621      	mov	r1, r4
    49d4:	f7ff ffb4 	bl	4940 <PkaSetRegsSizesTab>
    49d8:	2000      	movs	r0, #0
    49da:	bd38      	pop	{r3, r4, r5, pc}
    49dc:	f100 041f 	add.w	r4, r0, #31
    49e0:	0964      	lsrs	r4, r4, #5
    49e2:	e7dd      	b.n	49a0 <PkaInitPka+0x24>
    49e4:	4801      	ldr	r0, [pc, #4]	; (49ec <PkaInitPka+0x70>)
    49e6:	e7f8      	b.n	49da <PkaInitPka+0x5e>
    49e8:	5084181c 	.word	0x5084181c
    49ec:	00f02122 	.word	0x00f02122

000049f0 <PkaClearBlockOfRegs>:
    49f0:	4b46      	ldr	r3, [pc, #280]	; (4b0c <PkaClearBlockOfRegs+0x11c>)
    49f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    49f4:	461d      	mov	r5, r3
    49f6:	b089      	sub	sp, #36	; 0x24
    49f8:	681c      	ldr	r4, [r3, #0]
    49fa:	9401      	str	r4, [sp, #4]
    49fc:	9c01      	ldr	r4, [sp, #4]
    49fe:	07e4      	lsls	r4, r4, #31
    4a00:	d5fa      	bpl.n	49f8 <PkaClearBlockOfRegs+0x8>
    4a02:	4b43      	ldr	r3, [pc, #268]	; (4b10 <PkaClearBlockOfRegs+0x120>)
    4a04:	2400      	movs	r4, #0
    4a06:	4413      	add	r3, r2
    4a08:	009b      	lsls	r3, r3, #2
    4a0a:	681a      	ldr	r2, [r3, #0]
    4a0c:	180b      	adds	r3, r1, r0
    4a0e:	2b1e      	cmp	r3, #30
    4a10:	bf88      	it	hi
    4a12:	f1c0 011e 	rsbhi	r1, r0, #30
    4a16:	321f      	adds	r2, #31
    4a18:	180b      	adds	r3, r1, r0
    4a1a:	0952      	lsrs	r2, r2, #5
    4a1c:	4353      	muls	r3, r2
    4a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4a22:	bf84      	itt	hi
    4a24:	f44f 6180 	movhi.w	r1, #1024	; 0x400
    4a28:	fbb1 f1f2 	udivhi	r1, r1, r2
    4a2c:	4627      	mov	r7, r4
    4a2e:	bf88      	it	hi
    4a30:	1a09      	subhi	r1, r1, r0
    4a32:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 4b18 <PkaClearBlockOfRegs+0x128>
    4a36:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4a3a:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 4b1c <PkaClearBlockOfRegs+0x12c>
    4a3e:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4a42:	42a1      	cmp	r1, r4
    4a44:	dc33      	bgt.n	4aae <PkaClearBlockOfRegs+0xbe>
    4a46:	682b      	ldr	r3, [r5, #0]
    4a48:	9304      	str	r3, [sp, #16]
    4a4a:	9b04      	ldr	r3, [sp, #16]
    4a4c:	07db      	lsls	r3, r3, #31
    4a4e:	d5fa      	bpl.n	4a46 <PkaClearBlockOfRegs+0x56>
    4a50:	4b30      	ldr	r3, [pc, #192]	; (4b14 <PkaClearBlockOfRegs+0x124>)
    4a52:	681b      	ldr	r3, [r3, #0]
    4a54:	6829      	ldr	r1, [r5, #0]
    4a56:	9105      	str	r1, [sp, #20]
    4a58:	9905      	ldr	r1, [sp, #20]
    4a5a:	07cf      	lsls	r7, r1, #31
    4a5c:	d5fa      	bpl.n	4a54 <PkaClearBlockOfRegs+0x64>
    4a5e:	4c2e      	ldr	r4, [pc, #184]	; (4b18 <PkaClearBlockOfRegs+0x128>)
    4a60:	492e      	ldr	r1, [pc, #184]	; (4b1c <PkaClearBlockOfRegs+0x12c>)
    4a62:	6023      	str	r3, [r4, #0]
    4a64:	2300      	movs	r3, #0
    4a66:	461e      	mov	r6, r3
    4a68:	4293      	cmp	r3, r2
    4a6a:	f103 0001 	add.w	r0, r3, #1
    4a6e:	d140      	bne.n	4af2 <PkaClearBlockOfRegs+0x102>
    4a70:	4619      	mov	r1, r3
    4a72:	2600      	movs	r6, #0
    4a74:	f020 0201 	bic.w	r2, r0, #1
    4a78:	4828      	ldr	r0, [pc, #160]	; (4b1c <PkaClearBlockOfRegs+0x12c>)
    4a7a:	428a      	cmp	r2, r1
    4a7c:	d83c      	bhi.n	4af8 <PkaClearBlockOfRegs+0x108>
    4a7e:	6829      	ldr	r1, [r5, #0]
    4a80:	9106      	str	r1, [sp, #24]
    4a82:	9906      	ldr	r1, [sp, #24]
    4a84:	07ce      	lsls	r6, r1, #31
    4a86:	d5fa      	bpl.n	4a7e <PkaClearBlockOfRegs+0x8e>
    4a88:	4925      	ldr	r1, [pc, #148]	; (4b20 <PkaClearBlockOfRegs+0x130>)
    4a8a:	6809      	ldr	r1, [r1, #0]
    4a8c:	6828      	ldr	r0, [r5, #0]
    4a8e:	9007      	str	r0, [sp, #28]
    4a90:	9807      	ldr	r0, [sp, #28]
    4a92:	07c0      	lsls	r0, r0, #31
    4a94:	d5fa      	bpl.n	4a8c <PkaClearBlockOfRegs+0x9c>
    4a96:	6021      	str	r1, [r4, #0]
    4a98:	2100      	movs	r1, #0
    4a9a:	460c      	mov	r4, r1
    4a9c:	481f      	ldr	r0, [pc, #124]	; (4b1c <PkaClearBlockOfRegs+0x12c>)
    4a9e:	428b      	cmp	r3, r1
    4aa0:	d12d      	bne.n	4afe <PkaClearBlockOfRegs+0x10e>
    4aa2:	2000      	movs	r0, #0
    4aa4:	491d      	ldr	r1, [pc, #116]	; (4b1c <PkaClearBlockOfRegs+0x12c>)
    4aa6:	429a      	cmp	r2, r3
    4aa8:	d82c      	bhi.n	4b04 <PkaClearBlockOfRegs+0x114>
    4aaa:	b009      	add	sp, #36	; 0x24
    4aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4aae:	682b      	ldr	r3, [r5, #0]
    4ab0:	9302      	str	r3, [sp, #8]
    4ab2:	9b02      	ldr	r3, [sp, #8]
    4ab4:	07db      	lsls	r3, r3, #31
    4ab6:	d5fa      	bpl.n	4aae <PkaClearBlockOfRegs+0xbe>
    4ab8:	1903      	adds	r3, r0, r4
    4aba:	009b      	lsls	r3, r3, #2
    4abc:	681b      	ldr	r3, [r3, #0]
    4abe:	682e      	ldr	r6, [r5, #0]
    4ac0:	9603      	str	r6, [sp, #12]
    4ac2:	9e03      	ldr	r6, [sp, #12]
    4ac4:	07f6      	lsls	r6, r6, #31
    4ac6:	d5fa      	bpl.n	4abe <PkaClearBlockOfRegs+0xce>
    4ac8:	f8ce 3000 	str.w	r3, [lr]
    4acc:	2300      	movs	r3, #0
    4ace:	4293      	cmp	r3, r2
    4ad0:	f103 0301 	add.w	r3, r3, #1
    4ad4:	d106      	bne.n	4ae4 <PkaClearBlockOfRegs+0xf4>
    4ad6:	4616      	mov	r6, r2
    4ad8:	f023 0301 	bic.w	r3, r3, #1
    4adc:	42b3      	cmp	r3, r6
    4ade:	d804      	bhi.n	4aea <PkaClearBlockOfRegs+0xfa>
    4ae0:	3401      	adds	r4, #1
    4ae2:	e7ae      	b.n	4a42 <PkaClearBlockOfRegs+0x52>
    4ae4:	f8cc 7000 	str.w	r7, [ip]
    4ae8:	e7f1      	b.n	4ace <PkaClearBlockOfRegs+0xde>
    4aea:	f8cc 7000 	str.w	r7, [ip]
    4aee:	3601      	adds	r6, #1
    4af0:	e7f4      	b.n	4adc <PkaClearBlockOfRegs+0xec>
    4af2:	600e      	str	r6, [r1, #0]
    4af4:	4603      	mov	r3, r0
    4af6:	e7b7      	b.n	4a68 <PkaClearBlockOfRegs+0x78>
    4af8:	6006      	str	r6, [r0, #0]
    4afa:	3101      	adds	r1, #1
    4afc:	e7bd      	b.n	4a7a <PkaClearBlockOfRegs+0x8a>
    4afe:	6004      	str	r4, [r0, #0]
    4b00:	3101      	adds	r1, #1
    4b02:	e7cc      	b.n	4a9e <PkaClearBlockOfRegs+0xae>
    4b04:	6008      	str	r0, [r1, #0]
    4b06:	3301      	adds	r3, #1
    4b08:	e7cd      	b.n	4aa6 <PkaClearBlockOfRegs+0xb6>
    4b0a:	bf00      	nop
    4b0c:	508410b4 	.word	0x508410b4
    4b10:	14210424 	.word	0x14210424
    4b14:	5084107c 	.word	0x5084107c
    4b18:	508410d4 	.word	0x508410d4
    4b1c:	508410d8 	.word	0x508410d8
    4b20:	50841078 	.word	0x50841078

00004b24 <PkaFinishAndMutexUnlock>:
    4b24:	b508      	push	{r3, lr}
    4b26:	b140      	cbz	r0, 4b3a <PkaFinishAndMutexUnlock+0x16>
    4b28:	2820      	cmp	r0, #32
    4b2a:	4601      	mov	r1, r0
    4b2c:	f04f 0207 	mov.w	r2, #7
    4b30:	bf28      	it	cs
    4b32:	2120      	movcs	r1, #32
    4b34:	2000      	movs	r0, #0
    4b36:	f7ff ff5b 	bl	49f0 <PkaClearBlockOfRegs>
    4b3a:	2200      	movs	r2, #0
    4b3c:	4b01      	ldr	r3, [pc, #4]	; (4b44 <PkaFinishAndMutexUnlock+0x20>)
    4b3e:	601a      	str	r2, [r3, #0]
    4b40:	bd08      	pop	{r3, pc}
    4b42:	bf00      	nop
    4b44:	5084181c 	.word	0x5084181c

00004b48 <PkaCopyDataIntoPkaReg>:
    4b48:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b4a:	4d29      	ldr	r5, [pc, #164]	; (4bf0 <PkaCopyDataIntoPkaReg+0xa8>)
    4b4c:	b085      	sub	sp, #20
    4b4e:	462c      	mov	r4, r5
    4b50:	682e      	ldr	r6, [r5, #0]
    4b52:	9600      	str	r6, [sp, #0]
    4b54:	9e00      	ldr	r6, [sp, #0]
    4b56:	07f6      	lsls	r6, r6, #31
    4b58:	d5fa      	bpl.n	4b50 <PkaCopyDataIntoPkaReg+0x8>
    4b5a:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    4b5e:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    4b62:	0080      	lsls	r0, r0, #2
    4b64:	6805      	ldr	r5, [r0, #0]
    4b66:	6820      	ldr	r0, [r4, #0]
    4b68:	9001      	str	r0, [sp, #4]
    4b6a:	9801      	ldr	r0, [sp, #4]
    4b6c:	07c7      	lsls	r7, r0, #31
    4b6e:	d5fa      	bpl.n	4b66 <PkaCopyDataIntoPkaReg+0x1e>
    4b70:	4820      	ldr	r0, [pc, #128]	; (4bf4 <PkaCopyDataIntoPkaReg+0xac>)
    4b72:	4f21      	ldr	r7, [pc, #132]	; (4bf8 <PkaCopyDataIntoPkaReg+0xb0>)
    4b74:	6005      	str	r5, [r0, #0]
    4b76:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    4b7a:	42b2      	cmp	r2, r6
    4b7c:	d129      	bne.n	4bd2 <PkaCopyDataIntoPkaReg+0x8a>
    4b7e:	2700      	movs	r7, #0
    4b80:	1c5a      	adds	r2, r3, #1
    4b82:	4e1d      	ldr	r6, [pc, #116]	; (4bf8 <PkaCopyDataIntoPkaReg+0xb0>)
    4b84:	f022 0201 	bic.w	r2, r2, #1
    4b88:	429a      	cmp	r2, r3
    4b8a:	d827      	bhi.n	4bdc <PkaCopyDataIntoPkaReg+0x94>
    4b8c:	6823      	ldr	r3, [r4, #0]
    4b8e:	9302      	str	r3, [sp, #8]
    4b90:	9b02      	ldr	r3, [sp, #8]
    4b92:	07de      	lsls	r6, r3, #31
    4b94:	d5fa      	bpl.n	4b8c <PkaCopyDataIntoPkaReg+0x44>
    4b96:	4b19      	ldr	r3, [pc, #100]	; (4bfc <PkaCopyDataIntoPkaReg+0xb4>)
    4b98:	440b      	add	r3, r1
    4b9a:	009b      	lsls	r3, r3, #2
    4b9c:	681b      	ldr	r3, [r3, #0]
    4b9e:	331f      	adds	r3, #31
    4ba0:	095b      	lsrs	r3, r3, #5
    4ba2:	429a      	cmp	r2, r3
    4ba4:	d213      	bcs.n	4bce <PkaCopyDataIntoPkaReg+0x86>
    4ba6:	6821      	ldr	r1, [r4, #0]
    4ba8:	9103      	str	r1, [sp, #12]
    4baa:	9903      	ldr	r1, [sp, #12]
    4bac:	07c9      	lsls	r1, r1, #31
    4bae:	d5fa      	bpl.n	4ba6 <PkaCopyDataIntoPkaReg+0x5e>
    4bb0:	2100      	movs	r1, #0
    4bb2:	4415      	add	r5, r2
    4bb4:	6005      	str	r5, [r0, #0]
    4bb6:	4608      	mov	r0, r1
    4bb8:	1a9b      	subs	r3, r3, r2
    4bba:	4a0f      	ldr	r2, [pc, #60]	; (4bf8 <PkaCopyDataIntoPkaReg+0xb0>)
    4bbc:	428b      	cmp	r3, r1
    4bbe:	d810      	bhi.n	4be2 <PkaCopyDataIntoPkaReg+0x9a>
    4bc0:	2000      	movs	r0, #0
    4bc2:	1c5a      	adds	r2, r3, #1
    4bc4:	490c      	ldr	r1, [pc, #48]	; (4bf8 <PkaCopyDataIntoPkaReg+0xb0>)
    4bc6:	f022 0201 	bic.w	r2, r2, #1
    4bca:	429a      	cmp	r2, r3
    4bcc:	d80c      	bhi.n	4be8 <PkaCopyDataIntoPkaReg+0xa0>
    4bce:	b005      	add	sp, #20
    4bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bd2:	f852 cb04 	ldr.w	ip, [r2], #4
    4bd6:	f8c7 c000 	str.w	ip, [r7]
    4bda:	e7ce      	b.n	4b7a <PkaCopyDataIntoPkaReg+0x32>
    4bdc:	6037      	str	r7, [r6, #0]
    4bde:	3301      	adds	r3, #1
    4be0:	e7d2      	b.n	4b88 <PkaCopyDataIntoPkaReg+0x40>
    4be2:	6010      	str	r0, [r2, #0]
    4be4:	3101      	adds	r1, #1
    4be6:	e7e9      	b.n	4bbc <PkaCopyDataIntoPkaReg+0x74>
    4be8:	6008      	str	r0, [r1, #0]
    4bea:	3301      	adds	r3, #1
    4bec:	e7ed      	b.n	4bca <PkaCopyDataIntoPkaReg+0x82>
    4bee:	bf00      	nop
    4bf0:	508410b4 	.word	0x508410b4
    4bf4:	508410d4 	.word	0x508410d4
    4bf8:	508410d8 	.word	0x508410d8
    4bfc:	14210424 	.word	0x14210424

00004c00 <PkaEcdsaVerify>:
    4c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c04:	4b81      	ldr	r3, [pc, #516]	; (4e0c <PkaEcdsaVerify+0x20c>)
    4c06:	b0a0      	sub	sp, #128	; 0x80
    4c08:	681d      	ldr	r5, [r3, #0]
    4c0a:	6898      	ldr	r0, [r3, #8]
    4c0c:	3320      	adds	r3, #32
    4c0e:	461e      	mov	r6, r3
    4c10:	681a      	ldr	r2, [r3, #0]
    4c12:	9201      	str	r2, [sp, #4]
    4c14:	9a01      	ldr	r2, [sp, #4]
    4c16:	07d7      	lsls	r7, r2, #31
    4c18:	d5fa      	bpl.n	4c10 <PkaEcdsaVerify+0x10>
    4c1a:	4b7d      	ldr	r3, [pc, #500]	; (4e10 <PkaEcdsaVerify+0x210>)
    4c1c:	4a7d      	ldr	r2, [pc, #500]	; (4e14 <PkaEcdsaVerify+0x214>)
    4c1e:	601a      	str	r2, [r3, #0]
    4c20:	6832      	ldr	r2, [r6, #0]
    4c22:	9202      	str	r2, [sp, #8]
    4c24:	9a02      	ldr	r2, [sp, #8]
    4c26:	07d4      	lsls	r4, r2, #31
    4c28:	d5fa      	bpl.n	4c20 <PkaEcdsaVerify+0x20>
    4c2a:	4a7b      	ldr	r2, [pc, #492]	; (4e18 <PkaEcdsaVerify+0x218>)
    4c2c:	601a      	str	r2, [r3, #0]
    4c2e:	4a7b      	ldr	r2, [pc, #492]	; (4e1c <PkaEcdsaVerify+0x21c>)
    4c30:	4614      	mov	r4, r2
    4c32:	6811      	ldr	r1, [r2, #0]
    4c34:	9103      	str	r1, [sp, #12]
    4c36:	9903      	ldr	r1, [sp, #12]
    4c38:	07c9      	lsls	r1, r1, #31
    4c3a:	d5fa      	bpl.n	4c32 <PkaEcdsaVerify+0x32>
    4c3c:	4a78      	ldr	r2, [pc, #480]	; (4e20 <PkaEcdsaVerify+0x220>)
    4c3e:	6811      	ldr	r1, [r2, #0]
    4c40:	f3c1 2140 	ubfx	r1, r1, #9, #1
    4c44:	6837      	ldr	r7, [r6, #0]
    4c46:	9704      	str	r7, [sp, #16]
    4c48:	9f04      	ldr	r7, [sp, #16]
    4c4a:	07ff      	lsls	r7, r7, #31
    4c4c:	d5fa      	bpl.n	4c44 <PkaEcdsaVerify+0x44>
    4c4e:	4f75      	ldr	r7, [pc, #468]	; (4e24 <PkaEcdsaVerify+0x224>)
    4c50:	601f      	str	r7, [r3, #0]
    4c52:	6827      	ldr	r7, [r4, #0]
    4c54:	9705      	str	r7, [sp, #20]
    4c56:	9f05      	ldr	r7, [sp, #20]
    4c58:	07ff      	lsls	r7, r7, #31
    4c5a:	d5fa      	bpl.n	4c52 <PkaEcdsaVerify+0x52>
    4c5c:	6817      	ldr	r7, [r2, #0]
    4c5e:	2900      	cmp	r1, #0
    4c60:	f000 80cf 	beq.w	4e02 <PkaEcdsaVerify+0x202>
    4c64:	05b9      	lsls	r1, r7, #22
    4c66:	f140 80cc 	bpl.w	4e02 <PkaEcdsaVerify+0x202>
    4c6a:	6831      	ldr	r1, [r6, #0]
    4c6c:	9106      	str	r1, [sp, #24]
    4c6e:	9906      	ldr	r1, [sp, #24]
    4c70:	07cf      	lsls	r7, r1, #31
    4c72:	d5fa      	bpl.n	4c6a <PkaEcdsaVerify+0x6a>
    4c74:	496c      	ldr	r1, [pc, #432]	; (4e28 <PkaEcdsaVerify+0x228>)
    4c76:	6019      	str	r1, [r3, #0]
    4c78:	6821      	ldr	r1, [r4, #0]
    4c7a:	9107      	str	r1, [sp, #28]
    4c7c:	9907      	ldr	r1, [sp, #28]
    4c7e:	07c9      	lsls	r1, r1, #31
    4c80:	d5fa      	bpl.n	4c78 <PkaEcdsaVerify+0x78>
    4c82:	6811      	ldr	r1, [r2, #0]
    4c84:	f3c1 2140 	ubfx	r1, r1, #9, #1
    4c88:	6837      	ldr	r7, [r6, #0]
    4c8a:	9708      	str	r7, [sp, #32]
    4c8c:	9f08      	ldr	r7, [sp, #32]
    4c8e:	07ff      	lsls	r7, r7, #31
    4c90:	d5fa      	bpl.n	4c88 <PkaEcdsaVerify+0x88>
    4c92:	4f66      	ldr	r7, [pc, #408]	; (4e2c <PkaEcdsaVerify+0x22c>)
    4c94:	601f      	str	r7, [r3, #0]
    4c96:	6827      	ldr	r7, [r4, #0]
    4c98:	9709      	str	r7, [sp, #36]	; 0x24
    4c9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    4c9c:	07ff      	lsls	r7, r7, #31
    4c9e:	d5fa      	bpl.n	4c96 <PkaEcdsaVerify+0x96>
    4ca0:	6812      	ldr	r2, [r2, #0]
    4ca2:	2900      	cmp	r1, #0
    4ca4:	f000 80af 	beq.w	4e06 <PkaEcdsaVerify+0x206>
    4ca8:	0591      	lsls	r1, r2, #22
    4caa:	f140 80ac 	bpl.w	4e06 <PkaEcdsaVerify+0x206>
    4cae:	6832      	ldr	r2, [r6, #0]
    4cb0:	920a      	str	r2, [sp, #40]	; 0x28
    4cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4cb4:	07d2      	lsls	r2, r2, #31
    4cb6:	d5fa      	bpl.n	4cae <PkaEcdsaVerify+0xae>
    4cb8:	4a56      	ldr	r2, [pc, #344]	; (4e14 <PkaEcdsaVerify+0x214>)
    4cba:	601a      	str	r2, [r3, #0]
    4cbc:	6832      	ldr	r2, [r6, #0]
    4cbe:	920b      	str	r2, [sp, #44]	; 0x2c
    4cc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4cc2:	07d7      	lsls	r7, r2, #31
    4cc4:	d5fa      	bpl.n	4cbc <PkaEcdsaVerify+0xbc>
    4cc6:	4a5a      	ldr	r2, [pc, #360]	; (4e30 <PkaEcdsaVerify+0x230>)
    4cc8:	601a      	str	r2, [r3, #0]
    4cca:	6831      	ldr	r1, [r6, #0]
    4ccc:	910c      	str	r1, [sp, #48]	; 0x30
    4cce:	990c      	ldr	r1, [sp, #48]	; 0x30
    4cd0:	07cc      	lsls	r4, r1, #31
    4cd2:	d5fa      	bpl.n	4cca <PkaEcdsaVerify+0xca>
    4cd4:	4957      	ldr	r1, [pc, #348]	; (4e34 <PkaEcdsaVerify+0x234>)
    4cd6:	6019      	str	r1, [r3, #0]
    4cd8:	6831      	ldr	r1, [r6, #0]
    4cda:	910d      	str	r1, [sp, #52]	; 0x34
    4cdc:	990d      	ldr	r1, [sp, #52]	; 0x34
    4cde:	07c9      	lsls	r1, r1, #31
    4ce0:	d5fa      	bpl.n	4cd8 <PkaEcdsaVerify+0xd8>
    4ce2:	4955      	ldr	r1, [pc, #340]	; (4e38 <PkaEcdsaVerify+0x238>)
    4ce4:	6019      	str	r1, [r3, #0]
    4ce6:	6831      	ldr	r1, [r6, #0]
    4ce8:	910e      	str	r1, [sp, #56]	; 0x38
    4cea:	990e      	ldr	r1, [sp, #56]	; 0x38
    4cec:	07cf      	lsls	r7, r1, #31
    4cee:	d5fa      	bpl.n	4ce6 <PkaEcdsaVerify+0xe6>
    4cf0:	4952      	ldr	r1, [pc, #328]	; (4e3c <PkaEcdsaVerify+0x23c>)
    4cf2:	6019      	str	r1, [r3, #0]
    4cf4:	6831      	ldr	r1, [r6, #0]
    4cf6:	910f      	str	r1, [sp, #60]	; 0x3c
    4cf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    4cfa:	07cc      	lsls	r4, r1, #31
    4cfc:	d5fa      	bpl.n	4cf4 <PkaEcdsaVerify+0xf4>
    4cfe:	4950      	ldr	r1, [pc, #320]	; (4e40 <PkaEcdsaVerify+0x240>)
    4d00:	6019      	str	r1, [r3, #0]
    4d02:	4b50      	ldr	r3, [pc, #320]	; (4e44 <PkaEcdsaVerify+0x244>)
    4d04:	461e      	mov	r6, r3
    4d06:	6819      	ldr	r1, [r3, #0]
    4d08:	9110      	str	r1, [sp, #64]	; 0x40
    4d0a:	9910      	ldr	r1, [sp, #64]	; 0x40
    4d0c:	07c9      	lsls	r1, r1, #31
    4d0e:	d5fa      	bpl.n	4d06 <PkaEcdsaVerify+0x106>
    4d10:	4c3f      	ldr	r4, [pc, #252]	; (4e10 <PkaEcdsaVerify+0x210>)
    4d12:	4b4d      	ldr	r3, [pc, #308]	; (4e48 <PkaEcdsaVerify+0x248>)
    4d14:	6023      	str	r3, [r4, #0]
    4d16:	6833      	ldr	r3, [r6, #0]
    4d18:	9311      	str	r3, [sp, #68]	; 0x44
    4d1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4d1c:	07db      	lsls	r3, r3, #31
    4d1e:	d5fa      	bpl.n	4d16 <PkaEcdsaVerify+0x116>
    4d20:	4b4a      	ldr	r3, [pc, #296]	; (4e4c <PkaEcdsaVerify+0x24c>)
    4d22:	6023      	str	r3, [r4, #0]
    4d24:	6833      	ldr	r3, [r6, #0]
    4d26:	9312      	str	r3, [sp, #72]	; 0x48
    4d28:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4d2a:	07df      	lsls	r7, r3, #31
    4d2c:	d5fa      	bpl.n	4d24 <PkaEcdsaVerify+0x124>
    4d2e:	4b48      	ldr	r3, [pc, #288]	; (4e50 <PkaEcdsaVerify+0x250>)
    4d30:	6023      	str	r3, [r4, #0]
    4d32:	4b3a      	ldr	r3, [pc, #232]	; (4e1c <PkaEcdsaVerify+0x21c>)
    4d34:	4698      	mov	r8, r3
    4d36:	6819      	ldr	r1, [r3, #0]
    4d38:	9113      	str	r1, [sp, #76]	; 0x4c
    4d3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4d3c:	07c9      	lsls	r1, r1, #31
    4d3e:	d5fa      	bpl.n	4d36 <PkaEcdsaVerify+0x136>
    4d40:	4f32      	ldr	r7, [pc, #200]	; (4e0c <PkaEcdsaVerify+0x20c>)
    4d42:	6038      	str	r0, [r7, #0]
    4d44:	6833      	ldr	r3, [r6, #0]
    4d46:	9314      	str	r3, [sp, #80]	; 0x50
    4d48:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4d4a:	07db      	lsls	r3, r3, #31
    4d4c:	d5fa      	bpl.n	4d44 <PkaEcdsaVerify+0x144>
    4d4e:	6022      	str	r2, [r4, #0]
    4d50:	6833      	ldr	r3, [r6, #0]
    4d52:	9315      	str	r3, [sp, #84]	; 0x54
    4d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
    4d56:	07d8      	lsls	r0, r3, #31
    4d58:	d5fa      	bpl.n	4d50 <PkaEcdsaVerify+0x150>
    4d5a:	4b3e      	ldr	r3, [pc, #248]	; (4e54 <PkaEcdsaVerify+0x254>)
    4d5c:	6023      	str	r3, [r4, #0]
    4d5e:	6833      	ldr	r3, [r6, #0]
    4d60:	9316      	str	r3, [sp, #88]	; 0x58
    4d62:	9b16      	ldr	r3, [sp, #88]	; 0x58
    4d64:	07d9      	lsls	r1, r3, #31
    4d66:	d5fa      	bpl.n	4d5e <PkaEcdsaVerify+0x15e>
    4d68:	4b3b      	ldr	r3, [pc, #236]	; (4e58 <PkaEcdsaVerify+0x258>)
    4d6a:	6023      	str	r3, [r4, #0]
    4d6c:	6833      	ldr	r3, [r6, #0]
    4d6e:	9317      	str	r3, [sp, #92]	; 0x5c
    4d70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    4d72:	07da      	lsls	r2, r3, #31
    4d74:	d5fa      	bpl.n	4d6c <PkaEcdsaVerify+0x16c>
    4d76:	4b39      	ldr	r3, [pc, #228]	; (4e5c <PkaEcdsaVerify+0x25c>)
    4d78:	6023      	str	r3, [r4, #0]
    4d7a:	6833      	ldr	r3, [r6, #0]
    4d7c:	9318      	str	r3, [sp, #96]	; 0x60
    4d7e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    4d80:	07db      	lsls	r3, r3, #31
    4d82:	d5fa      	bpl.n	4d7a <PkaEcdsaVerify+0x17a>
    4d84:	4b36      	ldr	r3, [pc, #216]	; (4e60 <PkaEcdsaVerify+0x260>)
    4d86:	6023      	str	r3, [r4, #0]
    4d88:	6833      	ldr	r3, [r6, #0]
    4d8a:	9319      	str	r3, [sp, #100]	; 0x64
    4d8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    4d8e:	07d8      	lsls	r0, r3, #31
    4d90:	d5fa      	bpl.n	4d88 <PkaEcdsaVerify+0x188>
    4d92:	4b34      	ldr	r3, [pc, #208]	; (4e64 <PkaEcdsaVerify+0x264>)
    4d94:	6023      	str	r3, [r4, #0]
    4d96:	6833      	ldr	r3, [r6, #0]
    4d98:	931a      	str	r3, [sp, #104]	; 0x68
    4d9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    4d9c:	07d9      	lsls	r1, r3, #31
    4d9e:	d5fa      	bpl.n	4d96 <PkaEcdsaVerify+0x196>
    4da0:	4b31      	ldr	r3, [pc, #196]	; (4e68 <PkaEcdsaVerify+0x268>)
    4da2:	6023      	str	r3, [r4, #0]
    4da4:	6833      	ldr	r3, [r6, #0]
    4da6:	931b      	str	r3, [sp, #108]	; 0x6c
    4da8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    4daa:	07da      	lsls	r2, r3, #31
    4dac:	d5fa      	bpl.n	4da4 <PkaEcdsaVerify+0x1a4>
    4dae:	4b2f      	ldr	r3, [pc, #188]	; (4e6c <PkaEcdsaVerify+0x26c>)
    4db0:	6023      	str	r3, [r4, #0]
    4db2:	f000 fc1d 	bl	55f0 <PkaSum2ScalarMullt>
    4db6:	bb08      	cbnz	r0, 4dfc <PkaEcdsaVerify+0x1fc>
    4db8:	f8d8 3000 	ldr.w	r3, [r8]
    4dbc:	931c      	str	r3, [sp, #112]	; 0x70
    4dbe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4dc0:	07db      	lsls	r3, r3, #31
    4dc2:	d5f9      	bpl.n	4db8 <PkaEcdsaVerify+0x1b8>
    4dc4:	603d      	str	r5, [r7, #0]
    4dc6:	6833      	ldr	r3, [r6, #0]
    4dc8:	931d      	str	r3, [sp, #116]	; 0x74
    4dca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    4dcc:	07d9      	lsls	r1, r3, #31
    4dce:	d5fa      	bpl.n	4dc6 <PkaEcdsaVerify+0x1c6>
    4dd0:	4b27      	ldr	r3, [pc, #156]	; (4e70 <PkaEcdsaVerify+0x270>)
    4dd2:	6023      	str	r3, [r4, #0]
    4dd4:	6833      	ldr	r3, [r6, #0]
    4dd6:	931e      	str	r3, [sp, #120]	; 0x78
    4dd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    4dda:	07da      	lsls	r2, r3, #31
    4ddc:	d5fa      	bpl.n	4dd4 <PkaEcdsaVerify+0x1d4>
    4dde:	4b25      	ldr	r3, [pc, #148]	; (4e74 <PkaEcdsaVerify+0x274>)
    4de0:	6023      	str	r3, [r4, #0]
    4de2:	f8d8 3000 	ldr.w	r3, [r8]
    4de6:	931f      	str	r3, [sp, #124]	; 0x7c
    4de8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    4dea:	07db      	lsls	r3, r3, #31
    4dec:	d5f9      	bpl.n	4de2 <PkaEcdsaVerify+0x1e2>
    4dee:	4b0c      	ldr	r3, [pc, #48]	; (4e20 <PkaEcdsaVerify+0x220>)
    4df0:	681b      	ldr	r3, [r3, #0]
    4df2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    4df6:	4b20      	ldr	r3, [pc, #128]	; (4e78 <PkaEcdsaVerify+0x278>)
    4df8:	bf08      	it	eq
    4dfa:	4618      	moveq	r0, r3
    4dfc:	b020      	add	sp, #128	; 0x80
    4dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4e02:	481e      	ldr	r0, [pc, #120]	; (4e7c <PkaEcdsaVerify+0x27c>)
    4e04:	e7fa      	b.n	4dfc <PkaEcdsaVerify+0x1fc>
    4e06:	481e      	ldr	r0, [pc, #120]	; (4e80 <PkaEcdsaVerify+0x280>)
    4e08:	e7f8      	b.n	4dfc <PkaEcdsaVerify+0x1fc>
    4e0a:	bf00      	nop
    4e0c:	50841090 	.word	0x50841090
    4e10:	50841080 	.word	0x50841080
    4e14:	51021000 	.word	0x51021000
    4e18:	29721fc0 	.word	0x29721fc0
    4e1c:	508410b4 	.word	0x508410b4
    4e20:	50841088 	.word	0x50841088
    4e24:	2901cfc0 	.word	0x2901cfc0
    4e28:	290e1fc0 	.word	0x290e1fc0
    4e2c:	29003fc0 	.word	0x29003fc0
    4e30:	49020140 	.word	0x49020140
    4e34:	a8843100 	.word	0xa8843100
    4e38:	49160000 	.word	0x49160000
    4e3c:	a1080140 	.word	0xa1080140
    4e40:	88084480 	.word	0x88084480
    4e44:	508410b0 	.word	0x508410b0
    4e48:	887044c0 	.word	0x887044c0
    4e4c:	417a0780 	.word	0x417a0780
    4e50:	417e07c0 	.word	0x417e07c0
    4e54:	496a0000 	.word	0x496a0000
    4e58:	49160680 	.word	0x49160680
    4e5c:	496e0040 	.word	0x496e0040
    4e60:	21000200 	.word	0x21000200
    4e64:	21208200 	.word	0x21208200
    4e68:	21208240 	.word	0x21208240
    4e6c:	21248280 	.word	0x21248280
    4e70:	a161a140 	.word	0xa161a140
    4e74:	5161c800 	.word	0x5161c800
    4e78:	00f10803 	.word	0x00f10803
    4e7c:	00f10801 	.word	0x00f10801
    4e80:	00f10802 	.word	0x00f10802

00004e84 <nrf_cc310_bl_hash_update_internal>:
    4e84:	4b32      	ldr	r3, [pc, #200]	; (4f50 <nrf_cc310_bl_hash_update_internal+0xcc>)
    4e86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e8a:	4680      	mov	r8, r0
    4e8c:	4692      	mov	sl, r2
    4e8e:	4699      	mov	r9, r3
    4e90:	6844      	ldr	r4, [r0, #4]
    4e92:	681a      	ldr	r2, [r3, #0]
    4e94:	2a00      	cmp	r2, #0
    4e96:	d1fc      	bne.n	4e92 <nrf_cc310_bl_hash_update_internal+0xe>
    4e98:	4b2e      	ldr	r3, [pc, #184]	; (4f54 <nrf_cc310_bl_hash_update_internal+0xd0>)
    4e9a:	469b      	mov	fp, r3
    4e9c:	681a      	ldr	r2, [r3, #0]
    4e9e:	2a00      	cmp	r2, #0
    4ea0:	d1fc      	bne.n	4e9c <nrf_cc310_bl_hash_update_internal+0x18>
    4ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ea6:	9101      	str	r1, [sp, #4]
    4ea8:	f000 fc94 	bl	57d4 <SaSi_HalClearInterruptBit>
    4eac:	2080      	movs	r0, #128	; 0x80
    4eae:	f000 fc97 	bl	57e0 <SaSi_HalMaskInterrupt>
    4eb2:	2301      	movs	r3, #1
    4eb4:	2007      	movs	r0, #7
    4eb6:	4a28      	ldr	r2, [pc, #160]	; (4f58 <nrf_cc310_bl_hash_update_internal+0xd4>)
    4eb8:	4d28      	ldr	r5, [pc, #160]	; (4f5c <nrf_cc310_bl_hash_update_internal+0xd8>)
    4eba:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
    4ebe:	602b      	str	r3, [r5, #0]
    4ec0:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    4ec4:	6013      	str	r3, [r2, #0]
    4ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4ec8:	4f25      	ldr	r7, [pc, #148]	; (4f60 <nrf_cc310_bl_hash_update_internal+0xdc>)
    4eca:	4e26      	ldr	r6, [pc, #152]	; (4f64 <nrf_cc310_bl_hash_update_internal+0xe0>)
    4ecc:	603b      	str	r3, [r7, #0]
    4ece:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4ed0:	4620      	mov	r0, r4
    4ed2:	6033      	str	r3, [r6, #0]
    4ed4:	f8d8 3000 	ldr.w	r3, [r8]
    4ed8:	f842 3c04 	str.w	r3, [r2, #-4]
    4edc:	f8d8 3008 	ldr.w	r3, [r8, #8]
    4ee0:	4798      	blx	r3
    4ee2:	9901      	ldr	r1, [sp, #4]
    4ee4:	f8d9 3000 	ldr.w	r3, [r9]
    4ee8:	2b00      	cmp	r3, #0
    4eea:	d1fb      	bne.n	4ee4 <nrf_cc310_bl_hash_update_internal+0x60>
    4eec:	f1ba 0f00 	cmp.w	sl, #0
    4ef0:	d120      	bne.n	4f34 <nrf_cc310_bl_hash_update_internal+0xb0>
    4ef2:	2204      	movs	r2, #4
    4ef4:	4b1c      	ldr	r3, [pc, #112]	; (4f68 <nrf_cc310_bl_hash_update_internal+0xe4>)
    4ef6:	601a      	str	r2, [r3, #0]
    4ef8:	f8d9 3000 	ldr.w	r3, [r9]
    4efc:	2b00      	cmp	r3, #0
    4efe:	d1fb      	bne.n	4ef8 <nrf_cc310_bl_hash_update_internal+0x74>
    4f00:	f8db a000 	ldr.w	sl, [fp]
    4f04:	f1ba 0f00 	cmp.w	sl, #0
    4f08:	d1fa      	bne.n	4f00 <nrf_cc310_bl_hash_update_internal+0x7c>
    4f0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    4f0e:	4620      	mov	r0, r4
    4f10:	4798      	blx	r3
    4f12:	683b      	ldr	r3, [r7, #0]
    4f14:	6263      	str	r3, [r4, #36]	; 0x24
    4f16:	6833      	ldr	r3, [r6, #0]
    4f18:	62a3      	str	r3, [r4, #40]	; 0x28
    4f1a:	4b14      	ldr	r3, [pc, #80]	; (4f6c <nrf_cc310_bl_hash_update_internal+0xe8>)
    4f1c:	f8c3 a000 	str.w	sl, [r3]
    4f20:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    4f24:	f8d9 3000 	ldr.w	r3, [r9]
    4f28:	2b00      	cmp	r3, #0
    4f2a:	d1fb      	bne.n	4f24 <nrf_cc310_bl_hash_update_internal+0xa0>
    4f2c:	602b      	str	r3, [r5, #0]
    4f2e:	b003      	add	sp, #12
    4f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f34:	6a23      	ldr	r3, [r4, #32]
    4f36:	2040      	movs	r0, #64	; 0x40
    4f38:	2b01      	cmp	r3, #1
    4f3a:	bf04      	itt	eq
    4f3c:	4a0b      	ldreq	r2, [pc, #44]	; (4f6c <nrf_cc310_bl_hash_update_internal+0xe8>)
    4f3e:	6013      	streq	r3, [r2, #0]
    4f40:	4b0b      	ldr	r3, [pc, #44]	; (4f70 <nrf_cc310_bl_hash_update_internal+0xec>)
    4f42:	6019      	str	r1, [r3, #0]
    4f44:	f8c3 a004 	str.w	sl, [r3, #4]
    4f48:	f000 fc50 	bl	57ec <SaSi_HalWaitInterrupt>
    4f4c:	e7d4      	b.n	4ef8 <nrf_cc310_bl_hash_update_internal+0x74>
    4f4e:	bf00      	nop
    4f50:	50841910 	.word	0x50841910
    4f54:	50841c20 	.word	0x50841c20
    4f58:	50841900 	.word	0x50841900
    4f5c:	50841818 	.word	0x50841818
    4f60:	508417cc 	.word	0x508417cc
    4f64:	508417d0 	.word	0x508417d0
    4f68:	508417c8 	.word	0x508417c8
    4f6c:	50841684 	.word	0x50841684
    4f70:	50841c28 	.word	0x50841c28

00004f74 <PkaDoubleMdf2Mdf>:
    4f74:	4b54      	ldr	r3, [pc, #336]	; (50c8 <PkaDoubleMdf2Mdf+0x154>)
    4f76:	b510      	push	{r4, lr}
    4f78:	4619      	mov	r1, r3
    4f7a:	b098      	sub	sp, #96	; 0x60
    4f7c:	681a      	ldr	r2, [r3, #0]
    4f7e:	9201      	str	r2, [sp, #4]
    4f80:	9a01      	ldr	r2, [sp, #4]
    4f82:	07d2      	lsls	r2, r2, #31
    4f84:	d5fa      	bpl.n	4f7c <PkaDoubleMdf2Mdf+0x8>
    4f86:	4b51      	ldr	r3, [pc, #324]	; (50cc <PkaDoubleMdf2Mdf+0x158>)
    4f88:	4a51      	ldr	r2, [pc, #324]	; (50d0 <PkaDoubleMdf2Mdf+0x15c>)
    4f8a:	601a      	str	r2, [r3, #0]
    4f8c:	680a      	ldr	r2, [r1, #0]
    4f8e:	9202      	str	r2, [sp, #8]
    4f90:	9a02      	ldr	r2, [sp, #8]
    4f92:	07d4      	lsls	r4, r2, #31
    4f94:	d5fa      	bpl.n	4f8c <PkaDoubleMdf2Mdf+0x18>
    4f96:	4a4f      	ldr	r2, [pc, #316]	; (50d4 <PkaDoubleMdf2Mdf+0x160>)
    4f98:	601a      	str	r2, [r3, #0]
    4f9a:	680a      	ldr	r2, [r1, #0]
    4f9c:	9203      	str	r2, [sp, #12]
    4f9e:	9a03      	ldr	r2, [sp, #12]
    4fa0:	07d0      	lsls	r0, r2, #31
    4fa2:	d5fa      	bpl.n	4f9a <PkaDoubleMdf2Mdf+0x26>
    4fa4:	484c      	ldr	r0, [pc, #304]	; (50d8 <PkaDoubleMdf2Mdf+0x164>)
    4fa6:	6018      	str	r0, [r3, #0]
    4fa8:	680a      	ldr	r2, [r1, #0]
    4faa:	9204      	str	r2, [sp, #16]
    4fac:	9a04      	ldr	r2, [sp, #16]
    4fae:	07d2      	lsls	r2, r2, #31
    4fb0:	d5fa      	bpl.n	4fa8 <PkaDoubleMdf2Mdf+0x34>
    4fb2:	4a4a      	ldr	r2, [pc, #296]	; (50dc <PkaDoubleMdf2Mdf+0x168>)
    4fb4:	601a      	str	r2, [r3, #0]
    4fb6:	680a      	ldr	r2, [r1, #0]
    4fb8:	9205      	str	r2, [sp, #20]
    4fba:	9a05      	ldr	r2, [sp, #20]
    4fbc:	07d4      	lsls	r4, r2, #31
    4fbe:	d5fa      	bpl.n	4fb6 <PkaDoubleMdf2Mdf+0x42>
    4fc0:	4a47      	ldr	r2, [pc, #284]	; (50e0 <PkaDoubleMdf2Mdf+0x16c>)
    4fc2:	601a      	str	r2, [r3, #0]
    4fc4:	680a      	ldr	r2, [r1, #0]
    4fc6:	9206      	str	r2, [sp, #24]
    4fc8:	9a06      	ldr	r2, [sp, #24]
    4fca:	07d2      	lsls	r2, r2, #31
    4fcc:	d5fa      	bpl.n	4fc4 <PkaDoubleMdf2Mdf+0x50>
    4fce:	4a45      	ldr	r2, [pc, #276]	; (50e4 <PkaDoubleMdf2Mdf+0x170>)
    4fd0:	601a      	str	r2, [r3, #0]
    4fd2:	680a      	ldr	r2, [r1, #0]
    4fd4:	9207      	str	r2, [sp, #28]
    4fd6:	9a07      	ldr	r2, [sp, #28]
    4fd8:	07d4      	lsls	r4, r2, #31
    4fda:	d5fa      	bpl.n	4fd2 <PkaDoubleMdf2Mdf+0x5e>
    4fdc:	4a42      	ldr	r2, [pc, #264]	; (50e8 <PkaDoubleMdf2Mdf+0x174>)
    4fde:	601a      	str	r2, [r3, #0]
    4fe0:	680a      	ldr	r2, [r1, #0]
    4fe2:	9208      	str	r2, [sp, #32]
    4fe4:	9a08      	ldr	r2, [sp, #32]
    4fe6:	07d2      	lsls	r2, r2, #31
    4fe8:	d5fa      	bpl.n	4fe0 <PkaDoubleMdf2Mdf+0x6c>
    4fea:	4a40      	ldr	r2, [pc, #256]	; (50ec <PkaDoubleMdf2Mdf+0x178>)
    4fec:	601a      	str	r2, [r3, #0]
    4fee:	680a      	ldr	r2, [r1, #0]
    4ff0:	9209      	str	r2, [sp, #36]	; 0x24
    4ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4ff4:	07d4      	lsls	r4, r2, #31
    4ff6:	d5fa      	bpl.n	4fee <PkaDoubleMdf2Mdf+0x7a>
    4ff8:	4a3d      	ldr	r2, [pc, #244]	; (50f0 <PkaDoubleMdf2Mdf+0x17c>)
    4ffa:	601a      	str	r2, [r3, #0]
    4ffc:	680a      	ldr	r2, [r1, #0]
    4ffe:	920a      	str	r2, [sp, #40]	; 0x28
    5000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5002:	07d2      	lsls	r2, r2, #31
    5004:	d5fa      	bpl.n	4ffc <PkaDoubleMdf2Mdf+0x88>
    5006:	4a3b      	ldr	r2, [pc, #236]	; (50f4 <PkaDoubleMdf2Mdf+0x180>)
    5008:	601a      	str	r2, [r3, #0]
    500a:	680a      	ldr	r2, [r1, #0]
    500c:	920b      	str	r2, [sp, #44]	; 0x2c
    500e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5010:	07d4      	lsls	r4, r2, #31
    5012:	d5fa      	bpl.n	500a <PkaDoubleMdf2Mdf+0x96>
    5014:	4a38      	ldr	r2, [pc, #224]	; (50f8 <PkaDoubleMdf2Mdf+0x184>)
    5016:	601a      	str	r2, [r3, #0]
    5018:	680a      	ldr	r2, [r1, #0]
    501a:	920c      	str	r2, [sp, #48]	; 0x30
    501c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    501e:	07d2      	lsls	r2, r2, #31
    5020:	d5fa      	bpl.n	5018 <PkaDoubleMdf2Mdf+0xa4>
    5022:	4a36      	ldr	r2, [pc, #216]	; (50fc <PkaDoubleMdf2Mdf+0x188>)
    5024:	601a      	str	r2, [r3, #0]
    5026:	680a      	ldr	r2, [r1, #0]
    5028:	920d      	str	r2, [sp, #52]	; 0x34
    502a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    502c:	07d4      	lsls	r4, r2, #31
    502e:	d5fa      	bpl.n	5026 <PkaDoubleMdf2Mdf+0xb2>
    5030:	4a33      	ldr	r2, [pc, #204]	; (5100 <PkaDoubleMdf2Mdf+0x18c>)
    5032:	601a      	str	r2, [r3, #0]
    5034:	680a      	ldr	r2, [r1, #0]
    5036:	920e      	str	r2, [sp, #56]	; 0x38
    5038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    503a:	07d2      	lsls	r2, r2, #31
    503c:	d5fa      	bpl.n	5034 <PkaDoubleMdf2Mdf+0xc0>
    503e:	4a31      	ldr	r2, [pc, #196]	; (5104 <PkaDoubleMdf2Mdf+0x190>)
    5040:	601a      	str	r2, [r3, #0]
    5042:	680a      	ldr	r2, [r1, #0]
    5044:	920f      	str	r2, [sp, #60]	; 0x3c
    5046:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5048:	07d4      	lsls	r4, r2, #31
    504a:	d5fa      	bpl.n	5042 <PkaDoubleMdf2Mdf+0xce>
    504c:	4a2e      	ldr	r2, [pc, #184]	; (5108 <PkaDoubleMdf2Mdf+0x194>)
    504e:	601a      	str	r2, [r3, #0]
    5050:	680a      	ldr	r2, [r1, #0]
    5052:	9210      	str	r2, [sp, #64]	; 0x40
    5054:	9a10      	ldr	r2, [sp, #64]	; 0x40
    5056:	07d2      	lsls	r2, r2, #31
    5058:	d5fa      	bpl.n	5050 <PkaDoubleMdf2Mdf+0xdc>
    505a:	4a2c      	ldr	r2, [pc, #176]	; (510c <PkaDoubleMdf2Mdf+0x198>)
    505c:	601a      	str	r2, [r3, #0]
    505e:	4b1a      	ldr	r3, [pc, #104]	; (50c8 <PkaDoubleMdf2Mdf+0x154>)
    5060:	4619      	mov	r1, r3
    5062:	681c      	ldr	r4, [r3, #0]
    5064:	9411      	str	r4, [sp, #68]	; 0x44
    5066:	9c11      	ldr	r4, [sp, #68]	; 0x44
    5068:	07e4      	lsls	r4, r4, #31
    506a:	d5fa      	bpl.n	5062 <PkaDoubleMdf2Mdf+0xee>
    506c:	4b17      	ldr	r3, [pc, #92]	; (50cc <PkaDoubleMdf2Mdf+0x158>)
    506e:	6018      	str	r0, [r3, #0]
    5070:	6808      	ldr	r0, [r1, #0]
    5072:	9012      	str	r0, [sp, #72]	; 0x48
    5074:	9812      	ldr	r0, [sp, #72]	; 0x48
    5076:	07c4      	lsls	r4, r0, #31
    5078:	d5fa      	bpl.n	5070 <PkaDoubleMdf2Mdf+0xfc>
    507a:	601a      	str	r2, [r3, #0]
    507c:	680a      	ldr	r2, [r1, #0]
    507e:	9213      	str	r2, [sp, #76]	; 0x4c
    5080:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    5082:	07d0      	lsls	r0, r2, #31
    5084:	d5fa      	bpl.n	507c <PkaDoubleMdf2Mdf+0x108>
    5086:	4a12      	ldr	r2, [pc, #72]	; (50d0 <PkaDoubleMdf2Mdf+0x15c>)
    5088:	601a      	str	r2, [r3, #0]
    508a:	680a      	ldr	r2, [r1, #0]
    508c:	9214      	str	r2, [sp, #80]	; 0x50
    508e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    5090:	07d2      	lsls	r2, r2, #31
    5092:	d5fa      	bpl.n	508a <PkaDoubleMdf2Mdf+0x116>
    5094:	4a1e      	ldr	r2, [pc, #120]	; (5110 <PkaDoubleMdf2Mdf+0x19c>)
    5096:	601a      	str	r2, [r3, #0]
    5098:	680a      	ldr	r2, [r1, #0]
    509a:	9215      	str	r2, [sp, #84]	; 0x54
    509c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    509e:	07d4      	lsls	r4, r2, #31
    50a0:	d5fa      	bpl.n	5098 <PkaDoubleMdf2Mdf+0x124>
    50a2:	4a1c      	ldr	r2, [pc, #112]	; (5114 <PkaDoubleMdf2Mdf+0x1a0>)
    50a4:	601a      	str	r2, [r3, #0]
    50a6:	680a      	ldr	r2, [r1, #0]
    50a8:	9216      	str	r2, [sp, #88]	; 0x58
    50aa:	9a16      	ldr	r2, [sp, #88]	; 0x58
    50ac:	07d0      	lsls	r0, r2, #31
    50ae:	d5fa      	bpl.n	50a6 <PkaDoubleMdf2Mdf+0x132>
    50b0:	4a19      	ldr	r2, [pc, #100]	; (5118 <PkaDoubleMdf2Mdf+0x1a4>)
    50b2:	601a      	str	r2, [r3, #0]
    50b4:	680a      	ldr	r2, [r1, #0]
    50b6:	9217      	str	r2, [sp, #92]	; 0x5c
    50b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    50ba:	07d2      	lsls	r2, r2, #31
    50bc:	d5fa      	bpl.n	50b4 <PkaDoubleMdf2Mdf+0x140>
    50be:	4a17      	ldr	r2, [pc, #92]	; (511c <PkaDoubleMdf2Mdf+0x1a8>)
    50c0:	601a      	str	r2, [r3, #0]
    50c2:	b018      	add	sp, #96	; 0x60
    50c4:	bd10      	pop	{r4, pc}
    50c6:	bf00      	nop
    50c8:	508410b0 	.word	0x508410b0
    50cc:	50841080 	.word	0x50841080
    50d0:	21659300 	.word	0x21659300
    50d4:	90310400 	.word	0x90310400
    50d8:	90659640 	.word	0x90659640
    50dc:	21618300 	.word	0x21618300
    50e0:	2130c300 	.word	0x2130c300
    50e4:	9064c300 	.word	0x9064c300
    50e8:	90618100 	.word	0x90618100
    50ec:	21104600 	.word	0x21104600
    50f0:	21118100 	.word	0x21118100
    50f4:	21444100 	.word	0x21444100
    50f8:	2920c300 	.word	0x2920c300
    50fc:	c810460c 	.word	0xc810460c
    5100:	21318600 	.word	0x21318600
    5104:	2160c300 	.word	0x2160c300
    5108:	2928c140 	.word	0x2928c140
    510c:	21659640 	.word	0x21659640
    5110:	90311300 	.word	0x90311300
    5114:	29259640 	.word	0x29259640
    5118:	c8144659 	.word	0xc8144659
    511c:	49320440 	.word	0x49320440

00005120 <PkaDoubleMdf2Jcb>:
    5120:	4b49      	ldr	r3, [pc, #292]	; (5248 <PkaDoubleMdf2Jcb+0x128>)
    5122:	b510      	push	{r4, lr}
    5124:	4619      	mov	r1, r3
    5126:	b094      	sub	sp, #80	; 0x50
    5128:	681a      	ldr	r2, [r3, #0]
    512a:	9200      	str	r2, [sp, #0]
    512c:	9a00      	ldr	r2, [sp, #0]
    512e:	07d2      	lsls	r2, r2, #31
    5130:	d5fa      	bpl.n	5128 <PkaDoubleMdf2Jcb+0x8>
    5132:	4b46      	ldr	r3, [pc, #280]	; (524c <PkaDoubleMdf2Jcb+0x12c>)
    5134:	4a46      	ldr	r2, [pc, #280]	; (5250 <PkaDoubleMdf2Jcb+0x130>)
    5136:	601a      	str	r2, [r3, #0]
    5138:	680a      	ldr	r2, [r1, #0]
    513a:	9201      	str	r2, [sp, #4]
    513c:	9a01      	ldr	r2, [sp, #4]
    513e:	07d4      	lsls	r4, r2, #31
    5140:	d5fa      	bpl.n	5138 <PkaDoubleMdf2Jcb+0x18>
    5142:	4a44      	ldr	r2, [pc, #272]	; (5254 <PkaDoubleMdf2Jcb+0x134>)
    5144:	601a      	str	r2, [r3, #0]
    5146:	680a      	ldr	r2, [r1, #0]
    5148:	9202      	str	r2, [sp, #8]
    514a:	9a02      	ldr	r2, [sp, #8]
    514c:	07d0      	lsls	r0, r2, #31
    514e:	d5fa      	bpl.n	5146 <PkaDoubleMdf2Jcb+0x26>
    5150:	4841      	ldr	r0, [pc, #260]	; (5258 <PkaDoubleMdf2Jcb+0x138>)
    5152:	6018      	str	r0, [r3, #0]
    5154:	680a      	ldr	r2, [r1, #0]
    5156:	9203      	str	r2, [sp, #12]
    5158:	9a03      	ldr	r2, [sp, #12]
    515a:	07d2      	lsls	r2, r2, #31
    515c:	d5fa      	bpl.n	5154 <PkaDoubleMdf2Jcb+0x34>
    515e:	4a3f      	ldr	r2, [pc, #252]	; (525c <PkaDoubleMdf2Jcb+0x13c>)
    5160:	601a      	str	r2, [r3, #0]
    5162:	680a      	ldr	r2, [r1, #0]
    5164:	9204      	str	r2, [sp, #16]
    5166:	9a04      	ldr	r2, [sp, #16]
    5168:	07d4      	lsls	r4, r2, #31
    516a:	d5fa      	bpl.n	5162 <PkaDoubleMdf2Jcb+0x42>
    516c:	4a3c      	ldr	r2, [pc, #240]	; (5260 <PkaDoubleMdf2Jcb+0x140>)
    516e:	601a      	str	r2, [r3, #0]
    5170:	680a      	ldr	r2, [r1, #0]
    5172:	9205      	str	r2, [sp, #20]
    5174:	9a05      	ldr	r2, [sp, #20]
    5176:	07d2      	lsls	r2, r2, #31
    5178:	d5fa      	bpl.n	5170 <PkaDoubleMdf2Jcb+0x50>
    517a:	4a3a      	ldr	r2, [pc, #232]	; (5264 <PkaDoubleMdf2Jcb+0x144>)
    517c:	601a      	str	r2, [r3, #0]
    517e:	680a      	ldr	r2, [r1, #0]
    5180:	9206      	str	r2, [sp, #24]
    5182:	9a06      	ldr	r2, [sp, #24]
    5184:	07d4      	lsls	r4, r2, #31
    5186:	d5fa      	bpl.n	517e <PkaDoubleMdf2Jcb+0x5e>
    5188:	4a37      	ldr	r2, [pc, #220]	; (5268 <PkaDoubleMdf2Jcb+0x148>)
    518a:	601a      	str	r2, [r3, #0]
    518c:	680a      	ldr	r2, [r1, #0]
    518e:	9207      	str	r2, [sp, #28]
    5190:	9a07      	ldr	r2, [sp, #28]
    5192:	07d2      	lsls	r2, r2, #31
    5194:	d5fa      	bpl.n	518c <PkaDoubleMdf2Jcb+0x6c>
    5196:	4a35      	ldr	r2, [pc, #212]	; (526c <PkaDoubleMdf2Jcb+0x14c>)
    5198:	601a      	str	r2, [r3, #0]
    519a:	680a      	ldr	r2, [r1, #0]
    519c:	9208      	str	r2, [sp, #32]
    519e:	9a08      	ldr	r2, [sp, #32]
    51a0:	07d4      	lsls	r4, r2, #31
    51a2:	d5fa      	bpl.n	519a <PkaDoubleMdf2Jcb+0x7a>
    51a4:	4a32      	ldr	r2, [pc, #200]	; (5270 <PkaDoubleMdf2Jcb+0x150>)
    51a6:	601a      	str	r2, [r3, #0]
    51a8:	680a      	ldr	r2, [r1, #0]
    51aa:	9209      	str	r2, [sp, #36]	; 0x24
    51ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    51ae:	07d2      	lsls	r2, r2, #31
    51b0:	d5fa      	bpl.n	51a8 <PkaDoubleMdf2Jcb+0x88>
    51b2:	4a30      	ldr	r2, [pc, #192]	; (5274 <PkaDoubleMdf2Jcb+0x154>)
    51b4:	601a      	str	r2, [r3, #0]
    51b6:	680a      	ldr	r2, [r1, #0]
    51b8:	920a      	str	r2, [sp, #40]	; 0x28
    51ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    51bc:	07d4      	lsls	r4, r2, #31
    51be:	d5fa      	bpl.n	51b6 <PkaDoubleMdf2Jcb+0x96>
    51c0:	4a2d      	ldr	r2, [pc, #180]	; (5278 <PkaDoubleMdf2Jcb+0x158>)
    51c2:	601a      	str	r2, [r3, #0]
    51c4:	680a      	ldr	r2, [r1, #0]
    51c6:	920b      	str	r2, [sp, #44]	; 0x2c
    51c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    51ca:	07d2      	lsls	r2, r2, #31
    51cc:	d5fa      	bpl.n	51c4 <PkaDoubleMdf2Jcb+0xa4>
    51ce:	4a2b      	ldr	r2, [pc, #172]	; (527c <PkaDoubleMdf2Jcb+0x15c>)
    51d0:	601a      	str	r2, [r3, #0]
    51d2:	680a      	ldr	r2, [r1, #0]
    51d4:	920c      	str	r2, [sp, #48]	; 0x30
    51d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    51d8:	07d4      	lsls	r4, r2, #31
    51da:	d5fa      	bpl.n	51d2 <PkaDoubleMdf2Jcb+0xb2>
    51dc:	4a28      	ldr	r2, [pc, #160]	; (5280 <PkaDoubleMdf2Jcb+0x160>)
    51de:	601a      	str	r2, [r3, #0]
    51e0:	680a      	ldr	r2, [r1, #0]
    51e2:	920d      	str	r2, [sp, #52]	; 0x34
    51e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    51e6:	07d2      	lsls	r2, r2, #31
    51e8:	d5fa      	bpl.n	51e0 <PkaDoubleMdf2Jcb+0xc0>
    51ea:	4a26      	ldr	r2, [pc, #152]	; (5284 <PkaDoubleMdf2Jcb+0x164>)
    51ec:	601a      	str	r2, [r3, #0]
    51ee:	680a      	ldr	r2, [r1, #0]
    51f0:	920e      	str	r2, [sp, #56]	; 0x38
    51f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    51f4:	07d4      	lsls	r4, r2, #31
    51f6:	d5fa      	bpl.n	51ee <PkaDoubleMdf2Jcb+0xce>
    51f8:	4a23      	ldr	r2, [pc, #140]	; (5288 <PkaDoubleMdf2Jcb+0x168>)
    51fa:	601a      	str	r2, [r3, #0]
    51fc:	680a      	ldr	r2, [r1, #0]
    51fe:	920f      	str	r2, [sp, #60]	; 0x3c
    5200:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5202:	07d2      	lsls	r2, r2, #31
    5204:	d5fa      	bpl.n	51fc <PkaDoubleMdf2Jcb+0xdc>
    5206:	4a21      	ldr	r2, [pc, #132]	; (528c <PkaDoubleMdf2Jcb+0x16c>)
    5208:	601a      	str	r2, [r3, #0]
    520a:	4b0f      	ldr	r3, [pc, #60]	; (5248 <PkaDoubleMdf2Jcb+0x128>)
    520c:	4619      	mov	r1, r3
    520e:	681c      	ldr	r4, [r3, #0]
    5210:	9410      	str	r4, [sp, #64]	; 0x40
    5212:	9c10      	ldr	r4, [sp, #64]	; 0x40
    5214:	07e4      	lsls	r4, r4, #31
    5216:	d5fa      	bpl.n	520e <PkaDoubleMdf2Jcb+0xee>
    5218:	4b0c      	ldr	r3, [pc, #48]	; (524c <PkaDoubleMdf2Jcb+0x12c>)
    521a:	6018      	str	r0, [r3, #0]
    521c:	6808      	ldr	r0, [r1, #0]
    521e:	9011      	str	r0, [sp, #68]	; 0x44
    5220:	9811      	ldr	r0, [sp, #68]	; 0x44
    5222:	07c4      	lsls	r4, r0, #31
    5224:	d5fa      	bpl.n	521c <PkaDoubleMdf2Jcb+0xfc>
    5226:	601a      	str	r2, [r3, #0]
    5228:	680a      	ldr	r2, [r1, #0]
    522a:	9212      	str	r2, [sp, #72]	; 0x48
    522c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    522e:	07d0      	lsls	r0, r2, #31
    5230:	d5fa      	bpl.n	5228 <PkaDoubleMdf2Jcb+0x108>
    5232:	4a17      	ldr	r2, [pc, #92]	; (5290 <PkaDoubleMdf2Jcb+0x170>)
    5234:	601a      	str	r2, [r3, #0]
    5236:	680a      	ldr	r2, [r1, #0]
    5238:	9213      	str	r2, [sp, #76]	; 0x4c
    523a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    523c:	07d2      	lsls	r2, r2, #31
    523e:	d5fa      	bpl.n	5236 <PkaDoubleMdf2Jcb+0x116>
    5240:	4a14      	ldr	r2, [pc, #80]	; (5294 <PkaDoubleMdf2Jcb+0x174>)
    5242:	601a      	str	r2, [r3, #0]
    5244:	b014      	add	sp, #80	; 0x50
    5246:	bd10      	pop	{r4, pc}
    5248:	508410b0 	.word	0x508410b0
    524c:	50841080 	.word	0x50841080
    5250:	21659080 	.word	0x21659080
    5254:	90090400 	.word	0x90090400
    5258:	90659640 	.word	0x90659640
    525c:	21618080 	.word	0x21618080
    5260:	21082080 	.word	0x21082080
    5264:	90642080 	.word	0x90642080
    5268:	90618100 	.word	0x90618100
    526c:	21104600 	.word	0x21104600
    5270:	21118100 	.word	0x21118100
    5274:	21444100 	.word	0x21444100
    5278:	29202080 	.word	0x29202080
    527c:	c8104602 	.word	0xc8104602
    5280:	21098600 	.word	0x21098600
    5284:	21602080 	.word	0x21602080
    5288:	29282140 	.word	0x29282140
    528c:	21659640 	.word	0x21659640
    5290:	29259640 	.word	0x29259640
    5294:	c8144659 	.word	0xc8144659

00005298 <PkaAddJcbAfn2Mdf>:
    5298:	4b50      	ldr	r3, [pc, #320]	; (53dc <PkaAddJcbAfn2Mdf+0x144>)
    529a:	b510      	push	{r4, lr}
    529c:	461c      	mov	r4, r3
    529e:	b096      	sub	sp, #88	; 0x58
    52a0:	681a      	ldr	r2, [r3, #0]
    52a2:	9201      	str	r2, [sp, #4]
    52a4:	9a01      	ldr	r2, [sp, #4]
    52a6:	07d2      	lsls	r2, r2, #31
    52a8:	d5fa      	bpl.n	52a0 <PkaAddJcbAfn2Mdf+0x8>
    52aa:	4b4d      	ldr	r3, [pc, #308]	; (53e0 <PkaAddJcbAfn2Mdf+0x148>)
    52ac:	4a4d      	ldr	r2, [pc, #308]	; (53e4 <PkaAddJcbAfn2Mdf+0x14c>)
    52ae:	601a      	str	r2, [r3, #0]
    52b0:	6822      	ldr	r2, [r4, #0]
    52b2:	9202      	str	r2, [sp, #8]
    52b4:	9a02      	ldr	r2, [sp, #8]
    52b6:	07d2      	lsls	r2, r2, #31
    52b8:	d5fa      	bpl.n	52b0 <PkaAddJcbAfn2Mdf+0x18>
    52ba:	4a4b      	ldr	r2, [pc, #300]	; (53e8 <PkaAddJcbAfn2Mdf+0x150>)
    52bc:	601a      	str	r2, [r3, #0]
    52be:	4a4b      	ldr	r2, [pc, #300]	; (53ec <PkaAddJcbAfn2Mdf+0x154>)
    52c0:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
    52c4:	6822      	ldr	r2, [r4, #0]
    52c6:	9203      	str	r2, [sp, #12]
    52c8:	9a03      	ldr	r2, [sp, #12]
    52ca:	07d2      	lsls	r2, r2, #31
    52cc:	d5fa      	bpl.n	52c4 <PkaAddJcbAfn2Mdf+0x2c>
    52ce:	6018      	str	r0, [r3, #0]
    52d0:	6822      	ldr	r2, [r4, #0]
    52d2:	9204      	str	r2, [sp, #16]
    52d4:	9a04      	ldr	r2, [sp, #16]
    52d6:	07d0      	lsls	r0, r2, #31
    52d8:	d5fa      	bpl.n	52d0 <PkaAddJcbAfn2Mdf+0x38>
    52da:	4a45      	ldr	r2, [pc, #276]	; (53f0 <PkaAddJcbAfn2Mdf+0x158>)
    52dc:	601a      	str	r2, [r3, #0]
    52de:	f5a2 0280 	sub.w	r2, r2, #4194304	; 0x400000
    52e2:	ea42 4181 	orr.w	r1, r2, r1, lsl #18
    52e6:	6822      	ldr	r2, [r4, #0]
    52e8:	9205      	str	r2, [sp, #20]
    52ea:	9a05      	ldr	r2, [sp, #20]
    52ec:	07d2      	lsls	r2, r2, #31
    52ee:	d5fa      	bpl.n	52e6 <PkaAddJcbAfn2Mdf+0x4e>
    52f0:	6019      	str	r1, [r3, #0]
    52f2:	6822      	ldr	r2, [r4, #0]
    52f4:	9206      	str	r2, [sp, #24]
    52f6:	9a06      	ldr	r2, [sp, #24]
    52f8:	07d0      	lsls	r0, r2, #31
    52fa:	d5fa      	bpl.n	52f2 <PkaAddJcbAfn2Mdf+0x5a>
    52fc:	4a3d      	ldr	r2, [pc, #244]	; (53f4 <PkaAddJcbAfn2Mdf+0x15c>)
    52fe:	601a      	str	r2, [r3, #0]
    5300:	6822      	ldr	r2, [r4, #0]
    5302:	9207      	str	r2, [sp, #28]
    5304:	9a07      	ldr	r2, [sp, #28]
    5306:	07d1      	lsls	r1, r2, #31
    5308:	d5fa      	bpl.n	5300 <PkaAddJcbAfn2Mdf+0x68>
    530a:	4a3b      	ldr	r2, [pc, #236]	; (53f8 <PkaAddJcbAfn2Mdf+0x160>)
    530c:	601a      	str	r2, [r3, #0]
    530e:	6822      	ldr	r2, [r4, #0]
    5310:	9208      	str	r2, [sp, #32]
    5312:	9a08      	ldr	r2, [sp, #32]
    5314:	07d2      	lsls	r2, r2, #31
    5316:	d5fa      	bpl.n	530e <PkaAddJcbAfn2Mdf+0x76>
    5318:	4a38      	ldr	r2, [pc, #224]	; (53fc <PkaAddJcbAfn2Mdf+0x164>)
    531a:	601a      	str	r2, [r3, #0]
    531c:	6822      	ldr	r2, [r4, #0]
    531e:	9209      	str	r2, [sp, #36]	; 0x24
    5320:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5322:	07d0      	lsls	r0, r2, #31
    5324:	d5fa      	bpl.n	531c <PkaAddJcbAfn2Mdf+0x84>
    5326:	4a36      	ldr	r2, [pc, #216]	; (5400 <PkaAddJcbAfn2Mdf+0x168>)
    5328:	601a      	str	r2, [r3, #0]
    532a:	6822      	ldr	r2, [r4, #0]
    532c:	920a      	str	r2, [sp, #40]	; 0x28
    532e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5330:	07d1      	lsls	r1, r2, #31
    5332:	d5fa      	bpl.n	532a <PkaAddJcbAfn2Mdf+0x92>
    5334:	4a33      	ldr	r2, [pc, #204]	; (5404 <PkaAddJcbAfn2Mdf+0x16c>)
    5336:	601a      	str	r2, [r3, #0]
    5338:	6822      	ldr	r2, [r4, #0]
    533a:	920b      	str	r2, [sp, #44]	; 0x2c
    533c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    533e:	07d2      	lsls	r2, r2, #31
    5340:	d5fa      	bpl.n	5338 <PkaAddJcbAfn2Mdf+0xa0>
    5342:	4a31      	ldr	r2, [pc, #196]	; (5408 <PkaAddJcbAfn2Mdf+0x170>)
    5344:	601a      	str	r2, [r3, #0]
    5346:	6822      	ldr	r2, [r4, #0]
    5348:	920c      	str	r2, [sp, #48]	; 0x30
    534a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    534c:	07d0      	lsls	r0, r2, #31
    534e:	d5fa      	bpl.n	5346 <PkaAddJcbAfn2Mdf+0xae>
    5350:	4a2e      	ldr	r2, [pc, #184]	; (540c <PkaAddJcbAfn2Mdf+0x174>)
    5352:	601a      	str	r2, [r3, #0]
    5354:	6822      	ldr	r2, [r4, #0]
    5356:	920d      	str	r2, [sp, #52]	; 0x34
    5358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    535a:	07d1      	lsls	r1, r2, #31
    535c:	d5fa      	bpl.n	5354 <PkaAddJcbAfn2Mdf+0xbc>
    535e:	4a2c      	ldr	r2, [pc, #176]	; (5410 <PkaAddJcbAfn2Mdf+0x178>)
    5360:	601a      	str	r2, [r3, #0]
    5362:	6822      	ldr	r2, [r4, #0]
    5364:	920e      	str	r2, [sp, #56]	; 0x38
    5366:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    5368:	07d2      	lsls	r2, r2, #31
    536a:	d5fa      	bpl.n	5362 <PkaAddJcbAfn2Mdf+0xca>
    536c:	4a29      	ldr	r2, [pc, #164]	; (5414 <PkaAddJcbAfn2Mdf+0x17c>)
    536e:	601a      	str	r2, [r3, #0]
    5370:	6822      	ldr	r2, [r4, #0]
    5372:	920f      	str	r2, [sp, #60]	; 0x3c
    5374:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    5376:	07d0      	lsls	r0, r2, #31
    5378:	d5fa      	bpl.n	5370 <PkaAddJcbAfn2Mdf+0xd8>
    537a:	4a27      	ldr	r2, [pc, #156]	; (5418 <PkaAddJcbAfn2Mdf+0x180>)
    537c:	601a      	str	r2, [r3, #0]
    537e:	6821      	ldr	r1, [r4, #0]
    5380:	9110      	str	r1, [sp, #64]	; 0x40
    5382:	9910      	ldr	r1, [sp, #64]	; 0x40
    5384:	07c9      	lsls	r1, r1, #31
    5386:	d5fa      	bpl.n	537e <PkaAddJcbAfn2Mdf+0xe6>
    5388:	601a      	str	r2, [r3, #0]
    538a:	4b14      	ldr	r3, [pc, #80]	; (53dc <PkaAddJcbAfn2Mdf+0x144>)
    538c:	461a      	mov	r2, r3
    538e:	6819      	ldr	r1, [r3, #0]
    5390:	9111      	str	r1, [sp, #68]	; 0x44
    5392:	9911      	ldr	r1, [sp, #68]	; 0x44
    5394:	07c8      	lsls	r0, r1, #31
    5396:	d5fa      	bpl.n	538e <PkaAddJcbAfn2Mdf+0xf6>
    5398:	4b11      	ldr	r3, [pc, #68]	; (53e0 <PkaAddJcbAfn2Mdf+0x148>)
    539a:	4920      	ldr	r1, [pc, #128]	; (541c <PkaAddJcbAfn2Mdf+0x184>)
    539c:	6019      	str	r1, [r3, #0]
    539e:	6811      	ldr	r1, [r2, #0]
    53a0:	9112      	str	r1, [sp, #72]	; 0x48
    53a2:	9912      	ldr	r1, [sp, #72]	; 0x48
    53a4:	07c9      	lsls	r1, r1, #31
    53a6:	d5fa      	bpl.n	539e <PkaAddJcbAfn2Mdf+0x106>
    53a8:	491d      	ldr	r1, [pc, #116]	; (5420 <PkaAddJcbAfn2Mdf+0x188>)
    53aa:	6019      	str	r1, [r3, #0]
    53ac:	6811      	ldr	r1, [r2, #0]
    53ae:	9113      	str	r1, [sp, #76]	; 0x4c
    53b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    53b2:	07cc      	lsls	r4, r1, #31
    53b4:	d5fa      	bpl.n	53ac <PkaAddJcbAfn2Mdf+0x114>
    53b6:	490b      	ldr	r1, [pc, #44]	; (53e4 <PkaAddJcbAfn2Mdf+0x14c>)
    53b8:	6019      	str	r1, [r3, #0]
    53ba:	6811      	ldr	r1, [r2, #0]
    53bc:	9114      	str	r1, [sp, #80]	; 0x50
    53be:	9914      	ldr	r1, [sp, #80]	; 0x50
    53c0:	07c8      	lsls	r0, r1, #31
    53c2:	d5fa      	bpl.n	53ba <PkaAddJcbAfn2Mdf+0x122>
    53c4:	4917      	ldr	r1, [pc, #92]	; (5424 <PkaAddJcbAfn2Mdf+0x18c>)
    53c6:	6019      	str	r1, [r3, #0]
    53c8:	6811      	ldr	r1, [r2, #0]
    53ca:	9115      	str	r1, [sp, #84]	; 0x54
    53cc:	9915      	ldr	r1, [sp, #84]	; 0x54
    53ce:	07c9      	lsls	r1, r1, #31
    53d0:	d5fa      	bpl.n	53c8 <PkaAddJcbAfn2Mdf+0x130>
    53d2:	4a15      	ldr	r2, [pc, #84]	; (5428 <PkaAddJcbAfn2Mdf+0x190>)
    53d4:	601a      	str	r2, [r3, #0]
    53d6:	b016      	add	sp, #88	; 0x58
    53d8:	bd10      	pop	{r4, pc}
    53da:	bf00      	nop
    53dc:	508410b0 	.word	0x508410b0
    53e0:	50841080 	.word	0x50841080
    53e4:	90410440 	.word	0x90410440
    53e8:	29298600 	.word	0x29298600
    53ec:	c80110d8 	.word	0xc80110d8
    53f0:	90411440 	.word	0x90411440
    53f4:	29211440 	.word	0x29211440
    53f8:	21651440 	.word	0x21651440
    53fc:	90403400 	.word	0x90403400
    5400:	900c3100 	.word	0x900c3100
    5404:	900c40c0 	.word	0x900c40c0
    5408:	292030c0 	.word	0x292030c0
    540c:	900d9640 	.word	0x900d9640
    5410:	90604100 	.word	0x90604100
    5414:	c8451603 	.word	0xc8451603
    5418:	21118600 	.word	0x21118600
    541c:	21604100 	.word	0x21604100
    5420:	c8444659 	.word	0xc8444659
    5424:	90451440 	.word	0x90451440
    5428:	902d1440 	.word	0x902d1440

0000542c <PkaJcb2Afn>:
    542c:	4826      	ldr	r0, [pc, #152]	; (54c8 <PkaJcb2Afn+0x9c>)
    542e:	b570      	push	{r4, r5, r6, lr}
    5430:	4605      	mov	r5, r0
    5432:	b088      	sub	sp, #32
    5434:	6804      	ldr	r4, [r0, #0]
    5436:	9400      	str	r4, [sp, #0]
    5438:	9c00      	ldr	r4, [sp, #0]
    543a:	07e6      	lsls	r6, r4, #31
    543c:	d5fa      	bpl.n	5434 <PkaJcb2Afn+0x8>
    543e:	4c23      	ldr	r4, [pc, #140]	; (54cc <PkaJcb2Afn+0xa0>)
    5440:	4823      	ldr	r0, [pc, #140]	; (54d0 <PkaJcb2Afn+0xa4>)
    5442:	6004      	str	r4, [r0, #0]
    5444:	4c23      	ldr	r4, [pc, #140]	; (54d4 <PkaJcb2Afn+0xa8>)
    5446:	ea44 4383 	orr.w	r3, r4, r3, lsl #18
    544a:	682c      	ldr	r4, [r5, #0]
    544c:	9401      	str	r4, [sp, #4]
    544e:	9c01      	ldr	r4, [sp, #4]
    5450:	07e4      	lsls	r4, r4, #31
    5452:	d5fa      	bpl.n	544a <PkaJcb2Afn+0x1e>
    5454:	6003      	str	r3, [r0, #0]
    5456:	0193      	lsls	r3, r2, #6
    5458:	ea43 4282 	orr.w	r2, r3, r2, lsl #18
    545c:	f042 4410 	orr.w	r4, r2, #2415919104	; 0x90000000
    5460:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    5464:	682b      	ldr	r3, [r5, #0]
    5466:	9302      	str	r3, [sp, #8]
    5468:	9b02      	ldr	r3, [sp, #8]
    546a:	07de      	lsls	r6, r3, #31
    546c:	d5fa      	bpl.n	5464 <PkaJcb2Afn+0x38>
    546e:	6004      	str	r4, [r0, #0]
    5470:	682b      	ldr	r3, [r5, #0]
    5472:	9303      	str	r3, [sp, #12]
    5474:	9b03      	ldr	r3, [sp, #12]
    5476:	07db      	lsls	r3, r3, #31
    5478:	d5fa      	bpl.n	5470 <PkaJcb2Afn+0x44>
    547a:	4b17      	ldr	r3, [pc, #92]	; (54d8 <PkaJcb2Afn+0xac>)
    547c:	6003      	str	r3, [r0, #0]
    547e:	018b      	lsls	r3, r1, #6
    5480:	ea43 4181 	orr.w	r1, r3, r1, lsl #18
    5484:	f041 4310 	orr.w	r3, r1, #2415919104	; 0x90000000
    5488:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
    548c:	682e      	ldr	r6, [r5, #0]
    548e:	9604      	str	r6, [sp, #16]
    5490:	9e04      	ldr	r6, [sp, #16]
    5492:	07f6      	lsls	r6, r6, #31
    5494:	d5fa      	bpl.n	548c <PkaJcb2Afn+0x60>
    5496:	6003      	str	r3, [r0, #0]
    5498:	682b      	ldr	r3, [r5, #0]
    549a:	9305      	str	r3, [sp, #20]
    549c:	9b05      	ldr	r3, [sp, #20]
    549e:	07de      	lsls	r6, r3, #31
    54a0:	d5fa      	bpl.n	5498 <PkaJcb2Afn+0x6c>
    54a2:	6004      	str	r4, [r0, #0]
    54a4:	f041 4158 	orr.w	r1, r1, #3623878656	; 0xd8000000
    54a8:	682b      	ldr	r3, [r5, #0]
    54aa:	9306      	str	r3, [sp, #24]
    54ac:	9b06      	ldr	r3, [sp, #24]
    54ae:	07dc      	lsls	r4, r3, #31
    54b0:	d5fa      	bpl.n	54a8 <PkaJcb2Afn+0x7c>
    54b2:	6001      	str	r1, [r0, #0]
    54b4:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
    54b8:	682b      	ldr	r3, [r5, #0]
    54ba:	9307      	str	r3, [sp, #28]
    54bc:	9b07      	ldr	r3, [sp, #28]
    54be:	07db      	lsls	r3, r3, #31
    54c0:	d5fa      	bpl.n	54b8 <PkaJcb2Afn+0x8c>
    54c2:	6002      	str	r2, [r0, #0]
    54c4:	b008      	add	sp, #32
    54c6:	bd70      	pop	{r4, r5, r6, pc}
    54c8:	508410b0 	.word	0x508410b0
    54cc:	290221c0 	.word	0x290221c0
    54d0:	50841080 	.word	0x50841080
    54d4:	98007180 	.word	0x98007180
    54d8:	90186180 	.word	0x90186180

000054dc <PkaAddAff>:
    54dc:	4b35      	ldr	r3, [pc, #212]	; (55b4 <PkaAddAff+0xd8>)
    54de:	b08e      	sub	sp, #56	; 0x38
    54e0:	4619      	mov	r1, r3
    54e2:	681a      	ldr	r2, [r3, #0]
    54e4:	9200      	str	r2, [sp, #0]
    54e6:	9a00      	ldr	r2, [sp, #0]
    54e8:	07d2      	lsls	r2, r2, #31
    54ea:	d5fa      	bpl.n	54e2 <PkaAddAff+0x6>
    54ec:	4b32      	ldr	r3, [pc, #200]	; (55b8 <PkaAddAff+0xdc>)
    54ee:	4a33      	ldr	r2, [pc, #204]	; (55bc <PkaAddAff+0xe0>)
    54f0:	601a      	str	r2, [r3, #0]
    54f2:	680a      	ldr	r2, [r1, #0]
    54f4:	9201      	str	r2, [sp, #4]
    54f6:	9a01      	ldr	r2, [sp, #4]
    54f8:	07d0      	lsls	r0, r2, #31
    54fa:	d5fa      	bpl.n	54f2 <PkaAddAff+0x16>
    54fc:	4a30      	ldr	r2, [pc, #192]	; (55c0 <PkaAddAff+0xe4>)
    54fe:	601a      	str	r2, [r3, #0]
    5500:	680a      	ldr	r2, [r1, #0]
    5502:	9202      	str	r2, [sp, #8]
    5504:	9a02      	ldr	r2, [sp, #8]
    5506:	07d2      	lsls	r2, r2, #31
    5508:	d5fa      	bpl.n	5500 <PkaAddAff+0x24>
    550a:	4a2e      	ldr	r2, [pc, #184]	; (55c4 <PkaAddAff+0xe8>)
    550c:	601a      	str	r2, [r3, #0]
    550e:	680a      	ldr	r2, [r1, #0]
    5510:	9203      	str	r2, [sp, #12]
    5512:	9a03      	ldr	r2, [sp, #12]
    5514:	07d0      	lsls	r0, r2, #31
    5516:	d5fa      	bpl.n	550e <PkaAddAff+0x32>
    5518:	4a2b      	ldr	r2, [pc, #172]	; (55c8 <PkaAddAff+0xec>)
    551a:	601a      	str	r2, [r3, #0]
    551c:	680a      	ldr	r2, [r1, #0]
    551e:	9204      	str	r2, [sp, #16]
    5520:	9a04      	ldr	r2, [sp, #16]
    5522:	07d2      	lsls	r2, r2, #31
    5524:	d5fa      	bpl.n	551c <PkaAddAff+0x40>
    5526:	4a29      	ldr	r2, [pc, #164]	; (55cc <PkaAddAff+0xf0>)
    5528:	601a      	str	r2, [r3, #0]
    552a:	680a      	ldr	r2, [r1, #0]
    552c:	9205      	str	r2, [sp, #20]
    552e:	9a05      	ldr	r2, [sp, #20]
    5530:	07d0      	lsls	r0, r2, #31
    5532:	d5fa      	bpl.n	552a <PkaAddAff+0x4e>
    5534:	4a26      	ldr	r2, [pc, #152]	; (55d0 <PkaAddAff+0xf4>)
    5536:	601a      	str	r2, [r3, #0]
    5538:	680a      	ldr	r2, [r1, #0]
    553a:	9206      	str	r2, [sp, #24]
    553c:	9a06      	ldr	r2, [sp, #24]
    553e:	07d2      	lsls	r2, r2, #31
    5540:	d5fa      	bpl.n	5538 <PkaAddAff+0x5c>
    5542:	4a24      	ldr	r2, [pc, #144]	; (55d4 <PkaAddAff+0xf8>)
    5544:	601a      	str	r2, [r3, #0]
    5546:	680a      	ldr	r2, [r1, #0]
    5548:	9207      	str	r2, [sp, #28]
    554a:	9a07      	ldr	r2, [sp, #28]
    554c:	07d0      	lsls	r0, r2, #31
    554e:	d5fa      	bpl.n	5546 <PkaAddAff+0x6a>
    5550:	4a21      	ldr	r2, [pc, #132]	; (55d8 <PkaAddAff+0xfc>)
    5552:	601a      	str	r2, [r3, #0]
    5554:	680a      	ldr	r2, [r1, #0]
    5556:	9208      	str	r2, [sp, #32]
    5558:	9a08      	ldr	r2, [sp, #32]
    555a:	07d2      	lsls	r2, r2, #31
    555c:	d5fa      	bpl.n	5554 <PkaAddAff+0x78>
    555e:	4a1f      	ldr	r2, [pc, #124]	; (55dc <PkaAddAff+0x100>)
    5560:	601a      	str	r2, [r3, #0]
    5562:	680a      	ldr	r2, [r1, #0]
    5564:	9209      	str	r2, [sp, #36]	; 0x24
    5566:	9a09      	ldr	r2, [sp, #36]	; 0x24
    5568:	07d0      	lsls	r0, r2, #31
    556a:	d5fa      	bpl.n	5562 <PkaAddAff+0x86>
    556c:	4a1c      	ldr	r2, [pc, #112]	; (55e0 <PkaAddAff+0x104>)
    556e:	601a      	str	r2, [r3, #0]
    5570:	680a      	ldr	r2, [r1, #0]
    5572:	920a      	str	r2, [sp, #40]	; 0x28
    5574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5576:	07d2      	lsls	r2, r2, #31
    5578:	d5fa      	bpl.n	5570 <PkaAddAff+0x94>
    557a:	4a1a      	ldr	r2, [pc, #104]	; (55e4 <PkaAddAff+0x108>)
    557c:	601a      	str	r2, [r3, #0]
    557e:	6808      	ldr	r0, [r1, #0]
    5580:	900b      	str	r0, [sp, #44]	; 0x2c
    5582:	980b      	ldr	r0, [sp, #44]	; 0x2c
    5584:	07c0      	lsls	r0, r0, #31
    5586:	d5fa      	bpl.n	557e <PkaAddAff+0xa2>
    5588:	601a      	str	r2, [r3, #0]
    558a:	680a      	ldr	r2, [r1, #0]
    558c:	920c      	str	r2, [sp, #48]	; 0x30
    558e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    5590:	07d0      	lsls	r0, r2, #31
    5592:	d5fa      	bpl.n	558a <PkaAddAff+0xae>
    5594:	4a14      	ldr	r2, [pc, #80]	; (55e8 <PkaAddAff+0x10c>)
    5596:	601a      	str	r2, [r3, #0]
    5598:	680a      	ldr	r2, [r1, #0]
    559a:	920d      	str	r2, [sp, #52]	; 0x34
    559c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    559e:	07d2      	lsls	r2, r2, #31
    55a0:	d5fa      	bpl.n	5598 <PkaAddAff+0xbc>
    55a2:	4a12      	ldr	r2, [pc, #72]	; (55ec <PkaAddAff+0x110>)
    55a4:	210e      	movs	r1, #14
    55a6:	601a      	str	r2, [r3, #0]
    55a8:	2000      	movs	r0, #0
    55aa:	230d      	movs	r3, #13
    55ac:	220f      	movs	r2, #15
    55ae:	b00e      	add	sp, #56	; 0x38
    55b0:	f7ff bf3c 	b.w	542c <PkaJcb2Afn>
    55b4:	508410b0 	.word	0x508410b0
    55b8:	50841080 	.word	0x50841080
    55bc:	29014380 	.word	0x29014380
    55c0:	21396340 	.word	0x21396340
    55c4:	29017080 	.word	0x29017080
    55c8:	21542080 	.word	0x21542080
    55cc:	9034d100 	.word	0x9034d100
    55d0:	903440c0 	.word	0x903440c0
    55d4:	292030c0 	.word	0x292030c0
    55d8:	900d53c0 	.word	0x900d53c0
    55dc:	90384100 	.word	0x90384100
    55e0:	c8082383 	.word	0xc8082383
    55e4:	2110e380 	.word	0x2110e380
    55e8:	21384100 	.word	0x21384100
    55ec:	c80843cf 	.word	0xc80843cf

000055f0 <PkaSum2ScalarMullt>:
    55f0:	2301      	movs	r3, #1
    55f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55f6:	b092      	sub	sp, #72	; 0x48
    55f8:	e9cd 3303 	strd	r3, r3, [sp, #12]
    55fc:	4b62      	ldr	r3, [pc, #392]	; (5788 <PkaSum2ScalarMullt+0x198>)
    55fe:	461d      	mov	r5, r3
    5600:	681a      	ldr	r2, [r3, #0]
    5602:	9205      	str	r2, [sp, #20]
    5604:	9a05      	ldr	r2, [sp, #20]
    5606:	07d2      	lsls	r2, r2, #31
    5608:	d5fa      	bpl.n	5600 <PkaSum2ScalarMullt+0x10>
    560a:	4b60      	ldr	r3, [pc, #384]	; (578c <PkaSum2ScalarMullt+0x19c>)
    560c:	4c60      	ldr	r4, [pc, #384]	; (5790 <PkaSum2ScalarMullt+0x1a0>)
    560e:	6023      	str	r3, [r4, #0]
    5610:	4b60      	ldr	r3, [pc, #384]	; (5794 <PkaSum2ScalarMullt+0x1a4>)
    5612:	4619      	mov	r1, r3
    5614:	681a      	ldr	r2, [r3, #0]
    5616:	9206      	str	r2, [sp, #24]
    5618:	9a06      	ldr	r2, [sp, #24]
    561a:	07d7      	lsls	r7, r2, #31
    561c:	d5fa      	bpl.n	5614 <PkaSum2ScalarMullt+0x24>
    561e:	4b5e      	ldr	r3, [pc, #376]	; (5798 <PkaSum2ScalarMullt+0x1a8>)
    5620:	681a      	ldr	r2, [r3, #0]
    5622:	04d6      	lsls	r6, r2, #19
    5624:	f100 80a8 	bmi.w	5778 <PkaSum2ScalarMullt+0x188>
    5628:	682a      	ldr	r2, [r5, #0]
    562a:	9207      	str	r2, [sp, #28]
    562c:	9a07      	ldr	r2, [sp, #28]
    562e:	07d0      	lsls	r0, r2, #31
    5630:	d5fa      	bpl.n	5628 <PkaSum2ScalarMullt+0x38>
    5632:	4a5a      	ldr	r2, [pc, #360]	; (579c <PkaSum2ScalarMullt+0x1ac>)
    5634:	6022      	str	r2, [r4, #0]
    5636:	680a      	ldr	r2, [r1, #0]
    5638:	9208      	str	r2, [sp, #32]
    563a:	9a08      	ldr	r2, [sp, #32]
    563c:	07d2      	lsls	r2, r2, #31
    563e:	d5fa      	bpl.n	5636 <PkaSum2ScalarMullt+0x46>
    5640:	681e      	ldr	r6, [r3, #0]
    5642:	f3c6 3600 	ubfx	r6, r6, #12, #1
    5646:	2e00      	cmp	r6, #0
    5648:	f040 8098 	bne.w	577c <PkaSum2ScalarMullt+0x18c>
    564c:	2012      	movs	r0, #18
    564e:	f7ff f8f3 	bl	4838 <PkaGetRegEffectiveSizeInBits>
    5652:	4607      	mov	r7, r0
    5654:	2013      	movs	r0, #19
    5656:	f7ff f8ef 	bl	4838 <PkaGetRegEffectiveSizeInBits>
    565a:	4287      	cmp	r7, r0
    565c:	bf8c      	ite	hi
    565e:	2012      	movhi	r0, #18
    5660:	2013      	movls	r0, #19
    5662:	f7ff f8e9 	bl	4838 <PkaGetRegEffectiveSizeInBits>
    5666:	1e47      	subs	r7, r0, #1
    5668:	f7ff ff38 	bl	54dc <PkaAddAff>
    566c:	ab03      	add	r3, sp, #12
    566e:	aa01      	add	r2, sp, #4
    5670:	4639      	mov	r1, r7
    5672:	2012      	movs	r0, #18
    5674:	f7ff f926 	bl	48c4 <PkaGetNextMsBit>
    5678:	ab04      	add	r3, sp, #16
    567a:	4680      	mov	r8, r0
    567c:	aa02      	add	r2, sp, #8
    567e:	4639      	mov	r1, r7
    5680:	2013      	movs	r0, #19
    5682:	f7ff f91f 	bl	48c4 <PkaGetNextMsBit>
    5686:	eb00 0048 	add.w	r0, r0, r8, lsl #1
    568a:	2802      	cmp	r0, #2
    568c:	d032      	beq.n	56f4 <PkaSum2ScalarMullt+0x104>
    568e:	2803      	cmp	r0, #3
    5690:	d03e      	beq.n	5710 <PkaSum2ScalarMullt+0x120>
    5692:	2801      	cmp	r0, #1
    5694:	d174      	bne.n	5780 <PkaSum2ScalarMullt+0x190>
    5696:	682b      	ldr	r3, [r5, #0]
    5698:	9309      	str	r3, [sp, #36]	; 0x24
    569a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    569c:	07db      	lsls	r3, r3, #31
    569e:	d5fa      	bpl.n	5696 <PkaSum2ScalarMullt+0xa6>
    56a0:	4b3f      	ldr	r3, [pc, #252]	; (57a0 <PkaSum2ScalarMullt+0x1b0>)
    56a2:	6023      	str	r3, [r4, #0]
    56a4:	682b      	ldr	r3, [r5, #0]
    56a6:	930a      	str	r3, [sp, #40]	; 0x28
    56a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    56aa:	07d8      	lsls	r0, r3, #31
    56ac:	d5fa      	bpl.n	56a4 <PkaSum2ScalarMullt+0xb4>
    56ae:	4b3d      	ldr	r3, [pc, #244]	; (57a4 <PkaSum2ScalarMullt+0x1b4>)
    56b0:	6023      	str	r3, [r4, #0]
    56b2:	682b      	ldr	r3, [r5, #0]
    56b4:	930f      	str	r3, [sp, #60]	; 0x3c
    56b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    56b8:	07d9      	lsls	r1, r3, #31
    56ba:	d5fa      	bpl.n	56b2 <PkaSum2ScalarMullt+0xc2>
    56bc:	4b3a      	ldr	r3, [pc, #232]	; (57a8 <PkaSum2ScalarMullt+0x1b8>)
    56be:	6023      	str	r3, [r4, #0]
    56c0:	682b      	ldr	r3, [r5, #0]
    56c2:	9310      	str	r3, [sp, #64]	; 0x40
    56c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    56c6:	07da      	lsls	r2, r3, #31
    56c8:	d5fa      	bpl.n	56c0 <PkaSum2ScalarMullt+0xd0>
    56ca:	4b38      	ldr	r3, [pc, #224]	; (57ac <PkaSum2ScalarMullt+0x1bc>)
    56cc:	6023      	str	r3, [r4, #0]
    56ce:	682b      	ldr	r3, [r5, #0]
    56d0:	9311      	str	r3, [sp, #68]	; 0x44
    56d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    56d4:	07db      	lsls	r3, r3, #31
    56d6:	d5fa      	bpl.n	56ce <PkaSum2ScalarMullt+0xde>
    56d8:	4b35      	ldr	r3, [pc, #212]	; (57b0 <PkaSum2ScalarMullt+0x1c0>)
    56da:	6023      	str	r3, [r4, #0]
    56dc:	3f01      	subs	r7, #1
    56de:	d525      	bpl.n	572c <PkaSum2ScalarMullt+0x13c>
    56e0:	2310      	movs	r3, #16
    56e2:	2219      	movs	r2, #25
    56e4:	2118      	movs	r1, #24
    56e6:	2000      	movs	r0, #0
    56e8:	f7ff fea0 	bl	542c <PkaJcb2Afn>
    56ec:	4630      	mov	r0, r6
    56ee:	b012      	add	sp, #72	; 0x48
    56f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56f4:	682b      	ldr	r3, [r5, #0]
    56f6:	930b      	str	r3, [sp, #44]	; 0x2c
    56f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    56fa:	07d9      	lsls	r1, r3, #31
    56fc:	d5fa      	bpl.n	56f4 <PkaSum2ScalarMullt+0x104>
    56fe:	4b2d      	ldr	r3, [pc, #180]	; (57b4 <PkaSum2ScalarMullt+0x1c4>)
    5700:	6023      	str	r3, [r4, #0]
    5702:	682b      	ldr	r3, [r5, #0]
    5704:	930c      	str	r3, [sp, #48]	; 0x30
    5706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5708:	07da      	lsls	r2, r3, #31
    570a:	d5fa      	bpl.n	5702 <PkaSum2ScalarMullt+0x112>
    570c:	4b2a      	ldr	r3, [pc, #168]	; (57b8 <PkaSum2ScalarMullt+0x1c8>)
    570e:	e7cf      	b.n	56b0 <PkaSum2ScalarMullt+0xc0>
    5710:	682b      	ldr	r3, [r5, #0]
    5712:	930d      	str	r3, [sp, #52]	; 0x34
    5714:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5716:	07db      	lsls	r3, r3, #31
    5718:	d5fa      	bpl.n	5710 <PkaSum2ScalarMullt+0x120>
    571a:	4b28      	ldr	r3, [pc, #160]	; (57bc <PkaSum2ScalarMullt+0x1cc>)
    571c:	6023      	str	r3, [r4, #0]
    571e:	682b      	ldr	r3, [r5, #0]
    5720:	930e      	str	r3, [sp, #56]	; 0x38
    5722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5724:	07d8      	lsls	r0, r3, #31
    5726:	d5fa      	bpl.n	571e <PkaSum2ScalarMullt+0x12e>
    5728:	4b25      	ldr	r3, [pc, #148]	; (57c0 <PkaSum2ScalarMullt+0x1d0>)
    572a:	e7c1      	b.n	56b0 <PkaSum2ScalarMullt+0xc0>
    572c:	ab03      	add	r3, sp, #12
    572e:	aa01      	add	r2, sp, #4
    5730:	4639      	mov	r1, r7
    5732:	2012      	movs	r0, #18
    5734:	f7ff f8c6 	bl	48c4 <PkaGetNextMsBit>
    5738:	ab04      	add	r3, sp, #16
    573a:	4604      	mov	r4, r0
    573c:	aa02      	add	r2, sp, #8
    573e:	4639      	mov	r1, r7
    5740:	2013      	movs	r0, #19
    5742:	f7ff f8bf 	bl	48c4 <PkaGetNextMsBit>
    5746:	eb10 0444 	adds.w	r4, r0, r4, lsl #1
    574a:	d102      	bne.n	5752 <PkaSum2ScalarMullt+0x162>
    574c:	f7ff fc12 	bl	4f74 <PkaDoubleMdf2Mdf>
    5750:	e7c4      	b.n	56dc <PkaSum2ScalarMullt+0xec>
    5752:	f7ff fce5 	bl	5120 <PkaDoubleMdf2Jcb>
    5756:	2c02      	cmp	r4, #2
    5758:	d008      	beq.n	576c <PkaSum2ScalarMullt+0x17c>
    575a:	2c03      	cmp	r4, #3
    575c:	d009      	beq.n	5772 <PkaSum2ScalarMullt+0x182>
    575e:	2c01      	cmp	r4, #1
    5760:	d110      	bne.n	5784 <PkaSum2ScalarMullt+0x194>
    5762:	2117      	movs	r1, #23
    5764:	2016      	movs	r0, #22
    5766:	f7ff fd97 	bl	5298 <PkaAddJcbAfn2Mdf>
    576a:	e7b7      	b.n	56dc <PkaSum2ScalarMullt+0xec>
    576c:	2115      	movs	r1, #21
    576e:	2014      	movs	r0, #20
    5770:	e7f9      	b.n	5766 <PkaSum2ScalarMullt+0x176>
    5772:	210f      	movs	r1, #15
    5774:	200e      	movs	r0, #14
    5776:	e7f6      	b.n	5766 <PkaSum2ScalarMullt+0x176>
    5778:	4e12      	ldr	r6, [pc, #72]	; (57c4 <PkaSum2ScalarMullt+0x1d4>)
    577a:	e7b7      	b.n	56ec <PkaSum2ScalarMullt+0xfc>
    577c:	4e12      	ldr	r6, [pc, #72]	; (57c8 <PkaSum2ScalarMullt+0x1d8>)
    577e:	e7b5      	b.n	56ec <PkaSum2ScalarMullt+0xfc>
    5780:	4e12      	ldr	r6, [pc, #72]	; (57cc <PkaSum2ScalarMullt+0x1dc>)
    5782:	e7b3      	b.n	56ec <PkaSum2ScalarMullt+0xfc>
    5784:	4e12      	ldr	r6, [pc, #72]	; (57d0 <PkaSum2ScalarMullt+0x1e0>)
    5786:	e7b1      	b.n	56ec <PkaSum2ScalarMullt+0xfc>
    5788:	508410b0 	.word	0x508410b0
    578c:	514a0800 	.word	0x514a0800
    5790:	50841080 	.word	0x50841080
    5794:	508410b4 	.word	0x508410b4
    5798:	50841088 	.word	0x50841088
    579c:	514e0800 	.word	0x514e0800
    57a0:	495a0600 	.word	0x495a0600
    57a4:	495e0640 	.word	0x495e0640
    57a8:	41420400 	.word	0x41420400
    57ac:	49421400 	.word	0x49421400
    57b0:	492e0440 	.word	0x492e0440
    57b4:	49520600 	.word	0x49520600
    57b8:	49560640 	.word	0x49560640
    57bc:	493a0600 	.word	0x493a0600
    57c0:	493e0640 	.word	0x493e0640
    57c4:	00f10806 	.word	0x00f10806
    57c8:	00f10807 	.word	0x00f10807
    57cc:	00f10804 	.word	0x00f10804
    57d0:	00f10805 	.word	0x00f10805

000057d4 <SaSi_HalClearInterruptBit>:
    57d4:	4b01      	ldr	r3, [pc, #4]	; (57dc <SaSi_HalClearInterruptBit+0x8>)
    57d6:	6018      	str	r0, [r3, #0]
    57d8:	4770      	bx	lr
    57da:	bf00      	nop
    57dc:	50841a08 	.word	0x50841a08

000057e0 <SaSi_HalMaskInterrupt>:
    57e0:	4b01      	ldr	r3, [pc, #4]	; (57e8 <SaSi_HalMaskInterrupt+0x8>)
    57e2:	6018      	str	r0, [r3, #0]
    57e4:	4770      	bx	lr
    57e6:	bf00      	nop
    57e8:	50841a04 	.word	0x50841a04

000057ec <SaSi_HalWaitInterrupt>:
    57ec:	4a03      	ldr	r2, [pc, #12]	; (57fc <SaSi_HalWaitInterrupt+0x10>)
    57ee:	6813      	ldr	r3, [r2, #0]
    57f0:	4218      	tst	r0, r3
    57f2:	d0fc      	beq.n	57ee <SaSi_HalWaitInterrupt+0x2>
    57f4:	4a02      	ldr	r2, [pc, #8]	; (5800 <SaSi_HalWaitInterrupt+0x14>)
    57f6:	6010      	str	r0, [r2, #0]
    57f8:	4618      	mov	r0, r3
    57fa:	4770      	bx	lr
    57fc:	50841a00 	.word	0x50841a00
    5800:	50841a08 	.word	0x50841a08

00005804 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    5804:	4770      	bx	lr

00005806 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    5806:	b129      	cbz	r1, 5814 <flash_area_id_from_multi_image_slot+0xe>
    5808:	2901      	cmp	r1, #1
    580a:	bf14      	ite	ne
    580c:	f06f 0015 	mvnne.w	r0, #21
    5810:	2009      	moveq	r0, #9
    5812:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    5814:	2003      	movs	r0, #3
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
}
    5816:	4770      	bx	lr

00005818 <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    5818:	2000      	movs	r0, #0
    581a:	4770      	bx	lr

0000581c <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    581c:	4770      	bx	lr

0000581e <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    581e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5822:	460e      	mov	r6, r1
    5824:	4617      	mov	r7, r2
    5826:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    5828:	4604      	mov	r4, r0
    582a:	b928      	cbnz	r0, 5838 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    582c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    5830:	4640      	mov	r0, r8
    5832:	b003      	add	sp, #12
    5834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    5838:	2900      	cmp	r1, #0
    583a:	d0f7      	beq.n	582c <bootutil_tlv_iter_begin+0xe>
    583c:	2a00      	cmp	r2, #0
    583e:	d0f5      	beq.n	582c <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    5840:	68cb      	ldr	r3, [r1, #12]
    5842:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5844:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    5846:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5848:	2304      	movs	r3, #4
    584a:	4629      	mov	r1, r5
    584c:	eb0d 0203 	add.w	r2, sp, r3
    5850:	f000 fc39 	bl	60c6 <flash_area_read>
    5854:	4680      	mov	r8, r0
    5856:	2800      	cmp	r0, #0
    5858:	d1e8      	bne.n	582c <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    585a:	f646 1208 	movw	r2, #26888	; 0x6908
    585e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5862:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5864:	4291      	cmp	r1, r2
    5866:	d123      	bne.n	58b0 <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5868:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    586c:	4299      	cmp	r1, r3
    586e:	d1dd      	bne.n	582c <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    5870:	2304      	movs	r3, #4
    5872:	4638      	mov	r0, r7
    5874:	eb0d 0203 	add.w	r2, sp, r3
    5878:	4429      	add	r1, r5
    587a:	f000 fc24 	bl	60c6 <flash_area_read>
    587e:	2800      	cmp	r0, #0
    5880:	d1d4      	bne.n	582c <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5882:	f646 1307 	movw	r3, #26887	; 0x6907
    5886:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    588a:	429a      	cmp	r2, r3
    588c:	d1ce      	bne.n	582c <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    588e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    5892:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    5896:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    5898:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    589a:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    589e:	442b      	add	r3, r5
    58a0:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    58a2:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    58a4:	4413      	add	r3, r2
    it->type = type;
    58a6:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    58aa:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    58ac:	6125      	str	r5, [r4, #16]
    return 0;
    58ae:	e7bf      	b.n	5830 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    58b0:	2b00      	cmp	r3, #0
    58b2:	d0e6      	beq.n	5882 <bootutil_tlv_iter_begin+0x64>
    58b4:	e7ba      	b.n	582c <bootutil_tlv_iter_begin+0xe>

000058b6 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    58b6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    58ba:	460f      	mov	r7, r1
    58bc:	4690      	mov	r8, r2
    58be:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    58c0:	4604      	mov	r4, r0
    58c2:	b920      	cbnz	r0, 58ce <bootutil_tlv_iter_next+0x18>
        return -1;
    58c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    58c8:	b003      	add	sp, #12
    58ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    58ce:	6803      	ldr	r3, [r0, #0]
    58d0:	2b00      	cmp	r3, #0
    58d2:	d0f7      	beq.n	58c4 <bootutil_tlv_iter_next+0xe>
    58d4:	6843      	ldr	r3, [r0, #4]
    58d6:	2b00      	cmp	r3, #0
    58d8:	d0f4      	beq.n	58c4 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    58da:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    58de:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    58e2:	429a      	cmp	r2, r3
    58e4:	d216      	bcs.n	5914 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    58e6:	6823      	ldr	r3, [r4, #0]
    58e8:	895b      	ldrh	r3, [r3, #10]
    58ea:	b123      	cbz	r3, 58f6 <bootutil_tlv_iter_next+0x40>
    58ec:	68e3      	ldr	r3, [r4, #12]
    58ee:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    58f0:	bf04      	itt	eq
    58f2:	3304      	addeq	r3, #4
    58f4:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    58f6:	2304      	movs	r3, #4
    58f8:	6921      	ldr	r1, [r4, #16]
    58fa:	6860      	ldr	r0, [r4, #4]
    58fc:	eb0d 0203 	add.w	r2, sp, r3
    5900:	f000 fbe1 	bl	60c6 <flash_area_read>
        if (rc) {
    5904:	2800      	cmp	r0, #0
    5906:	d1dd      	bne.n	58c4 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    5908:	7aa3      	ldrb	r3, [r4, #10]
    590a:	6925      	ldr	r5, [r4, #16]
    590c:	b123      	cbz	r3, 5918 <bootutil_tlv_iter_next+0x62>
    590e:	68e3      	ldr	r3, [r4, #12]
    5910:	42ab      	cmp	r3, r5
    5912:	d801      	bhi.n	5918 <bootutil_tlv_iter_next+0x62>
            return 1;
    5914:	2001      	movs	r0, #1
    5916:	e7d7      	b.n	58c8 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5918:	8921      	ldrh	r1, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    591a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    591e:	4549      	cmp	r1, r9
    5920:	f102 0304 	add.w	r3, r2, #4
    5924:	d003      	beq.n	592e <bootutil_tlv_iter_next+0x78>
    5926:	f8bd c004 	ldrh.w	ip, [sp, #4]
    592a:	458c      	cmp	ip, r1
    592c:	d10b      	bne.n	5946 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    592e:	b116      	cbz	r6, 5936 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    5930:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5934:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    5936:	3504      	adds	r5, #4
    5938:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    593a:	f8a8 2000 	strh.w	r2, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    593e:	6922      	ldr	r2, [r4, #16]
    5940:	4413      	add	r3, r2
    5942:	6123      	str	r3, [r4, #16]
            return 0;
    5944:	e7c0      	b.n	58c8 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5946:	442b      	add	r3, r5
    5948:	6123      	str	r3, [r4, #16]
    594a:	e7c8      	b.n	58de <bootutil_tlv_iter_next+0x28>

0000594c <bootutil_read_bigint>:
{
    594c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    594e:	460c      	mov	r4, r1
    5950:	4606      	mov	r6, r0
    5952:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    5954:	2302      	movs	r3, #2
    5956:	4620      	mov	r0, r4
    5958:	aa01      	add	r2, sp, #4
    595a:	f000 fa3f 	bl	5ddc <mbedtls_asn1_get_tag>
    595e:	4605      	mov	r5, r0
    5960:	b9e8      	cbnz	r0, 599e <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    5962:	9a01      	ldr	r2, [sp, #4]
    5964:	2a1f      	cmp	r2, #31
    5966:	d90e      	bls.n	5986 <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    5968:	f1a2 0120 	sub.w	r1, r2, #32
    596c:	4630      	mov	r0, r6
    596e:	2220      	movs	r2, #32
    5970:	6823      	ldr	r3, [r4, #0]
    5972:	4419      	add	r1, r3
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    5974:	f000 fc40 	bl	61f8 <memcpy>
    *cp += len;
    5978:	6823      	ldr	r3, [r4, #0]
    597a:	9a01      	ldr	r2, [sp, #4]
    597c:	4413      	add	r3, r2
    597e:	6023      	str	r3, [r4, #0]
}
    5980:	4628      	mov	r0, r5
    5982:	b002      	add	sp, #8
    5984:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    5986:	4601      	mov	r1, r0
    5988:	f1c2 0220 	rsb	r2, r2, #32
    598c:	4630      	mov	r0, r6
    598e:	f000 fc3e 	bl	620e <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    5992:	9a01      	ldr	r2, [sp, #4]
    5994:	6821      	ldr	r1, [r4, #0]
    5996:	f1c2 0020 	rsb	r0, r2, #32
    599a:	4430      	add	r0, r6
    599c:	e7ea      	b.n	5974 <bootutil_read_bigint+0x28>
        return -3;
    599e:	f06f 0502 	mvn.w	r5, #2
    59a2:	e7ed      	b.n	5980 <bootutil_read_bigint+0x34>

000059a4 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    59a4:	f000 bc17 	b.w	61d6 <memcmp>

000059a8 <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    59a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
    59ac:	4358      	muls	r0, r3
}
    59ae:	3030      	adds	r0, #48	; 0x30
    59b0:	4770      	bx	lr

000059b2 <boot_status_entries>:
	return fa->fa_id;
    59b2:	780b      	ldrb	r3, [r1, #0]
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    59b4:	2b03      	cmp	r3, #3
    59b6:	d006      	beq.n	59c6 <boot_status_entries+0x14>
    return -1;
    59b8:	2b09      	cmp	r3, #9
    59ba:	bf0c      	ite	eq
    59bc:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    59c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    59c4:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    59c6:	f44f 70c0 	mov.w	r0, #384	; 0x180
}
    59ca:	4770      	bx	lr

000059cc <boot_status_off>:
{
    59cc:	b510      	push	{r4, lr}
    59ce:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    59d0:	f000 fbba 	bl	6148 <flash_area_align>
}
    59d4:	f44f 72c0 	mov.w	r2, #384	; 0x180
    return flash_area_get_size(fap) - off_from_end;
    59d8:	68a3      	ldr	r3, [r4, #8]
    59da:	3b30      	subs	r3, #48	; 0x30
}
    59dc:	fb02 3010 	mls	r0, r2, r0, r3
    59e0:	bd10      	pop	{r4, pc}

000059e2 <boot_write_copy_done>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    59e2:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    59e4:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    59e6:	3918      	subs	r1, #24
    59e8:	f021 0107 	bic.w	r1, r1, #7
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    59ec:	3908      	subs	r1, #8
    59ee:	f000 be59 	b.w	66a4 <boot_write_trailer_flag>

000059f2 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    59f2:	b513      	push	{r0, r1, r4, lr}
    59f4:	4604      	mov	r4, r0
    59f6:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    59f8:	f000 fdf1 	bl	65de <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    59fc:	2304      	movs	r3, #4
    59fe:	f1a0 0108 	sub.w	r1, r0, #8
    5a02:	eb0d 0203 	add.w	r2, sp, r3
    5a06:	4620      	mov	r0, r4
    5a08:	f000 fe20 	bl	664c <boot_write_trailer>
}
    5a0c:	b002      	add	sp, #8
    5a0e:	bd10      	pop	{r4, pc}

00005a10 <boot_read_image_headers>:
{
    5a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5a12:	4613      	mov	r3, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5a14:	9201      	str	r2, [sp, #4]
{
    5a16:	460e      	mov	r6, r1
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5a18:	4602      	mov	r2, r0
    5a1a:	2100      	movs	r1, #0
{
    5a1c:	4605      	mov	r5, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5a1e:	f7fb f98d 	bl	d3c <boot_read_image_header>
        if (rc != 0) {
    5a22:	4604      	mov	r4, r0
    5a24:	b950      	cbnz	r0, 5a3c <boot_read_image_headers+0x2c>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    5a26:	2101      	movs	r1, #1
    5a28:	4628      	mov	r0, r5
    5a2a:	9b01      	ldr	r3, [sp, #4]
    5a2c:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    5a30:	f7fb f984 	bl	d3c <boot_read_image_header>
        if (rc != 0) {
    5a34:	b110      	cbz	r0, 5a3c <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    5a36:	2e00      	cmp	r6, #0
    5a38:	bf18      	it	ne
    5a3a:	4604      	movne	r4, r0
}
    5a3c:	4620      	mov	r0, r4
    5a3e:	b002      	add	sp, #8
    5a40:	bd70      	pop	{r4, r5, r6, pc}

00005a42 <boot_read_image_size.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    5a42:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5a44:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5a46:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    5a48:	460c      	mov	r4, r1
    5a4a:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5a4c:	f7ff fedb 	bl	5806 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    5a50:	4669      	mov	r1, sp
    5a52:	b2c0      	uxtb	r0, r0
    5a54:	f7fc f81c 	bl	1a90 <flash_area_open>
    if (rc != 0) {
    5a58:	bb30      	cbnz	r0, 5aa8 <boot_read_image_size.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5a5a:	212c      	movs	r1, #44	; 0x2c
    5a5c:	fb01 5404 	mla	r4, r1, r4, r5
    5a60:	8921      	ldrh	r1, [r4, #8]
    5a62:	68e3      	ldr	r3, [r4, #12]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5a64:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5a66:	18cd      	adds	r5, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5a68:	2304      	movs	r3, #4
    5a6a:	4629      	mov	r1, r5
    5a6c:	eb0d 0203 	add.w	r2, sp, r3
    5a70:	f000 fb29 	bl	60c6 <flash_area_read>
    5a74:	b9c0      	cbnz	r0, 5aa8 <boot_read_image_size.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5a76:	f646 1308 	movw	r3, #26888	; 0x6908
    5a7a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    5a7e:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5a80:	429a      	cmp	r2, r3
    5a82:	d116      	bne.n	5ab2 <boot_read_image_size.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    5a84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5a88:	429c      	cmp	r4, r3
    5a8a:	d10d      	bne.n	5aa8 <boot_read_image_size.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5a8c:	2304      	movs	r3, #4
    5a8e:	9800      	ldr	r0, [sp, #0]
    5a90:	eb0d 0203 	add.w	r2, sp, r3
    5a94:	1961      	adds	r1, r4, r5
    5a96:	f000 fb16 	bl	60c6 <flash_area_read>
    5a9a:	b928      	cbnz	r0, 5aa8 <boot_read_image_size.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5a9c:	f646 1307 	movw	r3, #26887	; 0x6907
    5aa0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5aa4:	429a      	cmp	r2, r3
    5aa6:	d007      	beq.n	5ab8 <boot_read_image_size.isra.0+0x76>
    flash_area_close(fap);
    5aa8:	9800      	ldr	r0, [sp, #0]
    5aaa:	f000 fb0b 	bl	60c4 <flash_area_close>
}
    5aae:	b002      	add	sp, #8
    5ab0:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    5ab2:	2c00      	cmp	r4, #0
    5ab4:	d0f2      	beq.n	5a9c <boot_read_image_size.isra.0+0x5a>
    5ab6:	e7f7      	b.n	5aa8 <boot_read_image_size.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    5ab8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5abc:	4421      	add	r1, r4
    5abe:	4429      	add	r1, r5
    5ac0:	6031      	str	r1, [r6, #0]
    rc = 0;
    5ac2:	e7f1      	b.n	5aa8 <boot_read_image_size.isra.0+0x66>

00005ac4 <boot_read_sectors>:
{
    5ac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5ac6:	2580      	movs	r5, #128	; 0x80
{
    5ac8:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5aca:	6a42      	ldr	r2, [r0, #36]	; 0x24
    5acc:	a901      	add	r1, sp, #4
    5ace:	2003      	movs	r0, #3
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5ad0:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5ad2:	f7fc f805 	bl	1ae0 <flash_area_get_sectors>
    if (rc != 0) {
    5ad6:	b958      	cbnz	r0, 5af0 <boot_read_sectors+0x2c>
    *out_num_sectors = num_sectors;
    5ad8:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5ada:	2009      	movs	r0, #9
    5adc:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    5ade:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5ae0:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    5ae2:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5ae4:	f7fb fffc 	bl	1ae0 <flash_area_get_sectors>
    if (rc != 0) {
    5ae8:	4605      	mov	r5, r0
    5aea:	b128      	cbz	r0, 5af8 <boot_read_sectors+0x34>
        return BOOT_EFLASH_SEC;
    5aec:	2509      	movs	r5, #9
    5aee:	e000      	b.n	5af2 <boot_read_sectors+0x2e>
        return BOOT_EFLASH;
    5af0:	2501      	movs	r5, #1
}
    5af2:	4628      	mov	r0, r5
    5af4:	b003      	add	sp, #12
    5af6:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    5af8:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5afa:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    5afc:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5afe:	f000 fb23 	bl	6148 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    5b02:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    5b04:	e7f5      	b.n	5af2 <boot_read_sectors+0x2e>

00005b06 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    5b06:	2301      	movs	r3, #1
    5b08:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5b0a:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    5b0e:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    5b10:	2300      	movs	r3, #0
    bs->source = 0;
    5b12:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    5b16:	4770      	bx	lr

00005b18 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5b18:	7943      	ldrb	r3, [r0, #5]
    5b1a:	2b01      	cmp	r3, #1
    5b1c:	d107      	bne.n	5b2e <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5b1e:	6803      	ldr	r3, [r0, #0]
    5b20:	2b01      	cmp	r3, #1
    5b22:	d104      	bne.n	5b2e <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    5b24:	7900      	ldrb	r0, [r0, #4]
    5b26:	1e43      	subs	r3, r0, #1
    5b28:	4258      	negs	r0, r3
    5b2a:	4158      	adcs	r0, r3
    5b2c:	4770      	bx	lr
    5b2e:	2000      	movs	r0, #0
}
    5b30:	4770      	bx	lr

00005b32 <boot_write_status>:
{
    5b32:	b570      	push	{r4, r5, r6, lr}
    5b34:	b086      	sub	sp, #24
    5b36:	4606      	mov	r6, r0
    5b38:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    5b3a:	2003      	movs	r0, #3
    5b3c:	a903      	add	r1, sp, #12
    5b3e:	f7fb ffa7 	bl	1a90 <flash_area_open>
    if (rc != 0) {
    5b42:	bb30      	cbnz	r0, 5b92 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    5b44:	9803      	ldr	r0, [sp, #12]
    5b46:	f7ff ff41 	bl	59cc <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5b4a:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    5b4c:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5b4e:	4628      	mov	r0, r5
    5b50:	f000 f8e5 	bl	5d1e <boot_status_internal_off>
    off = boot_status_off(fap) +
    5b54:	4404      	add	r4, r0
    align = flash_area_align(fap);
    5b56:	9803      	ldr	r0, [sp, #12]
    5b58:	f000 faf6 	bl	6148 <flash_area_align>
    5b5c:	9001      	str	r0, [sp, #4]
    erased_val = flash_area_erased_val(fap);
    5b5e:	9803      	ldr	r0, [sp, #12]
    5b60:	f000 faf9 	bl	6156 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5b64:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    5b66:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    5b68:	a804      	add	r0, sp, #16
    5b6a:	f000 fb50 	bl	620e <memset>
    buf[0] = bs->state;
    5b6e:	792a      	ldrb	r2, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    5b70:	4621      	mov	r1, r4
    buf[0] = bs->state;
    5b72:	f88d 2010 	strb.w	r2, [sp, #16]
    rc = flash_area_write(fap, off, buf, align);
    5b76:	9b01      	ldr	r3, [sp, #4]
    5b78:	9803      	ldr	r0, [sp, #12]
    5b7a:	aa04      	add	r2, sp, #16
    5b7c:	f000 fab8 	bl	60f0 <flash_area_write>
    if (rc != 0) {
    5b80:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    5b82:	9803      	ldr	r0, [sp, #12]
    if (rc != 0) {
    5b84:	bf18      	it	ne
    5b86:	2401      	movne	r4, #1
    flash_area_close(fap);
    5b88:	f000 fa9c 	bl	60c4 <flash_area_close>
}
    5b8c:	4620      	mov	r0, r4
    5b8e:	b006      	add	sp, #24
    5b90:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    5b92:	2401      	movs	r4, #1
    5b94:	e7fa      	b.n	5b8c <boot_write_status+0x5a>

00005b96 <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    5b96:	f000 bac0 	b.w	611a <flash_area_erase>

00005b9a <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    5b9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b9e:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5ba0:	2100      	movs	r1, #0
{
    5ba2:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    5ba4:	4608      	mov	r0, r1
    5ba6:	f7ff fe2e 	bl	5806 <flash_area_id_from_multi_image_slot>
    5baa:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    5bac:	2101      	movs	r1, #1
    5bae:	2000      	movs	r0, #0
    5bb0:	f7ff fe29 	bl	5806 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    5bb4:	7833      	ldrb	r3, [r6, #0]
    5bb6:	429c      	cmp	r4, r3
    5bb8:	d021      	beq.n	5bfe <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    5bba:	4298      	cmp	r0, r3
    5bbc:	d121      	bne.n	5c02 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    5bbe:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    5bc0:	232c      	movs	r3, #44	; 0x2c
    5bc2:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5bc6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    5bc8:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5bca:	f7ff feed 	bl	59a8 <boot_trailer_sz>
    total_sz = 0;
    5bce:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    5bd2:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    5bd4:	3c01      	subs	r4, #1
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    5bd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    5bd8:	4630      	mov	r0, r6
    5bda:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    5bde:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    5be2:	f8d2 9004 	ldr.w	r9, [r2, #4]
    5be6:	681b      	ldr	r3, [r3, #0]
    5be8:	464a      	mov	r2, r9
    5bea:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    5bec:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    5bee:	f7ff ffd2 	bl	5b96 <boot_erase_region>
    } while (total_sz < trailer_sz);
    5bf2:	45b8      	cmp	r8, r7
        sector--;
    5bf4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    } while (total_sz < trailer_sz);
    5bf8:	d3ed      	bcc.n	5bd6 <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    5bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    5bfe:	2500      	movs	r5, #0
    5c00:	e7de      	b.n	5bc0 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    5c02:	2001      	movs	r0, #1
    5c04:	e7f9      	b.n	5bfa <swap_erase_trailer_sectors+0x60>

00005c06 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    5c06:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5c08:	4615      	mov	r5, r2
    5c0a:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5c0c:	2009      	movs	r0, #9
    5c0e:	4669      	mov	r1, sp
    5c10:	f000 fd5f 	bl	66d2 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    5c14:	79e9      	ldrb	r1, [r5, #7]
    5c16:	2901      	cmp	r1, #1
    5c18:	d003      	beq.n	5c22 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    5c1a:	2200      	movs	r2, #0
    5c1c:	4620      	mov	r0, r4
    5c1e:	f000 fd6c 	bl	66fa <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    5c22:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5c26:	2b01      	cmp	r3, #1
    5c28:	d102      	bne.n	5c30 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    5c2a:	4620      	mov	r0, r4
    5c2c:	f000 fd44 	bl	66b8 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    5c30:	68a9      	ldr	r1, [r5, #8]
    5c32:	4620      	mov	r0, r4
    5c34:	f7ff fedd 	bl	59f2 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    5c38:	4620      	mov	r0, r4
    5c3a:	f7fd faef 	bl	321c <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    5c3e:	2000      	movs	r0, #0
    5c40:	b003      	add	sp, #12
    5c42:	bd30      	pop	{r4, r5, pc}

00005c44 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    5c44:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5c46:	460d      	mov	r5, r1
    5c48:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5c4a:	f7fb f95f 	bl	f0c <swap_status_source>
    5c4e:	4604      	mov	r4, r0
    5c50:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    5c52:	b358      	cbz	r0, 5cac <swap_read_status+0x68>
    5c54:	2802      	cmp	r0, #2
    5c56:	d12e      	bne.n	5cb6 <swap_read_status+0x72>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    5c58:	2003      	movs	r0, #3
    5c5a:	a901      	add	r1, sp, #4
    5c5c:	f7fb ff18 	bl	1a90 <flash_area_open>
    if (rc != 0) {
    5c60:	bb58      	cbnz	r0, 5cba <swap_read_status+0x76>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    5c62:	462a      	mov	r2, r5
    5c64:	4631      	mov	r1, r6
    5c66:	9801      	ldr	r0, [sp, #4]
    5c68:	f7fb f8b6 	bl	dd8 <swap_read_status_bytes>
    if (rc == 0) {
    5c6c:	4604      	mov	r4, r0
    5c6e:	b9d0      	cbnz	r0, 5ca6 <swap_read_status+0x62>
        off = boot_swap_info_off(fap);
    5c70:	9801      	ldr	r0, [sp, #4]
    5c72:	f000 fcb4 	bl	65de <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5c76:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    5c78:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5c7a:	f10d 0203 	add.w	r2, sp, #3
    5c7e:	9801      	ldr	r0, [sp, #4]
    5c80:	f000 fa21 	bl	60c6 <flash_area_read>
        if (rc != 0) {
    5c84:	4604      	mov	r4, r0
    5c86:	b9a0      	cbnz	r0, 5cb2 <swap_read_status+0x6e>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    5c88:	2201      	movs	r2, #1
    5c8a:	9801      	ldr	r0, [sp, #4]
    5c8c:	f10d 0103 	add.w	r1, sp, #3
    5c90:	f000 fcb9 	bl	6606 <bootutil_buffer_is_erased>
    5c94:	b110      	cbz	r0, 5c9c <swap_read_status+0x58>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    5c96:	2301      	movs	r3, #1
    5c98:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    5c9c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    5ca0:	f003 030f 	and.w	r3, r3, #15
    5ca4:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    5ca6:	9801      	ldr	r0, [sp, #4]
    5ca8:	f000 fa0c 	bl	60c4 <flash_area_close>

    return rc;
}
    5cac:	4620      	mov	r0, r4
    5cae:	b002      	add	sp, #8
    5cb0:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    5cb2:	2401      	movs	r4, #1
    5cb4:	e7f7      	b.n	5ca6 <swap_read_status+0x62>
    switch (bs->source) {
    5cb6:	2407      	movs	r4, #7
    5cb8:	e7f8      	b.n	5cac <swap_read_status+0x68>
        return BOOT_EFLASH;
    5cba:	2401      	movs	r4, #1
    5cbc:	e7f6      	b.n	5cac <swap_read_status+0x68>

00005cbe <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    5cbe:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5cc0:	2003      	movs	r0, #3
    5cc2:	a901      	add	r1, sp, #4
    5cc4:	f7fb fee4 	bl	1a90 <flash_area_open>
            &fap);
    if (rc != 0) {
    5cc8:	b948      	cbnz	r0, 5cde <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    5cca:	9801      	ldr	r0, [sp, #4]
    5ccc:	f7ff fe89 	bl	59e2 <boot_write_copy_done>
    5cd0:	4604      	mov	r4, r0
    flash_area_close(fap);
    5cd2:	9801      	ldr	r0, [sp, #4]
    5cd4:	f000 f9f6 	bl	60c4 <flash_area_close>
    return rc;
}
    5cd8:	4620      	mov	r0, r4
    5cda:	b002      	add	sp, #8
    5cdc:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    5cde:	2401      	movs	r4, #1
    5ce0:	e7fa      	b.n	5cd8 <swap_set_copy_done+0x1a>

00005ce2 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    5ce2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    5ce4:	2003      	movs	r0, #3
    5ce6:	a901      	add	r1, sp, #4
    5ce8:	f7fb fed2 	bl	1a90 <flash_area_open>
            &fap);
    if (rc != 0) {
    5cec:	b9a8      	cbnz	r0, 5d1a <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    5cee:	9801      	ldr	r0, [sp, #4]
    5cf0:	a902      	add	r1, sp, #8
    5cf2:	f7fd fab3 	bl	325c <boot_read_swap_state>
    if (rc != 0) {
    5cf6:	4604      	mov	r4, r0
    5cf8:	b968      	cbnz	r0, 5d16 <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    5cfa:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5cfe:	2b03      	cmp	r3, #3
    5d00:	d103      	bne.n	5d0a <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    5d02:	9801      	ldr	r0, [sp, #4]
    5d04:	f000 fcd8 	bl	66b8 <boot_write_image_ok>
    5d08:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    5d0a:	9801      	ldr	r0, [sp, #4]
    5d0c:	f000 f9da 	bl	60c4 <flash_area_close>
    return rc;
}
    5d10:	4620      	mov	r0, r4
    5d12:	b004      	add	sp, #16
    5d14:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    5d16:	2401      	movs	r4, #1
    5d18:	e7f7      	b.n	5d0a <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    5d1a:	2401      	movs	r4, #1
    5d1c:	e7f8      	b.n	5d10 <swap_set_image_ok+0x2e>

00005d1e <boot_status_internal_off>:
{
    5d1e:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5d20:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5d22:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5d24:	2b01      	cmp	r3, #1
    5d26:	bf0a      	itet	eq
    5d28:	2301      	moveq	r3, #1
    5d2a:	2302      	movne	r3, #2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5d2c:	2500      	moveq	r5, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5d2e:	fb01 f403 	mul.w	r4, r1, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5d32:	6803      	ldr	r3, [r0, #0]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5d34:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5d38:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    5d3c:	fb04 f303 	mul.w	r3, r4, r3
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5d40:	bf18      	it	ne
    5d42:	01cd      	lslne	r5, r1, #7
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5d44:	fb01 3102 	mla	r1, r1, r2, r3
}
    5d48:	1948      	adds	r0, r1, r5
    5d4a:	bd30      	pop	{r4, r5, pc}

00005d4c <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    5d4c:	6803      	ldr	r3, [r0, #0]
{
    5d4e:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    5d50:	1acd      	subs	r5, r1, r3
    5d52:	2d00      	cmp	r5, #0
    5d54:	dd0d      	ble.n	5d72 <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    5d56:	f993 6000 	ldrsb.w	r6, [r3]
    5d5a:	781c      	ldrb	r4, [r3, #0]
    5d5c:	2e00      	cmp	r6, #0
    5d5e:	db0b      	blt.n	5d78 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    5d60:	1c5c      	adds	r4, r3, #1
    5d62:	6004      	str	r4, [r0, #0]
    5d64:	781b      	ldrb	r3, [r3, #0]
    5d66:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    5d68:	6803      	ldr	r3, [r0, #0]
    5d6a:	1ac9      	subs	r1, r1, r3
    5d6c:	6813      	ldr	r3, [r2, #0]
    5d6e:	428b      	cmp	r3, r1
    5d70:	d932      	bls.n	5dd8 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    5d72:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    5d76:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    5d78:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    5d7c:	3c01      	subs	r4, #1
    5d7e:	2c03      	cmp	r4, #3
    5d80:	d827      	bhi.n	5dd2 <mbedtls_asn1_get_len+0x86>
    5d82:	e8df f004 	tbb	[pc, r4]
    5d86:	0902      	.short	0x0902
    5d88:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    5d8a:	2d01      	cmp	r5, #1
    5d8c:	d0f1      	beq.n	5d72 <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    5d8e:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    5d90:	3302      	adds	r3, #2
            *len = (*p)[1];
    5d92:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    5d94:	6003      	str	r3, [r0, #0]
            break;
    5d96:	e7e7      	b.n	5d68 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    5d98:	2d02      	cmp	r5, #2
    5d9a:	ddea      	ble.n	5d72 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    5d9c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    5da0:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    5da2:	ba64      	rev16	r4, r4
    5da4:	b2a4      	uxth	r4, r4
    5da6:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    5da8:	e7f4      	b.n	5d94 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    5daa:	2d03      	cmp	r5, #3
    5dac:	dde1      	ble.n	5d72 <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    5dae:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    5db0:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    5db2:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    5db4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    5db8:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    5dba:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    5dbc:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    5dbe:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    5dc0:	e7e8      	b.n	5d94 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    5dc2:	2d04      	cmp	r5, #4
    5dc4:	ddd5      	ble.n	5d72 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    5dc6:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    5dca:	3305      	adds	r3, #5
    5dcc:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    5dce:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    5dd0:	e7e0      	b.n	5d94 <mbedtls_asn1_get_len+0x48>
        switch( **p & 0x7F )
    5dd2:	f06f 0063 	mvn.w	r0, #99	; 0x63
    5dd6:	e7ce      	b.n	5d76 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    5dd8:	2000      	movs	r0, #0
    5dda:	e7cc      	b.n	5d76 <mbedtls_asn1_get_len+0x2a>

00005ddc <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    5ddc:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    5dde:	6804      	ldr	r4, [r0, #0]
    5de0:	1b0e      	subs	r6, r1, r4
    5de2:	2e00      	cmp	r6, #0
    5de4:	dd07      	ble.n	5df6 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    5de6:	7826      	ldrb	r6, [r4, #0]
    5de8:	429e      	cmp	r6, r3
    5dea:	d108      	bne.n	5dfe <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    5dec:	3401      	adds	r4, #1
    5dee:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    5df0:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    5df2:	f7ff bfab 	b.w	5d4c <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    5df6:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    5dfa:	bc70      	pop	{r4, r5, r6}
    5dfc:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    5dfe:	f06f 0061 	mvn.w	r0, #97	; 0x61
    5e02:	e7fa      	b.n	5dfa <mbedtls_asn1_get_tag+0x1e>

00005e04 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    5e04:	b538      	push	{r3, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    5e06:	2303      	movs	r3, #3
{
    5e08:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    5e0a:	f7ff ffe7 	bl	5ddc <mbedtls_asn1_get_tag>
    5e0e:	b918      	cbnz	r0, 5e18 <mbedtls_asn1_get_bitstring_null+0x14>
        return( ret );

    if( *len == 0 )
    5e10:	6813      	ldr	r3, [r2, #0]
    5e12:	b913      	cbnz	r3, 5e1a <mbedtls_asn1_get_bitstring_null+0x16>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    5e14:	f06f 0067 	mvn.w	r0, #103	; 0x67
    if( **p != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    ++( *p );

    return( 0 );
}
    5e18:	bd38      	pop	{r3, r4, r5, pc}
    --( *len );
    5e1a:	3b01      	subs	r3, #1
    5e1c:	6013      	str	r3, [r2, #0]
    if( **p != 0 )
    5e1e:	6823      	ldr	r3, [r4, #0]
    5e20:	781a      	ldrb	r2, [r3, #0]
    5e22:	2a00      	cmp	r2, #0
    5e24:	d1f6      	bne.n	5e14 <mbedtls_asn1_get_bitstring_null+0x10>
    ++( *p );
    5e26:	3301      	adds	r3, #1
    5e28:	6023      	str	r3, [r4, #0]
    return( 0 );
    5e2a:	e7f5      	b.n	5e18 <mbedtls_asn1_get_bitstring_null+0x14>

00005e2c <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    5e2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5e30:	4690      	mov	r8, r2
    5e32:	461f      	mov	r7, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    5e34:	aa01      	add	r2, sp, #4
    5e36:	2330      	movs	r3, #48	; 0x30
{
    5e38:	4605      	mov	r5, r0
    5e3a:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    5e3c:	f7ff ffce 	bl	5ddc <mbedtls_asn1_get_tag>
    5e40:	4604      	mov	r4, r0
    5e42:	b9f8      	cbnz	r0, 5e84 <mbedtls_asn1_get_alg+0x58>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    5e44:	682e      	ldr	r6, [r5, #0]
    5e46:	eba9 0906 	sub.w	r9, r9, r6
    5e4a:	f1b9 0f00 	cmp.w	r9, #0
    5e4e:	dd35      	ble.n	5ebc <mbedtls_asn1_get_alg+0x90>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    5e50:	4642      	mov	r2, r8
    end = *p + len;
    5e52:	9901      	ldr	r1, [sp, #4]
    alg->tag = **p;
    5e54:	7833      	ldrb	r3, [r6, #0]
    end = *p + len;
    5e56:	440e      	add	r6, r1
    alg->tag = **p;
    5e58:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    5e5c:	4631      	mov	r1, r6
    5e5e:	2306      	movs	r3, #6
    5e60:	4628      	mov	r0, r5
    5e62:	f7ff ffbb 	bl	5ddc <mbedtls_asn1_get_tag>
    5e66:	4604      	mov	r4, r0
    5e68:	b960      	cbnz	r0, 5e84 <mbedtls_asn1_get_alg+0x58>
        return( ret );

    alg->p = *p;
    5e6a:	682a      	ldr	r2, [r5, #0]
    *p += alg->len;
    5e6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    alg->p = *p;
    5e70:	f8c8 2008 	str.w	r2, [r8, #8]
    *p += alg->len;
    5e74:	1853      	adds	r3, r2, r1

    if( *p == end )
    5e76:	42b3      	cmp	r3, r6
    *p += alg->len;
    5e78:	602b      	str	r3, [r5, #0]
    if( *p == end )
    5e7a:	d107      	bne.n	5e8c <mbedtls_asn1_get_alg+0x60>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    5e7c:	210c      	movs	r1, #12
    5e7e:	4638      	mov	r0, r7
    5e80:	f7fe f95a 	bl	4138 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    5e84:	4620      	mov	r0, r4
    5e86:	b003      	add	sp, #12
    5e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
    5e8c:	5c51      	ldrb	r1, [r2, r1]
    5e8e:	463a      	mov	r2, r7
    (*p)++;
    5e90:	3301      	adds	r3, #1
    params->tag = **p;
    5e92:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    5e96:	4628      	mov	r0, r5
    5e98:	4631      	mov	r1, r6
    (*p)++;
    5e9a:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    5e9c:	f7ff ff56 	bl	5d4c <mbedtls_asn1_get_len>
    5ea0:	4604      	mov	r4, r0
    5ea2:	2800      	cmp	r0, #0
    5ea4:	d1ee      	bne.n	5e84 <mbedtls_asn1_get_alg+0x58>
    params->p = *p;
    5ea6:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    5ea8:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    5eaa:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    5eac:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    5eae:	42b3      	cmp	r3, r6
    5eb0:	bf0c      	ite	eq
    5eb2:	4604      	moveq	r4, r0
    5eb4:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    *p += params->len;
    5eb8:	602b      	str	r3, [r5, #0]
    if( *p != end )
    5eba:	e7e3      	b.n	5e84 <mbedtls_asn1_get_alg+0x58>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    5ebc:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    5ec0:	e7e0      	b.n	5e84 <mbedtls_asn1_get_alg+0x58>

00005ec2 <cc310_sha256_update>:
{
    5ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    5ec4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
    5ec8:	4605      	mov	r5, r0
    5eca:	4614      	mov	r4, r2
    5ecc:	af00      	add	r7, sp, #0
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    5ece:	d210      	bcs.n	5ef2 <cc310_sha256_update+0x30>
    5ed0:	466e      	mov	r6, sp
        uint8_t stack_buffer[data_len];
    5ed2:	1dd3      	adds	r3, r2, #7
    5ed4:	f023 0307 	bic.w	r3, r3, #7
    5ed8:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(stack_buffer, data, block_len);
    5edc:	4668      	mov	r0, sp
    5ede:	f000 f98b 	bl	61f8 <memcpy>
        nrf_cc310_bl_hash_sha256_update(ctx, stack_buffer, block_len);
    5ee2:	4669      	mov	r1, sp
    5ee4:	4622      	mov	r2, r4
    5ee6:	4628      	mov	r0, r5
    5ee8:	f7fe fbe0 	bl	46ac <nrf_cc310_bl_hash_sha256_update>
    5eec:	46b5      	mov	sp, r6
};
    5eee:	46bd      	mov	sp, r7
    5ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_cc310_bl_hash_sha256_update(ctx, data, data_len);
    5ef2:	f7fe fbdb 	bl	46ac <nrf_cc310_bl_hash_sha256_update>
};
    5ef6:	e7fa      	b.n	5eee <cc310_sha256_update+0x2c>

00005ef8 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    5ef8:	b160      	cbz	r0, 5f14 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5efa:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5efc:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5f00:	2b01      	cmp	r3, #1
    5f02:	d003      	beq.n	5f0c <sys_notify_validate+0x14>
    5f04:	2b03      	cmp	r3, #3
    5f06:	d105      	bne.n	5f14 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5f08:	6803      	ldr	r3, [r0, #0]
    5f0a:	b11b      	cbz	r3, 5f14 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5f0c:	2300      	movs	r3, #0
    5f0e:	6083      	str	r3, [r0, #8]
    5f10:	4618      	mov	r0, r3
    5f12:	4770      	bx	lr
		return -EINVAL;
    5f14:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5f18:	4770      	bx	lr

00005f1a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5f1a:	2200      	movs	r2, #0
    5f1c:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5f1e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    5f20:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
    5f24:	2b03      	cmp	r3, #3
	sys_notify_generic_callback rv = NULL;
    5f26:	bf14      	ite	ne
    5f28:	4613      	movne	r3, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5f2a:	6803      	ldreq	r3, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5f2c:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5f2e:	4618      	mov	r0, r3
    5f30:	4770      	bx	lr

00005f32 <arch_printk_char_out>:
}
    5f32:	2000      	movs	r0, #0
    5f34:	4770      	bx	lr

00005f36 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    5f36:	b40f      	push	{r0, r1, r2, r3}
    5f38:	b507      	push	{r0, r1, r2, lr}
    5f3a:	a904      	add	r1, sp, #16
    5f3c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    5f40:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    5f42:	f7fb fa51 	bl	13e8 <vprintk>

	va_end(ap);
}
    5f46:	b003      	add	sp, #12
    5f48:	f85d eb04 	ldr.w	lr, [sp], #4
    5f4c:	b004      	add	sp, #16
    5f4e:	4770      	bx	lr

00005f50 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5f50:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5f52:	f013 0307 	ands.w	r3, r3, #7
    5f56:	d105      	bne.n	5f64 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    5f58:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    5f5a:	2b00      	cmp	r3, #0
    5f5c:	bf0c      	ite	eq
    5f5e:	2000      	moveq	r0, #0
    5f60:	2003      	movne	r0, #3
    5f62:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5f64:	2b02      	cmp	r3, #2
    5f66:	d105      	bne.n	5f74 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    5f68:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	bf14      	ite	ne
    5f6e:	2000      	movne	r0, #0
    5f70:	2004      	moveq	r0, #4
    5f72:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    5f74:	2b01      	cmp	r3, #1
    5f76:	d105      	bne.n	5f84 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    5f78:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	bf0c      	ite	eq
    5f7e:	2000      	moveq	r0, #0
    5f80:	2005      	movne	r0, #5
    5f82:	4770      	bx	lr
	int evt = EVT_NOP;
    5f84:	2000      	movs	r0, #0
}
    5f86:	4770      	bx	lr

00005f88 <notify_one>:
{
    5f88:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5f8a:	460d      	mov	r5, r1
    5f8c:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5f8e:	4619      	mov	r1, r3
    5f90:	1d28      	adds	r0, r5, #4
{
    5f92:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5f94:	9300      	str	r3, [sp, #0]
    5f96:	f7ff ffc0 	bl	5f1a <sys_notify_finalize>
	if (cb) {
    5f9a:	4604      	mov	r4, r0
    5f9c:	b140      	cbz	r0, 5fb0 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5f9e:	e9dd 3200 	ldrd	r3, r2, [sp]
    5fa2:	4629      	mov	r1, r5
    5fa4:	4630      	mov	r0, r6
    5fa6:	46a4      	mov	ip, r4
}
    5fa8:	b002      	add	sp, #8
    5faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
    5fae:	4760      	bx	ip
}
    5fb0:	b002      	add	sp, #8
    5fb2:	bd70      	pop	{r4, r5, r6, pc}

00005fb4 <transition_complete>:
{
    5fb4:	b410      	push	{r4}
    5fb6:	f04f 0420 	mov.w	r4, #32
    5fba:	f3ef 8211 	mrs	r2, BASEPRI
    5fbe:	f384 8812 	msr	BASEPRI_MAX, r4
    5fc2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    5fc6:	6141      	str	r1, [r0, #20]
}
    5fc8:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    5fcc:	2101      	movs	r1, #1
    5fce:	f7fb ba19 	b.w	1404 <process_event>

00005fd2 <validate_args>:
{
    5fd2:	b510      	push	{r4, lr}
    5fd4:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5fd6:	b140      	cbz	r0, 5fea <validate_args+0x18>
    5fd8:	b139      	cbz	r1, 5fea <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5fda:	1d08      	adds	r0, r1, #4
    5fdc:	f7ff ff8c 	bl	5ef8 <sys_notify_validate>
	if ((rv == 0)
    5fe0:	b928      	cbnz	r0, 5fee <validate_args+0x1c>
	    && ((cli->notify.flags
    5fe2:	68a3      	ldr	r3, [r4, #8]
    5fe4:	f033 0303 	bics.w	r3, r3, #3
    5fe8:	d001      	beq.n	5fee <validate_args+0x1c>
		rv = -EINVAL;
    5fea:	f06f 0015 	mvn.w	r0, #21
}
    5fee:	bd10      	pop	{r4, pc}

00005ff0 <onoff_manager_init>:
{
    5ff0:	b538      	push	{r3, r4, r5, lr}
    5ff2:	460c      	mov	r4, r1
	if ((mgr == NULL)
    5ff4:	4605      	mov	r5, r0
    5ff6:	b158      	cbz	r0, 6010 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    5ff8:	b151      	cbz	r1, 6010 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5ffa:	680b      	ldr	r3, [r1, #0]
    5ffc:	b143      	cbz	r3, 6010 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5ffe:	684b      	ldr	r3, [r1, #4]
    6000:	b133      	cbz	r3, 6010 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6002:	221c      	movs	r2, #28
    6004:	2100      	movs	r1, #0
    6006:	f000 f902 	bl	620e <memset>
	return 0;
    600a:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    600c:	612c      	str	r4, [r5, #16]
}
    600e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6010:	f06f 0015 	mvn.w	r0, #21
    6014:	e7fb      	b.n	600e <onoff_manager_init+0x1e>

00006016 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6016:	b570      	push	{r4, r5, r6, lr}
    6018:	4604      	mov	r4, r0
    601a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    601c:	f7ff ffd9 	bl	5fd2 <validate_args>

	if (rv < 0) {
    6020:	1e05      	subs	r5, r0, #0
    6022:	db31      	blt.n	6088 <onoff_request+0x72>
    6024:	f04f 0320 	mov.w	r3, #32
    6028:	f3ef 8111 	mrs	r1, BASEPRI
    602c:	f383 8812 	msr	BASEPRI_MAX, r3
    6030:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    6034:	f64f 75ff 	movw	r5, #65535	; 0xffff
    6038:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    603a:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    603c:	42ab      	cmp	r3, r5
    603e:	f000 0207 	and.w	r2, r0, #7
    6042:	d02e      	beq.n	60a2 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    6044:	2a02      	cmp	r2, #2
    6046:	d10e      	bne.n	6066 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    6048:	3301      	adds	r3, #1
    604a:	8363      	strh	r3, [r4, #26]
	rv = state;
    604c:	4615      	mov	r5, r2
		notify = true;
    604e:	2301      	movs	r3, #1
	__asm__ volatile(
    6050:	f381 8811 	msr	BASEPRI, r1
    6054:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    6058:	b1b3      	cbz	r3, 6088 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    605a:	2300      	movs	r3, #0
    605c:	4631      	mov	r1, r6
    605e:	4620      	mov	r0, r4
    6060:	f7ff ff92 	bl	5f88 <notify_one>
    6064:	e010      	b.n	6088 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    6066:	0783      	lsls	r3, r0, #30
    6068:	d001      	beq.n	606e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    606a:	2a06      	cmp	r2, #6
    606c:	d10e      	bne.n	608c <onoff_request+0x76>
	parent->next = child;
    606e:	2300      	movs	r3, #0
    6070:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    6072:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    6074:	b993      	cbnz	r3, 609c <onoff_request+0x86>
	list->head = node;
    6076:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    607a:	4615      	mov	r5, r2
    607c:	b962      	cbnz	r2, 6098 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    607e:	460a      	mov	r2, r1
    6080:	4620      	mov	r0, r4
    6082:	2102      	movs	r1, #2
    6084:	f7fb f9be 	bl	1404 <process_event>
		}
	}

	return rv;
}
    6088:	4628      	mov	r0, r5
    608a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    608c:	2a05      	cmp	r2, #5
    608e:	bf0c      	ite	eq
    6090:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    6094:	f06f 0504 	mvnne.w	r5, #4
    6098:	2300      	movs	r3, #0
    609a:	e7d9      	b.n	6050 <onoff_request+0x3a>
	parent->next = child;
    609c:	601e      	str	r6, [r3, #0]
	list->tail = node;
    609e:	6066      	str	r6, [r4, #4]
}
    60a0:	e7eb      	b.n	607a <onoff_request+0x64>
		rv = -EAGAIN;
    60a2:	f06f 050a 	mvn.w	r5, #10
    60a6:	e7f7      	b.n	6098 <onoff_request+0x82>

000060a8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    60a8:	4770      	bx	lr

000060aa <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    60aa:	b40f      	push	{r0, r1, r2, r3}
    60ac:	b507      	push	{r0, r1, r2, lr}
    60ae:	a904      	add	r1, sp, #16
    60b0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    60b4:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    60b6:	f7fb f997 	bl	13e8 <vprintk>
	va_end(ap);
}
    60ba:	b003      	add	sp, #12
    60bc:	f85d eb04 	ldr.w	lr, [sp], #4
    60c0:	b004      	add	sp, #16
    60c2:	4770      	bx	lr

000060c4 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    60c4:	4770      	bx	lr

000060c6 <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    60c6:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    60c8:	b430      	push	{r4, r5}
    60ca:	461c      	mov	r4, r3
    60cc:	db0c      	blt.n	60e8 <flash_area_read+0x22>
    60ce:	6885      	ldr	r5, [r0, #8]
    60d0:	440c      	add	r4, r1
    60d2:	42ac      	cmp	r4, r5
    60d4:	d808      	bhi.n	60e8 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    60d6:	68c4      	ldr	r4, [r0, #12]
    60d8:	6840      	ldr	r0, [r0, #4]
    60da:	4401      	add	r1, r0
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    60dc:	68a0      	ldr	r0, [r4, #8]
    60de:	6805      	ldr	r5, [r0, #0]
    60e0:	4620      	mov	r0, r4
    60e2:	46ac      	mov	ip, r5
}
    60e4:	bc30      	pop	{r4, r5}
    60e6:	4760      	bx	ip
    60e8:	f06f 0015 	mvn.w	r0, #21
    60ec:	bc30      	pop	{r4, r5}
    60ee:	4770      	bx	lr

000060f0 <flash_area_write>:
    60f0:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    60f2:	b430      	push	{r4, r5}
    60f4:	461c      	mov	r4, r3
    60f6:	db0c      	blt.n	6112 <flash_area_write+0x22>
    60f8:	6885      	ldr	r5, [r0, #8]
    60fa:	440c      	add	r4, r1
    60fc:	42ac      	cmp	r4, r5
    60fe:	d808      	bhi.n	6112 <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    6100:	68c4      	ldr	r4, [r0, #12]
    6102:	6840      	ldr	r0, [r0, #4]
    6104:	4401      	add	r1, r0
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    6106:	68a0      	ldr	r0, [r4, #8]
    6108:	6845      	ldr	r5, [r0, #4]
    610a:	4620      	mov	r0, r4
    610c:	46ac      	mov	ip, r5
}
    610e:	bc30      	pop	{r4, r5}
    6110:	4760      	bx	ip
    6112:	f06f 0015 	mvn.w	r0, #21
    6116:	bc30      	pop	{r4, r5}
    6118:	4770      	bx	lr

0000611a <flash_area_erase>:
    611a:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    611c:	4613      	mov	r3, r2
    611e:	b410      	push	{r4}
    6120:	db0d      	blt.n	613e <flash_area_erase+0x24>
    6122:	6884      	ldr	r4, [r0, #8]
    6124:	440b      	add	r3, r1
    6126:	42a3      	cmp	r3, r4
    6128:	d809      	bhi.n	613e <flash_area_erase+0x24>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    612a:	68c3      	ldr	r3, [r0, #12]
    612c:	6840      	ldr	r0, [r0, #4]
    612e:	4401      	add	r1, r0
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    6130:	6898      	ldr	r0, [r3, #8]
    6132:	6884      	ldr	r4, [r0, #8]
    6134:	4618      	mov	r0, r3
    6136:	4623      	mov	r3, r4
}
    6138:	f85d 4b04 	ldr.w	r4, [sp], #4
    613c:	4718      	bx	r3
    613e:	f06f 0015 	mvn.w	r0, #21
    6142:	f85d 4b04 	ldr.w	r4, [sp], #4
    6146:	4770      	bx	lr

00006148 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    6148:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    614a:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    614c:	6883      	ldr	r3, [r0, #8]
    614e:	68db      	ldr	r3, [r3, #12]
    6150:	4798      	blx	r3
}
    6152:	6800      	ldr	r0, [r0, #0]
    6154:	bd08      	pop	{r3, pc}

00006156 <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    6156:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    6158:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    615a:	6883      	ldr	r3, [r0, #8]
    615c:	68db      	ldr	r3, [r3, #12]
    615e:	4798      	blx	r3

	return param->erase_value;
}
    6160:	7900      	ldrb	r0, [r0, #4]
    6162:	bd08      	pop	{r3, pc}

00006164 <get_sectors_cb>:
{
    6164:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    6166:	6802      	ldr	r2, [r0, #0]
    6168:	684c      	ldr	r4, [r1, #4]
    616a:	42a2      	cmp	r2, r4
    616c:	d316      	bcc.n	619c <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    616e:	688b      	ldr	r3, [r1, #8]
    6170:	4423      	add	r3, r4
    6172:	429a      	cmp	r2, r3
    6174:	d206      	bcs.n	6184 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    6176:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    617a:	42ab      	cmp	r3, r5
    617c:	d304      	bcc.n	6188 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    617e:	f06f 030b 	mvn.w	r3, #11
    6182:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    6184:	2000      	movs	r0, #0
    6186:	e00a      	b.n	619e <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    6188:	68cd      	ldr	r5, [r1, #12]
    618a:	1b12      	subs	r2, r2, r4
    618c:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    6190:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    6192:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    6196:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    6198:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    619a:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    619c:	2001      	movs	r0, #1
}
    619e:	bd70      	pop	{r4, r5, r6, pc}

000061a0 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    61a0:	2000      	movs	r0, #0
{
    61a2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    61a4:	f7fb fc40 	bl	1a28 <sys_reboot>

000061a8 <nrf_cc3xx_platform_mutex_init>:
/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
	// No thread-safe mutexes are required
}
    61a8:	4770      	bx	lr

000061aa <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    61aa:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    61ac:	6800      	ldr	r0, [r0, #0]
    61ae:	f7fb bceb 	b.w	1b88 <z_arm_fatal_error>

000061b2 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    61b2:	2100      	movs	r1, #0
    61b4:	2001      	movs	r0, #1
    61b6:	f7fb bce7 	b.w	1b88 <z_arm_fatal_error>

000061ba <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    61ba:	b508      	push	{r3, lr}
	handler();
    61bc:	f7fb fd46 	bl	1c4c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    61c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    61c4:	f7fb bdb8 	b.w	1d38 <z_arm_exc_exit>

000061c8 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    61c8:	4603      	mov	r3, r0
	size_t n = 0;
    61ca:	2000      	movs	r0, #0

	while (*s != '\0') {
    61cc:	5c1a      	ldrb	r2, [r3, r0]
    61ce:	b902      	cbnz	r2, 61d2 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    61d0:	4770      	bx	lr
		n++;
    61d2:	3001      	adds	r0, #1
    61d4:	e7fa      	b.n	61cc <strlen+0x4>

000061d6 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    61d6:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    61d8:	b162      	cbz	r2, 61f4 <memcmp+0x1e>
    61da:	4603      	mov	r3, r0
    61dc:	3901      	subs	r1, #1
    61de:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    61e0:	f813 0b01 	ldrb.w	r0, [r3], #1
    61e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    61e8:	42a3      	cmp	r3, r4
    61ea:	d001      	beq.n	61f0 <memcmp+0x1a>
    61ec:	4290      	cmp	r0, r2
    61ee:	d0f7      	beq.n	61e0 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    61f0:	1a80      	subs	r0, r0, r2
}
    61f2:	bd10      	pop	{r4, pc}
		return 0;
    61f4:	4610      	mov	r0, r2
    61f6:	e7fc      	b.n	61f2 <memcmp+0x1c>

000061f8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    61f8:	b510      	push	{r4, lr}
    61fa:	1e43      	subs	r3, r0, #1
    61fc:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    61fe:	4291      	cmp	r1, r2
    6200:	d100      	bne.n	6204 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6202:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6204:	f811 4b01 	ldrb.w	r4, [r1], #1
    6208:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    620c:	e7f7      	b.n	61fe <memcpy+0x6>

0000620e <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    620e:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    6210:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6212:	4402      	add	r2, r0
    6214:	4293      	cmp	r3, r2
    6216:	d100      	bne.n	621a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6218:	4770      	bx	lr
		*(d_byte++) = c_byte;
    621a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    621e:	e7f9      	b.n	6214 <memset+0x6>

00006220 <_stdout_hook_default>:
}
    6220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6224:	4770      	bx	lr

00006226 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6226:	220c      	movs	r2, #12
    6228:	6903      	ldr	r3, [r0, #16]
    622a:	b2c9      	uxtb	r1, r1
    622c:	fb01 3302 	mla	r3, r1, r2, r3
    6230:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6232:	f000 0007 	and.w	r0, r0, #7
    6236:	4770      	bx	lr

00006238 <set_on_state>:
	__asm__ volatile(
    6238:	f04f 0320 	mov.w	r3, #32
    623c:	f3ef 8211 	mrs	r2, BASEPRI
    6240:	f383 8812 	msr	BASEPRI_MAX, r3
    6244:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6248:	6803      	ldr	r3, [r0, #0]
    624a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    624e:	f043 0302 	orr.w	r3, r3, #2
    6252:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6254:	f382 8811 	msr	BASEPRI, r2
    6258:	f3bf 8f6f 	isb	sy
}
    625c:	4770      	bx	lr

0000625e <stop>:
{
    625e:	4603      	mov	r3, r0
    6260:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    6262:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6264:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6266:	f04f 0420 	mov.w	r4, #32
    626a:	f3ef 8611 	mrs	r6, BASEPRI
    626e:	f384 8812 	msr	BASEPRI_MAX, r4
    6272:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6276:	250c      	movs	r5, #12
    6278:	fb05 0401 	mla	r4, r5, r1, r0
    627c:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    627e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6282:	d001      	beq.n	6288 <stop+0x2a>
    6284:	42a2      	cmp	r2, r4
    6286:	d111      	bne.n	62ac <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6288:	2201      	movs	r2, #1
    628a:	fb05 0001 	mla	r0, r5, r1, r0
    628e:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    6290:	2000      	movs	r0, #0
	__asm__ volatile(
    6292:	f386 8811 	msr	BASEPRI, r6
    6296:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    629a:	b930      	cbnz	r0, 62aa <stop+0x4c>
	get_sub_config(dev, type)->stop();
    629c:	220c      	movs	r2, #12
    629e:	685b      	ldr	r3, [r3, #4]
    62a0:	fb02 3101 	mla	r1, r2, r1, r3
    62a4:	684b      	ldr	r3, [r1, #4]
    62a6:	4798      	blx	r3
	return 0;
    62a8:	2000      	movs	r0, #0
}
    62aa:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    62ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    62b0:	e7ef      	b.n	6292 <stop+0x34>

000062b2 <api_stop>:
	return stop(dev, subsys, CTX_API);
    62b2:	2280      	movs	r2, #128	; 0x80
    62b4:	f7ff bfd3 	b.w	625e <stop>

000062b8 <async_start>:
{
    62b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62ba:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    62bc:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    62be:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    62c0:	f04f 0520 	mov.w	r5, #32
    62c4:	f3ef 8c11 	mrs	ip, BASEPRI
    62c8:	f385 8812 	msr	BASEPRI_MAX, r5
    62cc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    62d0:	260c      	movs	r6, #12
    62d2:	fb06 4601 	mla	r6, r6, r1, r4
    62d6:	6c35      	ldr	r5, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    62d8:	f005 0e07 	and.w	lr, r5, #7
    62dc:	f1be 0f01 	cmp.w	lr, #1
    62e0:	d110      	bne.n	6304 <async_start+0x4c>
	int err = 0;
    62e2:	2500      	movs	r5, #0
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    62e4:	6437      	str	r7, [r6, #64]	; 0x40
	__asm__ volatile(
    62e6:	f38c 8811 	msr	BASEPRI, ip
    62ea:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    62ee:	b93d      	cbnz	r5, 6300 <async_start+0x48>
	subdata->cb = cb;
    62f0:	260c      	movs	r6, #12
    62f2:	4371      	muls	r1, r6
    62f4:	440c      	add	r4, r1
	subdata->user_data = user_data;
    62f6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    62fa:	6843      	ldr	r3, [r0, #4]
    62fc:	585b      	ldr	r3, [r3, r1]
    62fe:	4798      	blx	r3
}
    6300:	4628      	mov	r0, r5
    6302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6304:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
    6308:	42af      	cmp	r7, r5
    630a:	bf14      	ite	ne
    630c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    6310:	f06f 0577 	mvneq.w	r5, #119	; 0x77
    6314:	e7e7      	b.n	62e6 <async_start+0x2e>

00006316 <api_start>:
{
    6316:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6318:	2480      	movs	r4, #128	; 0x80
    631a:	9400      	str	r4, [sp, #0]
    631c:	f7ff ffcc 	bl	62b8 <async_start>
}
    6320:	b002      	add	sp, #8
    6322:	bd10      	pop	{r4, pc}

00006324 <api_blocking_start>:
}
    6324:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6328:	4770      	bx	lr

0000632a <onoff_started_callback>:
{
    632a:	b410      	push	{r4}
	notify(mgr, 0);
    632c:	241c      	movs	r4, #28
	return &data->mgr[type];
    632e:	6900      	ldr	r0, [r0, #16]
    6330:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6332:	fb03 0004 	mla	r0, r3, r4, r0
    6336:	2100      	movs	r1, #0
}
    6338:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    633c:	4710      	bx	r2

0000633e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    633e:	2000      	movs	r0, #0
    6340:	f000 ba59 	b.w	67f6 <nrfx_clock_start>

00006344 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6344:	2000      	movs	r0, #0
    6346:	f000 ba97 	b.w	6878 <nrfx_clock_stop>

0000634a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    634a:	6843      	ldr	r3, [r0, #4]
}
    634c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    634e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6350:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    6352:	600b      	str	r3, [r1, #0]
}
    6354:	4770      	bx	lr

00006356 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6356:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    6358:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    635c:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    635e:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    6362:	6098      	str	r0, [r3, #8]
}
    6364:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6366:	60d9      	str	r1, [r3, #12]
    6368:	4770      	bx	lr

0000636a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    636a:	6843      	ldr	r3, [r0, #4]
}
    636c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    636e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    6370:	6099      	str	r1, [r3, #8]
}
    6372:	4770      	bx	lr

00006374 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6374:	6843      	ldr	r3, [r0, #4]
}
    6376:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6378:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    637a:	60d9      	str	r1, [r3, #12]
}
    637c:	4770      	bx	lr

0000637e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    637e:	6843      	ldr	r3, [r0, #4]
    6380:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6382:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    6384:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    6388:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    638a:	6090      	str	r0, [r2, #8]
}
    638c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    638e:	60d3      	str	r3, [r2, #12]
    6390:	4770      	bx	lr

00006392 <gpio_nrfx_manage_callback>:
	return port->data;
    6392:	6903      	ldr	r3, [r0, #16]
{
    6394:	b530      	push	{r4, r5, lr}
	return list->head;
    6396:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    6398:	b158      	cbz	r0, 63b2 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    639a:	2400      	movs	r4, #0
    639c:	4281      	cmp	r1, r0
    639e:	d112      	bne.n	63c6 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    63a0:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    63a2:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    63a4:	b954      	cbnz	r4, 63bc <gpio_nrfx_manage_callback+0x2a>
    63a6:	428d      	cmp	r5, r1
	list->head = node;
    63a8:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    63aa:	d100      	bne.n	63ae <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    63ac:	6098      	str	r0, [r3, #8]
	parent->next = child;
    63ae:	2000      	movs	r0, #0
    63b0:	6008      	str	r0, [r1, #0]
	if (set) {
    63b2:	b96a      	cbnz	r2, 63d0 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    63b4:	2000      	movs	r0, #0
}
    63b6:	bd30      	pop	{r4, r5, pc}
    63b8:	4628      	mov	r0, r5
    63ba:	e7ef      	b.n	639c <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    63bc:	428d      	cmp	r5, r1
	parent->next = child;
    63be:	6020      	str	r0, [r4, #0]
	list->tail = node;
    63c0:	bf08      	it	eq
    63c2:	609c      	streq	r4, [r3, #8]
}
    63c4:	e7f3      	b.n	63ae <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    63c6:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    63c8:	4604      	mov	r4, r0
    63ca:	2d00      	cmp	r5, #0
    63cc:	d1f4      	bne.n	63b8 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    63ce:	b13a      	cbz	r2, 63e0 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    63d0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    63d2:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    63d4:	600a      	str	r2, [r1, #0]
	list->head = node;
    63d6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    63d8:	2800      	cmp	r0, #0
    63da:	d1eb      	bne.n	63b4 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    63dc:	6099      	str	r1, [r3, #8]
}
    63de:	e7ea      	b.n	63b6 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    63e0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    63e4:	e7e7      	b.n	63b6 <gpio_nrfx_manage_callback+0x24>

000063e6 <is_regular_addr_valid>:
{
    63e6:	b538      	push	{r3, r4, r5, lr}
    63e8:	4605      	mov	r5, r0
    63ea:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    63ec:	f000 fa46 	bl	687c <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    63f0:	2d00      	cmp	r5, #0
    63f2:	db07      	blt.n	6404 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    63f4:	42a8      	cmp	r0, r5
    63f6:	d905      	bls.n	6404 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    63f8:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    63fa:	4284      	cmp	r4, r0
    63fc:	bf8c      	ite	hi
    63fe:	2000      	movhi	r0, #0
    6400:	2001      	movls	r0, #1
}
    6402:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    6404:	2000      	movs	r0, #0
    6406:	e7fc      	b.n	6402 <is_regular_addr_valid+0x1c>

00006408 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    6408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    640c:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    640e:	6883      	ldr	r3, [r0, #8]
{
    6410:	b086      	sub	sp, #24
    6412:	4688      	mov	r8, r1
    6414:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    6416:	691b      	ldr	r3, [r3, #16]
    6418:	aa02      	add	r2, sp, #8
    641a:	a901      	add	r1, sp, #4
    641c:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    641e:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    6420:	4625      	mov	r5, r4
    6422:	9b02      	ldr	r3, [sp, #8]
    6424:	42ab      	cmp	r3, r5
    6426:	d802      	bhi.n	642e <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    6428:	b006      	add	sp, #24
    642a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    642e:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    6430:	9f01      	ldr	r7, [sp, #4]
    6432:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    6436:	687b      	ldr	r3, [r7, #4]
    6438:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    643a:	683a      	ldr	r2, [r7, #0]
    643c:	eb0a 0306 	add.w	r3, sl, r6
    6440:	42b2      	cmp	r2, r6
    6442:	d802      	bhi.n	644a <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    6444:	469a      	mov	sl, r3
    6446:	3501      	adds	r5, #1
    6448:	e7eb      	b.n	6422 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    644a:	4649      	mov	r1, r9
    644c:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    644e:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    6450:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    6452:	47c0      	blx	r8
    6454:	2800      	cmp	r0, #0
    6456:	d0e7      	beq.n	6428 <flash_page_foreach+0x20>
			off += page_info.size;
    6458:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    645a:	3601      	adds	r6, #1
			off += page_info.size;
    645c:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    645e:	e7ec      	b.n	643a <flash_page_foreach+0x32>

00006460 <uarte_nrfx_config_get>:
{
    6460:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    6462:	6902      	ldr	r2, [r0, #16]
    6464:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6468:	e883 0003 	stmia.w	r3, {r0, r1}
}
    646c:	2000      	movs	r0, #0
    646e:	4770      	bx	lr

00006470 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6470:	6843      	ldr	r3, [r0, #4]
    6472:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6474:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6478:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    647c:	4770      	bx	lr

0000647e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    647e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    6480:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6482:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6484:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6488:	b150      	cbz	r0, 64a0 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    648a:	2000      	movs	r0, #0
	*c = *data->rx_data;
    648c:	6952      	ldr	r2, [r2, #20]
    648e:	7812      	ldrb	r2, [r2, #0]
    6490:	700a      	strb	r2, [r1, #0]
    6492:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6496:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    649a:	2201      	movs	r2, #1
    649c:	601a      	str	r2, [r3, #0]
	return 0;
    649e:	4770      	bx	lr
		return -1;
    64a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    64a4:	4770      	bx	lr

000064a6 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    64a6:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    64a8:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    64ac:	b943      	cbnz	r3, 64c0 <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    64ae:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    64b0:	0789      	lsls	r1, r1, #30
    64b2:	d407      	bmi.n	64c4 <is_tx_ready.isra.0+0x1e>
    64b4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    64b8:	3800      	subs	r0, #0
    64ba:	bf18      	it	ne
    64bc:	2001      	movne	r0, #1
    64be:	4770      	bx	lr
    64c0:	2001      	movs	r0, #1
    64c2:	4770      	bx	lr
    64c4:	4618      	mov	r0, r3
}
    64c6:	4770      	bx	lr

000064c8 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    64c8:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    64ca:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    64cc:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    64d0:	05c9      	lsls	r1, r1, #23
    64d2:	d518      	bpl.n	6506 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    64d4:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    64d8:	b1a9      	cbz	r1, 6506 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    64da:	f04f 0020 	mov.w	r0, #32
    64de:	f3ef 8111 	mrs	r1, BASEPRI
    64e2:	f380 8812 	msr	BASEPRI_MAX, r0
    64e6:	f3bf 8f6f 	isb	sy
    64ea:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    64ee:	b130      	cbz	r0, 64fe <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    64f0:	2000      	movs	r0, #0
    64f2:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    64f6:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    64fa:	2001      	movs	r0, #1
    64fc:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    64fe:	f381 8811 	msr	BASEPRI, r1
    6502:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6506:	6852      	ldr	r2, [r2, #4]
    6508:	06d2      	lsls	r2, r2, #27
    650a:	d515      	bpl.n	6538 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    650c:	f04f 0120 	mov.w	r1, #32
    6510:	f3ef 8211 	mrs	r2, BASEPRI
    6514:	f381 8812 	msr	BASEPRI_MAX, r1
    6518:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    651c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    6520:	b111      	cbz	r1, 6528 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6522:	2100      	movs	r1, #0
    6524:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    6528:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    652c:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    6530:	f382 8811 	msr	BASEPRI, r2
    6534:	f3bf 8f6f 	isb	sy
}
    6538:	4770      	bx	lr

0000653a <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    653a:	b510      	push	{r4, lr}
    653c:	4604      	mov	r4, r0
    653e:	2200      	movs	r2, #0
    6540:	2101      	movs	r1, #1
    6542:	2009      	movs	r0, #9
    6544:	f7fb fb6c 	bl	1c20 <z_arm_irq_priority_set>
    6548:	2009      	movs	r0, #9
    654a:	f7fb fb4b 	bl	1be4 <arch_irq_enable>
    654e:	4620      	mov	r0, r4
    6550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6554:	f7fc bad4 	b.w	2b00 <uarte_instance_init.constprop.0>

00006558 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    6558:	b510      	push	{r4, lr}
    655a:	4604      	mov	r4, r0
    655c:	2200      	movs	r2, #0
    655e:	2101      	movs	r1, #1
    6560:	2008      	movs	r0, #8
    6562:	f7fb fb5d 	bl	1c20 <z_arm_irq_priority_set>
    6566:	2008      	movs	r0, #8
    6568:	f7fb fb3c 	bl	1be4 <arch_irq_enable>
    656c:	4620      	mov	r0, r4
    656e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6572:	f7fc bac5 	b.w	2b00 <uarte_instance_init.constprop.0>

00006576 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6576:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    6578:	6843      	ldr	r3, [r0, #4]
    657a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    657c:	7a03      	ldrb	r3, [r0, #8]
    657e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    6582:	3b01      	subs	r3, #1
    6584:	00db      	lsls	r3, r3, #3
    6586:	6845      	ldr	r5, [r0, #4]
    6588:	6814      	ldr	r4, [r2, #0]
    658a:	441d      	add	r5, r3
    658c:	42ac      	cmp	r4, r5
    658e:	d902      	bls.n	6596 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    6590:	f06f 0001 	mvn.w	r0, #1
}
    6594:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    6596:	7965      	ldrb	r5, [r4, #5]
    6598:	428d      	cmp	r5, r1
    659a:	d002      	beq.n	65a2 <pinctrl_lookup_state+0x2c>
		(*state)++;
    659c:	3408      	adds	r4, #8
    659e:	6014      	str	r4, [r2, #0]
    65a0:	e7f1      	b.n	6586 <pinctrl_lookup_state+0x10>
			return 0;
    65a2:	2000      	movs	r0, #0
    65a4:	e7f6      	b.n	6594 <pinctrl_lookup_state+0x1e>

000065a6 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    65a6:	f7fd bd77 	b.w	4098 <nrf_cc3xx_platform_init_no_rng>

000065aa <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    65aa:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    65ac:	f7fb fac8 	bl	1b40 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    65b0:	f7ff fdfa 	bl	61a8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    65b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    65b8:	f7fd bd6e 	b.w	4098 <nrf_cc3xx_platform_init_no_rng>

000065bc <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    65bc:	b538      	push	{r3, r4, r5, lr}
    65be:	460c      	mov	r4, r1
    65c0:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
    65c2:	f7ff fdc8 	bl	6156 <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    65c6:	4621      	mov	r1, r4
    65c8:	4425      	add	r5, r4
    65ca:	42a9      	cmp	r1, r5
    65cc:	d101      	bne.n	65d2 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    65ce:	2001      	movs	r0, #1
}
    65d0:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    65d2:	f811 3b01 	ldrb.w	r3, [r1], #1
    65d6:	4298      	cmp	r0, r3
    65d8:	d0f7      	beq.n	65ca <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    65da:	2000      	movs	r0, #0
    65dc:	e7f8      	b.n	65d0 <bootutil_buffer_is_erased.part.0+0x14>

000065de <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    65de:	6880      	ldr	r0, [r0, #8]
    65e0:	3818      	subs	r0, #24
    65e2:	f020 0007 	bic.w	r0, r0, #7
}
    65e6:	3810      	subs	r0, #16
    65e8:	4770      	bx	lr

000065ea <boot_magic_compatible_check>:
    switch (tbl_val) {
    65ea:	2804      	cmp	r0, #4
    65ec:	d009      	beq.n	6602 <boot_magic_compatible_check+0x18>
    65ee:	2805      	cmp	r0, #5
    65f0:	d103      	bne.n	65fa <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    65f2:	1e48      	subs	r0, r1, #1
    65f4:	bf18      	it	ne
    65f6:	2001      	movne	r0, #1
    65f8:	4770      	bx	lr
        return tbl_val == val;
    65fa:	1a43      	subs	r3, r0, r1
    65fc:	4258      	negs	r0, r3
    65fe:	4158      	adcs	r0, r3
    6600:	4770      	bx	lr
    switch (tbl_val) {
    6602:	2001      	movs	r0, #1
}
    6604:	4770      	bx	lr

00006606 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    6606:	b111      	cbz	r1, 660e <bootutil_buffer_is_erased+0x8>
    6608:	b10a      	cbz	r2, 660e <bootutil_buffer_is_erased+0x8>
    660a:	f7ff bfd7 	b.w	65bc <bootutil_buffer_is_erased.part.0>
}
    660e:	2000      	movs	r0, #0
    6610:	4770      	bx	lr

00006612 <boot_read_flag>:
{
    6612:	b538      	push	{r3, r4, r5, lr}
    6614:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6616:	2301      	movs	r3, #1
{
    6618:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    661a:	4622      	mov	r2, r4
{
    661c:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    661e:	f7ff fd52 	bl	60c6 <flash_area_read>
    if (rc < 0) {
    6622:	2800      	cmp	r0, #0
    6624:	db10      	blt.n	6648 <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    6626:	2201      	movs	r2, #1
    6628:	4621      	mov	r1, r4
    662a:	4628      	mov	r0, r5
    662c:	f7ff ffeb 	bl	6606 <bootutil_buffer_is_erased>
    6630:	b118      	cbz	r0, 663a <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    6632:	2303      	movs	r3, #3
    return 0;
    6634:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
    6636:	7023      	strb	r3, [r4, #0]
}
    6638:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    663a:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
    663c:	2b01      	cmp	r3, #1
    663e:	bf0c      	ite	eq
    6640:	2301      	moveq	r3, #1
    6642:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    6644:	7023      	strb	r3, [r4, #0]
    6646:	e7f7      	b.n	6638 <boot_read_flag+0x26>
        return BOOT_EFLASH;
    6648:	2001      	movs	r0, #1
    664a:	e7f5      	b.n	6638 <boot_read_flag+0x26>

0000664c <boot_write_trailer>:
{
    664c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6650:	461d      	mov	r5, r3
    6652:	4606      	mov	r6, r0
    6654:	460f      	mov	r7, r1
    6656:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    6658:	f7ff fd76 	bl	6148 <flash_area_align>
    align = ALIGN_UP(inlen, align);
    665c:	1e6c      	subs	r4, r5, #1
    665e:	4404      	add	r4, r0
    6660:	4243      	negs	r3, r0
    6662:	401c      	ands	r4, r3
    if (align > BOOT_MAX_ALIGN) {
    6664:	2c08      	cmp	r4, #8
    6666:	d81a      	bhi.n	669e <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
    6668:	4630      	mov	r0, r6
    666a:	f7ff fd74 	bl	6156 <flash_area_erased_val>
    666e:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    6670:	462a      	mov	r2, r5
    6672:	4641      	mov	r1, r8
    6674:	4668      	mov	r0, sp
    6676:	f7ff fdbf 	bl	61f8 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    667a:	4649      	mov	r1, r9
    667c:	1b62      	subs	r2, r4, r5
    667e:	eb0d 0005 	add.w	r0, sp, r5
    6682:	f7ff fdc4 	bl	620e <memset>
    rc = flash_area_write(fap, off, buf, align);
    6686:	4623      	mov	r3, r4
    6688:	466a      	mov	r2, sp
    668a:	4639      	mov	r1, r7
    668c:	4630      	mov	r0, r6
    668e:	f7ff fd2f 	bl	60f0 <flash_area_write>
    if (rc != 0) {
    6692:	3800      	subs	r0, #0
    6694:	bf18      	it	ne
    6696:	2001      	movne	r0, #1
}
    6698:	b003      	add	sp, #12
    669a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    669e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    66a2:	e7f9      	b.n	6698 <boot_write_trailer+0x4c>

000066a4 <boot_write_trailer_flag>:
{
    66a4:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    66a6:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    66a8:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    66ac:	aa01      	add	r2, sp, #4
    66ae:	f7ff ffcd 	bl	664c <boot_write_trailer>
}
    66b2:	b003      	add	sp, #12
    66b4:	f85d fb04 	ldr.w	pc, [sp], #4

000066b8 <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    66b8:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    66ba:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    66bc:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    66be:	f021 0107 	bic.w	r1, r1, #7
    66c2:	f7ff bfef 	b.w	66a4 <boot_write_trailer_flag>

000066c6 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    66c6:	6882      	ldr	r2, [r0, #8]
    66c8:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    66ca:	f022 0207 	bic.w	r2, r2, #7
    66ce:	f7ff bfa0 	b.w	6612 <boot_read_flag>

000066d2 <boot_read_swap_state_by_id>:
{
    66d2:	b513      	push	{r0, r1, r4, lr}
    66d4:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    66d6:	b2c0      	uxtb	r0, r0
    66d8:	a901      	add	r1, sp, #4
    66da:	f7fb f9d9 	bl	1a90 <flash_area_open>
    if (rc != 0) {
    66de:	b950      	cbnz	r0, 66f6 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    66e0:	4621      	mov	r1, r4
    66e2:	9801      	ldr	r0, [sp, #4]
    66e4:	f7fc fdba 	bl	325c <boot_read_swap_state>
    66e8:	4604      	mov	r4, r0
    flash_area_close(fap);
    66ea:	9801      	ldr	r0, [sp, #4]
    66ec:	f7ff fcea 	bl	60c4 <flash_area_close>
}
    66f0:	4620      	mov	r0, r4
    66f2:	b002      	add	sp, #8
    66f4:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    66f6:	2401      	movs	r4, #1
    66f8:	e7fa      	b.n	66f0 <boot_read_swap_state_by_id+0x1e>

000066fa <boot_write_swap_info>:
{
    66fa:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    66fc:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
{
    6700:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    6702:	f88d 2007 	strb.w	r2, [sp, #7]
    off = boot_swap_info_off(fap);
    6706:	f7ff ff6a 	bl	65de <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    670a:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    670c:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    670e:	f10d 0207 	add.w	r2, sp, #7
    6712:	4620      	mov	r0, r4
    6714:	f7ff ff9a 	bl	664c <boot_write_trailer>
}
    6718:	b002      	add	sp, #8
    671a:	bd10      	pop	{r4, pc}

0000671c <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    671c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6720:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6724:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    6728:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    672c:	2a09      	cmp	r2, #9
    672e:	d103      	bne.n	6738 <nrf91_errata_14+0x1c>
                switch(var2)
    6730:	1e43      	subs	r3, r0, #1
    6732:	4258      	negs	r0, r3
    6734:	4158      	adcs	r0, r3
    6736:	4770      	bx	lr
        return false;
    6738:	2000      	movs	r0, #0
}
    673a:	4770      	bx	lr

0000673c <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    673c:	4700      	bx	r0

0000673e <nrfx_busy_wait>:
    673e:	f000 b8bb 	b.w	68b8 <z_impl_k_busy_wait>

00006742 <clock_stop>:
{
    6742:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    6744:	4604      	mov	r4, r0
    6746:	b118      	cbz	r0, 6750 <clock_stop+0xe>
    6748:	2801      	cmp	r0, #1
    674a:	d025      	beq.n	6798 <clock_stop+0x56>
}
    674c:	b003      	add	sp, #12
    674e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6750:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6754:	2202      	movs	r2, #2
    6756:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    675a:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    675e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6762:	2201      	movs	r2, #1
    6764:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6766:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6768:	429c      	cmp	r4, r3
    676a:	bf18      	it	ne
    676c:	2500      	movne	r5, #0
    676e:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6772:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6776:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    677a:	bf08      	it	eq
    677c:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
    6780:	b1ac      	cbz	r4, 67ae <clock_stop+0x6c>
    6782:	2c01      	cmp	r4, #1
    6784:	d1e2      	bne.n	674c <clock_stop+0xa>
            if (p_clk_src != NULL)
    6786:	b125      	cbz	r5, 6792 <clock_stop+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6788:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    678c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6790:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6792:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6796:	e012      	b.n	67be <clock_stop+0x7c>
    p_reg->INTENCLR = mask;
    6798:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    679c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    679e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    67a6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    67aa:	6058      	str	r0, [r3, #4]
}
    67ac:	e7db      	b.n	6766 <clock_stop+0x24>
            if (p_clk_src != NULL)
    67ae:	b125      	cbz	r5, 67ba <clock_stop+0x78>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    67b0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    67b4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    67b8:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    67ba:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    67be:	03db      	lsls	r3, r3, #15
    67c0:	d5c4      	bpl.n	674c <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    67c2:	b92d      	cbnz	r5, 67d0 <clock_stop+0x8e>
    67c4:	2001      	movs	r0, #1
    67c6:	f7ff ffba 	bl	673e <nrfx_busy_wait>
    67ca:	3f01      	subs	r7, #1
    67cc:	d1d8      	bne.n	6780 <clock_stop+0x3e>
    67ce:	e7bd      	b.n	674c <clock_stop+0xa>
    67d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    67d4:	2b01      	cmp	r3, #1
    67d6:	d0f5      	beq.n	67c4 <clock_stop+0x82>
    67d8:	e7b8      	b.n	674c <clock_stop+0xa>

000067da <nrfx_clock_enable>:
{
    67da:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    67dc:	2005      	movs	r0, #5
    67de:	f7fb fa11 	bl	1c04 <arch_irq_is_enabled>
    67e2:	b910      	cbnz	r0, 67ea <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    67e4:	2005      	movs	r0, #5
    67e6:	f7fb f9fd 	bl	1be4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    67ea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    67ee:	2201      	movs	r2, #1
    67f0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    67f4:	bd08      	pop	{r3, pc}

000067f6 <nrfx_clock_start>:
{
    67f6:	b508      	push	{r3, lr}
    switch (domain)
    67f8:	b110      	cbz	r0, 6800 <nrfx_clock_start+0xa>
    67fa:	2801      	cmp	r0, #1
    67fc:	d031      	beq.n	6862 <nrfx_clock_start+0x6c>
}
    67fe:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6800:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6804:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6808:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    680c:	03c9      	lsls	r1, r1, #15
    680e:	d413      	bmi.n	6838 <nrfx_clock_start+0x42>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6810:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6814:	07db      	lsls	r3, r3, #31
    6816:	d419      	bmi.n	684c <nrfx_clock_start+0x56>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6818:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    681a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    681e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6822:	2300      	movs	r3, #0
    6824:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    6828:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    682c:	2302      	movs	r3, #2
    682e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6832:	2301      	movs	r3, #1
    6834:	6093      	str	r3, [r2, #8]
}
    6836:	e7e2      	b.n	67fe <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6838:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    683c:	2b02      	cmp	r3, #2
    683e:	d0ec      	beq.n	681a <nrfx_clock_start+0x24>
    if (!is_correct_clk)
    6840:	2b01      	cmp	r3, #1
    6842:	d0ea      	beq.n	681a <nrfx_clock_start+0x24>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6844:	2000      	movs	r0, #0
    6846:	f7ff ff7c 	bl	6742 <clock_stop>
    684a:	e7e5      	b.n	6818 <nrfx_clock_start+0x22>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    684c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    6850:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
    6854:	3b01      	subs	r3, #1
    6856:	2b01      	cmp	r3, #1
    6858:	d8f4      	bhi.n	6844 <nrfx_clock_start+0x4e>
    p_reg->INTENSET = mask;
    685a:	2302      	movs	r3, #2
    685c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    6860:	e7cd      	b.n	67fe <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6862:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6866:	2200      	movs	r2, #0
    6868:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    686c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6870:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6874:	6018      	str	r0, [r3, #0]
}
    6876:	e7c2      	b.n	67fe <nrfx_clock_start+0x8>

00006878 <nrfx_clock_stop>:
    clock_stop(domain);
    6878:	f7ff bf63 	b.w	6742 <clock_stop>

0000687c <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    687c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6880:	4770      	bx	lr

00006882 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    6882:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    6886:	4770      	bx	lr

00006888 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    6888:	f44f 7080 	mov.w	r0, #256	; 0x100
    688c:	4770      	bx	lr

0000688e <z_device_state_init>:
}
    688e:	4770      	bx	lr

00006890 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6890:	b138      	cbz	r0, 68a2 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6892:	68c3      	ldr	r3, [r0, #12]
    6894:	8818      	ldrh	r0, [r3, #0]
    6896:	f3c0 0008 	ubfx	r0, r0, #0, #9
    689a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    689e:	4258      	negs	r0, r3
    68a0:	4158      	adcs	r0, r3
}
    68a2:	4770      	bx	lr

000068a4 <z_early_memset>:
	(void) memset(dst, c, n);
    68a4:	f7ff bcb3 	b.w	620e <memset>

000068a8 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    68a8:	f7ff bca6 	b.w	61f8 <memcpy>

000068ac <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    68ac:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    68b0:	3800      	subs	r0, #0
    68b2:	bf18      	it	ne
    68b4:	2001      	movne	r0, #1
    68b6:	4770      	bx	lr

000068b8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    68b8:	b108      	cbz	r0, 68be <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    68ba:	f7fb b8dd 	b.w	1a78 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    68be:	4770      	bx	lr

000068c0 <nrf_cc310_bl_ecdsa_verify_secp256r1>:
    68c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68c4:	9f06      	ldr	r7, [sp, #24]
    68c6:	4604      	mov	r4, r0
    68c8:	4615      	mov	r5, r2
    68ca:	461e      	mov	r6, r3
    68cc:	f7fd fda4 	bl	4418 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>
    68d0:	b938      	cbnz	r0, 68e2 <nrf_cc310_bl_ecdsa_verify_secp256r1+0x22>
    68d2:	463b      	mov	r3, r7
    68d4:	4632      	mov	r2, r6
    68d6:	4629      	mov	r1, r5
    68d8:	4620      	mov	r0, r4
    68da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    68de:	f7fd bdc1 	b.w	4464 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>
    68e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000068e6 <PkaInitAndMutexLock>:
    68e6:	460a      	mov	r2, r1
    68e8:	2100      	movs	r1, #0
    68ea:	f7fe b847 	b.w	497c <PkaInitPka>

000068ee <SaSi_PalMemCopy>:
    68ee:	f7ff bc83 	b.w	61f8 <memcpy>

000068f2 <SaSi_PalMemSet>:
    68f2:	f7ff bc8c 	b.w	620e <memset>

000068f6 <SaSi_PalMemSetZero>:
    68f6:	460a      	mov	r2, r1
    68f8:	2100      	movs	r1, #0
    68fa:	f7ff bc88 	b.w	620e <memset>

000068fe <CRYS_COMMON_ReverseMemcpy32>:
    68fe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    6902:	3804      	subs	r0, #4
    6904:	428a      	cmp	r2, r1
    6906:	d101      	bne.n	690c <CRYS_COMMON_ReverseMemcpy32+0xe>
    6908:	2000      	movs	r0, #0
    690a:	4770      	bx	lr
    690c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    6910:	ba1b      	rev	r3, r3
    6912:	f840 3f04 	str.w	r3, [r0, #4]!
    6916:	e7f5      	b.n	6904 <CRYS_COMMON_ReverseMemcpy32+0x6>
