
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	88 16 01 20 19 32 00 00 df 86 00 00 ed 31 00 00     ... .2.......1..
  10:	ed 31 00 00 ed 31 00 00 ed 31 00 00 ed 31 00 00     .1...1...1...1..
	...
  2c:	49 2d 00 00 ed 31 00 00 00 00 00 00 b5 2c 00 00     I-...1.......,..
  3c:	ed 31 00 00                                         .1..

00000040 <_irq_vector_table>:
  40:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
  50:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
  60:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
  70:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
  80:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
  90:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
  a0:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
  b0:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
  c0:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
  d0:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
  e0:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
  f0:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
 100:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
 110:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
 120:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
 130:	ed 2d 00 00 ed 2d 00 00 ed 2d 00 00 ed 2d 00 00     .-...-...-...-..
 140:	ed 2d 00 00                                         .-..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     154:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     158:	f000 b80c 	b.w	174 <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f808 	bl	178 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__aeabi_idiv0>:
     174:	4770      	bx	lr
     176:	bf00      	nop

00000178 <__udivmoddi4>:
     178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     17c:	9e09      	ldr	r6, [sp, #36]	; 0x24
     17e:	4688      	mov	r8, r1
     180:	468e      	mov	lr, r1
     182:	4615      	mov	r5, r2
     184:	4604      	mov	r4, r0
     186:	4619      	mov	r1, r3
     188:	2b00      	cmp	r3, #0
     18a:	f040 80c6 	bne.w	31a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x1a>
     18e:	4542      	cmp	r2, r8
     190:	fab2 f782 	clz	r7, r2
     194:	d946      	bls.n	224 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x24>
     196:	b14f      	cbz	r7, 1ac <__udivmoddi4+0x34>
     198:	f1c7 0c20 	rsb	ip, r7, #32
     19c:	fa08 f307 	lsl.w	r3, r8, r7
     1a0:	40bd      	lsls	r5, r7
     1a2:	40bc      	lsls	r4, r7
     1a4:	fa20 fc0c 	lsr.w	ip, r0, ip
     1a8:	ea4c 0e03 	orr.w	lr, ip, r3
     1ac:	ea4f 4815 	mov.w	r8, r5, lsr #16
     1b0:	fa1f fc85 	uxth.w	ip, r5
     1b4:	0c22      	lsrs	r2, r4, #16
     1b6:	fbbe f9f8 	udiv	r9, lr, r8
     1ba:	fb08 e319 	mls	r3, r8, r9, lr
     1be:	fb09 fa0c 	mul.w	sl, r9, ip
     1c2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     1c6:	459a      	cmp	sl, r3
     1c8:	d928      	bls.n	21c <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x1c>
     1ca:	18eb      	adds	r3, r5, r3
     1cc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     1d0:	d204      	bcs.n	1dc <CONFIG_BOOT_SERIAL_DETECT_DELAY+0x1a>
     1d2:	459a      	cmp	sl, r3
     1d4:	d902      	bls.n	1dc <CONFIG_BOOT_SERIAL_DETECT_DELAY+0x1a>
     1d6:	f1a9 0002 	sub.w	r0, r9, #2
     1da:	442b      	add	r3, r5
     1dc:	eba3 030a 	sub.w	r3, r3, sl
     1e0:	b2a4      	uxth	r4, r4
     1e2:	fbb3 f2f8 	udiv	r2, r3, r8
     1e6:	fb08 3312 	mls	r3, r8, r2, r3
     1ea:	fb02 fc0c 	mul.w	ip, r2, ip
     1ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1f2:	45a4      	cmp	ip, r4
     1f4:	d914      	bls.n	220 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x20>
     1f6:	192c      	adds	r4, r5, r4
     1f8:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     1fc:	d203      	bcs.n	206 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x6>
     1fe:	45a4      	cmp	ip, r4
     200:	d901      	bls.n	206 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x6>
     202:	1e93      	subs	r3, r2, #2
     204:	442c      	add	r4, r5
     206:	eba4 040c 	sub.w	r4, r4, ip
     20a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     20e:	b11e      	cbz	r6, 218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     210:	40fc      	lsrs	r4, r7
     212:	2300      	movs	r3, #0
     214:	6034      	str	r4, [r6, #0]
     216:	6073      	str	r3, [r6, #4]
     218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     21c:	4648      	mov	r0, r9
     21e:	e7dd      	b.n	1dc <CONFIG_BOOT_SERIAL_DETECT_DELAY+0x1a>
     220:	4613      	mov	r3, r2
     222:	e7f0      	b.n	206 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x6>
     224:	b902      	cbnz	r2, 228 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x28>
     226:	deff      	udf	#255	; 0xff
     228:	bb8f      	cbnz	r7, 28e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xe>
     22a:	eba8 0302 	sub.w	r3, r8, r2
     22e:	2101      	movs	r1, #1
     230:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     234:	b2aa      	uxth	r2, r5
     236:	0c20      	lsrs	r0, r4, #16
     238:	fbb3 fcfe 	udiv	ip, r3, lr
     23c:	fb0e 331c 	mls	r3, lr, ip, r3
     240:	fb0c f802 	mul.w	r8, ip, r2
     244:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     248:	4598      	cmp	r8, r3
     24a:	d962      	bls.n	312 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x12>
     24c:	18eb      	adds	r3, r5, r3
     24e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     252:	d204      	bcs.n	25e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x5e>
     254:	4598      	cmp	r8, r3
     256:	d902      	bls.n	25e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x5e>
     258:	f1ac 0002 	sub.w	r0, ip, #2
     25c:	442b      	add	r3, r5
     25e:	eba3 0308 	sub.w	r3, r3, r8
     262:	b2a4      	uxth	r4, r4
     264:	fbb3 fcfe 	udiv	ip, r3, lr
     268:	fb0e 331c 	mls	r3, lr, ip, r3
     26c:	fb0c f202 	mul.w	r2, ip, r2
     270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     274:	42a2      	cmp	r2, r4
     276:	d94e      	bls.n	316 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x16>
     278:	192c      	adds	r4, r5, r4
     27a:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     27e:	d204      	bcs.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     280:	42a2      	cmp	r2, r4
     282:	d902      	bls.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     284:	f1ac 0302 	sub.w	r3, ip, #2
     288:	442c      	add	r4, r5
     28a:	1aa4      	subs	r4, r4, r2
     28c:	e7bd      	b.n	20a <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0xa>
     28e:	f1c7 0c20 	rsb	ip, r7, #32
     292:	40bd      	lsls	r5, r7
     294:	fa08 f307 	lsl.w	r3, r8, r7
     298:	40bc      	lsls	r4, r7
     29a:	fa28 f90c 	lsr.w	r9, r8, ip
     29e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2a2:	fa20 fc0c 	lsr.w	ip, r0, ip
     2a6:	ea4c 0203 	orr.w	r2, ip, r3
     2aa:	b2ab      	uxth	r3, r5
     2ac:	fbb9 fcfe 	udiv	ip, r9, lr
     2b0:	0c11      	lsrs	r1, r2, #16
     2b2:	fb0e 901c 	mls	r0, lr, ip, r9
     2b6:	fb0c f803 	mul.w	r8, ip, r3
     2ba:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     2be:	4580      	cmp	r8, r0
     2c0:	d923      	bls.n	30a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa>
     2c2:	1828      	adds	r0, r5, r0
     2c4:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2c8:	d204      	bcs.n	2d4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x54>
     2ca:	4580      	cmp	r8, r0
     2cc:	d902      	bls.n	2d4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x54>
     2ce:	f1ac 0102 	sub.w	r1, ip, #2
     2d2:	4428      	add	r0, r5
     2d4:	eba0 0008 	sub.w	r0, r0, r8
     2d8:	b292      	uxth	r2, r2
     2da:	fbb0 fcfe 	udiv	ip, r0, lr
     2de:	fb0e 001c 	mls	r0, lr, ip, r0
     2e2:	fb0c f803 	mul.w	r8, ip, r3
     2e6:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2ea:	4598      	cmp	r8, r3
     2ec:	d90f      	bls.n	30e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xe>
     2ee:	18eb      	adds	r3, r5, r3
     2f0:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     2f4:	d204      	bcs.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     2f6:	4598      	cmp	r8, r3
     2f8:	d902      	bls.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     2fa:	f1ac 0202 	sub.w	r2, ip, #2
     2fe:	442b      	add	r3, r5
     300:	eba3 0308 	sub.w	r3, r3, r8
     304:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     308:	e792      	b.n	230 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x30>
     30a:	4661      	mov	r1, ip
     30c:	e7e2      	b.n	2d4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x54>
     30e:	4662      	mov	r2, ip
     310:	e7f6      	b.n	300 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE>
     312:	4660      	mov	r0, ip
     314:	e7a3      	b.n	25e <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x5e>
     316:	4663      	mov	r3, ip
     318:	e7b7      	b.n	28a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa>
     31a:	4543      	cmp	r3, r8
     31c:	d905      	bls.n	32a <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x2a>
     31e:	b10e      	cbz	r6, 324 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x24>
     320:	e9c6 0800 	strd	r0, r8, [r6]
     324:	2100      	movs	r1, #0
     326:	4608      	mov	r0, r1
     328:	e776      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     32a:	fab3 fc83 	clz	ip, r3
     32e:	f1bc 0f00 	cmp.w	ip, #0
     332:	d110      	bne.n	356 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x56>
     334:	4543      	cmp	r3, r8
     336:	d301      	bcc.n	33c <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x3c>
     338:	4282      	cmp	r2, r0
     33a:	d80a      	bhi.n	352 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x52>
     33c:	1a84      	subs	r4, r0, r2
     33e:	eb68 0303 	sbc.w	r3, r8, r3
     342:	2001      	movs	r0, #1
     344:	469e      	mov	lr, r3
     346:	2e00      	cmp	r6, #0
     348:	d068      	beq.n	41c <CONFIG_FLASH_SIZE+0x1c>
     34a:	e9c6 4e00 	strd	r4, lr, [r6]
     34e:	2100      	movs	r1, #0
     350:	e762      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>
     352:	4660      	mov	r0, ip
     354:	e7f7      	b.n	346 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x46>
     356:	f1cc 0e20 	rsb	lr, ip, #32
     35a:	fa03 f30c 	lsl.w	r3, r3, ip
     35e:	fa02 f50c 	lsl.w	r5, r2, ip
     362:	fa00 f70c 	lsl.w	r7, r0, ip
     366:	fa22 f40e 	lsr.w	r4, r2, lr
     36a:	fa28 fb0e 	lsr.w	fp, r8, lr
     36e:	fa20 f10e 	lsr.w	r1, r0, lr
     372:	431c      	orrs	r4, r3
     374:	fa08 f30c 	lsl.w	r3, r8, ip
     378:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37c:	4319      	orrs	r1, r3
     37e:	b2a3      	uxth	r3, r4
     380:	0c0a      	lsrs	r2, r1, #16
     382:	fbbb f8f9 	udiv	r8, fp, r9
     386:	fb09 bb18 	mls	fp, r9, r8, fp
     38a:	fb08 fa03 	mul.w	sl, r8, r3
     38e:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     392:	4592      	cmp	sl, r2
     394:	d93e      	bls.n	414 <CONFIG_FLASH_SIZE+0x14>
     396:	18a2      	adds	r2, r4, r2
     398:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     39c:	d204      	bcs.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     39e:	4592      	cmp	sl, r2
     3a0:	d902      	bls.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     3a2:	f1a8 0002 	sub.w	r0, r8, #2
     3a6:	4422      	add	r2, r4
     3a8:	eba2 020a 	sub.w	r2, r2, sl
     3ac:	b289      	uxth	r1, r1
     3ae:	fbb2 f8f9 	udiv	r8, r2, r9
     3b2:	fb09 2218 	mls	r2, r9, r8, r2
     3b6:	fb08 f303 	mul.w	r3, r8, r3
     3ba:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
     3be:	4293      	cmp	r3, r2
     3c0:	d92a      	bls.n	418 <CONFIG_FLASH_SIZE+0x18>
     3c2:	18a2      	adds	r2, r4, r2
     3c4:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
     3c8:	d204      	bcs.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     3ca:	4293      	cmp	r3, r2
     3cc:	d902      	bls.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     3ce:	f1a8 0102 	sub.w	r1, r8, #2
     3d2:	4422      	add	r2, r4
     3d4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     3d8:	1ad2      	subs	r2, r2, r3
     3da:	fba0 9805 	umull	r9, r8, r0, r5
     3de:	4542      	cmp	r2, r8
     3e0:	464b      	mov	r3, r9
     3e2:	4641      	mov	r1, r8
     3e4:	d302      	bcc.n	3ec <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xec>
     3e6:	d106      	bne.n	3f6 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf6>
     3e8:	454f      	cmp	r7, r9
     3ea:	d204      	bcs.n	3f6 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xf6>
     3ec:	3801      	subs	r0, #1
     3ee:	ebb9 0305 	subs.w	r3, r9, r5
     3f2:	eb68 0104 	sbc.w	r1, r8, r4
     3f6:	b18e      	cbz	r6, 41c <CONFIG_FLASH_SIZE+0x1c>
     3f8:	1afc      	subs	r4, r7, r3
     3fa:	eb62 0701 	sbc.w	r7, r2, r1
     3fe:	fa07 fe0e 	lsl.w	lr, r7, lr
     402:	fa24 f30c 	lsr.w	r3, r4, ip
     406:	fa27 f70c 	lsr.w	r7, r7, ip
     40a:	ea4e 0303 	orr.w	r3, lr, r3
     40e:	e9c6 3700 	strd	r3, r7, [r6]
     412:	e79c      	b.n	34e <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0x4e>
     414:	4640      	mov	r0, r8
     416:	e7c7      	b.n	3a8 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xa8>
     418:	4641      	mov	r1, r8
     41a:	e7db      	b.n	3d4 <CONFIG_MCUBOOT_LOG_THREAD_STACK_SIZE+0xd4>
     41c:	4631      	mov	r1, r6
     41e:	e6fb      	b.n	218 <CONFIG_BOOT_MAX_LINE_INPUT_LEN+0x18>

00000420 <led_init>:
/* A build error here means your board isn't set up to drive an LED. */
#error "Unsupported board: led0 devicetree alias is not defined"
#endif

void led_init(void)
{
     420:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     422:	480b      	ldr	r0, [pc, #44]	; (450 <led_init+0x30>)
     424:	f008 fe5d 	bl	90e2 <z_device_is_ready>
    if (!device_is_ready(led0.port)) {
     428:	b928      	cbnz	r0, 436 <led_init+0x16>
        return;
    }

    gpio_pin_configure_dt(&led0, GPIO_OUTPUT);
    gpio_pin_set_dt(&led0, 0);
}
     42a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BOOT_LOG_ERR("Didn't find LED device referred by the LED0_NODE\n");
     42e:	2145      	movs	r1, #69	; 0x45
     430:	4808      	ldr	r0, [pc, #32]	; (454 <led_init+0x34>)
     432:	f007 be26 	b.w	8082 <z_log_minimal_printk>
    gpio_pin_configure_dt(&led0, GPIO_OUTPUT);
     436:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     43a:	4807      	ldr	r0, [pc, #28]	; (458 <led_init+0x38>)
     43c:	f007 f96d 	bl	771a <gpio_pin_configure_dt.isra.0>
}
     440:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
     444:	2200      	movs	r2, #0
     446:	2103      	movs	r1, #3
     448:	4801      	ldr	r0, [pc, #4]	; (450 <led_init+0x30>)
     44a:	f007 b956 	b.w	76fa <gpio_pin_set.isra.0>
     44e:	bf00      	nop
     450:	00009468 	.word	0x00009468
     454:	00009b68 	.word	0x00009b68
     458:	00009768 	.word	0x00009768

0000045c <main>:
    return (bool)pin_active;
}
#endif

void main(void)
{
     45c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     460:	4b59      	ldr	r3, [pc, #356]	; (5c8 <FIH_LABEL_FIH_CALL_END_1306+0x86>)
     462:	4a5a      	ldr	r2, [pc, #360]	; (5cc <FIH_LABEL_FIH_CALL_END_1306+0x8a>)
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

#if !defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Starting bootloader");
     464:	2149      	movs	r1, #73	; 0x49
     466:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     46a:	4859      	ldr	r0, [pc, #356]	; (5d0 <FIH_LABEL_FIH_CALL_END_1306+0x8e>)
     46c:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     470:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     474:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     478:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     47c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     480:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     484:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     488:	f007 fdfb 	bl	8082 <z_log_minimal_printk>
    BOOT_LOG_INF("Starting Direct-XIP bootloader");
#endif

#ifdef CONFIG_MCUBOOT_INDICATION_LED
    /* LED init */
    led_init();
     48c:	f7ff ffc8 	bl	420 <led_init>
#endif

    os_heap_init();
     490:	f007 f965 	bl	775e <os_heap_init>
     494:	484f      	ldr	r0, [pc, #316]	; (5d4 <FIH_LABEL_FIH_CALL_END_1306+0x92>)
     496:	f008 fe24 	bl	90e2 <z_device_is_ready>
    if (!device_is_ready(button0.port)) {
     49a:	2800      	cmp	r0, #0
     49c:	d04e      	beq.n	53c <FIH_LABEL_FIH_CALL_START_1293>
    rc = gpio_pin_configure_dt(&button0, GPIO_INPUT);
     49e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     4a2:	484d      	ldr	r0, [pc, #308]	; (5d8 <FIH_LABEL_FIH_CALL_END_1306+0x96>)
     4a4:	f007 f939 	bl	771a <gpio_pin_configure_dt.isra.0>
	return gpio_pin_get(spec->port, spec->pin);
     4a8:	210c      	movs	r1, #12
     4aa:	484a      	ldr	r0, [pc, #296]	; (5d4 <FIH_LABEL_FIH_CALL_END_1306+0x92>)
     4ac:	f007 f911 	bl	76d2 <gpio_pin_get>
    if (pin_active) {
     4b0:	2800      	cmp	r0, #0
     4b2:	d043      	beq.n	53c <FIH_LABEL_FIH_CALL_START_1293>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     4b4:	2100      	movs	r1, #0
     4b6:	f240 6067 	movw	r0, #1639	; 0x667
     4ba:	f005 fb43 	bl	5b44 <z_impl_k_sleep>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     4be:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		(void) arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t) ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
     4c2:	f008 ff66 	bl	9392 <z_impl_k_uptime_ticks>
     4c6:	463d      	mov	r5, r7
     4c8:	fba0 4007 	umull	r4, r0, r0, r7
     4cc:	fb07 0001 	mla	r0, r7, r1, r0
     4d0:	0be4      	lsrs	r4, r4, #15
     4d2:	4e40      	ldr	r6, [pc, #256]	; (5d4 <FIH_LABEL_FIH_CALL_END_1306+0x92>)
     4d4:	ea44 4440 	orr.w	r4, r4, r0, lsl #17
     4d8:	210c      	movs	r1, #12
     4da:	4630      	mov	r0, r6
     4dc:	f007 f8f9 	bl	76d2 <gpio_pin_get>
     4e0:	4680      	mov	r8, r0
     4e2:	f008 ff56 	bl	9392 <z_impl_k_uptime_ticks>
     4e6:	fba0 3005 	umull	r3, r0, r0, r5
     4ea:	fb07 0001 	mla	r0, r7, r1, r0
     4ee:	0bdb      	lsrs	r3, r3, #15
     4f0:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
                uint32_t delta = k_uptime_get() -  timestamp;
     4f4:	1b1b      	subs	r3, r3, r4
                if (delta >= BUTTON_0_DETECT_DELAY || !pin_active) {
     4f6:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
     4fa:	d207      	bcs.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     4fc:	f1b8 0f00 	cmp.w	r8, #0
     500:	d01c      	beq.n	53c <FIH_LABEL_FIH_CALL_START_1293>
	return z_impl_k_sleep(timeout);
     502:	2100      	movs	r1, #0
     504:	2021      	movs	r0, #33	; 0x21
     506:	f005 fb1d 	bl	5b44 <z_impl_k_sleep>
            for(;;) {
     50a:	e7e5      	b.n	4d8 <main+0x7c>
    (void)rc;

    mcuboot_status_change(MCUBOOT_STATUS_STARTUP);

#ifdef CONFIG_MCUBOOT_SERIAL
    if (detect_pin() &&
     50c:	f1b8 0f00 	cmp.w	r8, #0
     510:	d014      	beq.n	53c <FIH_LABEL_FIH_CALL_START_1293>
#endif // defined(DPPI_PRESENT)

#if NRF_POWER_HAS_RESETREAS
NRF_STATIC_INLINE uint32_t nrf_power_resetreas_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->RESETREAS;
     512:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
     516:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    return !(rr == 0 || (rr & NRFX_RESET_REASON_RESETPIN_MASK));
     51a:	b10b      	cbz	r3, 520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
     51c:	07db      	lsls	r3, r3, #31
     51e:	d50d      	bpl.n	53c <FIH_LABEL_FIH_CALL_START_1293>
	return gpio_pin_set(spec->port, spec->pin, value);
     520:	2201      	movs	r2, #1
     522:	2103      	movs	r1, #3
     524:	482b      	ldr	r0, [pc, #172]	; (5d4 <FIH_LABEL_FIH_CALL_END_1306+0x92>)
     526:	f007 f8e8 	bl	76fa <gpio_pin_set.isra.0>
        gpio_pin_set_dt(&led0, 1);
#endif

        mcuboot_status_change(MCUBOOT_STATUS_SERIAL_DFU_ENTERED);

        BOOT_LOG_INF("Enter the serial recovery mode");
     52a:	2149      	movs	r1, #73	; 0x49
     52c:	482b      	ldr	r0, [pc, #172]	; (5dc <FIH_LABEL_FIH_CALL_END_1306+0x9a>)
     52e:	f007 fda8 	bl	8082 <z_log_minimal_printk>
        rc = boot_console_init();
     532:	f001 fe17 	bl	2164 <boot_console_init>
        __ASSERT(rc == 0, "Error initializing boot console.\n");
        boot_serial_start(&boot_funcs);
     536:	482a      	ldr	r0, [pc, #168]	; (5e0 <FIH_LABEL_FIH_CALL_END_1306+0x9e>)
     538:	f002 f940 	bl	27bc <boot_serial_start>

0000053c <FIH_LABEL_FIH_CALL_START_1293>:
    rc = boot_console_init();
    int timeout_in_ms = CONFIG_BOOT_SERIAL_WAIT_FOR_DFU_TIMEOUT;
    uint32_t start = k_uptime_get_32();
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     53c:	a801      	add	r0, sp, #4
     53e:	f000 fc7b 	bl	e38 <boot_go>

00000542 <FIH_LABEL_FIH_CALL_END_1306>:
        timeout_in_ms = 1;
    }
    boot_serial_check_start(&boot_funcs,timeout_in_ms);
#endif

    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     542:	4b28      	ldr	r3, [pc, #160]	; (5e4 <FIH_LABEL_FIH_CALL_END_1306+0xa2>)
     544:	681b      	ldr	r3, [r3, #0]
     546:	4283      	cmp	r3, r0
     548:	d004      	beq.n	554 <FIH_LABEL_FIH_CALL_END_1306+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     54a:	2145      	movs	r1, #69	; 0x45
     54c:	4826      	ldr	r0, [pc, #152]	; (5e8 <FIH_LABEL_FIH_CALL_END_1306+0xa6>)
     54e:	f007 fd98 	bl	8082 <z_log_minimal_printk>

        mcuboot_status_change(MCUBOOT_STATUS_NO_BOOTABLE_IMAGE_FOUND);

        FIH_PANIC;
     552:	e7fe      	b.n	552 <FIH_LABEL_FIH_CALL_END_1306+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     554:	9a03      	ldr	r2, [sp, #12]
     556:	2149      	movs	r1, #73	; 0x49
     558:	4824      	ldr	r0, [pc, #144]	; (5ec <FIH_LABEL_FIH_CALL_END_1306+0xaa>)
     55a:	f007 fd92 	bl	8082 <z_log_minimal_printk>
                 rsp.br_image_off);

#if defined(MCUBOOT_DIRECT_XIP)
    BOOT_LOG_INF("Jumping to the image slot");
#else
    BOOT_LOG_INF("Jumping to the first image slot");
     55e:	2149      	movs	r1, #73	; 0x49
     560:	4823      	ldr	r0, [pc, #140]	; (5f0 <FIH_LABEL_FIH_CALL_END_1306+0xae>)
     562:	f007 fd8e 	bl	8082 <z_log_minimal_printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     566:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     56a:	2000      	movs	r0, #0
     56c:	f003 ff20 	bl	43b0 <fprotect_area>

    if (rc != 0) {
     570:	4604      	mov	r4, r0
     572:	b120      	cbz	r0, 57e <FIH_LABEL_FIH_CALL_END_1306+0x3c>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     574:	2145      	movs	r1, #69	; 0x45
     576:	481f      	ldr	r0, [pc, #124]	; (5f4 <FIH_LABEL_FIH_CALL_END_1306+0xb2>)
     578:	f007 fd83 	bl	8082 <z_log_minimal_printk>
        while (1)
     57c:	e7fe      	b.n	57c <FIH_LABEL_FIH_CALL_END_1306+0x3a>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     57e:	4669      	mov	r1, sp
     580:	f89d 0008 	ldrb.w	r0, [sp, #8]
     584:	f000 f83a 	bl	5fc <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     588:	9b00      	ldr	r3, [sp, #0]
     58a:	9d03      	ldr	r5, [sp, #12]
     58c:	441d      	add	r5, r3
                                     rsp->br_hdr->ih_hdr_size);
     58e:	9b01      	ldr	r3, [sp, #4]
     590:	891e      	ldrh	r6, [r3, #8]
    nrf_cleanup_peripheral();
     592:	f000 ff69 	bl	1468 <nrf_cleanup_peripheral>
                                     rsp->br_image_off +
     596:	19af      	adds	r7, r5, r6
    cleanup_arm_nvic(); /* cleanup NVIC registers */
     598:	f000 ff4a 	bl	1430 <cleanup_arm_nvic>
    z_arm_clear_arm_mpu_config();
     59c:	f002 fe7e 	bl	329c <z_arm_clear_arm_mpu_config>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
     5a0:	f384 880b 	msr	PSPLIM, r4
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
     5a4:	f384 880a 	msr	MSPLIM, r4
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     5a8:	59ab      	ldr	r3, [r5, r6]
     5aa:	f383 8808 	msr	MSP, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
     5ae:	f384 8814 	msr	CONTROL, r4
  __ASM volatile ("isb 0xF":::"memory");
     5b2:	f3bf 8f6f 	isb	sy
     5b6:	f3bf 8f6f 	isb	sy
    ((void (*)(void))vt->reset)();
     5ba:	687b      	ldr	r3, [r7, #4]
     5bc:	4798      	blx	r3

    do_boot(&rsp);

    mcuboot_status_change(MCUBOOT_STATUS_BOOT_FAILED);

    BOOT_LOG_ERR("Never should get here");
     5be:	2145      	movs	r1, #69	; 0x45
     5c0:	480d      	ldr	r0, [pc, #52]	; (5f8 <FIH_LABEL_FIH_CALL_END_1306+0xb6>)
     5c2:	f007 fd5e 	bl	8082 <z_log_minimal_printk>
    while (1)
     5c6:	e7fe      	b.n	5c6 <FIH_LABEL_FIH_CALL_END_1306+0x84>
     5c8:	50018000 	.word	0x50018000
     5cc:	6e524635 	.word	0x6e524635
     5d0:	00009b9f 	.word	0x00009b9f
     5d4:	00009468 	.word	0x00009468
     5d8:	00009760 	.word	0x00009760
     5dc:	00009bb8 	.word	0x00009bb8
     5e0:	00009758 	.word	0x00009758
     5e4:	2000c828 	.word	0x2000c828
     5e8:	00009bdc 	.word	0x00009bdc
     5ec:	00009bff 	.word	0x00009bff
     5f0:	00009c2e 	.word	0x00009c2e
     5f4:	00009c53 	.word	0x00009c53
     5f8:	00009c86 	.word	0x00009c86

000005fc <flash_device_base>:
#endif

static const struct device *flash_dev = DEVICE_DT_GET(FLASH_DEVICE_NODE);

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
     5fc:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     5fe:	b140      	cbz	r0, 612 <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     600:	4602      	mov	r2, r0
     602:	2300      	movs	r3, #0
     604:	4804      	ldr	r0, [pc, #16]	; (618 <flash_device_base+0x1c>)
     606:	2145      	movs	r1, #69	; 0x45
     608:	f007 fd3b 	bl	8082 <z_log_minimal_printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     60c:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     610:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     612:	6008      	str	r0, [r1, #0]
    return 0;
     614:	e7fc      	b.n	610 <flash_device_base+0x14>
     616:	bf00      	nop
     618:	00009ca9 	.word	0x00009ca9

0000061c <flash_area_sector_from_off>:
    return -EINVAL;
}
#endif

int flash_area_sector_from_off(off_t off, struct flash_sector *sector)
{
     61c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     61e:	460c      	mov	r4, r1
		union { uintptr_t x; struct flash_pages_info * val; } parm2 = { .val = info };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
     620:	4601      	mov	r1, r0
     622:	aa01      	add	r2, sp, #4
     624:	4804      	ldr	r0, [pc, #16]	; (638 <flash_area_sector_from_off+0x1c>)
     626:	f008 fa2f 	bl	8a88 <z_impl_flash_get_page_info_by_offs>
    int rc;
    struct flash_pages_info page;

    rc = flash_get_page_info_by_offs(flash_dev, off, &page);
    if (rc) {
     62a:	b918      	cbnz	r0, 634 <flash_area_sector_from_off+0x18>
        return rc;
    }

    sector->fs_off = page.start_offset;
     62c:	9b01      	ldr	r3, [sp, #4]
     62e:	6023      	str	r3, [r4, #0]
    sector->fs_size = page.size;
     630:	9b02      	ldr	r3, [sp, #8]
     632:	6063      	str	r3, [r4, #4]

    return rc;
}
     634:	b004      	add	sp, #16
     636:	bd10      	pop	{r4, pc}
     638:	00009498 	.word	0x00009498

0000063c <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     640:	461d      	mov	r5, r3
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     642:	4b83      	ldr	r3, [pc, #524]	; (850 <FIH_LABEL_FIH_CALL_END_936+0x26>)
{
     644:	b0db      	sub	sp, #364	; 0x16c
     646:	4617      	mov	r7, r2
     648:	e9dd 4866 	ldrd	r4, r8, [sp, #408]	; 0x198
    fih_int valid_signature = FIH_FAILURE;
     64c:	681e      	ldr	r6, [r3, #0]
{
     64e:	f8dd b190 	ldr.w	fp, [sp, #400]	; 0x190
}

/* Enable and disable cc310 to reduce power consumption */
static inline void cc310_sha256_init(nrf_cc310_bl_hash_context_sha256_t * ctx)
{
    cc310_init();
     652:	f000 febb 	bl	13cc <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     656:	2201      	movs	r2, #1
     658:	4b7e      	ldr	r3, [pc, #504]	; (854 <FIH_LABEL_FIH_CALL_END_936+0x2a>)
    nrf_cc310_enable();
    nrf_cc310_bl_hash_sha256_init(ctx);
     65a:	a83a      	add	r0, sp, #232	; 0xe8
    NRF_CRYPTOCELL->ENABLE=1;
     65c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     660:	f005 ff70 	bl	6544 <nrf_cc310_bl_hash_sha256_init>
    if (seed && (seed_len > 0)) {
     664:	b13c      	cbz	r4, 676 <bootutil_img_validate+0x3a>
     666:	f1b8 0f00 	cmp.w	r8, #0
     66a:	dd04      	ble.n	676 <bootutil_img_validate+0x3a>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    cc310_sha256_update(ctx, data, data_len);
     66c:	4642      	mov	r2, r8
     66e:	4621      	mov	r1, r4
     670:	a83a      	add	r0, sp, #232	; 0xe8
     672:	f007 fbc8 	bl	7e06 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     676:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     67a:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     67c:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     680:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     682:	68fb      	ldr	r3, [r7, #12]
     684:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     686:	45c8      	cmp	r8, r9
     688:	d84e      	bhi.n	728 <FIH_LABEL_FIH_CALL_END_388+0xe>
}

static inline void cc310_sha256_finalize(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     68a:	a90d      	add	r1, sp, #52	; 0x34
     68c:	a83a      	add	r0, sp, #232	; 0xe8
     68e:	f005 ffcb 	bl	6628 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     692:	2200      	movs	r2, #0
     694:	4b6f      	ldr	r3, [pc, #444]	; (854 <FIH_LABEL_FIH_CALL_END_936+0x2a>)
     696:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     69a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     69e:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
     6a0:	b123      	cbz	r3, 6ac <bootutil_img_validate+0x70>
        memcpy(out_hash, hash, 32);
     6a2:	2220      	movs	r2, #32
     6a4:	4618      	mov	r0, r3
     6a6:	a90d      	add	r1, sp, #52	; 0x34
     6a8:	f008 f854 	bl	8754 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     6ac:	2300      	movs	r3, #0
     6ae:	462a      	mov	r2, r5
     6b0:	9300      	str	r3, [sp, #0]
     6b2:	4639      	mov	r1, r7
     6b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
     6b8:	a807      	add	r0, sp, #28
     6ba:	f007 f851 	bl	7760 <bootutil_tlv_iter_begin>
    if (rc) {
     6be:	4604      	mov	r4, r0
     6c0:	2800      	cmp	r0, #0
     6c2:	d144      	bne.n	74e <FIH_LABEL_FIH_CALL_END_388+0x34>
    int key_id = -1;
     6c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     6c8:	f8df a194 	ldr.w	sl, [pc, #404]	; 860 <FIH_LABEL_FIH_CALL_END_936+0x36>
     6cc:	f8df 8184 	ldr.w	r8, [pc, #388]	; 854 <FIH_LABEL_FIH_CALL_END_936+0x2a>
    int sha256_valid = 0;
     6d0:	9002      	str	r0, [sp, #8]
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     6d2:	f10d 0316 	add.w	r3, sp, #22
     6d6:	aa05      	add	r2, sp, #20
     6d8:	a906      	add	r1, sp, #24
     6da:	a807      	add	r0, sp, #28
     6dc:	f007 f88c 	bl	77f8 <bootutil_tlv_iter_next>
        if (rc < 0) {
     6e0:	1e04      	subs	r4, r0, #0
     6e2:	db34      	blt.n	74e <FIH_LABEL_FIH_CALL_END_388+0x34>
        } else if (rc > 0) {
     6e4:	f040 80a4 	bne.w	830 <FIH_LABEL_FIH_CALL_END_936+0x6>
        if (type == IMAGE_TLV_SHA256) {
     6e8:	f8bd 9016 	ldrh.w	r9, [sp, #22]
     6ec:	f1b9 0f10 	cmp.w	r9, #16
     6f0:	d138      	bne.n	764 <FIH_LABEL_FIH_CALL_END_388+0x4a>
            if (len != sizeof(hash)) {
     6f2:	f8bd 9014 	ldrh.w	r9, [sp, #20]
     6f6:	f1b9 0f20 	cmp.w	r9, #32
     6fa:	f040 80a3 	bne.w	844 <FIH_LABEL_FIH_CALL_END_936+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     6fe:	464b      	mov	r3, r9
     700:	4628      	mov	r0, r5
     702:	9906      	ldr	r1, [sp, #24]
     704:	aa3a      	add	r2, sp, #232	; 0xe8
     706:	f007 fcca 	bl	809e <flash_area_read>
            if (rc) {
     70a:	4604      	mov	r4, r0
     70c:	b9f8      	cbnz	r0, 74e <FIH_LABEL_FIH_CALL_END_388+0x34>

0000070e <FIH_LABEL_FIH_CALL_START_369>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     70e:	464a      	mov	r2, r9
     710:	a93a      	add	r1, sp, #232	; 0xe8
     712:	a80d      	add	r0, sp, #52	; 0x34
     714:	f007 f8e7 	bl	78e6 <boot_fih_memequal>
     718:	4604      	mov	r4, r0

0000071a <FIH_LABEL_FIH_CALL_END_388>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     71a:	4b4f      	ldr	r3, [pc, #316]	; (858 <FIH_LABEL_FIH_CALL_END_936+0x2e>)
     71c:	681b      	ldr	r3, [r3, #0]
     71e:	4283      	cmp	r3, r0
     720:	d115      	bne.n	74e <FIH_LABEL_FIH_CALL_END_388+0x34>
            sha256_valid = 1;
     722:	2301      	movs	r3, #1
     724:	9302      	str	r3, [sp, #8]
     726:	e7d4      	b.n	6d2 <bootutil_img_validate+0x96>
        blk_sz = size - off;
     728:	9a65      	ldr	r2, [sp, #404]	; 0x194
     72a:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     72e:	429a      	cmp	r2, r3
     730:	bf28      	it	cs
     732:	461a      	movcs	r2, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     734:	4649      	mov	r1, r9
     736:	4613      	mov	r3, r2
     738:	4692      	mov	sl, r2
     73a:	4628      	mov	r0, r5
     73c:	465a      	mov	r2, fp
     73e:	f007 fcae 	bl	809e <flash_area_read>
        if (rc) {
     742:	4604      	mov	r4, r0
     744:	b138      	cbz	r0, 756 <FIH_LABEL_FIH_CALL_END_388+0x3c>
     746:	2200      	movs	r2, #0
     748:	4b42      	ldr	r3, [pc, #264]	; (854 <FIH_LABEL_FIH_CALL_END_936+0x2a>)
     74a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     74e:	4620      	mov	r0, r4
     750:	b05b      	add	sp, #364	; 0x16c
     752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     756:	4652      	mov	r2, sl
     758:	4659      	mov	r1, fp
     75a:	a83a      	add	r0, sp, #232	; 0xe8
     75c:	f007 fb53 	bl	7e06 <cc310_sha256_update>
    for (off = 0; off < size; off += blk_sz) {
     760:	44d1      	add	r9, sl
     762:	e790      	b.n	686 <bootutil_img_validate+0x4a>
        } else if (type == IMAGE_TLV_KEYHASH) {
     764:	f1b9 0f01 	cmp.w	r9, #1
     768:	d13e      	bne.n	7e8 <FIH_LABEL_FIH_CALL_END_388+0xce>
            if (len > 32) {
     76a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     76e:	2b20      	cmp	r3, #32
     770:	d868      	bhi.n	844 <FIH_LABEL_FIH_CALL_END_936+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     772:	4628      	mov	r0, r5
     774:	9906      	ldr	r1, [sp, #24]
     776:	aa3a      	add	r2, sp, #232	; 0xe8
     778:	f007 fc91 	bl	809e <flash_area_read>
            if (rc) {
     77c:	4604      	mov	r4, r0
     77e:	2800      	cmp	r0, #0
     780:	d1e5      	bne.n	74e <FIH_LABEL_FIH_CALL_END_388+0x34>
            key_id = bootutil_find_key(buf, len);
     782:	f89d b014 	ldrb.w	fp, [sp, #20]
    if (keyhash_len > 32) {
     786:	f1bb 0f20 	cmp.w	fp, #32
     78a:	d809      	bhi.n	7a0 <FIH_LABEL_FIH_CALL_END_388+0x86>
    for (i = 0; i < bootutil_key_cnt; i++) {
     78c:	f8da 3000 	ldr.w	r3, [sl]
     790:	4f32      	ldr	r7, [pc, #200]	; (85c <FIH_LABEL_FIH_CALL_END_936+0x32>)
     792:	9303      	str	r3, [sp, #12]
     794:	9b03      	ldr	r3, [sp, #12]
     796:	429c      	cmp	r4, r3
     798:	db05      	blt.n	7a6 <FIH_LABEL_FIH_CALL_END_388+0x8c>
     79a:	2300      	movs	r3, #0
     79c:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
        return -1;
     7a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     7a4:	e01c      	b.n	7e0 <FIH_LABEL_FIH_CALL_END_388+0xc6>
    cc310_init();
     7a6:	f000 fe11 	bl	13cc <cc310_init>
    NRF_CRYPTOCELL->ENABLE=1;
     7aa:	f8c8 9500 	str.w	r9, [r8, #1280]	; 0x500
    nrf_cc310_bl_hash_sha256_init(ctx);
     7ae:	a81d      	add	r0, sp, #116	; 0x74
     7b0:	f005 fec8 	bl	6544 <nrf_cc310_bl_hash_sha256_init>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     7b4:	687a      	ldr	r2, [r7, #4]
     7b6:	a81d      	add	r0, sp, #116	; 0x74
     7b8:	6812      	ldr	r2, [r2, #0]
     7ba:	f857 1b08 	ldr.w	r1, [r7], #8
     7be:	f007 fb22 	bl	7e06 <cc310_sha256_update>
    nrf_cc310_bl_hash_sha256_finalize(ctx,
     7c2:	a915      	add	r1, sp, #84	; 0x54
     7c4:	a81d      	add	r0, sp, #116	; 0x74
     7c6:	f005 ff2f 	bl	6628 <nrf_cc310_bl_hash_sha256_finalize>
    NRF_CRYPTOCELL->ENABLE=0;
     7ca:	2200      	movs	r2, #0
        if (!memcmp(hash, keyhash, keyhash_len)) {
     7cc:	a93a      	add	r1, sp, #232	; 0xe8
     7ce:	f8c8 2500 	str.w	r2, [r8, #1280]	; 0x500
     7d2:	a815      	add	r0, sp, #84	; 0x54
     7d4:	465a      	mov	r2, fp
     7d6:	f007 ff94 	bl	8702 <memcmp>
     7da:	b918      	cbnz	r0, 7e4 <FIH_LABEL_FIH_CALL_END_388+0xca>
     7dc:	f8c8 0500 	str.w	r0, [r8, #1280]	; 0x500
            key_id = bootutil_find_key(buf, len);
     7e0:	4627      	mov	r7, r4
     7e2:	e776      	b.n	6d2 <bootutil_img_validate+0x96>
    for (i = 0; i < bootutil_key_cnt; i++) {
     7e4:	3401      	adds	r4, #1
     7e6:	e7d5      	b.n	794 <FIH_LABEL_FIH_CALL_END_388+0x7a>
        } else if (type == EXPECTED_SIG_TLV) {
     7e8:	f1b9 0f22 	cmp.w	r9, #34	; 0x22
     7ec:	f47f af71 	bne.w	6d2 <bootutil_img_validate+0x96>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     7f0:	1c7b      	adds	r3, r7, #1
     7f2:	f43f af6e 	beq.w	6d2 <bootutil_img_validate+0x96>
     7f6:	f8da 3000 	ldr.w	r3, [sl]
     7fa:	42bb      	cmp	r3, r7
     7fc:	dd15      	ble.n	82a <FIH_LABEL_FIH_CALL_END_936>
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     7fe:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     802:	2b80      	cmp	r3, #128	; 0x80
     804:	d81e      	bhi.n	844 <FIH_LABEL_FIH_CALL_END_936+0x1a>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     806:	4628      	mov	r0, r5
     808:	9906      	ldr	r1, [sp, #24]
     80a:	aa3a      	add	r2, sp, #232	; 0xe8
     80c:	f007 fc47 	bl	809e <flash_area_read>
            if (rc) {
     810:	4604      	mov	r4, r0
     812:	2800      	cmp	r0, #0
     814:	d19b      	bne.n	74e <FIH_LABEL_FIH_CALL_END_388+0x34>

00000816 <FIH_LABEL_FIH_CALL_START_914>:
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     816:	b2ff      	uxtb	r7, r7
     818:	2120      	movs	r1, #32
     81a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     81e:	9700      	str	r7, [sp, #0]
     820:	aa3a      	add	r2, sp, #232	; 0xe8
     822:	a80d      	add	r0, sp, #52	; 0x34
     824:	f000 f81e 	bl	864 <bootutil_verify_sig>
     828:	4606      	mov	r6, r0

0000082a <FIH_LABEL_FIH_CALL_END_936>:
                key_id = -1;
     82a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     82e:	e750      	b.n	6d2 <bootutil_img_validate+0x96>
    if (rc) {
     830:	9b02      	ldr	r3, [sp, #8]
     832:	b153      	cbz	r3, 84a <FIH_LABEL_FIH_CALL_END_936+0x20>
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     834:	4b08      	ldr	r3, [pc, #32]	; (858 <FIH_LABEL_FIH_CALL_END_936+0x2e>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     836:	681b      	ldr	r3, [r3, #0]
     838:	42b3      	cmp	r3, r6
     83a:	d001      	beq.n	840 <FIH_LABEL_FIH_CALL_END_936+0x16>
        return FIH_FAILURE;
     83c:	4b04      	ldr	r3, [pc, #16]	; (850 <FIH_LABEL_FIH_CALL_END_936+0x26>)
     83e:	681e      	ldr	r6, [r3, #0]
                rc = -1;
     840:	4634      	mov	r4, r6
     842:	e784      	b.n	74e <FIH_LABEL_FIH_CALL_END_388+0x34>
     844:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     848:	e781      	b.n	74e <FIH_LABEL_FIH_CALL_END_388+0x34>
     84a:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     84c:	e77f      	b.n	74e <FIH_LABEL_FIH_CALL_END_388+0x34>
     84e:	bf00      	nop
     850:	2000c4e8 	.word	0x2000c4e8
     854:	50840000 	.word	0x50840000
     858:	2000c828 	.word	0x2000c828
     85c:	00009774 	.word	0x00009774
     860:	00009770 	.word	0x00009770

00000864 <bootutil_verify_sig>:
#endif /* not MCUBOOT_ECDSA_NEED_ASN1_SIG */

int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     868:	b096      	sub	sp, #88	; 0x58
     86a:	4617      	mov	r7, r2
     86c:	461d      	mov	r5, r3
     86e:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70

#ifndef MCUBOOT_ECDSA_NEED_ASN1_SIG
    uint8_t signature[2 * NUM_ECC_BYTES];
#endif

    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     872:	4b35      	ldr	r3, [pc, #212]	; (948 <bootutil_verify_sig+0xe4>)
{
     874:	460e      	mov	r6, r1
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     876:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
    end = pubkey + *bootutil_keys[key_id].len;
     87a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
     87e:	685b      	ldr	r3, [r3, #4]
{
     880:	4680      	mov	r8, r0
    end = pubkey + *bootutil_keys[key_id].len;
     882:	6818      	ldr	r0, [r3, #0]
    pubkey = (uint8_t *)bootutil_keys[key_id].key;
     884:	9101      	str	r1, [sp, #4]
    if (mbedtls_asn1_get_tag(cp, end, &len,
     886:	2330      	movs	r3, #48	; 0x30
     888:	4401      	add	r1, r0
     88a:	aa02      	add	r2, sp, #8
     88c:	a801      	add	r0, sp, #4
     88e:	f007 fa47 	bl	7d20 <mbedtls_asn1_get_tag>
     892:	b110      	cbz	r0, 89a <bootutil_verify_sig+0x36>
    }
    rc = mbedtls_ecdsa_read_signature(&ctx, hash, hlen, sig, slen);

#else /* CY_MBEDTLS_HW_ACCELERATION */
    if (hlen != NUM_ECC_BYTES) {
        return -1;
     894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     898:	e053      	b.n	942 <bootutil_verify_sig+0xde>
    end = *cp + len;
     89a:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
     89e:	441c      	add	r4, r3
    if (mbedtls_asn1_get_alg(cp, end, &alg, &param)) {
     8a0:	4621      	mov	r1, r4
     8a2:	ab06      	add	r3, sp, #24
     8a4:	aa03      	add	r2, sp, #12
     8a6:	a801      	add	r0, sp, #4
     8a8:	f007 fa62 	bl	7d70 <mbedtls_asn1_get_alg>
     8ac:	2800      	cmp	r0, #0
     8ae:	d1f1      	bne.n	894 <bootutil_verify_sig+0x30>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     8b0:	9a04      	ldr	r2, [sp, #16]
     8b2:	2a07      	cmp	r2, #7
     8b4:	d1ee      	bne.n	894 <bootutil_verify_sig+0x30>
        memcmp(alg.MBEDTLS_CONTEXT_MEMBER(p), ec_pubkey_oid, sizeof(ec_pubkey_oid) - 1)) {
     8b6:	4925      	ldr	r1, [pc, #148]	; (94c <bootutil_verify_sig+0xe8>)
     8b8:	9805      	ldr	r0, [sp, #20]
     8ba:	f007 ff22 	bl	8702 <memcmp>
    if (alg.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_pubkey_oid) - 1 ||
     8be:	2800      	cmp	r0, #0
     8c0:	d1e8      	bne.n	894 <bootutil_verify_sig+0x30>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     8c2:	9a07      	ldr	r2, [sp, #28]
     8c4:	2a08      	cmp	r2, #8
     8c6:	d1e5      	bne.n	894 <bootutil_verify_sig+0x30>
        memcmp(param.MBEDTLS_CONTEXT_MEMBER(p), ec_secp256r1_oid, sizeof(ec_secp256r1_oid) - 1)) {
     8c8:	4921      	ldr	r1, [pc, #132]	; (950 <bootutil_verify_sig+0xec>)
     8ca:	9808      	ldr	r0, [sp, #32]
     8cc:	f007 ff19 	bl	8702 <memcmp>
    if (param.MBEDTLS_CONTEXT_MEMBER(len) != sizeof(ec_secp256r1_oid) - 1 ||
     8d0:	2800      	cmp	r0, #0
     8d2:	d1df      	bne.n	894 <bootutil_verify_sig+0x30>
    if (mbedtls_asn1_get_bitstring_null(cp, end, &len)) {
     8d4:	4621      	mov	r1, r4
     8d6:	aa02      	add	r2, sp, #8
     8d8:	a801      	add	r0, sp, #4
     8da:	f007 fa35 	bl	7d48 <mbedtls_asn1_get_bitstring_null>
     8de:	2800      	cmp	r0, #0
     8e0:	d1d8      	bne.n	894 <bootutil_verify_sig+0x30>
    if (*cp + len != end) {
     8e2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
     8e6:	4413      	add	r3, r2
     8e8:	429c      	cmp	r4, r3
     8ea:	d1d3      	bne.n	894 <bootutil_verify_sig+0x30>
    if (len != 2 * NUM_ECC_BYTES + 1) {
     8ec:	2a41      	cmp	r2, #65	; 0x41
     8ee:	d1d1      	bne.n	894 <bootutil_verify_sig+0x30>
    rc = bootutil_decode_sig(signature, sig, sig + slen);
     8f0:	443d      	add	r5, r7
    rc = mbedtls_asn1_get_tag(&cp, end, &len,
     8f2:	2330      	movs	r3, #48	; 0x30
     8f4:	4629      	mov	r1, r5
     8f6:	aa03      	add	r2, sp, #12
     8f8:	a802      	add	r0, sp, #8
     8fa:	9702      	str	r7, [sp, #8]
     8fc:	f007 fa10 	bl	7d20 <mbedtls_asn1_get_tag>
    if (rc) {
     900:	2800      	cmp	r0, #0
     902:	d1c7      	bne.n	894 <bootutil_verify_sig+0x30>
    if (cp + len > end) {
     904:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
     908:	4413      	add	r3, r2
     90a:	429d      	cmp	r5, r3
     90c:	d3c2      	bcc.n	894 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature, &cp, end);
     90e:	462a      	mov	r2, r5
     910:	a902      	add	r1, sp, #8
     912:	a806      	add	r0, sp, #24
     914:	f006 ffbb 	bl	788e <bootutil_read_bigint>
    if (rc) {
     918:	2800      	cmp	r0, #0
     91a:	d1bb      	bne.n	894 <bootutil_verify_sig+0x30>
    rc = bootutil_read_bigint(signature + NUM_ECC_BYTES, &cp, end);
     91c:	462a      	mov	r2, r5
     91e:	a902      	add	r1, sp, #8
     920:	a80e      	add	r0, sp, #56	; 0x38
     922:	f006 ffb4 	bl	788e <bootutil_read_bigint>
    if (rc) {
     926:	2800      	cmp	r0, #0
     928:	d1b4      	bne.n	894 <bootutil_verify_sig+0x30>
    if (hlen != NUM_ECC_BYTES) {
     92a:	2e20      	cmp	r6, #32
     92c:	d1b2      	bne.n	894 <bootutil_verify_sig+0x30>

    bootutil_ecdsa_p256_init(&ctx);
#ifdef MCUBOOT_ECDSA_NEED_ASN1_SIG
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, sig, slen);
#else
    rc = bootutil_ecdsa_p256_verify(&ctx, pubkey, end - pubkey, hash, signature,
     92e:	9901      	ldr	r1, [sp, #4]
    (void)ctx;
    (void)pk_len;
    (void)sig_len;

    /* Only support uncompressed keys. */
    if (pk[0] != 0x04) {
     930:	780b      	ldrb	r3, [r1, #0]
     932:	2b04      	cmp	r3, #4
     934:	d1ae      	bne.n	894 <bootutil_verify_sig+0x30>
        return -1;
    }
    pk++;

    return cc310_ecdsa_verify_secp256r1(hash, pk, sig, BOOTUTIL_CRYPTO_ECDSA_P256_HASH_SIZE);
     936:	4633      	mov	r3, r6
     938:	4640      	mov	r0, r8
     93a:	aa06      	add	r2, sp, #24
     93c:	3101      	adds	r1, #1
     93e:	f000 fd5d 	bl	13fc <cc310_ecdsa_verify_secp256r1>
#endif /* CY_MBEDTLS_HW_ACCELERATION */

    bootutil_ecdsa_p256_drop(&ctx);

    return rc;
}
     942:	b016      	add	sp, #88	; 0x58
     944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     948:	00009774 	.word	0x00009774
     94c:	00009ccf 	.word	0x00009ccf
     950:	00009cd7 	.word	0x00009cd7

00000954 <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     958:	2303      	movs	r3, #3
{
     95a:	b086      	sub	sp, #24
     95c:	460d      	mov	r5, r1
     95e:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     960:	2600      	movs	r6, #0
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     962:	f8df 8068 	ldr.w	r8, [pc, #104]	; 9cc <boot_read_swap_size+0x78>
    uint8_t areas[2] = {
     966:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     96a:	f817 0b01 	ldrb.w	r0, [r7], #1
     96e:	a901      	add	r1, sp, #4
     970:	f001 fa38 	bl	1de4 <flash_area_open>
        if (rc != 0) {
     974:	4604      	mov	r4, r0
     976:	b9a0      	cbnz	r0, 9a2 <boot_read_swap_size+0x4e>
        off = boot_magic_off(*fap);
     978:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     97a:	2310      	movs	r3, #16
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
     97c:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     97e:	aa02      	add	r2, sp, #8
     980:	3910      	subs	r1, #16
     982:	f007 fb8c 	bl	809e <flash_area_read>
     986:	4604      	mov	r4, r0
        flash_area_close(*fap);
     988:	9801      	ldr	r0, [sp, #4]
     98a:	f007 fb87 	bl	809c <flash_area_close>
        if (rc != 0) {
     98e:	b944      	cbnz	r4, 9a2 <boot_read_swap_size+0x4e>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
     990:	2210      	movs	r2, #16
     992:	4641      	mov	r1, r8
     994:	a802      	add	r0, sp, #8
     996:	f007 feb4 	bl	8702 <memcmp>
     99a:	b140      	cbz	r0, 9ae <boot_read_swap_size+0x5a>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     99c:	b12e      	cbz	r6, 9aa <boot_read_swap_size+0x56>
    return -1;
     99e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
    }

    return rc;
}
     9a2:	4620      	mov	r0, r4
     9a4:	b006      	add	sp, #24
     9a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     9aa:	2601      	movs	r6, #1
     9ac:	e7dd      	b.n	96a <boot_read_swap_size+0x16>
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     9ae:	9801      	ldr	r0, [sp, #4]
     9b0:	f008 fa3e 	bl	8e30 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     9b4:	2304      	movs	r3, #4
     9b6:	f1a0 0108 	sub.w	r1, r0, #8
     9ba:	462a      	mov	r2, r5
     9bc:	9801      	ldr	r0, [sp, #4]
     9be:	f007 fb6e 	bl	809e <flash_area_read>
     9c2:	4604      	mov	r4, r0
        flash_area_close(fap);
     9c4:	9801      	ldr	r0, [sp, #4]
     9c6:	f007 fb69 	bl	809c <flash_area_close>
     9ca:	e7ea      	b.n	9a2 <boot_read_swap_size+0x4e>
     9cc:	00009b58 	.word	0x00009b58

000009d0 <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     9d4:	4b38      	ldr	r3, [pc, #224]	; (ab8 <FIH_LABEL_FIH_CALL_END_296+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     9d6:	b088      	sub	sp, #32
     9d8:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9da:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     9dc:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     9de:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9e0:	f006 feb2 	bl	7748 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     9e4:	a906      	add	r1, sp, #24
     9e6:	b2c0      	uxtb	r0, r0
     9e8:	f001 f9fc 	bl	1de4 <flash_area_open>
    if (rc != 0) {
     9ec:	2800      	cmp	r0, #0
     9ee:	d157      	bne.n	aa0 <FIH_LABEL_FIH_CALL_END_296+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9f0:	4629      	mov	r1, r5
     9f2:	f006 fea9 	bl	7748 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     9f6:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     9f8:	a907      	add	r1, sp, #28
     9fa:	b2c0      	uxtb	r0, r0
     9fc:	fb04 6405 	mla	r4, r4, r5, r6
     a00:	f001 f9f0 	bl	1de4 <flash_area_open>
    if (rc != 0) {
     a04:	2800      	cmp	r0, #0
     a06:	d036      	beq.n	a76 <FIH_LABEL_FIH_CALL_END_296+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a08:	f04f 082c 	mov.w	r8, #44	; 0x2c
     a0c:	fb08 f805 	mul.w	r8, r8, r5
     a10:	eb06 0708 	add.w	r7, r6, r8
     a14:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     a16:	f011 0110 	ands.w	r1, r1, #16
     a1a:	d137      	bne.n	a8c <FIH_LABEL_FIH_CALL_END_296+0x54>

00000a1c <FIH_LABEL_FIH_CALL_START_240>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
     a20:	9301      	str	r3, [sp, #4]
     a22:	4b26      	ldr	r3, [pc, #152]	; (abc <FIH_LABEL_FIH_CALL_END_296+0x84>)
     a24:	4622      	mov	r2, r4
     a26:	9300      	str	r3, [sp, #0]
     a28:	4608      	mov	r0, r1
     a2a:	e9cd 1103 	strd	r1, r1, [sp, #12]
     a2e:	9b06      	ldr	r3, [sp, #24]
     a30:	9102      	str	r1, [sp, #8]
     a32:	f7ff fe03 	bl	63c <bootutil_img_validate>
     a36:	4604      	mov	r4, r0

00000a38 <FIH_LABEL_FIH_CALL_END_296>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a38:	4b21      	ldr	r3, [pc, #132]	; (ac0 <FIH_LABEL_FIH_CALL_END_296+0x88>)
     a3a:	f856 2008 	ldr.w	r2, [r6, r8]
                       fih_rc, BOOT_CURR_IMG(state), slot);
    if (fih_eq(fih_rc, fih_int_encode(BOOT_HOOK_REGULAR)))
    {
        FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    }
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a3e:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a40:	429a      	cmp	r2, r3
     a42:	d10c      	bne.n	a5e <FIH_LABEL_FIH_CALL_END_296+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a44:	893a      	ldrh	r2, [r7, #8]
     a46:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     a48:	43d1      	mvns	r1, r2
     a4a:	428b      	cmp	r3, r1
     a4c:	d807      	bhi.n	a5e <FIH_LABEL_FIH_CALL_END_296+0x26>
        *dest = a + b;
     a4e:	4413      	add	r3, r2
    if (size >= flash_area_get_size(fap)) {
     a50:	6882      	ldr	r2, [r0, #8]
     a52:	4293      	cmp	r3, r2
     a54:	d203      	bcs.n	a5e <FIH_LABEL_FIH_CALL_END_296+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a56:	4b1b      	ldr	r3, [pc, #108]	; (ac4 <FIH_LABEL_FIH_CALL_END_296+0x8c>)
     a58:	681b      	ldr	r3, [r3, #0]
     a5a:	42a3      	cmp	r3, r4
     a5c:	d01d      	beq.n	a9a <FIH_LABEL_FIH_CALL_END_296+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     a5e:	b345      	cbz	r5, ab2 <FIH_LABEL_FIH_CALL_END_296+0x7a>
            flash_area_erase(fap, 0, flash_area_get_size(fap));
     a60:	6882      	ldr	r2, [r0, #8]
     a62:	2100      	movs	r1, #0
     a64:	f007 fb45 	bl	80f2 <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a68:	4a17      	ldr	r2, [pc, #92]	; (ac8 <FIH_LABEL_FIH_CALL_END_296+0x90>)
     a6a:	2145      	movs	r1, #69	; 0x45
     a6c:	4817      	ldr	r0, [pc, #92]	; (acc <FIH_LABEL_FIH_CALL_END_296+0x94>)
     a6e:	f007 fb08 	bl	8082 <z_log_minimal_printk>
        fih_rc = fih_int_encode(1);
     a72:	2401      	movs	r4, #1
     a74:	e011      	b.n	a9a <FIH_LABEL_FIH_CALL_END_296+0x62>
    erased_val = flash_area_erased_val(fap);
     a76:	9807      	ldr	r0, [sp, #28]
     a78:	f007 fb59 	bl	812e <flash_area_erased_val>
     a7c:	4607      	mov	r7, r0
    flash_area_close(fap);
     a7e:	9807      	ldr	r0, [sp, #28]
     a80:	f007 fb0c 	bl	809c <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     a84:	1e63      	subs	r3, r4, #1
     a86:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     a88:	4293      	cmp	r3, r2
     a8a:	d10d      	bne.n	aa8 <FIH_LABEL_FIH_CALL_END_296+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     a8c:	2d00      	cmp	r5, #0
     a8e:	d0f0      	beq.n	a72 <FIH_LABEL_FIH_CALL_END_296+0x3a>
            swap_erase_trailer_sectors(state, fap);
     a90:	4630      	mov	r0, r6
     a92:	9906      	ldr	r1, [sp, #24]
     a94:	f007 f823 	bl	7ade <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     a98:	462c      	mov	r4, r5
        }
    }
#endif

out:
    flash_area_close(fap);
     a9a:	9806      	ldr	r0, [sp, #24]
     a9c:	f007 fafe 	bl	809c <flash_area_close>

    FIH_RET(fih_rc);
}
     aa0:	4620      	mov	r0, r4
     aa2:	b008      	add	sp, #32
     aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     aa8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     aac:	42b9      	cmp	r1, r7
     aae:	d0eb      	beq.n	a88 <FIH_LABEL_FIH_CALL_END_296+0x50>
     ab0:	e7aa      	b.n	a08 <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     ab2:	4a07      	ldr	r2, [pc, #28]	; (ad0 <FIH_LABEL_FIH_CALL_END_296+0x98>)
     ab4:	e7d9      	b.n	a6a <FIH_LABEL_FIH_CALL_END_296+0x32>
     ab6:	bf00      	nop
     ab8:	2000c4e8 	.word	0x2000c4e8
     abc:	2000e8de 	.word	0x2000e8de
     ac0:	96f3b83d 	.word	0x96f3b83d
     ac4:	2000c828 	.word	0x2000c828
     ac8:	00009ce0 	.word	0x00009ce0
     acc:	00009cf2 	.word	0x00009cf2
     ad0:	00009cea 	.word	0x00009cea

00000ad4 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     ad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
     ad6:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     ad8:	2100      	movs	r1, #0
{
     ada:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     adc:	4628      	mov	r0, r5
    size = copy_size = 0;
     ade:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     ae2:	f006 ffbb 	bl	7a5c <boot_status_is_reset>
     ae6:	b330      	cbz	r0, b36 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     ae8:	4e16      	ldr	r6, [pc, #88]	; (b44 <boot_swap_image+0x70>)
     aea:	6823      	ldr	r3, [r4, #0]
     aec:	42b3      	cmp	r3, r6
     aee:	d103      	bne.n	af8 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     af0:	4620      	mov	r0, r4
     af2:	aa01      	add	r2, sp, #4
     af4:	f006 ff46 	bl	7984 <boot_read_image_size.isra.0>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     af8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     afa:	42b3      	cmp	r3, r6
     afc:	d104      	bne.n	b08 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     afe:	466a      	mov	r2, sp
     b00:	2101      	movs	r1, #1
     b02:	4620      	mov	r0, r4
     b04:	f006 ff3e 	bl	7984 <boot_read_image_size.isra.0>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_ALIGN_SIZE);
        }
#endif

        if (size > copy_size) {
     b08:	e9dd 3200 	ldrd	r3, r2, [sp]
     b0c:	4293      	cmp	r3, r2
            copy_size = size;
     b0e:	bf88      	it	hi
     b10:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     b12:	9b01      	ldr	r3, [sp, #4]
     b14:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     b16:	9a01      	ldr	r2, [sp, #4]
     b18:	4629      	mov	r1, r5
     b1a:	4620      	mov	r0, r4
     b1c:	f000 fb3a 	bl	1194 <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     b20:	4b09      	ldr	r3, [pc, #36]	; (b48 <boot_swap_image+0x74>)
     b22:	681a      	ldr	r2, [r3, #0]
     b24:	2a00      	cmp	r2, #0
     b26:	dd03      	ble.n	b30 <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     b28:	2157      	movs	r1, #87	; 0x57
     b2a:	4808      	ldr	r0, [pc, #32]	; (b4c <boot_swap_image+0x78>)
     b2c:	f007 faa9 	bl	8082 <z_log_minimal_printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     b30:	2000      	movs	r0, #0
     b32:	b002      	add	sp, #8
     b34:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     b36:	f105 0108 	add.w	r1, r5, #8
     b3a:	f7ff ff0b 	bl	954 <boot_read_swap_size>
        copy_size = bs->swap_size;
     b3e:	68ab      	ldr	r3, [r5, #8]
     b40:	9301      	str	r3, [sp, #4]
     b42:	e7e8      	b.n	b16 <boot_swap_image+0x42>
     b44:	96f3b83d 	.word	0x96f3b83d
     b48:	2000dc8c 	.word	0x2000dc8c
     b4c:	00009d1a 	.word	0x00009d1a

00000b50 <boot_copy_region>:
{
     b50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b54:	468a      	mov	sl, r1
     b56:	4690      	mov	r8, r2
     b58:	4699      	mov	r9, r3
    bytes_copied = 0;
     b5a:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b5c:	f8df b070 	ldr.w	fp, [pc, #112]	; bd0 <boot_copy_region+0x80>
     b60:	4c19      	ldr	r4, [pc, #100]	; (bc8 <boot_copy_region+0x78>)
     b62:	4d1a      	ldr	r5, [pc, #104]	; (bcc <boot_copy_region+0x7c>)
    while (bytes_copied < sz) {
     b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b66:	429e      	cmp	r6, r3
     b68:	d301      	bcc.n	b6e <boot_copy_region+0x1e>
    return 0;
     b6a:	2000      	movs	r0, #0
     b6c:	e00f      	b.n	b8e <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b70:	4650      	mov	r0, sl
        if (sz - bytes_copied > sizeof buf) {
     b72:	1b9f      	subs	r7, r3, r6
     b74:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b78:	bf28      	it	cs
     b7a:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b7e:	4a14      	ldr	r2, [pc, #80]	; (bd0 <boot_copy_region+0x80>)
     b80:	463b      	mov	r3, r7
     b82:	eb06 0109 	add.w	r1, r6, r9
     b86:	f007 fa8a 	bl	809e <flash_area_read>
        if (rc != 0) {
     b8a:	b110      	cbz	r0, b92 <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b8c:	2001      	movs	r0, #1
}
     b8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     b92:	990a      	ldr	r1, [sp, #40]	; 0x28
     b94:	463b      	mov	r3, r7
     b96:	465a      	mov	r2, fp
     b98:	4640      	mov	r0, r8
     b9a:	1871      	adds	r1, r6, r1
     b9c:	f007 fa94 	bl	80c8 <flash_area_write>
        if (rc != 0) {
     ba0:	2800      	cmp	r0, #0
     ba2:	d1f3      	bne.n	b8c <boot_copy_region+0x3c>
     ba4:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     ba8:	443e      	add	r6, r7
     baa:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     bae:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     bb2:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     bb6:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     bba:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     bbe:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     bc2:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     bc6:	e7cd      	b.n	b64 <boot_copy_region+0x14>
     bc8:	50018000 	.word	0x50018000
     bcc:	6e524635 	.word	0x6e524635
     bd0:	2000c88c 	.word	0x2000c88c

00000bd4 <context_boot_go>:
#endif
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     bd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     bd8:	460f      	mov	r7, r1

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bda:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     bdc:	4b8e      	ldr	r3, [pc, #568]	; (e18 <FIH_LABEL_FIH_CALL_END_2425+0x48>)
{
     bde:	b085      	sub	sp, #20
    fih_int fih_rc = FIH_FAILURE;
     be0:	681e      	ldr	r6, [r3, #0]
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     be2:	4b8e      	ldr	r3, [pc, #568]	; (e1c <FIH_LABEL_FIH_CALL_END_2425+0x4c>)
{
     be4:	4604      	mov	r4, r0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     be6:	6243      	str	r3, [r0, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     be8:	4b8d      	ldr	r3, [pc, #564]	; (e20 <FIH_LABEL_FIH_CALL_END_2425+0x50>)
     bea:	6503      	str	r3, [r0, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bec:	4608      	mov	r0, r1
     bee:	f006 fdab 	bl	7748 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     bf2:	f104 0120 	add.w	r1, r4, #32
     bf6:	b2c0      	uxtb	r0, r0
     bf8:	f001 f8f4 	bl	1de4 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bfc:	2101      	movs	r1, #1
     bfe:	2000      	movs	r0, #0
     c00:	f006 fda2 	bl	7748 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c04:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     c08:	b2c0      	uxtb	r0, r0
     c0a:	f001 f8eb 	bl	1de4 <flash_area_open>
     c0e:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     c10:	4620      	mov	r0, r4
     c12:	f006 fef8 	bl	7a06 <boot_read_sectors>
    if (rc != 0) {
     c16:	4680      	mov	r8, r0
     c18:	b968      	cbnz	r0, c36 <context_boot_go+0x62>
    rc = boot_read_image_headers(state, false, NULL);
     c1a:	2200      	movs	r2, #0
     c1c:	4620      	mov	r0, r4
     c1e:	4611      	mov	r1, r2
     c20:	f006 fe97 	bl	7952 <boot_read_image_headers>
    if (rc != 0) {
     c24:	4680      	mov	r8, r0
     c26:	b308      	cbz	r0, c6c <context_boot_go+0x98>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     c28:	2200      	movs	r2, #0
     c2a:	2157      	movs	r1, #87	; 0x57
     c2c:	487d      	ldr	r0, [pc, #500]	; (e24 <FIH_LABEL_FIH_CALL_END_2425+0x54>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c2e:	f007 fa28 	bl	8082 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c32:	2301      	movs	r3, #1
     c34:	e092      	b.n	d5c <FIH_LABEL_FIH_CALL_END_2212+0xe>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     c36:	f44f 7280 	mov.w	r2, #256	; 0x100
     c3a:	2157      	movs	r1, #87	; 0x57
     c3c:	487a      	ldr	r0, [pc, #488]	; (e28 <FIH_LABEL_FIH_CALL_END_2425+0x58>)
     c3e:	f007 fa20 	bl	8082 <z_log_minimal_printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c42:	2301      	movs	r3, #1
        if (rc == BOOT_EFLASH)
     c44:	4598      	cmp	r8, r3
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c46:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (rc == BOOT_EFLASH)
     c4a:	d1e6      	bne.n	c1a <context_boot_go+0x46>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     c4c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     c50:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     c52:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     c56:	f200 8084 	bhi.w	d62 <FIH_LABEL_FIH_CALL_END_2212+0x14>
     c5a:	2b01      	cmp	r3, #1
     c5c:	f200 8088 	bhi.w	d70 <FIH_LABEL_FIH_CALL_END_2212+0x22>
     c60:	f000 809f 	beq.w	da2 <FIH_LABEL_FIH_CALL_END_2212+0x54>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     c64:	23ff      	movs	r3, #255	; 0xff
     c66:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     c6a:	e09a      	b.n	da2 <FIH_LABEL_FIH_CALL_END_2212+0x54>
    if (boot_slots_compatible(state)) {
     c6c:	4620      	mov	r0, r4
     c6e:	f000 f9a7 	bl	fc0 <boot_slots_compatible>
     c72:	2800      	cmp	r0, #0
     c74:	d0dd      	beq.n	c32 <context_boot_go+0x5e>
        boot_status_reset(bs);
     c76:	4668      	mov	r0, sp
     c78:	f006 fee7 	bl	7a4a <boot_status_reset>
        rc = swap_read_status(state, bs);
     c7c:	4669      	mov	r1, sp
     c7e:	4620      	mov	r0, r4
     c80:	f006 ff82 	bl	7b88 <swap_read_status>
        if (rc != 0) {
     c84:	b118      	cbz	r0, c8e <context_boot_go+0xba>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c86:	4642      	mov	r2, r8
     c88:	2157      	movs	r1, #87	; 0x57
     c8a:	4868      	ldr	r0, [pc, #416]	; (e2c <FIH_LABEL_FIH_CALL_END_2425+0x5c>)
     c8c:	e7cf      	b.n	c2e <context_boot_go+0x5a>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     c8e:	4668      	mov	r0, sp
     c90:	f006 fee4 	bl	7a5c <boot_status_is_reset>
     c94:	f080 0001 	eor.w	r0, r0, #1
     c98:	466a      	mov	r2, sp
     c9a:	b2c1      	uxtb	r1, r0
     c9c:	4620      	mov	r0, r4
     c9e:	f006 fe58 	bl	7952 <boot_read_image_headers>
        if (rc != 0) {
     ca2:	4602      	mov	r2, r0
     ca4:	2800      	cmp	r0, #0
     ca6:	d1bf      	bne.n	c28 <context_boot_go+0x54>
        if (!boot_status_is_reset(bs)) {
     ca8:	4668      	mov	r0, sp
     caa:	f006 fed7 	bl	7a5c <boot_status_is_reset>
     cae:	4680      	mov	r8, r0
     cb0:	bb60      	cbnz	r0, d0c <context_boot_go+0x138>
    rc = boot_swap_image(state, bs);
     cb2:	4669      	mov	r1, sp
     cb4:	4620      	mov	r0, r4
     cb6:	f7ff ff0d 	bl	ad4 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     cba:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cbe:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     cc2:	3b03      	subs	r3, #3
     cc4:	2b01      	cmp	r3, #1
     cc6:	d806      	bhi.n	cd6 <context_boot_go+0x102>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     cc8:	4640      	mov	r0, r8
     cca:	f006 ffac 	bl	7c26 <swap_set_image_ok>
        if (rc != 0) {
     cce:	b110      	cbz	r0, cd6 <context_boot_go+0x102>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cd0:	23ff      	movs	r3, #255	; 0xff
     cd2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     cd6:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cda:	3b02      	subs	r3, #2
     cdc:	2b02      	cmp	r3, #2
     cde:	d80b      	bhi.n	cf8 <context_boot_go+0x124>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     ce0:	2000      	movs	r0, #0
     ce2:	f006 ff8e 	bl	7c02 <swap_set_copy_done>
        if (rc != 0) {
     ce6:	b138      	cbz	r0, cf8 <context_boot_go+0x124>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     ce8:	23ff      	movs	r3, #255	; 0xff
     cea:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     cee:	2145      	movs	r1, #69	; 0x45
     cf0:	484f      	ldr	r0, [pc, #316]	; (e30 <FIH_LABEL_FIH_CALL_END_2425+0x60>)
     cf2:	f007 f9c6 	bl	8082 <z_log_minimal_printk>
        while (1) {}
     cf6:	e7fe      	b.n	cf6 <context_boot_go+0x122>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     cf8:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     cfc:	2bff      	cmp	r3, #255	; 0xff
     cfe:	d0f6      	beq.n	cee <context_boot_go+0x11a>
            rc = boot_read_image_headers(state, false, bs);
     d00:	466a      	mov	r2, sp
     d02:	2100      	movs	r1, #0
     d04:	4620      	mov	r0, r4
     d06:	f006 fe24 	bl	7952 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d0a:	e792      	b.n	c32 <context_boot_go+0x5e>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     d0c:	f89d 9007 	ldrb.w	r9, [sp, #7]
     d10:	f1b9 0f01 	cmp.w	r9, #1
     d14:	d117      	bne.n	d46 <FIH_LABEL_FIH_CALL_START_2192>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d16:	4610      	mov	r0, r2
     d18:	f003 fbe6 	bl	44e8 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d1c:	1e83      	subs	r3, r0, #2
     d1e:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     d20:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     d22:	d80d      	bhi.n	d40 <FIH_LABEL_FIH_CALL_END_2127+0x14>

00000d24 <FIH_LABEL_FIH_CALL_START_2103>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     d24:	4649      	mov	r1, r9
     d26:	4620      	mov	r0, r4
     d28:	f7ff fe52 	bl	9d0 <boot_validate_slot.isra.0>

00000d2c <FIH_LABEL_FIH_CALL_END_2127>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d2c:	4b41      	ldr	r3, [pc, #260]	; (e34 <FIH_LABEL_FIH_CALL_END_2425+0x64>)
     d2e:	681b      	ldr	r3, [r3, #0]
     d30:	4298      	cmp	r0, r3
     d32:	d005      	beq.n	d40 <FIH_LABEL_FIH_CALL_END_2127+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     d34:	2801      	cmp	r0, #1
     d36:	bf0c      	ite	eq
     d38:	f04f 0801 	moveq.w	r8, #1
     d3c:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d40:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
     d44:	e782      	b.n	c4c <context_boot_go+0x78>

00000d46 <FIH_LABEL_FIH_CALL_START_2192>:
                FIH_CALL(boot_validate_slot, fih_rc,
     d46:	2101      	movs	r1, #1
     d48:	4620      	mov	r0, r4
     d4a:	f7ff fe41 	bl	9d0 <boot_validate_slot.isra.0>

00000d4e <FIH_LABEL_FIH_CALL_END_2212>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d4e:	4b39      	ldr	r3, [pc, #228]	; (e34 <FIH_LABEL_FIH_CALL_END_2425+0x64>)
     d50:	681b      	ldr	r3, [r3, #0]
     d52:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     d54:	bf14      	ite	ne
     d56:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d58:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d5c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d60:	e774      	b.n	c4c <context_boot_go+0x78>
        switch (BOOT_SWAP_TYPE(state)) {
     d62:	2b05      	cmp	r3, #5
     d64:	f47f af7e 	bne.w	c64 <context_boot_go+0x90>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d68:	2000      	movs	r0, #0
     d6a:	f006 ff5c 	bl	7c26 <swap_set_image_ok>
     d6e:	e013      	b.n	d98 <FIH_LABEL_FIH_CALL_END_2212+0x4a>
        rc = boot_swap_image(state, bs);
     d70:	4669      	mov	r1, sp
     d72:	4620      	mov	r0, r4
     d74:	f7ff feae 	bl	ad4 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     d78:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     d7c:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d7e:	1eda      	subs	r2, r3, #3
     d80:	2a01      	cmp	r2, #1
     d82:	d80c      	bhi.n	d9e <FIH_LABEL_FIH_CALL_END_2212+0x50>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d84:	2000      	movs	r0, #0
     d86:	f006 ff4e 	bl	7c26 <swap_set_image_ok>
        if (rc != 0) {
     d8a:	4605      	mov	r5, r0
     d8c:	2800      	cmp	r0, #0
     d8e:	f47f af69 	bne.w	c64 <context_boot_go+0x90>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d92:	2000      	movs	r0, #0
     d94:	f006 ff35 	bl	7c02 <swap_set_copy_done>
            if (rc != 0) {
     d98:	4605      	mov	r5, r0
     d9a:	b110      	cbz	r0, da2 <FIH_LABEL_FIH_CALL_END_2212+0x54>
     d9c:	e762      	b.n	c64 <context_boot_go+0x90>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d9e:	2b02      	cmp	r3, #2
     da0:	d0f7      	beq.n	d92 <FIH_LABEL_FIH_CALL_END_2212+0x44>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     da2:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     da6:	2bff      	cmp	r3, #255	; 0xff
     da8:	d104      	bne.n	db4 <FIH_LABEL_FIH_CALL_END_2212+0x66>
            BOOT_LOG_ERR("panic!");
     daa:	2145      	movs	r1, #69	; 0x45
     dac:	4820      	ldr	r0, [pc, #128]	; (e30 <FIH_LABEL_FIH_CALL_END_2425+0x60>)
     dae:	f007 f968 	bl	8082 <z_log_minimal_printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     db2:	e7fe      	b.n	db2 <FIH_LABEL_FIH_CALL_END_2212+0x64>
#if BOOT_IMAGE_NUMBER > 1
        if (state->img_mask[BOOT_CURR_IMG(state)]) {
            continue;
        }
#endif
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     db4:	2b01      	cmp	r3, #1
     db6:	d006      	beq.n	dc6 <FIH_LABEL_FIH_CALL_START_2409>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     db8:	466a      	mov	r2, sp
     dba:	2100      	movs	r1, #0
     dbc:	4620      	mov	r0, r4
     dbe:	f006 fdc8 	bl	7952 <boot_read_image_headers>
            if (rc != 0) {
     dc2:	4605      	mov	r5, r0
     dc4:	b9d0      	cbnz	r0, dfc <FIH_LABEL_FIH_CALL_END_2425+0x2c>

00000dc6 <FIH_LABEL_FIH_CALL_START_2409>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     dc6:	2100      	movs	r1, #0
     dc8:	4620      	mov	r0, r4
     dca:	f7ff fe01 	bl	9d0 <boot_validate_slot.isra.0>
     dce:	4606      	mov	r6, r0

00000dd0 <FIH_LABEL_FIH_CALL_END_2425>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     dd0:	f8df 8060 	ldr.w	r8, [pc, #96]	; e34 <FIH_LABEL_FIH_CALL_END_2425+0x64>
     dd4:	f8d8 3000 	ldr.w	r3, [r8]
     dd8:	4298      	cmp	r0, r3
     dda:	d10f      	bne.n	dfc <FIH_LABEL_FIH_CALL_END_2425+0x2c>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     ddc:	2210      	movs	r2, #16
     dde:	2100      	movs	r1, #0
     de0:	4668      	mov	r0, sp
     de2:	f007 fcc2 	bl	876a <memset>
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     de6:	6a20      	ldr	r0, [r4, #32]
     de8:	f006 fcb7 	bl	775a <flash_area_get_device_id>
        rc = boot_add_shared_data(state, BOOT_PRIMARY_SLOT);
     dec:	2500      	movs	r5, #0
    rsp->br_flash_dev_id = flash_area_get_device_id(BOOT_IMG_AREA(state, active_slot));
     dee:	7138      	strb	r0, [r7, #4]
 */
int flash_area_sector_from_off(off_t off, struct flash_sector *sector);

static inline uint32_t flash_area_get_off(const struct flash_area *fa)
{
	return (uint32_t)fa->fa_off;
     df0:	6a23      	ldr	r3, [r4, #32]

    fill_rsp(state, rsp);

    fih_rc = FIH_SUCCESS;
     df2:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     df6:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, active_slot);
     df8:	603c      	str	r4, [r7, #0]
    rsp->br_image_off = boot_img_slot_off(state, active_slot);
     dfa:	60bb      	str	r3, [r7, #8]
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     dfc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     dfe:	f007 f94d 	bl	809c <flash_area_close>
     e02:	6a20      	ldr	r0, [r4, #32]
     e04:	f007 f94a 	bl	809c <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     e08:	2d00      	cmp	r5, #0
     e0a:	bf14      	ite	ne
     e0c:	4628      	movne	r0, r5
     e0e:	4630      	moveq	r0, r6
     e10:	b005      	add	sp, #20
     e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e16:	bf00      	nop
     e18:	2000c4e8 	.word	0x2000c4e8
     e1c:	2000cc8c 	.word	0x2000cc8c
     e20:	2000d48c 	.word	0x2000d48c
     e24:	00009d8b 	.word	0x00009d8b
     e28:	00009d49 	.word	0x00009d49
     e2c:	00009db7 	.word	0x00009db7
     e30:	00009de1 	.word	0x00009de1
     e34:	2000c828 	.word	0x2000c828

00000e38 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     e38:	b538      	push	{r3, r4, r5, lr}
void boot_state_clear(struct boot_loader_state *state)
{
    if (state != NULL) {
        memset(state, 0, sizeof(struct boot_loader_state));
    } else {
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e3a:	4d06      	ldr	r5, [pc, #24]	; (e54 <FIH_LABEL_FIH_CALL_END_3111+0x4>)
{
     e3c:	4604      	mov	r4, r0
        memset(&boot_data, 0, sizeof(struct boot_loader_state));
     e3e:	2260      	movs	r2, #96	; 0x60
     e40:	2100      	movs	r1, #0
     e42:	4628      	mov	r0, r5
     e44:	f007 fc91 	bl	876a <memset>

00000e48 <FIH_LABEL_FIH_CALL_START_3096>:
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     e48:	4621      	mov	r1, r4
     e4a:	4628      	mov	r0, r5
     e4c:	f7ff fec2 	bl	bd4 <context_boot_go>

00000e50 <FIH_LABEL_FIH_CALL_END_3111>:
}
     e50:	bd38      	pop	{r3, r4, r5, pc}
     e52:	bf00      	nop
     e54:	2000c82c 	.word	0x2000c82c

00000e58 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     e58:	b573      	push	{r0, r1, r4, r5, r6, lr}
     e5a:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     e5c:	461c      	mov	r4, r3
     e5e:	b333      	cbz	r3, eae <boot_read_image_header+0x56>
	return fs->fs_off;
}

static inline uint32_t flash_sector_get_size(const struct flash_sector *fs)
{
	return fs->fs_size;
     e60:	6a43      	ldr	r3, [r0, #36]	; 0x24
     e62:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     e64:	7963      	ldrb	r3, [r4, #5]
     e66:	2b01      	cmp	r3, #1
     e68:	d115      	bne.n	e96 <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     e6a:	bb01      	cbnz	r1, eae <boot_read_image_header+0x56>
     e6c:	4b1f      	ldr	r3, [pc, #124]	; (eec <boot_read_image_header+0x94>)
     e6e:	6822      	ldr	r2, [r4, #0]
     e70:	681b      	ldr	r3, [r3, #0]
    off = 0;
     e72:	429a      	cmp	r2, r3
     e74:	bf98      	it	ls
     e76:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     e78:	2000      	movs	r0, #0
     e7a:	f006 fc65 	bl	7748 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     e7e:	a901      	add	r1, sp, #4
     e80:	b2c0      	uxtb	r0, r0
     e82:	f000 ffaf 	bl	1de4 <flash_area_open>
    if (rc != 0) {
     e86:	b1f0      	cbz	r0, ec6 <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     e88:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     e8a:	9801      	ldr	r0, [sp, #4]
     e8c:	f007 f906 	bl	809c <flash_area_close>
    return rc;
}
     e90:	4628      	mov	r0, r5
     e92:	b002      	add	sp, #8
     e94:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     e96:	2b02      	cmp	r3, #2
     e98:	d109      	bne.n	eae <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     e9a:	6823      	ldr	r3, [r4, #0]
     e9c:	2b01      	cmp	r3, #1
     e9e:	d908      	bls.n	eb2 <boot_read_image_header+0x5a>
     ea0:	4a12      	ldr	r2, [pc, #72]	; (eec <boot_read_image_header+0x94>)
     ea2:	6812      	ldr	r2, [r2, #0]
     ea4:	4293      	cmp	r3, r2
     ea6:	d802      	bhi.n	eae <boot_read_image_header+0x56>
                if (slot == 0) {
     ea8:	fab1 f181 	clz	r1, r1
     eac:	0949      	lsrs	r1, r1, #5
    off = 0;
     eae:	2500      	movs	r5, #0
     eb0:	e7e2      	b.n	e78 <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     eb2:	d1fc      	bne.n	eae <boot_read_image_header+0x56>
                if (slot == 0) {
     eb4:	2900      	cmp	r1, #0
     eb6:	d0df      	beq.n	e78 <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     eb8:	2901      	cmp	r1, #1
     eba:	d1f8      	bne.n	eae <boot_read_image_header+0x56>
     ebc:	7921      	ldrb	r1, [r4, #4]
     ebe:	3902      	subs	r1, #2
     ec0:	bf18      	it	ne
     ec2:	2101      	movne	r1, #1
     ec4:	e7f3      	b.n	eae <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     ec6:	4629      	mov	r1, r5
     ec8:	2320      	movs	r3, #32
     eca:	4632      	mov	r2, r6
     ecc:	9801      	ldr	r0, [sp, #4]
     ece:	f007 f8e6 	bl	809e <flash_area_read>
    if (rc != 0) {
     ed2:	4605      	mov	r5, r0
     ed4:	2800      	cmp	r0, #0
     ed6:	d1d7      	bne.n	e88 <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     ed8:	2c00      	cmp	r4, #0
     eda:	d0d6      	beq.n	e8a <boot_read_image_header+0x32>
     edc:	6835      	ldr	r5, [r6, #0]
     ede:	4804      	ldr	r0, [pc, #16]	; (ef0 <boot_read_image_header+0x98>)
     ee0:	1a2d      	subs	r5, r5, r0
     ee2:	bf18      	it	ne
     ee4:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
     ee8:	e7cf      	b.n	e8a <boot_read_image_header+0x32>
     eea:	bf00      	nop
     eec:	2000c4ec 	.word	0x2000c4ec
     ef0:	96f3b83d 	.word	0x96f3b83d

00000ef4 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ef8:	4607      	mov	r7, r0
     efa:	460c      	mov	r4, r1
     efc:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     efe:	4601      	mov	r1, r0
     f00:	2000      	movs	r0, #0
{
     f02:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     f04:	f006 fcf6 	bl	78f4 <boot_status_entries>
    if (max_entries < 0) {
     f08:	1e05      	subs	r5, r0, #0
     f0a:	db52      	blt.n	fb2 <swap_read_status_bytes+0xbe>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     f0c:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     f0e:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     f10:	f006 fcfd 	bl	790e <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     f14:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     f18:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     f1c:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     f20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     f24:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
     f28:	fb09 0808 	mla	r8, r9, r8, r0
    for (i = max_entries; i > 0; i--) {
     f2c:	b99d      	cbnz	r5, f56 <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     f2e:	f1ba 0f01 	cmp.w	sl, #1
     f32:	dd03      	ble.n	f3c <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     f34:	2145      	movs	r1, #69	; 0x45
     f36:	4821      	ldr	r0, [pc, #132]	; (fbc <swap_read_status_bytes+0xc8>)
     f38:	f007 f8a3 	bl	8082 <z_log_minimal_printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     f3c:	1c63      	adds	r3, r4, #1
     f3e:	d006      	beq.n	f4e <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     f40:	2cff      	cmp	r4, #255	; 0xff
     f42:	dc2a      	bgt.n	f9a <swap_read_status_bytes+0xa6>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f44:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f48:	3401      	adds	r4, #1
     f4a:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f4c:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     f4e:	4628      	mov	r0, r5
     f50:	b005      	add	sp, #20
     f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     f56:	1e6b      	subs	r3, r5, #1
     f58:	9300      	str	r3, [sp, #0]
     f5a:	4641      	mov	r1, r8
     f5c:	2301      	movs	r3, #1
     f5e:	4638      	mov	r0, r7
     f60:	f10d 020f 	add.w	r2, sp, #15
     f64:	f007 f89b 	bl	809e <flash_area_read>
        if (rc < 0) {
     f68:	1e03      	subs	r3, r0, #0
     f6a:	9301      	str	r3, [sp, #4]
     f6c:	db23      	blt.n	fb6 <swap_read_status_bytes+0xc2>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     f6e:	2201      	movs	r2, #1
     f70:	4638      	mov	r0, r7
     f72:	f10d 010f 	add.w	r1, sp, #15
     f76:	f007 ff6f 	bl	8e58 <bootutil_buffer_is_erased>
     f7a:	9b01      	ldr	r3, [sp, #4]
     f7c:	b140      	cbz	r0, f90 <swap_read_status_bytes+0x9c>
            if (rc != last_rc) {
     f7e:	455b      	cmp	r3, fp
     f80:	d001      	beq.n	f86 <swap_read_status_bytes+0x92>
                erased_sections++;
     f82:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     f86:	469b      	mov	fp, r3
     f88:	9d00      	ldr	r5, [sp, #0]
     f8a:	eba8 0809 	sub.w	r8, r8, r9
     f8e:	e7cd      	b.n	f2c <swap_read_status_bytes+0x38>
     f90:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
     f94:	bf08      	it	eq
     f96:	462c      	moveq	r4, r5
     f98:	e7f5      	b.n	f86 <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
     f9a:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f9c:	f5a4 7480 	sub.w	r4, r4, #256	; 0x100
        bs->op = BOOT_STATUS_OP_SWAP;
     fa0:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fa2:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fa4:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fa8:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     faa:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     fac:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     fae:	7134      	strb	r4, [r6, #4]
     fb0:	e7cd      	b.n	f4e <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
     fb2:	2507      	movs	r5, #7
     fb4:	e7cb      	b.n	f4e <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
     fb6:	2501      	movs	r5, #1
     fb8:	e7c9      	b.n	f4e <swap_read_status_bytes+0x5a>
     fba:	bf00      	nop
     fbc:	00009ded 	.word	0x00009ded

00000fc0 <boot_slots_compatible>:
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
     fc0:	6a81      	ldr	r1, [r0, #40]	; 0x28
     fc2:	6d42      	ldr	r2, [r0, #84]	; 0x54
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     fc4:	b538      	push	{r3, r4, r5, lr}
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     fc6:	4291      	cmp	r1, r2
     fc8:	d008      	beq.n	fdc <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     fca:	1c53      	adds	r3, r2, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     fcc:	428b      	cmp	r3, r1
     fce:	d005      	beq.n	fdc <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     fd0:	2157      	movs	r1, #87	; 0x57
     fd2:	4814      	ldr	r0, [pc, #80]	; (1024 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x24>)

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     fd4:	f007 f855 	bl	8082 <z_log_minimal_printk>
            return 0;
     fd8:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     fda:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     fdc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
     fe0:	d91c      	bls.n	101c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     fe2:	2157      	movs	r1, #87	; 0x57
     fe4:	4810      	ldr	r0, [pc, #64]	; (1028 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x28>)
     fe6:	e7f5      	b.n	fd4 <boot_slots_compatible+0x14>
     fe8:	6a44      	ldr	r4, [r0, #36]	; 0x24
     fea:	6d05      	ldr	r5, [r0, #80]	; 0x50
     fec:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
     ff0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     ff4:	6864      	ldr	r4, [r4, #4]
        if (sector_sz_pri != sector_sz_sec) {
     ff6:	686d      	ldr	r5, [r5, #4]
     ff8:	42ac      	cmp	r4, r5
     ffa:	d002      	beq.n	1002 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     ffc:	2157      	movs	r1, #87	; 0x57
     ffe:	480b      	ldr	r0, [pc, #44]	; (102c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2c>)
    1000:	e7e8      	b.n	fd4 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
    1002:	3301      	adds	r3, #1
    1004:	429a      	cmp	r2, r3
    1006:	d1ef      	bne.n	fe8 <boot_slots_compatible+0x28>
    if (num_sectors_pri > num_sectors_sec) {
    1008:	4291      	cmp	r1, r2
    100a:	d905      	bls.n	1018 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18>
    100c:	6a43      	ldr	r3, [r0, #36]	; 0x24
    100e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
    1012:	6853      	ldr	r3, [r2, #4]
    1014:	42a3      	cmp	r3, r4
    1016:	d1f1      	bne.n	ffc <boot_slots_compatible+0x3c>
    return 1;
    1018:	2001      	movs	r0, #1
    101a:	e7de      	b.n	fda <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
    101c:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
    101e:	461c      	mov	r4, r3
    1020:	e7f0      	b.n	1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>
    1022:	bf00      	nop
    1024:	00009e10 	.word	0x00009e10
    1028:	00009e48 	.word	0x00009e48
    102c:	00009e77 	.word	0x00009e77

00001030 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
    1030:	b500      	push	{lr}
    1032:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    1034:	2003      	movs	r0, #3
    1036:	a904      	add	r1, sp, #16
    1038:	f007 ff74 	bl	8f24 <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    103c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1040:	2a01      	cmp	r2, #1
    1042:	d041      	beq.n	10c8 <swap_status_source+0x98>
    1044:	4b25      	ldr	r3, [pc, #148]	; (10dc <swap_status_source+0xac>)
    1046:	4926      	ldr	r1, [pc, #152]	; (10e0 <swap_status_source+0xb0>)
    1048:	2a03      	cmp	r2, #3
    104a:	bf18      	it	ne
    104c:	460b      	movne	r3, r1
    104e:	f89d 2013 	ldrb.w	r2, [sp, #19]
    1052:	2149      	movs	r1, #73	; 0x49
    1054:	9202      	str	r2, [sp, #8]
    1056:	f89d 2012 	ldrb.w	r2, [sp, #18]
    105a:	4822      	ldr	r0, [pc, #136]	; (10e4 <swap_status_source+0xb4>)
    105c:	9201      	str	r2, [sp, #4]
    105e:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1062:	9200      	str	r2, [sp, #0]
    1064:	4a20      	ldr	r2, [pc, #128]	; (10e8 <swap_status_source+0xb8>)
    1066:	f007 f80c 	bl	8082 <z_log_minimal_printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    106a:	2009      	movs	r0, #9
    106c:	a906      	add	r1, sp, #24
    106e:	f007 ff59 	bl	8f24 <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    1072:	f89d 2018 	ldrb.w	r2, [sp, #24]
    1076:	2a01      	cmp	r2, #1
    1078:	d028      	beq.n	10cc <swap_status_source+0x9c>
    107a:	4b18      	ldr	r3, [pc, #96]	; (10dc <swap_status_source+0xac>)
    107c:	4918      	ldr	r1, [pc, #96]	; (10e0 <swap_status_source+0xb0>)
    107e:	2a03      	cmp	r2, #3
    1080:	bf18      	it	ne
    1082:	460b      	movne	r3, r1
    1084:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1088:	2149      	movs	r1, #73	; 0x49
    108a:	9202      	str	r2, [sp, #8]
    108c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    1090:	4814      	ldr	r0, [pc, #80]	; (10e4 <swap_status_source+0xb4>)
    1092:	9201      	str	r2, [sp, #4]
    1094:	f89d 2019 	ldrb.w	r2, [sp, #25]
    1098:	9200      	str	r2, [sp, #0]
    109a:	4a14      	ldr	r2, [pc, #80]	; (10ec <swap_status_source+0xbc>)
    109c:	f006 fff1 	bl	8082 <z_log_minimal_printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    10a0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    10a4:	2b01      	cmp	r3, #1
    10a6:	d113      	bne.n	10d0 <swap_status_source+0xa0>
    10a8:	f89d 3012 	ldrb.w	r3, [sp, #18]
    10ac:	2b03      	cmp	r3, #3
    10ae:	d10f      	bne.n	10d0 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    10b0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    10b4:	2b01      	cmp	r3, #1
    10b6:	d00b      	beq.n	10d0 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    10b8:	480d      	ldr	r0, [pc, #52]	; (10f0 <swap_status_source+0xc0>)
    10ba:	2149      	movs	r1, #73	; 0x49
    10bc:	f006 ffe1 	bl	8082 <z_log_minimal_printk>
        return source;
    10c0:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    10c2:	b009      	add	sp, #36	; 0x24
    10c4:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    10c8:	4b0a      	ldr	r3, [pc, #40]	; (10f4 <swap_status_source+0xc4>)
    10ca:	e7c0      	b.n	104e <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    10cc:	4b09      	ldr	r3, [pc, #36]	; (10f4 <swap_status_source+0xc4>)
    10ce:	e7d9      	b.n	1084 <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
    10d0:	4809      	ldr	r0, [pc, #36]	; (10f8 <swap_status_source+0xc8>)
    10d2:	2149      	movs	r1, #73	; 0x49
    10d4:	f006 ffd5 	bl	8082 <z_log_minimal_printk>
    return BOOT_STATUS_SOURCE_NONE;
    10d8:	2000      	movs	r0, #0
    10da:	e7f2      	b.n	10c2 <swap_status_source+0x92>
    10dc:	00009ea8 	.word	0x00009ea8
    10e0:	00009eae 	.word	0x00009eae
    10e4:	00009ec0 	.word	0x00009ec0
    10e8:	00009eb2 	.word	0x00009eb2
    10ec:	00009f01 	.word	0x00009f01
    10f0:	00009f11 	.word	0x00009f11
    10f4:	00009ea3 	.word	0x00009ea3
    10f8:	00009f30 	.word	0x00009f30

000010fc <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec)
{
    10fc:	b570      	push	{r4, r5, r6, lr}
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    10fe:	684b      	ldr	r3, [r1, #4]
{
    1100:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1102:	4a1e      	ldr	r2, [pc, #120]	; (117c <fixup_revert+0x80>)
    1104:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    1108:	4293      	cmp	r3, r2
{
    110a:	4606      	mov	r6, r0
    110c:	460d      	mov	r5, r1
    110e:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    1110:	d12f      	bne.n	1172 <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    1112:	680b      	ldr	r3, [r1, #0]
    1114:	2b01      	cmp	r3, #1
    1116:	d12c      	bne.n	1172 <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state(fap_sec, &swap_state);
    1118:	4620      	mov	r0, r4
    111a:	a904      	add	r1, sp, #16
    111c:	f003 f990 	bl	4440 <boot_read_swap_state>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1120:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1124:	2a01      	cmp	r2, #1
    1126:	d026      	beq.n	1176 <fixup_revert+0x7a>
    1128:	4b15      	ldr	r3, [pc, #84]	; (1180 <fixup_revert+0x84>)
    112a:	4916      	ldr	r1, [pc, #88]	; (1184 <fixup_revert+0x88>)
    112c:	2a03      	cmp	r2, #3
    112e:	bf18      	it	ne
    1130:	460b      	movne	r3, r1
    1132:	f89d 2013 	ldrb.w	r2, [sp, #19]
    1136:	2149      	movs	r1, #73	; 0x49
    1138:	9202      	str	r2, [sp, #8]
    113a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    113e:	4812      	ldr	r0, [pc, #72]	; (1188 <fixup_revert+0x8c>)
    1140:	9201      	str	r2, [sp, #4]
    1142:	f89d 2011 	ldrb.w	r2, [sp, #17]
    1146:	9200      	str	r2, [sp, #0]
    1148:	4a10      	ldr	r2, [pc, #64]	; (118c <fixup_revert+0x90>)
    114a:	f006 ff9a 	bl	8082 <z_log_minimal_printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    114e:	f89d 3010 	ldrb.w	r3, [sp, #16]
    1152:	2b03      	cmp	r3, #3
    1154:	d10d      	bne.n	1172 <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    1156:	4621      	mov	r1, r4
    1158:	4630      	mov	r0, r6
    115a:	f006 fcc0 	bl	7ade <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    115e:	4620      	mov	r0, r4
    1160:	f007 fed3 	bl	8f0a <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    1164:	4620      	mov	r0, r4
    1166:	68a9      	ldr	r1, [r5, #8]
    1168:	f006 fbe4 	bl	7934 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    116c:	4620      	mov	r0, r4
    116e:	f003 f947 	bl	4400 <boot_write_magic>
        assert(rc == 0);
    }
}
    1172:	b006      	add	sp, #24
    1174:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    1176:	4b06      	ldr	r3, [pc, #24]	; (1190 <fixup_revert+0x94>)
    1178:	e7db      	b.n	1132 <fixup_revert+0x36>
    117a:	bf00      	nop
    117c:	04000100 	.word	0x04000100
    1180:	00009ea8 	.word	0x00009ea8
    1184:	00009eae 	.word	0x00009eae
    1188:	00009ec0 	.word	0x00009ec0
    118c:	00009f01 	.word	0x00009f01
    1190:	00009ea3 	.word	0x00009ea3

00001194 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    1194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1198:	ed2d 8b02 	vpush	{d8}
    119c:	4605      	mov	r5, r0
    119e:	460c      	mov	r4, r1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    BOOT_LOG_INF("Starting swap using move algorithm.");
    11a0:	4885      	ldr	r0, [pc, #532]	; (13b8 <swap_run+0x224>)
    11a2:	2149      	movs	r1, #73	; 0x49
{
    11a4:	b089      	sub	sp, #36	; 0x24
    11a6:	4617      	mov	r7, r2
    BOOT_LOG_INF("Starting swap using move algorithm.");
    11a8:	f006 ff6b 	bl	8082 <z_log_minimal_printk>
    11ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    11ae:	2201      	movs	r2, #1
    11b0:	685e      	ldr	r6, [r3, #4]

    sz = 0;
    11b2:	2300      	movs	r3, #0
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    11b4:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    11b6:	42bb      	cmp	r3, r7
    11b8:	4611      	mov	r1, r2
    11ba:	f102 0201 	add.w	r2, r2, #1
    11be:	d3f9      	bcc.n	11b4 <swap_run+0x20>
    11c0:	f8df b200 	ldr.w	fp, [pc, #512]	; 13c4 <swap_run+0x230>
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    11c4:	4620      	mov	r0, r4
    11c6:	f8cb 1000 	str.w	r1, [fp]
    11ca:	f006 fc47 	bl	7a5c <boot_status_is_reset>
    11ce:	b318      	cbz	r0, 1218 <swap_run+0x84>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    11d0:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    11d2:	f006 fb8a 	bl	78ea <boot_trailer_sz>
        sz = 0;
    11d6:	2300      	movs	r3, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    11d8:	6aaf      	ldr	r7, [r5, #40]	; 0x28
    11da:	3f01      	subs	r7, #1

        while (1) {
            sz += sector_sz;
    11dc:	4433      	add	r3, r6
            if  (sz >= trailer_sz) {
    11de:	4283      	cmp	r3, r0
    11e0:	d201      	bcs.n	11e6 <swap_run+0x52>
                break;
            }
            first_trailer_idx--;
    11e2:	3f01      	subs	r7, #1
            sz += sector_sz;
    11e4:	e7fa      	b.n	11dc <swap_run+0x48>
        }

        if (g_last_idx >= first_trailer_idx) {
    11e6:	f8db 3000 	ldr.w	r3, [fp]
    11ea:	42bb      	cmp	r3, r7
    11ec:	d314      	bcc.n	1218 <swap_run+0x84>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    11ee:	2157      	movs	r1, #87	; 0x57
    11f0:	4872      	ldr	r0, [pc, #456]	; (13bc <swap_run+0x228>)
    11f2:	f006 ff46 	bl	8082 <z_log_minimal_printk>
            BOOT_LOG_WRN("required %d bytes but only %d are available",
    11f6:	f8db 2000 	ldr.w	r2, [fp]
    11fa:	fb07 f306 	mul.w	r3, r7, r6
    11fe:	2157      	movs	r1, #87	; 0x57
    1200:	fb02 6206 	mla	r2, r2, r6, r6
    1204:	486e      	ldr	r0, [pc, #440]	; (13c0 <swap_run+0x22c>)
    1206:	f006 ff3c 	bl	8082 <z_log_minimal_printk>
                         (g_last_idx + 1) * sector_sz ,
                         first_trailer_idx * sector_sz);
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    120a:	2301      	movs	r3, #1
    120c:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    120e:	b009      	add	sp, #36	; 0x24
    1210:	ecbd 8b02 	vpop	{d8}
    1214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    1218:	a906      	add	r1, sp, #24
    121a:	2003      	movs	r0, #3
    121c:	f000 fde2 	bl	1de4 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    1220:	a907      	add	r1, sp, #28
    1222:	2009      	movs	r0, #9
    1224:	f000 fdde 	bl	1de4 <flash_area_open>
    fixup_revert(state, bs, fap_sec);
    1228:	4621      	mov	r1, r4
    122a:	4628      	mov	r0, r5
    122c:	9a07      	ldr	r2, [sp, #28]
    122e:	f7ff ff65 	bl	10fc <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    1232:	7963      	ldrb	r3, [r4, #5]
    1234:	2b01      	cmp	r3, #1
    1236:	d108      	bne.n	124a <swap_run+0xb6>
        idx = g_last_idx;
    1238:	f8db 7000 	ldr.w	r7, [fp]
    BOOT_STATUS_ASSERT(rc == 0);
    123c:	f8df a188 	ldr.w	sl, [pc, #392]	; 13c8 <swap_run+0x234>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1240:	f8db 3000 	ldr.w	r3, [fp]
        while (idx > 0) {
    1244:	b9a7      	cbnz	r7, 1270 <swap_run+0xdc>
        bs->idx = BOOT_STATUS_IDX_0;
    1246:	2301      	movs	r3, #1
    1248:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    124a:	f04f 0302 	mov.w	r3, #2
    idx = 1;
    124e:	2701      	movs	r7, #1
        BOOT_STATUS_ASSERT(rc == 0);
    1250:	f8df 8174 	ldr.w	r8, [pc, #372]	; 13c8 <swap_run+0x234>
    bs->op = BOOT_STATUS_OP_SWAP;
    1254:	7163      	strb	r3, [r4, #5]
    while (idx <= g_last_idx) {
    1256:	f8db 3000 	ldr.w	r3, [fp]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    125a:	f8dd 9018 	ldr.w	r9, [sp, #24]
    while (idx <= g_last_idx) {
    125e:	429f      	cmp	r7, r3
    1260:	d94d      	bls.n	12fe <swap_run+0x16a>
    flash_area_close(fap_pri);
    1262:	4648      	mov	r0, r9
    1264:	f006 ff1a 	bl	809c <flash_area_close>
    flash_area_close(fap_sec);
    1268:	9807      	ldr	r0, [sp, #28]
    126a:	f006 ff17 	bl	809c <flash_area_close>
    126e:	e7ce      	b.n	120e <swap_run+0x7a>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1270:	6822      	ldr	r2, [r4, #0]
    1272:	3301      	adds	r3, #1
    1274:	1a9b      	subs	r3, r3, r2
    1276:	429f      	cmp	r7, r3
    1278:	d83f      	bhi.n	12fa <swap_run+0x166>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    127a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    127c:	2a01      	cmp	r2, #1
	return fs->fs_off;
    127e:	6819      	ldr	r1, [r3, #0]
    1280:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    1284:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    1288:	f853 3c08 	ldr.w	r3, [r3, #-8]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    128c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    1290:	eba3 0301 	sub.w	r3, r3, r1
    1294:	ee08 3a10 	vmov	s16, r3
    1298:	eba0 0901 	sub.w	r9, r0, r1
    if (bs->idx == BOOT_STATUS_IDX_0) {
    129c:	d112      	bne.n	12c4 <swap_run+0x130>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    129e:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    12a0:	9b07      	ldr	r3, [sp, #28]
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    12a2:	2a02      	cmp	r2, #2
    12a4:	d00a      	beq.n	12bc <swap_run+0x128>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    12a6:	4641      	mov	r1, r8
    12a8:	4628      	mov	r0, r5
    12aa:	9302      	str	r3, [sp, #8]
    12ac:	f006 fc17 	bl	7ade <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    12b0:	4622      	mov	r2, r4
    12b2:	4641      	mov	r1, r8
    12b4:	4628      	mov	r0, r5
    12b6:	f006 fc48 	bl	7b4a <swap_status_init>
    12ba:	9b02      	ldr	r3, [sp, #8]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    12bc:	4619      	mov	r1, r3
    12be:	4628      	mov	r0, r5
    12c0:	f006 fc0d 	bl	7ade <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    12c4:	4632      	mov	r2, r6
    12c6:	4649      	mov	r1, r9
    12c8:	4640      	mov	r0, r8
    12ca:	f006 fc06 	bl	7ada <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    12ce:	ee18 3a10 	vmov	r3, s16
    12d2:	4642      	mov	r2, r8
    12d4:	4641      	mov	r1, r8
    12d6:	4628      	mov	r0, r5
    12d8:	e9cd 9600 	strd	r9, r6, [sp]
    12dc:	f7ff fc38 	bl	b50 <boot_copy_region>
    rc = boot_write_status(state, bs);
    12e0:	4621      	mov	r1, r4
    12e2:	4628      	mov	r0, r5
    12e4:	f006 fbc7 	bl	7a76 <boot_write_status>
    bs->idx++;
    12e8:	6823      	ldr	r3, [r4, #0]
    12ea:	3301      	adds	r3, #1
    12ec:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    12ee:	b120      	cbz	r0, 12fa <swap_run+0x166>
    12f0:	f8da 3000 	ldr.w	r3, [sl]
    12f4:	3301      	adds	r3, #1
    12f6:	f8ca 3000 	str.w	r3, [sl]
            idx--;
    12fa:	3f01      	subs	r7, #1
    12fc:	e7a0      	b.n	1240 <swap_run+0xac>
        if (idx >= bs->idx) {
    12fe:	6823      	ldr	r3, [r4, #0]
    1300:	429f      	cmp	r7, r3
    1302:	d357      	bcc.n	13b4 <swap_run+0x220>
    1304:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1306:	6d28      	ldr	r0, [r5, #80]	; 0x50
    1308:	f851 3037 	ldr.w	r3, [r1, r7, lsl #3]
    130c:	00fa      	lsls	r2, r7, #3
    130e:	9303      	str	r3, [sp, #12]
    1310:	680b      	ldr	r3, [r1, #0]
    1312:	3a08      	subs	r2, #8
    1314:	f850 c002 	ldr.w	ip, [r0, r2]
    1318:	9302      	str	r3, [sp, #8]
    131a:	6803      	ldr	r3, [r0, #0]
    if (bs->state == BOOT_STATUS_STATE_0) {
    131c:	7920      	ldrb	r0, [r4, #4]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    131e:	f8dd a01c 	ldr.w	sl, [sp, #28]
    if (bs->state == BOOT_STATUS_STATE_0) {
    1322:	2801      	cmp	r0, #1
    1324:	ebac 0303 	sub.w	r3, ip, r3
    1328:	d142      	bne.n	13b0 <swap_run+0x21c>
    132a:	5889      	ldr	r1, [r1, r2]
    132c:	9305      	str	r3, [sp, #20]
    132e:	9b02      	ldr	r3, [sp, #8]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    1330:	4632      	mov	r2, r6
    1332:	1ac9      	subs	r1, r1, r3
    1334:	4648      	mov	r0, r9
    1336:	9104      	str	r1, [sp, #16]
    1338:	f006 fbcf 	bl	7ada <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    133c:	9904      	ldr	r1, [sp, #16]
    133e:	9b05      	ldr	r3, [sp, #20]
    1340:	464a      	mov	r2, r9
    1342:	9100      	str	r1, [sp, #0]
    1344:	4628      	mov	r0, r5
    1346:	4651      	mov	r1, sl
    1348:	9601      	str	r6, [sp, #4]
    134a:	9304      	str	r3, [sp, #16]
    134c:	f7ff fc00 	bl	b50 <boot_copy_region>
        rc = boot_write_status(state, bs);
    1350:	4621      	mov	r1, r4
    1352:	4628      	mov	r0, r5
    1354:	f006 fb8f 	bl	7a76 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    1358:	f04f 0302 	mov.w	r3, #2
    135c:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    135e:	9b04      	ldr	r3, [sp, #16]
    1360:	b120      	cbz	r0, 136c <swap_run+0x1d8>
    1362:	f8d8 2000 	ldr.w	r2, [r8]
    1366:	3201      	adds	r2, #1
    1368:	f8c8 2000 	str.w	r2, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    136c:	4619      	mov	r1, r3
    136e:	4632      	mov	r2, r6
    1370:	4650      	mov	r0, sl
    1372:	9304      	str	r3, [sp, #16]
    1374:	f006 fbb1 	bl	7ada <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1378:	9b04      	ldr	r3, [sp, #16]
    137a:	4649      	mov	r1, r9
    137c:	9300      	str	r3, [sp, #0]
    137e:	4628      	mov	r0, r5
    1380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1384:	9601      	str	r6, [sp, #4]
    1386:	1a9b      	subs	r3, r3, r2
    1388:	4652      	mov	r2, sl
    138a:	f7ff fbe1 	bl	b50 <boot_copy_region>
        rc = boot_write_status(state, bs);
    138e:	4621      	mov	r1, r4
    1390:	4628      	mov	r0, r5
    1392:	f006 fb70 	bl	7a76 <boot_write_status>
        bs->idx++;
    1396:	6823      	ldr	r3, [r4, #0]
    1398:	3301      	adds	r3, #1
    139a:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    139c:	f04f 0301 	mov.w	r3, #1
    13a0:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    13a2:	b138      	cbz	r0, 13b4 <swap_run+0x220>
    13a4:	f8d8 3000 	ldr.w	r3, [r8]
    13a8:	3301      	adds	r3, #1
    13aa:	f8c8 3000 	str.w	r3, [r8]
    13ae:	e001      	b.n	13b4 <swap_run+0x220>
    if (bs->state == BOOT_STATUS_STATE_1) {
    13b0:	2802      	cmp	r0, #2
    13b2:	d0db      	beq.n	136c <swap_run+0x1d8>
        idx++;
    13b4:	3701      	adds	r7, #1
    13b6:	e74e      	b.n	1256 <swap_run+0xc2>
    13b8:	00009f47 	.word	0x00009f47
    13bc:	00009f70 	.word	0x00009f70
    13c0:	00009f9f 	.word	0x00009f9f
    13c4:	2000c4ec 	.word	0x2000c4ec
    13c8:	2000dc8c 	.word	0x2000dc8c

000013cc <cc310_init>:
 */

#include "cc310_glue.h"

int cc310_init(void)
{
    13cc:	b570      	push	{r4, r5, r6, lr}
    /* Only initialize once */
    static bool initialized;

    if (!initialized) {
    13ce:	4d09      	ldr	r5, [pc, #36]	; (13f4 <cc310_init+0x28>)
    13d0:	782b      	ldrb	r3, [r5, #0]
    13d2:	b953      	cbnz	r3, 13ea <cc310_init+0x1e>
    NRF_CRYPTOCELL->ENABLE=1;
    13d4:	2601      	movs	r6, #1
    13d6:	4c08      	ldr	r4, [pc, #32]	; (13f8 <cc310_init+0x2c>)
    13d8:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
        nrf_cc310_enable();
        if (nrf_cc310_bl_init() != 0) {
    13dc:	f005 f954 	bl	6688 <nrf_cc310_bl_init>
    13e0:	b928      	cbnz	r0, 13ee <cc310_init+0x22>
            return -1;
        }
        initialized = true;
    13e2:	702e      	strb	r6, [r5, #0]
    NRF_CRYPTOCELL->ENABLE=0;
    13e4:	f8c4 0500 	str.w	r0, [r4, #1280]	; 0x500
        nrf_cc310_disable();
    }

    return 0;
}
    13e8:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
    13ea:	2000      	movs	r0, #0
    13ec:	e7fc      	b.n	13e8 <cc310_init+0x1c>
            return -1;
    13ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    13f2:	e7f9      	b.n	13e8 <cc310_init+0x1c>
    13f4:	2000e9de 	.word	0x2000e9de
    13f8:	50840000 	.word	0x50840000

000013fc <cc310_ecdsa_verify_secp256r1>:

int cc310_ecdsa_verify_secp256r1(uint8_t *hash,
                                 uint8_t *public_key,
                                 uint8_t *signature,
                                 size_t hash_len)
{
    13fc:	b570      	push	{r4, r5, r6, lr}
    13fe:	b0ae      	sub	sp, #184	; 0xb8
    1400:	461d      	mov	r5, r3
    1402:	4604      	mov	r4, r0
    1404:	e9cd 2102 	strd	r2, r1, [sp, #8]
        int rc;
        nrf_cc310_bl_ecdsa_verify_context_secp256r1_t ctx;
        cc310_init();
    1408:	f7ff ffe0 	bl	13cc <cc310_init>
        nrf_cc310_enable();
        rc = nrf_cc310_bl_ecdsa_verify_secp256r1(&ctx,
    140c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    NRF_CRYPTOCELL->ENABLE=1;
    1410:	2301      	movs	r3, #1
    1412:	4e06      	ldr	r6, [pc, #24]	; (142c <cc310_ecdsa_verify_secp256r1+0x30>)
    1414:	a805      	add	r0, sp, #20
    1416:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
    141a:	4623      	mov	r3, r4
    141c:	9500      	str	r5, [sp, #0]
    141e:	f007 ffbe 	bl	939e <nrf_cc310_bl_ecdsa_verify_secp256r1>
    NRF_CRYPTOCELL->ENABLE=0;
    1422:	2300      	movs	r3, #0
    1424:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
                                                 (nrf_cc310_bl_ecc_signature_secp256r1_t  *) signature,
                                                 hash,
                                                 hash_len);
        nrf_cc310_disable();
        return rc;
}
    1428:	b02e      	add	sp, #184	; 0xb8
    142a:	bd70      	pop	{r4, r5, r6, pc}
    142c:	50840000 	.word	0x50840000

00001430 <cleanup_arm_nvic>:
    1430:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsid i" : : : "memory");
    1434:	b672      	cpsid	i
    1436:	2300      	movs	r3, #0
	__ISB();
	__disable_irq();

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    143c:	4a09      	ldr	r2, [pc, #36]	; (1464 <cleanup_arm_nvic+0x34>)
    143e:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1442:	3301      	adds	r3, #1
    1444:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    1446:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    144a:	d1f8      	bne.n	143e <cleanup_arm_nvic+0xe>
    144c:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    144e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1452:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1456:	3301      	adds	r3, #1
    1458:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    145a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    145e:	d1f8      	bne.n	1452 <cleanup_arm_nvic+0x22>
	}
}
    1460:	4770      	bx	lr
    1462:	bf00      	nop
    1464:	e000e100 	.word	0xe000e100

00001468 <nrf_cleanup_peripheral>:
{
    nrf_clock_int_disable(NRF_CLOCK, 0xFFFFFFFF);
}

void nrf_cleanup_peripheral(void)
{
    1468:	b510      	push	{r4, lr}
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    146a:	2201      	movs	r2, #1
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    146c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1470:	2100      	movs	r1, #0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1472:	4b19      	ldr	r3, [pc, #100]	; (14d8 <nrf_cleanup_peripheral+0x70>)
#if defined(NRF_UARTE0)
    nrf_uarte_disable(NRF_UARTE0);
    nrf_uarte_int_disable(NRF_UARTE0, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    1474:	4819      	ldr	r0, [pc, #100]	; (14dc <nrf_cleanup_peripheral+0x74>)
    1476:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1478:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    147c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    1484:	605a      	str	r2, [r3, #4]
    p_reg->EVTENCLR = mask;
    1486:	f8c3 4348 	str.w	r4, [r3, #840]	; 0x348
    p_reg->INTENCLR = mask;
    148a:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    148e:	f5a3 4350 	sub.w	r3, r3, #53248	; 0xd000
    1492:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    1496:	2280      	movs	r2, #128	; 0x80
    p_reg->INTENCLR = mask;
    1498:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    149c:	f007 f965 	bl	876a <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE0 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    14a0:	2280      	movs	r2, #128	; 0x80
    14a2:	2100      	movs	r1, #0
    14a4:	480e      	ldr	r0, [pc, #56]	; (14e0 <nrf_cleanup_peripheral+0x78>)
    14a6:	f007 f960 	bl	876a <memset>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    14aa:	2100      	movs	r1, #0
    14ac:	4b0d      	ldr	r3, [pc, #52]	; (14e4 <nrf_cleanup_peripheral+0x7c>)
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#if defined(NRF_DPPIC)
    /* Clear all SUBSCRIBE configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_SUBSCRIBE_CONF_OFFS, 0, NRF_UARTE_SUBSCRIBE_CONF_SIZE);
    14ae:	2280      	movs	r2, #128	; 0x80
    14b0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    14b4:	480c      	ldr	r0, [pc, #48]	; (14e8 <nrf_cleanup_peripheral+0x80>)
    p_reg->INTENCLR = mask;
    14b6:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    14ba:	f007 f956 	bl	876a <memset>
    /* Clear all PUBLISH configurations. */
    memset((uint8_t *)NRF_UARTE1 + NRF_UARTE_PUBLISH_CONF_OFFS, 0, NRF_UARTE_PUBLISH_CONF_SIZE);
    14be:	2280      	movs	r2, #128	; 0x80
    14c0:	2100      	movs	r1, #0
    14c2:	480a      	ldr	r0, [pc, #40]	; (14ec <nrf_cleanup_peripheral+0x84>)
    14c4:	f007 f951 	bl	876a <memset>
    return ((p_reg->CHEN & (DPPIC_CHEN_CH0_Enabled << (DPPIC_CHEN_CH0_Pos + channel))) != 0);
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable_all(NRF_DPPIC_Type * p_reg)
{
    p_reg->CHENCLR = 0xFFFFFFFFuL;
    14c8:	4b09      	ldr	r3, [pc, #36]	; (14f0 <nrf_cleanup_peripheral+0x88>)
    14ca:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    14ce:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    14d2:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
#endif
#if defined(NRF_DPPIC)
    nrf_dppi_channels_disable_all(NRF_DPPIC);
#endif
    nrf_cleanup_clock();
}
    14d6:	bd10      	pop	{r4, pc}
    14d8:	50014000 	.word	0x50014000
    14dc:	50008080 	.word	0x50008080
    14e0:	50008180 	.word	0x50008180
    14e4:	50009000 	.word	0x50009000
    14e8:	50009080 	.word	0x50009080
    14ec:	50009180 	.word	0x50009180
    14f0:	50017000 	.word	0x50017000

000014f4 <base64_encode>:
/*
 * Encode a buffer into base64 format
 */
int base64_encode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    14f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    14f8:	9c07      	ldr	r4, [sp, #28]
	size_t i, n;
	int C1, C2, C3;
	uint8_t *p;

	if (slen == 0) {
    14fa:	b91c      	cbnz	r4, 1504 <base64_encode+0x10>
		*olen = 0;
		return 0;
    14fc:	4620      	mov	r0, r4
		*olen = 0;
    14fe:	6014      	str	r4, [r2, #0]

	*olen = p - dst;
	*p = 0U;

	return 0;
}
    1500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	n = slen / 3 + (slen % 3 != 0);
    1504:	2503      	movs	r5, #3
    1506:	fbb4 f5f5 	udiv	r5, r4, r5
    150a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
    150e:	42bc      	cmp	r4, r7
    1510:	bf18      	it	ne
    1512:	3501      	addne	r5, #1
	if (n > (BASE64_SIZE_T_MAX - 1) / 4) {
    1514:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    1518:	d305      	bcc.n	1526 <base64_encode+0x32>
		*olen = BASE64_SIZE_T_MAX;
    151a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    151e:	6013      	str	r3, [r2, #0]
		return -ENOMEM;
    1520:	f06f 000b 	mvn.w	r0, #11
    1524:	e7ec      	b.n	1500 <base64_encode+0xc>
	n *= 4;
    1526:	00ad      	lsls	r5, r5, #2
	if ((dlen < n + 1) || (!dst)) {
    1528:	3501      	adds	r5, #1
    152a:	428d      	cmp	r5, r1
    152c:	d800      	bhi.n	1530 <base64_encode+0x3c>
    152e:	b908      	cbnz	r0, 1534 <base64_encode+0x40>
		*olen = n + 1;
    1530:	6015      	str	r5, [r2, #0]
    1532:	e7f5      	b.n	1520 <base64_encode+0x2c>
	for (i = 0, p = dst; i < n; i += 3) {
    1534:	4606      	mov	r6, r0
    1536:	2500      	movs	r5, #0
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1538:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 15f0 <base64_encode+0xfc>
	for (i = 0, p = dst; i < n; i += 3) {
    153c:	42bd      	cmp	r5, r7
    153e:	4631      	mov	r1, r6
    1540:	469c      	mov	ip, r3
    1542:	f106 0604 	add.w	r6, r6, #4
    1546:	f103 0303 	add.w	r3, r3, #3
    154a:	d329      	bcc.n	15a0 <base64_encode+0xac>
	if (i < slen) {
    154c:	42a5      	cmp	r5, r4
    154e:	d222      	bcs.n	1596 <base64_encode+0xa2>
		C2 = ((i + 1) < slen) ? *src++ : 0;
    1550:	3501      	adds	r5, #1
    1552:	42a5      	cmp	r5, r4
    1554:	bf28      	it	cs
    1556:	2300      	movcs	r3, #0
		C1 = *src++;
    1558:	f89c 6000 	ldrb.w	r6, [ip]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    155c:	4f24      	ldr	r7, [pc, #144]	; (15f0 <base64_encode+0xfc>)
		C2 = ((i + 1) < slen) ? *src++ : 0;
    155e:	bf38      	it	cc
    1560:	f89c 3001 	ldrbcc.w	r3, [ip, #1]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    1564:	ea4f 0ca6 	mov.w	ip, r6, asr #2
    1568:	f817 c00c 	ldrb.w	ip, [r7, ip]
		if ((i + 1) < slen) {
    156c:	42a5      	cmp	r5, r4
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    156e:	f881 c000 	strb.w	ip, [r1]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1572:	eb07 1c13 	add.w	ip, r7, r3, lsr #4
			*p++ = '=';
    1576:	bf2f      	iteee	cs
    1578:	233d      	movcs	r3, #61	; 0x3d
			*p++ = base64_enc_map[((C2 & 15) << 2) & 0x3F];
    157a:	009b      	lslcc	r3, r3, #2
    157c:	f003 033c 	andcc.w	r3, r3, #60	; 0x3c
    1580:	5cfb      	ldrbcc	r3, [r7, r3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1582:	0136      	lsls	r6, r6, #4
    1584:	708b      	strb	r3, [r1, #2]
		*p++ = '=';
    1586:	233d      	movs	r3, #61	; 0x3d
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1588:	f006 0630 	and.w	r6, r6, #48	; 0x30
    158c:	f81c 6006 	ldrb.w	r6, [ip, r6]
		*p++ = '=';
    1590:	70cb      	strb	r3, [r1, #3]
		*p++ = base64_enc_map[(((C1 & 3) << 4) + (C2 >> 4)) & 0x3F];
    1592:	704e      	strb	r6, [r1, #1]
		*p++ = '=';
    1594:	3104      	adds	r1, #4
	*olen = p - dst;
    1596:	1a08      	subs	r0, r1, r0
    1598:	6010      	str	r0, [r2, #0]
	*p = 0U;
    159a:	2000      	movs	r0, #0
    159c:	7008      	strb	r0, [r1, #0]
	return 0;
    159e:	e7af      	b.n	1500 <base64_encode+0xc>
		C1 = *src++;
    15a0:	f813 cc03 	ldrb.w	ip, [r3, #-3]
		C2 = *src++;
    15a4:	f813 1c02 	ldrb.w	r1, [r3, #-2]
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    15a8:	ea4f 09ac 	mov.w	r9, ip, asr #2
    15ac:	f81e 9009 	ldrb.w	r9, [lr, r9]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    15b0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
		C3 = *src++;
    15b4:	f813 8c01 	ldrb.w	r8, [r3, #-1]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    15b8:	f00c 0c30 	and.w	ip, ip, #48	; 0x30
		*p++ = base64_enc_map[(C1 >> 2) & 0x3F];
    15bc:	f806 9c04 	strb.w	r9, [r6, #-4]
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    15c0:	eb0e 1911 	add.w	r9, lr, r1, lsr #4
    15c4:	f819 c00c 	ldrb.w	ip, [r9, ip]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    15c8:	0089      	lsls	r1, r1, #2
		*p++ = base64_enc_map[(((C1 &  3) << 4) + (C2 >> 4)) & 0x3F];
    15ca:	f806 cc03 	strb.w	ip, [r6, #-3]
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    15ce:	f001 013c 	and.w	r1, r1, #60	; 0x3c
    15d2:	eb0e 1c98 	add.w	ip, lr, r8, lsr #6
    15d6:	f81c 1001 	ldrb.w	r1, [ip, r1]
		*p++ = base64_enc_map[C3 & 0x3F];
    15da:	f008 083f 	and.w	r8, r8, #63	; 0x3f
		*p++ = base64_enc_map[(((C2 & 15) << 2) + (C3 >> 6)) & 0x3F];
    15de:	f806 1c02 	strb.w	r1, [r6, #-2]
		*p++ = base64_enc_map[C3 & 0x3F];
    15e2:	f81e 1008 	ldrb.w	r1, [lr, r8]
	for (i = 0, p = dst; i < n; i += 3) {
    15e6:	3503      	adds	r5, #3
		*p++ = base64_enc_map[C3 & 0x3F];
    15e8:	f806 1c01 	strb.w	r1, [r6, #-1]
	for (i = 0, p = dst; i < n; i += 3) {
    15ec:	e7a6      	b.n	153c <base64_encode+0x48>
    15ee:	bf00      	nop
    15f0:	0000a0ab 	.word	0x0000a0ab

000015f4 <base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int base64_decode(uint8_t *dst, size_t dlen, size_t *olen, const uint8_t *src,
		  size_t slen)
{
    15f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	size_t i, n;
	uint32_t j, x;
	uint8_t *p;

	/* First pass: check for validity and get output length */
	for (i = n = j = 0U; i < slen; i++) {
    15f8:	2700      	movs	r7, #0
    15fa:	463c      	mov	r4, r7
    15fc:	463d      	mov	r5, r7
{
    15fe:	9e07      	ldr	r6, [sp, #28]

		if (src[i] == '=' && ++j > 2) {
			return -EINVAL;
		}

		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    1600:	f8df 8124 	ldr.w	r8, [pc, #292]	; 1728 <base64_decode+0x134>
	for (i = n = j = 0U; i < slen; i++) {
    1604:	42b5      	cmp	r5, r6
    1606:	d30a      	bcc.n	161e <base64_decode+0x2a>
    1608:	462e      	mov	r6, r5
    160a:	e004      	b.n	1616 <base64_decode+0x22>
			++i;
    160c:	3501      	adds	r5, #1
		while (i < slen && src[i] == ' ') {
    160e:	42ae      	cmp	r6, r5
			++x;
    1610:	f10e 0e01 	add.w	lr, lr, #1
		while (i < slen && src[i] == ' ') {
    1614:	d105      	bne.n	1622 <base64_decode+0x2e>
		}

		n++;
	}

	if (n == 0) {
    1616:	bbcc      	cbnz	r4, 168c <base64_decode+0x98>
		*olen = 0;
    1618:	6014      	str	r4, [r2, #0]
		}
	}

	*olen = p - dst;

	return 0;
    161a:	2000      	movs	r0, #0
    161c:	e058      	b.n	16d0 <base64_decode+0xdc>
		x = 0U;
    161e:	f04f 0e00 	mov.w	lr, #0
		while (i < slen && src[i] == ' ') {
    1622:	f813 c005 	ldrb.w	ip, [r3, r5]
    1626:	f1bc 0f20 	cmp.w	ip, #32
    162a:	d0ef      	beq.n	160c <base64_decode+0x18>
		if (i == slen) {
    162c:	42ae      	cmp	r6, r5
    162e:	d0f2      	beq.n	1616 <base64_decode+0x22>
		if ((slen - i) >= 2 && src[i] == '\r' && src[i + 1] == '\n') {
    1630:	eba6 0905 	sub.w	r9, r6, r5
    1634:	f1b9 0f01 	cmp.w	r9, #1
    1638:	d015      	beq.n	1666 <base64_decode+0x72>
    163a:	f1bc 0f0d 	cmp.w	ip, #13
    163e:	d112      	bne.n	1666 <base64_decode+0x72>
    1640:	eb03 0905 	add.w	r9, r3, r5
    1644:	f899 9001 	ldrb.w	r9, [r9, #1]
    1648:	f1b9 0f0a 	cmp.w	r9, #10
		if (src[i] == '\n') {
    164c:	d01c      	beq.n	1688 <base64_decode+0x94>
		if (x != 0U) {
    164e:	f1be 0f00 	cmp.w	lr, #0
    1652:	d105      	bne.n	1660 <base64_decode+0x6c>
		if (src[i] == '=' && ++j > 2) {
    1654:	f1bc 0f3d 	cmp.w	ip, #61	; 0x3d
    1658:	d108      	bne.n	166c <base64_decode+0x78>
    165a:	3701      	adds	r7, #1
    165c:	2f02      	cmp	r7, #2
    165e:	d908      	bls.n	1672 <base64_decode+0x7e>
			return -EINVAL;
    1660:	f06f 0015 	mvn.w	r0, #21
    1664:	e034      	b.n	16d0 <base64_decode+0xdc>
		if (src[i] == '\n') {
    1666:	f1bc 0f0a 	cmp.w	ip, #10
    166a:	e7ef      	b.n	164c <base64_decode+0x58>
		if (src[i] > 127 || base64_dec_map[src[i]] == 127U) {
    166c:	f01c 0f80 	tst.w	ip, #128	; 0x80
    1670:	d1f6      	bne.n	1660 <base64_decode+0x6c>
    1672:	f818 c00c 	ldrb.w	ip, [r8, ip]
    1676:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
    167a:	d0f1      	beq.n	1660 <base64_decode+0x6c>
		if (base64_dec_map[src[i]] < 64 && j != 0U) {
    167c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    1680:	d801      	bhi.n	1686 <base64_decode+0x92>
    1682:	2f00      	cmp	r7, #0
    1684:	d1ec      	bne.n	1660 <base64_decode+0x6c>
		n++;
    1686:	3401      	adds	r4, #1
	for (i = n = j = 0U; i < slen; i++) {
    1688:	3501      	adds	r5, #1
    168a:	e7bb      	b.n	1604 <base64_decode+0x10>
	n = (6 * (n >> 3)) + ((6 * (n & 0x7) + 7) >> 3);
    168c:	f04f 0c06 	mov.w	ip, #6
    1690:	f004 0507 	and.w	r5, r4, #7
    1694:	08e4      	lsrs	r4, r4, #3
    1696:	fb0c f505 	mul.w	r5, ip, r5
    169a:	fb0c f404 	mul.w	r4, ip, r4
    169e:	3507      	adds	r5, #7
	n -= j;
    16a0:	1be4      	subs	r4, r4, r7
    16a2:	eb04 04d5 	add.w	r4, r4, r5, lsr #3
	if (dst == NULL || dlen < n) {
    16a6:	b180      	cbz	r0, 16ca <base64_decode+0xd6>
    16a8:	428c      	cmp	r4, r1
    16aa:	d80e      	bhi.n	16ca <base64_decode+0xd6>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    16ac:	2500      	movs	r5, #0
    16ae:	469c      	mov	ip, r3
    16b0:	441e      	add	r6, r3
    16b2:	2403      	movs	r4, #3
	if (dst == NULL || dlen < n) {
    16b4:	4603      	mov	r3, r0
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    16b6:	4629      	mov	r1, r5
		j -= (base64_dec_map[*src] == 64U);
    16b8:	f8df e06c 	ldr.w	lr, [pc, #108]	; 1728 <base64_decode+0x134>
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    16bc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 172c <base64_decode+0x138>
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    16c0:	4566      	cmp	r6, ip
    16c2:	d107      	bne.n	16d4 <base64_decode+0xe0>
	*olen = p - dst;
    16c4:	1a1b      	subs	r3, r3, r0
    16c6:	6013      	str	r3, [r2, #0]
    16c8:	e7a7      	b.n	161a <base64_decode+0x26>
		return -ENOMEM;
    16ca:	f06f 000b 	mvn.w	r0, #11
		*olen = n;
    16ce:	6014      	str	r4, [r2, #0]
}
    16d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (*src == '\r' || *src == '\n' || *src == ' ') {
    16d4:	f81c 9b01 	ldrb.w	r9, [ip], #1
    16d8:	f1a9 070a 	sub.w	r7, r9, #10
    16dc:	b2ff      	uxtb	r7, r7
    16de:	2f16      	cmp	r7, #22
    16e0:	d803      	bhi.n	16ea <base64_decode+0xf6>
    16e2:	fa28 f707 	lsr.w	r7, r8, r7
    16e6:	07ff      	lsls	r7, r7, #31
    16e8:	d4ea      	bmi.n	16c0 <base64_decode+0xcc>
		j -= (base64_dec_map[*src] == 64U);
    16ea:	f81e 7009 	ldrb.w	r7, [lr, r9]
		if (++n == 4) {
    16ee:	3101      	adds	r1, #1
		j -= (base64_dec_map[*src] == 64U);
    16f0:	2f40      	cmp	r7, #64	; 0x40
    16f2:	bf08      	it	eq
    16f4:	3c01      	subeq	r4, #1
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    16f6:	f007 073f 	and.w	r7, r7, #63	; 0x3f
		if (++n == 4) {
    16fa:	2904      	cmp	r1, #4
		x  = (x << 6) | (base64_dec_map[*src] & 0x3F);
    16fc:	ea47 1585 	orr.w	r5, r7, r5, lsl #6
		if (++n == 4) {
    1700:	d1de      	bne.n	16c0 <base64_decode+0xcc>
			if (j > 0) {
    1702:	b17c      	cbz	r4, 1724 <base64_decode+0x130>
				*p++ = (unsigned char)(x >> 16);
    1704:	0c29      	lsrs	r1, r5, #16
			if (j > 1) {
    1706:	2c01      	cmp	r4, #1
				*p++ = (unsigned char)(x >> 16);
    1708:	7019      	strb	r1, [r3, #0]
			if (j > 1) {
    170a:	d102      	bne.n	1712 <base64_decode+0x11e>
				*p++ = (unsigned char)(x >> 16);
    170c:	3301      	adds	r3, #1
			n = 0;
    170e:	2100      	movs	r1, #0
    1710:	e7d6      	b.n	16c0 <base64_decode+0xcc>
			if (j > 2) {
    1712:	2c02      	cmp	r4, #2
				*p++ = (unsigned char)(x >> 8);
    1714:	ea4f 2115 	mov.w	r1, r5, lsr #8
    1718:	7059      	strb	r1, [r3, #1]
				*p++ = (unsigned char)(x);
    171a:	bf16      	itet	ne
    171c:	709d      	strbne	r5, [r3, #2]
				*p++ = (unsigned char)(x >> 8);
    171e:	3302      	addeq	r3, #2
				*p++ = (unsigned char)(x);
    1720:	3303      	addne	r3, #3
    1722:	e7f4      	b.n	170e <base64_decode+0x11a>
			n = 0;
    1724:	4621      	mov	r1, r4
	for (j = 3U, n = x = 0U, p = dst; i > 0; i--, src++) {
    1726:	e7cb      	b.n	16c0 <base64_decode+0xcc>
    1728:	0000a02b 	.word	0x0000a02b
    172c:	00400009 	.word	0x00400009

00001730 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
    1730:	4b01      	ldr	r3, [pc, #4]	; (1738 <char_out+0x8>)
    1732:	681b      	ldr	r3, [r3, #0]
    1734:	4718      	bx	r3
    1736:	bf00      	nop
    1738:	2000c4f0 	.word	0x2000c4f0

0000173c <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
    173c:	b507      	push	{r0, r1, r2, lr}
    173e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1740:	2100      	movs	r1, #0
    1742:	4602      	mov	r2, r0
    1744:	9100      	str	r1, [sp, #0]
    1746:	4803      	ldr	r0, [pc, #12]	; (1754 <vprintk+0x18>)
    1748:	f000 f8ea 	bl	1920 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    174c:	b003      	add	sp, #12
    174e:	f85d fb04 	ldr.w	pc, [sp], #4
    1752:	bf00      	nop
    1754:	00001731 	.word	0x00001731

00001758 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    175c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    1760:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1762:	f019 0808 	ands.w	r8, r9, #8
{
    1766:	4693      	mov	fp, r2
	if (processing) {
    1768:	d00e      	beq.n	1788 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
    176a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    176c:	bf0c      	ite	eq
    176e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1772:	f049 0920 	orrne.w	r9, r9, #32
    1776:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    177a:	f38b 8811 	msr	BASEPRI, fp
    177e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1782:	b003      	add	sp, #12
    1784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
    1788:	f8df a190 	ldr.w	sl, [pc, #400]	; 191c <process_event+0x1c4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    178c:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1790:	2902      	cmp	r1, #2
    1792:	d107      	bne.n	17a4 <process_event+0x4c>
			evt = process_recheck(mgr);
    1794:	4620      	mov	r0, r4
    1796:	f006 fb91 	bl	7ebc <process_recheck>
		if (evt == EVT_NOP) {
    179a:	2800      	cmp	r0, #0
    179c:	d0ed      	beq.n	177a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    179e:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17a0:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    17a2:	d14b      	bne.n	183c <process_event+0xe4>
			res = mgr->last_res;
    17a4:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    17a6:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    17a8:	2f00      	cmp	r7, #0
    17aa:	da15      	bge.n	17d8 <process_event+0x80>
		*clients = mgr->clients;
    17ac:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17ae:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    17b2:	e9c4 8800 	strd	r8, r8, [r4]
    17b6:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    17ba:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    17bc:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    17be:	8b21      	ldrh	r1, [r4, #24]
    17c0:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    17c4:	454a      	cmp	r2, r9
    17c6:	d002      	beq.n	17ce <process_event+0x76>
		if (do_monitors
    17c8:	68a3      	ldr	r3, [r4, #8]
    17ca:	2b00      	cmp	r3, #0
    17cc:	d157      	bne.n	187e <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    17ce:	b90d      	cbnz	r5, 17d4 <process_event+0x7c>
		    || (transit != NULL)) {
    17d0:	2e00      	cmp	r6, #0
    17d2:	d06f      	beq.n	18b4 <process_event+0x15c>
    17d4:	2300      	movs	r3, #0
    17d6:	e053      	b.n	1880 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    17d8:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    17dc:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    17de:	2a01      	cmp	r2, #1
    17e0:	d81d      	bhi.n	181e <process_event+0xc6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17e2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    17e6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    17e8:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    17ea:	b289      	uxth	r1, r1
    17ec:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    17f0:	d10a      	bne.n	1808 <process_event+0xb0>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    17f2:	b13d      	cbz	r5, 1804 <process_event+0xac>
    17f4:	462a      	mov	r2, r5
    17f6:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    17f8:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    17fa:	3301      	adds	r3, #1
    17fc:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    17fe:	2a00      	cmp	r2, #0
    1800:	d1fa      	bne.n	17f8 <process_event+0xa0>
    1802:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1804:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1808:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    180a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    180c:	f006 fb56 	bl	7ebc <process_recheck>
    1810:	2800      	cmp	r0, #0
    1812:	d0d3      	beq.n	17bc <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1814:	8b23      	ldrh	r3, [r4, #24]
    1816:	f043 0320 	orr.w	r3, r3, #32
    181a:	8323      	strh	r3, [r4, #24]
    181c:	e7ce      	b.n	17bc <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
    181e:	2b04      	cmp	r3, #4
    1820:	d10a      	bne.n	1838 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1822:	f021 0107 	bic.w	r1, r1, #7
    1826:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    1828:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    182a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    182c:	f006 fb46 	bl	7ebc <process_recheck>
    1830:	b110      	cbz	r0, 1838 <process_event+0xe0>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1832:	f041 0120 	orr.w	r1, r1, #32
    1836:	8321      	strh	r1, [r4, #24]
    1838:	2500      	movs	r5, #0
    183a:	e7bf      	b.n	17bc <process_event+0x64>
		} else if (evt == EVT_START) {
    183c:	2803      	cmp	r0, #3
    183e:	d109      	bne.n	1854 <process_event+0xfc>
			transit = mgr->transitions->start;
    1840:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1842:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1846:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1848:	f043 0306 	orr.w	r3, r3, #6
}
    184c:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    184e:	8323      	strh	r3, [r4, #24]
		res = 0;
    1850:	462f      	mov	r7, r5
    1852:	e7b4      	b.n	17be <process_event+0x66>
		} else if (evt == EVT_STOP) {
    1854:	2804      	cmp	r0, #4
    1856:	d106      	bne.n	1866 <process_event+0x10e>
			transit = mgr->transitions->stop;
    1858:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    185a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    185e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1860:	f043 0304 	orr.w	r3, r3, #4
    1864:	e7f2      	b.n	184c <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    1866:	2805      	cmp	r0, #5
    1868:	d106      	bne.n	1878 <process_event+0x120>
			transit = mgr->transitions->reset;
    186a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    186c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1870:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1872:	f043 0305 	orr.w	r3, r3, #5
    1876:	e7e9      	b.n	184c <process_event+0xf4>
    1878:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    187a:	462e      	mov	r6, r5
    187c:	e7e8      	b.n	1850 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    187e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1880:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1884:	8321      	strh	r1, [r4, #24]
    1886:	f38b 8811 	msr	BASEPRI, fp
    188a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    188e:	bb03      	cbnz	r3, 18d2 <process_event+0x17a>
	while (!sys_slist_is_empty(list)) {
    1890:	2d00      	cmp	r5, #0
    1892:	d131      	bne.n	18f8 <process_event+0x1a0>
			if (transit != NULL) {
    1894:	b116      	cbz	r6, 189c <process_event+0x144>
				transit(mgr, transition_complete);
    1896:	4651      	mov	r1, sl
    1898:	4620      	mov	r0, r4
    189a:	47b0      	blx	r6
	__asm__ volatile(
    189c:	f04f 0320 	mov.w	r3, #32
    18a0:	f3ef 8b11 	mrs	fp, BASEPRI
    18a4:	f383 8812 	msr	BASEPRI_MAX, r3
    18a8:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    18ac:	8b23      	ldrh	r3, [r4, #24]
    18ae:	f023 0308 	bic.w	r3, r3, #8
    18b2:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    18b4:	8b23      	ldrh	r3, [r4, #24]
    18b6:	06da      	lsls	r2, r3, #27
    18b8:	d527      	bpl.n	190a <process_event+0x1b2>
			evt = EVT_COMPLETE;
    18ba:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    18bc:	f023 0310 	bic.w	r3, r3, #16
    18c0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    18c2:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    18c6:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    18ca:	2900      	cmp	r1, #0
    18cc:	f47f af60 	bne.w	1790 <process_event+0x38>
out:
    18d0:	e753      	b.n	177a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    18d2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    18d4:	2900      	cmp	r1, #0
    18d6:	d0db      	beq.n	1890 <process_event+0x138>
	return node->next;
    18d8:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    18dc:	463b      	mov	r3, r7
    18de:	4620      	mov	r0, r4
    18e0:	f8d1 b004 	ldr.w	fp, [r1, #4]
    18e4:	9201      	str	r2, [sp, #4]
    18e6:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    18e8:	9a01      	ldr	r2, [sp, #4]
    18ea:	f1b9 0f00 	cmp.w	r9, #0
    18ee:	d0cf      	beq.n	1890 <process_event+0x138>
    18f0:	4649      	mov	r1, r9
    18f2:	f8d9 9000 	ldr.w	r9, [r9]
    18f6:	e7f1      	b.n	18dc <process_event+0x184>
    18f8:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    18fa:	463b      	mov	r3, r7
    18fc:	4620      	mov	r0, r4
    18fe:	9201      	str	r2, [sp, #4]
    1900:	682d      	ldr	r5, [r5, #0]
    1902:	f006 faf7 	bl	7ef4 <notify_one>
	while (!sys_slist_is_empty(list)) {
    1906:	9a01      	ldr	r2, [sp, #4]
    1908:	e7c2      	b.n	1890 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    190a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    190e:	bf1e      	ittt	ne
    1910:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    1914:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1916:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1918:	e7d3      	b.n	18c2 <process_event+0x16a>
    191a:	bf00      	nop
    191c:	00007f21 	.word	0x00007f21

00001920 <z_cbvprintf_impl>:
 *
 * @return printed byte count if CONFIG_CBPRINTF_LIBC_SUBSTS is set
 */
int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fmt,
		     va_list ap, uint32_t flags)
{
    1920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1924:	468a      	mov	sl, r1
	size_t count = 0;
    1926:	f04f 0900 	mov.w	r9, #0
{
    192a:	b08f      	sub	sp, #60	; 0x3c
    192c:	461d      	mov	r5, r3

	const bool tagged_ap = (flags & Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS)
			       == Z_CBVPRINTF_PROCESS_FLAG_TAGGED_ARGS;

	/* we pre-increment in the loop  afterwards */
	fmt--;
    192e:	1e53      	subs	r3, r2, #1
{
    1930:	9001      	str	r0, [sp, #4]
	fmt--;
    1932:	9302      	str	r3, [sp, #8]

start:
	while (*++fmt != '%') {
    1934:	9b02      	ldr	r3, [sp, #8]
    1936:	7858      	ldrb	r0, [r3, #1]
    1938:	1c5c      	adds	r4, r3, #1
    193a:	2825      	cmp	r0, #37	; 0x25
    193c:	d121      	bne.n	1982 <z_cbvprintf_impl+0x62>
	min_width = -1;
	precision = -1;
	prefix = "";
	padding_mode = 0;
	length_mod = 0;
	special = 0;
    193e:	f04f 0c00 	mov.w	ip, #0
	precision = -1;
    1942:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	for (fmt++ ; ; fmt++) {
    1946:	4618      	mov	r0, r3
	length_mod = 0;
    1948:	4661      	mov	r1, ip
	min_width = -1;
    194a:	463c      	mov	r4, r7
				precision = 10 * precision + *fmt - '0';
			} else {
				if (min_width < 0) {
					min_width = 0;
				}
				min_width = 10 * min_width + *fmt - '0';
    194c:	260a      	movs	r6, #10
	for (fmt++ ; ; fmt++) {
    194e:	3002      	adds	r0, #2
	padding_mode = 0;
    1950:	f8cd c00c 	str.w	ip, [sp, #12]
		switch (*fmt) {
    1954:	7802      	ldrb	r2, [r0, #0]
    1956:	9002      	str	r0, [sp, #8]
    1958:	2a39      	cmp	r2, #57	; 0x39
    195a:	f100 0001 	add.w	r0, r0, #1
    195e:	d859      	bhi.n	1a14 <z_cbvprintf_impl+0xf4>
    1960:	2a1f      	cmp	r2, #31
    1962:	d818      	bhi.n	1996 <z_cbvprintf_impl+0x76>
    1964:	2a00      	cmp	r2, #0
    1966:	f000 81f7 	beq.w	1d58 <z_cbvprintf_impl+0x438>
			precision = 0;
			break;
		}

		default:
			OUTC('%');
    196a:	4651      	mov	r1, sl
    196c:	9b01      	ldr	r3, [sp, #4]
    196e:	2025      	movs	r0, #37	; 0x25
    1970:	4798      	blx	r3
			OUTC(*fmt);
    1972:	9b02      	ldr	r3, [sp, #8]
    1974:	4651      	mov	r1, sl
    1976:	7818      	ldrb	r0, [r3, #0]
    1978:	9b01      	ldr	r3, [sp, #4]
    197a:	4798      	blx	r3
    197c:	f109 0902 	add.w	r9, r9, #2
			goto start;
    1980:	e7d8      	b.n	1934 <z_cbvprintf_impl+0x14>
		if (*fmt == '\0') {
    1982:	2800      	cmp	r0, #0
    1984:	f000 81e8 	beq.w	1d58 <z_cbvprintf_impl+0x438>
		OUTC(*fmt);
    1988:	4651      	mov	r1, sl
    198a:	9b01      	ldr	r3, [sp, #4]
    198c:	4798      	blx	r3
    198e:	f109 0901 	add.w	r9, r9, #1
	while (*++fmt != '%') {
    1992:	9402      	str	r4, [sp, #8]
    1994:	e7ce      	b.n	1934 <z_cbvprintf_impl+0x14>
		switch (*fmt) {
    1996:	f1a2 0320 	sub.w	r3, r2, #32
    199a:	2b19      	cmp	r3, #25
    199c:	d8e5      	bhi.n	196a <z_cbvprintf_impl+0x4a>
    199e:	f20f 0e08 	addw	lr, pc, #8
    19a2:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    19a6:	bf00      	nop
    19a8:	00001a11 	.word	0x00001a11
    19ac:	0000196b 	.word	0x0000196b
    19b0:	0000196b 	.word	0x0000196b
    19b4:	00001a11 	.word	0x00001a11
    19b8:	0000196b 	.word	0x0000196b
    19bc:	00001a95 	.word	0x00001a95
    19c0:	0000196b 	.word	0x0000196b
    19c4:	0000196b 	.word	0x0000196b
    19c8:	0000196b 	.word	0x0000196b
    19cc:	0000196b 	.word	0x0000196b
    19d0:	00001ad7 	.word	0x00001ad7
    19d4:	00001a11 	.word	0x00001a11
    19d8:	0000196b 	.word	0x0000196b
    19dc:	00001aeb 	.word	0x00001aeb
    19e0:	00001aa3 	.word	0x00001aa3
    19e4:	0000196b 	.word	0x0000196b
    19e8:	00001aaf 	.word	0x00001aaf
    19ec:	00001acb 	.word	0x00001acb
    19f0:	00001acb 	.word	0x00001acb
    19f4:	00001acb 	.word	0x00001acb
    19f8:	00001acb 	.word	0x00001acb
    19fc:	00001acb 	.word	0x00001acb
    1a00:	00001acb 	.word	0x00001acb
    1a04:	00001acb 	.word	0x00001acb
    1a08:	00001acb 	.word	0x00001acb
    1a0c:	00001acb 	.word	0x00001acb
    1a10:	4694      	mov	ip, r2
    1a12:	e79f      	b.n	1954 <z_cbvprintf_impl+0x34>
    1a14:	2a58      	cmp	r2, #88	; 0x58
    1a16:	f000 811b 	beq.w	1c50 <z_cbvprintf_impl+0x330>
    1a1a:	f1a2 0363 	sub.w	r3, r2, #99	; 0x63
    1a1e:	fa5f fe83 	uxtb.w	lr, r3
    1a22:	f1be 0f17 	cmp.w	lr, #23
    1a26:	d8a0      	bhi.n	196a <z_cbvprintf_impl+0x4a>
    1a28:	2b17      	cmp	r3, #23
    1a2a:	d89e      	bhi.n	196a <z_cbvprintf_impl+0x4a>
    1a2c:	f20f 0e04 	addw	lr, pc, #4
    1a30:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    1a34:	00001cb3 	.word	0x00001cb3
    1a38:	00001b11 	.word	0x00001b11
    1a3c:	0000196b 	.word	0x0000196b
    1a40:	0000196b 	.word	0x0000196b
    1a44:	0000196b 	.word	0x0000196b
    1a48:	00001af1 	.word	0x00001af1
    1a4c:	00001b11 	.word	0x00001b11
    1a50:	0000196b 	.word	0x0000196b
    1a54:	0000196b 	.word	0x0000196b
    1a58:	00001af1 	.word	0x00001af1
    1a5c:	0000196b 	.word	0x0000196b
    1a60:	0000196b 	.word	0x0000196b
    1a64:	0000196b 	.word	0x0000196b
    1a68:	00001bfb 	.word	0x00001bfb
    1a6c:	0000196b 	.word	0x0000196b
    1a70:	0000196b 	.word	0x0000196b
    1a74:	00001c93 	.word	0x00001c93
    1a78:	0000196b 	.word	0x0000196b
    1a7c:	00001b11 	.word	0x00001b11
    1a80:	0000196b 	.word	0x0000196b
    1a84:	0000196b 	.word	0x0000196b
    1a88:	00001bfb 	.word	0x00001bfb
    1a8c:	0000196b 	.word	0x0000196b
    1a90:	00001af1 	.word	0x00001af1
			OUTC('%');
    1a94:	4651      	mov	r1, sl
    1a96:	2025      	movs	r0, #37	; 0x25
    1a98:	9b01      	ldr	r3, [sp, #4]
    1a9a:	4798      	blx	r3
    1a9c:	f109 0901 	add.w	r9, r9, #1
			goto start;
    1aa0:	e748      	b.n	1934 <z_cbvprintf_impl+0x14>
			padding_mode &= (char)~PAD_ZERO;
    1aa2:	9b03      	ldr	r3, [sp, #12]
			precision = 0;
    1aa4:	2700      	movs	r7, #0
			padding_mode &= (char)~PAD_ZERO;
    1aa6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1aaa:	9303      	str	r3, [sp, #12]
			continue;
    1aac:	e752      	b.n	1954 <z_cbvprintf_impl+0x34>
			if (min_width < 0 && precision < 0 && !padding_mode) {
    1aae:	2c00      	cmp	r4, #0
    1ab0:	da0b      	bge.n	1aca <z_cbvprintf_impl+0x1aa>
    1ab2:	2f00      	cmp	r7, #0
    1ab4:	da0b      	bge.n	1ace <z_cbvprintf_impl+0x1ae>
    1ab6:	9b03      	ldr	r3, [sp, #12]
    1ab8:	2b00      	cmp	r3, #0
    1aba:	f000 8149 	beq.w	1d50 <z_cbvprintf_impl+0x430>
				min_width = 10 * min_width + *fmt - '0';
    1abe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    1ac2:	fb06 2404 	mla	r4, r6, r4, r2
    1ac6:	3c30      	subs	r4, #48	; 0x30
    1ac8:	e744      	b.n	1954 <z_cbvprintf_impl+0x34>
			if (precision >= 0) {
    1aca:	2f00      	cmp	r7, #0
    1acc:	dbf7      	blt.n	1abe <z_cbvprintf_impl+0x19e>
				precision = 10 * precision + *fmt - '0';
    1ace:	fb06 2707 	mla	r7, r6, r7, r2
    1ad2:	3f30      	subs	r7, #48	; 0x30
    1ad4:	e73e      	b.n	1954 <z_cbvprintf_impl+0x34>
			if (precision >= 0) {
    1ad6:	2f00      	cmp	r7, #0
    1ad8:	f855 3b04 	ldr.w	r3, [r5], #4
    1adc:	db01      	blt.n	1ae2 <z_cbvprintf_impl+0x1c2>
				precision = va_arg(ap, int);
    1ade:	461f      	mov	r7, r3
    1ae0:	e738      	b.n	1954 <z_cbvprintf_impl+0x34>
				if (min_width < 0) {
    1ae2:	1e1c      	subs	r4, r3, #0
    1ae4:	f6bf af36 	bge.w	1954 <z_cbvprintf_impl+0x34>
					min_width = -min_width;
    1ae8:	4264      	negs	r4, r4
		switch (*fmt) {
    1aea:	2302      	movs	r3, #2
				padding_mode = PAD_ZERO;
    1aec:	9303      	str	r3, [sp, #12]
    1aee:	e731      	b.n	1954 <z_cbvprintf_impl+0x34>
			if (*fmt == 'h' && length_mod == 'h') {
    1af0:	2a68      	cmp	r2, #104	; 0x68
    1af2:	d103      	bne.n	1afc <z_cbvprintf_impl+0x1dc>
    1af4:	2968      	cmp	r1, #104	; 0x68
    1af6:	d106      	bne.n	1b06 <z_cbvprintf_impl+0x1e6>
				length_mod = 'H';
    1af8:	2148      	movs	r1, #72	; 0x48
    1afa:	e72b      	b.n	1954 <z_cbvprintf_impl+0x34>
			} else if (*fmt == 'l' && length_mod == 'l') {
    1afc:	2a6c      	cmp	r2, #108	; 0x6c
    1afe:	d102      	bne.n	1b06 <z_cbvprintf_impl+0x1e6>
    1b00:	296c      	cmp	r1, #108	; 0x6c
    1b02:	f000 8127 	beq.w	1d54 <z_cbvprintf_impl+0x434>
			} else if (length_mod == '\0') {
    1b06:	2900      	cmp	r1, #0
    1b08:	f47f af2f 	bne.w	196a <z_cbvprintf_impl+0x4a>
    1b0c:	4611      	mov	r1, r2
		switch (*fmt) {
    1b0e:	e721      	b.n	1954 <z_cbvprintf_impl+0x34>
			if (length_mod == 'z') {
    1b10:	297a      	cmp	r1, #122	; 0x7a
    1b12:	d107      	bne.n	1b24 <z_cbvprintf_impl+0x204>
			} else if (*fmt == 'u') {
    1b14:	2a75      	cmp	r2, #117	; 0x75
				precision = va_arg(ap, int);
    1b16:	f105 0604 	add.w	r6, r5, #4
				d = va_arg(ap, unsigned int);
    1b1a:	682d      	ldr	r5, [r5, #0]
			} else if (*fmt == 'u') {
    1b1c:	d162      	bne.n	1be4 <z_cbvprintf_impl+0x2c4>
				d = va_arg(ap, unsigned int);
    1b1e:	f04f 0800 	mov.w	r8, #0
    1b22:	e00d      	b.n	1b40 <z_cbvprintf_impl+0x220>
			} else if (length_mod == 'l') {
    1b24:	296c      	cmp	r1, #108	; 0x6c
    1b26:	d0f5      	beq.n	1b14 <z_cbvprintf_impl+0x1f4>
			} else if (length_mod == 'L') {
    1b28:	294c      	cmp	r1, #76	; 0x4c
    1b2a:	d1f3      	bne.n	1b14 <z_cbvprintf_impl+0x1f4>
					unsigned long long llu =
    1b2c:	1deb      	adds	r3, r5, #7
    1b2e:	f023 0307 	bic.w	r3, r3, #7
    1b32:	461e      	mov	r6, r3
				if (*fmt == 'u') {
    1b34:	2a75      	cmp	r2, #117	; 0x75
					unsigned long long llu =
    1b36:	e8f6 0102 	ldrd	r0, r1, [r6], #8
				if (*fmt == 'u') {
    1b3a:	d107      	bne.n	1b4c <z_cbvprintf_impl+0x22c>
					unsigned long long llu =
    1b3c:	e9d3 5800 	ldrd	r5, r8, [r3]
			} else if (special == ' ') {
    1b40:	f1bc 0f20 	cmp.w	ip, #32
    1b44:	d151      	bne.n	1bea <z_cbvprintf_impl+0x2ca>
				prefix = " ";
    1b46:	4b86      	ldr	r3, [pc, #536]	; (1d60 <z_cbvprintf_impl+0x440>)
				min_width--;
    1b48:	3c01      	subs	r4, #1
    1b4a:	e009      	b.n	1b60 <z_cbvprintf_impl+0x240>
					d = (int_value_type) lld;
    1b4c:	4605      	mov	r5, r0
    1b4e:	4688      	mov	r8, r1
			if (*fmt != 'u' && (int_value_type)d < 0) {
    1b50:	f1b8 0f00 	cmp.w	r8, #0
    1b54:	daf4      	bge.n	1b40 <z_cbvprintf_impl+0x220>
				d = -d;
    1b56:	426d      	negs	r5, r5
				prefix = "-";
    1b58:	4b82      	ldr	r3, [pc, #520]	; (1d64 <z_cbvprintf_impl+0x444>)
				d = -d;
    1b5a:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
				min_width--;
    1b5e:	3c01      	subs	r4, #1
	int i = 0;
    1b60:	f04f 0b00 	mov.w	fp, #0
	prefix = "";
    1b64:	9300      	str	r3, [sp, #0]
	int i = 0;
    1b66:	ab0d      	add	r3, sp, #52	; 0x34
    1b68:	9305      	str	r3, [sp, #20]
		unsigned int c = num % base;
    1b6a:	4628      	mov	r0, r5
    1b6c:	4641      	mov	r1, r8
    1b6e:	220a      	movs	r2, #10
    1b70:	2300      	movs	r3, #0
    1b72:	f8cd b010 	str.w	fp, [sp, #16]
    1b76:	f7fe fae5 	bl	144 <__aeabi_uldivmod>
		buftop[--i] = c + '0';
    1b7a:	9b05      	ldr	r3, [sp, #20]
    1b7c:	3230      	adds	r2, #48	; 0x30
    1b7e:	f803 2901 	strb.w	r2, [r3], #-1
    1b82:	e9cd 3505 	strd	r3, r5, [sp, #20]
		num /= base;
    1b86:	4628      	mov	r0, r5
    1b88:	2300      	movs	r3, #0
    1b8a:	4641      	mov	r1, r8
    1b8c:	220a      	movs	r2, #10
    1b8e:	f8cd 801c 	str.w	r8, [sp, #28]
    1b92:	f7fe fad7 	bl	144 <__aeabi_uldivmod>
	} while (num);
    1b96:	9b06      	ldr	r3, [sp, #24]
		num /= base;
    1b98:	4605      	mov	r5, r0
	} while (num);
    1b9a:	2b0a      	cmp	r3, #10
    1b9c:	9b07      	ldr	r3, [sp, #28]
		num /= base;
    1b9e:	4688      	mov	r8, r1
	} while (num);
    1ba0:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1ba4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
	} while (num);
    1ba8:	d2df      	bcs.n	1b6a <z_cbvprintf_impl+0x24a>
	return -i;
    1baa:	9b04      	ldr	r3, [sp, #16]
			data = buf + sizeof(buf) - data_len;
    1bac:	9a04      	ldr	r2, [sp, #16]
	return -i;
    1bae:	f1c3 0b01 	rsb	fp, r3, #1
			data = buf + sizeof(buf) - data_len;
    1bb2:	ab0e      	add	r3, sp, #56	; 0x38
    1bb4:	189d      	adds	r5, r3, r2
		}

		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1bb6:	2f00      	cmp	r7, #0
			data = buf + sizeof(buf) - data_len;
    1bb8:	f1a5 0504 	sub.w	r5, r5, #4
		if (precision < 0 && (padding_mode & PAD_ZERO)) {
    1bbc:	da04      	bge.n	1bc8 <z_cbvprintf_impl+0x2a8>
    1bbe:	9b03      	ldr	r3, [sp, #12]
    1bc0:	f013 0f01 	tst.w	r3, #1
    1bc4:	bf18      	it	ne
    1bc6:	4627      	movne	r7, r4
		precision -= data_len;
		if (precision > 0) {
			min_width -= precision;
		}

		if (!(padding_mode & PAD_TAIL)) {
    1bc8:	9b03      	ldr	r3, [sp, #12]
		precision -= data_len;
    1bca:	eba7 080b 	sub.w	r8, r7, fp
		if (precision > 0) {
    1bce:	f1b8 0f00 	cmp.w	r8, #0
		min_width -= data_len;
    1bd2:	bfd4      	ite	le
    1bd4:	eba4 040b 	suble.w	r4, r4, fp
			min_width -= precision;
    1bd8:	1be4      	subgt	r4, r4, r7
		if (!(padding_mode & PAD_TAIL)) {
    1bda:	079b      	lsls	r3, r3, #30
    1bdc:	f100 8081 	bmi.w	1ce2 <z_cbvprintf_impl+0x3c2>
    1be0:	4627      	mov	r7, r4
    1be2:	e077      	b.n	1cd4 <z_cbvprintf_impl+0x3b4>
				d = va_arg(ap, int);
    1be4:	ea4f 78e5 	mov.w	r8, r5, asr #31
    1be8:	e7b2      	b.n	1b50 <z_cbvprintf_impl+0x230>
			} else if (special == '+') {
    1bea:	f1bc 0f2b 	cmp.w	ip, #43	; 0x2b
				prefix = "+";
    1bee:	bf0a      	itet	eq
    1bf0:	4b5d      	ldreq	r3, [pc, #372]	; (1d68 <z_cbvprintf_impl+0x448>)
	prefix = "";
    1bf2:	4b5e      	ldrne	r3, [pc, #376]	; (1d6c <z_cbvprintf_impl+0x44c>)
				min_width--;
    1bf4:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    1bf8:	e7b2      	b.n	1b60 <z_cbvprintf_impl+0x240>
			if (*fmt == 'p') {
    1bfa:	2a70      	cmp	r2, #112	; 0x70
    1bfc:	d128      	bne.n	1c50 <z_cbvprintf_impl+0x330>
				x = (uintptr_t)va_arg(ap, void *);
    1bfe:	462e      	mov	r6, r5
    1c00:	f856 1b04 	ldr.w	r1, [r6], #4
    1c04:	2300      	movs	r3, #0
				if (x == (uint_value_type)0) {
    1c06:	2900      	cmp	r1, #0
    1c08:	d05c      	beq.n	1cc4 <z_cbvprintf_impl+0x3a4>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1c0a:	4859      	ldr	r0, [pc, #356]	; (1d70 <z_cbvprintf_impl+0x450>)
    1c0c:	9000      	str	r0, [sp, #0]
				min_width -= 2;
    1c0e:	3c02      	subs	r4, #2
	int i = 0;
    1c10:	2500      	movs	r5, #0
			data_len = convert_value(x, 16, ALPHA(*fmt),
    1c12:	f002 0260 	and.w	r2, r2, #96	; 0x60
    1c16:	f1a2 0839 	sub.w	r8, r2, #57	; 0x39
	int i = 0;
    1c1a:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
		unsigned int c = num % base;
    1c1e:	f001 020f 	and.w	r2, r1, #15
		if (c >= 10) {
    1c22:	2a09      	cmp	r2, #9
			c += alpha;
    1c24:	bf88      	it	hi
    1c26:	4442      	addhi	r2, r8
		buftop[--i] = c + '0';
    1c28:	3230      	adds	r2, #48	; 0x30
    1c2a:	f80e 2901 	strb.w	r2, [lr], #-1
	} while (num);
    1c2e:	2910      	cmp	r1, #16
		num /= base;
    1c30:	ea4f 1211 	mov.w	r2, r1, lsr #4
    1c34:	ea42 7203 	orr.w	r2, r2, r3, lsl #28
    1c38:	ea4f 1013 	mov.w	r0, r3, lsr #4
	} while (num);
    1c3c:	f173 0300 	sbcs.w	r3, r3, #0
		buftop[--i] = c + '0';
    1c40:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
	} while (num);
    1c44:	d221      	bcs.n	1c8a <z_cbvprintf_impl+0x36a>
			data = buf + sizeof(buf) - data_len;
    1c46:	ab0e      	add	r3, sp, #56	; 0x38
	return -i;
    1c48:	f1c5 0b01 	rsb	fp, r5, #1
			data = buf + sizeof(buf) - data_len;
    1c4c:	441d      	add	r5, r3
    1c4e:	e7b2      	b.n	1bb6 <z_cbvprintf_impl+0x296>
			} else if (length_mod == 'l') {
    1c50:	296c      	cmp	r1, #108	; 0x6c
    1c52:	d104      	bne.n	1c5e <z_cbvprintf_impl+0x33e>
				x = va_arg(ap, unsigned int);
    1c54:	462e      	mov	r6, r5
    1c56:	2300      	movs	r3, #0
    1c58:	f856 1b04 	ldr.w	r1, [r6], #4
    1c5c:	e008      	b.n	1c70 <z_cbvprintf_impl+0x350>
			} else if (length_mod == 'L') {
    1c5e:	294c      	cmp	r1, #76	; 0x4c
    1c60:	d1f8      	bne.n	1c54 <z_cbvprintf_impl+0x334>
				unsigned long long llx =
    1c62:	3507      	adds	r5, #7
    1c64:	f025 0507 	bic.w	r5, r5, #7
    1c68:	462e      	mov	r6, r5
    1c6a:	686b      	ldr	r3, [r5, #4]
    1c6c:	f856 1b08 	ldr.w	r1, [r6], #8
			if (special == '#') {
    1c70:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    1c74:	d106      	bne.n	1c84 <z_cbvprintf_impl+0x364>
				prefix = (*fmt & 0x20) ? "0x" : "0X";
    1c76:	4d3f      	ldr	r5, [pc, #252]	; (1d74 <z_cbvprintf_impl+0x454>)
    1c78:	f012 0f20 	tst.w	r2, #32
    1c7c:	483c      	ldr	r0, [pc, #240]	; (1d70 <z_cbvprintf_impl+0x450>)
    1c7e:	bf08      	it	eq
    1c80:	4628      	moveq	r0, r5
    1c82:	e7c3      	b.n	1c0c <z_cbvprintf_impl+0x2ec>
	prefix = "";
    1c84:	4839      	ldr	r0, [pc, #228]	; (1d6c <z_cbvprintf_impl+0x44c>)
    1c86:	9000      	str	r0, [sp, #0]
    1c88:	e7c2      	b.n	1c10 <z_cbvprintf_impl+0x2f0>
		buftop[--i] = c + '0';
    1c8a:	4665      	mov	r5, ip
		num /= base;
    1c8c:	4611      	mov	r1, r2
    1c8e:	4603      	mov	r3, r0
    1c90:	e7c5      	b.n	1c1e <z_cbvprintf_impl+0x2fe>
			data = va_arg(ap, char *);
    1c92:	462e      	mov	r6, r5
    1c94:	f856 5b04 	ldr.w	r5, [r6], #4
			data_len = strlen(data);
    1c98:	4628      	mov	r0, r5
    1c9a:	f006 fd2b 	bl	86f4 <strlen>
			if (precision >= 0 && data_len > precision) {
    1c9e:	2f00      	cmp	r7, #0
			data_len = strlen(data);
    1ca0:	4683      	mov	fp, r0
			if (precision >= 0 && data_len > precision) {
    1ca2:	db02      	blt.n	1caa <z_cbvprintf_impl+0x38a>
    1ca4:	42b8      	cmp	r0, r7
    1ca6:	bfa8      	it	ge
    1ca8:	46bb      	movge	fp, r7
    1caa:	4b30      	ldr	r3, [pc, #192]	; (1d6c <z_cbvprintf_impl+0x44c>)
    1cac:	2700      	movs	r7, #0
    1cae:	9300      	str	r3, [sp, #0]
    1cb0:	e78a      	b.n	1bc8 <z_cbvprintf_impl+0x2a8>
			c = va_arg(ap, int);
    1cb2:	462e      	mov	r6, r5
			buf[0] = c;
    1cb4:	f856 3b04 	ldr.w	r3, [r6], #4
			data_len = 1;
    1cb8:	f04f 0b01 	mov.w	fp, #1
			buf[0] = c;
    1cbc:	f88d 3020 	strb.w	r3, [sp, #32]
			data = buf;
    1cc0:	ad08      	add	r5, sp, #32
    1cc2:	e7f2      	b.n	1caa <z_cbvprintf_impl+0x38a>
					data_len = 5;
    1cc4:	f04f 0b05 	mov.w	fp, #5
					data = "(nil)";
    1cc8:	4d2b      	ldr	r5, [pc, #172]	; (1d78 <z_cbvprintf_impl+0x458>)
    1cca:	e7ee      	b.n	1caa <z_cbvprintf_impl+0x38a>
			while (--min_width >= 0) {
				OUTC(' ');
    1ccc:	4651      	mov	r1, sl
    1cce:	2020      	movs	r0, #32
    1cd0:	9b01      	ldr	r3, [sp, #4]
    1cd2:	4798      	blx	r3
			while (--min_width >= 0) {
    1cd4:	3f01      	subs	r7, #1
    1cd6:	d5f9      	bpl.n	1ccc <z_cbvprintf_impl+0x3ac>
    1cd8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
    1cdc:	3c01      	subs	r4, #1
    1cde:	4499      	add	r9, r3
    1ce0:	1ae4      	subs	r4, r4, r3
    1ce2:	9b00      	ldr	r3, [sp, #0]
    1ce4:	eba9 0903 	sub.w	r9, r9, r3
    1ce8:	e004      	b.n	1cf4 <z_cbvprintf_impl+0x3d4>
    1cea:	9300      	str	r3, [sp, #0]
			}
		}
		while (*prefix) {
			OUTC(*prefix++);
    1cec:	4651      	mov	r1, sl
    1cee:	9b01      	ldr	r3, [sp, #4]
    1cf0:	4798      	blx	r3
    1cf2:	9b00      	ldr	r3, [sp, #0]
    1cf4:	eb09 0703 	add.w	r7, r9, r3
		while (*prefix) {
    1cf8:	f813 0b01 	ldrb.w	r0, [r3], #1
    1cfc:	2800      	cmp	r0, #0
    1cfe:	d1f4      	bne.n	1cea <z_cbvprintf_impl+0x3ca>
		precision -= data_len;
    1d00:	46c1      	mov	r9, r8
		}
		while (--precision >= 0) {
    1d02:	f1b9 0901 	subs.w	r9, r9, #1
    1d06:	d513      	bpl.n	1d30 <z_cbvprintf_impl+0x410>
    1d08:	46d9      	mov	r9, fp
    1d0a:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
			OUTC('0');
		}
		while (--data_len >= 0) {
    1d0e:	f1b9 0901 	subs.w	r9, r9, #1
    1d12:	d512      	bpl.n	1d3a <z_cbvprintf_impl+0x41a>
    1d14:	f1bb 0f00 	cmp.w	fp, #0
    1d18:	bfa8      	it	ge
    1d1a:	44d8      	addge	r8, fp
    1d1c:	4625      	mov	r5, r4
			OUTC(*data++);
		}
		while (--min_width >= 0) {
    1d1e:	3d01      	subs	r5, #1
    1d20:	d511      	bpl.n	1d46 <z_cbvprintf_impl+0x426>
    1d22:	2c00      	cmp	r4, #0
    1d24:	bfa8      	it	ge
    1d26:	44a0      	addge	r8, r4
    1d28:	4635      	mov	r5, r6
    1d2a:	eb08 0907 	add.w	r9, r8, r7
    1d2e:	e601      	b.n	1934 <z_cbvprintf_impl+0x14>
			OUTC('0');
    1d30:	4651      	mov	r1, sl
    1d32:	9b01      	ldr	r3, [sp, #4]
    1d34:	2030      	movs	r0, #48	; 0x30
    1d36:	4798      	blx	r3
    1d38:	e7e3      	b.n	1d02 <z_cbvprintf_impl+0x3e2>
			OUTC(*data++);
    1d3a:	4651      	mov	r1, sl
    1d3c:	f815 0b01 	ldrb.w	r0, [r5], #1
    1d40:	9b01      	ldr	r3, [sp, #4]
    1d42:	4798      	blx	r3
    1d44:	e7e3      	b.n	1d0e <z_cbvprintf_impl+0x3ee>
			OUTC(' ');
    1d46:	4651      	mov	r1, sl
    1d48:	9b01      	ldr	r3, [sp, #4]
    1d4a:	2020      	movs	r0, #32
    1d4c:	4798      	blx	r3
    1d4e:	e7e6      	b.n	1d1e <z_cbvprintf_impl+0x3fe>
				padding_mode = PAD_ZERO;
    1d50:	2301      	movs	r3, #1
    1d52:	e6cb      	b.n	1aec <z_cbvprintf_impl+0x1cc>
				length_mod = 'L';
    1d54:	214c      	movs	r1, #76	; 0x4c
    1d56:	e5fd      	b.n	1954 <z_cbvprintf_impl+0x34>
		}

		goto start;
	}
}
    1d58:	4648      	mov	r0, r9
    1d5a:	b00f      	add	sp, #60	; 0x3c
    1d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d60:	0000a69e 	.word	0x0000a69e
    1d64:	0000a0eb 	.word	0x0000a0eb
    1d68:	0000a0ed 	.word	0x0000a0ed
    1d6c:	00009b9e 	.word	0x00009b9e
    1d70:	0000a0f2 	.word	0x0000a0f2
    1d74:	0000a0ef 	.word	0x0000a0ef
    1d78:	0000a0f5 	.word	0x0000a0f5

00001d7c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1d7c:	b508      	push	{r3, lr}
    1d7e:	f04f 0220 	mov.w	r2, #32
    1d82:	f3ef 8311 	mrs	r3, BASEPRI
    1d86:	f382 8812 	msr	BASEPRI_MAX, r2
    1d8a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1d8e:	f001 fa73 	bl	3278 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1d92:	4803      	ldr	r0, [pc, #12]	; (1da0 <sys_reboot+0x24>)
    1d94:	f006 f885 	bl	7ea2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1d98:	f000 fe8e 	bl	2ab8 <arch_cpu_idle>
    1d9c:	e7fc      	b.n	1d98 <sys_reboot+0x1c>
    1d9e:	bf00      	nop
    1da0:	0000a0fb 	.word	0x0000a0fb

00001da4 <nordicsemi_nrf91_init>:
    1da4:	f04f 0220 	mov.w	r2, #32
    1da8:	f3ef 8311 	mrs	r3, BASEPRI
    1dac:	f382 8812 	msr	BASEPRI_MAX, r2
    1db0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1db4:	2101      	movs	r1, #1
    1db6:	4a04      	ldr	r2, [pc, #16]	; (1dc8 <nordicsemi_nrf91_init+0x24>)
    1db8:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    1dbc:	f383 8811 	msr	BASEPRI, r3
    1dc0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1dc4:	2000      	movs	r0, #0
    1dc6:	4770      	bx	lr
    1dc8:	50039000 	.word	0x50039000

00001dcc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1dcc:	b120      	cbz	r0, 1dd8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1dce:	4b03      	ldr	r3, [pc, #12]	; (1ddc <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1dd0:	0180      	lsls	r0, r0, #6
    1dd2:	f043 0301 	orr.w	r3, r3, #1
    1dd6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1dd8:	4770      	bx	lr
    1dda:	bf00      	nop
    1ddc:	00009750 	.word	0x00009750

00001de0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1de0:	f002 bc02 	b.w	45e8 <SystemInit>

00001de4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    1de4:	4b11      	ldr	r3, [pc, #68]	; (1e2c <flash_area_open+0x48>)
{
    1de6:	b570      	push	{r4, r5, r6, lr}
	if (flash_map == NULL) {
    1de8:	681b      	ldr	r3, [r3, #0]
{
    1dea:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    1dec:	b18b      	cbz	r3, 1e12 <flash_area_open+0x2e>
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static inline struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    1dee:	4a10      	ldr	r2, [pc, #64]	; (1e30 <flash_area_open+0x4c>)
    1df0:	6811      	ldr	r1, [r2, #0]
    1df2:	2200      	movs	r2, #0
    1df4:	428a      	cmp	r2, r1
    1df6:	db02      	blt.n	1dfe <flash_area_open+0x1a>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
	if (area == NULL) {
		return -ENOENT;
    1df8:	f06f 0001 	mvn.w	r0, #1
	}

	*fap = area;

	return 0;
}
    1dfc:	bd70      	pop	{r4, r5, r6, pc}
		if (flash_map[i].fa_id == idx) {
    1dfe:	461d      	mov	r5, r3
    1e00:	f813 6b10 	ldrb.w	r6, [r3], #16
    1e04:	4286      	cmp	r6, r0
    1e06:	d007      	beq.n	1e18 <flash_area_open+0x34>
	for (int i = 0; i < flash_map_entries; i++) {
    1e08:	3201      	adds	r2, #1
    1e0a:	e7f3      	b.n	1df4 <flash_area_open+0x10>
	return 0;
    1e0c:	2000      	movs	r0, #0
	*fap = area;
    1e0e:	6025      	str	r5, [r4, #0]
	return 0;
    1e10:	e7f4      	b.n	1dfc <flash_area_open+0x18>
		return -EACCES;
    1e12:	f06f 000c 	mvn.w	r0, #12
    1e16:	e7f1      	b.n	1dfc <flash_area_open+0x18>
	if (!area->fa_dev || !device_is_ready(area->fa_dev)) {
    1e18:	68e8      	ldr	r0, [r5, #12]
    1e1a:	b118      	cbz	r0, 1e24 <flash_area_open+0x40>
    1e1c:	f007 f961 	bl	90e2 <z_device_is_ready>
    1e20:	2800      	cmp	r0, #0
    1e22:	d1f3      	bne.n	1e0c <flash_area_open+0x28>
		return -ENODEV;
    1e24:	f06f 0012 	mvn.w	r0, #18
    1e28:	e7e8      	b.n	1dfc <flash_area_open+0x18>
    1e2a:	bf00      	nop
    1e2c:	2000c4f4 	.word	0x2000c4f4
    1e30:	00009860 	.word	0x00009860

00001e34 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1e34:	b570      	push	{r4, r5, r6, lr}
    1e36:	b088      	sub	sp, #32
    1e38:	4605      	mov	r5, r0
    1e3a:	460c      	mov	r4, r1
	int rc = flash_area_open(idx, &fa);
    1e3c:	b2c0      	uxtb	r0, r0
    1e3e:	4669      	mov	r1, sp
{
    1e40:	4616      	mov	r6, r2
	int rc = flash_area_open(idx, &fa);
    1e42:	f7ff ffcf 	bl	1de4 <flash_area_open>
	if (rc < 0 || fa == NULL) {
    1e46:	2800      	cmp	r0, #0
    1e48:	db1b      	blt.n	1e82 <flash_area_get_sectors+0x4e>
    1e4a:	9800      	ldr	r0, [sp, #0]
    1e4c:	b1c8      	cbz	r0, 1e82 <flash_area_get_sectors+0x4e>
	cb_data->area_off = fa->fa_off;
    1e4e:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    1e50:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    1e52:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    1e54:	6883      	ldr	r3, [r0, #8]
	cb_data->area_idx = idx;
    1e56:	9501      	str	r5, [sp, #4]
	cb_data->ret = ret;
    1e58:	e9cd 3603 	strd	r3, r6, [sp, #12]
	cb_data->ret_idx = 0U;
    1e5c:	2300      	movs	r3, #0
	flash_dev = fa->fa_dev;
    1e5e:	68c5      	ldr	r5, [r0, #12]
	cb_data->status = 0;
    1e60:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    1e64:	9305      	str	r3, [sp, #20]
	flash_area_close(fa);
    1e66:	f006 f919 	bl	809c <flash_area_close>
	if (flash_dev == NULL) {
    1e6a:	b16d      	cbz	r5, 1e88 <flash_area_get_sectors+0x54>
	flash_page_foreach(flash_dev, cb, cb_data);
    1e6c:	4628      	mov	r0, r5
    1e6e:	4908      	ldr	r1, [pc, #32]	; (1e90 <flash_area_get_sectors+0x5c>)
    1e70:	aa01      	add	r2, sp, #4
    1e72:	f006 fe0d 	bl	8a90 <flash_page_foreach>
	if (cb_data->status == 0) {
    1e76:	9807      	ldr	r0, [sp, #28]
    1e78:	b908      	cbnz	r0, 1e7e <flash_area_get_sectors+0x4a>
		*cnt = cb_data->ret_idx;
    1e7a:	9b05      	ldr	r3, [sp, #20]
    1e7c:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1e7e:	b008      	add	sp, #32
    1e80:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    1e82:	f06f 0015 	mvn.w	r0, #21
    1e86:	e7fa      	b.n	1e7e <flash_area_get_sectors+0x4a>
		return -ENODEV;
    1e88:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1e8c:	e7f7      	b.n	1e7e <flash_area_get_sectors+0x4a>
    1e8e:	bf00      	nop
    1e90:	0000813d 	.word	0x0000813d

00001e94 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1e94:	4801      	ldr	r0, [pc, #4]	; (1e9c <nrf_cc3xx_platform_abort_init+0x8>)
    1e96:	f004 b87b 	b.w	5f90 <nrf_cc3xx_platform_set_abort>
    1e9a:	bf00      	nop
    1e9c:	00009864 	.word	0x00009864

00001ea0 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ea0:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1ea2:	4604      	mov	r4, r0
    1ea4:	b918      	cbnz	r0, 1eae <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1ea6:	4b0d      	ldr	r3, [pc, #52]	; (1edc <mutex_free_platform+0x3c>)
    1ea8:	480d      	ldr	r0, [pc, #52]	; (1ee0 <mutex_free_platform+0x40>)
    1eaa:	685b      	ldr	r3, [r3, #4]
    1eac:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1eae:	6861      	ldr	r1, [r4, #4]
    1eb0:	2908      	cmp	r1, #8
    1eb2:	d00d      	beq.n	1ed0 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1eb4:	f031 0304 	bics.w	r3, r1, #4
    1eb8:	d00a      	beq.n	1ed0 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1eba:	f011 0102 	ands.w	r1, r1, #2
    1ebe:	d008      	beq.n	1ed2 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1ec0:	4621      	mov	r1, r4
    1ec2:	4808      	ldr	r0, [pc, #32]	; (1ee4 <mutex_free_platform+0x44>)
    1ec4:	f007 f936 	bl	9134 <k_mem_slab_free>
        mutex->mutex = NULL;
    1ec8:	2300      	movs	r3, #0
    1eca:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1ecc:	2300      	movs	r3, #0
    1ece:	6063      	str	r3, [r4, #4]
}
    1ed0:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1ed2:	2214      	movs	r2, #20
    1ed4:	6820      	ldr	r0, [r4, #0]
    1ed6:	f006 fc48 	bl	876a <memset>
    1eda:	e7f7      	b.n	1ecc <mutex_free_platform+0x2c>
    1edc:	2000c5b8 	.word	0x2000c5b8
    1ee0:	0000a128 	.word	0x0000a128
    1ee4:	2000dc90 	.word	0x2000dc90

00001ee8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ee8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1eea:	b1e8      	cbz	r0, 1f28 <mutex_lock_platform+0x40>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1eec:	6843      	ldr	r3, [r0, #4]
    1eee:	2b04      	cmp	r3, #4
    1ef0:	d10c      	bne.n	1f0c <mutex_lock_platform+0x24>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1ef2:	2201      	movs	r2, #1
    1ef4:	6803      	ldr	r3, [r0, #0]
    1ef6:	e8d3 1fef 	ldaex	r1, [r3]
    1efa:	2900      	cmp	r1, #0
    1efc:	d103      	bne.n	1f06 <mutex_lock_platform+0x1e>
    1efe:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1f02:	2800      	cmp	r0, #0
    1f04:	d1f7      	bne.n	1ef6 <mutex_lock_platform+0xe>
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f06:	d10b      	bne.n	1f20 <mutex_lock_platform+0x38>
    1f08:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1f0a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1f0c:	b153      	cbz	r3, 1f24 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1f0e:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    1f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1f18:	f003 fa40 	bl	539c <z_impl_k_mutex_lock>
        if (ret == 0) {
    1f1c:	2800      	cmp	r0, #0
    1f1e:	d0f3      	beq.n	1f08 <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f20:	4803      	ldr	r0, [pc, #12]	; (1f30 <mutex_lock_platform+0x48>)
    1f22:	e7f2      	b.n	1f0a <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1f24:	4803      	ldr	r0, [pc, #12]	; (1f34 <mutex_lock_platform+0x4c>)
    1f26:	e7f0      	b.n	1f0a <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1f28:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1f2c:	e7ed      	b.n	1f0a <mutex_lock_platform+0x22>
    1f2e:	bf00      	nop
    1f30:	ffff8fe9 	.word	0xffff8fe9
    1f34:	ffff8fea 	.word	0xffff8fea

00001f38 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f38:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1f3a:	b1b0      	cbz	r0, 1f6a <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1f3c:	6843      	ldr	r3, [r0, #4]
    1f3e:	2b04      	cmp	r3, #4
    1f40:	d10d      	bne.n	1f5e <mutex_unlock_platform+0x26>
    1f42:	2200      	movs	r2, #0
    1f44:	6803      	ldr	r3, [r0, #0]
    1f46:	e8d3 1fef 	ldaex	r1, [r3]
    1f4a:	2901      	cmp	r1, #1
    1f4c:	d103      	bne.n	1f56 <mutex_unlock_platform+0x1e>
    1f4e:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1f52:	2800      	cmp	r0, #0
    1f54:	d1f7      	bne.n	1f46 <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f56:	4807      	ldr	r0, [pc, #28]	; (1f74 <mutex_unlock_platform+0x3c>)
    1f58:	bf08      	it	eq
    1f5a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1f5c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1f5e:	b13b      	cbz	r3, 1f70 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1f60:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1f62:	f003 fa93 	bl	548c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1f66:	2000      	movs	r0, #0
    1f68:	e7f8      	b.n	1f5c <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1f6a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1f6e:	e7f5      	b.n	1f5c <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1f70:	4801      	ldr	r0, [pc, #4]	; (1f78 <mutex_unlock_platform+0x40>)
    1f72:	e7f3      	b.n	1f5c <mutex_unlock_platform+0x24>
    1f74:	ffff8fe9 	.word	0xffff8fe9
    1f78:	ffff8fea 	.word	0xffff8fea

00001f7c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f7c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1f7e:	4604      	mov	r4, r0
    1f80:	b918      	cbnz	r0, 1f8a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1f82:	4b16      	ldr	r3, [pc, #88]	; (1fdc <mutex_init_platform+0x60>)
    1f84:	4816      	ldr	r0, [pc, #88]	; (1fe0 <mutex_init_platform+0x64>)
    1f86:	685b      	ldr	r3, [r3, #4]
    1f88:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1f8a:	6863      	ldr	r3, [r4, #4]
    1f8c:	2b04      	cmp	r3, #4
    1f8e:	d023      	beq.n	1fd8 <mutex_init_platform+0x5c>
    1f90:	2b08      	cmp	r3, #8
    1f92:	d021      	beq.n	1fd8 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1f94:	b9cb      	cbnz	r3, 1fca <mutex_init_platform+0x4e>
    1f96:	6823      	ldr	r3, [r4, #0]
    1f98:	b9bb      	cbnz	r3, 1fca <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1fa2:	4621      	mov	r1, r4
    1fa4:	480f      	ldr	r0, [pc, #60]	; (1fe4 <mutex_init_platform+0x68>)
    1fa6:	f003 f93f 	bl	5228 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1faa:	b908      	cbnz	r0, 1fb0 <mutex_init_platform+0x34>
    1fac:	6823      	ldr	r3, [r4, #0]
    1fae:	b91b      	cbnz	r3, 1fb8 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1fb0:	4b0a      	ldr	r3, [pc, #40]	; (1fdc <mutex_init_platform+0x60>)
    1fb2:	480d      	ldr	r0, [pc, #52]	; (1fe8 <mutex_init_platform+0x6c>)
    1fb4:	685b      	ldr	r3, [r3, #4]
    1fb6:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1fb8:	2214      	movs	r2, #20
    1fba:	2100      	movs	r1, #0
    1fbc:	6820      	ldr	r0, [r4, #0]
    1fbe:	f006 fbd4 	bl	876a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1fc2:	6863      	ldr	r3, [r4, #4]
    1fc4:	f043 0302 	orr.w	r3, r3, #2
    1fc8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1fca:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1fcc:	f007 f8f7 	bl	91be <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1fd0:	6863      	ldr	r3, [r4, #4]
    1fd2:	f043 0301 	orr.w	r3, r3, #1
    1fd6:	6063      	str	r3, [r4, #4]
}
    1fd8:	bd10      	pop	{r4, pc}
    1fda:	bf00      	nop
    1fdc:	2000c5b8 	.word	0x2000c5b8
    1fe0:	0000a128 	.word	0x0000a128
    1fe4:	2000dc90 	.word	0x2000dc90
    1fe8:	0000a14e 	.word	0x0000a14e

00001fec <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1fec:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1fee:	4906      	ldr	r1, [pc, #24]	; (2008 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x8>)
    1ff0:	2340      	movs	r3, #64	; 0x40
    1ff2:	2214      	movs	r2, #20
    1ff4:	4805      	ldr	r0, [pc, #20]	; (200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>)
    1ff6:	f007 f882 	bl	90fe <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1ffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1ffe:	4904      	ldr	r1, [pc, #16]	; (2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>)
    2000:	4804      	ldr	r0, [pc, #16]	; (2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>)
    2002:	f004 b827 	b.w	6054 <nrf_cc3xx_platform_set_mutexes>
    2006:	bf00      	nop
    2008:	2000dcac 	.word	0x2000dcac
    200c:	2000dc90 	.word	0x2000dc90
    2010:	0000987c 	.word	0x0000987c
    2014:	0000986c 	.word	0x0000986c

00002018 <boot_uart_fifo_callback>:
	return boot_uart_fifo_init();
}

static void
boot_uart_fifo_callback(const struct device *dev, void *user_data)
{
    2018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static struct line_input *cmd;
	uint8_t byte;
	int rx;

	uart_irq_update(uart_dev);
    201a:	4e24      	ldr	r6, [pc, #144]	; (20ac <boot_uart_fifo_callback+0x94>)
    201c:	6830      	ldr	r0, [r6, #0]
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
    201e:	6883      	ldr	r3, [r0, #8]
    2020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    2022:	b103      	cbz	r3, 2026 <boot_uart_fifo_callback+0xe>
		return -ENOSYS;
	}
	return api->irq_update(dev);
    2024:	4798      	blx	r3

	if (!uart_irq_rx_ready(uart_dev)) {
    2026:	6830      	ldr	r0, [r6, #0]
	if (api->irq_rx_ready == NULL) {
    2028:	6883      	ldr	r3, [r0, #8]
    202a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    202c:	b9a3      	cbnz	r3, 2058 <boot_uart_fifo_callback+0x40>
		rx = uart_fifo_read(uart_dev, &byte, 1);
		if (rx != 1) {
			break;
		}

		if (!cmd) {
    202e:	4c20      	ldr	r4, [pc, #128]	; (20b0 <boot_uart_fifo_callback+0x98>)
	return list->head;
    2030:	4d20      	ldr	r5, [pc, #128]	; (20b4 <boot_uart_fifo_callback+0x9c>)
		rx = uart_fifo_read(uart_dev, &byte, 1);
    2032:	6830      	ldr	r0, [r6, #0]
	if (api->fifo_read == NULL) {
    2034:	6883      	ldr	r3, [r0, #8]
    2036:	699b      	ldr	r3, [r3, #24]
    2038:	b18b      	cbz	r3, 205e <boot_uart_fifo_callback+0x46>
	return api->fifo_read(dev, rx_data, size);
    203a:	2201      	movs	r2, #1
    203c:	f10d 0107 	add.w	r1, sp, #7
    2040:	4798      	blx	r3
		if (rx != 1) {
    2042:	2801      	cmp	r0, #1
    2044:	d10b      	bne.n	205e <boot_uart_fifo_callback+0x46>
		if (!cmd) {
    2046:	6823      	ldr	r3, [r4, #0]
    2048:	b993      	cbnz	r3, 2070 <boot_uart_fifo_callback+0x58>
    204a:	682b      	ldr	r3, [r5, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    204c:	b94b      	cbnz	r3, 2062 <boot_uart_fifo_callback+0x4a>
			sys_snode_t *node;

			node = sys_slist_get(&avail_queue);
			if (!node) {
				BOOT_LOG_ERR("Not enough memory to store"
    204e:	2145      	movs	r1, #69	; 0x45
    2050:	4819      	ldr	r0, [pc, #100]	; (20b8 <boot_uart_fifo_callback+0xa0>)
    2052:	f006 f816 	bl	8082 <z_log_minimal_printk>
					     " incoming data!");
				return;
    2056:	e002      	b.n	205e <boot_uart_fifo_callback+0x46>
	return api->irq_rx_ready(dev);
    2058:	4798      	blx	r3
	if (!uart_irq_rx_ready(uart_dev)) {
    205a:	2800      	cmp	r0, #0
    205c:	d1e7      	bne.n	202e <boot_uart_fifo_callback+0x16>
			sys_slist_append(&lines_queue, &cmd->node);
			cur = 0;
			cmd = NULL;
		}
	}
}
    205e:	b003      	add	sp, #12
    2060:	bdf0      	pop	{r4, r5, r6, r7, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2062:	6869      	ldr	r1, [r5, #4]
	return node->next;
    2064:	681a      	ldr	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2066:	428b      	cmp	r3, r1
	list->head = node;
    2068:	602a      	str	r2, [r5, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    206a:	d100      	bne.n	206e <boot_uart_fifo_callback+0x56>
	list->tail = node;
    206c:	606a      	str	r2, [r5, #4]
			cmd = CONTAINER_OF(node, struct line_input, node);
    206e:	6023      	str	r3, [r4, #0]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    2070:	4a12      	ldr	r2, [pc, #72]	; (20bc <boot_uart_fifo_callback+0xa4>)
			cmd->line[cur++] = byte;
    2072:	f89d 0007 	ldrb.w	r0, [sp, #7]
		if (cur < CONFIG_BOOT_MAX_LINE_INPUT_LEN) {
    2076:	8811      	ldrh	r1, [r2, #0]
    2078:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    207c:	d204      	bcs.n	2088 <boot_uart_fifo_callback+0x70>
			cmd->line[cur++] = byte;
    207e:	6823      	ldr	r3, [r4, #0]
    2080:	1c4f      	adds	r7, r1, #1
    2082:	440b      	add	r3, r1
    2084:	8017      	strh	r7, [r2, #0]
    2086:	7218      	strb	r0, [r3, #8]
		if (byte ==  '\n') {
    2088:	280a      	cmp	r0, #10
    208a:	d1d2      	bne.n	2032 <boot_uart_fifo_callback+0x1a>
	parent->next = child;
    208c:	2000      	movs	r0, #0
			cmd->len = cur;
    208e:	6823      	ldr	r3, [r4, #0]
    2090:	8811      	ldrh	r1, [r2, #0]
    2092:	6018      	str	r0, [r3, #0]
    2094:	6059      	str	r1, [r3, #4]
	return list->tail;
    2096:	490a      	ldr	r1, [pc, #40]	; (20c0 <boot_uart_fifo_callback+0xa8>)
    2098:	684d      	ldr	r5, [r1, #4]
Z_GENLIST_APPEND(slist, snode)
    209a:	b925      	cbnz	r5, 20a6 <boot_uart_fifo_callback+0x8e>
	list->head = node;
    209c:	e9c1 3300 	strd	r3, r3, [r1]
			cur = 0;
    20a0:	8010      	strh	r0, [r2, #0]
			cmd = NULL;
    20a2:	6020      	str	r0, [r4, #0]
    20a4:	e7c4      	b.n	2030 <boot_uart_fifo_callback+0x18>
	parent->next = child;
    20a6:	602b      	str	r3, [r5, #0]
	list->tail = node;
    20a8:	604b      	str	r3, [r1, #4]
}
    20aa:	e7f9      	b.n	20a0 <boot_uart_fifo_callback+0x88>
    20ac:	2000e5d4 	.word	0x2000e5d4
    20b0:	2000e1b4 	.word	0x2000e1b4
    20b4:	2000e1ac 	.word	0x2000e1ac
    20b8:	0000a17b 	.word	0x0000a17b
    20bc:	2000e8dc 	.word	0x2000e8dc
    20c0:	2000e5cc 	.word	0x2000e5cc

000020c4 <console_out>:
	uart_poll_out(uart_dev, c);
    20c4:	4b04      	ldr	r3, [pc, #16]	; (20d8 <console_out+0x14>)
{
    20c6:	b510      	push	{r4, lr}
    20c8:	4604      	mov	r4, r0
	uart_poll_out(uart_dev, c);
    20ca:	6818      	ldr	r0, [r3, #0]
	api->poll_out(dev, out_char);
    20cc:	6883      	ldr	r3, [r0, #8]
    20ce:	b2e1      	uxtb	r1, r4
    20d0:	685b      	ldr	r3, [r3, #4]
    20d2:	4798      	blx	r3
}
    20d4:	4620      	mov	r0, r4
    20d6:	bd10      	pop	{r4, pc}
    20d8:	2000e5d4 	.word	0x2000e5d4

000020dc <console_read>:
{
    20dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20de:	4606      	mov	r6, r0
    20e0:	4615      	mov	r5, r2
    20e2:	4608      	mov	r0, r1
	__asm__ volatile(
    20e4:	f04f 0320 	mov.w	r3, #32
    20e8:	f3ef 8c11 	mrs	ip, BASEPRI
    20ec:	f383 8812 	msr	BASEPRI_MAX, r3
    20f0:	f3bf 8f6f 	isb	sy
	sys_snode_t *node;
	int key;

	key = irq_lock();
	/* Recycle cmd buffer returned previous time */
	if (cmd != NULL) {
    20f4:	4918      	ldr	r1, [pc, #96]	; (2158 <console_read+0x7c>)
    20f6:	680b      	ldr	r3, [r1, #0]
    20f8:	b143      	cbz	r3, 210c <console_read+0x30>
	return list->tail;
    20fa:	4a18      	ldr	r2, [pc, #96]	; (215c <console_read+0x80>)
    20fc:	6854      	ldr	r4, [r2, #4]
		if (sys_slist_peek_tail(&avail_queue) != &cmd->node) {
    20fe:	429c      	cmp	r4, r3
    2100:	d004      	beq.n	210c <console_read+0x30>
	parent->next = child;
    2102:	2700      	movs	r7, #0
    2104:	601f      	str	r7, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
    2106:	b99c      	cbnz	r4, 2130 <console_read+0x54>
	list->head = node;
    2108:	e9c2 3300 	strd	r3, r3, [r2]
	return list->head;
    210c:	4a14      	ldr	r2, [pc, #80]	; (2160 <console_read+0x84>)
    210e:	6813      	ldr	r3, [r2, #0]
Z_GENLIST_GET(slist, snode)
    2110:	b12b      	cbz	r3, 211e <console_read+0x42>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2112:	6857      	ldr	r7, [r2, #4]
	return node->next;
    2114:	681c      	ldr	r4, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2116:	42bb      	cmp	r3, r7
	list->head = node;
    2118:	6014      	str	r4, [r2, #0]
	list->tail = node;
    211a:	bf08      	it	eq
    211c:	6054      	streq	r4, [r2, #4]
	__asm__ volatile(
    211e:	f38c 8811 	msr	BASEPRI, ip
    2122:	f3bf 8f6f 	isb	sy

	node = sys_slist_get(&lines_queue);
	irq_unlock(key);

	if (node == NULL) {
		cmd = NULL;
    2126:	600b      	str	r3, [r1, #0]
	if (node == NULL) {
    2128:	b92b      	cbnz	r3, 2136 <console_read+0x5a>
		return 0;
    212a:	4618      	mov	r0, r3
		*newline = 0;
    212c:	602b      	str	r3, [r5, #0]
}
    212e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    2130:	6023      	str	r3, [r4, #0]
	list->tail = node;
    2132:	6053      	str	r3, [r2, #4]
}
    2134:	e7ea      	b.n	210c <console_read+0x30>
		return 0;
	}

	cmd = CONTAINER_OF(node, struct line_input, node);
	*line = cmd->line;
	return cmd->len;
    2136:	685c      	ldr	r4, [r3, #4]
	*line = cmd->line;
    2138:	f103 0108 	add.w	r1, r3, #8
	if (len > str_size - 1) {
    213c:	42a0      	cmp	r0, r4
		len = str_size - 1;
    213e:	bfd8      	it	le
    2140:	f100 34ff 	addle.w	r4, r0, #4294967295	; 0xffffffff
	memcpy(str, line, len);
    2144:	4622      	mov	r2, r4
    2146:	4630      	mov	r0, r6
    2148:	f006 fb04 	bl	8754 <memcpy>
	str[len] = '\0';
    214c:	2300      	movs	r3, #0
    214e:	5533      	strb	r3, [r6, r4]
	*newline = 1;
    2150:	2301      	movs	r3, #1
    2152:	602b      	str	r3, [r5, #0]
	return len + 1;
    2154:	18e0      	adds	r0, r4, r3
    2156:	e7ea      	b.n	212e <console_read+0x52>
    2158:	2000e1b8 	.word	0x2000e1b8
    215c:	2000e1ac 	.word	0x2000e1ac
    2160:	2000e5cc 	.word	0x2000e5cc

00002164 <boot_console_init>:
{
    2164:	b537      	push	{r0, r1, r2, r4, r5, lr}
	list->head = NULL;
    2166:	2500      	movs	r5, #0
    2168:	4b1c      	ldr	r3, [pc, #112]	; (21dc <boot_console_init+0x78>)
	list->head = node;
    216a:	4a1d      	ldr	r2, [pc, #116]	; (21e0 <boot_console_init+0x7c>)
	list->tail = NULL;
    216c:	e9c3 5500 	strd	r5, r5, [r3]
	list->head = node;
    2170:	4b1c      	ldr	r3, [pc, #112]	; (21e4 <boot_console_init+0x80>)

static int
boot_uart_fifo_init(void)
{
#ifdef CONFIG_BOOT_SERIAL_UART
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2172:	4c1d      	ldr	r4, [pc, #116]	; (21e8 <boot_console_init+0x84>)
    2174:	481d      	ldr	r0, [pc, #116]	; (21ec <boot_console_init+0x88>)
	parent->next = child;
    2176:	f503 7102 	add.w	r1, r3, #520	; 0x208
	list->head = node;
    217a:	6013      	str	r3, [r2, #0]
	parent->next = child;
    217c:	f8c3 5208 	str.w	r5, [r3, #520]	; 0x208
    2180:	6019      	str	r1, [r3, #0]
	list->tail = node;
    2182:	6051      	str	r1, [r2, #4]
    2184:	6020      	str	r0, [r4, #0]
    2186:	f006 ffac 	bl	90e2 <z_device_is_ready>
#elif CONFIG_BOOT_SERIAL_CDC_ACM
	uart_dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
#endif

	if (!device_is_ready(uart_dev)) {
    218a:	b310      	cbz	r0, 21d2 <boot_console_init+0x6e>
	if (rc) {
		return (-1);
	}
#endif

	uart_irq_callback_set(uart_dev, boot_uart_fifo_callback);
    218c:	6820      	ldr	r0, [r4, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    218e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    2190:	b123      	cbz	r3, 219c <boot_console_init+0x38>
    2192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    2194:	b113      	cbz	r3, 219c <boot_console_init+0x38>
		api->irq_callback_set(dev, cb, user_data);
    2196:	462a      	mov	r2, r5
    2198:	4915      	ldr	r1, [pc, #84]	; (21f0 <boot_console_init+0x8c>)
    219a:	4798      	blx	r3

	/* Drain the fifo */
	if (uart_irq_rx_ready(uart_dev)) {
    219c:	6820      	ldr	r0, [r4, #0]
	if (api->irq_rx_ready == NULL) {
    219e:	6883      	ldr	r3, [r0, #8]
    21a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    21a2:	b10b      	cbz	r3, 21a8 <boot_console_init+0x44>
	return api->irq_rx_ready(dev);
    21a4:	4798      	blx	r3
    21a6:	b148      	cbz	r0, 21bc <boot_console_init+0x58>
		uint8_t c;

		while (uart_fifo_read(uart_dev, &c, 1)) {
    21a8:	6820      	ldr	r0, [r4, #0]
	if (api->fifo_read == NULL) {
    21aa:	6883      	ldr	r3, [r0, #8]
    21ac:	699b      	ldr	r3, [r3, #24]
    21ae:	b903      	cbnz	r3, 21b2 <boot_console_init+0x4e>
    21b0:	e7fe      	b.n	21b0 <boot_console_init+0x4c>
	return api->fifo_read(dev, rx_data, size);
    21b2:	2201      	movs	r2, #1
    21b4:	f10d 0107 	add.w	r1, sp, #7
    21b8:	4798      	blx	r3
    21ba:	e7f4      	b.n	21a6 <boot_console_init+0x42>
			;
		}
	}

	cur = 0;
    21bc:	2500      	movs	r5, #0
    21be:	4b0d      	ldr	r3, [pc, #52]	; (21f4 <boot_console_init+0x90>)

	uart_irq_rx_enable(uart_dev);
    21c0:	6820      	ldr	r0, [r4, #0]
	cur = 0;
    21c2:	801d      	strh	r5, [r3, #0]
	if (api->irq_rx_enable != NULL) {
    21c4:	6883      	ldr	r3, [r0, #8]
    21c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    21c8:	b133      	cbz	r3, 21d8 <boot_console_init+0x74>
		api->irq_rx_enable(dev);
    21ca:	4798      	blx	r3

	return 0;
    21cc:	4628      	mov	r0, r5
}
    21ce:	b003      	add	sp, #12
    21d0:	bd30      	pop	{r4, r5, pc}
		return (-1);
    21d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    21d6:	e7fa      	b.n	21ce <boot_console_init+0x6a>
	return 0;
    21d8:	4618      	mov	r0, r3
	return boot_uart_fifo_init();
    21da:	e7f8      	b.n	21ce <boot_console_init+0x6a>
    21dc:	2000e5cc 	.word	0x2000e5cc
    21e0:	2000e1ac 	.word	0x2000e1ac
    21e4:	2000e1bc 	.word	0x2000e1bc
    21e8:	2000e5d4 	.word	0x2000e5d4
    21ec:	00009480 	.word	0x00009480
    21f0:	00002019 	.word	0x00002019
    21f4:	2000e8dc 	.word	0x2000e8dc

000021f8 <boot_serial_output>:
{
    char *data;
    int len;
    uint16_t crc;
    uint16_t totlen;
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    21f8:	f640 1306 	movw	r3, #2310	; 0x906

    data = bs_obuf;
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;

    bs_hdr->nh_op++;
    bs_hdr->nh_flags = 0;
    21fc:	2000      	movs	r0, #0
{
    21fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bs_hdr->nh_op++;
    2202:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 2300 <boot_serial_output+0x108>
{
    2206:	b0d9      	sub	sp, #356	; 0x164
    bs_hdr->nh_op++;
    2208:	f8d9 1000 	ldr.w	r1, [r9]
    char pkt_start[2] = { SHELL_NLIP_PKT_START1, SHELL_NLIP_PKT_START2 };
    220c:	f8ad 3008 	strh.w	r3, [sp, #8]
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    2210:	4b37      	ldr	r3, [pc, #220]	; (22f0 <boot_serial_output+0xf8>)
    2212:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 2304 <boot_serial_output+0x10c>
    2216:	681e      	ldr	r6, [r3, #0]
    bs_hdr->nh_op++;
    2218:	780b      	ldrb	r3, [r1, #0]
    len = (uint32_t)cbor_state->payload_mut - (uint32_t)bs_obuf;
    221a:	eba6 0608 	sub.w	r6, r6, r8
    bs_hdr->nh_op++;
    221e:	3301      	adds	r3, #1
    2220:	700b      	strb	r3, [r1, #0]
    bs_hdr->nh_len = htons(len);
    2222:	ba73      	rev16	r3, r6
    2224:	804b      	strh	r3, [r1, #2]
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    2226:	888b      	ldrh	r3, [r1, #4]

#ifdef __ZEPHYR__
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    2228:	2208      	movs	r2, #8
    bs_hdr->nh_group = htons(bs_hdr->nh_group);
    222a:	ba5b      	rev16	r3, r3
    222c:	808b      	strh	r3, [r1, #4]
    bs_hdr->nh_flags = 0;
    222e:	7048      	strb	r0, [r1, #1]
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    2230:	f005 fe04 	bl	7e3c <crc16_itu_t>
    crc =  crc16_itu_t(crc, data, len);
    2234:	4632      	mov	r2, r6
    2236:	4641      	mov	r1, r8
    crc =  crc16_itu_t(CRC16_INITIAL_CRC, (uint8_t *)bs_hdr, sizeof(*bs_hdr));
    2238:	f8ad 000c 	strh.w	r0, [sp, #12]
    crc =  crc16_itu_t(crc, data, len);
    223c:	f005 fdfe 	bl	7e3c <crc16_itu_t>

    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    totlen = htons(totlen);

    memcpy(buf, &totlen, sizeof(totlen));
    totlen = sizeof(totlen);
    2240:	2702      	movs	r7, #2
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2242:	4d2c      	ldr	r5, [pc, #176]	; (22f4 <boot_serial_output+0xfc>)
    crc = htons(crc);
    2244:	ba40      	rev16	r0, r0
    boot_uf->write(pkt_start, sizeof(pkt_start));
    2246:	682b      	ldr	r3, [r5, #0]
    2248:	b2b4      	uxth	r4, r6
    crc = htons(crc);
    224a:	f8ad 000c 	strh.w	r0, [sp, #12]
    boot_uf->write(pkt_start, sizeof(pkt_start));
    224e:	2102      	movs	r1, #2
    2250:	a802      	add	r0, sp, #8
    2252:	685b      	ldr	r3, [r3, #4]
    2254:	4798      	blx	r3
    totlen = len + sizeof(*bs_hdr) + sizeof(crc);
    2256:	f104 030a 	add.w	r3, r4, #10
    totlen = htons(totlen);
    225a:	ba5b      	rev16	r3, r3
    memcpy(buf, &totlen, sizeof(totlen));
    225c:	f10d 010e 	add.w	r1, sp, #14
    2260:	2202      	movs	r2, #2
    2262:	a805      	add	r0, sp, #20
    totlen = htons(totlen);
    2264:	f8ad 300e 	strh.w	r3, [sp, #14]
    memcpy(buf, &totlen, sizeof(totlen));
    2268:	f006 fa74 	bl	8754 <memcpy>
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    226c:	f8d9 1000 	ldr.w	r1, [r9]
    2270:	2208      	movs	r2, #8
    2272:	f10d 0016 	add.w	r0, sp, #22
    totlen = sizeof(totlen);
    2276:	f8ad 700e 	strh.w	r7, [sp, #14]
    memcpy(&buf[totlen], bs_hdr, sizeof(*bs_hdr));
    227a:	f006 fa6b 	bl	8754 <memcpy>
    totlen += sizeof(*bs_hdr);
    227e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    memcpy(&buf[totlen], data, len);
    2282:	ab05      	add	r3, sp, #20
    totlen += sizeof(*bs_hdr);
    2284:	3008      	adds	r0, #8
    2286:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], data, len);
    2288:	4632      	mov	r2, r6
    228a:	4641      	mov	r1, r8
    totlen += sizeof(*bs_hdr);
    228c:	f8ad 000e 	strh.w	r0, [sp, #14]
    memcpy(&buf[totlen], data, len);
    2290:	4418      	add	r0, r3
    2292:	f006 fa5f 	bl	8754 <memcpy>
    totlen += len;
    2296:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    229a:	ab05      	add	r3, sp, #20
    totlen += len;
    229c:	4420      	add	r0, r4
    229e:	b280      	uxth	r0, r0
    memcpy(&buf[totlen], &crc, sizeof(crc));
    22a0:	463a      	mov	r2, r7
    totlen += len;
    22a2:	f8ad 000e 	strh.w	r0, [sp, #14]
    memcpy(&buf[totlen], &crc, sizeof(crc));
    22a6:	a903      	add	r1, sp, #12
    22a8:	4418      	add	r0, r3
    22aa:	f006 fa53 	bl	8754 <memcpy>
    totlen += sizeof(crc);
    22ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
#ifdef __ZEPHYR__
    size_t enc_len;
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    22b2:	aa04      	add	r2, sp, #16
    totlen += sizeof(crc);
    22b4:	443b      	add	r3, r7
    22b6:	b29b      	uxth	r3, r3
    22b8:	f8ad 300e 	strh.w	r3, [sp, #14]
    base64_encode(encoded_buf, sizeof(encoded_buf), &enc_len, buf, totlen);
    22bc:	9300      	str	r3, [sp, #0]
    22be:	21bd      	movs	r1, #189	; 0xbd
    22c0:	ab05      	add	r3, sp, #20
    22c2:	a828      	add	r0, sp, #160	; 0xa0
    22c4:	f7ff f916 	bl	14f4 <base64_encode>
    totlen = enc_len;
    22c8:	9904      	ldr	r1, [sp, #16]
    base64_encode((unsigned char *)encoded_buf, sizeof(encoded_buf), &enc_len, (unsigned char *)buf, totlen);
    totlen = enc_len;
#else
    totlen = base64_encode(buf, totlen, encoded_buf, 1);
#endif
    boot_uf->write(encoded_buf, totlen);
    22ca:	682b      	ldr	r3, [r5, #0]
    totlen = enc_len;
    22cc:	f8ad 100e 	strh.w	r1, [sp, #14]
    boot_uf->write(encoded_buf, totlen);
    22d0:	a828      	add	r0, sp, #160	; 0xa0
    22d2:	685b      	ldr	r3, [r3, #4]
    22d4:	b289      	uxth	r1, r1
    22d6:	4798      	blx	r3
    boot_uf->write("\n", 1);
    22d8:	682b      	ldr	r3, [r5, #0]
    22da:	2101      	movs	r1, #1
    22dc:	685b      	ldr	r3, [r3, #4]
    22de:	4806      	ldr	r0, [pc, #24]	; (22f8 <boot_serial_output+0x100>)
    22e0:	4798      	blx	r3
    BOOT_LOG_INF("TX");
    22e2:	2149      	movs	r1, #73	; 0x49
    22e4:	4805      	ldr	r0, [pc, #20]	; (22fc <boot_serial_output+0x104>)
    22e6:	f005 fecc 	bl	8082 <z_log_minimal_printk>
}
    22ea:	b059      	add	sp, #356	; 0x164
    22ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    22f0:	2000e5e0 	.word	0x2000e5e0
    22f4:	2000e5d8 	.word	0x2000e5d8
    22f8:	00009b9d 	.word	0x00009b9d
    22fc:	0000a1b9 	.word	0x0000a1b9
    2300:	2000e5dc 	.word	0x2000e5dc
    2304:	2000e9e0 	.word	0x2000e9e0

00002308 <erase_range>:
{
    2308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    230a:	4606      	mov	r6, r0
    if (end >= flash_area_get_size(fap)) {
    230c:	68b3      	ldr	r3, [r6, #8]
{
    230e:	460c      	mov	r4, r1
    if (end >= flash_area_get_size(fap)) {
    2310:	429a      	cmp	r2, r3
{
    2312:	4610      	mov	r0, r2
    if (end >= flash_area_get_size(fap)) {
    2314:	d21a      	bcs.n	234c <erase_range+0x44>
    if (end < start) {
    2316:	4291      	cmp	r1, r2
    2318:	dc1c      	bgt.n	2354 <erase_range+0x4c>
    if (flash_area_sector_from_off(end, &sect)) {
    231a:	4669      	mov	r1, sp
    231c:	f7fe f97e 	bl	61c <flash_area_sector_from_off>
    2320:	b9a0      	cbnz	r0, 234c <erase_range+0x44>
    size = flash_sector_get_off(&sect) + flash_sector_get_size(&sect) - start;
    2322:	e9dd 5300 	ldrd	r5, r3, [sp]
    2326:	441d      	add	r5, r3
    BOOT_LOG_INF("Erasing range 0x%x:0x%x", start, start + size - 1);
    2328:	4622      	mov	r2, r4
    232a:	2149      	movs	r1, #73	; 0x49
    232c:	480b      	ldr	r0, [pc, #44]	; (235c <erase_range+0x54>)
    232e:	1e6b      	subs	r3, r5, #1
    size = flash_sector_get_off(&sect) + flash_sector_get_size(&sect) - start;
    2330:	1b2f      	subs	r7, r5, r4
    BOOT_LOG_INF("Erasing range 0x%x:0x%x", start, start + size - 1);
    2332:	f005 fea6 	bl	8082 <z_log_minimal_printk>
    rc = flash_area_erase(fap, start, size);
    2336:	463a      	mov	r2, r7
    2338:	4621      	mov	r1, r4
    233a:	4630      	mov	r0, r6
    233c:	f005 fed9 	bl	80f2 <flash_area_erase>
    if (rc != 0) {
    2340:	4602      	mov	r2, r0
    2342:	b130      	cbz	r0, 2352 <erase_range+0x4a>
        BOOT_LOG_ERR("Error %d while erasing range", rc);
    2344:	2145      	movs	r1, #69	; 0x45
    2346:	4806      	ldr	r0, [pc, #24]	; (2360 <erase_range+0x58>)
    2348:	f005 fe9b 	bl	8082 <z_log_minimal_printk>
        return -EINVAL;
    234c:	f06f 0415 	mvn.w	r4, #21
    2350:	e000      	b.n	2354 <erase_range+0x4c>
    return start + size;
    2352:	462c      	mov	r4, r5
}
    2354:	4620      	mov	r0, r4
    2356:	b003      	add	sp, #12
    2358:	bdf0      	pop	{r4, r5, r6, r7, pc}
    235a:	bf00      	nop
    235c:	0000a1c1 	.word	0x0000a1c1
    2360:	0000a1de 	.word	0x0000a1de

00002364 <boot_serial_in_dec.constprop.0>:

/*
 * Returns 1 if full packet has been received.
 */
static int
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    2364:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t crc;
    uint16_t len;

#ifdef __ZEPHYR__
    int err;
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    2366:	680c      	ldr	r4, [r1, #0]
    2368:	4f16      	ldr	r7, [pc, #88]	; (23c4 <boot_serial_in_dec.constprop.0+0x60>)
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    236a:	b085      	sub	sp, #20
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    236c:	3802      	subs	r0, #2
boot_serial_in_dec(char *in, int inlen, char *out, int *out_off, int maxout)
    236e:	460d      	mov	r5, r1
    err = base64_decode( &out[*out_off], maxout - *out_off, &rc, in, inlen - 2);
    2370:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    2374:	9000      	str	r0, [sp, #0]
    2376:	4b14      	ldr	r3, [pc, #80]	; (23c8 <boot_serial_in_dec.constprop.0+0x64>)
    2378:	1938      	adds	r0, r7, r4
    237a:	aa03      	add	r2, sp, #12
    237c:	3101      	adds	r1, #1
    237e:	f7ff f939 	bl	15f4 <base64_decode>
    if (err) {
    2382:	4604      	mov	r4, r0
    2384:	b9d8      	cbnz	r0, 23be <boot_serial_in_dec.constprop.0+0x5a>
    if (rc < 0) {
        return -1;
    }
#endif

    *out_off += rc;
    2386:	682b      	ldr	r3, [r5, #0]
    2388:	9a03      	ldr	r2, [sp, #12]
    238a:	4413      	add	r3, r2
    if (*out_off <= sizeof(uint16_t)) {
    238c:	2b02      	cmp	r3, #2
    *out_off += rc;
    238e:	602b      	str	r3, [r5, #0]
    if (*out_off <= sizeof(uint16_t)) {
    2390:	d912      	bls.n	23b8 <boot_serial_in_dec.constprop.0+0x54>
        return 0;
    }

    len = ntohs(*(uint16_t *)out);
    2392:	883e      	ldrh	r6, [r7, #0]
    if (len != *out_off - sizeof(uint16_t)) {
    2394:	3b02      	subs	r3, #2
    2396:	ba76      	rev16	r6, r6
    2398:	b2b6      	uxth	r6, r6
    239a:	429e      	cmp	r6, r3
    239c:	d10c      	bne.n	23b8 <boot_serial_in_dec.constprop.0+0x54>
        len = *out_off - sizeof(uint16_t);
    }

    out += sizeof(uint16_t);
#ifdef __ZEPHYR__
    crc = crc16_itu_t(CRC16_INITIAL_CRC, out, len);
    239e:	4632      	mov	r2, r6
    23a0:	1cb9      	adds	r1, r7, #2
    23a2:	f005 fd4b 	bl	7e3c <crc16_itu_t>
#elif __ESPRESSIF__
    crc = ~crc16_be(~CRC16_INITIAL_CRC, (uint8_t *)out, len);
#else
    crc = crc16_ccitt(CRC16_INITIAL_CRC, out, len);
#endif
    if (crc || len <= sizeof(crc)) {
    23a6:	b938      	cbnz	r0, 23b8 <boot_serial_in_dec.constprop.0+0x54>
    23a8:	2e02      	cmp	r6, #2
    23aa:	d905      	bls.n	23b8 <boot_serial_in_dec.constprop.0+0x54>
        return 0;
    }
    *out_off -= sizeof(crc);
    23ac:	682b      	ldr	r3, [r5, #0]
    23ae:	3b02      	subs	r3, #2
    out[*out_off] = '\0';
    23b0:	441f      	add	r7, r3
    *out_off -= sizeof(crc);
    23b2:	602b      	str	r3, [r5, #0]
    out[*out_off] = '\0';
    23b4:	70bc      	strb	r4, [r7, #2]

    return 1;
    23b6:	2401      	movs	r4, #1
}
    23b8:	4620      	mov	r0, r4
    23ba:	b005      	add	sp, #20
    23bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
    23be:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    23c2:	e7f9      	b.n	23b8 <boot_serial_in_dec.constprop.0+0x54>
    23c4:	2000ea60 	.word	0x2000ea60
    23c8:	2000ec63 	.word	0x2000ec63

000023cc <zcbor_tstr_encode_ptr.constprop.0.isra.0>:
 */
static inline bool zcbor_bstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
{
	return zcbor_bstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
}
static inline bool zcbor_tstr_encode_ptr(zcbor_state_t *state, uint8_t *ptr, size_t len)
    23cc:	b507      	push	{r0, r1, r2, lr}
{
	return zcbor_tstr_encode(state, &(struct zcbor_string){.value = ptr, .len = len});
    23ce:	e9cd 0100 	strd	r0, r1, [sp]
    23d2:	4669      	mov	r1, sp
    23d4:	4802      	ldr	r0, [pc, #8]	; (23e0 <zcbor_tstr_encode_ptr.constprop.0.isra.0+0x14>)
    23d6:	f006 f8bf 	bl	8558 <zcbor_tstr_encode>
}
    23da:	b003      	add	sp, #12
    23dc:	f85d fb04 	ldr.w	pc, [sp], #4
    23e0:	2000e5e0 	.word	0x2000e5e0

000023e4 <bs_rc_rsp>:
{
    23e4:	b538      	push	{r3, r4, r5, lr}
    23e6:	4605      	mov	r5, r0
    zcbor_map_start_encode(cbor_state, 10);
    23e8:	4c0a      	ldr	r4, [pc, #40]	; (2414 <bs_rc_rsp+0x30>)
    23ea:	210a      	movs	r1, #10
    23ec:	4620      	mov	r0, r4
    23ee:	f006 f8c5 	bl	857c <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    23f2:	2102      	movs	r1, #2
    23f4:	4808      	ldr	r0, [pc, #32]	; (2418 <bs_rc_rsp+0x34>)
    23f6:	f7ff ffe9 	bl	23cc <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_uint32_put(cbor_state, rc_code);
    23fa:	4629      	mov	r1, r5
    23fc:	4620      	mov	r0, r4
    23fe:	f006 f8a7 	bl	8550 <zcbor_uint32_put>
    zcbor_map_end_encode(cbor_state, 10);
    2402:	4620      	mov	r0, r4
    2404:	210a      	movs	r1, #10
    2406:	f006 f8d7 	bl	85b8 <zcbor_map_end_encode>
}
    240a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    boot_serial_output();
    240e:	f7ff bef3 	b.w	21f8 <boot_serial_output>
    2412:	bf00      	nop
    2414:	2000e5e0 	.word	0x2000e5e0
    2418:	0000a200 	.word	0x0000a200

0000241c <reset_cbor_state>:
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    241c:	2300      	movs	r3, #0
{
    241e:	b507      	push	{r0, r1, r2, lr}
        (size_t)bs_obuf + sizeof(bs_obuf), 0);
    2420:	4a05      	ldr	r2, [pc, #20]	; (2438 <reset_cbor_state+0x1c>)
    zcbor_new_encode_state(cbor_state, 2, (uint8_t *)bs_obuf,
    2422:	9300      	str	r3, [sp, #0]
    2424:	2102      	movs	r1, #2
    2426:	f102 0380 	add.w	r3, r2, #128	; 0x80
    242a:	4804      	ldr	r0, [pc, #16]	; (243c <reset_cbor_state+0x20>)
    242c:	f006 f8d3 	bl	85d6 <zcbor_new_encode_state>
}
    2430:	b003      	add	sp, #12
    2432:	f85d fb04 	ldr.w	pc, [sp], #4
    2436:	bf00      	nop
    2438:	2000e9e0 	.word	0x2000e9e0
    243c:	2000e5e0 	.word	0x2000e5e0

00002440 <boot_serial_input>:
{
    2440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (len < sizeof(*hdr) ||
    2444:	2907      	cmp	r1, #7
{
    2446:	4604      	mov	r4, r0
    2448:	b0a3      	sub	sp, #140	; 0x8c
    if (len < sizeof(*hdr) ||
    244a:	f240 8083 	bls.w	2554 <boot_serial_input+0x114>
    244e:	7803      	ldrb	r3, [r0, #0]
    2450:	f013 06fd 	ands.w	r6, r3, #253	; 0xfd
    2454:	d17e      	bne.n	2554 <boot_serial_input+0x114>
      (ntohs(hdr->nh_len) < len - sizeof(*hdr))) {
    2456:	8843      	ldrh	r3, [r0, #2]
    2458:	f1a1 0508 	sub.w	r5, r1, #8
    245c:	ba5b      	rev16	r3, r3
    245e:	b29b      	uxth	r3, r3
      (hdr->nh_op != NMGR_OP_READ && hdr->nh_op != NMGR_OP_WRITE) ||
    2460:	42ab      	cmp	r3, r5
    2462:	d377      	bcc.n	2554 <boot_serial_input+0x114>
    bs_hdr = hdr;
    2464:	4ba8      	ldr	r3, [pc, #672]	; (2708 <FIH_LABEL_FIH_CALL_END_1008+0x18e>)
    2466:	6018      	str	r0, [r3, #0]
    hdr->nh_group = ntohs(hdr->nh_group);
    2468:	8883      	ldrh	r3, [r0, #4]
    246a:	ba5b      	rev16	r3, r3
    246c:	8083      	strh	r3, [r0, #4]
    reset_cbor_state();
    246e:	f7ff ffd5 	bl	241c <reset_cbor_state>
    if (hdr->nh_group == MGMT_GROUP_ID_IMAGE) {
    2472:	88a0      	ldrh	r0, [r4, #4]
    2474:	2801      	cmp	r0, #1
    2476:	f040 818a 	bne.w	278e <FIH_LABEL_FIH_CALL_END_1008+0x214>
        switch (hdr->nh_id) {
    247a:	79e7      	ldrb	r7, [r4, #7]
    247c:	b13f      	cbz	r7, 248e <boot_serial_input+0x4e>
    247e:	2f01      	cmp	r7, #1
    2480:	d07c      	beq.n	257c <FIH_LABEL_FIH_CALL_END_1008+0x2>
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    2482:	2008      	movs	r0, #8
}
    2484:	b023      	add	sp, #140	; 0x8c
    2486:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        bs_rc_rsp(MGMT_ERR_ENOTSUP);
    248a:	f7ff bfab 	b.w	23e4 <bs_rc_rsp>
    zcbor_map_start_encode(cbor_state, 1);
    248e:	4601      	mov	r1, r0
    2490:	489e      	ldr	r0, [pc, #632]	; (270c <FIH_LABEL_FIH_CALL_END_1008+0x192>)
    2492:	f006 f873 	bl	857c <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "images");
    2496:	2106      	movs	r1, #6
    2498:	489d      	ldr	r0, [pc, #628]	; (2710 <FIH_LABEL_FIH_CALL_END_1008+0x196>)
    249a:	f7ff ff97 	bl	23cc <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_list_start_encode(cbor_state, 5);
    249e:	2105      	movs	r1, #5
    24a0:	489a      	ldr	r0, [pc, #616]	; (270c <FIH_LABEL_FIH_CALL_END_1008+0x192>)
    24a2:	f006 f85c 	bl	855e <zcbor_list_start_encode>
        for (slot = 0; slot < 2; slot++) {
    24a6:	463c      	mov	r4, r7
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    24a8:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 274c <FIH_LABEL_FIH_CALL_END_1008+0x1d2>
            if (hdr.ih_magic == IMAGE_MAGIC)
    24ac:	4f99      	ldr	r7, [pc, #612]	; (2714 <FIH_LABEL_FIH_CALL_END_1008+0x19a>)
            zcbor_map_start_encode(cbor_state, 20);
    24ae:	4e97      	ldr	r6, [pc, #604]	; (270c <FIH_LABEL_FIH_CALL_END_1008+0x192>)
            area_id = flash_area_id_from_multi_image_slot(image_index, slot);
    24b0:	4621      	mov	r1, r4
    24b2:	2000      	movs	r0, #0
    24b4:	f005 f948 	bl	7748 <flash_area_id_from_multi_image_slot>
            if (flash_area_open(area_id, &fap)) {
    24b8:	a909      	add	r1, sp, #36	; 0x24
    24ba:	b2c0      	uxtb	r0, r0
    24bc:	f7ff fc92 	bl	1de4 <flash_area_open>
    24c0:	4605      	mov	r5, r0
    24c2:	2800      	cmp	r0, #0
    24c4:	d13b      	bne.n	253e <boot_serial_input+0xfe>
                flash_area_read(fap, 0, &hdr, sizeof(hdr));
    24c6:	2320      	movs	r3, #32
    24c8:	4601      	mov	r1, r0
    24ca:	aa0a      	add	r2, sp, #40	; 0x28
    24cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    24ce:	f005 fde6 	bl	809e <flash_area_read>
            if (hdr.ih_magic == IMAGE_MAGIC)
    24d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    24d4:	42bb      	cmp	r3, r7
    24d6:	d042      	beq.n	255e <FIH_LABEL_FIH_CALL_START_978>
            fih_int fih_rc = FIH_FAILURE;
    24d8:	4b8f      	ldr	r3, [pc, #572]	; (2718 <FIH_LABEL_FIH_CALL_END_1008+0x19e>)
    24da:	681d      	ldr	r5, [r3, #0]
            flash_area_close(fap);
    24dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    24de:	f005 fddd 	bl	809c <flash_area_close>
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
    24e2:	f8d8 3000 	ldr.w	r3, [r8]
    24e6:	42ab      	cmp	r3, r5
    24e8:	d129      	bne.n	253e <boot_serial_input+0xfe>
            zcbor_map_start_encode(cbor_state, 20);
    24ea:	2114      	movs	r1, #20
    24ec:	4630      	mov	r0, r6
    24ee:	f006 f845 	bl	857c <zcbor_map_start_encode>
            zcbor_tstr_put_lit_cast(cbor_state, "slot");
    24f2:	2104      	movs	r1, #4
    24f4:	4889      	ldr	r0, [pc, #548]	; (271c <FIH_LABEL_FIH_CALL_END_1008+0x1a2>)
    24f6:	f7ff ff69 	bl	23cc <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_uint32_put(cbor_state, slot);
    24fa:	4621      	mov	r1, r4
    24fc:	4630      	mov	r0, r6
    24fe:	f006 f827 	bl	8550 <zcbor_uint32_put>
            zcbor_tstr_put_lit_cast(cbor_state, "version");
    2502:	2107      	movs	r1, #7
    2504:	4886      	ldr	r0, [pc, #536]	; (2720 <FIH_LABEL_FIH_CALL_END_1008+0x1a6>)
    2506:	f7ff ff61 	bl	23cc <zcbor_tstr_encode_ptr.constprop.0.isra.0>
   snprintf(dst, maxlen, "%hu.%hu.%hu.%u", (uint16_t)ver->iv_major,
    250a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    250c:	2140      	movs	r1, #64	; 0x40
    250e:	9302      	str	r3, [sp, #8]
    2510:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    2514:	4a83      	ldr	r2, [pc, #524]	; (2724 <FIH_LABEL_FIH_CALL_END_1008+0x1aa>)
    2516:	9301      	str	r3, [sp, #4]
    2518:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
    251c:	a812      	add	r0, sp, #72	; 0x48
    251e:	9300      	str	r3, [sp, #0]
    2520:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    2524:	f000 ff06 	bl	3334 <snprintf>
            zcbor_tstr_encode_ptr(cbor_state, tmpbuf, strlen((char *)tmpbuf));
    2528:	a812      	add	r0, sp, #72	; 0x48
    252a:	f006 f8e3 	bl	86f4 <strlen>
    252e:	4601      	mov	r1, r0
    2530:	a812      	add	r0, sp, #72	; 0x48
    2532:	f7ff ff4b 	bl	23cc <zcbor_tstr_encode_ptr.constprop.0.isra.0>
            zcbor_map_end_encode(cbor_state, 20);
    2536:	2114      	movs	r1, #20
    2538:	4630      	mov	r0, r6
    253a:	f006 f83d 	bl	85b8 <zcbor_map_end_encode>
        for (slot = 0; slot < 2; slot++) {
    253e:	b164      	cbz	r4, 255a <boot_serial_input+0x11a>
    zcbor_list_end_encode(cbor_state, 5);
    2540:	2105      	movs	r1, #5
    2542:	4872      	ldr	r0, [pc, #456]	; (270c <FIH_LABEL_FIH_CALL_END_1008+0x192>)
    2544:	f006 f829 	bl	859a <zcbor_list_end_encode>
    zcbor_map_end_encode(cbor_state, 1);
    2548:	4621      	mov	r1, r4
    254a:	4870      	ldr	r0, [pc, #448]	; (270c <FIH_LABEL_FIH_CALL_END_1008+0x192>)
    254c:	f006 f834 	bl	85b8 <zcbor_map_end_encode>
    boot_serial_output();
    2550:	f7ff fe52 	bl	21f8 <boot_serial_output>
}
    2554:	b023      	add	sp, #140	; 0x8c
    2556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    255a:	2401      	movs	r4, #1
    255c:	e7a8      	b.n	24b0 <boot_serial_input+0x70>

0000255e <FIH_LABEL_FIH_CALL_START_978>:
                    FIH_CALL(bootutil_img_validate, fih_rc, NULL, 0, &hdr, fap, tmpbuf, sizeof(tmpbuf),
    255e:	2340      	movs	r3, #64	; 0x40
    2560:	9301      	str	r3, [sp, #4]
    2562:	ab12      	add	r3, sp, #72	; 0x48
    2564:	4629      	mov	r1, r5
    2566:	e9cd 5503 	strd	r5, r5, [sp, #12]
    256a:	9502      	str	r5, [sp, #8]
    256c:	9300      	str	r3, [sp, #0]
    256e:	4628      	mov	r0, r5
    2570:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2572:	aa0a      	add	r2, sp, #40	; 0x28
    2574:	f7fe f862 	bl	63c <bootutil_img_validate>
    2578:	4605      	mov	r5, r0

0000257a <FIH_LABEL_FIH_CALL_END_1008>:
    257a:	e7af      	b.n	24dc <boot_serial_input+0x9c>
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    257c:	4629      	mov	r1, r5
    257e:	ab09      	add	r3, sp, #36	; 0x24
    2580:	aa12      	add	r2, sp, #72	; 0x48
    2582:	f104 0008 	add.w	r0, r4, #8
    const struct flash_area *fap = NULL;
    2586:	9608      	str	r6, [sp, #32]
    uint_fast8_t result = cbor_decode_Upload((const uint8_t *)buf, len, &upload, &decoded_len);
    2588:	f000 f9fa 	bl	2980 <cbor_decode_Upload>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    258c:	b328      	cbz	r0, 25da <FIH_LABEL_FIH_CALL_END_1008+0x60>
        rc = MGMT_ERR_EINVAL;
    258e:	2403      	movs	r4, #3
    BOOT_LOG_INF("RX: 0x%x", rc);
    2590:	4622      	mov	r2, r4
    2592:	2149      	movs	r1, #73	; 0x49
    2594:	4864      	ldr	r0, [pc, #400]	; (2728 <FIH_LABEL_FIH_CALL_END_1008+0x1ae>)
    2596:	f005 fd74 	bl	8082 <z_log_minimal_printk>
    zcbor_map_start_encode(cbor_state, 10);
    259a:	210a      	movs	r1, #10
    259c:	485b      	ldr	r0, [pc, #364]	; (270c <FIH_LABEL_FIH_CALL_END_1008+0x192>)
    259e:	f005 ffed 	bl	857c <zcbor_map_start_encode>
    zcbor_tstr_put_lit_cast(cbor_state, "rc");
    25a2:	2102      	movs	r1, #2
    25a4:	4861      	ldr	r0, [pc, #388]	; (272c <FIH_LABEL_FIH_CALL_END_1008+0x1b2>)
    25a6:	f7ff ff11 	bl	23cc <zcbor_tstr_encode_ptr.constprop.0.isra.0>
    zcbor_uint32_put(cbor_state, rc);
    25aa:	4621      	mov	r1, r4
    25ac:	4857      	ldr	r0, [pc, #348]	; (270c <FIH_LABEL_FIH_CALL_END_1008+0x192>)
    25ae:	f005 ffcf 	bl	8550 <zcbor_uint32_put>
    if (rc == 0) {
    25b2:	b944      	cbnz	r4, 25c6 <FIH_LABEL_FIH_CALL_END_1008+0x4c>
        zcbor_tstr_put_lit_cast(cbor_state, "off");
    25b4:	2103      	movs	r1, #3
    25b6:	485e      	ldr	r0, [pc, #376]	; (2730 <FIH_LABEL_FIH_CALL_END_1008+0x1b6>)
    25b8:	f7ff ff08 	bl	23cc <zcbor_tstr_encode_ptr.constprop.0.isra.0>
        zcbor_uint32_put(cbor_state, curr_off);
    25bc:	4b5d      	ldr	r3, [pc, #372]	; (2734 <FIH_LABEL_FIH_CALL_END_1008+0x1ba>)
    25be:	4853      	ldr	r0, [pc, #332]	; (270c <FIH_LABEL_FIH_CALL_END_1008+0x192>)
    25c0:	6819      	ldr	r1, [r3, #0]
    25c2:	f005 ffc5 	bl	8550 <zcbor_uint32_put>
    zcbor_map_end_encode(cbor_state, 10);
    25c6:	210a      	movs	r1, #10
    25c8:	4850      	ldr	r0, [pc, #320]	; (270c <FIH_LABEL_FIH_CALL_END_1008+0x192>)
    25ca:	f005 fff5 	bl	85b8 <zcbor_map_end_encode>
    boot_serial_output();
    25ce:	f7ff fe13 	bl	21f8 <boot_serial_output>
    flash_area_close(fap);
    25d2:	9808      	ldr	r0, [sp, #32]
    25d4:	f005 fd62 	bl	809c <flash_area_close>
}
    25d8:	e7bc      	b.n	2554 <boot_serial_input+0x114>
    if ((result != ZCBOR_SUCCESS) || (len != decoded_len)) {
    25da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25dc:	429d      	cmp	r5, r3
    25de:	d1d6      	bne.n	258e <FIH_LABEL_FIH_CALL_END_1008+0x14>
    size_t img_size_tmp = SIZE_MAX;     /* Temp variable for image size */
    25e0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    for (int i = 0; i < upload._Upload_members_count; i++) {
    25e4:	4602      	mov	r2, r0
    size_t img_chunk_off = SIZE_MAX;    /* Offset of image chunk within image  */
    25e6:	464e      	mov	r6, r9
    size_t img_chunk_len = 0;           /* Length of received image chunk */
    25e8:	4605      	mov	r5, r0
    const uint8_t *img_chunk = NULL;    /* Pointer to buffer with received image chunk */
    25ea:	4607      	mov	r7, r0
    25ec:	9c21      	ldr	r4, [sp, #132]	; 0x84
    25ee:	ab12      	add	r3, sp, #72	; 0x48
    for (int i = 0; i < upload._Upload_members_count; i++) {
    25f0:	4294      	cmp	r4, r2
    25f2:	d121      	bne.n	2638 <FIH_LABEL_FIH_CALL_END_1008+0xbe>
    if (img_chunk_off == SIZE_MAX || img_chunk == NULL) {
    25f4:	1c73      	adds	r3, r6, #1
    25f6:	d0ca      	beq.n	258e <FIH_LABEL_FIH_CALL_END_1008+0x14>
    25f8:	2f00      	cmp	r7, #0
    25fa:	d0c8      	beq.n	258e <FIH_LABEL_FIH_CALL_END_1008+0x14>
    rc = flash_area_open(flash_area_id_from_multi_image_slot(img_num, 0), &fap);
    25fc:	2100      	movs	r1, #0
    25fe:	f005 f8a3 	bl	7748 <flash_area_id_from_multi_image_slot>
    2602:	a908      	add	r1, sp, #32
    2604:	b2c0      	uxtb	r0, r0
    2606:	f7ff fbed 	bl	1de4 <flash_area_open>
    if (rc) {
    260a:	4604      	mov	r4, r0
    260c:	2800      	cmp	r0, #0
    260e:	d1be      	bne.n	258e <FIH_LABEL_FIH_CALL_END_1008+0x14>
    if (img_chunk_off == 0) {
    2610:	f8df 8120 	ldr.w	r8, [pc, #288]	; 2734 <FIH_LABEL_FIH_CALL_END_1008+0x1ba>
    2614:	2e00      	cmp	r6, #0
    2616:	d16c      	bne.n	26f2 <FIH_LABEL_FIH_CALL_END_1008+0x178>
        const size_t area_size = flash_area_get_size(fap);
    2618:	9808      	ldr	r0, [sp, #32]
        curr_off = 0;
    261a:	f8c8 4000 	str.w	r4, [r8]
	return (uint32_t)fa->fa_size;
    261e:	6886      	ldr	r6, [r0, #8]
        if (flash_area_sector_from_off(boot_status_off(fap), &status_sector)) {
    2620:	f005 f975 	bl	790e <boot_status_off>
    2624:	4944      	ldr	r1, [pc, #272]	; (2738 <FIH_LABEL_FIH_CALL_END_1008+0x1be>)
    2626:	f7fd fff9 	bl	61c <flash_area_sector_from_off>
    262a:	b1c0      	cbz	r0, 265e <FIH_LABEL_FIH_CALL_END_1008+0xe4>
            BOOT_LOG_ERR("Unable to determine flash sector of the image trailer");
    262c:	2145      	movs	r1, #69	; 0x45
    262e:	4843      	ldr	r0, [pc, #268]	; (273c <FIH_LABEL_FIH_CALL_END_1008+0x1c2>)
    2630:	f005 fd27 	bl	8082 <z_log_minimal_printk>
            rc = MGMT_ERR_EUNKNOWN;
    2634:	2401      	movs	r4, #1
            goto out;
    2636:	e7ab      	b.n	2590 <FIH_LABEL_FIH_CALL_END_1008+0x16>
        switch(member->_Member_choice) {
    2638:	7a19      	ldrb	r1, [r3, #8]
    263a:	2903      	cmp	r1, #3
    263c:	d804      	bhi.n	2648 <FIH_LABEL_FIH_CALL_END_1008+0xce>
    263e:	e8df f001 	tbb	[pc, r1]
    2642:	0602      	.short	0x0602
    2644:	0c09      	.short	0x0c09
                img_num = member->_Member_image;
    2646:	6818      	ldr	r0, [r3, #0]
    for (int i = 0; i < upload._Upload_members_count; i++) {
    2648:	3201      	adds	r2, #1
    264a:	330c      	adds	r3, #12
    264c:	e7d0      	b.n	25f0 <FIH_LABEL_FIH_CALL_END_1008+0x76>
                img_chunk_len = member->_Member_data.len;
    264e:	e9d3 7500 	ldrd	r7, r5, [r3]
                break;
    2652:	e7f9      	b.n	2648 <FIH_LABEL_FIH_CALL_END_1008+0xce>
                img_size_tmp = member->_Member_len;
    2654:	f8d3 9000 	ldr.w	r9, [r3]
                break;
    2658:	e7f6      	b.n	2648 <FIH_LABEL_FIH_CALL_END_1008+0xce>
                img_chunk_off = member->_Member_off;
    265a:	681e      	ldr	r6, [r3, #0]
                break;
    265c:	e7f4      	b.n	2648 <FIH_LABEL_FIH_CALL_END_1008+0xce>
        if (img_size_tmp > area_size) {
    265e:	454e      	cmp	r6, r9
    2660:	d395      	bcc.n	258e <FIH_LABEL_FIH_CALL_END_1008+0x14>
        not_yet_erased = 0;
    2662:	4b37      	ldr	r3, [pc, #220]	; (2740 <FIH_LABEL_FIH_CALL_END_1008+0x1c6>)
    2664:	601c      	str	r4, [r3, #0]
        img_size = img_size_tmp;
    2666:	4b37      	ldr	r3, [pc, #220]	; (2744 <FIH_LABEL_FIH_CALL_END_1008+0x1ca>)
    2668:	f8c3 9000 	str.w	r9, [r3]
                                 curr_off + img_chunk_len - 1);
    266c:	f8d8 2000 	ldr.w	r2, [r8]
    not_yet_erased = erase_range(fap, not_yet_erased,
    2670:	4e33      	ldr	r6, [pc, #204]	; (2740 <FIH_LABEL_FIH_CALL_END_1008+0x1c6>)
                                 curr_off + img_chunk_len - 1);
    2672:	3a01      	subs	r2, #1
    not_yet_erased = erase_range(fap, not_yet_erased,
    2674:	6831      	ldr	r1, [r6, #0]
    2676:	9808      	ldr	r0, [sp, #32]
    2678:	442a      	add	r2, r5
    267a:	f7ff fe45 	bl	2308 <erase_range>
    if (not_yet_erased < 0) {
    267e:	2800      	cmp	r0, #0
    not_yet_erased = erase_range(fap, not_yet_erased,
    2680:	6030      	str	r0, [r6, #0]
    if (not_yet_erased < 0) {
    2682:	db84      	blt.n	258e <FIH_LABEL_FIH_CALL_END_1008+0x14>
    rem_bytes = img_chunk_len % flash_area_align(fap);
    2684:	9808      	ldr	r0, [sp, #32]
    2686:	f005 fd4b 	bl	8120 <flash_area_align>
    268a:	fbb5 f3f0 	udiv	r3, r5, r0
    268e:	fb03 5010 	mls	r0, r3, r0, r5
    img_chunk_len -= rem_bytes;
    2692:	b2c1      	uxtb	r1, r0
    2694:	eba5 0901 	sub.w	r9, r5, r1
    if (curr_off + img_chunk_len + rem_bytes < img_size) {
    2698:	f8d8 2000 	ldr.w	r2, [r8]
    269c:	4d29      	ldr	r5, [pc, #164]	; (2744 <FIH_LABEL_FIH_CALL_END_1008+0x1ca>)
    269e:	eb09 0302 	add.w	r3, r9, r2
    26a2:	682e      	ldr	r6, [r5, #0]
    26a4:	4419      	add	r1, r3
    26a6:	42b1      	cmp	r1, r6
    26a8:	bf38      	it	cc
    26aa:	2000      	movcc	r0, #0
    BOOT_LOG_INF("Writing at 0x%x until 0x%x", curr_off, curr_off + img_chunk_len);
    26ac:	2149      	movs	r1, #73	; 0x49
    26ae:	b2c6      	uxtb	r6, r0
    26b0:	4825      	ldr	r0, [pc, #148]	; (2748 <FIH_LABEL_FIH_CALL_END_1008+0x1ce>)
    26b2:	f005 fce6 	bl	8082 <z_log_minimal_printk>
    rc = flash_area_write(fap, curr_off, img_chunk, img_chunk_len);
    26b6:	464b      	mov	r3, r9
    26b8:	463a      	mov	r2, r7
    26ba:	f8d8 1000 	ldr.w	r1, [r8]
    26be:	9808      	ldr	r0, [sp, #32]
    26c0:	f005 fd02 	bl	80c8 <flash_area_write>
    if (rc == 0 && rem_bytes) {
    26c4:	2800      	cmp	r0, #0
    26c6:	f47f af62 	bne.w	258e <FIH_LABEL_FIH_CALL_END_1008+0x14>
    26ca:	2e00      	cmp	r6, #0
    26cc:	d140      	bne.n	2750 <FIH_LABEL_FIH_CALL_END_1008+0x1d6>
        curr_off += img_chunk_len + rem_bytes;
    26ce:	f8d8 0000 	ldr.w	r0, [r8]
        if (curr_off == img_size) {
    26d2:	682b      	ldr	r3, [r5, #0]
        curr_off += img_chunk_len + rem_bytes;
    26d4:	4448      	add	r0, r9
    26d6:	4430      	add	r0, r6
        if (curr_off == img_size) {
    26d8:	4298      	cmp	r0, r3
        curr_off += img_chunk_len + rem_bytes;
    26da:	f8c8 0000 	str.w	r0, [r8]
        if (curr_off == img_size) {
    26de:	f47f af57 	bne.w	2590 <FIH_LABEL_FIH_CALL_END_1008+0x16>
	return fs->fs_off;
    26e2:	4b15      	ldr	r3, [pc, #84]	; (2738 <FIH_LABEL_FIH_CALL_END_1008+0x1be>)
            if (erase_range(fap, start, start) < 0) {
    26e4:	9808      	ldr	r0, [sp, #32]
    26e6:	681a      	ldr	r2, [r3, #0]
    26e8:	4611      	mov	r1, r2
    26ea:	f7ff fe0d 	bl	2308 <erase_range>
    26ee:	0fc4      	lsrs	r4, r0, #31
    26f0:	e74e      	b.n	2590 <FIH_LABEL_FIH_CALL_END_1008+0x16>
    } else if (img_chunk_off != curr_off) {
    26f2:	f8d8 3000 	ldr.w	r3, [r8]
    26f6:	42b3      	cmp	r3, r6
    26f8:	f47f af4a 	bne.w	2590 <FIH_LABEL_FIH_CALL_END_1008+0x16>
    } else if (curr_off + img_chunk_len > img_size) {
    26fc:	4a11      	ldr	r2, [pc, #68]	; (2744 <FIH_LABEL_FIH_CALL_END_1008+0x1ca>)
    26fe:	19ab      	adds	r3, r5, r6
    2700:	6812      	ldr	r2, [r2, #0]
    2702:	4293      	cmp	r3, r2
    2704:	d9b2      	bls.n	266c <FIH_LABEL_FIH_CALL_END_1008+0xf2>
    2706:	e742      	b.n	258e <FIH_LABEL_FIH_CALL_END_1008+0x14>
    2708:	2000e5dc 	.word	0x2000e5dc
    270c:	2000e5e0 	.word	0x2000e5e0
    2710:	0000a203 	.word	0x0000a203
    2714:	96f3b83d 	.word	0x96f3b83d
    2718:	2000c4e8 	.word	0x2000c4e8
    271c:	0000a20a 	.word	0x0000a20a
    2720:	0000a20f 	.word	0x0000a20f
    2724:	0000a217 	.word	0x0000a217
    2728:	0000a281 	.word	0x0000a281
    272c:	0000a200 	.word	0x0000a200
    2730:	0000a28f 	.word	0x0000a28f
    2734:	2000e610 	.word	0x2000e610
    2738:	2000e61c 	.word	0x2000e61c
    273c:	0000a226 	.word	0x0000a226
    2740:	2000e618 	.word	0x2000e618
    2744:	2000e614 	.word	0x2000e614
    2748:	0000a261 	.word	0x0000a261
    274c:	2000c828 	.word	0x2000c828
        memset(wbs_aligned, flash_area_erased_val(fap), sizeof(wbs_aligned));
    2750:	9808      	ldr	r0, [sp, #32]
    2752:	f005 fcec 	bl	812e <flash_area_erased_val>
    2756:	2208      	movs	r2, #8
    2758:	4601      	mov	r1, r0
    275a:	a80a      	add	r0, sp, #40	; 0x28
    275c:	f006 f805 	bl	876a <memset>
        memcpy(wbs_aligned, img_chunk + img_chunk_len, rem_bytes);
    2760:	4632      	mov	r2, r6
    2762:	eb07 0109 	add.w	r1, r7, r9
    2766:	a80a      	add	r0, sp, #40	; 0x28
    2768:	f005 fff4 	bl	8754 <memcpy>
        rc = flash_area_write(fap, curr_off + img_chunk_len, wbs_aligned,
    276c:	9f08      	ldr	r7, [sp, #32]
    276e:	f8d8 1000 	ldr.w	r1, [r8]
    2772:	4638      	mov	r0, r7
    2774:	4449      	add	r1, r9
    2776:	9107      	str	r1, [sp, #28]
    2778:	f005 fcd2 	bl	8120 <flash_area_align>
    277c:	9907      	ldr	r1, [sp, #28]
    277e:	4603      	mov	r3, r0
    2780:	aa0a      	add	r2, sp, #40	; 0x28
    2782:	4638      	mov	r0, r7
    2784:	f005 fca0 	bl	80c8 <flash_area_write>
    if (rc == 0) {
    2788:	2800      	cmp	r0, #0
    278a:	d0a0      	beq.n	26ce <FIH_LABEL_FIH_CALL_END_1008+0x154>
    278c:	e6ff      	b.n	258e <FIH_LABEL_FIH_CALL_END_1008+0x14>
    } else if (hdr->nh_group == MGMT_GROUP_ID_DEFAULT) {
    278e:	2800      	cmp	r0, #0
    2790:	f47f ae77 	bne.w	2482 <boot_serial_input+0x42>
        switch (hdr->nh_id) {
    2794:	79e3      	ldrb	r3, [r4, #7]
    2796:	2b01      	cmp	r3, #1
    2798:	f43f ae74 	beq.w	2484 <boot_serial_input+0x44>
    279c:	2b05      	cmp	r3, #5
    279e:	d003      	beq.n	27a8 <FIH_LABEL_FIH_CALL_END_1008+0x22e>
    27a0:	2b00      	cmp	r3, #0
    27a2:	f47f ae6e 	bne.w	2482 <boot_serial_input+0x42>
    27a6:	e6d5      	b.n	2554 <boot_serial_input+0x114>
    bs_rc_rsp(0);
    27a8:	f7ff fe1c 	bl	23e4 <bs_rc_rsp>
	return z_impl_k_sleep(timeout);
    27ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    27b0:	2100      	movs	r1, #0
    27b2:	f003 f9c7 	bl	5b44 <z_impl_k_sleep>
    sys_reboot(SYS_REBOOT_COLD);
    27b6:	2001      	movs	r0, #1
    27b8:	f7ff fae0 	bl	1d7c <sys_reboot>

000027bc <boot_serial_start>:
 * serial port.
 */
void
boot_serial_start(const struct boot_uart_funcs *f)
{
    bs_entry = true;
    27bc:	2301      	movs	r3, #1
{
    27be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    int dec_off = 0;
    27c2:	2400      	movs	r4, #0
{
    27c4:	4606      	mov	r6, r0
    bs_entry = true;
    27c6:	4f28      	ldr	r7, [pc, #160]	; (2868 <CONFIG_MAIN_STACK_SIZE+0x68>)
    27c8:	4d28      	ldr	r5, [pc, #160]	; (286c <CONFIG_MAIN_STACK_SIZE+0x6c>)
    27ca:	703b      	strb	r3, [r7, #0]
    boot_uf = f;
    27cc:	4b28      	ldr	r3, [pc, #160]	; (2870 <CONFIG_MAIN_STACK_SIZE+0x70>)
    27ce:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 2878 <CONFIG_MAIN_STACK_SIZE+0x78>
    int dec_off = 0;
    27d2:	9400      	str	r4, [sp, #0]
    boot_uf = f;
    27d4:	6018      	str	r0, [r3, #0]
        rc = f->read(in_buf + off, sizeof(in_buf) - off, &full_line);
    27d6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 287c <CONFIG_MAIN_STACK_SIZE+0x7c>
    27da:	f5c4 7100 	rsb	r1, r4, #512	; 0x200
    27de:	f8c5 8600 	str.w	r8, [r5, #1536]	; 0x600
    27e2:	6833      	ldr	r3, [r6, #0]
    27e4:	f8c5 8604 	str.w	r8, [r5, #1540]	; 0x604
    27e8:	aa01      	add	r2, sp, #4
    27ea:	f8c5 8608 	str.w	r8, [r5, #1544]	; 0x608
    27ee:	3101      	adds	r1, #1
    27f0:	f8c5 860c 	str.w	r8, [r5, #1548]	; 0x60c
    27f4:	eb09 0004 	add.w	r0, r9, r4
    27f8:	f8c5 8610 	str.w	r8, [r5, #1552]	; 0x610
    27fc:	f8c5 8614 	str.w	r8, [r5, #1556]	; 0x614
    2800:	f8c5 8618 	str.w	r8, [r5, #1560]	; 0x618
    2804:	f8c5 861c 	str.w	r8, [r5, #1564]	; 0x61c
    2808:	4798      	blx	r3
        if (rc <= 0 && !full_line) {
    280a:	2800      	cmp	r0, #0
    280c:	9b01      	ldr	r3, [sp, #4]
    280e:	dc00      	bgt.n	2812 <CONFIG_MAIN_STACK_SIZE+0x12>
    2810:	b133      	cbz	r3, 2820 <CONFIG_MAIN_STACK_SIZE+0x20>
        off += rc;
    2812:	4404      	add	r4, r0
        if (!full_line) {
    2814:	b953      	cbnz	r3, 282c <CONFIG_MAIN_STACK_SIZE+0x2c>
            if (off == max_input) {
    2816:	f240 2301 	movw	r3, #513	; 0x201
    281a:	429c      	cmp	r4, r3
    281c:	d100      	bne.n	2820 <CONFIG_MAIN_STACK_SIZE+0x20>
        off = 0;
    281e:	2400      	movs	r4, #0
    while (timeout_in_ms > 0 || bs_entry) {
    2820:	783b      	ldrb	r3, [r7, #0]
    2822:	2b00      	cmp	r3, #0
    2824:	d1d7      	bne.n	27d6 <boot_serial_start+0x1a>
    boot_serial_read_console(f,0);
}
    2826:	b003      	add	sp, #12
    2828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (in_buf[0] == SHELL_NLIP_PKT_START1 &&
    282c:	f899 3000 	ldrb.w	r3, [r9]
    2830:	2b06      	cmp	r3, #6
    2832:	d10a      	bne.n	284a <CONFIG_MAIN_STACK_SIZE+0x4a>
    2834:	f899 3001 	ldrb.w	r3, [r9, #1]
    2838:	2b09      	cmp	r3, #9
    283a:	d10c      	bne.n	2856 <CONFIG_MAIN_STACK_SIZE+0x56>
            dec_off = 0;
    283c:	2300      	movs	r3, #0
    283e:	9300      	str	r3, [sp, #0]
            rc = boot_serial_in_dec(&in_buf[2], off - 2, dec_buf, &dec_off, max_input);
    2840:	4669      	mov	r1, sp
    2842:	1ea0      	subs	r0, r4, #2
    2844:	f7ff fd8e 	bl	2364 <boot_serial_in_dec.constprop.0>
    2848:	e005      	b.n	2856 <CONFIG_MAIN_STACK_SIZE+0x56>
        } else if (in_buf[0] == SHELL_NLIP_DATA_START1 &&
    284a:	2b04      	cmp	r3, #4
    284c:	d103      	bne.n	2856 <CONFIG_MAIN_STACK_SIZE+0x56>
    284e:	f899 3001 	ldrb.w	r3, [r9, #1]
    2852:	2b14      	cmp	r3, #20
    2854:	d0f4      	beq.n	2840 <CONFIG_MAIN_STACK_SIZE+0x40>
        if (rc == 1) {
    2856:	2801      	cmp	r0, #1
    2858:	d1e1      	bne.n	281e <CONFIG_MAIN_STACK_SIZE+0x1e>
            boot_serial_input(&dec_buf[2], dec_off - 2);
    285a:	9900      	ldr	r1, [sp, #0]
    285c:	4805      	ldr	r0, [pc, #20]	; (2874 <CONFIG_MAIN_STACK_SIZE+0x74>)
    285e:	3902      	subs	r1, #2
    2860:	f7ff fdee 	bl	2440 <boot_serial_input>
    2864:	e7db      	b.n	281e <CONFIG_MAIN_STACK_SIZE+0x1e>
    2866:	bf00      	nop
    2868:	2000e9df 	.word	0x2000e9df
    286c:	50018000 	.word	0x50018000
    2870:	2000e5d8 	.word	0x2000e5d8
    2874:	2000ea62 	.word	0x2000ea62
    2878:	6e524635 	.word	0x6e524635
    287c:	2000ec61 	.word	0x2000ec61

00002880 <decode_repeated_Upload_members>:
	return tmp_result;
}

static bool decode_repeated_Upload_members(
		zcbor_state_t *state, struct Upload_members *result)
{
    2880:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2882:	4604      	mov	r4, r0
    2884:	460e      	mov	r6, r1
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    2886:	f005 fef7 	bl	8678 <zcbor_union_start_code>
    288a:	2800      	cmp	r0, #0
    288c:	d06b      	beq.n	2966 <decode_repeated_Upload_members+0xe6>
    288e:	4b37      	ldr	r3, [pc, #220]	; (296c <decode_repeated_Upload_members+0xec>)
    2890:	4669      	mov	r1, sp
    2892:	9300      	str	r3, [sp, #0]
    2894:	2305      	movs	r3, #5
    2896:	4620      	mov	r0, r4
    2898:	9301      	str	r3, [sp, #4]
    289a:	f005 fdcc 	bl	8436 <zcbor_tstr_expect>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    289e:	b138      	cbz	r0, 28b0 <decode_repeated_Upload_members+0x30>
	&& (zcbor_int32_decode(state, (&(*result)._Member_image)))) && (((*result)._Member_choice = _Member_image) || 1))
    28a0:	4631      	mov	r1, r6
    28a2:	4620      	mov	r0, r4
    28a4:	f005 fda9 	bl	83fa <zcbor_int32_decode>
    28a8:	b110      	cbz	r0, 28b0 <decode_repeated_Upload_members+0x30>
    28aa:	2300      	movs	r3, #0
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    28ac:	7233      	strb	r3, [r6, #8]
    28ae:	e040      	b.n	2932 <decode_repeated_Upload_members+0xb2>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"data", tmp_str.len = sizeof("data") - 1, &tmp_str)))))
    28b0:	4620      	mov	r0, r4
    28b2:	f005 fee4 	bl	867e <zcbor_union_elem_code>
    28b6:	b1a8      	cbz	r0, 28e4 <decode_repeated_Upload_members+0x64>
    28b8:	4b2d      	ldr	r3, [pc, #180]	; (2970 <decode_repeated_Upload_members+0xf0>)
    28ba:	4669      	mov	r1, sp
    28bc:	9300      	str	r3, [sp, #0]
    28be:	2304      	movs	r3, #4
    28c0:	4620      	mov	r0, r4
    28c2:	9301      	str	r3, [sp, #4]
    28c4:	f005 fdb7 	bl	8436 <zcbor_tstr_expect>
    28c8:	b160      	cbz	r0, 28e4 <decode_repeated_Upload_members+0x64>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_data)))) && (((*result)._Member_choice = _Member_data) || 1)))
    28ca:	4631      	mov	r1, r6
    28cc:	4620      	mov	r0, r4
    28ce:	f005 fdaf 	bl	8430 <zcbor_bstr_decode>
    28d2:	b138      	cbz	r0, 28e4 <decode_repeated_Upload_members+0x64>
    28d4:	2501      	movs	r5, #1
    28d6:	7235      	strb	r5, [r6, #8]
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    28d8:	4620      	mov	r0, r4
    28da:	f005 fed4 	bl	8686 <zcbor_union_end_code>

	if (!tmp_result)
		zcbor_trace();

	return tmp_result;
}
    28de:	4628      	mov	r0, r5
    28e0:	b002      	add	sp, #8
    28e2:	bd70      	pop	{r4, r5, r6, pc}
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"len", tmp_str.len = sizeof("len") - 1, &tmp_str)))))
    28e4:	4620      	mov	r0, r4
    28e6:	f005 feca 	bl	867e <zcbor_union_elem_code>
    28ea:	b178      	cbz	r0, 290c <decode_repeated_Upload_members+0x8c>
    28ec:	4b21      	ldr	r3, [pc, #132]	; (2974 <decode_repeated_Upload_members+0xf4>)
    28ee:	4669      	mov	r1, sp
    28f0:	9300      	str	r3, [sp, #0]
    28f2:	2303      	movs	r3, #3
    28f4:	4620      	mov	r0, r4
    28f6:	9301      	str	r3, [sp, #4]
    28f8:	f005 fd9d 	bl	8436 <zcbor_tstr_expect>
    28fc:	b130      	cbz	r0, 290c <decode_repeated_Upload_members+0x8c>
	&& (zcbor_int32_decode(state, (&(*result)._Member_len)))) && (((*result)._Member_choice = _Member_len) || 1)))
    28fe:	4631      	mov	r1, r6
    2900:	4620      	mov	r0, r4
    2902:	f005 fd7a 	bl	83fa <zcbor_int32_decode>
    2906:	b108      	cbz	r0, 290c <decode_repeated_Upload_members+0x8c>
    2908:	2302      	movs	r3, #2
    290a:	e7cf      	b.n	28ac <decode_repeated_Upload_members+0x2c>
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"off", tmp_str.len = sizeof("off") - 1, &tmp_str)))))
    290c:	4620      	mov	r0, r4
    290e:	f005 feb6 	bl	867e <zcbor_union_elem_code>
    2912:	b180      	cbz	r0, 2936 <decode_repeated_Upload_members+0xb6>
    2914:	2503      	movs	r5, #3
    2916:	4b18      	ldr	r3, [pc, #96]	; (2978 <decode_repeated_Upload_members+0xf8>)
    2918:	4669      	mov	r1, sp
    291a:	4620      	mov	r0, r4
    291c:	9300      	str	r3, [sp, #0]
    291e:	9501      	str	r5, [sp, #4]
    2920:	f005 fd89 	bl	8436 <zcbor_tstr_expect>
    2924:	b138      	cbz	r0, 2936 <decode_repeated_Upload_members+0xb6>
	&& (zcbor_int32_decode(state, (&(*result)._Member_off)))) && (((*result)._Member_choice = _Member_off) || 1)))
    2926:	4631      	mov	r1, r6
    2928:	4620      	mov	r0, r4
    292a:	f005 fd66 	bl	83fa <zcbor_int32_decode>
    292e:	b110      	cbz	r0, 2936 <decode_repeated_Upload_members+0xb6>
    2930:	7235      	strb	r5, [r6, #8]
	|| (zcbor_union_elem_code(state) && ((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"sha", tmp_str.len = sizeof("sha") - 1, &tmp_str)))))
    2932:	2501      	movs	r5, #1
    2934:	e7d0      	b.n	28d8 <decode_repeated_Upload_members+0x58>
    2936:	4620      	mov	r0, r4
    2938:	f005 fea1 	bl	867e <zcbor_union_elem_code>
    293c:	b908      	cbnz	r0, 2942 <decode_repeated_Upload_members+0xc2>
    293e:	2500      	movs	r5, #0
    2940:	e7ca      	b.n	28d8 <decode_repeated_Upload_members+0x58>
    2942:	4b0e      	ldr	r3, [pc, #56]	; (297c <decode_repeated_Upload_members+0xfc>)
    2944:	4669      	mov	r1, sp
    2946:	9300      	str	r3, [sp, #0]
    2948:	2303      	movs	r3, #3
    294a:	4620      	mov	r0, r4
    294c:	9301      	str	r3, [sp, #4]
    294e:	f005 fd72 	bl	8436 <zcbor_tstr_expect>
    2952:	2800      	cmp	r0, #0
    2954:	d0f3      	beq.n	293e <decode_repeated_Upload_members+0xbe>
	&& (zcbor_bstr_decode(state, (&(*result)._Member_sha)))) && (((*result)._Member_choice = _Member_sha) || 1)))), zcbor_union_end_code(state), int_res))));
    2956:	4631      	mov	r1, r6
    2958:	4620      	mov	r0, r4
    295a:	f005 fd69 	bl	8430 <zcbor_bstr_decode>
    295e:	2800      	cmp	r0, #0
    2960:	d0ed      	beq.n	293e <decode_repeated_Upload_members+0xbe>
    2962:	2304      	movs	r3, #4
    2964:	e7a2      	b.n	28ac <decode_repeated_Upload_members+0x2c>
	bool tmp_result = (((zcbor_union_start_code(state) && (int_res = (((((zcbor_tstr_expect(state, ((tmp_str.value = (uint8_t *)"image", tmp_str.len = sizeof("image") - 1, &tmp_str)))))
    2966:	4605      	mov	r5, r0
    2968:	e7b9      	b.n	28de <decode_repeated_Upload_members+0x5e>
    296a:	bf00      	nop
    296c:	00009f0b 	.word	0x00009f0b
    2970:	0000a293 	.word	0x0000a293
    2974:	0000a298 	.word	0x0000a298
    2978:	0000a28f 	.word	0x0000a28f
    297c:	0000a29c 	.word	0x0000a29c

00002980 <cbor_decode_Upload>:

int cbor_decode_Upload(
		const uint8_t *payload, size_t payload_len,
		struct Upload *result,
		size_t *payload_len_out)
{
    2980:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	zcbor_state_t states[4];

	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    2984:	f04f 0901 	mov.w	r9, #1
{
    2988:	b09d      	sub	sp, #116	; 0x74
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    298a:	ad04      	add	r5, sp, #16
{
    298c:	4607      	mov	r7, r0
    298e:	460e      	mov	r6, r1
    2990:	4690      	mov	r8, r2
    2992:	461c      	mov	r4, r3
	zcbor_new_state(states, sizeof(states) / sizeof(zcbor_state_t), payload, payload_len, 1);
    2994:	4602      	mov	r2, r0
    2996:	460b      	mov	r3, r1
    2998:	4628      	mov	r0, r5
    299a:	2104      	movs	r1, #4
    299c:	f8cd 9000 	str.w	r9, [sp]
    29a0:	f005 fe75 	bl	868e <zcbor_new_state>
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    29a4:	4628      	mov	r0, r5
    29a6:	f005 fd49 	bl	843c <zcbor_map_start_decode>
    29aa:	b170      	cbz	r0, 29ca <cbor_decode_Upload+0x4a>
    29ac:	230c      	movs	r3, #12
    29ae:	2105      	movs	r1, #5
    29b0:	e9cd 8301 	strd	r8, r3, [sp, #4]
    29b4:	4648      	mov	r0, r9
    29b6:	4b11      	ldr	r3, [pc, #68]	; (29fc <cbor_decode_Upload+0x7c>)
    29b8:	9500      	str	r5, [sp, #0]
    29ba:	f108 023c 	add.w	r2, r8, #60	; 0x3c
    29be:	f005 fd5e 	bl	847e <zcbor_multi_decode>
    29c2:	b950      	cbnz	r0, 29da <cbor_decode_Upload+0x5a>
    29c4:	4628      	mov	r0, r5
    29c6:	f005 fd55 	bl	8474 <zcbor_list_map_end_force_decode>
/** Return the current error state, replacing it with SUCCESS. */
static inline int zcbor_pop_error(zcbor_state_t *state)
{
	int err = state->constant_state->error;

	state->constant_state->error = ZCBOR_SUCCESS;
    29ca:	2200      	movs	r2, #0
	int err = state->constant_state->error;
    29cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    29ce:	68d8      	ldr	r0, [r3, #12]
	state->constant_state->error = ZCBOR_SUCCESS;
    29d0:	60da      	str	r2, [r3, #12]
				(size_t)states[0].payload - (size_t)payload);
	}

	if (!ret) {
		int status = zcbor_pop_error(states);
		return (status == ZCBOR_SUCCESS) ? ZCBOR_ERR_UNKNOWN : status;
    29d2:	4290      	cmp	r0, r2
    29d4:	bf08      	it	eq
    29d6:	201f      	moveq	r0, #31
    29d8:	e00c      	b.n	29f4 <cbor_decode_Upload+0x74>
	bool tmp_result = (((zcbor_map_start_decode(state) && ((zcbor_multi_decode(1, 5, &(*result)._Upload_members_count, (zcbor_decoder_t *)decode_repeated_Upload_members, state, (&(*result)._Upload_members), sizeof(struct Upload_members))) || (zcbor_list_map_end_force_decode(state), false)) && zcbor_map_end_decode(state))));
    29da:	4628      	mov	r0, r5
    29dc:	f005 fd48 	bl	8470 <zcbor_map_end_decode>
	if (ret && (payload_len_out != NULL)) {
    29e0:	2800      	cmp	r0, #0
    29e2:	d0f2      	beq.n	29ca <cbor_decode_Upload+0x4a>
    29e4:	b12c      	cbz	r4, 29f2 <cbor_decode_Upload+0x72>
		*payload_len_out = MIN(payload_len,
    29e6:	9804      	ldr	r0, [sp, #16]
    29e8:	1bc0      	subs	r0, r0, r7
    29ea:	42b0      	cmp	r0, r6
    29ec:	bf94      	ite	ls
    29ee:	6020      	strls	r0, [r4, #0]
    29f0:	6026      	strhi	r6, [r4, #0]
	}
	return ZCBOR_SUCCESS;
    29f2:	2000      	movs	r0, #0
}
    29f4:	b01d      	add	sp, #116	; 0x74
    29f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    29fa:	bf00      	nop
    29fc:	00002881 	.word	0x00002881

00002a00 <get_result_len>:

	for (; len > 0; len--) {
#ifdef CONFIG_BIG_ENDIAN
		if (u8_result[max_result_len - len] != 0) {
#else
		if (u8_result[len - 1] != 0) {
    2a00:	460b      	mov	r3, r1
    2a02:	3901      	subs	r1, #1
    2a04:	5c42      	ldrb	r2, [r0, r1]
    2a06:	b91a      	cbnz	r2, 2a10 <get_result_len+0x10>
	for (; len > 0; len--) {
    2a08:	2900      	cmp	r1, #0
    2a0a:	d1f9      	bne.n	2a00 <get_result_len>
		}
	}

	/* Round up to nearest power of 2. */
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
}
    2a0c:	4608      	mov	r0, r1
    2a0e:	4770      	bx	lr
	return len <= 2 ? len : (uint8_t)(1 << log2ceil(len));
    2a10:	2b02      	cmp	r3, #2
    2a12:	bf85      	ittet	hi
    2a14:	2101      	movhi	r1, #1
    2a16:	4a04      	ldrhi	r2, [pc, #16]	; (2a28 <get_result_len+0x28>)
    2a18:	4619      	movls	r1, r3
    2a1a:	189b      	addhi	r3, r3, r2
    2a1c:	bf82      	ittt	hi
    2a1e:	f813 0c02 	ldrbhi.w	r0, [r3, #-2]
    2a22:	4081      	lslhi	r1, r0
    2a24:	b2c9      	uxtbhi	r1, r1
    2a26:	e7f1      	b.n	2a0c <get_result_len+0xc>
    2a28:	0000a2a0 	.word	0x0000a2a0

00002a2c <value_encode>:
}


static bool value_encode(zcbor_state_t *state, zcbor_major_type_t major_type,
		const void *const input, uint_fast32_t max_result_len)
{
    2a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a2e:	4605      	mov	r5, r0
    2a30:	460f      	mov	r7, r1
	zcbor_assert(max_result_len != 0, "0-length result not supported.\r\n");

	uint_fast32_t result_len = get_result_len(input, max_result_len);
    2a32:	4610      	mov	r0, r2
    2a34:	4619      	mov	r1, r3
{
    2a36:	4616      	mov	r6, r2
	uint_fast32_t result_len = get_result_len(input, max_result_len);
    2a38:	f7ff ffe2 	bl	2a00 <get_result_len>
	if ((result_len == 1) && (u8_result[0] <= ZCBOR_VALUE_IN_HEADER)) {
    2a3c:	2801      	cmp	r0, #1
    2a3e:	d104      	bne.n	2a4a <value_encode+0x1e>
    2a40:	7830      	ldrb	r0, [r6, #0]
    2a42:	2817      	cmp	r0, #23
    2a44:	bf94      	ite	ls
    2a46:	2000      	movls	r0, #0
    2a48:	2001      	movhi	r0, #1
	if ((state->payload + 1 + encoded_len) > state->payload_end) {
    2a4a:	682a      	ldr	r2, [r5, #0]
    2a4c:	68e9      	ldr	r1, [r5, #12]
    2a4e:	1c43      	adds	r3, r0, #1
    2a50:	4413      	add	r3, r2
    2a52:	4299      	cmp	r1, r3
    2a54:	d204      	bcs.n	2a60 <value_encode+0x34>
{
#ifdef ZCBOR_STOP_ON_ERROR
	if (zcbor_check_error(state))
#endif
	{
		state->constant_state->error = err;
    2a56:	2208      	movs	r2, #8
		ZCBOR_FAIL();
    2a58:	2000      	movs	r0, #0
    2a5a:	696b      	ldr	r3, [r5, #20]
    2a5c:	60da      	str	r2, [r3, #12]
	const void *const result = get_result(input, max_result_len, result_len);

	return value_encode_len(state, major_type, result, result_len);
}
    2a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!encode_header_byte(state, major_type,
    2a60:	7833      	ldrb	r3, [r6, #0]
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    2a62:	b140      	cbz	r0, 2a76 <value_encode+0x4a>
	switch(val) {
    2a64:	1e83      	subs	r3, r0, #2
    2a66:	2b06      	cmp	r3, #6
	return len == 0 ? value0 : (uint8_t)(24 + log2ceil(len));
    2a68:	bf8e      	itee	hi
    2a6a:	2300      	movhi	r3, #0
    2a6c:	4c0e      	ldrls	r4, [pc, #56]	; (2aa8 <value_encode+0x7c>)
    2a6e:	5ce3      	ldrbls	r3, [r4, r3]
    2a70:	f103 0418 	add.w	r4, r3, #24
    2a74:	b2e3      	uxtb	r3, r4
	ZCBOR_CHECK_PAYLOAD();
    2a76:	428a      	cmp	r2, r1
    2a78:	d2ed      	bcs.n	2a56 <value_encode+0x2a>
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    2a7a:	f003 041f 	and.w	r4, r3, #31
    2a7e:	ea44 1347 	orr.w	r3, r4, r7, lsl #5
    2a82:	1c51      	adds	r1, r2, #1
    2a84:	6029      	str	r1, [r5, #0]
    2a86:	7013      	strb	r3, [r2, #0]
	for (; encoded_len > 0; encoded_len--) {
    2a88:	1833      	adds	r3, r6, r0
    2a8a:	429e      	cmp	r6, r3
    2a8c:	d104      	bne.n	2a98 <value_encode+0x6c>
	state->elem_count++;
    2a8e:	68ab      	ldr	r3, [r5, #8]
	return true;
    2a90:	2001      	movs	r0, #1
	state->elem_count++;
    2a92:	3301      	adds	r3, #1
    2a94:	60ab      	str	r3, [r5, #8]
	return true;
    2a96:	e7e2      	b.n	2a5e <value_encode+0x32>
		*(state->payload_mut++) = u8_result[encoded_len - 1];
    2a98:	682a      	ldr	r2, [r5, #0]
    2a9a:	1c51      	adds	r1, r2, #1
    2a9c:	6029      	str	r1, [r5, #0]
    2a9e:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
    2aa2:	7011      	strb	r1, [r2, #0]
	for (; encoded_len > 0; encoded_len--) {
    2aa4:	e7f1      	b.n	2a8a <value_encode+0x5e>
    2aa6:	bf00      	nop
    2aa8:	0000a2a0 	.word	0x0000a2a0

00002aac <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2aac:	4901      	ldr	r1, [pc, #4]	; (2ab4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2aae:	2210      	movs	r2, #16
	str	r2, [r1]
    2ab0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2ab2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2ab4:	e000ed10 	.word	0xe000ed10

00002ab8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2ab8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2aba:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2abc:	f380 8811 	msr	BASEPRI, r0
	isb
    2ac0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2ac4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2ac8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2aca:	b662      	cpsie	i
	isb
    2acc:	f3bf 8f6f 	isb	sy

	bx	lr
    2ad0:	4770      	bx	lr
    2ad2:	bf00      	nop

00002ad4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2ad4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2ad6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2ad8:	f381 8811 	msr	BASEPRI, r1

	wfe
    2adc:	bf20      	wfe

	msr	BASEPRI, r0
    2ade:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2ae2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2ae4:	4770      	bx	lr
    2ae6:	bf00      	nop

00002ae8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2aec:	4607      	mov	r7, r0

	if (esf != NULL) {
    2aee:	460c      	mov	r4, r1
{
    2af0:	b086      	sub	sp, #24
	if (esf != NULL) {
    2af2:	2900      	cmp	r1, #0
    2af4:	d04a      	beq.n	2b8c <z_arm_fatal_error+0xa4>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2af6:	688b      	ldr	r3, [r1, #8]
    2af8:	4828      	ldr	r0, [pc, #160]	; (2b9c <z_arm_fatal_error+0xb4>)
    2afa:	9300      	str	r3, [sp, #0]
    2afc:	e9d1 2300 	ldrd	r2, r3, [r1]
    2b00:	2145      	movs	r1, #69	; 0x45
    2b02:	f005 fabe 	bl	8082 <z_log_minimal_printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2b06:	6963      	ldr	r3, [r4, #20]
    2b08:	2145      	movs	r1, #69	; 0x45
    2b0a:	9300      	str	r3, [sp, #0]
    2b0c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    2b10:	4823      	ldr	r0, [pc, #140]	; (2ba0 <z_arm_fatal_error+0xb8>)
    2b12:	f005 fab6 	bl	8082 <z_log_minimal_printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2b16:	2145      	movs	r1, #69	; 0x45
    2b18:	69e2      	ldr	r2, [r4, #28]
    2b1a:	4822      	ldr	r0, [pc, #136]	; (2ba4 <z_arm_fatal_error+0xbc>)
    2b1c:	f005 fab1 	bl	8082 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    2b20:	4626      	mov	r6, r4
    2b22:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    2b24:	f8df 8088 	ldr.w	r8, [pc, #136]	; 2bb0 <z_arm_fatal_error+0xc8>
    2b28:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
    2b2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2b30:	ed96 7a08 	vldr	s14, [r6, #32]
    2b34:	edcd 7a05 	vstr	s15, [sp, #20]
    2b38:	1ceb      	adds	r3, r5, #3
    2b3a:	9304      	str	r3, [sp, #16]
    2b3c:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
    2b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2b44:	edcd 7a03 	vstr	s15, [sp, #12]
    2b48:	1cab      	adds	r3, r5, #2
    2b4a:	9302      	str	r3, [sp, #8]
    2b4c:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    2b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2b54:	edcd 7a01 	vstr	s15, [sp, #4]
    2b58:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    2b5c:	1c6b      	adds	r3, r5, #1
    2b5e:	462a      	mov	r2, r5
    2b60:	9300      	str	r3, [sp, #0]
    2b62:	2145      	movs	r1, #69	; 0x45
    2b64:	ee17 3a90 	vmov	r3, s15
    2b68:	4640      	mov	r0, r8
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    2b6a:	3504      	adds	r5, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    2b6c:	f005 fa89 	bl	8082 <z_log_minimal_printk>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    2b70:	2d10      	cmp	r5, #16
    2b72:	f106 0610 	add.w	r6, r6, #16
    2b76:	d1d7      	bne.n	2b28 <z_arm_fatal_error+0x40>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
    2b78:	2145      	movs	r1, #69	; 0x45
    2b7a:	6e22      	ldr	r2, [r4, #96]	; 0x60
    2b7c:	480a      	ldr	r0, [pc, #40]	; (2ba8 <z_arm_fatal_error+0xc0>)
    2b7e:	f005 fa80 	bl	8082 <z_log_minimal_printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2b82:	2145      	movs	r1, #69	; 0x45
    2b84:	69a2      	ldr	r2, [r4, #24]
    2b86:	4809      	ldr	r0, [pc, #36]	; (2bac <z_arm_fatal_error+0xc4>)
    2b88:	f005 fa7b 	bl	8082 <z_log_minimal_printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2b8c:	4621      	mov	r1, r4
    2b8e:	4638      	mov	r0, r7
}
    2b90:	b006      	add	sp, #24
    2b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_fatal_error(reason, esf);
    2b96:	f002 ba17 	b.w	4fc8 <z_fatal_error>
    2b9a:	bf00      	nop
    2b9c:	0000a2a7 	.word	0x0000a2a7
    2ba0:	0000a2db 	.word	0x0000a2db
    2ba4:	0000a30f 	.word	0x0000a30f
    2ba8:	0000a36b 	.word	0x0000a36b
    2bac:	0000a37f 	.word	0x0000a37f
    2bb0:	0000a323 	.word	0x0000a323

00002bb4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2bb4:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2bb6:	2b00      	cmp	r3, #0
    2bb8:	db08      	blt.n	2bcc <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2bba:	2201      	movs	r2, #1
    2bbc:	f000 001f 	and.w	r0, r0, #31
    2bc0:	fa02 f000 	lsl.w	r0, r2, r0
    2bc4:	4a02      	ldr	r2, [pc, #8]	; (2bd0 <arch_irq_enable+0x1c>)
    2bc6:	095b      	lsrs	r3, r3, #5
    2bc8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2bcc:	4770      	bx	lr
    2bce:	bf00      	nop
    2bd0:	e000e100 	.word	0xe000e100

00002bd4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2bd4:	4b05      	ldr	r3, [pc, #20]	; (2bec <arch_irq_is_enabled+0x18>)
    2bd6:	0942      	lsrs	r2, r0, #5
    2bd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2bdc:	2301      	movs	r3, #1
    2bde:	f000 001f 	and.w	r0, r0, #31
    2be2:	fa03 f000 	lsl.w	r0, r3, r0
}
    2be6:	4010      	ands	r0, r2
    2be8:	4770      	bx	lr
    2bea:	bf00      	nop
    2bec:	e000e100 	.word	0xe000e100

00002bf0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2bf0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2bf2:	2b00      	cmp	r3, #0
		prio += _IRQ_PRIO_OFFSET;
    2bf4:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bf8:	bfac      	ite	ge
    2bfa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2bfe:	4b06      	ldrlt	r3, [pc, #24]	; (2c18 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c00:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2c04:	b2c9      	uxtb	r1, r1
    2c06:	bfab      	itete	ge
    2c08:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c0c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c10:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2c14:	5419      	strblt	r1, [r3, r0]
}
    2c16:	4770      	bx	lr
    2c18:	e000ed14 	.word	0xe000ed14

00002c1c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2c1c:	bf30      	wfi
    b z_SysNmiOnReset
    2c1e:	f7ff bffd 	b.w	2c1c <z_SysNmiOnReset>
    2c22:	bf00      	nop

00002c24 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2c24:	4a14      	ldr	r2, [pc, #80]	; (2c78 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2c26:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2c28:	4b14      	ldr	r3, [pc, #80]	; (2c7c <z_arm_prep_c+0x58>)
    2c2a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2c2e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2c30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c34:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2c38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2c3c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    2c44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2c48:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    2c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    2c50:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    2c54:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    2c58:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c5c:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    2c60:	2300      	movs	r3, #0
    2c62:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2c66:	f002 fa17 	bl	5098 <z_bss_zero>
	z_data_copy();
    2c6a:	f002 ffeb 	bl	5c44 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2c6e:	f000 fac7 	bl	3200 <z_arm_interrupt_init>
	z_cstart();
    2c72:	f002 fa51 	bl	5118 <z_cstart>
    2c76:	bf00      	nop
    2c78:	00000000 	.word	0x00000000
    2c7c:	e000ed00 	.word	0xe000ed00

00002c80 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2c80:	4a09      	ldr	r2, [pc, #36]	; (2ca8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2c82:	490a      	ldr	r1, [pc, #40]	; (2cac <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2c84:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2c86:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2c88:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    2c8a:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2c8c:	4908      	ldr	r1, [pc, #32]	; (2cb0 <arch_swap+0x30>)
    2c8e:	684b      	ldr	r3, [r1, #4]
    2c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2c94:	604b      	str	r3, [r1, #4]
    2c96:	2300      	movs	r3, #0
    2c98:	f383 8811 	msr	BASEPRI, r3
    2c9c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2ca0:	6893      	ldr	r3, [r2, #8]
}
    2ca2:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2ca4:	4770      	bx	lr
    2ca6:	bf00      	nop
    2ca8:	2000e6c8 	.word	0x2000e6c8
    2cac:	000099cc 	.word	0x000099cc
    2cb0:	e000ed00 	.word	0xe000ed00

00002cb4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2cb4:	4922      	ldr	r1, [pc, #136]	; (2d40 <in_fp_endif+0x2e>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2cb6:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    2cb8:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2cbc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2cc0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2cc2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2cc6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    2cca:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    2cce:	d103      	bne.n	2cd8 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    2cd0:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
    2cd4:	ec80 8a10 	vstmia	r0, {s16-s31}

00002cd8 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2cd8:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2cda:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2cde:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2ce2:	4f18      	ldr	r7, [pc, #96]	; (2d44 <in_fp_endif+0x32>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2ce4:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2ce8:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2cea:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2cec:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    2cee:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2cf2:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2cf4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2cf6:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2cf8:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    2cfc:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    2d00:	d003      	beq.n	2d0a <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    2d02:	2300      	movs	r3, #0
    vmsr fpscr, r3
    2d04:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    2d08:	e003      	b.n	2d12 <in_fp_endif>

00002d0a <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    2d0a:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
    2d0e:	ec90 8a10 	vldmia	r0, {s16-s31}

00002d12 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    2d12:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    2d16:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    2d1a:	f383 8814 	msr	CONTROL, r3
    isb
    2d1e:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2d22:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2d26:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2d2a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    2d2e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    2d32:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    2d34:	f005 fcda 	bl	86ec <configure_builtin_stack_guard>
    pop {r2, lr}
    2d38:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2d3c:	4770      	bx	lr
    2d3e:	0000      	.short	0x0000
    ldr r1, =_kernel
    2d40:	2000e6c8 	.word	0x2000e6c8
    ldr v4, =_SCS_ICSR
    2d44:	e000ed04 	.word	0xe000ed04

00002d48 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2d48:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2d4c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2d4e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2d52:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2d56:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2d58:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2d5c:	2902      	cmp	r1, #2
    beq _oops
    2d5e:	d0ff      	beq.n	2d60 <_oops>

00002d60 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2d60:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2d62:	f005 fcb4 	bl	86ce <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2d66:	bd01      	pop	{r0, pc}

00002d68 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2d68:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2d6c:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    2d6e:	490d      	ldr	r1, [pc, #52]	; (2da4 <arch_new_thread+0x3c>)
	iframe->a2 = (uint32_t)p1;
    2d70:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2d74:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    2d76:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    2d7a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2d7e:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    2d80:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    2d84:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2d88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2d8c:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2d90:	2300      	movs	r3, #0
    2d92:	6743      	str	r3, [r0, #116]	; 0x74

#if defined(CONFIG_ARM_STORE_EXC_RETURN) || defined(CONFIG_USERSPACE)
	thread->arch.mode = 0;
    2d94:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2d98:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2d9a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.mode = 0;
    2d9c:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2da0:	4770      	bx	lr
    2da2:	bf00      	nop
    2da4:	0000806d 	.word	0x0000806d

00002da8 <arch_switch_to_main_thread>:
    2da8:	2300      	movs	r3, #0
    2daa:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2dae:	f3ef 8314 	mrs	r3, CONTROL
#else
	__set_FPSCR(0);
#endif
#if defined(CONFIG_CPU_CORTEX_M) && defined(CONFIG_FPU_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2db2:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2db6:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    2dba:	f3bf 8f6f 	isb	sy
    2dbe:	f3bf 8f6f 	isb	sy
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2dc2:	4b09      	ldr	r3, [pc, #36]	; (2de8 <arch_switch_to_main_thread+0x40>)
    2dc4:	6098      	str	r0, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2dc6:	6e43      	ldr	r3, [r0, #100]	; 0x64
    2dc8:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2dcc:	4610      	mov	r0, r2
    2dce:	f381 8809 	msr	PSP, r1
    2dd2:	2100      	movs	r1, #0
    2dd4:	b663      	cpsie	if
    2dd6:	f381 8811 	msr	BASEPRI, r1
    2dda:	f3bf 8f6f 	isb	sy
    2dde:	2200      	movs	r2, #0
    2de0:	2300      	movs	r3, #0
    2de2:	f005 f943 	bl	806c <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2de6:	bf00      	nop
    2de8:	2000e6c8 	.word	0x2000e6c8

00002dec <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2dec:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2dee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2df2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2df6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2dfa:	4904      	ldr	r1, [pc, #16]	; (2e0c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2dfc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2dfe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2e00:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2e02:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2e06:	4902      	ldr	r1, [pc, #8]	; (2e10 <_isr_wrapper+0x24>)
	bx r1
    2e08:	4708      	bx	r1
    2e0a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    2e0c:	000094c8 	.word	0x000094c8
	ldr r1, =z_arm_int_exit
    2e10:	00002e15 	.word	0x00002e15

00002e14 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2e14:	4b04      	ldr	r3, [pc, #16]	; (2e28 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2e16:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2e18:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2e1a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2e1c:	d003      	beq.n	2e26 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2e1e:	4903      	ldr	r1, [pc, #12]	; (2e2c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2e20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2e24:	600a      	str	r2, [r1, #0]

00002e26 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2e26:	4770      	bx	lr
	ldr r3, =_kernel
    2e28:	2000e6c8 	.word	0x2000e6c8
	ldr r1, =_SCS_ICSR
    2e2c:	e000ed04 	.word	0xe000ed04

00002e30 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2e30:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2e32:	4c21      	ldr	r4, [pc, #132]	; (2eb8 <usage_fault.constprop.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2e34:	2145      	movs	r1, #69	; 0x45
    2e36:	4821      	ldr	r0, [pc, #132]	; (2ebc <usage_fault.constprop.0+0x8c>)
    2e38:	f005 f923 	bl	8082 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2e3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e3e:	019d      	lsls	r5, r3, #6
    2e40:	d503      	bpl.n	2e4a <usage_fault.constprop.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    2e42:	2145      	movs	r1, #69	; 0x45
    2e44:	481e      	ldr	r0, [pc, #120]	; (2ec0 <usage_fault.constprop.0+0x90>)
    2e46:	f005 f91c 	bl	8082 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2e4c:	01dc      	lsls	r4, r3, #7
    2e4e:	d503      	bpl.n	2e58 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    2e50:	2145      	movs	r1, #69	; 0x45
    2e52:	481c      	ldr	r0, [pc, #112]	; (2ec4 <usage_fault.constprop.0+0x94>)
    2e54:	f005 f915 	bl	8082 <z_log_minimal_printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2e58:	4d17      	ldr	r5, [pc, #92]	; (2eb8 <usage_fault.constprop.0+0x88>)
    2e5a:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2e5c:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    2e60:	d004      	beq.n	2e6c <usage_fault.constprop.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    2e62:	2145      	movs	r1, #69	; 0x45
    2e64:	4818      	ldr	r0, [pc, #96]	; (2ec8 <usage_fault.constprop.0+0x98>)
    2e66:	f005 f90c 	bl	8082 <z_log_minimal_printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    2e6a:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2e6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e6e:	0318      	lsls	r0, r3, #12
    2e70:	d503      	bpl.n	2e7a <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2e72:	2145      	movs	r1, #69	; 0x45
    2e74:	4815      	ldr	r0, [pc, #84]	; (2ecc <usage_fault.constprop.0+0x9c>)
    2e76:	f005 f904 	bl	8082 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2e7a:	4d0f      	ldr	r5, [pc, #60]	; (2eb8 <usage_fault.constprop.0+0x88>)
    2e7c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e7e:	0359      	lsls	r1, r3, #13
    2e80:	d503      	bpl.n	2e8a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2e82:	2145      	movs	r1, #69	; 0x45
    2e84:	4812      	ldr	r0, [pc, #72]	; (2ed0 <usage_fault.constprop.0+0xa0>)
    2e86:	f005 f8fc 	bl	8082 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2e8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e8c:	039a      	lsls	r2, r3, #14
    2e8e:	d503      	bpl.n	2e98 <usage_fault.constprop.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2e90:	2145      	movs	r1, #69	; 0x45
    2e92:	4810      	ldr	r0, [pc, #64]	; (2ed4 <usage_fault.constprop.0+0xa4>)
    2e94:	f005 f8f5 	bl	8082 <z_log_minimal_printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2e98:	4d07      	ldr	r5, [pc, #28]	; (2eb8 <usage_fault.constprop.0+0x88>)
    2e9a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2e9c:	03db      	lsls	r3, r3, #15
    2e9e:	d503      	bpl.n	2ea8 <usage_fault.constprop.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2ea0:	2145      	movs	r1, #69	; 0x45
    2ea2:	480d      	ldr	r0, [pc, #52]	; (2ed8 <usage_fault.constprop.0+0xa8>)
    2ea4:	f005 f8ed 	bl	8082 <z_log_minimal_printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2ea8:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    2eaa:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2eac:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2eb0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2eb4:	62ab      	str	r3, [r5, #40]	; 0x28
}
    2eb6:	bd38      	pop	{r3, r4, r5, pc}
    2eb8:	e000ed00 	.word	0xe000ed00
    2ebc:	0000a3b2 	.word	0x0000a3b2
    2ec0:	0000a3cf 	.word	0x0000a3cf
    2ec4:	0000a3e7 	.word	0x0000a3e7
    2ec8:	0000a406 	.word	0x0000a406
    2ecc:	0000a435 	.word	0x0000a435
    2ed0:	0000a458 	.word	0x0000a458
    2ed4:	0000a482 	.word	0x0000a482
    2ed8:	0000a4a1 	.word	0x0000a4a1

00002edc <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2edc:	b570      	push	{r4, r5, r6, lr}
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2ede:	4c23      	ldr	r4, [pc, #140]	; (2f6c <bus_fault.constprop.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2ee0:	4606      	mov	r6, r0
    2ee2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2ee4:	4822      	ldr	r0, [pc, #136]	; (2f70 <bus_fault.constprop.0+0x94>)
    2ee6:	2145      	movs	r1, #69	; 0x45
    2ee8:	f005 f8cb 	bl	8082 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2eee:	04d9      	lsls	r1, r3, #19
    2ef0:	d503      	bpl.n	2efa <bus_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    2ef2:	2145      	movs	r1, #69	; 0x45
    2ef4:	481f      	ldr	r0, [pc, #124]	; (2f74 <bus_fault.constprop.0+0x98>)
    2ef6:	f005 f8c4 	bl	8082 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2efa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2efc:	051a      	lsls	r2, r3, #20
    2efe:	d503      	bpl.n	2f08 <bus_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2f00:	2145      	movs	r1, #69	; 0x45
    2f02:	481d      	ldr	r0, [pc, #116]	; (2f78 <bus_fault.constprop.0+0x9c>)
    2f04:	f005 f8bd 	bl	8082 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2f08:	4c18      	ldr	r4, [pc, #96]	; (2f6c <bus_fault.constprop.0+0x90>)
    2f0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f0c:	059b      	lsls	r3, r3, #22
    2f0e:	d510      	bpl.n	2f32 <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    2f10:	481a      	ldr	r0, [pc, #104]	; (2f7c <bus_fault.constprop.0+0xa0>)
    2f12:	2145      	movs	r1, #69	; 0x45
    2f14:	f005 f8b5 	bl	8082 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    2f18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2f1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f1c:	0418      	lsls	r0, r3, #16
    2f1e:	d508      	bpl.n	2f32 <bus_fault.constprop.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2f20:	2145      	movs	r1, #69	; 0x45
    2f22:	4817      	ldr	r0, [pc, #92]	; (2f80 <bus_fault.constprop.0+0xa4>)
    2f24:	f005 f8ad 	bl	8082 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2f28:	b11e      	cbz	r6, 2f32 <bus_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2f2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2f30:	62a3      	str	r3, [r4, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2f32:	4c0e      	ldr	r4, [pc, #56]	; (2f6c <bus_fault.constprop.0+0x90>)
    2f34:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f36:	0559      	lsls	r1, r3, #21
    2f38:	d503      	bpl.n	2f42 <bus_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    2f3a:	2145      	movs	r1, #69	; 0x45
    2f3c:	4811      	ldr	r0, [pc, #68]	; (2f84 <bus_fault.constprop.0+0xa8>)
    2f3e:	f005 f8a0 	bl	8082 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2f42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f44:	05da      	lsls	r2, r3, #23
    2f46:	d50b      	bpl.n	2f60 <bus_fault.constprop.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2f48:	2145      	movs	r1, #69	; 0x45
    2f4a:	480f      	ldr	r0, [pc, #60]	; (2f88 <bus_fault.constprop.0+0xac>)
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2f4c:	f005 f899 	bl	8082 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    2f50:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2f52:	4a06      	ldr	r2, [pc, #24]	; (2f6c <bus_fault.constprop.0+0x90>)
    2f54:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2f56:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2f5a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2f5c:	7028      	strb	r0, [r5, #0]
}
    2f5e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2f60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f62:	049b      	lsls	r3, r3, #18
    2f64:	d5f4      	bpl.n	2f50 <bus_fault.constprop.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2f66:	2145      	movs	r1, #69	; 0x45
    2f68:	4808      	ldr	r0, [pc, #32]	; (2f8c <bus_fault.constprop.0+0xb0>)
    2f6a:	e7ef      	b.n	2f4c <bus_fault.constprop.0+0x70>
    2f6c:	e000ed00 	.word	0xe000ed00
    2f70:	0000a4d1 	.word	0x0000a4d1
    2f74:	0000a4ec 	.word	0x0000a4ec
    2f78:	0000a502 	.word	0x0000a502
    2f7c:	0000a51a 	.word	0x0000a51a
    2f80:	0000a538 	.word	0x0000a538
    2f84:	0000a552 	.word	0x0000a552
    2f88:	0000a572 	.word	0x0000a572
    2f8c:	0000a58f 	.word	0x0000a58f

00002f90 <mem_manage_fault.constprop.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2f90:	b570      	push	{r4, r5, r6, lr}
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2f92:	4c26      	ldr	r4, [pc, #152]	; (302c <mem_manage_fault.constprop.0+0x9c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    2f94:	4606      	mov	r6, r0
    2f96:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2f98:	4825      	ldr	r0, [pc, #148]	; (3030 <mem_manage_fault.constprop.0+0xa0>)
    2f9a:	2145      	movs	r1, #69	; 0x45
    2f9c:	f005 f871 	bl	8082 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2fa0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2fa2:	06d8      	lsls	r0, r3, #27
    2fa4:	d503      	bpl.n	2fae <mem_manage_fault.constprop.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2fa6:	2145      	movs	r1, #69	; 0x45
    2fa8:	4822      	ldr	r0, [pc, #136]	; (3034 <mem_manage_fault.constprop.0+0xa4>)
    2faa:	f005 f86a 	bl	8082 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2fae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2fb0:	0719      	lsls	r1, r3, #28
    2fb2:	d503      	bpl.n	2fbc <mem_manage_fault.constprop.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2fb4:	2145      	movs	r1, #69	; 0x45
    2fb6:	4820      	ldr	r0, [pc, #128]	; (3038 <mem_manage_fault.constprop.0+0xa8>)
    2fb8:	f005 f863 	bl	8082 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2fbc:	4c1b      	ldr	r4, [pc, #108]	; (302c <mem_manage_fault.constprop.0+0x9c>)
    2fbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2fc0:	079a      	lsls	r2, r3, #30
    2fc2:	d510      	bpl.n	2fe6 <mem_manage_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    2fc4:	2145      	movs	r1, #69	; 0x45
    2fc6:	481d      	ldr	r0, [pc, #116]	; (303c <mem_manage_fault.constprop.0+0xac>)
    2fc8:	f005 f85b 	bl	8082 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    2fcc:	6b62      	ldr	r2, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2fce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2fd0:	061b      	lsls	r3, r3, #24
    2fd2:	d508      	bpl.n	2fe6 <mem_manage_fault.constprop.0+0x56>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2fd4:	2145      	movs	r1, #69	; 0x45
    2fd6:	481a      	ldr	r0, [pc, #104]	; (3040 <mem_manage_fault.constprop.0+0xb0>)
    2fd8:	f005 f853 	bl	8082 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    2fdc:	b11e      	cbz	r6, 2fe6 <mem_manage_fault.constprop.0+0x56>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2fde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2fe4:	62a3      	str	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2fe6:	4c11      	ldr	r4, [pc, #68]	; (302c <mem_manage_fault.constprop.0+0x9c>)
    2fe8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2fea:	07de      	lsls	r6, r3, #31
    2fec:	d503      	bpl.n	2ff6 <mem_manage_fault.constprop.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    2fee:	2145      	movs	r1, #69	; 0x45
    2ff0:	4814      	ldr	r0, [pc, #80]	; (3044 <mem_manage_fault.constprop.0+0xb4>)
    2ff2:	f005 f846 	bl	8082 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ff8:	0698      	lsls	r0, r3, #26
    2ffa:	d503      	bpl.n	3004 <mem_manage_fault.constprop.0+0x74>
		PR_FAULT_INFO(
    2ffc:	2145      	movs	r1, #69	; 0x45
    2ffe:	4812      	ldr	r0, [pc, #72]	; (3048 <mem_manage_fault.constprop.0+0xb8>)
    3000:	f005 f83f 	bl	8082 <z_log_minimal_printk>
	*recoverable = memory_fault_recoverable(esf, true);
    3004:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3006:	4b09      	ldr	r3, [pc, #36]	; (302c <mem_manage_fault.constprop.0+0x9c>)
    3008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    300a:	06d1      	lsls	r1, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    300c:	bf58      	it	pl
    300e:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3012:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    3014:	bf42      	ittt	mi
    3016:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3018:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    301c:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    301e:	4a03      	ldr	r2, [pc, #12]	; (302c <mem_manage_fault.constprop.0+0x9c>)
    3020:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3022:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3026:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3028:	7028      	strb	r0, [r5, #0]
}
    302a:	bd70      	pop	{r4, r5, r6, pc}
    302c:	e000ed00 	.word	0xe000ed00
    3030:	0000a5c3 	.word	0x0000a5c3
    3034:	0000a5de 	.word	0x0000a5de
    3038:	0000a502 	.word	0x0000a502
    303c:	0000a616 	.word	0x0000a616
    3040:	0000a633 	.word	0x0000a633
    3044:	0000a64e 	.word	0x0000a64e
    3048:	0000a58f 	.word	0x0000a58f

0000304c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    304c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3050:	4b55      	ldr	r3, [pc, #340]	; (31a8 <z_arm_fault+0x15c>)
    3052:	2500      	movs	r5, #0
    3054:	685e      	ldr	r6, [r3, #4]
{
    3056:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3058:	f3c6 0408 	ubfx	r4, r6, #0, #9
    305c:	f385 8811 	msr	BASEPRI, r5
    3060:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3064:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3068:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    306c:	d107      	bne.n	307e <z_arm_fault+0x32>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    306e:	f002 030c 	and.w	r3, r2, #12
    3072:	2b08      	cmp	r3, #8
    3074:	d105      	bne.n	3082 <z_arm_fault+0x36>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3076:	2145      	movs	r1, #69	; 0x45
    3078:	484c      	ldr	r0, [pc, #304]	; (31ac <z_arm_fault+0x160>)
    307a:	f005 f802 	bl	8082 <z_log_minimal_printk>
		return NULL;
    307e:	462f      	mov	r7, r5
    3080:	e004      	b.n	308c <z_arm_fault+0x40>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3082:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    3084:	bf4e      	itee	mi
    3086:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    3088:	4607      	movpl	r7, r0
			*nested_exc = true;
    308a:	2501      	movpl	r5, #1
	*recoverable = false;
    308c:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    3090:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    3092:	f88d 8007 	strb.w	r8, [sp, #7]
	switch (fault) {
    3096:	2b09      	cmp	r3, #9
    3098:	d874      	bhi.n	3184 <z_arm_fault+0x138>
    309a:	e8df f003 	tbb	[pc, r3]
    309e:	6805      	.short	0x6805
    30a0:	7373656c 	.word	0x7373656c
    30a4:	70737373 	.word	0x70737373
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    30a8:	4e3f      	ldr	r6, [pc, #252]	; (31a8 <z_arm_fault+0x15c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    30aa:	2145      	movs	r1, #69	; 0x45
    30ac:	4840      	ldr	r0, [pc, #256]	; (31b0 <z_arm_fault+0x164>)
    30ae:	f004 ffe8 	bl	8082 <z_log_minimal_printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    30b2:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    30b4:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    30b8:	f014 0402 	ands.w	r4, r4, #2
    30bc:	d005      	beq.n	30ca <z_arm_fault+0x7e>
		PR_EXC("  Bus fault on vector table read");
    30be:	2145      	movs	r1, #69	; 0x45
    30c0:	483c      	ldr	r0, [pc, #240]	; (31b4 <z_arm_fault+0x168>)
	PR_FAULT_INFO(
    30c2:	f004 ffde 	bl	8082 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    30c6:	2400      	movs	r4, #0
}
    30c8:	e006      	b.n	30d8 <z_arm_fault+0x8c>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    30ca:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    30cc:	2b00      	cmp	r3, #0
    30ce:	da1d      	bge.n	310c <z_arm_fault+0xc0>
		PR_EXC("  Debug event");
    30d0:	2145      	movs	r1, #69	; 0x45
    30d2:	4839      	ldr	r0, [pc, #228]	; (31b8 <z_arm_fault+0x16c>)
    30d4:	f004 ffd5 	bl	8082 <z_log_minimal_printk>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    30d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    30dc:	b99b      	cbnz	r3, 3106 <z_arm_fault+0xba>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    30de:	2268      	movs	r2, #104	; 0x68
    30e0:	4639      	mov	r1, r7
    30e2:	a802      	add	r0, sp, #8
    30e4:	f005 fb36 	bl	8754 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    30e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    30ea:	2d00      	cmp	r5, #0
    30ec:	d057      	beq.n	319e <z_arm_fault+0x152>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    30ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
    30f2:	b922      	cbnz	r2, 30fe <z_arm_fault+0xb2>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    30f4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    30f8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    30fc:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    30fe:	4620      	mov	r0, r4
    3100:	a902      	add	r1, sp, #8
    3102:	f7ff fcf1 	bl	2ae8 <z_arm_fatal_error>
}
    3106:	b01c      	add	sp, #112	; 0x70
    3108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    310c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    310e:	005b      	lsls	r3, r3, #1
    3110:	d5e2      	bpl.n	30d8 <z_arm_fault+0x8c>
		PR_EXC("  Fault escalation (see below)");
    3112:	2145      	movs	r1, #69	; 0x45
    3114:	4829      	ldr	r0, [pc, #164]	; (31bc <z_arm_fault+0x170>)
    3116:	f004 ffb4 	bl	8082 <z_log_minimal_printk>
	uint16_t fault_insn = *(ret_addr - 1);
    311a:	69bb      	ldr	r3, [r7, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    311c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    3120:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3124:	429a      	cmp	r2, r3
    3126:	d009      	beq.n	313c <z_arm_fault+0xf0>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    3128:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    312a:	b2db      	uxtb	r3, r3
    312c:	b16b      	cbz	r3, 314a <z_arm_fault+0xfe>
			reason = mem_manage_fault(esf, 1, recoverable);
    312e:	2001      	movs	r0, #1
    3130:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    3134:	f7ff ff2c 	bl	2f90 <mem_manage_fault.constprop.0>
    3138:	4604      	mov	r4, r0
		break;
    313a:	e7cd      	b.n	30d8 <z_arm_fault+0x8c>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    313c:	2145      	movs	r1, #69	; 0x45
    313e:	683a      	ldr	r2, [r7, #0]
    3140:	481f      	ldr	r0, [pc, #124]	; (31c0 <z_arm_fault+0x174>)
    3142:	f004 ff9e 	bl	8082 <z_log_minimal_printk>
			reason = esf->basic.r0;
    3146:	683c      	ldr	r4, [r7, #0]
    3148:	e7c6      	b.n	30d8 <z_arm_fault+0x8c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    314a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    314c:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    3150:	d005      	beq.n	315e <z_arm_fault+0x112>
			reason = bus_fault(esf, 1, recoverable);
    3152:	2001      	movs	r0, #1
    3154:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    3158:	f7ff fec0 	bl	2edc <bus_fault.constprop.0>
    315c:	e7ec      	b.n	3138 <z_arm_fault+0xec>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    315e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3160:	0c1b      	lsrs	r3, r3, #16
    3162:	041b      	lsls	r3, r3, #16
    3164:	2b00      	cmp	r3, #0
    3166:	d0b7      	beq.n	30d8 <z_arm_fault+0x8c>
		reason = usage_fault(esf);
    3168:	f7ff fe62 	bl	2e30 <usage_fault.constprop.0>
    316c:	e7e4      	b.n	3138 <z_arm_fault+0xec>
		reason = mem_manage_fault(esf, 0, recoverable);
    316e:	2000      	movs	r0, #0
    3170:	f10d 0107 	add.w	r1, sp, #7
    3174:	e7de      	b.n	3134 <z_arm_fault+0xe8>
		reason = bus_fault(esf, 0, recoverable);
    3176:	2000      	movs	r0, #0
    3178:	f10d 0107 	add.w	r1, sp, #7
    317c:	e7ec      	b.n	3158 <z_arm_fault+0x10c>
	PR_FAULT_INFO(
    317e:	2145      	movs	r1, #69	; 0x45
    3180:	4810      	ldr	r0, [pc, #64]	; (31c4 <z_arm_fault+0x178>)
    3182:	e79e      	b.n	30c2 <z_arm_fault+0x76>
	PR_FAULT_INFO("***** %s %d) *****",
    3184:	4910      	ldr	r1, [pc, #64]	; (31c8 <z_arm_fault+0x17c>)
    3186:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    318a:	4a10      	ldr	r2, [pc, #64]	; (31cc <z_arm_fault+0x180>)
    318c:	4810      	ldr	r0, [pc, #64]	; (31d0 <z_arm_fault+0x184>)
    318e:	bf08      	it	eq
    3190:	460a      	moveq	r2, r1
    3192:	f1a4 0310 	sub.w	r3, r4, #16
    3196:	2145      	movs	r1, #69	; 0x45
    3198:	f004 ff73 	bl	8082 <z_log_minimal_printk>
    319c:	e793      	b.n	30c6 <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    319e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    31a2:	f023 0301 	bic.w	r3, r3, #1
    31a6:	e7a9      	b.n	30fc <z_arm_fault+0xb0>
    31a8:	e000ed00 	.word	0xe000ed00
    31ac:	0000a6a0 	.word	0x0000a6a0
    31b0:	0000a6d0 	.word	0x0000a6d0
    31b4:	0000a6ec 	.word	0x0000a6ec
    31b8:	0000a712 	.word	0x0000a712
    31bc:	0000a725 	.word	0x0000a725
    31c0:	0000a749 	.word	0x0000a749
    31c4:	0000a76a 	.word	0x0000a76a
    31c8:	0000a672 	.word	0x0000a672
    31cc:	0000a687 	.word	0x0000a687
    31d0:	0000a793 	.word	0x0000a793

000031d4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    31d4:	4b04      	ldr	r3, [pc, #16]	; (31e8 <z_arm_fault_init+0x14>)
    31d6:	695a      	ldr	r2, [r3, #20]
    31d8:	f042 0210 	orr.w	r2, r2, #16
    31dc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    31de:	695a      	ldr	r2, [r3, #20]
    31e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    31e4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    31e6:	4770      	bx	lr
    31e8:	e000ed00 	.word	0xe000ed00

000031ec <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    31ec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    31f0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    31f4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    31f6:	4672      	mov	r2, lr
	bl z_arm_fault
    31f8:	f7ff ff28 	bl	304c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    31fc:	bd01      	pop	{r0, pc}
    31fe:	bf00      	nop

00003200 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3200:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3202:	2120      	movs	r1, #32
    3204:	4803      	ldr	r0, [pc, #12]	; (3214 <z_arm_interrupt_init+0x14>)
    3206:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3208:	3301      	adds	r3, #1
    320a:	2b41      	cmp	r3, #65	; 0x41
    320c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3210:	d1f9      	bne.n	3206 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3212:	4770      	bx	lr
    3214:	e000e100 	.word	0xe000e100

00003218 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3218:	2000      	movs	r0, #0
    msr CONTROL, r0
    321a:	f380 8814 	msr	CONTROL, r0
    isb
    321e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    3222:	2000      	movs	r0, #0
    msr MSPLIM, r0
    3224:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    3228:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    322c:	f7fe fdd8 	bl	1de0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3230:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3232:	490e      	ldr	r1, [pc, #56]	; (326c <__start+0x54>)
    str r0, [r1]
    3234:	6008      	str	r0, [r1, #0]
    dsb
    3236:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    323a:	480d      	ldr	r0, [pc, #52]	; (3270 <__start+0x58>)
    msr msp, r0
    323c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3240:	f000 f83e 	bl	32c0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3244:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3246:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    324a:	480a      	ldr	r0, [pc, #40]	; (3274 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    324c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3250:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3252:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3256:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    325a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    325c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    325e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3262:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3266:	f7ff fcdd 	bl	2c24 <z_arm_prep_c>
    326a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    326c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3270:	20011688 	.word	0x20011688
    ldr r0, =z_interrupt_stacks
    3274:	200117c8 	.word	0x200117c8

00003278 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    3278:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    327c:	4905      	ldr	r1, [pc, #20]	; (3294 <sys_arch_reboot+0x1c>)
    327e:	4b06      	ldr	r3, [pc, #24]	; (3298 <sys_arch_reboot+0x20>)
    3280:	68ca      	ldr	r2, [r1, #12]
    3282:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3286:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3288:	60cb      	str	r3, [r1, #12]
    328a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    328e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3290:	e7fd      	b.n	328e <sys_arch_reboot+0x16>
    3292:	bf00      	nop
    3294:	e000ed00 	.word	0xe000ed00
    3298:	05fa0004 	.word	0x05fa0004

0000329c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    329c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    329e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    32a0:	4906      	ldr	r1, [pc, #24]	; (32bc <z_arm_clear_arm_mpu_config+0x20>)
    32a2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    32a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    32aa:	4293      	cmp	r3, r2
    32ac:	d100      	bne.n	32b0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    32ae:	4770      	bx	lr
  mpu->RNR = rnr;
    32b0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    32b4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    32b8:	3301      	adds	r3, #1
    32ba:	e7f6      	b.n	32aa <z_arm_clear_arm_mpu_config+0xe>
    32bc:	e000ed00 	.word	0xe000ed00

000032c0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    32c0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    32c2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    32c4:	2400      	movs	r4, #0
    32c6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    32ca:	f7ff ffe7 	bl	329c <z_arm_clear_arm_mpu_config>
    32ce:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    32d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32d4:	4a0b      	ldr	r2, [pc, #44]	; (3304 <z_arm_init_arch_hw_at_boot+0x44>)
    32d6:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    32da:	3301      	adds	r3, #1
    32dc:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    32de:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    32e2:	d1f8      	bne.n	32d6 <z_arm_init_arch_hw_at_boot+0x16>
    32e4:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    32e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32ea:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    32ee:	3301      	adds	r3, #1
    32f0:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    32f2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    32f6:	d1f8      	bne.n	32ea <z_arm_init_arch_hw_at_boot+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
    32f8:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    32fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    32fe:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3302:	bd10      	pop	{r4, pc}
    3304:	e000e100 	.word	0xe000e100

00003308 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3308:	4b08      	ldr	r3, [pc, #32]	; (332c <z_impl_k_thread_abort+0x24>)
    330a:	689b      	ldr	r3, [r3, #8]
    330c:	4283      	cmp	r3, r0
    330e:	d10b      	bne.n	3328 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3310:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3314:	b143      	cbz	r3, 3328 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3316:	4b06      	ldr	r3, [pc, #24]	; (3330 <z_impl_k_thread_abort+0x28>)
    3318:	685a      	ldr	r2, [r3, #4]
    331a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    331e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3326:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3328:	f002 bc2c 	b.w	5b84 <z_thread_abort>
    332c:	2000e6c8 	.word	0x2000e6c8
    3330:	e000ed00 	.word	0xe000ed00

00003334 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
    3334:	b40c      	push	{r2, r3}
    3336:	b510      	push	{r4, lr}
    3338:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    333a:	b909      	cbnz	r1, 3340 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    333c:	f10d 000b 	add.w	r0, sp, #11
    3340:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
    3342:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
    3346:	ab09      	add	r3, sp, #36	; 0x24
    3348:	9a08      	ldr	r2, [sp, #32]
    334a:	9400      	str	r4, [sp, #0]
    334c:	a904      	add	r1, sp, #16
    334e:	4805      	ldr	r0, [pc, #20]	; (3364 <snprintf+0x30>)
    3350:	9303      	str	r3, [sp, #12]
    3352:	f7fe fae5 	bl	1920 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
    3356:	9b04      	ldr	r3, [sp, #16]
    3358:	701c      	strb	r4, [r3, #0]
	return r;
}
    335a:	b006      	add	sp, #24
    335c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3360:	b002      	add	sp, #8
    3362:	4770      	bx	lr
    3364:	0000877d 	.word	0x0000877d

00003368 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3368:	4b08      	ldr	r3, [pc, #32]	; (338c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    336a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    336c:	1ac3      	subs	r3, r0, r3
{
    336e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3370:	4907      	ldr	r1, [pc, #28]	; (3390 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    3372:	109b      	asrs	r3, r3, #2
{
    3374:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3376:	4359      	muls	r1, r3
    3378:	2240      	movs	r2, #64	; 0x40
    337a:	4806      	ldr	r0, [pc, #24]	; (3394 <onoff_stop+0x2c>)
    337c:	f005 fa27 	bl	87ce <stop>
	notify(mgr, res);
    3380:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3382:	4601      	mov	r1, r0
	notify(mgr, res);
    3384:	4620      	mov	r0, r4
}
    3386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    338a:	4718      	bx	r3
    338c:	2000e634 	.word	0x2000e634
    3390:	b6db6db7 	.word	0xb6db6db7
    3394:	00009450 	.word	0x00009450

00003398 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3398:	2340      	movs	r3, #64	; 0x40
{
    339a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    339c:	4c0b      	ldr	r4, [pc, #44]	; (33cc <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    339e:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    33a0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    33a2:	460b      	mov	r3, r1
{
    33a4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    33a6:	490a      	ldr	r1, [pc, #40]	; (33d0 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    33a8:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    33aa:	4361      	muls	r1, r4
{
    33ac:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    33ae:	4a09      	ldr	r2, [pc, #36]	; (33d4 <onoff_start+0x3c>)
    33b0:	4809      	ldr	r0, [pc, #36]	; (33d8 <onoff_start+0x40>)
    33b2:	f005 fa39 	bl	8828 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    33b6:	1e01      	subs	r1, r0, #0
    33b8:	da05      	bge.n	33c6 <onoff_start+0x2e>
		notify(mgr, err);
    33ba:	4630      	mov	r0, r6
    33bc:	462b      	mov	r3, r5
	}
}
    33be:	b002      	add	sp, #8
    33c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    33c4:	4718      	bx	r3
}
    33c6:	b002      	add	sp, #8
    33c8:	bd70      	pop	{r4, r5, r6, pc}
    33ca:	bf00      	nop
    33cc:	2000e634 	.word	0x2000e634
    33d0:	b6db6db7 	.word	0xb6db6db7
    33d4:	00008895 	.word	0x00008895
    33d8:	00009450 	.word	0x00009450

000033dc <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    33dc:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    33de:	2200      	movs	r2, #0
    33e0:	2101      	movs	r1, #1
{
    33e2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    33e4:	2005      	movs	r0, #5
    33e6:	f7ff fc03 	bl	2bf0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    33ea:	480f      	ldr	r0, [pc, #60]	; (3428 <clk_init+0x4c>)
    33ec:	f001 fa06 	bl	47fc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    33f0:	4b0e      	ldr	r3, [pc, #56]	; (342c <clk_init+0x50>)
    33f2:	4298      	cmp	r0, r3
    33f4:	d115      	bne.n	3422 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    33f6:	f005 fe19 	bl	902c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    33fa:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    33fc:	490c      	ldr	r1, [pc, #48]	; (3430 <clk_init+0x54>)
    33fe:	4630      	mov	r0, r6
    3400:	f004 fdac 	bl	7f5c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3404:	2800      	cmp	r0, #0
    3406:	db0b      	blt.n	3420 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3408:	2501      	movs	r5, #1
	struct nrf_clock_control_data *data = dev->data;
    340a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    340c:	4908      	ldr	r1, [pc, #32]	; (3430 <clk_init+0x54>)
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    340e:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3410:	f104 001c 	add.w	r0, r4, #28
    3414:	f004 fda2 	bl	7f5c <onoff_manager_init>
		if (err < 0) {
    3418:	2800      	cmp	r0, #0
    341a:	db01      	blt.n	3420 <clk_init+0x44>
	}

	return 0;
    341c:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    341e:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    3420:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3422:	f06f 0004 	mvn.w	r0, #4
    3426:	e7fb      	b.n	3420 <clk_init+0x44>
    3428:	00003471 	.word	0x00003471
    342c:	0bad0000 	.word	0x0bad0000
    3430:	000098c4 	.word	0x000098c4

00003434 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3434:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3436:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
    3438:	4601      	mov	r1, r0
	sub_data->cb = NULL;
    343a:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
    343c:	434b      	muls	r3, r1
    343e:	480a      	ldr	r0, [pc, #40]	; (3468 <clkstarted_handle.constprop.0+0x34>)
    3440:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    3442:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    3444:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3448:	4418      	add	r0, r3
	sub_data->cb = NULL;
    344a:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
    344c:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
    344e:	f005 f9ab 	bl	87a8 <set_on_state>
	if (callback) {
    3452:	b135      	cbz	r5, 3462 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3454:	462b      	mov	r3, r5
    3456:	9a01      	ldr	r2, [sp, #4]
    3458:	4804      	ldr	r0, [pc, #16]	; (346c <clkstarted_handle.constprop.0+0x38>)
}
    345a:	b002      	add	sp, #8
    345c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3460:	4718      	bx	r3
}
    3462:	b002      	add	sp, #8
    3464:	bd70      	pop	{r4, r5, r6, pc}
    3466:	bf00      	nop
    3468:	2000e634 	.word	0x2000e634
    346c:	00009450 	.word	0x00009450

00003470 <clock_event_handler>:
	switch (event) {
    3470:	b110      	cbz	r0, 3478 <clock_event_handler+0x8>
    3472:	2801      	cmp	r0, #1
    3474:	d004      	beq.n	3480 <clock_event_handler+0x10>
    3476:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3478:	4b03      	ldr	r3, [pc, #12]	; (3488 <clock_event_handler+0x18>)
    347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    347c:	075b      	lsls	r3, r3, #29
    347e:	d101      	bne.n	3484 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3480:	f7ff bfd8 	b.w	3434 <clkstarted_handle.constprop.0>
}
    3484:	4770      	bx	lr
    3486:	bf00      	nop
    3488:	2000e634 	.word	0x2000e634

0000348c <generic_hfclk_start>:
{
    348c:	b508      	push	{r3, lr}
	__asm__ volatile(
    348e:	f04f 0320 	mov.w	r3, #32
    3492:	f3ef 8111 	mrs	r1, BASEPRI
    3496:	f383 8812 	msr	BASEPRI_MAX, r3
    349a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    349e:	4a12      	ldr	r2, [pc, #72]	; (34e8 <generic_hfclk_start+0x5c>)
    34a0:	6813      	ldr	r3, [r2, #0]
    34a2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    34a6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    34aa:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    34ac:	d00c      	beq.n	34c8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    34ae:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    34b2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    34b6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    34ba:	f013 0301 	ands.w	r3, r3, #1
    34be:	d003      	beq.n	34c8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    34c0:	480a      	ldr	r0, [pc, #40]	; (34ec <generic_hfclk_start+0x60>)
    34c2:	f005 f971 	bl	87a8 <set_on_state>
			already_started = true;
    34c6:	2301      	movs	r3, #1
	__asm__ volatile(
    34c8:	f381 8811 	msr	BASEPRI, r1
    34cc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    34d0:	b123      	cbz	r3, 34dc <generic_hfclk_start+0x50>
}
    34d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    34d6:	2000      	movs	r0, #0
    34d8:	f7ff bfac 	b.w	3434 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    34dc:	2001      	movs	r0, #1
}
    34de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    34e2:	f005 bdb1 	b.w	9048 <nrfx_clock_start>
    34e6:	bf00      	nop
    34e8:	2000e684 	.word	0x2000e684
    34ec:	2000e674 	.word	0x2000e674

000034f0 <api_blocking_start>:
{
    34f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    34f2:	2200      	movs	r2, #0
    34f4:	2301      	movs	r3, #1
    34f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    34fa:	466b      	mov	r3, sp
    34fc:	4a08      	ldr	r2, [pc, #32]	; (3520 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    34fe:	f8cd d000 	str.w	sp, [sp]
    3502:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3506:	f005 f9be 	bl	8886 <api_start>
	if (err < 0) {
    350a:	2800      	cmp	r0, #0
    350c:	db05      	blt.n	351a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    350e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3512:	2300      	movs	r3, #0
    3514:	4668      	mov	r0, sp
    3516:	f002 f815 	bl	5544 <z_impl_k_sem_take>
}
    351a:	b005      	add	sp, #20
    351c:	f85d fb04 	ldr.w	pc, [sp], #4
    3520:	000088b5 	.word	0x000088b5

00003524 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3524:	4b07      	ldr	r3, [pc, #28]	; (3544 <generic_hfclk_stop+0x20>)
    3526:	e8d3 2fef 	ldaex	r2, [r3]
    352a:	f022 0102 	bic.w	r1, r2, #2
    352e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    3532:	2800      	cmp	r0, #0
    3534:	d1f7      	bne.n	3526 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3536:	07d3      	lsls	r3, r2, #31
    3538:	d402      	bmi.n	3540 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    353a:	2001      	movs	r0, #1
    353c:	f005 bdc5 	b.w	90ca <nrfx_clock_stop>
}
    3540:	4770      	bx	lr
    3542:	bf00      	nop
    3544:	2000e684 	.word	0x2000e684

00003548 <z_nrf_clock_control_lf_on>:
{
    3548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    354c:	2201      	movs	r2, #1
    354e:	4607      	mov	r7, r0
    3550:	4937      	ldr	r1, [pc, #220]	; (3630 <z_nrf_clock_control_lf_on+0xe8>)
    3552:	e8d1 3fef 	ldaex	r3, [r1]
    3556:	e8c1 2fe0 	stlex	r0, r2, [r1]
    355a:	2800      	cmp	r0, #0
    355c:	d1f9      	bne.n	3552 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    355e:	b933      	cbnz	r3, 356e <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3560:	4934      	ldr	r1, [pc, #208]	; (3634 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    3562:	4835      	ldr	r0, [pc, #212]	; (3638 <z_nrf_clock_control_lf_on+0xf0>)
    3564:	604b      	str	r3, [r1, #4]
    3566:	60cb      	str	r3, [r1, #12]
    3568:	608a      	str	r2, [r1, #8]
    356a:	f004 fd0a 	bl	7f82 <onoff_request>
	switch (start_mode) {
    356e:	1e7b      	subs	r3, r7, #1
    3570:	2b01      	cmp	r3, #1
    3572:	d82f      	bhi.n	35d4 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3574:	2f01      	cmp	r7, #1
    3576:	d107      	bne.n	3588 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3578:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    357c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3580:	f003 0303 	and.w	r3, r3, #3
    3584:	2b02      	cmp	r3, #2
    3586:	d025      	beq.n	35d4 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3588:	f005 fdfd 	bl	9186 <k_is_in_isr>
    358c:	4604      	mov	r4, r0
    358e:	b918      	cbnz	r0, 3598 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    3590:	4b2a      	ldr	r3, [pc, #168]	; (363c <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
    3592:	781b      	ldrb	r3, [r3, #0]
    3594:	2b00      	cmp	r3, #0
    3596:	d144      	bne.n	3622 <z_nrf_clock_control_lf_on+0xda>
	__asm__ volatile(
    3598:	f04f 0320 	mov.w	r3, #32
    359c:	f3ef 8611 	mrs	r6, BASEPRI
    35a0:	f383 8812 	msr	BASEPRI_MAX, r3
    35a4:	f3bf 8f6f 	isb	sy
    35a8:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    35aa:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35ae:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3640 <z_nrf_clock_control_lf_on+0xf8>
    35b2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    35b6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    35ba:	03d2      	lsls	r2, r2, #15
    35bc:	d50c      	bpl.n	35d8 <z_nrf_clock_control_lf_on+0x90>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    35be:	f003 0303 	and.w	r3, r3, #3
    35c2:	2b02      	cmp	r3, #2
    35c4:	d001      	beq.n	35ca <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    35c6:	2f01      	cmp	r7, #1
    35c8:	d106      	bne.n	35d8 <z_nrf_clock_control_lf_on+0x90>
	if (isr_mode) {
    35ca:	b324      	cbz	r4, 3616 <z_nrf_clock_control_lf_on+0xce>
	__asm__ volatile(
    35cc:	f386 8811 	msr	BASEPRI, r6
    35d0:	f3bf 8f6f 	isb	sy
}
    35d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    35d8:	b1c4      	cbz	r4, 360c <z_nrf_clock_control_lf_on+0xc4>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    35da:	4630      	mov	r0, r6
    35dc:	f7ff fa7a 	bl	2ad4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    35e0:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    35e4:	b2db      	uxtb	r3, r3
    35e6:	2b01      	cmp	r3, #1
    35e8:	d1e3      	bne.n	35b2 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    35ea:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    35ee:	2a00      	cmp	r2, #0
    35f0:	d0df      	beq.n	35b2 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35f2:	2200      	movs	r2, #0
    35f4:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    35f8:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    35fc:	2202      	movs	r2, #2
    35fe:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    3602:	2220      	movs	r2, #32
    3604:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3608:	60ab      	str	r3, [r5, #8]
}
    360a:	e7d2      	b.n	35b2 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    360c:	2100      	movs	r1, #0
    360e:	2021      	movs	r0, #33	; 0x21
    3610:	f002 fa98 	bl	5b44 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3614:	e7e4      	b.n	35e0 <z_nrf_clock_control_lf_on+0x98>
    p_reg->INTENSET = mask;
    3616:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    361a:	2202      	movs	r2, #2
    361c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3620:	e7d8      	b.n	35d4 <z_nrf_clock_control_lf_on+0x8c>
    p_reg->INTENCLR = mask;
    3622:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3626:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    3628:	4606      	mov	r6, r0
    362a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    362e:	e7bc      	b.n	35aa <z_nrf_clock_control_lf_on+0x62>
    3630:	2000e688 	.word	0x2000e688
    3634:	2000e624 	.word	0x2000e624
    3638:	2000e650 	.word	0x2000e650
    363c:	2000ee84 	.word	0x2000ee84
    3640:	e000e100 	.word	0xe000e100

00003644 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3644:	b530      	push	{r4, r5, lr}
	return port->config;
    3646:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3648:	f001 051f 	and.w	r5, r1, #31
    364c:	7b04      	ldrb	r4, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    364e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3652:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    3656:	b085      	sub	sp, #20
    3658:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    365c:	d105      	bne.n	366a <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
    365e:	4628      	mov	r0, r5
    3660:	f001 fb5a 	bl	4d18 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    3664:	2000      	movs	r0, #0
}
    3666:	b005      	add	sp, #20
    3668:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
    366a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    366e:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3672:	d12e      	bne.n	36d2 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3678:	bf0c      	ite	eq
    367a:	2304      	moveq	r3, #4
    367c:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    367e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3682:	6883      	ldr	r3, [r0, #8]
    3684:	fa23 f101 	lsr.w	r1, r3, r1
    3688:	07c9      	lsls	r1, r1, #31
    368a:	d414      	bmi.n	36b6 <gpio_nrfx_pin_interrupt_configure+0x72>
    368c:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    3690:	d111      	bne.n	36b6 <gpio_nrfx_pin_interrupt_configure+0x72>

NRF_STATIC_INLINE nrf_gpio_pin_dir_t nrf_gpio_pin_dir_get(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3692:	4a1b      	ldr	r2, [pc, #108]	; (3700 <gpio_nrfx_pin_interrupt_configure+0xbc>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3694:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3698:	3380      	adds	r3, #128	; 0x80
    369a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    369e:	07db      	lsls	r3, r3, #31
    36a0:	d409      	bmi.n	36b6 <gpio_nrfx_pin_interrupt_configure+0x72>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    36a2:	f10d 0407 	add.w	r4, sp, #7
    36a6:	4621      	mov	r1, r4
    36a8:	4628      	mov	r0, r5
    36aa:	f001 fa9d 	bl	4be8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    36ae:	4b15      	ldr	r3, [pc, #84]	; (3704 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    36b0:	4298      	cmp	r0, r3
    36b2:	d019      	beq.n	36e8 <gpio_nrfx_pin_interrupt_configure+0xa4>
		trigger_config.p_in_channel = &ch;
    36b4:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    36b6:	2300      	movs	r3, #0
    36b8:	4628      	mov	r0, r5
    36ba:	4619      	mov	r1, r3
    36bc:	aa02      	add	r2, sp, #8
    36be:	f001 f969 	bl	4994 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    36c2:	4b11      	ldr	r3, [pc, #68]	; (3708 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    36c4:	4298      	cmp	r0, r3
    36c6:	d118      	bne.n	36fa <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    36c8:	2101      	movs	r1, #1
    36ca:	4628      	mov	r0, r5
    36cc:	f001 fae0 	bl	4c90 <nrfx_gpiote_trigger_enable>
    36d0:	e7c8      	b.n	3664 <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    36d2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    36d6:	d005      	beq.n	36e4 <gpio_nrfx_pin_interrupt_configure+0xa0>
    36d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    36dc:	bf0c      	ite	eq
    36de:	2302      	moveq	r3, #2
    36e0:	2301      	movne	r3, #1
    36e2:	e7cc      	b.n	367e <gpio_nrfx_pin_interrupt_configure+0x3a>
    36e4:	2303      	movs	r3, #3
    36e6:	e7ca      	b.n	367e <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
    36e8:	4620      	mov	r0, r4
    36ea:	f001 facb 	bl	4c84 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    36ee:	4b06      	ldr	r3, [pc, #24]	; (3708 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    36f0:	4298      	cmp	r0, r3
    36f2:	d0df      	beq.n	36b4 <gpio_nrfx_pin_interrupt_configure+0x70>
				return -ENOMEM;
    36f4:	f06f 000b 	mvn.w	r0, #11
    36f8:	e7b5      	b.n	3666 <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
    36fa:	f06f 0015 	mvn.w	r0, #21
    36fe:	e7b2      	b.n	3666 <gpio_nrfx_pin_interrupt_configure+0x22>
    3700:	50842500 	.word	0x50842500
    3704:	0bad0004 	.word	0x0bad0004
    3708:	0bad0000 	.word	0x0bad0000

0000370c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    370c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    370e:	f001 faa9 	bl	4c64 <nrfx_gpiote_is_init>
    3712:	4604      	mov	r4, r0
    3714:	b968      	cbnz	r0, 3732 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3716:	f001 fa7d 	bl	4c14 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    371a:	4b08      	ldr	r3, [pc, #32]	; (373c <gpio_nrfx_init+0x30>)
    371c:	4298      	cmp	r0, r3
    371e:	d10a      	bne.n	3736 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3720:	4621      	mov	r1, r4
    3722:	4807      	ldr	r0, [pc, #28]	; (3740 <gpio_nrfx_init+0x34>)
    3724:	f001 fa5a 	bl	4bdc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3728:	4622      	mov	r2, r4
    372a:	2105      	movs	r1, #5
    372c:	200d      	movs	r0, #13
    372e:	f7ff fa5f 	bl	2bf0 <z_arm_irq_priority_set>
		return 0;
    3732:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3734:	bd10      	pop	{r4, pc}
		return -EIO;
    3736:	f06f 0004 	mvn.w	r0, #4
    373a:	e7fb      	b.n	3734 <gpio_nrfx_init+0x28>
    373c:	0bad0000 	.word	0x0bad0000
    3740:	00003745 	.word	0x00003745

00003744 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3744:	0943      	lsrs	r3, r0, #5
{
    3746:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3748:	d111      	bne.n	376e <nrfx_gpio_handler+0x2a>
	return list->head;
    374a:	4b09      	ldr	r3, [pc, #36]	; (3770 <nrfx_gpio_handler+0x2c>)
    374c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    374e:	b171      	cbz	r1, 376e <nrfx_gpio_handler+0x2a>
	gpio_fire_callbacks(list, port, BIT(pin));
    3750:	2301      	movs	r3, #1
	return node->next;
    3752:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3754:	4e07      	ldr	r6, [pc, #28]	; (3774 <nrfx_gpio_handler+0x30>)
    3756:	fa03 f500 	lsl.w	r5, r3, r0
		if (cb->pin_mask & pins) {
    375a:	688a      	ldr	r2, [r1, #8]
    375c:	402a      	ands	r2, r5
    375e:	d002      	beq.n	3766 <nrfx_gpio_handler+0x22>
			cb->handler(port, cb, cb->pin_mask & pins);
    3760:	4630      	mov	r0, r6
    3762:	684b      	ldr	r3, [r1, #4]
    3764:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3766:	b114      	cbz	r4, 376e <nrfx_gpio_handler+0x2a>
    3768:	4621      	mov	r1, r4
    376a:	6824      	ldr	r4, [r4, #0]
    376c:	e7f5      	b.n	375a <nrfx_gpio_handler+0x16>
}
    376e:	bd70      	pop	{r4, r5, r6, pc}
    3770:	2000e68c 	.word	0x2000e68c
    3774:	00009468 	.word	0x00009468

00003778 <gpio_nrfx_pin_configure>:
{
    3778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    377c:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3780:	f001 061f 	and.w	r6, r1, #31
    3784:	f898 300c 	ldrb.w	r3, [r8, #12]
{
    3788:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    378a:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
    378e:	4614      	mov	r4, r2
    3790:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3792:	4630      	mov	r0, r6
    3794:	f10d 0103 	add.w	r1, sp, #3
    3798:	f001 fa26 	bl	4be8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    379c:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    37a0:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    37a2:	d10b      	bne.n	37bc <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    37a4:	4630      	mov	r0, r6
    37a6:	f001 fadf 	bl	4d68 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    37aa:	4b42      	ldr	r3, [pc, #264]	; (38b4 <gpio_nrfx_pin_configure+0x13c>)
    37ac:	4599      	cmp	r9, r3
    37ae:	d103      	bne.n	37b8 <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
    37b0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    37b4:	f001 fa60 	bl	4c78 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    37b8:	2000      	movs	r0, #0
    37ba:	e056      	b.n	386a <gpio_nrfx_pin_configure+0xf2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    37bc:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    37be:	4630      	mov	r0, r6
    37c0:	4619      	mov	r1, r3
    37c2:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    37c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    37c8:	f001 f8e4 	bl	4994 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    37cc:	4b39      	ldr	r3, [pc, #228]	; (38b4 <gpio_nrfx_pin_configure+0x13c>)
    37ce:	4298      	cmp	r0, r3
    37d0:	d002      	beq.n	37d8 <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    37d2:	f06f 0015 	mvn.w	r0, #21
    37d6:	e048      	b.n	386a <gpio_nrfx_pin_configure+0xf2>
	if (free_ch) {
    37d8:	4581      	cmp	r9, r0
    37da:	d103      	bne.n	37e4 <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
    37dc:	f89d 0003 	ldrb.w	r0, [sp, #3]
    37e0:	f001 fa4a 	bl	4c78 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    37e4:	03a5      	lsls	r5, r4, #14
    37e6:	d552      	bpl.n	388e <gpio_nrfx_pin_configure+0x116>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    37e8:	f240 3306 	movw	r3, #774	; 0x306
    37ec:	4023      	ands	r3, r4
    37ee:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    37f2:	d03d      	beq.n	3870 <gpio_nrfx_pin_configure+0xf8>
    37f4:	d80c      	bhi.n	3810 <gpio_nrfx_pin_configure+0x98>
    37f6:	2b06      	cmp	r3, #6
    37f8:	d015      	beq.n	3826 <gpio_nrfx_pin_configure+0xae>
    37fa:	d804      	bhi.n	3806 <gpio_nrfx_pin_configure+0x8e>
    37fc:	b19b      	cbz	r3, 3826 <gpio_nrfx_pin_configure+0xae>
    37fe:	2b02      	cmp	r3, #2
    3800:	d1e7      	bne.n	37d2 <gpio_nrfx_pin_configure+0x5a>
    3802:	2304      	movs	r3, #4
    3804:	e00f      	b.n	3826 <gpio_nrfx_pin_configure+0xae>
    3806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    380a:	d1e2      	bne.n	37d2 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
    380c:	2301      	movs	r3, #1
    380e:	e00a      	b.n	3826 <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3810:	f240 2202 	movw	r2, #514	; 0x202
    3814:	4293      	cmp	r3, r2
    3816:	d02d      	beq.n	3874 <gpio_nrfx_pin_configure+0xfc>
    3818:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    381c:	d02c      	beq.n	3878 <gpio_nrfx_pin_configure+0x100>
    381e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3822:	d1d6      	bne.n	37d2 <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
    3824:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3826:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    382a:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    382e:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3832:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3834:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    3838:	bf4c      	ite	mi
    383a:	2303      	movmi	r3, #3
		return NRF_GPIO_PIN_PULLDOWN;
    383c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3840:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3842:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3846:	d519      	bpl.n	387c <gpio_nrfx_pin_configure+0x104>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3848:	2101      	movs	r1, #1
    384a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    384e:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
    3852:	609f      	str	r7, [r3, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3854:	2200      	movs	r2, #0
    3856:	4630      	mov	r0, r6
    3858:	a901      	add	r1, sp, #4
    385a:	f001 f945 	bl	4ae8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    385e:	4b15      	ldr	r3, [pc, #84]	; (38b4 <gpio_nrfx_pin_configure+0x13c>)
    3860:	4298      	cmp	r0, r3
    3862:	bf14      	ite	ne
    3864:	f06f 0015 	mvnne.w	r0, #21
    3868:	2000      	moveq	r0, #0
}
    386a:	b005      	add	sp, #20
    386c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
    3870:	2307      	movs	r3, #7
    3872:	e7d8      	b.n	3826 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
    3874:	2305      	movs	r3, #5
    3876:	e7d6      	b.n	3826 <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
    3878:	2303      	movs	r3, #3
    387a:	e7d4      	b.n	3826 <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    387c:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    387e:	bf41      	itttt	mi
    3880:	2101      	movmi	r1, #1
    3882:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
    3886:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
    388a:	60df      	strmi	r7, [r3, #12]
}
    388c:	e7e2      	b.n	3854 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    388e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3890:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3894:	bf4c      	ite	mi
    3896:	2403      	movmi	r4, #3
    3898:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    389c:	461a      	mov	r2, r3
    389e:	4630      	mov	r0, r6
    38a0:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    38a2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    38a6:	f001 f875 	bl	4994 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    38aa:	4b02      	ldr	r3, [pc, #8]	; (38b4 <gpio_nrfx_pin_configure+0x13c>)
    38ac:	4298      	cmp	r0, r3
    38ae:	d083      	beq.n	37b8 <gpio_nrfx_pin_configure+0x40>
    38b0:	e78f      	b.n	37d2 <gpio_nrfx_pin_configure+0x5a>
    38b2:	bf00      	nop
    38b4:	0bad0000 	.word	0x0bad0000

000038b8 <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
    38b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38ba:	6845      	ldr	r5, [r0, #4]
    38bc:	4606      	mov	r6, r0
	if (!device_is_ready(cfg->enable.port)) {
    38be:	68e8      	ldr	r0, [r5, #12]
    38c0:	f005 fc0f 	bl	90e2 <z_device_is_ready>
    38c4:	b978      	cbnz	r0, 38e6 <regulator_fixed_init_sync+0x2e>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
    38c6:	68eb      	ldr	r3, [r5, #12]
    38c8:	2145      	movs	r1, #69	; 0x45
    38ca:	681a      	ldr	r2, [r3, #0]
    38cc:	481c      	ldr	r0, [pc, #112]	; (3940 <regulator_fixed_init_sync+0x88>)
    38ce:	f004 fbd8 	bl	8082 <z_log_minimal_printk>
		return -ENODEV;
    38d2:	f06f 0512 	mvn.w	r5, #18
	__ASSERT(cfg->startup_delay_us == 0,
		 "sync not valid with startup delay");
	__ASSERT(cfg->off_on_delay_us == 0,
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);
    38d6:	462b      	mov	r3, r5
    38d8:	2149      	movs	r1, #73	; 0x49
    38da:	6832      	ldr	r2, [r6, #0]
    38dc:	4819      	ldr	r0, [pc, #100]	; (3944 <regulator_fixed_init_sync+0x8c>)
    38de:	f004 fbd0 	bl	8082 <z_log_minimal_printk>

	return rc;
}
    38e2:	4628      	mov	r0, r5
    38e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (on) {
    38e6:	7d2c      	ldrb	r4, [r5, #20]
				  spec->dt_flags | extra_flags);
    38e8:	8a6b      	ldrh	r3, [r5, #18]
    38ea:	f014 0403 	ands.w	r4, r4, #3
		flags = GPIO_OUTPUT_ACTIVE;
    38ee:	bf16      	itet	ne
    38f0:	f44f 12d0 	movne.w	r2, #1703936	; 0x1a0000
		flags = GPIO_OUTPUT_INACTIVE;
    38f4:	f44f 12b0 	moveq.w	r2, #1441792	; 0x160000
		delay_us = cfg->startup_delay_us;
    38f8:	686c      	ldrne	r4, [r5, #4]
	return gpio_pin_configure(spec->port,
    38fa:	68e8      	ldr	r0, [r5, #12]
    38fc:	7c29      	ldrb	r1, [r5, #16]
    38fe:	4313      	orrs	r3, r2
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3900:	2701      	movs	r7, #1
	struct gpio_driver_data *data =
    3902:	f8d0 c010 	ldr.w	ip, [r0, #16]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    3906:	07da      	lsls	r2, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3908:	f8dc 5000 	ldr.w	r5, [ip]
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    390c:	bf48      	it	mi
    390e:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
	const struct gpio_driver_api *api =
    3912:	f8d0 e008 	ldr.w	lr, [r0, #8]
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    3916:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    391a:	408f      	lsls	r7, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    391c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    391e:	bf4c      	ite	mi
    3920:	433d      	orrmi	r5, r7
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3922:	43bd      	bicpl	r5, r7
    3924:	f8cc 5000 	str.w	r5, [ip]
	return api->pin_configure(port, pin, flags);
    3928:	f8de 3000 	ldr.w	r3, [lr]
    392c:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
    392e:	4605      	mov	r5, r0
    3930:	2800      	cmp	r0, #0
    3932:	d1d0      	bne.n	38d6 <regulator_fixed_init_sync+0x1e>
    3934:	2c00      	cmp	r4, #0
    3936:	d0ce      	beq.n	38d6 <regulator_fixed_init_sync+0x1e>
	z_impl_k_busy_wait(usec_to_wait);
    3938:	4620      	mov	r0, r4
    393a:	f005 fd2c 	bl	9396 <z_impl_k_busy_wait>
}
    393e:	e7ca      	b.n	38d6 <regulator_fixed_init_sync+0x1e>
    3940:	0000a7dc 	.word	0x0000a7dc
    3944:	0000a7f9 	.word	0x0000a7f9

00003948 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    3948:	4b02      	ldr	r3, [pc, #8]	; (3954 <flash_nrf_pages_layout+0xc>)
    394a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    394c:	2301      	movs	r3, #1
    394e:	6013      	str	r3, [r2, #0]
}
    3950:	4770      	bx	lr
    3952:	bf00      	nop
    3954:	2000e69c 	.word	0x2000e69c

00003958 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    3958:	4800      	ldr	r0, [pc, #0]	; (395c <flash_nrf_get_parameters+0x4>)
    395a:	4770      	bx	lr
    395c:	00009938 	.word	0x00009938

00003960 <flash_nrf_read>:
{
    3960:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3962:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
    3964:	4619      	mov	r1, r3
    3966:	4620      	mov	r0, r4
    3968:	9301      	str	r3, [sp, #4]
{
    396a:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
    396c:	f005 f844 	bl	89f8 <is_regular_addr_valid>
    3970:	9b01      	ldr	r3, [sp, #4]
    3972:	b940      	cbnz	r0, 3986 <flash_nrf_read+0x26>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3974:	4809      	ldr	r0, [pc, #36]	; (399c <flash_nrf_read+0x3c>)
    3976:	4622      	mov	r2, r4
    3978:	2145      	movs	r1, #69	; 0x45
    397a:	f004 fb82 	bl	8082 <z_log_minimal_printk>
    397e:	f06f 0015 	mvn.w	r0, #21
}
    3982:	b003      	add	sp, #12
    3984:	bd30      	pop	{r4, r5, pc}
	if (!len) {
    3986:	b133      	cbz	r3, 3996 <flash_nrf_read+0x36>
	memcpy(data, (void *)addr, len);
    3988:	461a      	mov	r2, r3
    398a:	4621      	mov	r1, r4
    398c:	4628      	mov	r0, r5
    398e:	f004 fee1 	bl	8754 <memcpy>
	return 0;
    3992:	2000      	movs	r0, #0
    3994:	e7f5      	b.n	3982 <flash_nrf_read+0x22>
		return 0;
    3996:	4618      	mov	r0, r3
    3998:	e7f3      	b.n	3982 <flash_nrf_read+0x22>
    399a:	bf00      	nop
    399c:	0000a82e 	.word	0x0000a82e

000039a0 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    39a0:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    39a2:	2201      	movs	r2, #1
    39a4:	4806      	ldr	r0, [pc, #24]	; (39c0 <nrf_flash_init+0x20>)
    39a6:	4611      	mov	r1, r2
    39a8:	f005 fc10 	bl	91cc <z_impl_k_sem_init>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    39ac:	f005 fb95 	bl	90da <nrfx_nvmc_flash_page_count_get>
    39b0:	4c04      	ldr	r4, [pc, #16]	; (39c4 <nrf_flash_init+0x24>)
    39b2:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    39b4:	f005 fb8e 	bl	90d4 <nrfx_nvmc_flash_page_size_get>
    39b8:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    39ba:	2000      	movs	r0, #0
    39bc:	bd10      	pop	{r4, pc}
    39be:	bf00      	nop
    39c0:	2000e6a4 	.word	0x2000e6a4
    39c4:	2000e69c 	.word	0x2000e69c

000039c8 <flash_nrf_erase>:
{
    39c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39ca:	460e      	mov	r6, r1
    39cc:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    39ce:	f005 fb81 	bl	90d4 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    39d2:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    39d4:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    39d6:	4630      	mov	r0, r6
    39d8:	f005 f80e 	bl	89f8 <is_regular_addr_valid>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    39dc:	4637      	mov	r7, r6
	if (is_regular_addr_valid(addr, size)) {
    39de:	b348      	cbz	r0, 3a34 <flash_nrf_erase+0x6c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    39e0:	fbb6 f3f5 	udiv	r3, r6, r5
    39e4:	fb05 6313 	mls	r3, r5, r3, r6
    39e8:	b923      	cbnz	r3, 39f4 <flash_nrf_erase+0x2c>
    39ea:	fbb4 f3f5 	udiv	r3, r4, r5
    39ee:	fb05 4013 	mls	r0, r5, r3, r4
    39f2:	b140      	cbz	r0, 3a06 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    39f4:	4623      	mov	r3, r4
    39f6:	4632      	mov	r2, r6
    39f8:	2145      	movs	r1, #69	; 0x45
    39fa:	4811      	ldr	r0, [pc, #68]	; (3a40 <flash_nrf_erase+0x78>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    39fc:	f004 fb41 	bl	8082 <z_log_minimal_printk>
		return -EINVAL;
    3a00:	f06f 0015 	mvn.w	r0, #21
    3a04:	e015      	b.n	3a32 <flash_nrf_erase+0x6a>
		if (!n_pages) {
    3a06:	42a5      	cmp	r5, r4
    3a08:	d813      	bhi.n	3a32 <flash_nrf_erase+0x6a>
	return z_impl_k_sem_take(sem, timeout);
    3a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a12:	480c      	ldr	r0, [pc, #48]	; (3a44 <flash_nrf_erase+0x7c>)
    3a14:	f001 fd96 	bl	5544 <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    3a18:	f005 fb5c 	bl	90d4 <nrfx_nvmc_flash_page_size_get>
    3a1c:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    3a1e:	4638      	mov	r0, r7
    3a20:	f001 fa84 	bl	4f2c <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    3a24:	1b64      	subs	r4, r4, r5
    3a26:	442f      	add	r7, r5
    3a28:	d1f9      	bne.n	3a1e <flash_nrf_erase+0x56>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3a2a:	4806      	ldr	r0, [pc, #24]	; (3a44 <flash_nrf_erase+0x7c>)
    3a2c:	f001 fd6a 	bl	5504 <z_impl_k_sem_give>
	return ret;
    3a30:	4620      	mov	r0, r4
}
    3a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3a34:	4623      	mov	r3, r4
    3a36:	4632      	mov	r2, r6
    3a38:	2145      	movs	r1, #69	; 0x45
    3a3a:	4803      	ldr	r0, [pc, #12]	; (3a48 <flash_nrf_erase+0x80>)
    3a3c:	e7de      	b.n	39fc <flash_nrf_erase+0x34>
    3a3e:	bf00      	nop
    3a40:	0000a850 	.word	0x0000a850
    3a44:	2000e6a4 	.word	0x2000e6a4
    3a48:	0000a82e 	.word	0x0000a82e

00003a4c <flash_nrf_write>:
{
    3a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a4e:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    3a50:	4619      	mov	r1, r3
    3a52:	4630      	mov	r0, r6
{
    3a54:	4617      	mov	r7, r2
    3a56:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    3a58:	f004 ffce 	bl	89f8 <is_regular_addr_valid>
    3a5c:	b940      	cbnz	r0, 3a70 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    3a5e:	4623      	mov	r3, r4
    3a60:	4632      	mov	r2, r6
    3a62:	2145      	movs	r1, #69	; 0x45
    3a64:	4817      	ldr	r0, [pc, #92]	; (3ac4 <flash_nrf_write+0x78>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3a66:	f004 fb0c 	bl	8082 <z_log_minimal_printk>
		return -EINVAL;
    3a6a:	f06f 0015 	mvn.w	r0, #21
}
    3a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    3a70:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    3a74:	f015 0503 	ands.w	r5, r5, #3
    3a78:	d004      	beq.n	3a84 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    3a7a:	4623      	mov	r3, r4
    3a7c:	4632      	mov	r2, r6
    3a7e:	2145      	movs	r1, #69	; 0x45
    3a80:	4811      	ldr	r0, [pc, #68]	; (3ac8 <flash_nrf_write+0x7c>)
    3a82:	e7f0      	b.n	3a66 <flash_nrf_write+0x1a>
	if (!len) {
    3a84:	b1dc      	cbz	r4, 3abe <flash_nrf_write+0x72>
	return z_impl_k_sem_take(sem, timeout);
    3a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3a8e:	480f      	ldr	r0, [pc, #60]	; (3acc <flash_nrf_write+0x80>)
    3a90:	f001 fd58 	bl	5544 <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
    3a94:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    3a98:	42ac      	cmp	r4, r5
    3a9a:	eb05 0006 	add.w	r0, r5, r6
    3a9e:	d109      	bne.n	3ab4 <flash_nrf_write+0x68>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3aa0:	4a0b      	ldr	r2, [pc, #44]	; (3ad0 <flash_nrf_write+0x84>)
    3aa2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    3aa6:	07db      	lsls	r3, r3, #31
    3aa8:	d5fb      	bpl.n	3aa2 <flash_nrf_write+0x56>
	z_impl_k_sem_give(sem);
    3aaa:	4808      	ldr	r0, [pc, #32]	; (3acc <flash_nrf_write+0x80>)
    3aac:	f001 fd2a 	bl	5504 <z_impl_k_sem_give>
	return ret;
    3ab0:	2000      	movs	r0, #0
}
    3ab2:	e7dc      	b.n	3a6e <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
    3ab4:	5979      	ldr	r1, [r7, r5]
    3ab6:	f001 fa57 	bl	4f68 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    3aba:	3504      	adds	r5, #4
}
    3abc:	e7ec      	b.n	3a98 <flash_nrf_write+0x4c>
		return 0;
    3abe:	4620      	mov	r0, r4
    3ac0:	e7d5      	b.n	3a6e <flash_nrf_write+0x22>
    3ac2:	bf00      	nop
    3ac4:	0000a82e 	.word	0x0000a82e
    3ac8:	0000a874 	.word	0x0000a874
    3acc:	2000e6a4 	.word	0x2000e6a4
    3ad0:	50039000 	.word	0x50039000

00003ad4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3ad6:	794b      	ldrb	r3, [r1, #5]
    3ad8:	2b01      	cmp	r3, #1
    3ada:	d026      	beq.n	3b2a <uarte_nrfx_configure+0x56>
    3adc:	2b03      	cmp	r3, #3
    3ade:	d121      	bne.n	3b24 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3ae0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3ae2:	798b      	ldrb	r3, [r1, #6]
    3ae4:	2b03      	cmp	r3, #3
    3ae6:	d11d      	bne.n	3b24 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3ae8:	79cc      	ldrb	r4, [r1, #7]
    3aea:	b10c      	cbz	r4, 3af0 <uarte_nrfx_configure+0x1c>
    3aec:	2c01      	cmp	r4, #1
    3aee:	d119      	bne.n	3b24 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3af0:	790a      	ldrb	r2, [r1, #4]
    3af2:	b112      	cbz	r2, 3afa <uarte_nrfx_configure+0x26>
    3af4:	2a02      	cmp	r2, #2
    3af6:	d115      	bne.n	3b24 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3af8:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3afa:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3afc:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3afe:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3b02:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3b04:	d065      	beq.n	3bd2 <uarte_nrfx_configure+0xfe>
    3b06:	d82d      	bhi.n	3b64 <uarte_nrfx_configure+0x90>
    3b08:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3b0c:	d064      	beq.n	3bd8 <uarte_nrfx_configure+0x104>
    3b0e:	d816      	bhi.n	3b3e <uarte_nrfx_configure+0x6a>
    3b10:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3b14:	d062      	beq.n	3bdc <uarte_nrfx_configure+0x108>
    3b16:	d80a      	bhi.n	3b2e <uarte_nrfx_configure+0x5a>
    3b18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3b1c:	d061      	beq.n	3be2 <uarte_nrfx_configure+0x10e>
    3b1e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3b22:	d061      	beq.n	3be8 <uarte_nrfx_configure+0x114>
    3b24:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3b28:	e052      	b.n	3bd0 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3b2a:	2600      	movs	r6, #0
    3b2c:	e7d9      	b.n	3ae2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3b2e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3b32:	d05c      	beq.n	3bee <uarte_nrfx_configure+0x11a>
    3b34:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3b38:	d1f4      	bne.n	3b24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3b3a:	4b37      	ldr	r3, [pc, #220]	; (3c18 <uarte_nrfx_configure+0x144>)
    3b3c:	e03c      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3b3e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3b42:	d057      	beq.n	3bf4 <uarte_nrfx_configure+0x120>
    3b44:	d807      	bhi.n	3b56 <uarte_nrfx_configure+0x82>
    3b46:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3b4a:	d055      	beq.n	3bf8 <uarte_nrfx_configure+0x124>
    3b4c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3b50:	d1e8      	bne.n	3b24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3b52:	4b32      	ldr	r3, [pc, #200]	; (3c1c <uarte_nrfx_configure+0x148>)
    3b54:	e030      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3b56:	f647 2712 	movw	r7, #31250	; 0x7a12
    3b5a:	42bb      	cmp	r3, r7
    3b5c:	d1e2      	bne.n	3b24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3b5e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3b62:	e029      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3b64:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3b68:	d048      	beq.n	3bfc <uarte_nrfx_configure+0x128>
    3b6a:	d813      	bhi.n	3b94 <uarte_nrfx_configure+0xc0>
    3b6c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3b70:	d047      	beq.n	3c02 <uarte_nrfx_configure+0x12e>
    3b72:	d809      	bhi.n	3b88 <uarte_nrfx_configure+0xb4>
    3b74:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3b78:	42bb      	cmp	r3, r7
    3b7a:	d044      	beq.n	3c06 <uarte_nrfx_configure+0x132>
    3b7c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3b80:	d1d0      	bne.n	3b24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3b82:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3b86:	e017      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3b88:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3b8c:	d1ca      	bne.n	3b24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3b8e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3b92:	e011      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3b94:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3b98:	d038      	beq.n	3c0c <uarte_nrfx_configure+0x138>
    3b9a:	d808      	bhi.n	3bae <uarte_nrfx_configure+0xda>
    3b9c:	4f20      	ldr	r7, [pc, #128]	; (3c20 <uarte_nrfx_configure+0x14c>)
    3b9e:	42bb      	cmp	r3, r7
    3ba0:	d037      	beq.n	3c12 <uarte_nrfx_configure+0x13e>
    3ba2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3ba6:	d1bd      	bne.n	3b24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3ba8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3bac:	e004      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3bae:	4f1d      	ldr	r7, [pc, #116]	; (3c24 <uarte_nrfx_configure+0x150>)
    3bb0:	42bb      	cmp	r3, r7
    3bb2:	d1b7      	bne.n	3b24 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3bb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3bb8:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->stop
#endif
#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
                    | (uint32_t)p_cfg->paritytype
#endif
                    | (uint32_t)p_cfg->hwfc;
    3bba:	4334      	orrs	r4, r6
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3bbc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    3bc0:	4322      	orrs	r2, r4
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3bc2:	1d03      	adds	r3, r0, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3bc4:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3bc8:	c903      	ldmia	r1, {r0, r1}
    3bca:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3bce:	2000      	movs	r0, #0
}
    3bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3bd2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3bd6:	e7ef      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3bd8:	4b13      	ldr	r3, [pc, #76]	; (3c28 <uarte_nrfx_configure+0x154>)
    3bda:	e7ed      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3bdc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3be0:	e7ea      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3be2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3be6:	e7e7      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3be8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3bec:	e7e4      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3bee:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3bf2:	e7e1      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3bf4:	4b0d      	ldr	r3, [pc, #52]	; (3c2c <uarte_nrfx_configure+0x158>)
    3bf6:	e7df      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3bf8:	4b0d      	ldr	r3, [pc, #52]	; (3c30 <uarte_nrfx_configure+0x15c>)
    3bfa:	e7dd      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3bfc:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3c00:	e7da      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3c02:	4b0c      	ldr	r3, [pc, #48]	; (3c34 <uarte_nrfx_configure+0x160>)
    3c04:	e7d8      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3c06:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3c0a:	e7d5      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3c0c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3c10:	e7d2      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3c12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3c16:	e7cf      	b.n	3bb8 <uarte_nrfx_configure+0xe4>
    3c18:	0013b000 	.word	0x0013b000
    3c1c:	004ea000 	.word	0x004ea000
    3c20:	0003d090 	.word	0x0003d090
    3c24:	000f4240 	.word	0x000f4240
    3c28:	00275000 	.word	0x00275000
    3c2c:	0075c000 	.word	0x0075c000
    3c30:	003af000 	.word	0x003af000
    3c34:	013a9000 	.word	0x013a9000

00003c38 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3c38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3c3c:	4607      	mov	r7, r0
    3c3e:	2200      	movs	r2, #0
    3c40:	2101      	movs	r1, #1
    3c42:	2008      	movs	r0, #8
    3c44:	f7fe ffd4 	bl	2bf0 <z_arm_irq_priority_set>
    3c48:	2008      	movs	r0, #8
    3c4a:	f7fe ffb3 	bl	2bb4 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3c4e:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    3c50:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    3c54:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    3c56:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    3c5a:	f8d8 900c 	ldr.w	r9, [r8, #12]
    3c5e:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3c62:	4648      	mov	r0, r9
	data->dev = dev;
    3c64:	6037      	str	r7, [r6, #0]
    3c66:	aa01      	add	r2, sp, #4
    3c68:	f005 f8ae 	bl	8dc8 <pinctrl_lookup_state>
	if (ret < 0) {
    3c6c:	1e05      	subs	r5, r0, #0
    3c6e:	db1f      	blt.n	3cb0 <uarte_0_init+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3c70:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3c72:	f8d9 2000 	ldr.w	r2, [r9]
    3c76:	7919      	ldrb	r1, [r3, #4]
    3c78:	6818      	ldr	r0, [r3, #0]
    3c7a:	f000 fb07 	bl	428c <pinctrl_configure_pins>
	if (err < 0) {
    3c7e:	1e05      	subs	r5, r0, #0
    3c80:	db16      	blt.n	3cb0 <uarte_0_init+0x78>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    3c82:	4638      	mov	r0, r7
    3c84:	1d31      	adds	r1, r6, #4
    3c86:	f7ff ff25 	bl	3ad4 <uarte_nrfx_configure>
	if (err) {
    3c8a:	4605      	mov	r5, r0
    3c8c:	b980      	cbnz	r0, 3cb0 <uarte_0_init+0x78>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3c8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3c92:	0799      	lsls	r1, r3, #30
    3c94:	d51c      	bpl.n	3cd0 <uarte_0_init+0x98>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3c96:	f106 001c 	add.w	r0, r6, #28
    3c9a:	f000 fdf3 	bl	4884 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3c9e:	4b21      	ldr	r3, [pc, #132]	; (3d24 <uarte_0_init+0xec>)
    3ca0:	4298      	cmp	r0, r3
    3ca2:	d009      	beq.n	3cb8 <uarte_0_init+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
    3ca4:	2145      	movs	r1, #69	; 0x45
    3ca6:	4820      	ldr	r0, [pc, #128]	; (3d28 <uarte_0_init+0xf0>)
    3ca8:	f004 f9eb 	bl	8082 <z_log_minimal_printk>
		return -EIO;
    3cac:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    3cb0:	4628      	mov	r0, r5
    3cb2:	b003      	add	sp, #12
    3cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3cb8:	7f32      	ldrb	r2, [r6, #28]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3cba:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    3cbe:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3cc2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3cc6:	2301      	movs	r3, #1
    3cc8:	4093      	lsls	r3, r2
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    3cca:	4a18      	ldr	r2, [pc, #96]	; (3d2c <uarte_0_init+0xf4>)
    3ccc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3cd0:	2308      	movs	r3, #8
    3cd2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3cd6:	f898 3008 	ldrb.w	r3, [r8, #8]
    3cda:	b953      	cbnz	r3, 3cf2 <uarte_0_init+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3cdc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3ce0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3ce4:	69b3      	ldr	r3, [r6, #24]
    3ce6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3cea:	2301      	movs	r3, #1
    3cec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3cf0:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3cf2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3cf6:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3cf8:	bf5c      	itt	pl
    3cfa:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3cfe:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3d02:	06db      	lsls	r3, r3, #27
    3d04:	bf44      	itt	mi
    3d06:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3d0a:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3d0e:	6973      	ldr	r3, [r6, #20]
    3d10:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3d14:	2300      	movs	r3, #0
    3d16:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3d1a:	2301      	movs	r3, #1
    3d1c:	60a3      	str	r3, [r4, #8]
    3d1e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    3d20:	e7c6      	b.n	3cb0 <uarte_0_init+0x78>
    3d22:	bf00      	nop
    3d24:	0bad0000 	.word	0x0bad0000
    3d28:	0000a8b8 	.word	0x0000a8b8
    3d2c:	50017000 	.word	0x50017000

00003d30 <uarte_nrfx_poll_out>:
{
    3d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d34:	4604      	mov	r4, r0
    3d36:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    3d38:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3d3a:	f005 fa24 	bl	9186 <k_is_in_isr>
    3d3e:	b910      	cbnz	r0, 3d46 <uarte_nrfx_poll_out+0x16>
	return !z_sys_post_kernel;
    3d40:	4b21      	ldr	r3, [pc, #132]	; (3dc8 <uarte_nrfx_poll_out+0x98>)
	if (isr_mode) {
    3d42:	781b      	ldrb	r3, [r3, #0]
    3d44:	b98b      	cbnz	r3, 3d6a <uarte_nrfx_poll_out+0x3a>
	__asm__ volatile(
    3d46:	f04f 0320 	mov.w	r3, #32
    3d4a:	f3ef 8811 	mrs	r8, BASEPRI
    3d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    3d52:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3d56:	6860      	ldr	r0, [r4, #4]
    3d58:	4646      	mov	r6, r8
    3d5a:	f004 ff8d 	bl	8c78 <is_tx_ready.isra.0>
    3d5e:	bb30      	cbnz	r0, 3dae <uarte_nrfx_poll_out+0x7e>
	__asm__ volatile(
    3d60:	f388 8811 	msr	BASEPRI, r8
    3d64:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3d68:	e7ed      	b.n	3d46 <uarte_nrfx_poll_out+0x16>
{
    3d6a:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3d6c:	6860      	ldr	r0, [r4, #4]
    3d6e:	f004 ff83 	bl	8c78 <is_tx_ready.isra.0>
    3d72:	b970      	cbnz	r0, 3d92 <uarte_nrfx_poll_out+0x62>
    3d74:	2001      	movs	r0, #1
    3d76:	f005 f90b 	bl	8f90 <nrfx_busy_wait>
    3d7a:	3e01      	subs	r6, #1
    3d7c:	d1f6      	bne.n	3d6c <uarte_nrfx_poll_out+0x3c>
	return z_impl_k_sleep(timeout);
    3d7e:	2100      	movs	r1, #0
    3d80:	2021      	movs	r0, #33	; 0x21
    3d82:	f001 fedf 	bl	5b44 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3d86:	e7f0      	b.n	3d6a <uarte_nrfx_poll_out+0x3a>
	__asm__ volatile(
    3d88:	f388 8811 	msr	BASEPRI, r8
    3d8c:	f3bf 8f6f 	isb	sy
}
    3d90:	e7f5      	b.n	3d7e <uarte_nrfx_poll_out+0x4e>
	__asm__ volatile(
    3d92:	f04f 0320 	mov.w	r3, #32
    3d96:	f3ef 8811 	mrs	r8, BASEPRI
    3d9a:	f383 8812 	msr	BASEPRI_MAX, r3
    3d9e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3da2:	6860      	ldr	r0, [r4, #4]
    3da4:	4646      	mov	r6, r8
    3da6:	f004 ff67 	bl	8c78 <is_tx_ready.isra.0>
    3daa:	2800      	cmp	r0, #0
    3dac:	d0ec      	beq.n	3d88 <uarte_nrfx_poll_out+0x58>
	*data->char_out = c;
    3dae:	697b      	ldr	r3, [r7, #20]
	tx_start(dev, data->char_out, 1);
    3db0:	2201      	movs	r2, #1
	*data->char_out = c;
    3db2:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    3db4:	6979      	ldr	r1, [r7, #20]
    3db6:	6860      	ldr	r0, [r4, #4]
    3db8:	f004 ff43 	bl	8c42 <tx_start.isra.0>
	__asm__ volatile(
    3dbc:	f386 8811 	msr	BASEPRI, r6
    3dc0:	f3bf 8f6f 	isb	sy
}
    3dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3dc8:	2000ee84 	.word	0x2000ee84

00003dcc <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3dcc:	2301      	movs	r3, #1
    3dce:	4083      	lsls	r3, r0
{
    3dd0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3dd2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3dd4:	4a0d      	ldr	r2, [pc, #52]	; (3e0c <compare_int_lock+0x40>)
    3dd6:	e8d2 1fef 	ldaex	r1, [r2]
    3dda:	ea01 0c04 	and.w	ip, r1, r4
    3dde:	e8c2 cfee 	stlex	lr, ip, [r2]
    3de2:	f1be 0f00 	cmp.w	lr, #0
    3de6:	d1f6      	bne.n	3dd6 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3de8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3dec:	fa02 f000 	lsl.w	r0, r2, r0
    3df0:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
    3df4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3df8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3dfc:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3e00:	420b      	tst	r3, r1
}
    3e02:	bf14      	ite	ne
    3e04:	2001      	movne	r0, #1
    3e06:	2000      	moveq	r0, #0
    3e08:	bd10      	pop	{r4, pc}
    3e0a:	bf00      	nop
    3e0c:	2000e6b8 	.word	0x2000e6b8

00003e10 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3e10:	4919      	ldr	r1, [pc, #100]	; (3e78 <sys_clock_timeout_handler+0x68>)
{
    3e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e14:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3e16:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3e1a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3e1c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3e20:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3e24:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3e26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3e2a:	d222      	bcs.n	3e72 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3e2c:	4b13      	ldr	r3, [pc, #76]	; (3e7c <sys_clock_timeout_handler+0x6c>)
    3e2e:	681b      	ldr	r3, [r3, #0]
    3e30:	0a1a      	lsrs	r2, r3, #8
    3e32:	061b      	lsls	r3, r3, #24
    3e34:	195e      	adds	r6, r3, r5
    3e36:	4b12      	ldr	r3, [pc, #72]	; (3e80 <sys_clock_timeout_handler+0x70>)
    3e38:	f142 0700 	adc.w	r7, r2, #0
    3e3c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    3e40:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3e42:	f001 ffdb 	bl	5dfc <sys_clock_announce>
    return p_reg->CC[ch];
    3e46:	00a3      	lsls	r3, r4, #2
    3e48:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3e4c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    3e50:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3e54:	42aa      	cmp	r2, r5
    3e56:	d10b      	bne.n	3e70 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3e58:	b91e      	cbnz	r6, 3e62 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    3e5a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3e5e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3e62:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    p_reg->EVTENSET = mask;
    3e66:	4b07      	ldr	r3, [pc, #28]	; (3e84 <sys_clock_timeout_handler+0x74>)
    3e68:	fa00 f404 	lsl.w	r4, r0, r4
    3e6c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3e72:	2600      	movs	r6, #0
    3e74:	e7e5      	b.n	3e42 <sys_clock_timeout_handler+0x32>
    3e76:	bf00      	nop
    3e78:	2000c698 	.word	0x2000c698
    3e7c:	2000e6bc 	.word	0x2000e6bc
    3e80:	2000c680 	.word	0x2000c680
    3e84:	50015000 	.word	0x50015000

00003e88 <compare_int_unlock>:
	if (key) {
    3e88:	b1e1      	cbz	r1, 3ec4 <compare_int_unlock+0x3c>
		atomic_or(&int_mask, BIT(chan));
    3e8a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3e8c:	4a0e      	ldr	r2, [pc, #56]	; (3ec8 <compare_int_unlock+0x40>)
    3e8e:	4083      	lsls	r3, r0
    3e90:	e8d2 1fef 	ldaex	r1, [r2]
    3e94:	4319      	orrs	r1, r3
    3e96:	e8c2 1fec 	stlex	ip, r1, [r2]
    3e9a:	f1bc 0f00 	cmp.w	ip, #0
    3e9e:	d1f7      	bne.n	3e90 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    3ea4:	4a09      	ldr	r2, [pc, #36]	; (3ecc <compare_int_unlock+0x44>)
    3ea6:	4083      	lsls	r3, r0
    3ea8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3eac:	4b08      	ldr	r3, [pc, #32]	; (3ed0 <compare_int_unlock+0x48>)
    3eae:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3eb2:	fa23 f000 	lsr.w	r0, r3, r0
    3eb6:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3eb8:	bf42      	ittt	mi
    3eba:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    3ebe:	4b05      	ldrmi	r3, [pc, #20]	; (3ed4 <compare_int_unlock+0x4c>)
    3ec0:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3ec4:	4770      	bx	lr
    3ec6:	bf00      	nop
    3ec8:	2000e6b8 	.word	0x2000e6b8
    3ecc:	50015000 	.word	0x50015000
    3ed0:	2000e6b4 	.word	0x2000e6b4
    3ed4:	e000e100 	.word	0xe000e100

00003ed8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3ed8:	4b0d      	ldr	r3, [pc, #52]	; (3f10 <z_nrf_rtc_timer_read+0x38>)
    3eda:	6818      	ldr	r0, [r3, #0]
    3edc:	0a01      	lsrs	r1, r0, #8
    3ede:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3ee0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3ee4:	4b0b      	ldr	r3, [pc, #44]	; (3f14 <z_nrf_rtc_timer_read+0x3c>)
    3ee6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3eea:	1818      	adds	r0, r3, r0
    3eec:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3ef4:	d20a      	bcs.n	3f0c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3ef6:	4b08      	ldr	r3, [pc, #32]	; (3f18 <z_nrf_rtc_timer_read+0x40>)
    3ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3efc:	4290      	cmp	r0, r2
    3efe:	eb71 0303 	sbcs.w	r3, r1, r3
    3f02:	d203      	bcs.n	3f0c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3f04:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3f08:	f141 0100 	adc.w	r1, r1, #0
}
    3f0c:	4770      	bx	lr
    3f0e:	bf00      	nop
    3f10:	2000e6bc 	.word	0x2000e6bc
    3f14:	50015000 	.word	0x50015000
    3f18:	2000c680 	.word	0x2000c680

00003f1c <compare_set>:
{
    3f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3f20:	ed2d 8b02 	vpush	{d8}
    3f24:	b085      	sub	sp, #20
    3f26:	4616      	mov	r6, r2
    3f28:	4698      	mov	r8, r3
    3f2a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3f2c:	f7ff ff4e 	bl	3dcc <compare_int_lock>
    3f30:	ee08 0a10 	vmov	s16, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3f34:	f7ff ffd0 	bl	3ed8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3f38:	42b0      	cmp	r0, r6
    3f3a:	eb71 0308 	sbcs.w	r3, r1, r8
    3f3e:	d279      	bcs.n	4034 <compare_set+0x118>
		if (target_time - curr_time > COUNTER_SPAN) {
    3f40:	4b44      	ldr	r3, [pc, #272]	; (4054 <compare_set+0x138>)
    3f42:	1a30      	subs	r0, r6, r0
    3f44:	eb68 0101 	sbc.w	r1, r8, r1
    3f48:	4298      	cmp	r0, r3
    3f4a:	f171 0300 	sbcs.w	r3, r1, #0
    3f4e:	d27e      	bcs.n	404e <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    3f50:	4b41      	ldr	r3, [pc, #260]	; (4058 <compare_set+0x13c>)
    3f52:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3f56:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    3f5a:	45d8      	cmp	r8, fp
    3f5c:	bf08      	it	eq
    3f5e:	4556      	cmpeq	r6, sl
    3f60:	d050      	beq.n	4004 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    3f66:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3f6a:	4614      	mov	r4, r2
    3f6c:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3f70:	f105 0750 	add.w	r7, r5, #80	; 0x50
    3f74:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    3f78:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f7a:	40ab      	lsls	r3, r5
    3f7c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3f80:	b2bf      	uxth	r7, r7
    3f82:	f107 2750 	add.w	r7, r7, #1342197760	; 0x50005000
    3f86:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    3f88:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3f8c:	4b33      	ldr	r3, [pc, #204]	; (405c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3f8e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
     return p_reg->COUNTER;
    3f92:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3f96:	1a40      	subs	r0, r0, r1
    3f98:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3f9c:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3fa0:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3fa2:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    3fa6:	d107      	bne.n	3fb8 <compare_set+0x9c>
    3fa8:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3fac:	2013      	movs	r0, #19
    3fae:	f005 f9f2 	bl	9396 <z_impl_k_busy_wait>
    3fb2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3fb6:	4b29      	ldr	r3, [pc, #164]	; (405c <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3fb8:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3fbc:	eba4 000c 	sub.w	r0, r4, ip
    3fc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3fc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3fc8:	bf88      	it	hi
    3fca:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3fcc:	2000      	movs	r0, #0
    3fce:	6038      	str	r0, [r7, #0]
    3fd0:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3fd2:	9801      	ldr	r0, [sp, #4]
    3fd4:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3fd8:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3fdc:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3fe0:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3fe4:	4281      	cmp	r1, r0
    3fe6:	d006      	beq.n	3ff6 <compare_set+0xda>
	return (a - b) & COUNTER_MAX;
    3fe8:	1a20      	subs	r0, r4, r0
    3fea:	3802      	subs	r0, #2
    3fec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3ff0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3ff4:	d81c      	bhi.n	4030 <compare_set+0x114>
	return (a - b) & COUNTER_MAX;
    3ff6:	1aa4      	subs	r4, r4, r2
    3ff8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3ffc:	eb14 0a06 	adds.w	sl, r4, r6
    4000:	f148 0b00 	adc.w	fp, r8, #0
	return ret;
    4004:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    4006:	4914      	ldr	r1, [pc, #80]	; (4058 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    4008:	9810      	ldr	r0, [sp, #64]	; 0x40
	cc_data[chan].target_time = target_time;
    400a:	012b      	lsls	r3, r5, #4
    400c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
	cc_data[chan].callback = handler;
    4010:	50c8      	str	r0, [r1, r3]
	cc_data[chan].target_time = target_time;
    4012:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].user_context = user_data;
    4016:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4018:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    401a:	4628      	mov	r0, r5
    401c:	ee18 1a10 	vmov	r1, s16
    4020:	f7ff ff32 	bl	3e88 <compare_int_unlock>
}
    4024:	4620      	mov	r0, r4
    4026:	b005      	add	sp, #20
    4028:	ecbd 8b02 	vpop	{d8}
    402c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4030:	4620      	mov	r0, r4
    4032:	e7ae      	b.n	3f92 <compare_set+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    4034:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4036:	4a0a      	ldr	r2, [pc, #40]	; (4060 <compare_set+0x144>)
    4038:	40ab      	lsls	r3, r5
    403a:	e8d2 1fef 	ldaex	r1, [r2]
    403e:	4319      	orrs	r1, r3
    4040:	e8c2 1fe0 	stlex	r0, r1, [r2]
    4044:	2800      	cmp	r0, #0
    4046:	d1f8      	bne.n	403a <compare_set+0x11e>
    4048:	46b2      	mov	sl, r6
    404a:	46c3      	mov	fp, r8
    404c:	e7da      	b.n	4004 <compare_set+0xe8>
			return -EINVAL;
    404e:	f06f 0415 	mvn.w	r4, #21
    4052:	e7e2      	b.n	401a <compare_set+0xfe>
    4054:	01000001 	.word	0x01000001
    4058:	2000c688 	.word	0x2000c688
    405c:	50015000 	.word	0x50015000
    4060:	2000e6b4 	.word	0x2000e6b4

00004064 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4064:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    4066:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    406c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4070:	4d16      	ldr	r5, [pc, #88]	; (40cc <sys_clock_driver_init+0x68>)
    4072:	4b17      	ldr	r3, [pc, #92]	; (40d0 <sys_clock_driver_init+0x6c>)
    4074:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    4078:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    407c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4080:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4082:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4086:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    408a:	4b12      	ldr	r3, [pc, #72]	; (40d4 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    408c:	2101      	movs	r1, #1
    408e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    4092:	2015      	movs	r0, #21
    4094:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4098:	4622      	mov	r2, r4
    409a:	f7fe fda9 	bl	2bf0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    409e:	2015      	movs	r0, #21
    40a0:	f7fe fd88 	bl	2bb4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    40a4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    40a6:	4a0c      	ldr	r2, [pc, #48]	; (40d8 <sys_clock_driver_init+0x74>)
    40a8:	60ab      	str	r3, [r5, #8]
    40aa:	602b      	str	r3, [r5, #0]
    40ac:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    40ae:	4b0b      	ldr	r3, [pc, #44]	; (40dc <sys_clock_driver_init+0x78>)
    40b0:	4a0b      	ldr	r2, [pc, #44]	; (40e0 <sys_clock_driver_init+0x7c>)
    40b2:	9300      	str	r3, [sp, #0]
    40b4:	4620      	mov	r0, r4
    40b6:	2300      	movs	r3, #0
    40b8:	9401      	str	r4, [sp, #4]
    40ba:	f7ff ff2f 	bl	3f1c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    40be:	4630      	mov	r0, r6
    40c0:	f7ff fa42 	bl	3548 <z_nrf_clock_control_lf_on>

	return 0;
}
    40c4:	4620      	mov	r0, r4
    40c6:	b002      	add	sp, #8
    40c8:	bd70      	pop	{r4, r5, r6, pc}
    40ca:	bf00      	nop
    40cc:	50015000 	.word	0x50015000
    40d0:	2000c688 	.word	0x2000c688
    40d4:	e000e100 	.word	0xe000e100
    40d8:	2000e6b8 	.word	0x2000e6b8
    40dc:	00003e11 	.word	0x00003e11
    40e0:	007fffff 	.word	0x007fffff

000040e4 <rtc_nrf_isr>:
    return p_reg->INTENSET & mask;
    40e4:	4b35      	ldr	r3, [pc, #212]	; (41bc <rtc_nrf_isr+0xd8>)
{
    40e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    40ea:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    40ee:	0791      	lsls	r1, r2, #30
    40f0:	d50b      	bpl.n	410a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    40f2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    40f6:	b142      	cbz	r2, 410a <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    40f8:	2200      	movs	r2, #0
    40fa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    40fe:	4a30      	ldr	r2, [pc, #192]	; (41c0 <rtc_nrf_isr+0xdc>)
    4100:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    4104:	6813      	ldr	r3, [r2, #0]
    4106:	3301      	adds	r3, #1
    4108:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    410a:	f04f 0320 	mov.w	r3, #32
    410e:	f3ef 8111 	mrs	r1, BASEPRI
    4112:	f383 8812 	msr	BASEPRI_MAX, r3
    4116:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    411a:	4b28      	ldr	r3, [pc, #160]	; (41bc <rtc_nrf_isr+0xd8>)
    411c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4120:	03d2      	lsls	r2, r2, #15
    4122:	d50d      	bpl.n	4140 <rtc_nrf_isr+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4124:	4a27      	ldr	r2, [pc, #156]	; (41c4 <rtc_nrf_isr+0xe0>)
    4126:	e8d2 0fef 	ldaex	r0, [r2]
    412a:	f020 0401 	bic.w	r4, r0, #1
    412e:	e8c2 4fe5 	stlex	r5, r4, [r2]
    4132:	2d00      	cmp	r5, #0
    4134:	d1f7      	bne.n	4126 <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4136:	2800      	cmp	r0, #0
    4138:	d136      	bne.n	41a8 <rtc_nrf_isr+0xc4>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    413a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
		if (result) {
    413e:	bb9a      	cbnz	r2, 41a8 <rtc_nrf_isr+0xc4>
{
    4140:	2300      	movs	r3, #0
	__asm__ volatile(
    4142:	f381 8811 	msr	BASEPRI, r1
    4146:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    414a:	b353      	cbz	r3, 41a2 <rtc_nrf_isr+0xbe>
		curr_time = z_nrf_rtc_timer_read();
    414c:	f7ff fec4 	bl	3ed8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    4150:	f04f 0320 	mov.w	r3, #32
    4154:	f3ef 8711 	mrs	r7, BASEPRI
    4158:	f383 8812 	msr	BASEPRI_MAX, r3
    415c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    4160:	4b19      	ldr	r3, [pc, #100]	; (41c8 <rtc_nrf_isr+0xe4>)
    4162:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
		if (curr_time >= expire_time) {
    4166:	42a0      	cmp	r0, r4
    4168:	eb71 0205 	sbcs.w	r2, r1, r5
    416c:	f04f 0200 	mov.w	r2, #0
    4170:	d321      	bcc.n	41b6 <rtc_nrf_isr+0xd2>
			user_context = cc_data[chan].user_context;
    4172:	e9d3 1600 	ldrd	r1, r6, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4176:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    417a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    417e:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    4180:	f44f 3280 	mov.w	r2, #65536	; 0x10000
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4184:	e9c3 8902 	strd	r8, r9, [r3, #8]
    4188:	4b0c      	ldr	r3, [pc, #48]	; (41bc <rtc_nrf_isr+0xd8>)
    418a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	__asm__ volatile(
    418e:	f387 8811 	msr	BASEPRI, r7
    4192:	f3bf 8f6f 	isb	sy
		if (handler) {
    4196:	b121      	cbz	r1, 41a2 <rtc_nrf_isr+0xbe>
			handler(chan, expire_time, user_context);
    4198:	4622      	mov	r2, r4
    419a:	462b      	mov	r3, r5
    419c:	2000      	movs	r0, #0
    419e:	9600      	str	r6, [sp, #0]
    41a0:	4788      	blx	r1
}
    41a2:	b003      	add	sp, #12
    41a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    41a8:	2200      	movs	r2, #0
    41aa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    41ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    41b2:	2301      	movs	r3, #1
}
    41b4:	e7c5      	b.n	4142 <rtc_nrf_isr+0x5e>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    41b6:	4611      	mov	r1, r2
    41b8:	e7e9      	b.n	418e <rtc_nrf_isr+0xaa>
    41ba:	bf00      	nop
    41bc:	50015000 	.word	0x50015000
    41c0:	2000e6bc 	.word	0x2000e6bc
    41c4:	2000e6b4 	.word	0x2000e6b4
    41c8:	2000c688 	.word	0x2000c688

000041cc <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    41cc:	1c43      	adds	r3, r0, #1
{
    41ce:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    41d0:	d020      	beq.n	4214 <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    41d2:	2801      	cmp	r0, #1
    41d4:	dd20      	ble.n	4218 <sys_clock_set_timeout+0x4c>
    41d6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    41da:	da1f      	bge.n	421c <sys_clock_set_timeout+0x50>
    41dc:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    41de:	f7ff fe7b 	bl	3ed8 <z_nrf_rtc_timer_read>
    41e2:	4b0f      	ldr	r3, [pc, #60]	; (4220 <sys_clock_set_timeout+0x54>)
    41e4:	e9d3 1300 	ldrd	r1, r3, [r3]
    41e8:	1a40      	subs	r0, r0, r1
		ticks = 0;
    41ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    41ee:	bf28      	it	cs
    41f0:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    41f2:	3001      	adds	r0, #1
    41f4:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    41f6:	480b      	ldr	r0, [pc, #44]	; (4224 <sys_clock_set_timeout+0x58>)
    41f8:	4282      	cmp	r2, r0
    41fa:	bf28      	it	cs
    41fc:	4602      	movcs	r2, r0
    41fe:	2000      	movs	r0, #0
    4200:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4202:	4909      	ldr	r1, [pc, #36]	; (4228 <sys_clock_set_timeout+0x5c>)
    4204:	9001      	str	r0, [sp, #4]
    4206:	9100      	str	r1, [sp, #0]
    4208:	f143 0300 	adc.w	r3, r3, #0
    420c:	f7ff fe86 	bl	3f1c <compare_set>
}
    4210:	b002      	add	sp, #8
    4212:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4214:	4803      	ldr	r0, [pc, #12]	; (4224 <sys_clock_set_timeout+0x58>)
    4216:	e7e1      	b.n	41dc <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4218:	2400      	movs	r4, #0
    421a:	e7e0      	b.n	41de <sys_clock_set_timeout+0x12>
    421c:	4c01      	ldr	r4, [pc, #4]	; (4224 <sys_clock_set_timeout+0x58>)
    421e:	e7de      	b.n	41de <sys_clock_set_timeout+0x12>
    4220:	2000c698 	.word	0x2000c698
    4224:	007fffff 	.word	0x007fffff
    4228:	00003e11 	.word	0x00003e11

0000422c <sys_clock_elapsed>:
{
    422c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    422e:	f7ff fe53 	bl	3ed8 <z_nrf_rtc_timer_read>
    4232:	4b02      	ldr	r3, [pc, #8]	; (423c <sys_clock_elapsed+0x10>)
    4234:	681b      	ldr	r3, [r3, #0]
}
    4236:	1ac0      	subs	r0, r0, r3
    4238:	bd08      	pop	{r3, pc}
    423a:	bf00      	nop
    423c:	2000c698 	.word	0x2000c698

00004240 <nrf_gpio_pin_write>:
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4240:	2301      	movs	r3, #1
    *p_pin = pin_number & 0x1F;
    4242:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4246:	fa03 f000 	lsl.w	r0, r3, r0
    424a:	4b03      	ldr	r3, [pc, #12]	; (4258 <nrf_gpio_pin_write+0x18>)
    if (value == 0)
    424c:	b909      	cbnz	r1, 4252 <nrf_gpio_pin_write+0x12>
    p_reg->OUTCLR = clr_mask;
    424e:	60d8      	str	r0, [r3, #12]
}
    4250:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    4252:	6098      	str	r0, [r3, #8]
}
    4254:	4770      	bx	lr
    4256:	bf00      	nop
    4258:	50842500 	.word	0x50842500

0000425c <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
    425c:	b510      	push	{r4, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    425e:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4262:	2c00      	cmp	r4, #0
    4264:	bf1c      	itt	ne
    4266:	2100      	movne	r1, #0
    4268:	2201      	movne	r2, #1
    *p_pin = pin_number & 0x1F;
    426a:	f000 041f 	and.w	r4, r0, #31
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    426e:	021b      	lsls	r3, r3, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4270:	f3c0 1081 	ubfx	r0, r0, #6, #2
    4274:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    4278:	430b      	orrs	r3, r1
    427a:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    427e:	4b02      	ldr	r3, [pc, #8]	; (4288 <nrf_pin_configure+0x2c>)
    4280:	3480      	adds	r4, #128	; 0x80
    4282:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
		     NRF_GPIO_PIN_NOSENSE);
}
    4286:	bd10      	pop	{r4, pc}
    4288:	50842500 	.word	0x50842500

0000428c <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    428c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4290:	4616      	mov	r6, r2
    4292:	4605      	mov	r5, r0
			break;
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4294:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
    4296:	f8df 8114 	ldr.w	r8, [pc, #276]	; 43ac <pinctrl_configure_pins+0x120>
    429a:	eb00 0981 	add.w	r9, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    429e:	454d      	cmp	r5, r9
    42a0:	d103      	bne.n	42aa <pinctrl_configure_pins+0x1e>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    42a2:	2000      	movs	r0, #0
}
    42a4:	b003      	add	sp, #12
    42a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    42aa:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
    42ac:	0c22      	lsrs	r2, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    42ae:	f3c4 2303 	ubfx	r3, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    42b2:	2a19      	cmp	r2, #25
    42b4:	d877      	bhi.n	43a6 <pinctrl_configure_pins+0x11a>
    42b6:	e8df f002 	tbb	[pc, r2]
    42ba:	1a0d      	.short	0x1a0d
    42bc:	38264421 	.word	0x38264421
    42c0:	76767644 	.word	0x76767644
    42c4:	76514976 	.word	0x76514976
    42c8:	76767676 	.word	0x76767676
    42cc:	76767676 	.word	0x76767676
    42d0:	706a6456 	.word	0x706a6456
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    42d4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    42d8:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    42dc:	682a      	ldr	r2, [r5, #0]
    42de:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    42e2:	fa07 f202 	lsl.w	r2, r7, r2
    p_reg->OUTSET = set_mask;
    42e6:	f8c8 2008 	str.w	r2, [r8, #8]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    42ea:	2201      	movs	r2, #1
    42ec:	e004      	b.n	42f8 <pinctrl_configure_pins+0x6c>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    42ee:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    42f2:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    42f6:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    42f8:	4611      	mov	r1, r2
    42fa:	e011      	b.n	4320 <pinctrl_configure_pins+0x94>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    42fc:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4300:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    4304:	e7ea      	b.n	42dc <pinctrl_configure_pins+0x50>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    4306:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    430a:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    430e:	682a      	ldr	r2, [r5, #0]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4310:	2101      	movs	r1, #1
    4312:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4316:	fa07 f202 	lsl.w	r2, r7, r2
    p_reg->OUTCLR = clr_mask;
    431a:	f8c8 200c 	str.w	r2, [r8, #12]
    431e:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4320:	6828      	ldr	r0, [r5, #0]
    4322:	f7ff ff9b 	bl	425c <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4326:	3504      	adds	r5, #4
    4328:	e7b9      	b.n	429e <pinctrl_configure_pins+0x12>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    432a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    432e:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    4332:	682a      	ldr	r2, [r5, #0]
    4334:	f002 021f 	and.w	r2, r2, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4338:	fa07 f202 	lsl.w	r2, r7, r2
    p_reg->OUTCLR = clr_mask;
    433c:	f8c8 200c 	str.w	r2, [r8, #12]
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4340:	e7d3      	b.n	42ea <pinctrl_configure_pins+0x5e>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    4342:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4346:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    434a:	e7d4      	b.n	42f6 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    434c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4350:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
    4354:	2b00      	cmp	r3, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4356:	bf08      	it	eq
    4358:	2306      	moveq	r3, #6
    435a:	e7cc      	b.n	42f6 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    435c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4360:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    4364:	e7f6      	b.n	4354 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    4366:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    436a:	9301      	str	r3, [sp, #4]
    436c:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4370:	6828      	ldr	r0, [r5, #0]
    4372:	f3c0 3140 	ubfx	r1, r0, #13, #1
    4376:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    437a:	f7ff ff61 	bl	4240 <nrf_gpio_pin_write>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    437e:	9b01      	ldr	r3, [sp, #4]
    4380:	e7b3      	b.n	42ea <pinctrl_configure_pins+0x5e>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    4382:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4386:	9301      	str	r3, [sp, #4]
    4388:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    438c:	e7f0      	b.n	4370 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    438e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4392:	9301      	str	r3, [sp, #4]
    4394:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4398:	e7ea      	b.n	4370 <pinctrl_configure_pins+0xe4>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    439a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    439e:	9301      	str	r3, [sp, #4]
    43a0:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
    43a4:	e7e4      	b.n	4370 <pinctrl_configure_pins+0xe4>
		switch (NRF_GET_FUN(pins[i])) {
    43a6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    43aa:	e77b      	b.n	42a4 <pinctrl_configure_pins+0x18>
    43ac:	50842500 	.word	0x50842500

000043b0 <fprotect_area>:

#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    43b0:	ea40 0301 	orr.w	r3, r0, r1
    43b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
    43b8:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    43ba:	b98b      	cbnz	r3, 43e0 <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    43bc:	f240 1515 	movw	r5, #277	; 0x115
    43c0:	4c09      	ldr	r4, [pc, #36]	; (43e8 <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    43c2:	0bc9      	lsrs	r1, r1, #15
		nrf_spu_flashregion_set(NRF_SPU_S,
    43c4:	f3c0 30c7 	ubfx	r0, r0, #15, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    43c8:	4299      	cmp	r1, r3
    43ca:	d101      	bne.n	43d0 <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    43cc:	2000      	movs	r0, #0
}
    43ce:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    43d0:	18c2      	adds	r2, r0, r3
    43d2:	b2d2      	uxtb	r2, r2
    43d4:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    43d8:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    43dc:	3301      	adds	r3, #1
    43de:	e7f3      	b.n	43c8 <fprotect_area+0x18>
		return -EINVAL;
    43e0:	f06f 0015 	mvn.w	r0, #21
    43e4:	e7f3      	b.n	43ce <fprotect_area+0x1e>
    43e6:	bf00      	nop
    43e8:	50003000 	.word	0x50003000

000043ec <k_sys_fatal_error_handler>:
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    43ec:	4803      	ldr	r0, [pc, #12]	; (43fc <k_sys_fatal_error_handler+0x10>)
    43ee:	2145      	movs	r1, #69	; 0x45
{
    43f0:	b508      	push	{r3, lr}
		LOG_ERR("Resetting system");
    43f2:	f003 fe46 	bl	8082 <z_log_minimal_printk>
		sys_arch_reboot(0);
    43f6:	2000      	movs	r0, #0
    43f8:	f7fe ff3e 	bl	3278 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    43fc:	0000a8f6 	.word	0x0000a8f6

00004400 <boot_write_magic>:
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    4400:	b530      	push	{r4, r5, lr}
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    4402:	6881      	ldr	r1, [r0, #8]
{
    4404:	b085      	sub	sp, #20
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    4406:	3910      	subs	r1, #16
     * returned by boot_magic_off() is the start of magic which is not the
     * start of the flash write boundary and thus writes to the magic will fail.
     * To account for this change, write to magic is first padded with 0xFF
     * before writing to the trailer.
     */
    pad_off = ALIGN_DOWN(off, BOOT_MAX_ALIGN);
    4408:	f021 0407 	bic.w	r4, r1, #7
{
    440c:	4605      	mov	r5, r0

    erased_val = flash_area_erased_val(fap);
    440e:	f003 fe8e 	bl	812e <flash_area_erased_val>

    memset(&magic[0], erased_val, sizeof(magic));
    4412:	2210      	movs	r2, #16
    erased_val = flash_area_erased_val(fap);
    4414:	4601      	mov	r1, r0
    memset(&magic[0], erased_val, sizeof(magic));
    4416:	4668      	mov	r0, sp
    4418:	f004 f9a7 	bl	876a <memset>
    memcpy(&magic[BOOT_MAGIC_ALIGN_SIZE - BOOT_MAGIC_SZ], BOOT_IMG_MAGIC, BOOT_MAGIC_SZ);
    441c:	2210      	movs	r2, #16
    441e:	4668      	mov	r0, sp
    4420:	4906      	ldr	r1, [pc, #24]	; (443c <boot_write_magic+0x3c>)
    4422:	f004 f997 	bl	8754 <memcpy>

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    rc = flash_area_write(fap, pad_off, &magic[0], BOOT_MAGIC_ALIGN_SIZE);
    4426:	2310      	movs	r3, #16
    4428:	466a      	mov	r2, sp
    442a:	4621      	mov	r1, r4
    442c:	4628      	mov	r0, r5
    442e:	f003 fe4b 	bl	80c8 <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    4432:	3800      	subs	r0, #0
    4434:	bf18      	it	ne
    4436:	2001      	movne	r0, #1
    4438:	b005      	add	sp, #20
    443a:	bd30      	pop	{r4, r5, pc}
    443c:	00009b58 	.word	0x00009b58

00004440 <boot_read_swap_state>:
{
    4440:	b530      	push	{r4, r5, lr}
    4442:	460c      	mov	r4, r1
    return flash_area_get_size(fap) - BOOT_MAGIC_SZ;
    4444:	6881      	ldr	r1, [r0, #8]
{
    4446:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    4448:	2310      	movs	r3, #16
    444a:	aa02      	add	r2, sp, #8
    444c:	3910      	subs	r1, #16
{
    444e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    4450:	f003 fe25 	bl	809e <flash_area_read>
    if (rc < 0) {
    4454:	2800      	cmp	r0, #0
    4456:	da02      	bge.n	445e <boot_read_swap_state+0x1e>
        return BOOT_EFLASH;
    4458:	2001      	movs	r0, #1
}
    445a:	b007      	add	sp, #28
    445c:	bd30      	pop	{r4, r5, pc}
    if (buffer == NULL || len == 0) {
    445e:	2210      	movs	r2, #16
    4460:	4628      	mov	r0, r5
    4462:	a902      	add	r1, sp, #8
    4464:	f004 fcd3 	bl	8e0e <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    4468:	b390      	cbz	r0, 44d0 <boot_read_swap_state+0x90>
        state->magic = BOOT_MAGIC_UNSET;
    446a:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    446c:	7023      	strb	r3, [r4, #0]
    off = boot_swap_info_off(fap);
    446e:	4628      	mov	r0, r5
    4470:	f004 fcde 	bl	8e30 <boot_swap_info_off>
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    4474:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    4476:	4601      	mov	r1, r0
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    4478:	f10d 0207 	add.w	r2, sp, #7
    447c:	4628      	mov	r0, r5
    447e:	f003 fe0e 	bl	809e <flash_area_read>
    if (rc < 0) {
    4482:	2800      	cmp	r0, #0
    4484:	dbe8      	blt.n	4458 <boot_read_swap_state+0x18>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4486:	f89d 3007 	ldrb.w	r3, [sp, #7]
    448a:	4628      	mov	r0, r5
    448c:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4490:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    4492:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    4494:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    4496:	2201      	movs	r2, #1
    4498:	f10d 0107 	add.w	r1, sp, #7
    449c:	f004 fcb7 	bl	8e0e <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    44a0:	b910      	cbnz	r0, 44a8 <boot_read_swap_state+0x68>
    44a2:	7863      	ldrb	r3, [r4, #1]
    44a4:	2b04      	cmp	r3, #4
    44a6:	d903      	bls.n	44b0 <boot_read_swap_state+0x70>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    44a8:	2301      	movs	r3, #1
    44aa:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    44ac:	2300      	movs	r3, #0
    44ae:	7123      	strb	r3, [r4, #4]
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    44b0:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    44b2:	4628      	mov	r0, r5
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    44b4:	3a18      	subs	r2, #24
    44b6:	f022 0207 	bic.w	r2, r2, #7
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    44ba:	3a08      	subs	r2, #8
    44bc:	1ca1      	adds	r1, r4, #2
    44be:	f004 fcd1 	bl	8e64 <boot_read_flag>
    if (rc) {
    44c2:	2800      	cmp	r0, #0
    44c4:	d1c8      	bne.n	4458 <boot_read_swap_state+0x18>
    return boot_read_image_ok(fap, &state->image_ok);
    44c6:	4628      	mov	r0, r5
    44c8:	1ce1      	adds	r1, r4, #3
    44ca:	f004 fd25 	bl	8f18 <boot_read_image_ok>
    44ce:	e7c4      	b.n	445a <boot_read_swap_state+0x1a>
    if (memcmp(magic, BOOT_IMG_MAGIC, BOOT_MAGIC_SZ) == 0) {
    44d0:	2210      	movs	r2, #16
    44d2:	4904      	ldr	r1, [pc, #16]	; (44e4 <boot_read_swap_state+0xa4>)
    44d4:	a802      	add	r0, sp, #8
    44d6:	f004 f914 	bl	8702 <memcmp>
        return BOOT_MAGIC_GOOD;
    44da:	2800      	cmp	r0, #0
    44dc:	bf14      	ite	ne
    44de:	2302      	movne	r3, #2
    44e0:	2301      	moveq	r3, #1
    44e2:	e7c3      	b.n	446c <boot_read_swap_state+0x2c>
    44e4:	00009b58 	.word	0x00009b58

000044e8 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    44e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    44ec:	b085      	sub	sp, #20
    44ee:	4606      	mov	r6, r0

    rc = BOOT_HOOK_CALL(boot_read_swap_state_primary_slot_hook,
                        BOOT_HOOK_REGULAR, image_index, &primary_slot);
    if (rc == BOOT_HOOK_REGULAR)
    {
        rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    44f0:	4669      	mov	r1, sp
    44f2:	2003      	movs	r0, #3
    44f4:	f004 fd16 	bl	8f24 <boot_read_swap_state_by_id>
                                        &primary_slot);
    }
    if (rc) {
    44f8:	4605      	mov	r5, r0
    44fa:	b118      	cbz	r0, 4504 <boot_swap_type_multi+0x1c>
        return BOOT_SWAP_TYPE_PANIC;
    44fc:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    44fe:	b005      	add	sp, #20
    4500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    4504:	2009      	movs	r0, #9
    4506:	a902      	add	r1, sp, #8
    4508:	f004 fd0c 	bl	8f24 <boot_read_swap_state_by_id>
    if (rc == BOOT_EFLASH) {
    450c:	2801      	cmp	r0, #1
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    450e:	4604      	mov	r4, r0
    if (rc == BOOT_EFLASH) {
    4510:	d13f      	bne.n	4592 <boot_swap_type_multi+0xaa>
        BOOT_LOG_INF("Secondary image of image pair (%d.) "
    4512:	4632      	mov	r2, r6
    4514:	2149      	movs	r1, #73	; 0x49
    4516:	482c      	ldr	r0, [pc, #176]	; (45c8 <boot_swap_type_multi+0xe0>)
    4518:	f003 fdb3 	bl	8082 <z_log_minimal_printk>
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    451c:	2303      	movs	r3, #3
        secondary_slot.swap_type = BOOT_SWAP_TYPE_NONE;
    451e:	f88d 4009 	strb.w	r4, [sp, #9]
        secondary_slot.magic = BOOT_MAGIC_UNSET;
    4522:	f88d 3008 	strb.w	r3, [sp, #8]
        secondary_slot.copy_done = BOOT_FLAG_UNSET;
    4526:	f88d 300a 	strb.w	r3, [sp, #10]
        secondary_slot.image_ok = BOOT_FLAG_UNSET;
    452a:	f88d 300b 	strb.w	r3, [sp, #11]
        secondary_slot.image_num = 0;
    452e:	f88d 500c 	strb.w	r5, [sp, #12]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    4532:	2200      	movs	r2, #0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    4534:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    4538:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    453c:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    4540:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    4544:	f89d 9002 	ldrb.w	r9, [sp, #2]
    4548:	4c20      	ldr	r4, [pc, #128]	; (45cc <boot_swap_type_multi+0xe4>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    454a:	4629      	mov	r1, r5
    454c:	7820      	ldrb	r0, [r4, #0]
    454e:	f004 fc75 	bl	8e3c <boot_magic_compatible_check>
    4552:	b318      	cbz	r0, 459c <boot_swap_type_multi+0xb4>
            boot_magic_compatible_check(table->magic_secondary_slot,
    4554:	4631      	mov	r1, r6
    4556:	7860      	ldrb	r0, [r4, #1]
    4558:	f004 fc70 	bl	8e3c <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    455c:	b1f0      	cbz	r0, 459c <boot_swap_type_multi+0xb4>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    455e:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    4560:	2b04      	cmp	r3, #4
    4562:	d001      	beq.n	4568 <boot_swap_type_multi+0x80>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    4564:	42bb      	cmp	r3, r7
    4566:	d119      	bne.n	459c <boot_swap_type_multi+0xb4>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    4568:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    456a:	2b04      	cmp	r3, #4
    456c:	d001      	beq.n	4572 <boot_swap_type_multi+0x8a>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    456e:	4543      	cmp	r3, r8
    4570:	d114      	bne.n	459c <boot_swap_type_multi+0xb4>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    4572:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    4574:	2b04      	cmp	r3, #4
    4576:	d10f      	bne.n	4598 <boot_swap_type_multi+0xb0>
            BOOT_LOG_INF("Swap type: %s",
    4578:	7963      	ldrb	r3, [r4, #5]
    457a:	2b02      	cmp	r3, #2
    457c:	d119      	bne.n	45b2 <boot_swap_type_multi+0xca>
    457e:	4a14      	ldr	r2, [pc, #80]	; (45d0 <boot_swap_type_multi+0xe8>)
    4580:	4814      	ldr	r0, [pc, #80]	; (45d4 <boot_swap_type_multi+0xec>)
    4582:	2149      	movs	r1, #73	; 0x49
    4584:	f003 fd7d 	bl	8082 <z_log_minimal_printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    4588:	7960      	ldrb	r0, [r4, #5]
    458a:	1e83      	subs	r3, r0, #2
    458c:	2b02      	cmp	r3, #2
    458e:	d9b6      	bls.n	44fe <boot_swap_type_multi+0x16>
    4590:	e7b4      	b.n	44fc <boot_swap_type_multi+0x14>
    } else if (rc) {
    4592:	2800      	cmp	r0, #0
    4594:	d0cd      	beq.n	4532 <boot_swap_type_multi+0x4a>
    4596:	e7b1      	b.n	44fc <boot_swap_type_multi+0x14>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    4598:	454b      	cmp	r3, r9
    459a:	d0ed      	beq.n	4578 <boot_swap_type_multi+0x90>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    459c:	3201      	adds	r2, #1
    459e:	2a03      	cmp	r2, #3
    45a0:	f104 0406 	add.w	r4, r4, #6
    45a4:	d1d1      	bne.n	454a <boot_swap_type_multi+0x62>
    BOOT_LOG_INF("Swap type: none");
    45a6:	480c      	ldr	r0, [pc, #48]	; (45d8 <boot_swap_type_multi+0xf0>)
    45a8:	2149      	movs	r1, #73	; 0x49
    45aa:	f003 fd6a 	bl	8082 <z_log_minimal_printk>
    return BOOT_SWAP_TYPE_NONE;
    45ae:	2001      	movs	r0, #1
    45b0:	e7a5      	b.n	44fe <boot_swap_type_multi+0x16>
            BOOT_LOG_INF("Swap type: %s",
    45b2:	2b03      	cmp	r3, #3
    45b4:	d005      	beq.n	45c2 <boot_swap_type_multi+0xda>
    45b6:	4a09      	ldr	r2, [pc, #36]	; (45dc <boot_swap_type_multi+0xf4>)
    45b8:	4909      	ldr	r1, [pc, #36]	; (45e0 <boot_swap_type_multi+0xf8>)
    45ba:	2b04      	cmp	r3, #4
    45bc:	bf18      	it	ne
    45be:	460a      	movne	r2, r1
    45c0:	e7de      	b.n	4580 <boot_swap_type_multi+0x98>
    45c2:	4a08      	ldr	r2, [pc, #32]	; (45e4 <boot_swap_type_multi+0xfc>)
    45c4:	e7dc      	b.n	4580 <boot_swap_type_multi+0x98>
    45c6:	bf00      	nop
    45c8:	0000a93b 	.word	0x0000a93b
    45cc:	0000a9ae 	.word	0x0000a9ae
    45d0:	0000a91f 	.word	0x0000a91f
    45d4:	0000a986 	.word	0x0000a986
    45d8:	0000a999 	.word	0x0000a999
    45dc:	0000a918 	.word	0x0000a918
    45e0:	0000a929 	.word	0x0000a929
    45e4:	0000a924 	.word	0x0000a924

000045e8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    45e8:	b508      	push	{r3, lr}
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    45ea:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    45ee:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    45f2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    45f6:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    45fa:	2a09      	cmp	r2, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    45fc:	bf01      	itttt	eq
    45fe:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    4602:	2200      	moveq	r2, #0
    4604:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    4608:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    460c:	f004 fcaf 	bl	8f6e <nrf91_errata_14>
    4610:	b128      	cbz	r0, 461e <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    4612:	2201      	movs	r2, #1
    4614:	4b51      	ldr	r3, [pc, #324]	; (475c <SystemInit+0x174>)
    4616:	f8c3 2a38 	str.w	r2, [r3, #2616]	; 0xa38
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    461a:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            #if defined(NRF_TRUSTZONE_NONSECURE)
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
            #else
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    461e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4622:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4626:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    462a:	f3bf 8f4f 	dsb	sy
            #endif
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            __DSB();
            if (var1 == 0x09)
    462e:	2a09      	cmp	r2, #9
    4630:	d105      	bne.n	463e <SystemInit+0x56>
            {
                switch(var2)
    4632:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    4634:	bf1e      	ittt	ne
    4636:	2201      	movne	r2, #1
    4638:	4b48      	ldrne	r3, [pc, #288]	; (475c <SystemInit+0x174>)
    463a:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    463e:	f004 fc96 	bl	8f6e <nrf91_errata_14>
    4642:	b118      	cbz	r0, 464c <SystemInit+0x64>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    4644:	220e      	movs	r2, #14
    4646:	4b46      	ldr	r3, [pc, #280]	; (4760 <SystemInit+0x178>)
    4648:	f8c3 2ee4 	str.w	r2, [r3, #3812]	; 0xee4
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    464c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    4650:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    4654:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    4658:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    465c:	2a09      	cmp	r2, #9
    465e:	d106      	bne.n	466e <SystemInit+0x86>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    4660:	2200      	movs	r2, #0
    4662:	4b3e      	ldr	r3, [pc, #248]	; (475c <SystemInit+0x174>)
    4664:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    4668:	2201      	movs	r2, #1
    466a:	f8c3 2710 	str.w	r2, [r3, #1808]	; 0x710
{
    466e:	2200      	movs	r2, #0
    4670:	00d3      	lsls	r3, r2, #3
    4672:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        return false;
    }
    
    bool is_empty_word(uint32_t const volatile * word)
    {
        uint32_t val = *word;
    4676:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    467a:	f3bf 8f4f 	dsb	sy
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    467e:	3101      	adds	r1, #1
    4680:	d008      	beq.n	4694 <SystemInit+0xac>
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4682:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4686:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4688:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    468c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    4690:	600b      	str	r3, [r1, #0]
        for (uint32_t index = 0; index < 256ul && !is_empty_word(&NRF_FICR_S->TRIMCNF[index].ADDR); index++){
    4692:	d1ed      	bne.n	4670 <SystemInit+0x88>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    4694:	4b33      	ldr	r3, [pc, #204]	; (4764 <SystemInit+0x17c>)
    4696:	69da      	ldr	r2, [r3, #28]
    4698:	f3bf 8f4f 	dsb	sy
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    469c:	07d1      	lsls	r1, r2, #31
    469e:	d543      	bpl.n	4728 <SystemInit+0x140>
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    46a0:	4b31      	ldr	r3, [pc, #196]	; (4768 <SystemInit+0x180>)
    46a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    46a6:	2a01      	cmp	r2, #1
    46a8:	d1fb      	bne.n	46a2 <SystemInit+0xba>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    46aa:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    46ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    46b2:	2a01      	cmp	r2, #1
    46b4:	d1fb      	bne.n	46ae <SystemInit+0xc6>
        uint32_t HFXOSRC_readout = NRF_UICR_S->HFXOSRC;
    46b6:	4b2b      	ldr	r3, [pc, #172]	; (4764 <SystemInit+0x17c>)
    46b8:	69da      	ldr	r2, [r3, #28]
    46ba:	f3bf 8f4f 	dsb	sy
              if (uicr_HFXOSRC_erased()){
    46be:	07d2      	lsls	r2, r2, #31
    46c0:	d50a      	bpl.n	46d8 <SystemInit+0xf0>
                    uicr_erased_value = NRF_UICR_S->HFXOSRC;
    46c2:	69da      	ldr	r2, [r3, #28]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    46c4:	f022 0201 	bic.w	r2, r2, #1
                    NRF_UICR_S->HFXOSRC = uicr_new_value;
    46c8:	61da      	str	r2, [r3, #28]
    46ca:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    46ce:	4a26      	ldr	r2, [pc, #152]	; (4768 <SystemInit+0x180>)
    46d0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    46d4:	2b01      	cmp	r3, #1
    46d6:	d1fb      	bne.n	46d0 <SystemInit+0xe8>
        uint32_t val = *word;
    46d8:	4a22      	ldr	r2, [pc, #136]	; (4764 <SystemInit+0x17c>)
    46da:	6a13      	ldr	r3, [r2, #32]
    46dc:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    46e0:	3301      	adds	r3, #1
    46e2:	d10c      	bne.n	46fe <SystemInit+0x116>
                    uicr_erased_value = NRF_UICR_S->HFXOCNT;
    46e4:	6a13      	ldr	r3, [r2, #32]
                    uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    46e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    46ea:	f043 0320 	orr.w	r3, r3, #32
                    NRF_UICR_S->HFXOCNT = uicr_new_value;
    46ee:	6213      	str	r3, [r2, #32]
    46f0:	f3bf 8f4f 	dsb	sy
                    while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    46f4:	4a1c      	ldr	r2, [pc, #112]	; (4768 <SystemInit+0x180>)
    46f6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    46fa:	2b01      	cmp	r3, #1
    46fc:	d1fb      	bne.n	46f6 <SystemInit+0x10e>
              NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    46fe:	2200      	movs	r2, #0
    4700:	4b19      	ldr	r3, [pc, #100]	; (4768 <SystemInit+0x180>)
    4702:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
              while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    4706:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    470a:	2a01      	cmp	r2, #1
    470c:	d1fb      	bne.n	4706 <SystemInit+0x11e>
    470e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4712:	4916      	ldr	r1, [pc, #88]	; (476c <SystemInit+0x184>)
    4714:	4b16      	ldr	r3, [pc, #88]	; (4770 <SystemInit+0x188>)
    4716:	68ca      	ldr	r2, [r1, #12]
    4718:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    471c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    471e:	60cb      	str	r3, [r1, #12]
    4720:	f3bf 8f4f 	dsb	sy
    __NOP();
    4724:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4726:	e7fd      	b.n	4724 <SystemInit+0x13c>
        uint32_t val = *word;
    4728:	6a1b      	ldr	r3, [r3, #32]
    472a:	f3bf 8f4f 	dsb	sy
        if (is_empty_word(&NRF_UICR_S->HFXOCNT)) {
    472e:	3301      	adds	r3, #1
    4730:	d0b6      	beq.n	46a0 <SystemInit+0xb8>
        SCB->NSACR |= (3UL << 10);
    4732:	4b0e      	ldr	r3, [pc, #56]	; (476c <SystemInit+0x184>)
    4734:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    4738:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    473c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    4740:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4744:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    4748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    474c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4750:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    4754:	4b07      	ldr	r3, [pc, #28]	; (4774 <SystemInit+0x18c>)
    4756:	4a08      	ldr	r2, [pc, #32]	; (4778 <SystemInit+0x190>)
    4758:	601a      	str	r2, [r3, #0]
}
    475a:	bd08      	pop	{r3, pc}
    475c:	50004000 	.word	0x50004000
    4760:	5003a000 	.word	0x5003a000
    4764:	00ff8000 	.word	0x00ff8000
    4768:	50039000 	.word	0x50039000
    476c:	e000ed00 	.word	0xe000ed00
    4770:	05fa0004 	.word	0x05fa0004
    4774:	2000c54c 	.word	0x2000c54c
    4778:	03d09000 	.word	0x03d09000

0000477c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    477c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    477e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4780:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4782:	fab2 f382 	clz	r3, r2
    4786:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    478a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    478c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    478e:	d010      	beq.n	47b2 <nrfx_flag32_alloc+0x36>
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4790:	fa05 f303 	lsl.w	r3, r5, r3
    4794:	ea22 0303 	bic.w	r3, r2, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4798:	e8d0 6fef 	ldaex	r6, [r0]
    479c:	4296      	cmp	r6, r2
    479e:	d104      	bne.n	47aa <nrfx_flag32_alloc+0x2e>
    47a0:	e8c0 3fec 	stlex	ip, r3, [r0]
    47a4:	f1bc 0f00 	cmp.w	ip, #0
    47a8:	d1f6      	bne.n	4798 <nrfx_flag32_alloc+0x1c>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    47aa:	d1e9      	bne.n	4780 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    47ac:	4802      	ldr	r0, [pc, #8]	; (47b8 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    47ae:	700c      	strb	r4, [r1, #0]
}
    47b0:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    47b2:	4802      	ldr	r0, [pc, #8]	; (47bc <nrfx_flag32_alloc+0x40>)
    47b4:	e7fc      	b.n	47b0 <nrfx_flag32_alloc+0x34>
    47b6:	bf00      	nop
    47b8:	0bad0000 	.word	0x0bad0000
    47bc:	0bad0002 	.word	0x0bad0002

000047c0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    47c0:	6803      	ldr	r3, [r0, #0]
{
    47c2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    47c4:	40cb      	lsrs	r3, r1
    47c6:	07db      	lsls	r3, r3, #31
    47c8:	d411      	bmi.n	47ee <nrfx_flag32_free+0x2e>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    47ca:	2301      	movs	r3, #1
    47cc:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    47d0:	6803      	ldr	r3, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    47d2:	ea41 0203 	orr.w	r2, r1, r3
    47d6:	e8d0 4fef 	ldaex	r4, [r0]
    47da:	429c      	cmp	r4, r3
    47dc:	d104      	bne.n	47e8 <nrfx_flag32_free+0x28>
    47de:	e8c0 2fec 	stlex	ip, r2, [r0]
    47e2:	f1bc 0f00 	cmp.w	ip, #0
    47e6:	d1f6      	bne.n	47d6 <nrfx_flag32_free+0x16>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    47e8:	d1f2      	bne.n	47d0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    47ea:	4802      	ldr	r0, [pc, #8]	; (47f4 <nrfx_flag32_free+0x34>)
}
    47ec:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    47ee:	4802      	ldr	r0, [pc, #8]	; (47f8 <nrfx_flag32_free+0x38>)
    47f0:	e7fc      	b.n	47ec <nrfx_flag32_free+0x2c>
    47f2:	bf00      	nop
    47f4:	0bad0000 	.word	0x0bad0000
    47f8:	0bad0004 	.word	0x0bad0004

000047fc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    47fc:	4b04      	ldr	r3, [pc, #16]	; (4810 <nrfx_clock_init+0x14>)
    47fe:	791a      	ldrb	r2, [r3, #4]
    4800:	b922      	cbnz	r2, 480c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4802:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4804:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4806:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4808:	4802      	ldr	r0, [pc, #8]	; (4814 <nrfx_clock_init+0x18>)
    480a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    480c:	4802      	ldr	r0, [pc, #8]	; (4818 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    480e:	4770      	bx	lr
    4810:	2000e6c0 	.word	0x2000e6c0
    4814:	0bad0000 	.word	0x0bad0000
    4818:	0bad000c 	.word	0x0bad000c

0000481c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    481c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4820:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4824:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4826:	b152      	cbz	r2, 483e <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4828:	2000      	movs	r0, #0
    482a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    482e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4832:	2201      	movs	r2, #1
    4834:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4838:	4b11      	ldr	r3, [pc, #68]	; (4880 <nrfx_power_clock_irq_handler+0x64>)
    483a:	681b      	ldr	r3, [r3, #0]
    483c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    483e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4842:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4846:	b18a      	cbz	r2, 486c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4848:	2200      	movs	r2, #0
    484a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    484e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4852:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4856:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    485a:	f002 0203 	and.w	r2, r2, #3
    485e:	2a01      	cmp	r2, #1
    4860:	f04f 0102 	mov.w	r1, #2
    4864:	d103      	bne.n	486e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4866:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    486a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    486c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    486e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4872:	4b03      	ldr	r3, [pc, #12]	; (4880 <nrfx_power_clock_irq_handler+0x64>)
    4874:	2001      	movs	r0, #1
}
    4876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    487a:	681b      	ldr	r3, [r3, #0]
    487c:	4718      	bx	r3
    487e:	bf00      	nop
    4880:	2000e6c0 	.word	0x2000e6c0

00004884 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    4884:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    4886:	4801      	ldr	r0, [pc, #4]	; (488c <nrfx_dppi_channel_alloc+0x8>)
    4888:	f7ff bf78 	b.w	477c <nrfx_flag32_alloc>
    488c:	2000c550 	.word	0x2000c550

00004890 <nrf_gpio_cfg_sense_set>:
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4890:	4a06      	ldr	r2, [pc, #24]	; (48ac <nrf_gpio_cfg_sense_set+0x1c>)
    *p_pin = pin_number & 0x1F;
    4892:	f000 001f 	and.w	r0, r0, #31
    4896:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    489a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    cnf &= ~to_update;
    489e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    48a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    48a6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
}
    48aa:	4770      	bx	lr
    48ac:	50842500 	.word	0x50842500

000048b0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    48b0:	4b03      	ldr	r3, [pc, #12]	; (48c0 <pin_in_use_by_te+0x10>)
    48b2:	3008      	adds	r0, #8
    48b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    48b8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    48bc:	4770      	bx	lr
    48be:	bf00      	nop
    48c0:	2000c554 	.word	0x2000c554

000048c4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    48c4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    48c6:	4c0d      	ldr	r4, [pc, #52]	; (48fc <call_handler+0x38>)
    48c8:	f100 0308 	add.w	r3, r0, #8
    48cc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    48d0:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    48d2:	05da      	lsls	r2, r3, #23
{
    48d4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    48d6:	d507      	bpl.n	48e8 <call_handler+0x24>
    48d8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    48dc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    48e0:	6852      	ldr	r2, [r2, #4]
    48e2:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    48e6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    48e8:	68a3      	ldr	r3, [r4, #8]
    48ea:	b12b      	cbz	r3, 48f8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    48ec:	4631      	mov	r1, r6
    48ee:	4628      	mov	r0, r5
    48f0:	68e2      	ldr	r2, [r4, #12]
    }
}
    48f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    48f6:	4718      	bx	r3
}
    48f8:	bd70      	pop	{r4, r5, r6, pc}
    48fa:	bf00      	nop
    48fc:	2000c554 	.word	0x2000c554

00004900 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4900:	4a13      	ldr	r2, [pc, #76]	; (4950 <release_handler+0x50>)
    4902:	3008      	adds	r0, #8
    4904:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
{
    4908:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    490a:	05d9      	lsls	r1, r3, #23
    490c:	d51c      	bpl.n	4948 <release_handler+0x48>
    490e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4912:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4916:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    491a:	2000      	movs	r0, #0
    491c:	f102 0410 	add.w	r4, r2, #16
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4920:	f834 3b02 	ldrh.w	r3, [r4], #2
    4924:	f413 7f80 	tst.w	r3, #256	; 0x100
    4928:	d003      	beq.n	4932 <release_handler+0x32>
    492a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    492e:	4299      	cmp	r1, r3
    4930:	d00a      	beq.n	4948 <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4932:	3001      	adds	r0, #1
    4934:	2820      	cmp	r0, #32
    4936:	d1f3      	bne.n	4920 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4938:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    493a:	4806      	ldr	r0, [pc, #24]	; (4954 <release_handler+0x54>)
}
    493c:	f85d 4b04 	ldr.w	r4, [sp], #4
        m_cb.handlers[handler_id].handler = NULL;
    4940:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4944:	f7ff bf3c 	b.w	47c0 <nrfx_flag32_free>
}
    4948:	f85d 4b04 	ldr.w	r4, [sp], #4
    494c:	4770      	bx	lr
    494e:	bf00      	nop
    4950:	2000c554 	.word	0x2000c554
    4954:	2000c5a8 	.word	0x2000c5a8

00004958 <pin_handler_trigger_uninit>:
{
    4958:	b538      	push	{r3, r4, r5, lr}
    495a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    495c:	f7ff ffa8 	bl	48b0 <pin_in_use_by_te>
    4960:	4c0b      	ldr	r4, [pc, #44]	; (4990 <pin_handler_trigger_uninit+0x38>)
    4962:	f102 0508 	add.w	r5, r2, #8
    4966:	b160      	cbz	r0, 4982 <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4968:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    496a:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    496e:	0b5b      	lsrs	r3, r3, #13
    4970:	009b      	lsls	r3, r3, #2
    4972:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4976:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    497a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    497e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    4982:	4610      	mov	r0, r2
    4984:	f7ff ffbc 	bl	4900 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4988:	2300      	movs	r3, #0
    498a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    498e:	bd38      	pop	{r3, r4, r5, pc}
    4990:	2000c554 	.word	0x2000c554

00004994 <nrfx_gpiote_input_configure>:
{
    4994:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4998:	4604      	mov	r4, r0
    499a:	461d      	mov	r5, r3
    if (p_input_config)
    499c:	b309      	cbz	r1, 49e2 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    499e:	4f4d      	ldr	r7, [pc, #308]	; (4ad4 <nrfx_gpiote_input_configure+0x140>)
    49a0:	f100 0808 	add.w	r8, r0, #8
    49a4:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    49a8:	07b3      	lsls	r3, r6, #30
    49aa:	d506      	bpl.n	49ba <nrfx_gpiote_input_configure+0x26>
    49ac:	f7ff ff80 	bl	48b0 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    49b0:	b118      	cbz	r0, 49ba <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    49b2:	4849      	ldr	r0, [pc, #292]	; (4ad8 <nrfx_gpiote_input_configure+0x144>)
}
    49b4:	b002      	add	sp, #8
    49b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint32_t cnf = reg->PIN_CNF[pin_number];
    49ba:	4b48      	ldr	r3, [pc, #288]	; (4adc <nrfx_gpiote_input_configure+0x148>)
    *p_pin = pin_number & 0x1F;
    49bc:	f004 001f 	and.w	r0, r4, #31
    49c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    49c4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    49c8:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    49ca:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    49ce:	f026 0602 	bic.w	r6, r6, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    49d2:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    49d6:	f046 0601 	orr.w	r6, r6, #1
    reg->PIN_CNF[pin_number] = cnf;
    49da:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    49de:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    if (p_trigger_config)
    49e2:	b192      	cbz	r2, 4a0a <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    49e4:	4b3b      	ldr	r3, [pc, #236]	; (4ad4 <nrfx_gpiote_input_configure+0x140>)
    49e6:	f104 0608 	add.w	r6, r4, #8
    49ea:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    49ee:	7810      	ldrb	r0, [r2, #0]
        if (pin_is_output(pin))
    49f0:	078f      	lsls	r7, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    49f2:	6852      	ldr	r2, [r2, #4]
        if (pin_is_output(pin))
    49f4:	d50c      	bpl.n	4a10 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    49f6:	2a00      	cmp	r2, #0
    49f8:	d1db      	bne.n	49b2 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    49fa:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    49fe:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4a02:	ea42 0080 	orr.w	r0, r2, r0, lsl #2
    4a06:	f823 0016 	strh.w	r0, [r3, r6, lsl #1]
    if (p_handler_config)
    4a0a:	bbcd      	cbnz	r5, 4a80 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    4a0c:	4834      	ldr	r0, [pc, #208]	; (4ae0 <nrfx_gpiote_input_configure+0x14c>)
    4a0e:	e7d1      	b.n	49b4 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4a10:	f021 0120 	bic.w	r1, r1, #32
    4a14:	04c9      	lsls	r1, r1, #19
    4a16:	0cc9      	lsrs	r1, r1, #19
    4a18:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    4a1c:	2a00      	cmp	r2, #0
    4a1e:	d0ec      	beq.n	49fa <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    4a20:	2803      	cmp	r0, #3
    4a22:	d8c6      	bhi.n	49b2 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4a24:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4a28:	4662      	mov	r2, ip
    4a2a:	0092      	lsls	r2, r2, #2
    4a2c:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    4a30:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4a34:	b920      	cbnz	r0, 4a40 <nrfx_gpiote_input_configure+0xac>
    p_reg->CONFIG[idx] = 0;
    4a36:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    4a3a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
#endif
}
    4a3e:	e7dc      	b.n	49fa <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4a40:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4a44:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    4a48:	f027 0703 	bic.w	r7, r7, #3
    4a4c:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4a50:	f8d2 7510 	ldr.w	r7, [r2, #1296]	; 0x510
    4a54:	f041 0120 	orr.w	r1, r1, #32
    4a58:	f427 3747 	bic.w	r7, r7, #203776	; 0x31c00
    4a5c:	f427 7740 	bic.w	r7, r7, #768	; 0x300
    4a60:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4a64:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4a68:	0227      	lsls	r7, r4, #8
    4a6a:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
    4a6e:	ea4e 4e00 	orr.w	lr, lr, r0, lsl #16
    4a72:	ea47 070e 	orr.w	r7, r7, lr
    4a76:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    4a7a:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    4a7e:	e7bc      	b.n	49fa <nrfx_gpiote_input_configure+0x66>
    release_handler(pin);
    4a80:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4a82:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4a86:	f7ff ff3b 	bl	4900 <release_handler>
    if (!handler)
    4a8a:	2e00      	cmp	r6, #0
    4a8c:	d0be      	beq.n	4a0c <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4a8e:	4d11      	ldr	r5, [pc, #68]	; (4ad4 <nrfx_gpiote_input_configure+0x140>)
    4a90:	682b      	ldr	r3, [r5, #0]
    4a92:	429e      	cmp	r6, r3
    4a94:	d104      	bne.n	4aa0 <nrfx_gpiote_input_configure+0x10c>
    4a96:	686b      	ldr	r3, [r5, #4]
    4a98:	429f      	cmp	r7, r3
    4a9a:	d101      	bne.n	4aa0 <nrfx_gpiote_input_configure+0x10c>
    4a9c:	2200      	movs	r2, #0
    4a9e:	e009      	b.n	4ab4 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4aa0:	4810      	ldr	r0, [pc, #64]	; (4ae4 <nrfx_gpiote_input_configure+0x150>)
    4aa2:	f10d 0107 	add.w	r1, sp, #7
    4aa6:	f7ff fe69 	bl	477c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4aaa:	4b0d      	ldr	r3, [pc, #52]	; (4ae0 <nrfx_gpiote_input_configure+0x14c>)
    4aac:	4298      	cmp	r0, r3
    4aae:	d181      	bne.n	49b4 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    4ab0:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].p_context = p_context;
    4ab4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4ab8:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4aba:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4abc:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    4ac0:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4ac4:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4acc:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4ad0:	e79c      	b.n	4a0c <nrfx_gpiote_input_configure+0x78>
    4ad2:	bf00      	nop
    4ad4:	2000c554 	.word	0x2000c554
    4ad8:	0bad0004 	.word	0x0bad0004
    4adc:	50842500 	.word	0x50842500
    4ae0:	0bad0000 	.word	0x0bad0000
    4ae4:	2000c5a8 	.word	0x2000c5a8

00004ae8 <nrfx_gpiote_output_configure>:
{
    4ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4aea:	4604      	mov	r4, r0
    if (p_config)
    4aec:	b369      	cbz	r1, 4b4a <nrfx_gpiote_output_configure+0x62>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4aee:	4e37      	ldr	r6, [pc, #220]	; (4bcc <nrfx_gpiote_output_configure+0xe4>)
    4af0:	f100 0708 	add.w	r7, r0, #8
    4af4:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4af8:	07ab      	lsls	r3, r5, #30
    4afa:	d404      	bmi.n	4b06 <nrfx_gpiote_output_configure+0x1e>
    4afc:	f7ff fed8 	bl	48b0 <pin_in_use_by_te>
    4b00:	b108      	cbz	r0, 4b06 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    4b02:	4833      	ldr	r0, [pc, #204]	; (4bd0 <nrfx_gpiote_output_configure+0xe8>)
}
    4b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4b06:	f015 0f1c 	tst.w	r5, #28
    4b0a:	784b      	ldrb	r3, [r1, #1]
    4b0c:	d001      	beq.n	4b12 <nrfx_gpiote_output_configure+0x2a>
    4b0e:	2b01      	cmp	r3, #1
    4b10:	d0f7      	beq.n	4b02 <nrfx_gpiote_output_configure+0x1a>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4b12:	4830      	ldr	r0, [pc, #192]	; (4bd4 <nrfx_gpiote_output_configure+0xec>)
    *p_pin = pin_number & 0x1F;
    4b14:	f004 0c1f 	and.w	ip, r4, #31
    4b18:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4b1c:	f8dc 0200 	ldr.w	r0, [ip, #512]	; 0x200
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4b20:	f891 e000 	ldrb.w	lr, [r1]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4b24:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    4b26:	f420 60e1 	bic.w	r0, r0, #1800	; 0x708
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4b2a:	7889      	ldrb	r1, [r1, #2]
    4b2c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    cnf &= ~to_update;
    4b30:	f020 0007 	bic.w	r0, r0, #7
    4b34:	4303      	orrs	r3, r0
    4b36:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4b3a:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4b3e:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    4b42:	f8cc 3200 	str.w	r3, [ip, #512]	; 0x200
    4b46:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    4b4a:	b90a      	cbnz	r2, 4b50 <nrfx_gpiote_output_configure+0x68>
    return NRFX_SUCCESS;
    4b4c:	4822      	ldr	r0, [pc, #136]	; (4bd8 <nrfx_gpiote_output_configure+0xf0>)
    4b4e:	e7d9      	b.n	4b04 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b50:	4e1e      	ldr	r6, [pc, #120]	; (4bcc <nrfx_gpiote_output_configure+0xe4>)
    4b52:	f104 0708 	add.w	r7, r4, #8
    4b56:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4b5a:	0783      	lsls	r3, r0, #30
    4b5c:	d5d1      	bpl.n	4b02 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    4b5e:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    4b62:	2300      	movs	r3, #0
    4b64:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4b66:	f020 0020 	bic.w	r0, r0, #32
    4b6a:	0089      	lsls	r1, r1, #2
    4b6c:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    4b70:	04c0      	lsls	r0, r0, #19
    4b72:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    4b76:	0cc0      	lsrs	r0, r0, #19
    4b78:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4b7c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    4b80:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4b84:	7855      	ldrb	r5, [r2, #1]
    4b86:	2d00      	cmp	r5, #0
    4b88:	d0e0      	beq.n	4b4c <nrfx_gpiote_output_configure+0x64>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4b8a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4b8e:	7892      	ldrb	r2, [r2, #2]
    4b90:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    4b94:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4b98:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4b9c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4ba0:	0223      	lsls	r3, r4, #8
    4ba2:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4ba6:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4ba8:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4bac:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4bb0:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4bb2:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4bb4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4bb8:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4bbc:	4313      	orrs	r3, r2
    4bbe:	f040 0020 	orr.w	r0, r0, #32
    4bc2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4bc6:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4bca:	e7bf      	b.n	4b4c <nrfx_gpiote_output_configure+0x64>
    4bcc:	2000c554 	.word	0x2000c554
    4bd0:	0bad0004 	.word	0x0bad0004
    4bd4:	50842500 	.word	0x50842500
    4bd8:	0bad0000 	.word	0x0bad0000

00004bdc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4bdc:	4b01      	ldr	r3, [pc, #4]	; (4be4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4bde:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4be2:	4770      	bx	lr
    4be4:	2000c554 	.word	0x2000c554

00004be8 <nrfx_gpiote_channel_get>:
{
    4be8:	b508      	push	{r3, lr}
    4bea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4bec:	f7ff fe60 	bl	48b0 <pin_in_use_by_te>
    4bf0:	b138      	cbz	r0, 4c02 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4bf2:	4b05      	ldr	r3, [pc, #20]	; (4c08 <nrfx_gpiote_channel_get+0x20>)
    4bf4:	3208      	adds	r2, #8
    4bf6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    4bfa:	4804      	ldr	r0, [pc, #16]	; (4c0c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4bfc:	0b5b      	lsrs	r3, r3, #13
    4bfe:	700b      	strb	r3, [r1, #0]
}
    4c00:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4c02:	4803      	ldr	r0, [pc, #12]	; (4c10 <nrfx_gpiote_channel_get+0x28>)
    4c04:	e7fc      	b.n	4c00 <nrfx_gpiote_channel_get+0x18>
    4c06:	bf00      	nop
    4c08:	2000c554 	.word	0x2000c554
    4c0c:	0bad0000 	.word	0x0bad0000
    4c10:	0bad0004 	.word	0x0bad0004

00004c14 <nrfx_gpiote_init>:
{
    4c14:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4c16:	4c0f      	ldr	r4, [pc, #60]	; (4c54 <nrfx_gpiote_init+0x40>)
    4c18:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    4c1c:	b9bd      	cbnz	r5, 4c4e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4c1e:	2240      	movs	r2, #64	; 0x40
    4c20:	4629      	mov	r1, r5
    4c22:	f104 0010 	add.w	r0, r4, #16
    4c26:	f003 fda0 	bl	876a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4c2a:	200d      	movs	r0, #13
    4c2c:	f7fd ffc2 	bl	2bb4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4c30:	4b09      	ldr	r3, [pc, #36]	; (4c58 <nrfx_gpiote_init+0x44>)
    return err_code;
    4c32:	480a      	ldr	r0, [pc, #40]	; (4c5c <nrfx_gpiote_init+0x48>)
    4c34:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4c38:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4c3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4c40:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4c44:	2301      	movs	r3, #1
    4c46:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4c4a:	6563      	str	r3, [r4, #84]	; 0x54
}
    4c4c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4c4e:	4804      	ldr	r0, [pc, #16]	; (4c60 <nrfx_gpiote_init+0x4c>)
    4c50:	e7fc      	b.n	4c4c <nrfx_gpiote_init+0x38>
    4c52:	bf00      	nop
    4c54:	2000c554 	.word	0x2000c554
    4c58:	5000d000 	.word	0x5000d000
    4c5c:	0bad0000 	.word	0x0bad0000
    4c60:	0bad0005 	.word	0x0bad0005

00004c64 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4c64:	4b03      	ldr	r3, [pc, #12]	; (4c74 <nrfx_gpiote_is_init+0x10>)
    4c66:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    4c6a:	3800      	subs	r0, #0
    4c6c:	bf18      	it	ne
    4c6e:	2001      	movne	r0, #1
    4c70:	4770      	bx	lr
    4c72:	bf00      	nop
    4c74:	2000c554 	.word	0x2000c554

00004c78 <nrfx_gpiote_channel_free>:
{
    4c78:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4c7a:	4801      	ldr	r0, [pc, #4]	; (4c80 <nrfx_gpiote_channel_free+0x8>)
    4c7c:	f7ff bda0 	b.w	47c0 <nrfx_flag32_free>
    4c80:	2000c5a4 	.word	0x2000c5a4

00004c84 <nrfx_gpiote_channel_alloc>:
{
    4c84:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4c86:	4801      	ldr	r0, [pc, #4]	; (4c8c <nrfx_gpiote_channel_alloc+0x8>)
    4c88:	f7ff bd78 	b.w	477c <nrfx_flag32_alloc>
    4c8c:	2000c5a4 	.word	0x2000c5a4

00004c90 <nrfx_gpiote_trigger_enable>:
{
    4c90:	4602      	mov	r2, r0
    4c92:	b510      	push	{r4, lr}
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4c94:	f7ff fe0c 	bl	48b0 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4c98:	4b1c      	ldr	r3, [pc, #112]	; (4d0c <nrfx_gpiote_trigger_enable+0x7c>)
    4c9a:	f102 0408 	add.w	r4, r2, #8
    4c9e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ca2:	b1e0      	cbz	r0, 4cde <nrfx_gpiote_trigger_enable+0x4e>
    4ca4:	f013 0402 	ands.w	r4, r3, #2
    4ca8:	d119      	bne.n	4cde <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4caa:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4cac:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4cae:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    4cb2:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    4cb6:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4cba:	6004      	str	r4, [r0, #0]
    4cbc:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    4cc0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4cc2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4cc6:	f040 0001 	orr.w	r0, r0, #1
    4cca:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4cce:	b129      	cbz	r1, 4cdc <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4cd0:	2201      	movs	r2, #1
    4cd2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4cd6:	4a0e      	ldr	r2, [pc, #56]	; (4d10 <nrfx_gpiote_trigger_enable+0x80>)
    4cd8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4cdc:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4cde:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4ce2:	2b04      	cmp	r3, #4
    4ce4:	d00e      	beq.n	4d04 <nrfx_gpiote_trigger_enable+0x74>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4ce6:	2b05      	cmp	r3, #5
    4ce8:	d00e      	beq.n	4d08 <nrfx_gpiote_trigger_enable+0x78>
    return p_reg->IN;
    4cea:	4b0a      	ldr	r3, [pc, #40]	; (4d14 <nrfx_gpiote_trigger_enable+0x84>)
    4cec:	6919      	ldr	r1, [r3, #16]
    *p_pin = pin_number & 0x1F;
    4cee:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4cf2:	40d9      	lsrs	r1, r3
    4cf4:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4cf8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4cfa:	4610      	mov	r0, r2
}
    4cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4d00:	f7ff bdc6 	b.w	4890 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4d04:	2103      	movs	r1, #3
    4d06:	e7f8      	b.n	4cfa <nrfx_gpiote_trigger_enable+0x6a>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4d08:	2102      	movs	r1, #2
    4d0a:	e7f6      	b.n	4cfa <nrfx_gpiote_trigger_enable+0x6a>
    4d0c:	2000c554 	.word	0x2000c554
    4d10:	5000d000 	.word	0x5000d000
    4d14:	50842500 	.word	0x50842500

00004d18 <nrfx_gpiote_trigger_disable>:
{
    4d18:	b508      	push	{r3, lr}
    4d1a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d1c:	f7ff fdc8 	bl	48b0 <pin_in_use_by_te>
    4d20:	b1c0      	cbz	r0, 4d54 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d22:	4b0f      	ldr	r3, [pc, #60]	; (4d60 <nrfx_gpiote_trigger_disable+0x48>)
    4d24:	f102 0108 	add.w	r1, r2, #8
    4d28:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d2c:	0799      	lsls	r1, r3, #30
    4d2e:	d411      	bmi.n	4d54 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4d30:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d32:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4d34:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4d36:	490b      	ldr	r1, [pc, #44]	; (4d64 <nrfx_gpiote_trigger_disable+0x4c>)
    4d38:	009b      	lsls	r3, r3, #2
    4d3a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4d3e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4d42:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    4d46:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4d4a:	f022 0203 	bic.w	r2, r2, #3
    4d4e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4d52:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4d54:	2100      	movs	r1, #0
}
    4d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4d5a:	4610      	mov	r0, r2
    4d5c:	f7ff bd98 	b.w	4890 <nrf_gpio_cfg_sense_set>
    4d60:	2000c554 	.word	0x2000c554
    4d64:	5000d000 	.word	0x5000d000

00004d68 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4d68:	4b0c      	ldr	r3, [pc, #48]	; (4d9c <nrfx_gpiote_pin_uninit+0x34>)
    4d6a:	f100 0208 	add.w	r2, r0, #8
    4d6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    4d72:	b510      	push	{r4, lr}
    if (!pin_in_use(pin))
    4d74:	07db      	lsls	r3, r3, #31
{
    4d76:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4d78:	d50d      	bpl.n	4d96 <nrfx_gpiote_pin_uninit+0x2e>
    nrfx_gpiote_trigger_disable(pin);
    4d7a:	f7ff ffcd 	bl	4d18 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4d7e:	4620      	mov	r0, r4
    4d80:	f7ff fdea 	bl	4958 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    4d84:	2202      	movs	r2, #2
    4d86:	4b06      	ldr	r3, [pc, #24]	; (4da0 <nrfx_gpiote_pin_uninit+0x38>)
    *p_pin = pin_number & 0x1F;
    4d88:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    4d8c:	3480      	adds	r4, #128	; 0x80
    4d8e:	4805      	ldr	r0, [pc, #20]	; (4da4 <nrfx_gpiote_pin_uninit+0x3c>)
    4d90:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
    4d94:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4d96:	4804      	ldr	r0, [pc, #16]	; (4da8 <nrfx_gpiote_pin_uninit+0x40>)
    4d98:	e7fc      	b.n	4d94 <nrfx_gpiote_pin_uninit+0x2c>
    4d9a:	bf00      	nop
    4d9c:	2000c554 	.word	0x2000c554
    4da0:	50842500 	.word	0x50842500
    4da4:	0bad0000 	.word	0x0bad0000
    4da8:	0bad0004 	.word	0x0bad0004

00004dac <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    4db0:	2500      	movs	r5, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4db2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4db4:	462c      	mov	r4, r5
{
    4db6:	4b4d      	ldr	r3, [pc, #308]	; (4eec <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    4db8:	484d      	ldr	r0, [pc, #308]	; (4ef0 <nrfx_gpiote_irq_handler+0x144>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4dba:	494e      	ldr	r1, [pc, #312]	; (4ef4 <nrfx_gpiote_irq_handler+0x148>)
{
    4dbc:	b085      	sub	sp, #20
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dbe:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4dc0:	b136      	cbz	r6, 4dd0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4dc2:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4dc6:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4dc8:	bf1e      	ittt	ne
    4dca:	601c      	strne	r4, [r3, #0]
    4dcc:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4dce:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4dd0:	3304      	adds	r3, #4
    4dd2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4dd4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4dd8:	d1f1      	bne.n	4dbe <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4dda:	4f45      	ldr	r7, [pc, #276]	; (4ef0 <nrfx_gpiote_irq_handler+0x144>)
    4ddc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4de0:	b193      	cbz	r3, 4e08 <nrfx_gpiote_irq_handler+0x5c>
        *p_masks = gpio_regs[i]->LATCH;
    4de2:	4e45      	ldr	r6, [pc, #276]	; (4ef8 <nrfx_gpiote_irq_handler+0x14c>)
    4de4:	6a33      	ldr	r3, [r6, #32]
    4de6:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    4de8:	6233      	str	r3, [r6, #32]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4dea:	f04f 0901 	mov.w	r9, #1
    4dee:	f10d 080c 	add.w	r8, sp, #12
            while (latch[i])
    4df2:	9803      	ldr	r0, [sp, #12]
    4df4:	b950      	cbnz	r0, 4e0c <nrfx_gpiote_irq_handler+0x60>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4df6:	f8c7 017c 	str.w	r0, [r7, #380]	; 0x17c
    4dfa:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    4dfe:	6a33      	ldr	r3, [r6, #32]
    4e00:	9303      	str	r3, [sp, #12]
        gpio_regs[i]->LATCH = *p_masks;
    4e02:	6233      	str	r3, [r6, #32]
        if (latch[port_idx])
    4e04:	2b00      	cmp	r3, #0
    4e06:	d1f0      	bne.n	4dea <nrfx_gpiote_irq_handler+0x3e>
        mask &= ~NRFX_BIT(ch);
    4e08:	2401      	movs	r4, #1
    4e0a:	e069      	b.n	4ee0 <nrfx_gpiote_irq_handler+0x134>
                uint32_t pin = NRF_CTZ(latch[i]);
    4e0c:	fa90 faa0 	rbit	sl, r0
    4e10:	faba fa8a 	clz	sl, sl
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e14:	4a39      	ldr	r2, [pc, #228]	; (4efc <nrfx_gpiote_irq_handler+0x150>)
    4e16:	f10a 0308 	add.w	r3, sl, #8
    4e1a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4e1e:	ea4f 0cda 	mov.w	ip, sl, lsr #3
    bit = BITMASK_RELBIT_GET(bit);
    4e22:	f00a 0307 	and.w	r3, sl, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4e26:	fa09 f403 	lsl.w	r4, r9, r3
    4e2a:	f818 300c 	ldrb.w	r3, [r8, ip]
    4e2e:	f3c1 0282 	ubfx	r2, r1, #2, #3
    4e32:	ea23 0304 	bic.w	r3, r3, r4
    4e36:	f808 300c 	strb.w	r3, [r8, ip]
    4e3a:	eb06 038a 	add.w	r3, r6, sl, lsl #2
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4e3e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    if (is_level(trigger))
    4e42:	06c8      	lsls	r0, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e44:	4693      	mov	fp, r2
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4e46:	f3c4 4401 	ubfx	r4, r4, #16, #2
    if (is_level(trigger))
    4e4a:	d518      	bpl.n	4e7e <nrfx_gpiote_irq_handler+0xd2>
        call_handler(pin, trigger);
    4e4c:	4611      	mov	r1, r2
    4e4e:	4650      	mov	r0, sl
    4e50:	9301      	str	r3, [sp, #4]
    4e52:	f7ff fd37 	bl	48c4 <call_handler>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4e56:	9b01      	ldr	r3, [sp, #4]
    4e58:	b2e4      	uxtb	r4, r4
    4e5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4e5e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4e62:	429c      	cmp	r4, r3
    4e64:	d107      	bne.n	4e76 <nrfx_gpiote_irq_handler+0xca>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4e66:	2100      	movs	r1, #0
    4e68:	4650      	mov	r0, sl
    4e6a:	f7ff fd11 	bl	4890 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4e6e:	4621      	mov	r1, r4
    4e70:	4650      	mov	r0, sl
    4e72:	f7ff fd0d 	bl	4890 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    4e76:	fa09 f00a 	lsl.w	r0, r9, sl
    4e7a:	6230      	str	r0, [r6, #32]
}
    4e7c:	e7b9      	b.n	4df2 <nrfx_gpiote_irq_handler+0x46>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4e7e:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4e80:	bf0c      	ite	eq
    4e82:	2103      	moveq	r1, #3
    4e84:	2102      	movne	r1, #2
    4e86:	4650      	mov	r0, sl
    4e88:	9201      	str	r2, [sp, #4]
    4e8a:	f7ff fd01 	bl	4890 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4e8e:	9a01      	ldr	r2, [sp, #4]
    4e90:	2a03      	cmp	r2, #3
    4e92:	d004      	beq.n	4e9e <nrfx_gpiote_irq_handler+0xf2>
    4e94:	2c02      	cmp	r4, #2
    4e96:	d107      	bne.n	4ea8 <nrfx_gpiote_irq_handler+0xfc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4e98:	f1bb 0f01 	cmp.w	fp, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4e9c:	d1eb      	bne.n	4e76 <nrfx_gpiote_irq_handler+0xca>
            call_handler(pin, trigger);
    4e9e:	4659      	mov	r1, fp
    4ea0:	4650      	mov	r0, sl
    4ea2:	f7ff fd0f 	bl	48c4 <call_handler>
    4ea6:	e7e6      	b.n	4e76 <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4ea8:	2c03      	cmp	r4, #3
    4eaa:	d1e4      	bne.n	4e76 <nrfx_gpiote_irq_handler+0xca>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4eac:	f1bb 0f02 	cmp.w	fp, #2
    4eb0:	e7f4      	b.n	4e9c <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    4eb2:	fa95 f3a5 	rbit	r3, r5
    4eb6:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4eba:	fa04 f203 	lsl.w	r2, r4, r3
    4ebe:	009b      	lsls	r3, r3, #2
    4ec0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    4ec4:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4ec8:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4ecc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4ed0:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4ed4:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    4ed8:	ea25 0502 	bic.w	r5, r5, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4edc:	f7ff fcf2 	bl	48c4 <call_handler>
    while (mask)
    4ee0:	2d00      	cmp	r5, #0
    4ee2:	d1e6      	bne.n	4eb2 <nrfx_gpiote_irq_handler+0x106>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4ee4:	b005      	add	sp, #20
    4ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4eea:	bf00      	nop
    4eec:	5000d100 	.word	0x5000d100
    4ef0:	5000d000 	.word	0x5000d000
    4ef4:	5000d120 	.word	0x5000d120
    4ef8:	50842500 	.word	0x50842500
    4efc:	2000c554 	.word	0x2000c554

00004f00 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    4f00:	2200      	movs	r2, #0
    4f02:	4b03      	ldr	r3, [pc, #12]	; (4f10 <nvmc_readonly_mode_set+0x10>)
    4f04:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4f08:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    4f0c:	4770      	bx	lr
    4f0e:	bf00      	nop
    4f10:	50039000 	.word	0x50039000

00004f14 <nvmc_word_write>:
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    4f14:	4a04      	ldr	r2, [pc, #16]	; (4f28 <nvmc_word_write+0x14>)
    4f16:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
}

static void nvmc_word_write(uint32_t addr, uint32_t value)
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    4f1a:	07db      	lsls	r3, r3, #31
    4f1c:	d5fb      	bpl.n	4f16 <nvmc_word_write+0x2>
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
#endif

    *(volatile uint32_t *)addr = value;
    4f1e:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    4f20:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    4f24:	4770      	bx	lr
    4f26:	bf00      	nop
    4f28:	50039000 	.word	0x50039000

00004f2c <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    4f2c:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    4f2e:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    4f32:	b983      	cbnz	r3, 4f56 <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    4f34:	2202      	movs	r2, #2
    4f36:	4b09      	ldr	r3, [pc, #36]	; (4f5c <nrfx_nvmc_page_erase+0x30>)
    4f38:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4f3c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    4f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4f44:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    4f46:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    4f4a:	07d2      	lsls	r2, r2, #31
    4f4c:	d5fb      	bpl.n	4f46 <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    4f4e:	f7ff ffd7 	bl	4f00 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    4f52:	4803      	ldr	r0, [pc, #12]	; (4f60 <nrfx_nvmc_page_erase+0x34>)
}
    4f54:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    4f56:	4803      	ldr	r0, [pc, #12]	; (4f64 <nrfx_nvmc_page_erase+0x38>)
    4f58:	e7fc      	b.n	4f54 <nrfx_nvmc_page_erase+0x28>
    4f5a:	bf00      	nop
    4f5c:	50039000 	.word	0x50039000
    4f60:	0bad0000 	.word	0x0bad0000
    4f64:	0bad000a 	.word	0x0bad000a

00004f68 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    4f68:	2201      	movs	r2, #1

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
    4f6a:	b508      	push	{r3, lr}
    4f6c:	4b05      	ldr	r3, [pc, #20]	; (4f84 <nrfx_nvmc_word_write+0x1c>)
    4f6e:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    4f72:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
    4f76:	f7ff ffcd 	bl	4f14 <nvmc_word_write>

    nvmc_readonly_mode_set();
}
    4f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nvmc_readonly_mode_set();
    4f7e:	f7ff bfbf 	b.w	4f00 <nvmc_readonly_mode_set>
    4f82:	bf00      	nop
    4f84:	50039000 	.word	0x50039000

00004f88 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4f88:	4b0e      	ldr	r3, [pc, #56]	; (4fc4 <z_sys_init_run_level+0x3c>)
{
    4f8a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4f8c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4f90:	3001      	adds	r0, #1
    4f92:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4f96:	42a6      	cmp	r6, r4
    4f98:	d800      	bhi.n	4f9c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4f9a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4f9c:	e9d4 3500 	ldrd	r3, r5, [r4]
    4fa0:	4628      	mov	r0, r5
    4fa2:	4798      	blx	r3
		if (dev != NULL) {
    4fa4:	b165      	cbz	r5, 4fc0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4fa6:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4fa8:	b130      	cbz	r0, 4fb8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4faa:	2800      	cmp	r0, #0
    4fac:	bfb8      	it	lt
    4fae:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4fb0:	28ff      	cmp	r0, #255	; 0xff
    4fb2:	bfa8      	it	ge
    4fb4:	20ff      	movge	r0, #255	; 0xff
    4fb6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4fb8:	785a      	ldrb	r2, [r3, #1]
    4fba:	f042 0201 	orr.w	r2, r2, #1
    4fbe:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4fc0:	3408      	adds	r4, #8
    4fc2:	e7e8      	b.n	4f96 <z_sys_init_run_level+0xe>
    4fc4:	000099b8 	.word	0x000099b8

00004fc8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4fca:	4605      	mov	r5, r0
    4fcc:	460e      	mov	r6, r1
	__asm__ volatile(
    4fce:	f04f 0320 	mov.w	r3, #32
    4fd2:	f3ef 8711 	mrs	r7, BASEPRI
    4fd6:	f383 8812 	msr	BASEPRI_MAX, r3
    4fda:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4fde:	f000 fdcb 	bl	5b78 <z_impl_z_current_get>
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4fe2:	2200      	movs	r2, #0
    4fe4:	2d04      	cmp	r5, #4
    4fe6:	bf98      	it	ls
    4fe8:	4b18      	ldrls	r3, [pc, #96]	; (504c <z_fatal_error+0x84>)
    4fea:	4604      	mov	r4, r0
	switch (reason) {
    4fec:	bf94      	ite	ls
    4fee:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    4ff2:	4b17      	ldrhi	r3, [pc, #92]	; (5050 <z_fatal_error+0x88>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4ff4:	9200      	str	r2, [sp, #0]
    4ff6:	2145      	movs	r1, #69	; 0x45
    4ff8:	462a      	mov	r2, r5
    4ffa:	4816      	ldr	r0, [pc, #88]	; (5054 <z_fatal_error+0x8c>)
    4ffc:	f003 f841 	bl	8082 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5000:	b13e      	cbz	r6, 5012 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5002:	69f3      	ldr	r3, [r6, #28]
    5004:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5008:	b11b      	cbz	r3, 5012 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    500a:	2145      	movs	r1, #69	; 0x45
    500c:	4812      	ldr	r0, [pc, #72]	; (5058 <z_fatal_error+0x90>)
    500e:	f003 f838 	bl	8082 <z_log_minimal_printk>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5012:	b12c      	cbz	r4, 5020 <z_fatal_error+0x58>
    5014:	4620      	mov	r0, r4
    5016:	f004 f8bc 	bl	9192 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    501a:	b108      	cbz	r0, 5020 <z_fatal_error+0x58>
    501c:	7803      	ldrb	r3, [r0, #0]
    501e:	b903      	cbnz	r3, 5022 <z_fatal_error+0x5a>
		thread_name = "unknown";
    5020:	480e      	ldr	r0, [pc, #56]	; (505c <z_fatal_error+0x94>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5022:	4603      	mov	r3, r0
    5024:	4622      	mov	r2, r4
    5026:	2145      	movs	r1, #69	; 0x45
    5028:	480d      	ldr	r0, [pc, #52]	; (5060 <z_fatal_error+0x98>)
    502a:	f003 f82a 	bl	8082 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    502e:	4631      	mov	r1, r6
    5030:	4628      	mov	r0, r5
    5032:	f7ff f9db 	bl	43ec <k_sys_fatal_error_handler>
	__asm__ volatile(
    5036:	f387 8811 	msr	BASEPRI, r7
    503a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    503e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5040:	b003      	add	sp, #12
    5042:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5046:	f7fe b95f 	b.w	3308 <z_impl_k_thread_abort>
    504a:	bf00      	nop
    504c:	000099d0 	.word	0x000099d0
    5050:	0000a9c0 	.word	0x0000a9c0
    5054:	0000a9d6 	.word	0x0000a9d6
    5058:	0000aa03 	.word	0x0000aa03
    505c:	0000a9ce 	.word	0x0000a9ce
    5060:	0000aa29 	.word	0x0000aa29

00005064 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    5064:	2201      	movs	r2, #1
{
    5066:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5068:	4b09      	ldr	r3, [pc, #36]	; (5090 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    506a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    506c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    506e:	f7ff ff8b 	bl	4f88 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5072:	f000 ff39 	bl	5ee8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5076:	2003      	movs	r0, #3
    5078:	f7ff ff86 	bl	4f88 <z_sys_init_run_level>

	z_init_static_threads();
    507c:	f000 f932 	bl	52e4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    5080:	f7fb f9ec 	bl	45c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5084:	4a03      	ldr	r2, [pc, #12]	; (5094 <bg_thread_main+0x30>)
    5086:	7b13      	ldrb	r3, [r2, #12]
    5088:	f023 0301 	bic.w	r3, r3, #1
    508c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    508e:	bd08      	pop	{r3, pc}
    5090:	2000ee84 	.word	0x2000ee84
    5094:	2000c760 	.word	0x2000c760

00005098 <z_bss_zero>:
{
    5098:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    509a:	4803      	ldr	r0, [pc, #12]	; (50a8 <z_bss_zero+0x10>)
    509c:	4a03      	ldr	r2, [pc, #12]	; (50ac <z_bss_zero+0x14>)
    509e:	2100      	movs	r1, #0
    50a0:	1a12      	subs	r2, r2, r0
    50a2:	f004 f828 	bl	90f6 <z_early_memset>
}
    50a6:	bd08      	pop	{r3, pc}
    50a8:	2000c680 	.word	0x2000c680
    50ac:	2000ee88 	.word	0x2000ee88

000050b0 <z_init_cpu>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
	struct k_thread *thread = &z_idle_threads[i];
    50b0:	23c0      	movs	r3, #192	; 0xc0
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    50b2:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    50b4:	4e13      	ldr	r6, [pc, #76]	; (5104 <z_init_cpu+0x54>)
	z_setup_new_thread(thread, stack,
    50b6:	2201      	movs	r2, #1
	struct k_thread *thread = &z_idle_threads[i];
    50b8:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    50bc:	2300      	movs	r3, #0
{
    50be:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    50c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    50c4:	220f      	movs	r2, #15
    50c6:	9301      	str	r3, [sp, #4]
    50c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    50cc:	231c      	movs	r3, #28
	z_setup_new_thread(thread, stack,
    50ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    50d2:	4d0d      	ldr	r5, [pc, #52]	; (5108 <z_init_cpu+0x58>)
	z_setup_new_thread(thread, stack,
    50d4:	490d      	ldr	r1, [pc, #52]	; (510c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    50d6:	fb03 5500 	mla	r5, r3, r0, r5
{
    50da:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    50dc:	fb02 1100 	mla	r1, r2, r0, r1
    50e0:	4b0b      	ldr	r3, [pc, #44]	; (5110 <z_init_cpu+0x60>)
    50e2:	4630      	mov	r0, r6
    50e4:	9500      	str	r5, [sp, #0]
    50e6:	f000 f8cd 	bl	5284 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    50ea:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    50ec:	4809      	ldr	r0, [pc, #36]	; (5114 <z_init_cpu+0x64>)
	_kernel.cpus[id].id = id;
    50ee:	752c      	strb	r4, [r5, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    50f0:	3401      	adds	r4, #1
    50f2:	f023 0304 	bic.w	r3, r3, #4
    50f6:	eb00 24c4 	add.w	r4, r0, r4, lsl #11
    50fa:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    50fc:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    50fe:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5100:	b006      	add	sp, #24
    5102:	bd70      	pop	{r4, r5, r6, pc}
    5104:	2000c6a0 	.word	0x2000c6a0
    5108:	2000e6c8 	.word	0x2000e6c8
    510c:	20011688 	.word	0x20011688
    5110:	00009197 	.word	0x00009197
    5114:	200117c8 	.word	0x200117c8

00005118 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5118:	b500      	push	{lr}
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    511a:	4b2b      	ldr	r3, [pc, #172]	; (51c8 <z_cstart+0xb0>)
    511c:	b0b9      	sub	sp, #228	; 0xe4
	uint32_t msp =
    511e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5122:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    5126:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    512a:	2400      	movs	r4, #0
    512c:	23e0      	movs	r3, #224	; 0xe0
    512e:	4d27      	ldr	r5, [pc, #156]	; (51cc <z_cstart+0xb4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5130:	4e27      	ldr	r6, [pc, #156]	; (51d0 <z_cstart+0xb8>)
    5132:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5136:	77ec      	strb	r4, [r5, #31]
    5138:	762c      	strb	r4, [r5, #24]
    513a:	766c      	strb	r4, [r5, #25]
    513c:	76ac      	strb	r4, [r5, #26]
    513e:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5142:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5144:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5148:	626b      	str	r3, [r5, #36]	; 0x24
    514a:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    514e:	f7fe f841 	bl	31d4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5152:	f7fd fcab 	bl	2aac <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    515a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    515c:	62eb      	str	r3, [r5, #44]	; 0x2c
	dummy_thread->base.user_options = K_ESSENTIAL;
    515e:	f240 1301 	movw	r3, #257	; 0x101
    5162:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	_current_cpu->current = dummy_thread;
    5166:	ab08      	add	r3, sp, #32
    5168:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    516a:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
	dummy_thread->resource_pool = NULL;
    516e:	9424      	str	r4, [sp, #144]	; 0x90
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5170:	f003 ffb6 	bl	90e0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5174:	4620      	mov	r0, r4
    5176:	f7ff ff07 	bl	4f88 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    517a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    517c:	4d15      	ldr	r5, [pc, #84]	; (51d4 <z_cstart+0xbc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    517e:	f7ff ff03 	bl	4f88 <z_sys_init_run_level>
	z_sched_init();
    5182:	f000 fc4b 	bl	5a1c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5186:	4b14      	ldr	r3, [pc, #80]	; (51d8 <z_cstart+0xc0>)
	_kernel.ready_q.cache = &z_main_thread;
    5188:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    518a:	9305      	str	r3, [sp, #20]
    518c:	2301      	movs	r3, #1
    518e:	4e13      	ldr	r6, [pc, #76]	; (51dc <z_cstart+0xc4>)
    5190:	4913      	ldr	r1, [pc, #76]	; (51e0 <z_cstart+0xc8>)
    5192:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    5196:	e9cd 4303 	strd	r4, r3, [sp, #12]
    519a:	4628      	mov	r0, r5
    519c:	4633      	mov	r3, r6
    519e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    51a2:	9400      	str	r4, [sp, #0]
    51a4:	f000 f86e 	bl	5284 <z_setup_new_thread>
    51a8:	7b6a      	ldrb	r2, [r5, #13]
    51aa:	9007      	str	r0, [sp, #28]
    51ac:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    51b0:	4628      	mov	r0, r5
    51b2:	736a      	strb	r2, [r5, #13]
    51b4:	f004 f844 	bl	9240 <z_ready_thread>
	z_init_cpu(0);
    51b8:	4620      	mov	r0, r4
    51ba:	f7ff ff79 	bl	50b0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    51be:	4632      	mov	r2, r6
    51c0:	4628      	mov	r0, r5
    51c2:	9907      	ldr	r1, [sp, #28]
    51c4:	f7fd fdf0 	bl	2da8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    51c8:	200117c8 	.word	0x200117c8
    51cc:	e000ed00 	.word	0xe000ed00
    51d0:	2000e6c8 	.word	0x2000e6c8
    51d4:	2000c760 	.word	0x2000c760
    51d8:	0000aa90 	.word	0x0000aa90
    51dc:	00005065 	.word	0x00005065
    51e0:	2000ee88 	.word	0x2000ee88

000051e4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    51e4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    51e6:	4b0e      	ldr	r3, [pc, #56]	; (5220 <init_mem_slab_module+0x3c>)
    51e8:	4c0e      	ldr	r4, [pc, #56]	; (5224 <init_mem_slab_module+0x40>)
    51ea:	42a3      	cmp	r3, r4
    51ec:	d301      	bcc.n	51f2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    51ee:	2000      	movs	r0, #0
	return rc;
}
    51f0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    51f2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    51f6:	ea41 0200 	orr.w	r2, r1, r0
    51fa:	f012 0203 	ands.w	r2, r2, #3
    51fe:	d10b      	bne.n	5218 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    5200:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    5202:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5204:	42aa      	cmp	r2, r5
    5206:	d101      	bne.n	520c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5208:	331c      	adds	r3, #28
    520a:	e7ee      	b.n	51ea <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    520c:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    520e:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    5210:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    5212:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    5214:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    5216:	e7f5      	b.n	5204 <init_mem_slab_module+0x20>
	return rc;
    5218:	f06f 0015 	mvn.w	r0, #21
    521c:	e7e8      	b.n	51f0 <init_mem_slab_module+0xc>
    521e:	bf00      	nop
    5220:	2000c62c 	.word	0x2000c62c
    5224:	2000c62c 	.word	0x2000c62c

00005228 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5228:	b537      	push	{r0, r1, r2, r4, r5, lr}
    522a:	460c      	mov	r4, r1
	__asm__ volatile(
    522c:	f04f 0520 	mov.w	r5, #32
    5230:	f3ef 8111 	mrs	r1, BASEPRI
    5234:	f385 8812 	msr	BASEPRI_MAX, r5
    5238:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    523c:	6945      	ldr	r5, [r0, #20]
    523e:	b15d      	cbz	r5, 5258 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    5240:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    5242:	682b      	ldr	r3, [r5, #0]
    5244:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    5246:	6983      	ldr	r3, [r0, #24]
    5248:	3301      	adds	r3, #1
    524a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    524c:	2000      	movs	r0, #0
	__asm__ volatile(
    524e:	f381 8811 	msr	BASEPRI, r1
    5252:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5256:	e011      	b.n	527c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5258:	ea52 0c03 	orrs.w	ip, r2, r3
    525c:	d103      	bne.n	5266 <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    525e:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    5262:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    5264:	e7f3      	b.n	524e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5266:	e9cd 2300 	strd	r2, r3, [sp]
    526a:	4602      	mov	r2, r0
    526c:	3008      	adds	r0, #8
    526e:	f000 fb2b 	bl	58c8 <z_pend_curr>
		if (result == 0) {
    5272:	b918      	cbnz	r0, 527c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    5274:	4b02      	ldr	r3, [pc, #8]	; (5280 <k_mem_slab_alloc+0x58>)
    5276:	689b      	ldr	r3, [r3, #8]
    5278:	695b      	ldr	r3, [r3, #20]
    527a:	6023      	str	r3, [r4, #0]
}
    527c:	b003      	add	sp, #12
    527e:	bd30      	pop	{r4, r5, pc}
    5280:	2000e6c8 	.word	0x2000e6c8

00005284 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5284:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5288:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    528a:	f100 0558 	add.w	r5, r0, #88	; 0x58
    528e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    5290:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    5292:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    5296:	2500      	movs	r5, #0
{
    5298:	4604      	mov	r4, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    529a:	3207      	adds	r2, #7
    529c:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
    52a0:	e9c0 1219 	strd	r1, r2, [r0, #100]	; 0x64
	thread_base->thread_state = (uint8_t)initial_state;
    52a4:	7346      	strb	r6, [r0, #13]
	stack_ptr = (char *)stack + stack_obj_size;
    52a6:	eb01 0802 	add.w	r8, r1, r2

	thread_base->prio = priority;
    52aa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    52ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    52ae:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->pended_on = NULL;
    52b2:	6085      	str	r5, [r0, #8]
	thread_base->prio = priority;
    52b4:	7386      	strb	r6, [r0, #14]

	thread_base->sched_locked = 0U;
    52b6:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    52b8:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    52ba:	9202      	str	r2, [sp, #8]
    52bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    52be:	9201      	str	r2, [sp, #4]
    52c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    52c2:	9200      	str	r2, [sp, #0]
    52c4:	4642      	mov	r2, r8
    52c6:	f7fd fd4f 	bl	2d68 <arch_new_thread>
	if (!_current) {
    52ca:	4b05      	ldr	r3, [pc, #20]	; (52e0 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    52cc:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    52ce:	689b      	ldr	r3, [r3, #8]
    52d0:	b103      	cbz	r3, 52d4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    52d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    52d4:	4640      	mov	r0, r8
    52d6:	6723      	str	r3, [r4, #112]	; 0x70
    52d8:	b004      	add	sp, #16
    52da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52de:	bf00      	nop
    52e0:	2000e6c8 	.word	0x2000e6c8

000052e4 <z_init_static_threads>:
{
    52e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    52e8:	4c29      	ldr	r4, [pc, #164]	; (5390 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    52ea:	4d2a      	ldr	r5, [pc, #168]	; (5394 <z_init_static_threads+0xb0>)
{
    52ec:	b087      	sub	sp, #28
    52ee:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    52f0:	42ae      	cmp	r6, r5
    52f2:	f104 0430 	add.w	r4, r4, #48	; 0x30
    52f6:	d30f      	bcc.n	5318 <z_init_static_threads+0x34>
	k_sched_lock();
    52f8:	f000 f9a4 	bl	5644 <k_sched_lock>
    52fc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5300:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    5304:	4c22      	ldr	r4, [pc, #136]	; (5390 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5306:	f8df 9090 	ldr.w	r9, [pc, #144]	; 5398 <z_init_static_threads+0xb4>
    530a:	42ac      	cmp	r4, r5
    530c:	d320      	bcc.n	5350 <z_init_static_threads+0x6c>
}
    530e:	b007      	add	sp, #28
    5310:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5314:	f000 bb66 	b.w	59e4 <k_sched_unlock>
		z_setup_new_thread(
    5318:	f854 3c04 	ldr.w	r3, [r4, #-4]
    531c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5320:	9305      	str	r3, [sp, #20]
    5322:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5326:	9304      	str	r3, [sp, #16]
    5328:	f854 3c14 	ldr.w	r3, [r4, #-20]
    532c:	9303      	str	r3, [sp, #12]
    532e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5332:	9302      	str	r3, [sp, #8]
    5334:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5338:	9301      	str	r3, [sp, #4]
    533a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    533e:	9300      	str	r3, [sp, #0]
    5340:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5344:	f7ff ff9e 	bl	5284 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5348:	f854 3c30 	ldr.w	r3, [r4, #-48]
    534c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    534e:	e7ce      	b.n	52ee <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5350:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5352:	1c5a      	adds	r2, r3, #1
    5354:	d00d      	beq.n	5372 <z_init_static_threads+0x8e>
    5356:	2100      	movs	r1, #0
    5358:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    535a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    535e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5362:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5366:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    536a:	d104      	bne.n	5376 <z_init_static_threads+0x92>
	z_sched_start(thread);
    536c:	4640      	mov	r0, r8
    536e:	f000 fa4f 	bl	5810 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5372:	3430      	adds	r4, #48	; 0x30
    5374:	e7c9      	b.n	530a <z_init_static_threads+0x26>
    5376:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    537a:	2300      	movs	r3, #0
    537c:	f7fa fee2 	bl	144 <__aeabi_uldivmod>
    5380:	4602      	mov	r2, r0
    5382:	460b      	mov	r3, r1
    5384:	f108 0018 	add.w	r0, r8, #24
    5388:	4649      	mov	r1, r9
    538a:	f000 fcbf 	bl	5d0c <z_add_timeout>
    538e:	e7f0      	b.n	5372 <z_init_static_threads+0x8e>
    5390:	2000c62c 	.word	0x2000c62c
    5394:	2000c62c 	.word	0x2000c62c
    5398:	00009261 	.word	0x00009261

0000539c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    539c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    53a0:	4604      	mov	r4, r0
    53a2:	4617      	mov	r7, r2
    53a4:	461e      	mov	r6, r3
	__asm__ volatile(
    53a6:	f04f 0320 	mov.w	r3, #32
    53aa:	f3ef 8811 	mrs	r8, BASEPRI
    53ae:	f383 8812 	msr	BASEPRI_MAX, r3
    53b2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    53b6:	68c3      	ldr	r3, [r0, #12]
    53b8:	4a32      	ldr	r2, [pc, #200]	; (5484 <z_impl_k_mutex_lock+0xe8>)
    53ba:	b16b      	cbz	r3, 53d8 <z_impl_k_mutex_lock+0x3c>
    53bc:	6880      	ldr	r0, [r0, #8]
    53be:	6891      	ldr	r1, [r2, #8]
    53c0:	4288      	cmp	r0, r1
    53c2:	d019      	beq.n	53f8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    53c4:	ea57 0306 	orrs.w	r3, r7, r6
    53c8:	d118      	bne.n	53fc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    53ca:	f388 8811 	msr	BASEPRI, r8
    53ce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    53d2:	f06f 000f 	mvn.w	r0, #15
    53d6:	e00c      	b.n	53f2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    53d8:	6891      	ldr	r1, [r2, #8]
    53da:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    53de:	3301      	adds	r3, #1
    53e0:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    53e2:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    53e4:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    53e6:	60a3      	str	r3, [r4, #8]
    53e8:	f388 8811 	msr	BASEPRI, r8
    53ec:	f3bf 8f6f 	isb	sy
		return 0;
    53f0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    53f2:	b002      	add	sp, #8
    53f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    53f8:	6921      	ldr	r1, [r4, #16]
    53fa:	e7f0      	b.n	53de <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    53fc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5400:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5404:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5408:	4299      	cmp	r1, r3
    540a:	bfa8      	it	ge
    540c:	4619      	movge	r1, r3
    540e:	4291      	cmp	r1, r2
    5410:	bfb8      	it	lt
    5412:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5414:	428b      	cmp	r3, r1
    5416:	dd2e      	ble.n	5476 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5418:	f003 fec9 	bl	91ae <adjust_owner_prio.isra.0>
    541c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    541e:	4622      	mov	r2, r4
    5420:	4641      	mov	r1, r8
    5422:	e9cd 7600 	strd	r7, r6, [sp]
    5426:	4818      	ldr	r0, [pc, #96]	; (5488 <z_impl_k_mutex_lock+0xec>)
    5428:	f000 fa4e 	bl	58c8 <z_pend_curr>
	if (got_mutex == 0) {
    542c:	2800      	cmp	r0, #0
    542e:	d0e0      	beq.n	53f2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    5430:	f04f 0320 	mov.w	r3, #32
    5434:	f3ef 8611 	mrs	r6, BASEPRI
    5438:	f383 8812 	msr	BASEPRI_MAX, r3
    543c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5440:	6823      	ldr	r3, [r4, #0]
    5442:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5444:	429c      	cmp	r4, r3
    5446:	d00a      	beq.n	545e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5448:	b14b      	cbz	r3, 545e <z_impl_k_mutex_lock+0xc2>
    544a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    544e:	4299      	cmp	r1, r3
    5450:	bfa8      	it	ge
    5452:	4619      	movge	r1, r3
    5454:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5458:	4299      	cmp	r1, r3
    545a:	bfb8      	it	lt
    545c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    545e:	68a0      	ldr	r0, [r4, #8]
    5460:	f003 fea5 	bl	91ae <adjust_owner_prio.isra.0>
    5464:	b900      	cbnz	r0, 5468 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    5466:	b145      	cbz	r5, 547a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    5468:	4631      	mov	r1, r6
    546a:	4807      	ldr	r0, [pc, #28]	; (5488 <z_impl_k_mutex_lock+0xec>)
    546c:	f000 f8d8 	bl	5620 <z_reschedule>
	return -EAGAIN;
    5470:	f06f 000a 	mvn.w	r0, #10
    5474:	e7bd      	b.n	53f2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    5476:	2500      	movs	r5, #0
    5478:	e7d1      	b.n	541e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    547a:	f386 8811 	msr	BASEPRI, r6
    547e:	f3bf 8f6f 	isb	sy
    5482:	e7f5      	b.n	5470 <z_impl_k_mutex_lock+0xd4>
    5484:	2000e6c8 	.word	0x2000e6c8
    5488:	2000ee85 	.word	0x2000ee85

0000548c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    548c:	6883      	ldr	r3, [r0, #8]
{
    548e:	b570      	push	{r4, r5, r6, lr}
    5490:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5492:	b36b      	cbz	r3, 54f0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5494:	4a19      	ldr	r2, [pc, #100]	; (54fc <z_impl_k_mutex_unlock+0x70>)
    5496:	6892      	ldr	r2, [r2, #8]
    5498:	4293      	cmp	r3, r2
    549a:	d12c      	bne.n	54f6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    549c:	68c3      	ldr	r3, [r0, #12]
    549e:	2b01      	cmp	r3, #1
    54a0:	d903      	bls.n	54aa <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    54a2:	3b01      	subs	r3, #1
    54a4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    54a6:	2000      	movs	r0, #0
}
    54a8:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    54aa:	f04f 0320 	mov.w	r3, #32
    54ae:	f3ef 8511 	mrs	r5, BASEPRI
    54b2:	f383 8812 	msr	BASEPRI_MAX, r3
    54b6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    54ba:	6901      	ldr	r1, [r0, #16]
    54bc:	6880      	ldr	r0, [r0, #8]
    54be:	f003 fe76 	bl	91ae <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    54c2:	4620      	mov	r0, r4
    54c4:	f003 ff18 	bl	92f8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    54c8:	2600      	movs	r6, #0
    54ca:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    54cc:	b150      	cbz	r0, 54e4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    54ce:	f990 200e 	ldrsb.w	r2, [r0, #14]
    54d2:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    54d4:	6786      	str	r6, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    54d6:	f003 feb3 	bl	9240 <z_ready_thread>
		z_reschedule(&lock, key);
    54da:	4629      	mov	r1, r5
    54dc:	4808      	ldr	r0, [pc, #32]	; (5500 <z_impl_k_mutex_unlock+0x74>)
    54de:	f000 f89f 	bl	5620 <z_reschedule>
    54e2:	e7e0      	b.n	54a6 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    54e4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    54e6:	f385 8811 	msr	BASEPRI, r5
    54ea:	f3bf 8f6f 	isb	sy
    54ee:	e7da      	b.n	54a6 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    54f0:	f06f 0015 	mvn.w	r0, #21
    54f4:	e7d8      	b.n	54a8 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    54f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    54fa:	e7d5      	b.n	54a8 <z_impl_k_mutex_unlock+0x1c>
    54fc:	2000e6c8 	.word	0x2000e6c8
    5500:	2000ee85 	.word	0x2000ee85

00005504 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5504:	b538      	push	{r3, r4, r5, lr}
    5506:	4604      	mov	r4, r0
	__asm__ volatile(
    5508:	f04f 0320 	mov.w	r3, #32
    550c:	f3ef 8511 	mrs	r5, BASEPRI
    5510:	f383 8812 	msr	BASEPRI_MAX, r3
    5514:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5518:	f003 feee 	bl	92f8 <z_unpend_first_thread>

	if (thread != NULL) {
    551c:	b148      	cbz	r0, 5532 <z_impl_k_sem_give+0x2e>
    551e:	2200      	movs	r2, #0
    5520:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5522:	f003 fe8d 	bl	9240 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5526:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    552c:	4804      	ldr	r0, [pc, #16]	; (5540 <z_impl_k_sem_give+0x3c>)
    552e:	f000 b877 	b.w	5620 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5532:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5536:	429a      	cmp	r2, r3
    5538:	bf18      	it	ne
    553a:	3301      	addne	r3, #1
    553c:	60a3      	str	r3, [r4, #8]
}
    553e:	e7f2      	b.n	5526 <z_impl_k_sem_give+0x22>
    5540:	2000ee85 	.word	0x2000ee85

00005544 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5544:	b513      	push	{r0, r1, r4, lr}
    5546:	f04f 0420 	mov.w	r4, #32
    554a:	f3ef 8111 	mrs	r1, BASEPRI
    554e:	f384 8812 	msr	BASEPRI_MAX, r4
    5552:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5556:	6884      	ldr	r4, [r0, #8]
    5558:	b144      	cbz	r4, 556c <z_impl_k_sem_take+0x28>
		sem->count--;
    555a:	3c01      	subs	r4, #1
    555c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    555e:	f381 8811 	msr	BASEPRI, r1
    5562:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5566:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5568:	b002      	add	sp, #8
    556a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    556c:	ea52 0403 	orrs.w	r4, r2, r3
    5570:	d106      	bne.n	5580 <z_impl_k_sem_take+0x3c>
    5572:	f381 8811 	msr	BASEPRI, r1
    5576:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    557a:	f06f 000f 	mvn.w	r0, #15
    557e:	e7f3      	b.n	5568 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5580:	e9cd 2300 	strd	r2, r3, [sp]
    5584:	4602      	mov	r2, r0
    5586:	4802      	ldr	r0, [pc, #8]	; (5590 <z_impl_k_sem_take+0x4c>)
    5588:	f000 f99e 	bl	58c8 <z_pend_curr>
	return ret;
    558c:	e7ec      	b.n	5568 <z_impl_k_sem_take+0x24>
    558e:	bf00      	nop
    5590:	2000ee85 	.word	0x2000ee85

00005594 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5594:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5596:	4d07      	ldr	r5, [pc, #28]	; (55b4 <z_reset_time_slice+0x20>)
    5598:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    559a:	b154      	cbz	r4, 55b2 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    559c:	f7fe fe46 	bl	422c <sys_clock_elapsed>
    55a0:	4b05      	ldr	r3, [pc, #20]	; (55b8 <z_reset_time_slice+0x24>)
    55a2:	4420      	add	r0, r4
    55a4:	6118      	str	r0, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    55a6:	2100      	movs	r1, #0
    55a8:	6828      	ldr	r0, [r5, #0]
	}
}
    55aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    55ae:	f003 bed1 	b.w	9354 <z_set_timeout_expiry>
}
    55b2:	bd38      	pop	{r3, r4, r5, pc}
    55b4:	2000e6fc 	.word	0x2000e6fc
    55b8:	2000e6c8 	.word	0x2000e6c8

000055bc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    55bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55be:	4604      	mov	r4, r0
    55c0:	460d      	mov	r5, r1
	__asm__ volatile(
    55c2:	f04f 0320 	mov.w	r3, #32
    55c6:	f3ef 8711 	mrs	r7, BASEPRI
    55ca:	f383 8812 	msr	BASEPRI_MAX, r3
    55ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    55d2:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    55d4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    55d8:	f240 30e7 	movw	r0, #999	; 0x3e7
    55dc:	4e0d      	ldr	r6, [pc, #52]	; (5614 <k_sched_time_slice_set+0x58>)
    55de:	2300      	movs	r3, #0
    55e0:	6131      	str	r1, [r6, #16]
    55e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    55e6:	fbe4 010c 	umlal	r0, r1, r4, ip
    55ea:	f7fa fdab 	bl	144 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    55ee:	2c00      	cmp	r4, #0
    55f0:	4b09      	ldr	r3, [pc, #36]	; (5618 <k_sched_time_slice_set+0x5c>)
    55f2:	dc0a      	bgt.n	560a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    55f4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    55f6:	4b09      	ldr	r3, [pc, #36]	; (561c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    55f8:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    55fa:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    55fc:	f7ff ffca 	bl	5594 <z_reset_time_slice>
	__asm__ volatile(
    5600:	f387 8811 	msr	BASEPRI, r7
    5604:	f3bf 8f6f 	isb	sy
	}
}
    5608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    560a:	2802      	cmp	r0, #2
    560c:	bfb8      	it	lt
    560e:	2002      	movlt	r0, #2
    5610:	e7f0      	b.n	55f4 <k_sched_time_slice_set+0x38>
    5612:	bf00      	nop
    5614:	2000e6c8 	.word	0x2000e6c8
    5618:	2000e6fc 	.word	0x2000e6fc
    561c:	2000e6f8 	.word	0x2000e6f8

00005620 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5620:	b949      	cbnz	r1, 5636 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5622:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    5626:	b930      	cbnz	r0, 5636 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5628:	4b05      	ldr	r3, [pc, #20]	; (5640 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    562a:	69da      	ldr	r2, [r3, #28]
    562c:	689b      	ldr	r3, [r3, #8]
    562e:	429a      	cmp	r2, r3
    5630:	d001      	beq.n	5636 <z_reschedule+0x16>
	ret = arch_swap(key);
    5632:	f7fd bb25 	b.w	2c80 <arch_swap>
    5636:	f381 8811 	msr	BASEPRI, r1
    563a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    563e:	4770      	bx	lr
    5640:	2000e6c8 	.word	0x2000e6c8

00005644 <k_sched_lock>:
	__asm__ volatile(
    5644:	f04f 0320 	mov.w	r3, #32
    5648:	f3ef 8111 	mrs	r1, BASEPRI
    564c:	f383 8812 	msr	BASEPRI_MAX, r3
    5650:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5654:	4b04      	ldr	r3, [pc, #16]	; (5668 <k_sched_lock+0x24>)
    5656:	689a      	ldr	r2, [r3, #8]
    5658:	7bd3      	ldrb	r3, [r2, #15]
    565a:	3b01      	subs	r3, #1
    565c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    565e:	f381 8811 	msr	BASEPRI, r1
    5662:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5666:	4770      	bx	lr
    5668:	2000e6c8 	.word	0x2000e6c8

0000566c <update_cache>:
{
    566c:	b538      	push	{r3, r4, r5, lr}
    566e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5670:	480c      	ldr	r0, [pc, #48]	; (56a4 <update_cache+0x38>)
    5672:	f003 fddf 	bl	9234 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5676:	4d0c      	ldr	r5, [pc, #48]	; (56a8 <update_cache+0x3c>)
    5678:	4604      	mov	r4, r0
    567a:	b900      	cbnz	r0, 567e <update_cache+0x12>
    567c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    567e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5680:	b94a      	cbnz	r2, 5696 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    5682:	7b5a      	ldrb	r2, [r3, #13]
    5684:	06d2      	lsls	r2, r2, #27
    5686:	d106      	bne.n	5696 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5688:	69a2      	ldr	r2, [r4, #24]
    568a:	b922      	cbnz	r2, 5696 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    568c:	89da      	ldrh	r2, [r3, #14]
    568e:	2a7f      	cmp	r2, #127	; 0x7f
    5690:	d901      	bls.n	5696 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    5692:	61eb      	str	r3, [r5, #28]
}
    5694:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5696:	429c      	cmp	r4, r3
    5698:	d002      	beq.n	56a0 <update_cache+0x34>
			z_reset_time_slice(thread);
    569a:	4620      	mov	r0, r4
    569c:	f7ff ff7a 	bl	5594 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    56a0:	61ec      	str	r4, [r5, #28]
}
    56a2:	e7f7      	b.n	5694 <update_cache+0x28>
    56a4:	2000e6e8 	.word	0x2000e6e8
    56a8:	2000e6c8 	.word	0x2000e6c8

000056ac <move_thread_to_end_of_prio_q>:
{
    56ac:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    56ae:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    56b2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    56b4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    56b6:	7b43      	ldrb	r3, [r0, #13]
    56b8:	da04      	bge.n	56c4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    56ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    56be:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    56c0:	f003 fd90 	bl	91e4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    56c4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    56c6:	4a15      	ldr	r2, [pc, #84]	; (571c <move_thread_to_end_of_prio_q+0x70>)
    56c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    56cc:	734b      	strb	r3, [r1, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56ce:	f102 0520 	add.w	r5, r2, #32
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    56d2:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    56d6:	42ab      	cmp	r3, r5
    56d8:	d01b      	beq.n	5712 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    56da:	b1d3      	cbz	r3, 5712 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    56dc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    56e0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    56e4:	4286      	cmp	r6, r0
    56e6:	d00f      	beq.n	5708 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    56e8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    56ea:	2800      	cmp	r0, #0
    56ec:	dd0c      	ble.n	5708 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    56ee:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    56f0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    56f4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    56f6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    56f8:	6890      	ldr	r0, [r2, #8]
}
    56fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    56fe:	1a43      	subs	r3, r0, r1
    5700:	4258      	negs	r0, r3
    5702:	4158      	adcs	r0, r3
    5704:	f7ff bfb2 	b.w	566c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5708:	42a3      	cmp	r3, r4
    570a:	d002      	beq.n	5712 <move_thread_to_end_of_prio_q+0x66>
    570c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    570e:	2b00      	cmp	r3, #0
    5710:	d1e6      	bne.n	56e0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    5712:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    5716:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5718:	6251      	str	r1, [r2, #36]	; 0x24
}
    571a:	e7ed      	b.n	56f8 <move_thread_to_end_of_prio_q+0x4c>
    571c:	2000e6c8 	.word	0x2000e6c8

00005720 <z_time_slice>:
{
    5720:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5722:	f04f 0320 	mov.w	r3, #32
    5726:	f3ef 8511 	mrs	r5, BASEPRI
    572a:	f383 8812 	msr	BASEPRI_MAX, r3
    572e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5732:	4b17      	ldr	r3, [pc, #92]	; (5790 <z_time_slice+0x70>)
    5734:	4a17      	ldr	r2, [pc, #92]	; (5794 <z_time_slice+0x74>)
    5736:	689c      	ldr	r4, [r3, #8]
    5738:	6811      	ldr	r1, [r2, #0]
    573a:	428c      	cmp	r4, r1
    573c:	d107      	bne.n	574e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    573e:	4620      	mov	r0, r4
    5740:	f7ff ff28 	bl	5594 <z_reset_time_slice>
	__asm__ volatile(
    5744:	f385 8811 	msr	BASEPRI, r5
    5748:	f3bf 8f6f 	isb	sy
}
    574c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    574e:	2100      	movs	r1, #0
    5750:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    5752:	4a11      	ldr	r2, [pc, #68]	; (5798 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    5754:	6812      	ldr	r2, [r2, #0]
    5756:	b1c2      	cbz	r2, 578a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5758:	89e2      	ldrh	r2, [r4, #14]
    575a:	2a7f      	cmp	r2, #127	; 0x7f
    575c:	d815      	bhi.n	578a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    575e:	7b62      	ldrb	r2, [r4, #13]
    5760:	06d2      	lsls	r2, r2, #27
    5762:	d112      	bne.n	578a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5764:	4a0d      	ldr	r2, [pc, #52]	; (579c <z_time_slice+0x7c>)
    5766:	f994 100e 	ldrsb.w	r1, [r4, #14]
    576a:	6812      	ldr	r2, [r2, #0]
    576c:	4291      	cmp	r1, r2
    576e:	db0c      	blt.n	578a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    5770:	4a0b      	ldr	r2, [pc, #44]	; (57a0 <z_time_slice+0x80>)
    5772:	4294      	cmp	r4, r2
    5774:	d009      	beq.n	578a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5776:	691a      	ldr	r2, [r3, #16]
    5778:	4282      	cmp	r2, r0
    577a:	dc03      	bgt.n	5784 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    577c:	4620      	mov	r0, r4
    577e:	f7ff ff95 	bl	56ac <move_thread_to_end_of_prio_q>
    5782:	e7dc      	b.n	573e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5784:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5786:	611a      	str	r2, [r3, #16]
    5788:	e7dc      	b.n	5744 <z_time_slice+0x24>
    578a:	2200      	movs	r2, #0
    578c:	e7fb      	b.n	5786 <z_time_slice+0x66>
    578e:	bf00      	nop
    5790:	2000e6c8 	.word	0x2000e6c8
    5794:	2000e6f4 	.word	0x2000e6f4
    5798:	2000e6fc 	.word	0x2000e6fc
    579c:	2000e6f8 	.word	0x2000e6f8
    57a0:	2000c6a0 	.word	0x2000c6a0

000057a4 <ready_thread>:
{
    57a4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    57a6:	f990 200d 	ldrsb.w	r2, [r0, #13]
    57aa:	7b43      	ldrb	r3, [r0, #13]
    57ac:	2a00      	cmp	r2, #0
    57ae:	db2a      	blt.n	5806 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    57b0:	06da      	lsls	r2, r3, #27
    57b2:	d128      	bne.n	5806 <ready_thread+0x62>
    57b4:	6982      	ldr	r2, [r0, #24]
    57b6:	bb32      	cbnz	r2, 5806 <ready_thread+0x62>
	return list->head == list;
    57b8:	4a14      	ldr	r2, [pc, #80]	; (580c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    57ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    57be:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    57c0:	f102 0520 	add.w	r5, r2, #32
	return (node == list->tail) ? NULL : node->next;
    57c4:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    57c8:	42ab      	cmp	r3, r5
    57ca:	d017      	beq.n	57fc <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    57cc:	b1b3      	cbz	r3, 57fc <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    57ce:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    57d2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    57d6:	428e      	cmp	r6, r1
    57d8:	d00b      	beq.n	57f2 <ready_thread+0x4e>
		return b2 - b1;
    57da:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    57dc:	2900      	cmp	r1, #0
    57de:	dd08      	ble.n	57f2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    57e0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    57e2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    57e6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    57e8:	6058      	str	r0, [r3, #4]
		update_cache(0);
    57ea:	2000      	movs	r0, #0
}
    57ec:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    57ee:	f7ff bf3d 	b.w	566c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    57f2:	42a3      	cmp	r3, r4
    57f4:	d002      	beq.n	57fc <ready_thread+0x58>
    57f6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    57f8:	2b00      	cmp	r3, #0
    57fa:	d1ea      	bne.n	57d2 <ready_thread+0x2e>
	node->prev = tail;
    57fc:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    5800:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5802:	6250      	str	r0, [r2, #36]	; 0x24
}
    5804:	e7f1      	b.n	57ea <ready_thread+0x46>
}
    5806:	bc70      	pop	{r4, r5, r6}
    5808:	4770      	bx	lr
    580a:	bf00      	nop
    580c:	2000e6c8 	.word	0x2000e6c8

00005810 <z_sched_start>:
{
    5810:	b510      	push	{r4, lr}
	__asm__ volatile(
    5812:	f04f 0220 	mov.w	r2, #32
    5816:	f3ef 8411 	mrs	r4, BASEPRI
    581a:	f382 8812 	msr	BASEPRI_MAX, r2
    581e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5822:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5824:	0751      	lsls	r1, r2, #29
    5826:	d404      	bmi.n	5832 <z_sched_start+0x22>
	__asm__ volatile(
    5828:	f384 8811 	msr	BASEPRI, r4
    582c:	f3bf 8f6f 	isb	sy
}
    5830:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5832:	f022 0204 	bic.w	r2, r2, #4
    5836:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5838:	f7ff ffb4 	bl	57a4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    583c:	4621      	mov	r1, r4
}
    583e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5842:	4801      	ldr	r0, [pc, #4]	; (5848 <z_sched_start+0x38>)
    5844:	f7ff beec 	b.w	5620 <z_reschedule>
    5848:	2000ee85 	.word	0x2000ee85

0000584c <unready_thread>:
{
    584c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    584e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    5852:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5854:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    5856:	7b43      	ldrb	r3, [r0, #13]
    5858:	da04      	bge.n	5864 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    585a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    585e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5860:	f003 fcc0 	bl	91e4 <sys_dlist_remove>
	update_cache(thread == _current);
    5864:	4b04      	ldr	r3, [pc, #16]	; (5878 <unready_thread+0x2c>)
    5866:	6898      	ldr	r0, [r3, #8]
    5868:	1a43      	subs	r3, r0, r1
    586a:	4258      	negs	r0, r3
    586c:	4158      	adcs	r0, r3
}
    586e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5872:	f7ff befb 	b.w	566c <update_cache>
    5876:	bf00      	nop
    5878:	2000e6c8 	.word	0x2000e6c8

0000587c <pend>:
{
    587c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5880:	4606      	mov	r6, r0
    5882:	4615      	mov	r5, r2
    5884:	461c      	mov	r4, r3
	__asm__ volatile(
    5886:	f04f 0320 	mov.w	r3, #32
    588a:	f3ef 8711 	mrs	r7, BASEPRI
    588e:	f383 8812 	msr	BASEPRI_MAX, r3
    5892:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    5896:	f003 fd05 	bl	92a4 <add_to_waitq_locked>
	__asm__ volatile(
    589a:	f387 8811 	msr	BASEPRI, r7
    589e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    58a2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    58a6:	bf08      	it	eq
    58a8:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    58ac:	d008      	beq.n	58c0 <pend+0x44>
    58ae:	462a      	mov	r2, r5
    58b0:	4623      	mov	r3, r4
    58b2:	f106 0018 	add.w	r0, r6, #24
    58b6:	4903      	ldr	r1, [pc, #12]	; (58c4 <pend+0x48>)
}
    58b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    58bc:	f000 ba26 	b.w	5d0c <z_add_timeout>
    58c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    58c4:	00009261 	.word	0x00009261

000058c8 <z_pend_curr>:
{
    58c8:	b510      	push	{r4, lr}
    58ca:	460c      	mov	r4, r1
	pending_current = _current;
    58cc:	4b06      	ldr	r3, [pc, #24]	; (58e8 <z_pend_curr+0x20>)
{
    58ce:	4611      	mov	r1, r2
	pending_current = _current;
    58d0:	6898      	ldr	r0, [r3, #8]
    58d2:	4b06      	ldr	r3, [pc, #24]	; (58ec <z_pend_curr+0x24>)
    58d4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    58d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    58da:	f7ff ffcf 	bl	587c <pend>
    58de:	4620      	mov	r0, r4
}
    58e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    58e4:	f7fd b9cc 	b.w	2c80 <arch_swap>
    58e8:	2000e6c8 	.word	0x2000e6c8
    58ec:	2000e6f4 	.word	0x2000e6f4

000058f0 <z_set_prio>:
{
    58f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58f2:	4604      	mov	r4, r0
	__asm__ volatile(
    58f4:	f04f 0320 	mov.w	r3, #32
    58f8:	f3ef 8611 	mrs	r6, BASEPRI
    58fc:	f383 8812 	msr	BASEPRI_MAX, r3
    5900:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5904:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    5906:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5908:	06da      	lsls	r2, r3, #27
    590a:	d133      	bne.n	5974 <z_set_prio+0x84>
		if (need_sched) {
    590c:	6982      	ldr	r2, [r0, #24]
    590e:	bb8a      	cbnz	r2, 5974 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5914:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5916:	f003 fc65 	bl	91e4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    591a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    591c:	4a17      	ldr	r2, [pc, #92]	; (597c <z_set_prio+0x8c>)
    591e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5922:	7343      	strb	r3, [r0, #13]
				thread->base.prio = prio;
    5924:	7381      	strb	r1, [r0, #14]
    5926:	4610      	mov	r0, r2
    5928:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    592c:	4283      	cmp	r3, r0
    592e:	d01b      	beq.n	5968 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5930:	b1d3      	cbz	r3, 5968 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    5932:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    5934:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    5938:	42a9      	cmp	r1, r5
    593a:	d010      	beq.n	595e <z_set_prio+0x6e>
		return b2 - b1;
    593c:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    593e:	2d00      	cmp	r5, #0
    5940:	dd0d      	ble.n	595e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    5942:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5944:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5948:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    594a:	605c      	str	r4, [r3, #4]
			update_cache(1);
    594c:	2001      	movs	r0, #1
    594e:	f7ff fe8d 	bl	566c <update_cache>
    5952:	2001      	movs	r0, #1
	__asm__ volatile(
    5954:	f386 8811 	msr	BASEPRI, r6
    5958:	f3bf 8f6f 	isb	sy
}
    595c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    595e:	42bb      	cmp	r3, r7
    5960:	d002      	beq.n	5968 <z_set_prio+0x78>
    5962:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5964:	2b00      	cmp	r3, #0
    5966:	d1e5      	bne.n	5934 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    5968:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    596a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    596e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5970:	6254      	str	r4, [r2, #36]	; 0x24
}
    5972:	e7eb      	b.n	594c <z_set_prio+0x5c>
			thread->base.prio = prio;
    5974:	2000      	movs	r0, #0
    5976:	73a1      	strb	r1, [r4, #14]
    5978:	e7ec      	b.n	5954 <z_set_prio+0x64>
    597a:	bf00      	nop
    597c:	2000e6c8 	.word	0x2000e6c8

00005980 <z_impl_k_thread_suspend>:
{
    5980:	b570      	push	{r4, r5, r6, lr}
    5982:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5984:	3018      	adds	r0, #24
    5986:	f003 fccf 	bl	9328 <z_abort_timeout>
	__asm__ volatile(
    598a:	f04f 0320 	mov.w	r3, #32
    598e:	f3ef 8611 	mrs	r6, BASEPRI
    5992:	f383 8812 	msr	BASEPRI_MAX, r3
    5996:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    599a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    599e:	7b63      	ldrb	r3, [r4, #13]
    59a0:	2a00      	cmp	r2, #0
    59a2:	da05      	bge.n	59b0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    59a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    59a8:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    59aa:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    59ac:	f003 fc1a 	bl	91e4 <sys_dlist_remove>
		update_cache(thread == _current);
    59b0:	4d0b      	ldr	r5, [pc, #44]	; (59e0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    59b2:	7b63      	ldrb	r3, [r4, #13]
    59b4:	68a8      	ldr	r0, [r5, #8]
    59b6:	f043 0310 	orr.w	r3, r3, #16
    59ba:	7363      	strb	r3, [r4, #13]
    59bc:	1b03      	subs	r3, r0, r4
    59be:	4258      	negs	r0, r3
    59c0:	4158      	adcs	r0, r3
    59c2:	f7ff fe53 	bl	566c <update_cache>
	__asm__ volatile(
    59c6:	f386 8811 	msr	BASEPRI, r6
    59ca:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    59ce:	68ab      	ldr	r3, [r5, #8]
    59d0:	42a3      	cmp	r3, r4
    59d2:	d103      	bne.n	59dc <z_impl_k_thread_suspend+0x5c>
}
    59d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    59d8:	f003 bc22 	b.w	9220 <z_reschedule_unlocked>
}
    59dc:	bd70      	pop	{r4, r5, r6, pc}
    59de:	bf00      	nop
    59e0:	2000e6c8 	.word	0x2000e6c8

000059e4 <k_sched_unlock>:
{
    59e4:	b510      	push	{r4, lr}
	__asm__ volatile(
    59e6:	f04f 0320 	mov.w	r3, #32
    59ea:	f3ef 8411 	mrs	r4, BASEPRI
    59ee:	f383 8812 	msr	BASEPRI_MAX, r3
    59f2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    59f6:	4b08      	ldr	r3, [pc, #32]	; (5a18 <k_sched_unlock+0x34>)
		update_cache(0);
    59f8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    59fa:	689a      	ldr	r2, [r3, #8]
    59fc:	7bd3      	ldrb	r3, [r2, #15]
    59fe:	3301      	adds	r3, #1
    5a00:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5a02:	f7ff fe33 	bl	566c <update_cache>
	__asm__ volatile(
    5a06:	f384 8811 	msr	BASEPRI, r4
    5a0a:	f3bf 8f6f 	isb	sy
}
    5a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5a12:	f003 bc05 	b.w	9220 <z_reschedule_unlocked>
    5a16:	bf00      	nop
    5a18:	2000e6c8 	.word	0x2000e6c8

00005a1c <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5a1c:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    5a1e:	4b04      	ldr	r3, [pc, #16]	; (5a30 <z_sched_init+0x14>)
    5a20:	4608      	mov	r0, r1
    5a22:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5a26:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5a2a:	f7ff bdc7 	b.w	55bc <k_sched_time_slice_set>
    5a2e:	bf00      	nop
    5a30:	2000e6c8 	.word	0x2000e6c8

00005a34 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    5a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5a36:	f04f 0320 	mov.w	r3, #32
    5a3a:	f3ef 8511 	mrs	r5, BASEPRI
    5a3e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a42:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5a46:	491a      	ldr	r1, [pc, #104]	; (5ab0 <z_impl_k_yield+0x7c>)
    5a48:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5a4a:	7b43      	ldrb	r3, [r0, #13]
    5a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5a50:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5a52:	f003 fbc7 	bl	91e4 <sys_dlist_remove>
	return list->head == list;
    5a56:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    5a58:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5a5a:	7b5a      	ldrb	r2, [r3, #13]
    5a5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5a60:	735a      	strb	r2, [r3, #13]
    5a62:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a66:	4282      	cmp	r2, r0
    5a68:	d01c      	beq.n	5aa4 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5a6a:	b1da      	cbz	r2, 5aa4 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    5a6c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    5a6e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5a72:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    5a76:	42a6      	cmp	r6, r4
    5a78:	d00f      	beq.n	5a9a <z_impl_k_yield+0x66>
		return b2 - b1;
    5a7a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5a7c:	2c00      	cmp	r4, #0
    5a7e:	dd0c      	ble.n	5a9a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    5a80:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5a82:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5a86:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5a88:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5a8a:	2001      	movs	r0, #1
    5a8c:	f7ff fdee 	bl	566c <update_cache>
    5a90:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5a92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5a96:	f7fd b8f3 	b.w	2c80 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5a9a:	42ba      	cmp	r2, r7
    5a9c:	d002      	beq.n	5aa4 <z_impl_k_yield+0x70>
    5a9e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5aa0:	2a00      	cmp	r2, #0
    5aa2:	d1e6      	bne.n	5a72 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    5aa4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    5aa6:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    5aaa:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5aac:	624b      	str	r3, [r1, #36]	; 0x24
}
    5aae:	e7ec      	b.n	5a8a <z_impl_k_yield+0x56>
    5ab0:	2000e6c8 	.word	0x2000e6c8

00005ab4 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5ab4:	ea50 0301 	orrs.w	r3, r0, r1
{
    5ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5abc:	4605      	mov	r5, r0
    5abe:	460e      	mov	r6, r1
	if (ticks == 0) {
    5ac0:	d103      	bne.n	5aca <z_tick_sleep+0x16>
	z_impl_k_yield();
    5ac2:	f7ff ffb7 	bl	5a34 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    5ac6:	2000      	movs	r0, #0
    5ac8:	e033      	b.n	5b32 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    5aca:	f06f 0401 	mvn.w	r4, #1
    5ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5ad2:	1a24      	subs	r4, r4, r0
    5ad4:	eb63 0301 	sbc.w	r3, r3, r1
    5ad8:	2c01      	cmp	r4, #1
    5ada:	f173 0300 	sbcs.w	r3, r3, #0
    5ade:	da02      	bge.n	5ae6 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5ae0:	f003 fc53 	bl	938a <sys_clock_tick_get_32>
    5ae4:	1944      	adds	r4, r0, r5
    5ae6:	f04f 0320 	mov.w	r3, #32
    5aea:	f3ef 8811 	mrs	r8, BASEPRI
    5aee:	f383 8812 	msr	BASEPRI_MAX, r3
    5af2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    5af6:	4f10      	ldr	r7, [pc, #64]	; (5b38 <z_tick_sleep+0x84>)
    5af8:	4b10      	ldr	r3, [pc, #64]	; (5b3c <z_tick_sleep+0x88>)
    5afa:	68b8      	ldr	r0, [r7, #8]
    5afc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5afe:	f7ff fea5 	bl	584c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5b02:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5b04:	490e      	ldr	r1, [pc, #56]	; (5b40 <z_tick_sleep+0x8c>)
    5b06:	462a      	mov	r2, r5
    5b08:	4633      	mov	r3, r6
    5b0a:	3018      	adds	r0, #24
    5b0c:	f000 f8fe 	bl	5d0c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5b10:	68ba      	ldr	r2, [r7, #8]
    5b12:	4640      	mov	r0, r8
    5b14:	7b53      	ldrb	r3, [r2, #13]
    5b16:	f043 0310 	orr.w	r3, r3, #16
    5b1a:	7353      	strb	r3, [r2, #13]
    5b1c:	f7fd f8b0 	bl	2c80 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5b20:	f003 fc33 	bl	938a <sys_clock_tick_get_32>
    5b24:	1a20      	subs	r0, r4, r0
    5b26:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5b2a:	2801      	cmp	r0, #1
    5b2c:	f173 0300 	sbcs.w	r3, r3, #0
    5b30:	dbc9      	blt.n	5ac6 <z_tick_sleep+0x12>
}
    5b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b36:	bf00      	nop
    5b38:	2000e6c8 	.word	0x2000e6c8
    5b3c:	2000e6f4 	.word	0x2000e6f4
    5b40:	00009261 	.word	0x00009261

00005b44 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5b44:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    5b48:	bf08      	it	eq
    5b4a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    5b4e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5b50:	d106      	bne.n	5b60 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5b52:	4b08      	ldr	r3, [pc, #32]	; (5b74 <z_impl_k_sleep+0x30>)
    5b54:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5b56:	f7ff ff13 	bl	5980 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5b5e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5b60:	f7ff ffa8 	bl	5ab4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5b64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5b68:	fb80 0303 	smull	r0, r3, r0, r3
    5b6c:	0bc0      	lsrs	r0, r0, #15
    5b6e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5b72:	e7f4      	b.n	5b5e <z_impl_k_sleep+0x1a>
    5b74:	2000e6c8 	.word	0x2000e6c8

00005b78 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5b78:	4b01      	ldr	r3, [pc, #4]	; (5b80 <z_impl_z_current_get+0x8>)
    5b7a:	6898      	ldr	r0, [r3, #8]
    5b7c:	4770      	bx	lr
    5b7e:	bf00      	nop
    5b80:	2000e6c8 	.word	0x2000e6c8

00005b84 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b88:	4604      	mov	r4, r0
    5b8a:	f04f 0320 	mov.w	r3, #32
    5b8e:	f3ef 8611 	mrs	r6, BASEPRI
    5b92:	f383 8812 	msr	BASEPRI_MAX, r3
    5b96:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    5b9a:	7b03      	ldrb	r3, [r0, #12]
    5b9c:	07d9      	lsls	r1, r3, #31
    5b9e:	d50b      	bpl.n	5bb8 <z_thread_abort+0x34>
	__asm__ volatile(
    5ba0:	f386 8811 	msr	BASEPRI, r6
    5ba4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    5ba8:	4040      	eors	r0, r0
    5baa:	f380 8811 	msr	BASEPRI, r0
    5bae:	f04f 0004 	mov.w	r0, #4
    5bb2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5bb8:	7b43      	ldrb	r3, [r0, #13]
    5bba:	071a      	lsls	r2, r3, #28
    5bbc:	d504      	bpl.n	5bc8 <z_thread_abort+0x44>
    5bbe:	f386 8811 	msr	BASEPRI, r6
    5bc2:	f3bf 8f6f 	isb	sy
    5bc6:	e7f5      	b.n	5bb4 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5bc8:	f023 0220 	bic.w	r2, r3, #32
    5bcc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5bd0:	09d2      	lsrs	r2, r2, #7
    5bd2:	d120      	bne.n	5c16 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5bd4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    5bd6:	68a3      	ldr	r3, [r4, #8]
    5bd8:	b113      	cbz	r3, 5be0 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    5bda:	4620      	mov	r0, r4
    5bdc:	f003 fb0a 	bl	91f4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5be0:	f104 0018 	add.w	r0, r4, #24
    5be4:	f003 fba0 	bl	9328 <z_abort_timeout>
    5be8:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5bec:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    5bf0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5bf2:	42bd      	cmp	r5, r7
    5bf4:	d000      	beq.n	5bf8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5bf6:	b9b5      	cbnz	r5, 5c26 <z_thread_abort+0xa2>
		update_cache(1);
    5bf8:	2001      	movs	r0, #1
    5bfa:	f7ff fd37 	bl	566c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5bfe:	4b10      	ldr	r3, [pc, #64]	; (5c40 <z_thread_abort+0xbc>)
    5c00:	689b      	ldr	r3, [r3, #8]
    5c02:	42a3      	cmp	r3, r4
    5c04:	d1db      	bne.n	5bbe <z_thread_abort+0x3a>
    5c06:	f3ef 8305 	mrs	r3, IPSR
    5c0a:	2b00      	cmp	r3, #0
    5c0c:	d1d7      	bne.n	5bbe <z_thread_abort+0x3a>
    5c0e:	4630      	mov	r0, r6
    5c10:	f7fd f836 	bl	2c80 <arch_swap>
	return ret;
    5c14:	e7d3      	b.n	5bbe <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c16:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5c1a:	f043 0308 	orr.w	r3, r3, #8
    5c1e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5c20:	f003 fae0 	bl	91e4 <sys_dlist_remove>
}
    5c24:	e7d7      	b.n	5bd6 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    5c26:	4628      	mov	r0, r5
    5c28:	f003 fae4 	bl	91f4 <unpend_thread_no_timeout>
    5c2c:	f105 0018 	add.w	r0, r5, #24
    5c30:	f003 fb7a 	bl	9328 <z_abort_timeout>
		ready_thread(thread);
    5c34:	4628      	mov	r0, r5
    5c36:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    5c3a:	f7ff fdb3 	bl	57a4 <ready_thread>
    5c3e:	e7d7      	b.n	5bf0 <z_thread_abort+0x6c>
    5c40:	2000e6c8 	.word	0x2000e6c8

00005c44 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5c44:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    5c46:	4806      	ldr	r0, [pc, #24]	; (5c60 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5c48:	4a06      	ldr	r2, [pc, #24]	; (5c64 <z_data_copy+0x20>)
    5c4a:	4907      	ldr	r1, [pc, #28]	; (5c68 <z_data_copy+0x24>)
    5c4c:	1a12      	subs	r2, r2, r0
    5c4e:	f003 fa54 	bl	90fa <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5c56:	4a05      	ldr	r2, [pc, #20]	; (5c6c <z_data_copy+0x28>)
    5c58:	4905      	ldr	r1, [pc, #20]	; (5c70 <z_data_copy+0x2c>)
    5c5a:	4806      	ldr	r0, [pc, #24]	; (5c74 <z_data_copy+0x30>)
    5c5c:	f003 ba4d 	b.w	90fa <z_early_memcpy>
    5c60:	2000c4e8 	.word	0x2000c4e8
    5c64:	2000c67c 	.word	0x2000c67c
    5c68:	0000aacc 	.word	0x0000aacc
    5c6c:	00000000 	.word	0x00000000
    5c70:	0000aacc 	.word	0x0000aacc
    5c74:	2000c4e8 	.word	0x2000c4e8

00005c78 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5c78:	4b03      	ldr	r3, [pc, #12]	; (5c88 <elapsed+0x10>)
    5c7a:	681b      	ldr	r3, [r3, #0]
    5c7c:	b90b      	cbnz	r3, 5c82 <elapsed+0xa>
    5c7e:	f7fe bad5 	b.w	422c <sys_clock_elapsed>
}
    5c82:	2000      	movs	r0, #0
    5c84:	4770      	bx	lr
    5c86:	bf00      	nop
    5c88:	2000e700 	.word	0x2000e700

00005c8c <next_timeout>:
	return list->head == list;
    5c8c:	4b10      	ldr	r3, [pc, #64]	; (5cd0 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    5c8e:	b510      	push	{r4, lr}
    5c90:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c92:	429c      	cmp	r4, r3
    5c94:	bf08      	it	eq
    5c96:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5c98:	f7ff ffee 	bl	5c78 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5c9c:	b1a4      	cbz	r4, 5cc8 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5c9e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5ca2:	1a1b      	subs	r3, r3, r0
    5ca4:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    5ca8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5cac:	f170 0200 	sbcs.w	r2, r0, #0
    5cb0:	da0a      	bge.n	5cc8 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    5cb2:	2800      	cmp	r0, #0
    5cb4:	bfac      	ite	ge
    5cb6:	4618      	movge	r0, r3
    5cb8:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5cba:	4b06      	ldr	r3, [pc, #24]	; (5cd4 <next_timeout+0x48>)
    5cbc:	691b      	ldr	r3, [r3, #16]
    5cbe:	b113      	cbz	r3, 5cc6 <next_timeout+0x3a>
    5cc0:	4298      	cmp	r0, r3
    5cc2:	bfa8      	it	ge
    5cc4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5cc6:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    5cc8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5ccc:	e7f5      	b.n	5cba <next_timeout+0x2e>
    5cce:	bf00      	nop
    5cd0:	2000c5b0 	.word	0x2000c5b0
    5cd4:	2000e6c8 	.word	0x2000e6c8

00005cd8 <remove_timeout>:
{
    5cd8:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    5cda:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5cdc:	b168      	cbz	r0, 5cfa <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5cde:	4a0a      	ldr	r2, [pc, #40]	; (5d08 <remove_timeout+0x30>)
    5ce0:	6852      	ldr	r2, [r2, #4]
    5ce2:	4290      	cmp	r0, r2
    5ce4:	d009      	beq.n	5cfa <remove_timeout+0x22>
	if (next(t) != NULL) {
    5ce6:	b143      	cbz	r3, 5cfa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5ce8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5cec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5cf0:	1912      	adds	r2, r2, r4
    5cf2:	eb41 0105 	adc.w	r1, r1, r5
    5cf6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5cfa:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5cfc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5cfe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5d00:	2300      	movs	r3, #0
	node->prev = NULL;
    5d02:	e9c0 3300 	strd	r3, r3, [r0]
}
    5d06:	bd30      	pop	{r4, r5, pc}
    5d08:	2000c5b0 	.word	0x2000c5b0

00005d0c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5d10:	bf08      	it	eq
    5d12:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    5d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d18:	4604      	mov	r4, r0
    5d1a:	461f      	mov	r7, r3
    5d1c:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d1e:	d065      	beq.n	5dec <z_add_timeout+0xe0>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5d20:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    5d22:	f04f 0320 	mov.w	r3, #32
    5d26:	f3ef 8611 	mrs	r6, BASEPRI
    5d2a:	f383 8812 	msr	BASEPRI_MAX, r3
    5d2e:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5d32:	f06f 0201 	mvn.w	r2, #1
    5d36:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    5d3a:	1b53      	subs	r3, r2, r5
    5d3c:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5d40:	2b00      	cmp	r3, #0
    5d42:	db1b      	blt.n	5d7c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5d44:	4b2a      	ldr	r3, [pc, #168]	; (5df0 <z_add_timeout+0xe4>)
    5d46:	e9d3 1300 	ldrd	r1, r3, [r3]
    5d4a:	1a52      	subs	r2, r2, r1
    5d4c:	eb6c 0303 	sbc.w	r3, ip, r3
    5d50:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    5d52:	eb63 0307 	sbc.w	r3, r3, r7
    5d56:	2d01      	cmp	r5, #1
    5d58:	f173 0200 	sbcs.w	r2, r3, #0
    5d5c:	da01      	bge.n	5d62 <z_add_timeout+0x56>
    5d5e:	2501      	movs	r5, #1
    5d60:	2300      	movs	r3, #0
	return list->head == list;
    5d62:	4824      	ldr	r0, [pc, #144]	; (5df4 <z_add_timeout+0xe8>)
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5d64:	e9c4 5304 	strd	r5, r3, [r4, #16]
	sys_dnode_t *const tail = list->tail;
    5d68:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5d6c:	4283      	cmp	r3, r0
    5d6e:	d116      	bne.n	5d9e <z_add_timeout+0x92>
	node->prev = tail;
    5d70:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    5d74:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5d78:	6044      	str	r4, [r0, #4]
}
    5d7a:	e024      	b.n	5dc6 <z_add_timeout+0xba>
    5d7c:	f7ff ff7c 	bl	5c78 <elapsed>
    5d80:	3501      	adds	r5, #1
    5d82:	f147 0300 	adc.w	r3, r7, #0
    5d86:	182d      	adds	r5, r5, r0
    5d88:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    5d8c:	e7e9      	b.n	5d62 <z_add_timeout+0x56>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5d8e:	1a52      	subs	r2, r2, r1
    5d90:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    5d94:	459c      	cmp	ip, r3
    5d96:	e9c4 2504 	strd	r2, r5, [r4, #16]
    5d9a:	d0e9      	beq.n	5d70 <z_add_timeout+0x64>
    5d9c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5d9e:	2b00      	cmp	r3, #0
    5da0:	d0e6      	beq.n	5d70 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    5da2:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    5da6:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    5daa:	428a      	cmp	r2, r1
    5dac:	eb75 0e07 	sbcs.w	lr, r5, r7
    5db0:	daed      	bge.n	5d8e <z_add_timeout+0x82>
				t->dticks -= to->dticks;
    5db2:	1a8a      	subs	r2, r1, r2
    5db4:	eb67 0505 	sbc.w	r5, r7, r5
    5db8:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5dbc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5dbe:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5dc2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5dc4:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5dc6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5dc8:	4283      	cmp	r3, r0
    5dca:	d00b      	beq.n	5de4 <z_add_timeout+0xd8>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5dcc:	429c      	cmp	r4, r3
    5dce:	d109      	bne.n	5de4 <z_add_timeout+0xd8>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5dd0:	f7ff ff5c 	bl	5c8c <next_timeout>

			if (next_time == 0 ||
    5dd4:	b118      	cbz	r0, 5dde <z_add_timeout+0xd2>
			    _current_cpu->slice_ticks != next_time) {
    5dd6:	4b08      	ldr	r3, [pc, #32]	; (5df8 <z_add_timeout+0xec>)
			if (next_time == 0 ||
    5dd8:	691b      	ldr	r3, [r3, #16]
    5dda:	4283      	cmp	r3, r0
    5ddc:	d002      	beq.n	5de4 <z_add_timeout+0xd8>
				sys_clock_set_timeout(next_time, false);
    5dde:	2100      	movs	r1, #0
    5de0:	f7fe f9f4 	bl	41cc <sys_clock_set_timeout>
	__asm__ volatile(
    5de4:	f386 8811 	msr	BASEPRI, r6
    5de8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5dee:	bf00      	nop
    5df0:	2000c820 	.word	0x2000c820
    5df4:	2000c5b0 	.word	0x2000c5b0
    5df8:	2000e6c8 	.word	0x2000e6c8

00005dfc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e00:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5e02:	f7ff fc8d 	bl	5720 <z_time_slice>
	__asm__ volatile(
    5e06:	f04f 0320 	mov.w	r3, #32
    5e0a:	f3ef 8511 	mrs	r5, BASEPRI
    5e0e:	f383 8812 	msr	BASEPRI_MAX, r3
    5e12:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5e16:	4f24      	ldr	r7, [pc, #144]	; (5ea8 <sys_clock_announce+0xac>)
	return list->head == list;
    5e18:	f8df 8094 	ldr.w	r8, [pc, #148]	; 5eb0 <sys_clock_announce+0xb4>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5e1c:	4e23      	ldr	r6, [pc, #140]	; (5eac <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
    5e1e:	603c      	str	r4, [r7, #0]
    5e20:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5e24:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e26:	4540      	cmp	r0, r8
    5e28:	ea4f 71e3 	mov.w	r1, r3, asr #31
		curr_tick += dt;
    5e2c:	e9d6 2e00 	ldrd	r2, lr, [r6]
    5e30:	d00b      	beq.n	5e4a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5e32:	b150      	cbz	r0, 5e4a <sys_clock_announce+0x4e>
    5e34:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
    5e38:	42a3      	cmp	r3, r4
    5e3a:	eb71 090c 	sbcs.w	r9, r1, ip
    5e3e:	da16      	bge.n	5e6e <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5e40:	1ae4      	subs	r4, r4, r3
    5e42:	eb6c 0c01 	sbc.w	ip, ip, r1
    5e46:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    5e4a:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    5e4c:	189b      	adds	r3, r3, r2
    5e4e:	eb4e 0101 	adc.w	r1, lr, r1
    5e52:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
    5e56:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5e58:	f7ff ff18 	bl	5c8c <next_timeout>
    5e5c:	4621      	mov	r1, r4
    5e5e:	f7fe f9b5 	bl	41cc <sys_clock_set_timeout>
	__asm__ volatile(
    5e62:	f385 8811 	msr	BASEPRI, r5
    5e66:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5e6e:	18a2      	adds	r2, r4, r2
    5e70:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
		t->dticks = 0;
    5e74:	2300      	movs	r3, #0
		curr_tick += dt;
    5e76:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
    5e7a:	2200      	movs	r2, #0
    5e7c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    5e80:	f7ff ff2a 	bl	5cd8 <remove_timeout>
    5e84:	f385 8811 	msr	BASEPRI, r5
    5e88:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5e8c:	6883      	ldr	r3, [r0, #8]
    5e8e:	4798      	blx	r3
	__asm__ volatile(
    5e90:	f04f 0320 	mov.w	r3, #32
    5e94:	f3ef 8511 	mrs	r5, BASEPRI
    5e98:	f383 8812 	msr	BASEPRI_MAX, r3
    5e9c:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    5ea0:	683b      	ldr	r3, [r7, #0]
    5ea2:	1b1b      	subs	r3, r3, r4
    5ea4:	603b      	str	r3, [r7, #0]
    5ea6:	e7bb      	b.n	5e20 <sys_clock_announce+0x24>
    5ea8:	2000e700 	.word	0x2000e700
    5eac:	2000c820 	.word	0x2000c820
    5eb0:	2000c5b0 	.word	0x2000c5b0

00005eb4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5eb4:	b510      	push	{r4, lr}
    5eb6:	f04f 0320 	mov.w	r3, #32
    5eba:	f3ef 8411 	mrs	r4, BASEPRI
    5ebe:	f383 8812 	msr	BASEPRI_MAX, r3
    5ec2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    5ec6:	f7ff fed7 	bl	5c78 <elapsed>
    5eca:	4601      	mov	r1, r0
    5ecc:	4b05      	ldr	r3, [pc, #20]	; (5ee4 <sys_clock_tick_get+0x30>)
    5ece:	e9d3 0300 	ldrd	r0, r3, [r3]
    5ed2:	1808      	adds	r0, r1, r0
    5ed4:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
    5ed8:	f384 8811 	msr	BASEPRI, r4
    5edc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5ee0:	bd10      	pop	{r4, pc}
    5ee2:	bf00      	nop
    5ee4:	2000c820 	.word	0x2000c820

00005ee8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5ee8:	4a02      	ldr	r2, [pc, #8]	; (5ef4 <boot_banner+0xc>)
    5eea:	4903      	ldr	r1, [pc, #12]	; (5ef8 <boot_banner+0x10>)
    5eec:	4803      	ldr	r0, [pc, #12]	; (5efc <boot_banner+0x14>)
    5eee:	f001 bfd8 	b.w	7ea2 <printk>
    5ef2:	bf00      	nop
    5ef4:	00009b9e 	.word	0x00009b9e
    5ef8:	0000aa98 	.word	0x0000aa98
    5efc:	0000aaa5 	.word	0x0000aaa5

00005f00 <nrf_cc3xx_platform_init_no_rng>:
    5f00:	b510      	push	{r4, lr}
    5f02:	4c0a      	ldr	r4, [pc, #40]	; (5f2c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5f04:	6823      	ldr	r3, [r4, #0]
    5f06:	b11b      	cbz	r3, 5f10 <nrf_cc3xx_platform_init_no_rng+0x10>
    5f08:	2301      	movs	r3, #1
    5f0a:	2000      	movs	r0, #0
    5f0c:	6023      	str	r3, [r4, #0]
    5f0e:	bd10      	pop	{r4, pc}
    5f10:	f000 f8dc 	bl	60cc <CC_LibInitNoRng>
    5f14:	2800      	cmp	r0, #0
    5f16:	d0f7      	beq.n	5f08 <nrf_cc3xx_platform_init_no_rng+0x8>
    5f18:	3801      	subs	r0, #1
    5f1a:	2806      	cmp	r0, #6
    5f1c:	d803      	bhi.n	5f26 <nrf_cc3xx_platform_init_no_rng+0x26>
    5f1e:	4b04      	ldr	r3, [pc, #16]	; (5f30 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5f20:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5f24:	bd10      	pop	{r4, pc}
    5f26:	4803      	ldr	r0, [pc, #12]	; (5f34 <nrf_cc3xx_platform_init_no_rng+0x34>)
    5f28:	bd10      	pop	{r4, pc}
    5f2a:	bf00      	nop
    5f2c:	2000e704 	.word	0x2000e704
    5f30:	000099e4 	.word	0x000099e4
    5f34:	ffff8ffe 	.word	0xffff8ffe

00005f38 <nrf_cc3xx_platform_abort>:
    5f38:	f3bf 8f4f 	dsb	sy
    5f3c:	4905      	ldr	r1, [pc, #20]	; (5f54 <nrf_cc3xx_platform_abort+0x1c>)
    5f3e:	4b06      	ldr	r3, [pc, #24]	; (5f58 <nrf_cc3xx_platform_abort+0x20>)
    5f40:	68ca      	ldr	r2, [r1, #12]
    5f42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5f46:	4313      	orrs	r3, r2
    5f48:	60cb      	str	r3, [r1, #12]
    5f4a:	f3bf 8f4f 	dsb	sy
    5f4e:	bf00      	nop
    5f50:	e7fd      	b.n	5f4e <nrf_cc3xx_platform_abort+0x16>
    5f52:	bf00      	nop
    5f54:	e000ed00 	.word	0xe000ed00
    5f58:	05fa0004 	.word	0x05fa0004

00005f5c <CC_PalAbort>:
    5f5c:	b430      	push	{r4, r5}
    5f5e:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    5f62:	2500      	movs	r5, #0
    5f64:	4b07      	ldr	r3, [pc, #28]	; (5f84 <CC_PalAbort+0x28>)
    5f66:	4c08      	ldr	r4, [pc, #32]	; (5f88 <CC_PalAbort+0x2c>)
    5f68:	4908      	ldr	r1, [pc, #32]	; (5f8c <CC_PalAbort+0x30>)
    5f6a:	6849      	ldr	r1, [r1, #4]
    5f6c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    5f70:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    5f74:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    5f78:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    5f7c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    5f80:	bc30      	pop	{r4, r5}
    5f82:	4708      	bx	r1
    5f84:	50841000 	.word	0x50841000
    5f88:	50840000 	.word	0x50840000
    5f8c:	2000c5b8 	.word	0x2000c5b8

00005f90 <nrf_cc3xx_platform_set_abort>:
    5f90:	4b02      	ldr	r3, [pc, #8]	; (5f9c <nrf_cc3xx_platform_set_abort+0xc>)
    5f92:	e9d0 1200 	ldrd	r1, r2, [r0]
    5f96:	e9c3 1200 	strd	r1, r2, [r3]
    5f9a:	4770      	bx	lr
    5f9c:	2000c5b8 	.word	0x2000c5b8

00005fa0 <mutex_free>:
    5fa0:	b510      	push	{r4, lr}
    5fa2:	4604      	mov	r4, r0
    5fa4:	b130      	cbz	r0, 5fb4 <mutex_free+0x14>
    5fa6:	6863      	ldr	r3, [r4, #4]
    5fa8:	06db      	lsls	r3, r3, #27
    5faa:	d502      	bpl.n	5fb2 <mutex_free+0x12>
    5fac:	2300      	movs	r3, #0
    5fae:	6023      	str	r3, [r4, #0]
    5fb0:	6063      	str	r3, [r4, #4]
    5fb2:	bd10      	pop	{r4, pc}
    5fb4:	4b02      	ldr	r3, [pc, #8]	; (5fc0 <mutex_free+0x20>)
    5fb6:	4803      	ldr	r0, [pc, #12]	; (5fc4 <mutex_free+0x24>)
    5fb8:	685b      	ldr	r3, [r3, #4]
    5fba:	4798      	blx	r3
    5fbc:	e7f3      	b.n	5fa6 <mutex_free+0x6>
    5fbe:	bf00      	nop
    5fc0:	2000c5b8 	.word	0x2000c5b8
    5fc4:	00009a00 	.word	0x00009a00

00005fc8 <mutex_lock>:
    5fc8:	b1b0      	cbz	r0, 5ff8 <mutex_lock+0x30>
    5fca:	6843      	ldr	r3, [r0, #4]
    5fcc:	b193      	cbz	r3, 5ff4 <mutex_lock+0x2c>
    5fce:	06db      	lsls	r3, r3, #27
    5fd0:	d50e      	bpl.n	5ff0 <mutex_lock+0x28>
    5fd2:	2301      	movs	r3, #1
    5fd4:	e850 2f00 	ldrex	r2, [r0]
    5fd8:	4619      	mov	r1, r3
    5fda:	e840 1c00 	strex	ip, r1, [r0]
    5fde:	f09c 0f00 	teq	ip, #0
    5fe2:	d1f7      	bne.n	5fd4 <mutex_lock+0xc>
    5fe4:	2a01      	cmp	r2, #1
    5fe6:	d0f5      	beq.n	5fd4 <mutex_lock+0xc>
    5fe8:	f3bf 8f5f 	dmb	sy
    5fec:	2000      	movs	r0, #0
    5fee:	4770      	bx	lr
    5ff0:	4803      	ldr	r0, [pc, #12]	; (6000 <mutex_lock+0x38>)
    5ff2:	4770      	bx	lr
    5ff4:	4803      	ldr	r0, [pc, #12]	; (6004 <mutex_lock+0x3c>)
    5ff6:	4770      	bx	lr
    5ff8:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5ffc:	4770      	bx	lr
    5ffe:	bf00      	nop
    6000:	ffff8fe9 	.word	0xffff8fe9
    6004:	ffff8fea 	.word	0xffff8fea

00006008 <mutex_unlock>:
    6008:	4603      	mov	r3, r0
    600a:	b168      	cbz	r0, 6028 <mutex_unlock+0x20>
    600c:	6842      	ldr	r2, [r0, #4]
    600e:	b13a      	cbz	r2, 6020 <mutex_unlock+0x18>
    6010:	06d2      	lsls	r2, r2, #27
    6012:	d507      	bpl.n	6024 <mutex_unlock+0x1c>
    6014:	f3bf 8f5f 	dmb	sy
    6018:	2200      	movs	r2, #0
    601a:	4610      	mov	r0, r2
    601c:	601a      	str	r2, [r3, #0]
    601e:	4770      	bx	lr
    6020:	4803      	ldr	r0, [pc, #12]	; (6030 <mutex_unlock+0x28>)
    6022:	4770      	bx	lr
    6024:	4803      	ldr	r0, [pc, #12]	; (6034 <mutex_unlock+0x2c>)
    6026:	4770      	bx	lr
    6028:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    602c:	4770      	bx	lr
    602e:	bf00      	nop
    6030:	ffff8fea 	.word	0xffff8fea
    6034:	ffff8fe9 	.word	0xffff8fe9

00006038 <mutex_init>:
    6038:	b510      	push	{r4, lr}
    603a:	4604      	mov	r4, r0
    603c:	b120      	cbz	r0, 6048 <mutex_init+0x10>
    603e:	2200      	movs	r2, #0
    6040:	2311      	movs	r3, #17
    6042:	6022      	str	r2, [r4, #0]
    6044:	6063      	str	r3, [r4, #4]
    6046:	bd10      	pop	{r4, pc}
    6048:	4801      	ldr	r0, [pc, #4]	; (6050 <mutex_init+0x18>)
    604a:	f7ff ff87 	bl	5f5c <CC_PalAbort>
    604e:	e7f6      	b.n	603e <mutex_init+0x6>
    6050:	00009a28 	.word	0x00009a28

00006054 <nrf_cc3xx_platform_set_mutexes>:
    6054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6058:	4c14      	ldr	r4, [pc, #80]	; (60ac <nrf_cc3xx_platform_set_mutexes+0x58>)
    605a:	6847      	ldr	r7, [r0, #4]
    605c:	6806      	ldr	r6, [r0, #0]
    605e:	6067      	str	r7, [r4, #4]
    6060:	6887      	ldr	r7, [r0, #8]
    6062:	68c0      	ldr	r0, [r0, #12]
    6064:	60a7      	str	r7, [r4, #8]
    6066:	60e0      	str	r0, [r4, #12]
    6068:	6026      	str	r6, [r4, #0]
    606a:	6808      	ldr	r0, [r1, #0]
    606c:	4b10      	ldr	r3, [pc, #64]	; (60b0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    606e:	4d11      	ldr	r5, [pc, #68]	; (60b4 <nrf_cc3xx_platform_set_mutexes+0x60>)
    6070:	6018      	str	r0, [r3, #0]
    6072:	6848      	ldr	r0, [r1, #4]
    6074:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    6078:	6058      	str	r0, [r3, #4]
    607a:	6888      	ldr	r0, [r1, #8]
    607c:	6098      	str	r0, [r3, #8]
    607e:	68c8      	ldr	r0, [r1, #12]
    6080:	6909      	ldr	r1, [r1, #16]
    6082:	60d8      	str	r0, [r3, #12]
    6084:	6119      	str	r1, [r3, #16]
    6086:	06d3      	lsls	r3, r2, #27
    6088:	d50d      	bpl.n	60a6 <nrf_cc3xx_platform_set_mutexes+0x52>
    608a:	2300      	movs	r3, #0
    608c:	f505 708a 	add.w	r0, r5, #276	; 0x114
    6090:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    6094:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    6098:	47b0      	blx	r6
    609a:	6823      	ldr	r3, [r4, #0]
    609c:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    60a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    60a4:	4718      	bx	r3
    60a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    60aa:	bf00      	nop
    60ac:	2000c5c8 	.word	0x2000c5c8
    60b0:	2000c5d8 	.word	0x2000c5d8
    60b4:	2000e71c 	.word	0x2000e71c

000060b8 <mbedtls_platform_zeroize>:
    60b8:	b138      	cbz	r0, 60ca <mbedtls_platform_zeroize+0x12>
    60ba:	b131      	cbz	r1, 60ca <mbedtls_platform_zeroize+0x12>
    60bc:	2200      	movs	r2, #0
    60be:	4401      	add	r1, r0
    60c0:	4603      	mov	r3, r0
    60c2:	3001      	adds	r0, #1
    60c4:	4288      	cmp	r0, r1
    60c6:	701a      	strb	r2, [r3, #0]
    60c8:	d1fa      	bne.n	60c0 <mbedtls_platform_zeroize+0x8>
    60ca:	4770      	bx	lr

000060cc <CC_LibInitNoRng>:
    60cc:	b538      	push	{r3, r4, r5, lr}
    60ce:	f000 f82f 	bl	6130 <CC_HalInit>
    60d2:	b120      	cbz	r0, 60de <CC_LibInitNoRng+0x12>
    60d4:	2403      	movs	r4, #3
    60d6:	f000 f863 	bl	61a0 <CC_PalTerminate>
    60da:	4620      	mov	r0, r4
    60dc:	bd38      	pop	{r3, r4, r5, pc}
    60de:	f000 f831 	bl	6144 <CC_PalInit>
    60e2:	b998      	cbnz	r0, 610c <CC_LibInitNoRng+0x40>
    60e4:	f000 f8ac 	bl	6240 <CC_PalPowerSaveModeSelect>
    60e8:	b998      	cbnz	r0, 6112 <CC_LibInitNoRng+0x46>
    60ea:	4d0f      	ldr	r5, [pc, #60]	; (6128 <CC_LibInitNoRng+0x5c>)
    60ec:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    60f0:	0e1b      	lsrs	r3, r3, #24
    60f2:	2bf0      	cmp	r3, #240	; 0xf0
    60f4:	d108      	bne.n	6108 <CC_LibInitNoRng+0x3c>
    60f6:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    60fa:	4b0c      	ldr	r3, [pc, #48]	; (612c <CC_LibInitNoRng+0x60>)
    60fc:	429a      	cmp	r2, r3
    60fe:	d00a      	beq.n	6116 <CC_LibInitNoRng+0x4a>
    6100:	2407      	movs	r4, #7
    6102:	f000 f817 	bl	6134 <CC_HalTerminate>
    6106:	e7e6      	b.n	60d6 <CC_LibInitNoRng+0xa>
    6108:	2406      	movs	r4, #6
    610a:	e7fa      	b.n	6102 <CC_LibInitNoRng+0x36>
    610c:	2404      	movs	r4, #4
    610e:	4620      	mov	r0, r4
    6110:	bd38      	pop	{r3, r4, r5, pc}
    6112:	2400      	movs	r4, #0
    6114:	e7f5      	b.n	6102 <CC_LibInitNoRng+0x36>
    6116:	2001      	movs	r0, #1
    6118:	f000 f892 	bl	6240 <CC_PalPowerSaveModeSelect>
    611c:	4604      	mov	r4, r0
    611e:	2800      	cmp	r0, #0
    6120:	d1f7      	bne.n	6112 <CC_LibInitNoRng+0x46>
    6122:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    6126:	e7d8      	b.n	60da <CC_LibInitNoRng+0xe>
    6128:	50841000 	.word	0x50841000
    612c:	20e00000 	.word	0x20e00000

00006130 <CC_HalInit>:
    6130:	2000      	movs	r0, #0
    6132:	4770      	bx	lr

00006134 <CC_HalTerminate>:
    6134:	2000      	movs	r0, #0
    6136:	4770      	bx	lr

00006138 <CC_HalMaskInterrupt>:
    6138:	4b01      	ldr	r3, [pc, #4]	; (6140 <CC_HalMaskInterrupt+0x8>)
    613a:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    613e:	4770      	bx	lr
    6140:	50841000 	.word	0x50841000

00006144 <CC_PalInit>:
    6144:	b510      	push	{r4, lr}
    6146:	4811      	ldr	r0, [pc, #68]	; (618c <CC_PalInit+0x48>)
    6148:	f000 f848 	bl	61dc <CC_PalMutexCreate>
    614c:	b100      	cbz	r0, 6150 <CC_PalInit+0xc>
    614e:	bd10      	pop	{r4, pc}
    6150:	480f      	ldr	r0, [pc, #60]	; (6190 <CC_PalInit+0x4c>)
    6152:	f000 f843 	bl	61dc <CC_PalMutexCreate>
    6156:	2800      	cmp	r0, #0
    6158:	d1f9      	bne.n	614e <CC_PalInit+0xa>
    615a:	4c0e      	ldr	r4, [pc, #56]	; (6194 <CC_PalInit+0x50>)
    615c:	4620      	mov	r0, r4
    615e:	f000 f83d 	bl	61dc <CC_PalMutexCreate>
    6162:	2800      	cmp	r0, #0
    6164:	d1f3      	bne.n	614e <CC_PalInit+0xa>
    6166:	4b0c      	ldr	r3, [pc, #48]	; (6198 <CC_PalInit+0x54>)
    6168:	480c      	ldr	r0, [pc, #48]	; (619c <CC_PalInit+0x58>)
    616a:	601c      	str	r4, [r3, #0]
    616c:	f000 f836 	bl	61dc <CC_PalMutexCreate>
    6170:	4601      	mov	r1, r0
    6172:	2800      	cmp	r0, #0
    6174:	d1eb      	bne.n	614e <CC_PalInit+0xa>
    6176:	f000 f82d 	bl	61d4 <CC_PalDmaInit>
    617a:	4604      	mov	r4, r0
    617c:	b108      	cbz	r0, 6182 <CC_PalInit+0x3e>
    617e:	4620      	mov	r0, r4
    6180:	bd10      	pop	{r4, pc}
    6182:	f000 f83f 	bl	6204 <CC_PalPowerSaveModeInit>
    6186:	4620      	mov	r0, r4
    6188:	e7fa      	b.n	6180 <CC_PalInit+0x3c>
    618a:	bf00      	nop
    618c:	2000c610 	.word	0x2000c610
    6190:	2000c604 	.word	0x2000c604
    6194:	2000c60c 	.word	0x2000c60c
    6198:	2000c614 	.word	0x2000c614
    619c:	2000c608 	.word	0x2000c608

000061a0 <CC_PalTerminate>:
    61a0:	b508      	push	{r3, lr}
    61a2:	4808      	ldr	r0, [pc, #32]	; (61c4 <CC_PalTerminate+0x24>)
    61a4:	f000 f824 	bl	61f0 <CC_PalMutexDestroy>
    61a8:	4807      	ldr	r0, [pc, #28]	; (61c8 <CC_PalTerminate+0x28>)
    61aa:	f000 f821 	bl	61f0 <CC_PalMutexDestroy>
    61ae:	4807      	ldr	r0, [pc, #28]	; (61cc <CC_PalTerminate+0x2c>)
    61b0:	f000 f81e 	bl	61f0 <CC_PalMutexDestroy>
    61b4:	4806      	ldr	r0, [pc, #24]	; (61d0 <CC_PalTerminate+0x30>)
    61b6:	f000 f81b 	bl	61f0 <CC_PalMutexDestroy>
    61ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    61be:	f000 b80b 	b.w	61d8 <CC_PalDmaTerminate>
    61c2:	bf00      	nop
    61c4:	2000c610 	.word	0x2000c610
    61c8:	2000c604 	.word	0x2000c604
    61cc:	2000c60c 	.word	0x2000c60c
    61d0:	2000c608 	.word	0x2000c608

000061d4 <CC_PalDmaInit>:
    61d4:	2000      	movs	r0, #0
    61d6:	4770      	bx	lr

000061d8 <CC_PalDmaTerminate>:
    61d8:	4770      	bx	lr
    61da:	bf00      	nop

000061dc <CC_PalMutexCreate>:
    61dc:	b508      	push	{r3, lr}
    61de:	4b03      	ldr	r3, [pc, #12]	; (61ec <CC_PalMutexCreate+0x10>)
    61e0:	6802      	ldr	r2, [r0, #0]
    61e2:	681b      	ldr	r3, [r3, #0]
    61e4:	6810      	ldr	r0, [r2, #0]
    61e6:	4798      	blx	r3
    61e8:	2000      	movs	r0, #0
    61ea:	bd08      	pop	{r3, pc}
    61ec:	2000c5c8 	.word	0x2000c5c8

000061f0 <CC_PalMutexDestroy>:
    61f0:	b508      	push	{r3, lr}
    61f2:	4b03      	ldr	r3, [pc, #12]	; (6200 <CC_PalMutexDestroy+0x10>)
    61f4:	6802      	ldr	r2, [r0, #0]
    61f6:	685b      	ldr	r3, [r3, #4]
    61f8:	6810      	ldr	r0, [r2, #0]
    61fa:	4798      	blx	r3
    61fc:	2000      	movs	r0, #0
    61fe:	bd08      	pop	{r3, pc}
    6200:	2000c5c8 	.word	0x2000c5c8

00006204 <CC_PalPowerSaveModeInit>:
    6204:	b570      	push	{r4, r5, r6, lr}
    6206:	4c09      	ldr	r4, [pc, #36]	; (622c <CC_PalPowerSaveModeInit+0x28>)
    6208:	4d09      	ldr	r5, [pc, #36]	; (6230 <CC_PalPowerSaveModeInit+0x2c>)
    620a:	6920      	ldr	r0, [r4, #16]
    620c:	68ab      	ldr	r3, [r5, #8]
    620e:	4798      	blx	r3
    6210:	b118      	cbz	r0, 621a <CC_PalPowerSaveModeInit+0x16>
    6212:	4b08      	ldr	r3, [pc, #32]	; (6234 <CC_PalPowerSaveModeInit+0x30>)
    6214:	4808      	ldr	r0, [pc, #32]	; (6238 <CC_PalPowerSaveModeInit+0x34>)
    6216:	685b      	ldr	r3, [r3, #4]
    6218:	4798      	blx	r3
    621a:	2100      	movs	r1, #0
    621c:	4a07      	ldr	r2, [pc, #28]	; (623c <CC_PalPowerSaveModeInit+0x38>)
    621e:	68eb      	ldr	r3, [r5, #12]
    6220:	6011      	str	r1, [r2, #0]
    6222:	6920      	ldr	r0, [r4, #16]
    6224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6228:	4718      	bx	r3
    622a:	bf00      	nop
    622c:	2000c5d8 	.word	0x2000c5d8
    6230:	2000c5c8 	.word	0x2000c5c8
    6234:	2000c5b8 	.word	0x2000c5b8
    6238:	00009a4c 	.word	0x00009a4c
    623c:	2000e718 	.word	0x2000e718

00006240 <CC_PalPowerSaveModeSelect>:
    6240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6242:	4d1a      	ldr	r5, [pc, #104]	; (62ac <CC_PalPowerSaveModeSelect+0x6c>)
    6244:	4e1a      	ldr	r6, [pc, #104]	; (62b0 <CC_PalPowerSaveModeSelect+0x70>)
    6246:	4604      	mov	r4, r0
    6248:	68b2      	ldr	r2, [r6, #8]
    624a:	6928      	ldr	r0, [r5, #16]
    624c:	4790      	blx	r2
    624e:	b9e8      	cbnz	r0, 628c <CC_PalPowerSaveModeSelect+0x4c>
    6250:	4f18      	ldr	r7, [pc, #96]	; (62b4 <CC_PalPowerSaveModeSelect+0x74>)
    6252:	683b      	ldr	r3, [r7, #0]
    6254:	b14c      	cbz	r4, 626a <CC_PalPowerSaveModeSelect+0x2a>
    6256:	b1a3      	cbz	r3, 6282 <CC_PalPowerSaveModeSelect+0x42>
    6258:	2b01      	cmp	r3, #1
    625a:	d019      	beq.n	6290 <CC_PalPowerSaveModeSelect+0x50>
    625c:	3b01      	subs	r3, #1
    625e:	603b      	str	r3, [r7, #0]
    6260:	6928      	ldr	r0, [r5, #16]
    6262:	68f3      	ldr	r3, [r6, #12]
    6264:	4798      	blx	r3
    6266:	2000      	movs	r0, #0
    6268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    626a:	b943      	cbnz	r3, 627e <CC_PalPowerSaveModeSelect+0x3e>
    626c:	2101      	movs	r1, #1
    626e:	4a12      	ldr	r2, [pc, #72]	; (62b8 <CC_PalPowerSaveModeSelect+0x78>)
    6270:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    6274:	4911      	ldr	r1, [pc, #68]	; (62bc <CC_PalPowerSaveModeSelect+0x7c>)
    6276:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    627a:	2a00      	cmp	r2, #0
    627c:	d1fb      	bne.n	6276 <CC_PalPowerSaveModeSelect+0x36>
    627e:	3301      	adds	r3, #1
    6280:	603b      	str	r3, [r7, #0]
    6282:	68f3      	ldr	r3, [r6, #12]
    6284:	6928      	ldr	r0, [r5, #16]
    6286:	4798      	blx	r3
    6288:	2000      	movs	r0, #0
    628a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    628c:	480c      	ldr	r0, [pc, #48]	; (62c0 <CC_PalPowerSaveModeSelect+0x80>)
    628e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6290:	4a0a      	ldr	r2, [pc, #40]	; (62bc <CC_PalPowerSaveModeSelect+0x7c>)
    6292:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6296:	2b00      	cmp	r3, #0
    6298:	d1fb      	bne.n	6292 <CC_PalPowerSaveModeSelect+0x52>
    629a:	4a07      	ldr	r2, [pc, #28]	; (62b8 <CC_PalPowerSaveModeSelect+0x78>)
    629c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    62a0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    62a4:	f7ff ff48 	bl	6138 <CC_HalMaskInterrupt>
    62a8:	683b      	ldr	r3, [r7, #0]
    62aa:	e7d7      	b.n	625c <CC_PalPowerSaveModeSelect+0x1c>
    62ac:	2000c5d8 	.word	0x2000c5d8
    62b0:	2000c5c8 	.word	0x2000c5c8
    62b4:	2000e718 	.word	0x2000e718
    62b8:	50840000 	.word	0x50840000
    62bc:	50841000 	.word	0x50841000
    62c0:	ffff8fe9 	.word	0xffff8fe9

000062c4 <verify_context_ecdsa_verify_secp256r1>:
    62c4:	b130      	cbz	r0, 62d4 <verify_context_ecdsa_verify_secp256r1+0x10>
    62c6:	6802      	ldr	r2, [r0, #0]
    62c8:	4b03      	ldr	r3, [pc, #12]	; (62d8 <verify_context_ecdsa_verify_secp256r1+0x14>)
    62ca:	4804      	ldr	r0, [pc, #16]	; (62dc <verify_context_ecdsa_verify_secp256r1+0x18>)
    62cc:	429a      	cmp	r2, r3
    62ce:	bf08      	it	eq
    62d0:	2000      	moveq	r0, #0
    62d2:	4770      	bx	lr
    62d4:	4802      	ldr	r0, [pc, #8]	; (62e0 <verify_context_ecdsa_verify_secp256r1+0x1c>)
    62d6:	4770      	bx	lr
    62d8:	bbaa55dd 	.word	0xbbaa55dd
    62dc:	00f00882 	.word	0x00f00882
    62e0:	00f00871 	.word	0x00f00871

000062e4 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>:
    62e4:	b538      	push	{r3, r4, r5, lr}
    62e6:	460d      	mov	r5, r1
    62e8:	4604      	mov	r4, r0
    62ea:	b1b0      	cbz	r0, 631a <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x36>
    62ec:	22a0      	movs	r2, #160	; 0xa0
    62ee:	2100      	movs	r1, #0
    62f0:	3004      	adds	r0, #4
    62f2:	f003 f86d 	bl	93d0 <SaSi_PalMemSet>
    62f6:	b195      	cbz	r5, 631e <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x3a>
    62f8:	2208      	movs	r2, #8
    62fa:	4629      	mov	r1, r5
    62fc:	f104 0064 	add.w	r0, r4, #100	; 0x64
    6300:	f003 f86c 	bl	93dc <CRYS_COMMON_ReverseMemcpy32>
    6304:	2208      	movs	r2, #8
    6306:	f105 0120 	add.w	r1, r5, #32
    630a:	f104 0084 	add.w	r0, r4, #132	; 0x84
    630e:	f003 f865 	bl	93dc <CRYS_COMMON_ReverseMemcpy32>
    6312:	2000      	movs	r0, #0
    6314:	4b03      	ldr	r3, [pc, #12]	; (6324 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x40>)
    6316:	6023      	str	r3, [r4, #0]
    6318:	bd38      	pop	{r3, r4, r5, pc}
    631a:	4803      	ldr	r0, [pc, #12]	; (6328 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x44>)
    631c:	e7fc      	b.n	6318 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    631e:	4803      	ldr	r0, [pc, #12]	; (632c <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x48>)
    6320:	e7fa      	b.n	6318 <nrf_cc310_bl_ecdsa_verify_init_secp256r1+0x34>
    6322:	bf00      	nop
    6324:	bbaa55dd 	.word	0xbbaa55dd
    6328:	00f00871 	.word	0x00f00871
    632c:	00f00883 	.word	0x00f00883

00006330 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>:
    6330:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6334:	4605      	mov	r5, r0
    6336:	460e      	mov	r6, r1
    6338:	4699      	mov	r9, r3
    633a:	4611      	mov	r1, r2
    633c:	f7ff ffc2 	bl	62c4 <verify_context_ecdsa_verify_secp256r1>
    6340:	4604      	mov	r4, r0
    6342:	2800      	cmp	r0, #0
    6344:	f040 8084 	bne.w	6450 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    6348:	2e00      	cmp	r6, #0
    634a:	f000 8085 	beq.w	6458 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x128>
    634e:	2900      	cmp	r1, #0
    6350:	f000 8084 	beq.w	645c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x12c>
    6354:	f1b9 0f20 	cmp.w	r9, #32
    6358:	f040 8082 	bne.w	6460 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x130>
    635c:	f105 0444 	add.w	r4, r5, #68	; 0x44
    6360:	2208      	movs	r2, #8
    6362:	f105 0804 	add.w	r8, r5, #4
    6366:	4620      	mov	r0, r4
    6368:	f003 f838 	bl	93dc <CRYS_COMMON_ReverseMemcpy32>
    636c:	f105 0724 	add.w	r7, r5, #36	; 0x24
    6370:	2208      	movs	r2, #8
    6372:	4631      	mov	r1, r6
    6374:	4640      	mov	r0, r8
    6376:	f003 f831 	bl	93dc <CRYS_COMMON_ReverseMemcpy32>
    637a:	f106 0120 	add.w	r1, r6, #32
    637e:	2208      	movs	r2, #8
    6380:	4638      	mov	r0, r7
    6382:	f003 f82b 	bl	93dc <CRYS_COMMON_ReverseMemcpy32>
    6386:	a902      	add	r1, sp, #8
    6388:	f841 9d04 	str.w	r9, [r1, #-4]!
    638c:	f44f 7080 	mov.w	r0, #256	; 0x100
    6390:	f003 f818 	bl	93c4 <PkaInitAndMutexLock>
    6394:	2800      	cmp	r0, #0
    6396:	d165      	bne.n	6464 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x134>
    6398:	f44f 7380 	mov.w	r3, #256	; 0x100
    639c:	4a32      	ldr	r2, [pc, #200]	; (6468 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x138>)
    639e:	2101      	movs	r1, #1
    63a0:	6013      	str	r3, [r2, #0]
    63a2:	6093      	str	r3, [r2, #8]
    63a4:	2308      	movs	r3, #8
    63a6:	4a31      	ldr	r2, [pc, #196]	; (646c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x13c>)
    63a8:	f000 fb34 	bl	6a14 <PkaCopyDataIntoPkaReg>
    63ac:	2101      	movs	r1, #1
    63ae:	2305      	movs	r3, #5
    63b0:	4608      	mov	r0, r1
    63b2:	4a2f      	ldr	r2, [pc, #188]	; (6470 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x140>)
    63b4:	f000 fb2e 	bl	6a14 <PkaCopyDataIntoPkaReg>
    63b8:	2308      	movs	r3, #8
    63ba:	4642      	mov	r2, r8
    63bc:	2101      	movs	r1, #1
    63be:	201c      	movs	r0, #28
    63c0:	f000 fb28 	bl	6a14 <PkaCopyDataIntoPkaReg>
    63c4:	2308      	movs	r3, #8
    63c6:	463a      	mov	r2, r7
    63c8:	2101      	movs	r1, #1
    63ca:	2003      	movs	r0, #3
    63cc:	f000 fb22 	bl	6a14 <PkaCopyDataIntoPkaReg>
    63d0:	4622      	mov	r2, r4
    63d2:	2308      	movs	r3, #8
    63d4:	2101      	movs	r1, #1
    63d6:	2002      	movs	r0, #2
    63d8:	f000 fb1c 	bl	6a14 <PkaCopyDataIntoPkaReg>
    63dc:	2308      	movs	r3, #8
    63de:	4a25      	ldr	r2, [pc, #148]	; (6474 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x144>)
    63e0:	2101      	movs	r1, #1
    63e2:	201a      	movs	r0, #26
    63e4:	f000 fb16 	bl	6a14 <PkaCopyDataIntoPkaReg>
    63e8:	2305      	movs	r3, #5
    63ea:	4a23      	ldr	r2, [pc, #140]	; (6478 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x148>)
    63ec:	2101      	movs	r1, #1
    63ee:	201b      	movs	r0, #27
    63f0:	f000 fb10 	bl	6a14 <PkaCopyDataIntoPkaReg>
    63f4:	2308      	movs	r3, #8
    63f6:	4a21      	ldr	r2, [pc, #132]	; (647c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x14c>)
    63f8:	2101      	movs	r1, #1
    63fa:	2014      	movs	r0, #20
    63fc:	f000 fb0a 	bl	6a14 <PkaCopyDataIntoPkaReg>
    6400:	2308      	movs	r3, #8
    6402:	4a1f      	ldr	r2, [pc, #124]	; (6480 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x150>)
    6404:	2101      	movs	r1, #1
    6406:	2015      	movs	r0, #21
    6408:	f000 fb04 	bl	6a14 <PkaCopyDataIntoPkaReg>
    640c:	2308      	movs	r3, #8
    640e:	f105 0264 	add.w	r2, r5, #100	; 0x64
    6412:	2101      	movs	r1, #1
    6414:	2016      	movs	r0, #22
    6416:	f000 fafd 	bl	6a14 <PkaCopyDataIntoPkaReg>
    641a:	2308      	movs	r3, #8
    641c:	f105 0284 	add.w	r2, r5, #132	; 0x84
    6420:	2101      	movs	r1, #1
    6422:	2017      	movs	r0, #23
    6424:	f000 faf6 	bl	6a14 <PkaCopyDataIntoPkaReg>
    6428:	2308      	movs	r3, #8
    642a:	4a16      	ldr	r2, [pc, #88]	; (6484 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x154>)
    642c:	2101      	movs	r1, #1
    642e:	200b      	movs	r0, #11
    6430:	f000 faf0 	bl	6a14 <PkaCopyDataIntoPkaReg>
    6434:	f000 fb4a 	bl	6acc <PkaEcdsaVerify>
    6438:	4604      	mov	r4, r0
    643a:	9801      	ldr	r0, [sp, #4]
    643c:	f000 fad8 	bl	69f0 <PkaFinishAndMutexUnlock>
    6440:	4b11      	ldr	r3, [pc, #68]	; (6488 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    6442:	2c00      	cmp	r4, #0
    6444:	bf18      	it	ne
    6446:	461c      	movne	r4, r3
    6448:	21a4      	movs	r1, #164	; 0xa4
    644a:	4628      	mov	r0, r5
    644c:	f002 ffc2 	bl	93d4 <SaSi_PalMemSetZero>
    6450:	4620      	mov	r0, r4
    6452:	b003      	add	sp, #12
    6454:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6458:	4c0c      	ldr	r4, [pc, #48]	; (648c <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x15c>)
    645a:	e7f9      	b.n	6450 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    645c:	4c0c      	ldr	r4, [pc, #48]	; (6490 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x160>)
    645e:	e7f7      	b.n	6450 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    6460:	4c0c      	ldr	r4, [pc, #48]	; (6494 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x164>)
    6462:	e7f5      	b.n	6450 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x120>
    6464:	4c08      	ldr	r4, [pc, #32]	; (6488 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x158>)
    6466:	e7ef      	b.n	6448 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1+0x118>
    6468:	50841090 	.word	0x50841090
    646c:	00009aac 	.word	0x00009aac
    6470:	00009b24 	.word	0x00009b24
    6474:	00009a6c 	.word	0x00009a6c
    6478:	00009b10 	.word	0x00009b10
    647c:	00009ad0 	.word	0x00009ad0
    6480:	00009af0 	.word	0x00009af0
    6484:	00009a8c 	.word	0x00009a8c
    6488:	00f00884 	.word	0x00f00884
    648c:	00f00876 	.word	0x00f00876
    6490:	00f00880 	.word	0x00f00880
    6494:	00f00881 	.word	0x00f00881

00006498 <set_digest_in_hw_sha256>:
    6498:	69c2      	ldr	r2, [r0, #28]
    649a:	4b0c      	ldr	r3, [pc, #48]	; (64cc <set_digest_in_hw_sha256+0x34>)
    649c:	601a      	str	r2, [r3, #0]
    649e:	6982      	ldr	r2, [r0, #24]
    64a0:	f843 2c04 	str.w	r2, [r3, #-4]
    64a4:	6942      	ldr	r2, [r0, #20]
    64a6:	f843 2c08 	str.w	r2, [r3, #-8]
    64aa:	6902      	ldr	r2, [r0, #16]
    64ac:	f843 2c0c 	str.w	r2, [r3, #-12]
    64b0:	68c2      	ldr	r2, [r0, #12]
    64b2:	f843 2c10 	str.w	r2, [r3, #-16]
    64b6:	6882      	ldr	r2, [r0, #8]
    64b8:	f843 2c14 	str.w	r2, [r3, #-20]
    64bc:	6842      	ldr	r2, [r0, #4]
    64be:	f843 2c18 	str.w	r2, [r3, #-24]
    64c2:	6802      	ldr	r2, [r0, #0]
    64c4:	f843 2c1c 	str.w	r2, [r3, #-28]
    64c8:	4770      	bx	lr
    64ca:	bf00      	nop
    64cc:	5084165c 	.word	0x5084165c

000064d0 <read_digest_in_hw_sha256>:
    64d0:	4b0c      	ldr	r3, [pc, #48]	; (6504 <read_digest_in_hw_sha256+0x34>)
    64d2:	681b      	ldr	r3, [r3, #0]
    64d4:	61c3      	str	r3, [r0, #28]
    64d6:	4b0c      	ldr	r3, [pc, #48]	; (6508 <read_digest_in_hw_sha256+0x38>)
    64d8:	681b      	ldr	r3, [r3, #0]
    64da:	6183      	str	r3, [r0, #24]
    64dc:	4b0b      	ldr	r3, [pc, #44]	; (650c <read_digest_in_hw_sha256+0x3c>)
    64de:	681b      	ldr	r3, [r3, #0]
    64e0:	6143      	str	r3, [r0, #20]
    64e2:	4b0b      	ldr	r3, [pc, #44]	; (6510 <read_digest_in_hw_sha256+0x40>)
    64e4:	681b      	ldr	r3, [r3, #0]
    64e6:	6103      	str	r3, [r0, #16]
    64e8:	4b0a      	ldr	r3, [pc, #40]	; (6514 <read_digest_in_hw_sha256+0x44>)
    64ea:	681b      	ldr	r3, [r3, #0]
    64ec:	60c3      	str	r3, [r0, #12]
    64ee:	4b0a      	ldr	r3, [pc, #40]	; (6518 <read_digest_in_hw_sha256+0x48>)
    64f0:	681b      	ldr	r3, [r3, #0]
    64f2:	6083      	str	r3, [r0, #8]
    64f4:	4b09      	ldr	r3, [pc, #36]	; (651c <read_digest_in_hw_sha256+0x4c>)
    64f6:	681b      	ldr	r3, [r3, #0]
    64f8:	6043      	str	r3, [r0, #4]
    64fa:	4b09      	ldr	r3, [pc, #36]	; (6520 <read_digest_in_hw_sha256+0x50>)
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	6003      	str	r3, [r0, #0]
    6500:	4770      	bx	lr
    6502:	bf00      	nop
    6504:	5084165c 	.word	0x5084165c
    6508:	50841658 	.word	0x50841658
    650c:	50841654 	.word	0x50841654
    6510:	50841650 	.word	0x50841650
    6514:	5084164c 	.word	0x5084164c
    6518:	50841648 	.word	0x50841648
    651c:	50841644 	.word	0x50841644
    6520:	50841640 	.word	0x50841640

00006524 <verify_context_hash_sha256>:
    6524:	b130      	cbz	r0, 6534 <verify_context_hash_sha256+0x10>
    6526:	6802      	ldr	r2, [r0, #0]
    6528:	4b03      	ldr	r3, [pc, #12]	; (6538 <verify_context_hash_sha256+0x14>)
    652a:	4804      	ldr	r0, [pc, #16]	; (653c <verify_context_hash_sha256+0x18>)
    652c:	429a      	cmp	r2, r3
    652e:	bf08      	it	eq
    6530:	2000      	moveq	r0, #0
    6532:	4770      	bx	lr
    6534:	4802      	ldr	r0, [pc, #8]	; (6540 <verify_context_hash_sha256+0x1c>)
    6536:	4770      	bx	lr
    6538:	bbaa55dd 	.word	0xbbaa55dd
    653c:	00f00202 	.word	0x00f00202
    6540:	00f00200 	.word	0x00f00200

00006544 <nrf_cc310_bl_hash_sha256_init>:
    6544:	b538      	push	{r3, r4, r5, lr}
    6546:	4604      	mov	r4, r0
    6548:	b168      	cbz	r0, 6566 <nrf_cc310_bl_hash_sha256_init+0x22>
    654a:	1d05      	adds	r5, r0, #4
    654c:	2170      	movs	r1, #112	; 0x70
    654e:	4628      	mov	r0, r5
    6550:	f002 ff40 	bl	93d4 <SaSi_PalMemSetZero>
    6554:	4628      	mov	r0, r5
    6556:	2220      	movs	r2, #32
    6558:	4904      	ldr	r1, [pc, #16]	; (656c <nrf_cc310_bl_hash_sha256_init+0x28>)
    655a:	f002 ff37 	bl	93cc <SaSi_PalMemCopy>
    655e:	2000      	movs	r0, #0
    6560:	4b03      	ldr	r3, [pc, #12]	; (6570 <nrf_cc310_bl_hash_sha256_init+0x2c>)
    6562:	6023      	str	r3, [r4, #0]
    6564:	bd38      	pop	{r3, r4, r5, pc}
    6566:	4803      	ldr	r0, [pc, #12]	; (6574 <nrf_cc310_bl_hash_sha256_init+0x30>)
    6568:	e7fc      	b.n	6564 <nrf_cc310_bl_hash_sha256_init+0x20>
    656a:	bf00      	nop
    656c:	00009b38 	.word	0x00009b38
    6570:	bbaa55dd 	.word	0xbbaa55dd
    6574:	00f00200 	.word	0x00f00200

00006578 <nrf_cc310_bl_hash_sha256_update>:
    6578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    657c:	b085      	sub	sp, #20
    657e:	4615      	mov	r5, r2
    6580:	466f      	mov	r7, sp
    6582:	4b27      	ldr	r3, [pc, #156]	; (6620 <nrf_cc310_bl_hash_sha256_update+0xa8>)
    6584:	4604      	mov	r4, r0
    6586:	460e      	mov	r6, r1
    6588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    658a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    658e:	b92d      	cbnz	r5, 659c <nrf_cc310_bl_hash_sha256_update+0x24>
    6590:	f04f 0900 	mov.w	r9, #0
    6594:	4648      	mov	r0, r9
    6596:	b005      	add	sp, #20
    6598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    659c:	4620      	mov	r0, r4
    659e:	f7ff ffc1 	bl	6524 <verify_context_hash_sha256>
    65a2:	4681      	mov	r9, r0
    65a4:	2800      	cmp	r0, #0
    65a6:	d1f5      	bne.n	6594 <nrf_cc310_bl_hash_sha256_update+0x1c>
    65a8:	1d23      	adds	r3, r4, #4
    65aa:	9301      	str	r3, [sp, #4]
    65ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
    65ae:	bba3      	cbnz	r3, 661a <nrf_cc310_bl_hash_sha256_update+0xa2>
    65b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
    65b2:	b18b      	cbz	r3, 65d8 <nrf_cc310_bl_hash_sha256_update+0x60>
    65b4:	f1c3 0840 	rsb	r8, r3, #64	; 0x40
    65b8:	45a8      	cmp	r8, r5
    65ba:	bf28      	it	cs
    65bc:	46a8      	movcs	r8, r5
    65be:	f104 0030 	add.w	r0, r4, #48	; 0x30
    65c2:	4631      	mov	r1, r6
    65c4:	4418      	add	r0, r3
    65c6:	4642      	mov	r2, r8
    65c8:	f002 ff00 	bl	93cc <SaSi_PalMemCopy>
    65cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
    65ce:	4446      	add	r6, r8
    65d0:	4443      	add	r3, r8
    65d2:	6723      	str	r3, [r4, #112]	; 0x70
    65d4:	eba5 0508 	sub.w	r5, r5, r8
    65d8:	6f22      	ldr	r2, [r4, #112]	; 0x70
    65da:	2a40      	cmp	r2, #64	; 0x40
    65dc:	d106      	bne.n	65ec <nrf_cc310_bl_hash_sha256_update+0x74>
    65de:	f104 0130 	add.w	r1, r4, #48	; 0x30
    65e2:	4638      	mov	r0, r7
    65e4:	f000 fbb4 	bl	6d50 <nrf_cc310_bl_hash_update_internal>
    65e8:	2300      	movs	r3, #0
    65ea:	6723      	str	r3, [r4, #112]	; 0x70
    65ec:	f005 083f 	and.w	r8, r5, #63	; 0x3f
    65f0:	f035 053f 	bics.w	r5, r5, #63	; 0x3f
    65f4:	d005      	beq.n	6602 <nrf_cc310_bl_hash_sha256_update+0x8a>
    65f6:	4631      	mov	r1, r6
    65f8:	462a      	mov	r2, r5
    65fa:	4638      	mov	r0, r7
    65fc:	f000 fba8 	bl	6d50 <nrf_cc310_bl_hash_update_internal>
    6600:	442e      	add	r6, r5
    6602:	f1b8 0f00 	cmp.w	r8, #0
    6606:	d0c3      	beq.n	6590 <nrf_cc310_bl_hash_sha256_update+0x18>
    6608:	4642      	mov	r2, r8
    660a:	4631      	mov	r1, r6
    660c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6610:	f002 fedc 	bl	93cc <SaSi_PalMemCopy>
    6614:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
    6618:	e7bc      	b.n	6594 <nrf_cc310_bl_hash_sha256_update+0x1c>
    661a:	f8df 9008 	ldr.w	r9, [pc, #8]	; 6624 <nrf_cc310_bl_hash_sha256_update+0xac>
    661e:	e7b9      	b.n	6594 <nrf_cc310_bl_hash_sha256_update+0x1c>
    6620:	00009740 	.word	0x00009740
    6624:	00f0020c 	.word	0x00f0020c

00006628 <nrf_cc310_bl_hash_sha256_finalize>:
    6628:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    662c:	4604      	mov	r4, r0
    662e:	466f      	mov	r7, sp
    6630:	4b13      	ldr	r3, [pc, #76]	; (6680 <nrf_cc310_bl_hash_sha256_finalize+0x58>)
    6632:	460e      	mov	r6, r1
    6634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6636:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    663a:	4620      	mov	r0, r4
    663c:	f7ff ff72 	bl	6524 <verify_context_hash_sha256>
    6640:	4680      	mov	r8, r0
    6642:	b9b0      	cbnz	r0, 6672 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    6644:	b1ce      	cbz	r6, 667a <nrf_cc310_bl_hash_sha256_finalize+0x52>
    6646:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6648:	1d25      	adds	r5, r4, #4
    664a:	9501      	str	r5, [sp, #4]
    664c:	b93b      	cbnz	r3, 665e <nrf_cc310_bl_hash_sha256_finalize+0x36>
    664e:	2301      	movs	r3, #1
    6650:	6f22      	ldr	r2, [r4, #112]	; 0x70
    6652:	6263      	str	r3, [r4, #36]	; 0x24
    6654:	f104 0130 	add.w	r1, r4, #48	; 0x30
    6658:	4638      	mov	r0, r7
    665a:	f000 fb79 	bl	6d50 <nrf_cc310_bl_hash_update_internal>
    665e:	462b      	mov	r3, r5
    6660:	3e04      	subs	r6, #4
    6662:	3424      	adds	r4, #36	; 0x24
    6664:	f853 2b04 	ldr.w	r2, [r3], #4
    6668:	ba12      	rev	r2, r2
    666a:	42a3      	cmp	r3, r4
    666c:	f846 2f04 	str.w	r2, [r6, #4]!
    6670:	d1f8      	bne.n	6664 <nrf_cc310_bl_hash_sha256_finalize+0x3c>
    6672:	4640      	mov	r0, r8
    6674:	b004      	add	sp, #16
    6676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    667a:	f8df 8008 	ldr.w	r8, [pc, #8]	; 6684 <nrf_cc310_bl_hash_sha256_finalize+0x5c>
    667e:	e7f8      	b.n	6672 <nrf_cc310_bl_hash_sha256_finalize+0x4a>
    6680:	00009740 	.word	0x00009740
    6684:	00f00205 	.word	0x00f00205

00006688 <nrf_cc310_bl_init>:
    6688:	4b08      	ldr	r3, [pc, #32]	; (66ac <nrf_cc310_bl_init+0x24>)
    668a:	681b      	ldr	r3, [r3, #0]
    668c:	0e1b      	lsrs	r3, r3, #24
    668e:	2bf0      	cmp	r3, #240	; 0xf0
    6690:	d108      	bne.n	66a4 <nrf_cc310_bl_init+0x1c>
    6692:	4b07      	ldr	r3, [pc, #28]	; (66b0 <nrf_cc310_bl_init+0x28>)
    6694:	681a      	ldr	r2, [r3, #0]
    6696:	4b07      	ldr	r3, [pc, #28]	; (66b4 <nrf_cc310_bl_init+0x2c>)
    6698:	429a      	cmp	r2, r3
    669a:	d105      	bne.n	66a8 <nrf_cc310_bl_init+0x20>
    669c:	2000      	movs	r0, #0
    669e:	4b06      	ldr	r3, [pc, #24]	; (66b8 <nrf_cc310_bl_init+0x30>)
    66a0:	6018      	str	r0, [r3, #0]
    66a2:	4770      	bx	lr
    66a4:	2005      	movs	r0, #5
    66a6:	4770      	bx	lr
    66a8:	2006      	movs	r0, #6
    66aa:	4770      	bx	lr
    66ac:	50841928 	.word	0x50841928
    66b0:	50841a24 	.word	0x50841a24
    66b4:	20e00000 	.word	0x20e00000
    66b8:	50841a0c 	.word	0x50841a0c

000066bc <PkaSetRegsMapTab>:
    66bc:	2200      	movs	r2, #0
    66be:	b530      	push	{r4, r5, lr}
    66c0:	4613      	mov	r3, r2
    66c2:	f640 75fc 	movw	r5, #4092	; 0xffc
    66c6:	0049      	lsls	r1, r1, #1
    66c8:	3802      	subs	r0, #2
    66ca:	f102 54a1 	add.w	r4, r2, #337641472	; 0x14200000
    66ce:	f504 3482 	add.w	r4, r4, #66560	; 0x10400
    66d2:	4290      	cmp	r0, r2
    66d4:	ea4f 0484 	mov.w	r4, r4, lsl #2
    66d8:	f102 0201 	add.w	r2, r2, #1
    66dc:	bfca      	itet	gt
    66de:	6023      	strgt	r3, [r4, #0]
    66e0:	6025      	strle	r5, [r4, #0]
    66e2:	185b      	addgt	r3, r3, r1
    66e4:	2a1e      	cmp	r2, #30
    66e6:	d1f0      	bne.n	66ca <PkaSetRegsMapTab+0xe>
    66e8:	4a03      	ldr	r2, [pc, #12]	; (66f8 <PkaSetRegsMapTab+0x3c>)
    66ea:	6013      	str	r3, [r2, #0]
    66ec:	440b      	add	r3, r1
    66ee:	6053      	str	r3, [r2, #4]
    66f0:	4b02      	ldr	r3, [pc, #8]	; (66fc <PkaSetRegsMapTab+0x40>)
    66f2:	4a03      	ldr	r2, [pc, #12]	; (6700 <PkaSetRegsMapTab+0x44>)
    66f4:	601a      	str	r2, [r3, #0]
    66f6:	bd30      	pop	{r4, r5, pc}
    66f8:	50841078 	.word	0x50841078
    66fc:	50841084 	.word	0x50841084
    6700:	000ff820 	.word	0x000ff820

00006704 <PkaGetRegEffectiveSizeInBits>:
    6704:	4b1e      	ldr	r3, [pc, #120]	; (6780 <PkaGetRegEffectiveSizeInBits+0x7c>)
    6706:	b530      	push	{r4, r5, lr}
    6708:	461a      	mov	r2, r3
    670a:	b085      	sub	sp, #20
    670c:	6819      	ldr	r1, [r3, #0]
    670e:	9100      	str	r1, [sp, #0]
    6710:	9900      	ldr	r1, [sp, #0]
    6712:	07cc      	lsls	r4, r1, #31
    6714:	d5fa      	bpl.n	670c <PkaGetRegEffectiveSizeInBits+0x8>
    6716:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    671a:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    671e:	0080      	lsls	r0, r0, #2
    6720:	6801      	ldr	r1, [r0, #0]
    6722:	6813      	ldr	r3, [r2, #0]
    6724:	9301      	str	r3, [sp, #4]
    6726:	9b01      	ldr	r3, [sp, #4]
    6728:	07d8      	lsls	r0, r3, #31
    672a:	d5fa      	bpl.n	6722 <PkaGetRegEffectiveSizeInBits+0x1e>
    672c:	4b15      	ldr	r3, [pc, #84]	; (6784 <PkaGetRegEffectiveSizeInBits+0x80>)
    672e:	4c16      	ldr	r4, [pc, #88]	; (6788 <PkaGetRegEffectiveSizeInBits+0x84>)
    6730:	6818      	ldr	r0, [r3, #0]
    6732:	2320      	movs	r3, #32
    6734:	301f      	adds	r0, #31
    6736:	fb90 f0f3 	sdiv	r0, r0, r3
    673a:	4d14      	ldr	r5, [pc, #80]	; (678c <PkaGetRegEffectiveSizeInBits+0x88>)
    673c:	3801      	subs	r0, #1
    673e:	2800      	cmp	r0, #0
    6740:	da10      	bge.n	6764 <PkaGetRegEffectiveSizeInBits+0x60>
    6742:	2300      	movs	r3, #0
    6744:	3001      	adds	r0, #1
    6746:	0140      	lsls	r0, r0, #5
    6748:	b153      	cbz	r3, 6760 <PkaGetRegEffectiveSizeInBits+0x5c>
    674a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    674e:	f1a0 0120 	sub.w	r1, r0, #32
    6752:	4213      	tst	r3, r2
    6754:	d104      	bne.n	6760 <PkaGetRegEffectiveSizeInBits+0x5c>
    6756:	3801      	subs	r0, #1
    6758:	4288      	cmp	r0, r1
    675a:	ea4f 0252 	mov.w	r2, r2, lsr #1
    675e:	d1f8      	bne.n	6752 <PkaGetRegEffectiveSizeInBits+0x4e>
    6760:	b005      	add	sp, #20
    6762:	bd30      	pop	{r4, r5, pc}
    6764:	6813      	ldr	r3, [r2, #0]
    6766:	9303      	str	r3, [sp, #12]
    6768:	9b03      	ldr	r3, [sp, #12]
    676a:	07db      	lsls	r3, r3, #31
    676c:	d5fa      	bpl.n	6764 <PkaGetRegEffectiveSizeInBits+0x60>
    676e:	1843      	adds	r3, r0, r1
    6770:	6023      	str	r3, [r4, #0]
    6772:	682b      	ldr	r3, [r5, #0]
    6774:	9302      	str	r3, [sp, #8]
    6776:	9b02      	ldr	r3, [sp, #8]
    6778:	2b00      	cmp	r3, #0
    677a:	d1e3      	bne.n	6744 <PkaGetRegEffectiveSizeInBits+0x40>
    677c:	3801      	subs	r0, #1
    677e:	e7de      	b.n	673e <PkaGetRegEffectiveSizeInBits+0x3a>
    6780:	508410b4 	.word	0x508410b4
    6784:	508410ac 	.word	0x508410ac
    6788:	508410e4 	.word	0x508410e4
    678c:	508410dc 	.word	0x508410dc

00006790 <PkaGetNextMsBit>:
    6790:	b5f0      	push	{r4, r5, r6, r7, lr}
    6792:	681d      	ldr	r5, [r3, #0]
    6794:	b085      	sub	sp, #20
    6796:	f001 041f 	and.w	r4, r1, #31
    679a:	b90d      	cbnz	r5, 67a0 <PkaGetNextMsBit+0x10>
    679c:	2c1f      	cmp	r4, #31
    679e:	d128      	bne.n	67f2 <PkaGetNextMsBit+0x62>
    67a0:	4d17      	ldr	r5, [pc, #92]	; (6800 <PkaGetNextMsBit+0x70>)
    67a2:	462e      	mov	r6, r5
    67a4:	682f      	ldr	r7, [r5, #0]
    67a6:	9701      	str	r7, [sp, #4]
    67a8:	9f01      	ldr	r7, [sp, #4]
    67aa:	07ff      	lsls	r7, r7, #31
    67ac:	d5fa      	bpl.n	67a4 <PkaGetNextMsBit+0x14>
    67ae:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    67b2:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    67b6:	0080      	lsls	r0, r0, #2
    67b8:	6800      	ldr	r0, [r0, #0]
    67ba:	6835      	ldr	r5, [r6, #0]
    67bc:	9503      	str	r5, [sp, #12]
    67be:	9d03      	ldr	r5, [sp, #12]
    67c0:	07ed      	lsls	r5, r5, #31
    67c2:	d5fa      	bpl.n	67ba <PkaGetNextMsBit+0x2a>
    67c4:	2c1f      	cmp	r4, #31
    67c6:	eb00 1061 	add.w	r0, r0, r1, asr #5
    67ca:	bf18      	it	ne
    67cc:	43c9      	mvnne	r1, r1
    67ce:	4d0d      	ldr	r5, [pc, #52]	; (6804 <PkaGetNextMsBit+0x74>)
    67d0:	bf18      	it	ne
    67d2:	f001 011f 	andne.w	r1, r1, #31
    67d6:	6028      	str	r0, [r5, #0]
    67d8:	480b      	ldr	r0, [pc, #44]	; (6808 <PkaGetNextMsBit+0x78>)
    67da:	6800      	ldr	r0, [r0, #0]
    67dc:	9002      	str	r0, [sp, #8]
    67de:	9802      	ldr	r0, [sp, #8]
    67e0:	bf1c      	itt	ne
    67e2:	fa00 f101 	lslne.w	r1, r0, r1
    67e6:	6011      	strne	r1, [r2, #0]
    67e8:	f04f 0100 	mov.w	r1, #0
    67ec:	bf08      	it	eq
    67ee:	6010      	streq	r0, [r2, #0]
    67f0:	6019      	str	r1, [r3, #0]
    67f2:	6810      	ldr	r0, [r2, #0]
    67f4:	0043      	lsls	r3, r0, #1
    67f6:	0fc0      	lsrs	r0, r0, #31
    67f8:	6013      	str	r3, [r2, #0]
    67fa:	b005      	add	sp, #20
    67fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67fe:	bf00      	nop
    6800:	508410b4 	.word	0x508410b4
    6804:	508410e4 	.word	0x508410e4
    6808:	508410dc 	.word	0x508410dc

0000680c <PkaSetRegsSizesTab>:
    680c:	4b0c      	ldr	r3, [pc, #48]	; (6840 <PkaSetRegsSizesTab+0x34>)
    680e:	0189      	lsls	r1, r1, #6
    6810:	6018      	str	r0, [r3, #0]
    6812:	303f      	adds	r0, #63	; 0x3f
    6814:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
    6818:	3040      	adds	r0, #64	; 0x40
    681a:	6058      	str	r0, [r3, #4]
    681c:	6099      	str	r1, [r3, #8]
    681e:	4809      	ldr	r0, [pc, #36]	; (6844 <PkaSetRegsSizesTab+0x38>)
    6820:	60d9      	str	r1, [r3, #12]
    6822:	6119      	str	r1, [r3, #16]
    6824:	6159      	str	r1, [r3, #20]
    6826:	6199      	str	r1, [r3, #24]
    6828:	331c      	adds	r3, #28
    682a:	b082      	sub	sp, #8
    682c:	6019      	str	r1, [r3, #0]
    682e:	6802      	ldr	r2, [r0, #0]
    6830:	9201      	str	r2, [sp, #4]
    6832:	9a01      	ldr	r2, [sp, #4]
    6834:	07d2      	lsls	r2, r2, #31
    6836:	d5fa      	bpl.n	682e <PkaSetRegsSizesTab+0x22>
    6838:	6019      	str	r1, [r3, #0]
    683a:	b002      	add	sp, #8
    683c:	4770      	bx	lr
    683e:	bf00      	nop
    6840:	50841090 	.word	0x50841090
    6844:	508410b4 	.word	0x508410b4

00006848 <PkaInitPka>:
    6848:	b538      	push	{r3, r4, r5, lr}
    684a:	f1a0 0320 	sub.w	r3, r0, #32
    684e:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
    6852:	4605      	mov	r5, r0
    6854:	d82c      	bhi.n	68b0 <PkaInitPka+0x68>
    6856:	288f      	cmp	r0, #143	; 0x8f
    6858:	d826      	bhi.n	68a8 <PkaInitPka+0x60>
    685a:	f100 0347 	add.w	r3, r0, #71	; 0x47
    685e:	f100 0466 	add.w	r4, r0, #102	; 0x66
    6862:	06db      	lsls	r3, r3, #27
    6864:	ea4f 1454 	mov.w	r4, r4, lsr #5
    6868:	d000      	beq.n	686c <PkaInitPka+0x24>
    686a:	3401      	adds	r4, #1
    686c:	0164      	lsls	r4, r4, #5
    686e:	343f      	adds	r4, #63	; 0x3f
    6870:	09a4      	lsrs	r4, r4, #6
    6872:	3401      	adds	r4, #1
    6874:	b111      	cbz	r1, 687c <PkaInitPka+0x34>
    6876:	42a1      	cmp	r1, r4
    6878:	d31a      	bcc.n	68b0 <PkaInitPka+0x68>
    687a:	460c      	mov	r4, r1
    687c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    6880:	00e3      	lsls	r3, r4, #3
    6882:	fbb0 f0f3 	udiv	r0, r0, r3
    6886:	2820      	cmp	r0, #32
    6888:	bf28      	it	cs
    688a:	2020      	movcs	r0, #32
    688c:	b102      	cbz	r2, 6890 <PkaInitPka+0x48>
    688e:	6010      	str	r0, [r2, #0]
    6890:	2201      	movs	r2, #1
    6892:	4b08      	ldr	r3, [pc, #32]	; (68b4 <PkaInitPka+0x6c>)
    6894:	4621      	mov	r1, r4
    6896:	601a      	str	r2, [r3, #0]
    6898:	f7ff ff10 	bl	66bc <PkaSetRegsMapTab>
    689c:	4628      	mov	r0, r5
    689e:	4621      	mov	r1, r4
    68a0:	f7ff ffb4 	bl	680c <PkaSetRegsSizesTab>
    68a4:	2000      	movs	r0, #0
    68a6:	bd38      	pop	{r3, r4, r5, pc}
    68a8:	f100 041f 	add.w	r4, r0, #31
    68ac:	0964      	lsrs	r4, r4, #5
    68ae:	e7dd      	b.n	686c <PkaInitPka+0x24>
    68b0:	4801      	ldr	r0, [pc, #4]	; (68b8 <PkaInitPka+0x70>)
    68b2:	e7f8      	b.n	68a6 <PkaInitPka+0x5e>
    68b4:	5084181c 	.word	0x5084181c
    68b8:	00f02122 	.word	0x00f02122

000068bc <PkaClearBlockOfRegs>:
    68bc:	4b46      	ldr	r3, [pc, #280]	; (69d8 <PkaClearBlockOfRegs+0x11c>)
    68be:	b5f0      	push	{r4, r5, r6, r7, lr}
    68c0:	461d      	mov	r5, r3
    68c2:	b089      	sub	sp, #36	; 0x24
    68c4:	681c      	ldr	r4, [r3, #0]
    68c6:	9401      	str	r4, [sp, #4]
    68c8:	9c01      	ldr	r4, [sp, #4]
    68ca:	07e4      	lsls	r4, r4, #31
    68cc:	d5fa      	bpl.n	68c4 <PkaClearBlockOfRegs+0x8>
    68ce:	4b43      	ldr	r3, [pc, #268]	; (69dc <PkaClearBlockOfRegs+0x120>)
    68d0:	2400      	movs	r4, #0
    68d2:	4413      	add	r3, r2
    68d4:	009b      	lsls	r3, r3, #2
    68d6:	681a      	ldr	r2, [r3, #0]
    68d8:	180b      	adds	r3, r1, r0
    68da:	2b1e      	cmp	r3, #30
    68dc:	bf88      	it	hi
    68de:	f1c0 011e 	rsbhi	r1, r0, #30
    68e2:	321f      	adds	r2, #31
    68e4:	180b      	adds	r3, r1, r0
    68e6:	0952      	lsrs	r2, r2, #5
    68e8:	4353      	muls	r3, r2
    68ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    68ee:	bf84      	itt	hi
    68f0:	f44f 6180 	movhi.w	r1, #1024	; 0x400
    68f4:	fbb1 f1f2 	udivhi	r1, r1, r2
    68f8:	4627      	mov	r7, r4
    68fa:	bf88      	it	hi
    68fc:	1a09      	subhi	r1, r1, r0
    68fe:	f8df e0e4 	ldr.w	lr, [pc, #228]	; 69e4 <PkaClearBlockOfRegs+0x128>
    6902:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    6906:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 69e8 <PkaClearBlockOfRegs+0x12c>
    690a:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    690e:	42a1      	cmp	r1, r4
    6910:	dc33      	bgt.n	697a <PkaClearBlockOfRegs+0xbe>
    6912:	682b      	ldr	r3, [r5, #0]
    6914:	9304      	str	r3, [sp, #16]
    6916:	9b04      	ldr	r3, [sp, #16]
    6918:	07db      	lsls	r3, r3, #31
    691a:	d5fa      	bpl.n	6912 <PkaClearBlockOfRegs+0x56>
    691c:	4b30      	ldr	r3, [pc, #192]	; (69e0 <PkaClearBlockOfRegs+0x124>)
    691e:	681b      	ldr	r3, [r3, #0]
    6920:	6829      	ldr	r1, [r5, #0]
    6922:	9105      	str	r1, [sp, #20]
    6924:	9905      	ldr	r1, [sp, #20]
    6926:	07cf      	lsls	r7, r1, #31
    6928:	d5fa      	bpl.n	6920 <PkaClearBlockOfRegs+0x64>
    692a:	4c2e      	ldr	r4, [pc, #184]	; (69e4 <PkaClearBlockOfRegs+0x128>)
    692c:	492e      	ldr	r1, [pc, #184]	; (69e8 <PkaClearBlockOfRegs+0x12c>)
    692e:	6023      	str	r3, [r4, #0]
    6930:	2300      	movs	r3, #0
    6932:	461e      	mov	r6, r3
    6934:	4293      	cmp	r3, r2
    6936:	f103 0001 	add.w	r0, r3, #1
    693a:	d140      	bne.n	69be <PkaClearBlockOfRegs+0x102>
    693c:	4619      	mov	r1, r3
    693e:	2600      	movs	r6, #0
    6940:	f020 0201 	bic.w	r2, r0, #1
    6944:	4828      	ldr	r0, [pc, #160]	; (69e8 <PkaClearBlockOfRegs+0x12c>)
    6946:	428a      	cmp	r2, r1
    6948:	d83c      	bhi.n	69c4 <PkaClearBlockOfRegs+0x108>
    694a:	6829      	ldr	r1, [r5, #0]
    694c:	9106      	str	r1, [sp, #24]
    694e:	9906      	ldr	r1, [sp, #24]
    6950:	07ce      	lsls	r6, r1, #31
    6952:	d5fa      	bpl.n	694a <PkaClearBlockOfRegs+0x8e>
    6954:	4925      	ldr	r1, [pc, #148]	; (69ec <PkaClearBlockOfRegs+0x130>)
    6956:	6809      	ldr	r1, [r1, #0]
    6958:	6828      	ldr	r0, [r5, #0]
    695a:	9007      	str	r0, [sp, #28]
    695c:	9807      	ldr	r0, [sp, #28]
    695e:	07c0      	lsls	r0, r0, #31
    6960:	d5fa      	bpl.n	6958 <PkaClearBlockOfRegs+0x9c>
    6962:	6021      	str	r1, [r4, #0]
    6964:	2100      	movs	r1, #0
    6966:	460c      	mov	r4, r1
    6968:	481f      	ldr	r0, [pc, #124]	; (69e8 <PkaClearBlockOfRegs+0x12c>)
    696a:	428b      	cmp	r3, r1
    696c:	d12d      	bne.n	69ca <PkaClearBlockOfRegs+0x10e>
    696e:	2000      	movs	r0, #0
    6970:	491d      	ldr	r1, [pc, #116]	; (69e8 <PkaClearBlockOfRegs+0x12c>)
    6972:	429a      	cmp	r2, r3
    6974:	d82c      	bhi.n	69d0 <PkaClearBlockOfRegs+0x114>
    6976:	b009      	add	sp, #36	; 0x24
    6978:	bdf0      	pop	{r4, r5, r6, r7, pc}
    697a:	682b      	ldr	r3, [r5, #0]
    697c:	9302      	str	r3, [sp, #8]
    697e:	9b02      	ldr	r3, [sp, #8]
    6980:	07db      	lsls	r3, r3, #31
    6982:	d5fa      	bpl.n	697a <PkaClearBlockOfRegs+0xbe>
    6984:	1903      	adds	r3, r0, r4
    6986:	009b      	lsls	r3, r3, #2
    6988:	681b      	ldr	r3, [r3, #0]
    698a:	682e      	ldr	r6, [r5, #0]
    698c:	9603      	str	r6, [sp, #12]
    698e:	9e03      	ldr	r6, [sp, #12]
    6990:	07f6      	lsls	r6, r6, #31
    6992:	d5fa      	bpl.n	698a <PkaClearBlockOfRegs+0xce>
    6994:	f8ce 3000 	str.w	r3, [lr]
    6998:	2300      	movs	r3, #0
    699a:	4293      	cmp	r3, r2
    699c:	f103 0301 	add.w	r3, r3, #1
    69a0:	d106      	bne.n	69b0 <PkaClearBlockOfRegs+0xf4>
    69a2:	4616      	mov	r6, r2
    69a4:	f023 0301 	bic.w	r3, r3, #1
    69a8:	42b3      	cmp	r3, r6
    69aa:	d804      	bhi.n	69b6 <PkaClearBlockOfRegs+0xfa>
    69ac:	3401      	adds	r4, #1
    69ae:	e7ae      	b.n	690e <PkaClearBlockOfRegs+0x52>
    69b0:	f8cc 7000 	str.w	r7, [ip]
    69b4:	e7f1      	b.n	699a <PkaClearBlockOfRegs+0xde>
    69b6:	f8cc 7000 	str.w	r7, [ip]
    69ba:	3601      	adds	r6, #1
    69bc:	e7f4      	b.n	69a8 <PkaClearBlockOfRegs+0xec>
    69be:	600e      	str	r6, [r1, #0]
    69c0:	4603      	mov	r3, r0
    69c2:	e7b7      	b.n	6934 <PkaClearBlockOfRegs+0x78>
    69c4:	6006      	str	r6, [r0, #0]
    69c6:	3101      	adds	r1, #1
    69c8:	e7bd      	b.n	6946 <PkaClearBlockOfRegs+0x8a>
    69ca:	6004      	str	r4, [r0, #0]
    69cc:	3101      	adds	r1, #1
    69ce:	e7cc      	b.n	696a <PkaClearBlockOfRegs+0xae>
    69d0:	6008      	str	r0, [r1, #0]
    69d2:	3301      	adds	r3, #1
    69d4:	e7cd      	b.n	6972 <PkaClearBlockOfRegs+0xb6>
    69d6:	bf00      	nop
    69d8:	508410b4 	.word	0x508410b4
    69dc:	14210424 	.word	0x14210424
    69e0:	5084107c 	.word	0x5084107c
    69e4:	508410d4 	.word	0x508410d4
    69e8:	508410d8 	.word	0x508410d8
    69ec:	50841078 	.word	0x50841078

000069f0 <PkaFinishAndMutexUnlock>:
    69f0:	b508      	push	{r3, lr}
    69f2:	b140      	cbz	r0, 6a06 <PkaFinishAndMutexUnlock+0x16>
    69f4:	2820      	cmp	r0, #32
    69f6:	4601      	mov	r1, r0
    69f8:	f04f 0207 	mov.w	r2, #7
    69fc:	bf28      	it	cs
    69fe:	2120      	movcs	r1, #32
    6a00:	2000      	movs	r0, #0
    6a02:	f7ff ff5b 	bl	68bc <PkaClearBlockOfRegs>
    6a06:	2200      	movs	r2, #0
    6a08:	4b01      	ldr	r3, [pc, #4]	; (6a10 <PkaFinishAndMutexUnlock+0x20>)
    6a0a:	601a      	str	r2, [r3, #0]
    6a0c:	bd08      	pop	{r3, pc}
    6a0e:	bf00      	nop
    6a10:	5084181c 	.word	0x5084181c

00006a14 <PkaCopyDataIntoPkaReg>:
    6a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a16:	4d29      	ldr	r5, [pc, #164]	; (6abc <PkaCopyDataIntoPkaReg+0xa8>)
    6a18:	b085      	sub	sp, #20
    6a1a:	462c      	mov	r4, r5
    6a1c:	682e      	ldr	r6, [r5, #0]
    6a1e:	9600      	str	r6, [sp, #0]
    6a20:	9e00      	ldr	r6, [sp, #0]
    6a22:	07f6      	lsls	r6, r6, #31
    6a24:	d5fa      	bpl.n	6a1c <PkaCopyDataIntoPkaReg+0x8>
    6a26:	f100 50a1 	add.w	r0, r0, #337641472	; 0x14200000
    6a2a:	f500 3082 	add.w	r0, r0, #66560	; 0x10400
    6a2e:	0080      	lsls	r0, r0, #2
    6a30:	6805      	ldr	r5, [r0, #0]
    6a32:	6820      	ldr	r0, [r4, #0]
    6a34:	9001      	str	r0, [sp, #4]
    6a36:	9801      	ldr	r0, [sp, #4]
    6a38:	07c7      	lsls	r7, r0, #31
    6a3a:	d5fa      	bpl.n	6a32 <PkaCopyDataIntoPkaReg+0x1e>
    6a3c:	4820      	ldr	r0, [pc, #128]	; (6ac0 <PkaCopyDataIntoPkaReg+0xac>)
    6a3e:	4f21      	ldr	r7, [pc, #132]	; (6ac4 <PkaCopyDataIntoPkaReg+0xb0>)
    6a40:	6005      	str	r5, [r0, #0]
    6a42:	eb02 0683 	add.w	r6, r2, r3, lsl #2
    6a46:	42b2      	cmp	r2, r6
    6a48:	d129      	bne.n	6a9e <PkaCopyDataIntoPkaReg+0x8a>
    6a4a:	2700      	movs	r7, #0
    6a4c:	1c5a      	adds	r2, r3, #1
    6a4e:	4e1d      	ldr	r6, [pc, #116]	; (6ac4 <PkaCopyDataIntoPkaReg+0xb0>)
    6a50:	f022 0201 	bic.w	r2, r2, #1
    6a54:	429a      	cmp	r2, r3
    6a56:	d827      	bhi.n	6aa8 <PkaCopyDataIntoPkaReg+0x94>
    6a58:	6823      	ldr	r3, [r4, #0]
    6a5a:	9302      	str	r3, [sp, #8]
    6a5c:	9b02      	ldr	r3, [sp, #8]
    6a5e:	07de      	lsls	r6, r3, #31
    6a60:	d5fa      	bpl.n	6a58 <PkaCopyDataIntoPkaReg+0x44>
    6a62:	4b19      	ldr	r3, [pc, #100]	; (6ac8 <PkaCopyDataIntoPkaReg+0xb4>)
    6a64:	440b      	add	r3, r1
    6a66:	009b      	lsls	r3, r3, #2
    6a68:	681b      	ldr	r3, [r3, #0]
    6a6a:	331f      	adds	r3, #31
    6a6c:	095b      	lsrs	r3, r3, #5
    6a6e:	429a      	cmp	r2, r3
    6a70:	d213      	bcs.n	6a9a <PkaCopyDataIntoPkaReg+0x86>
    6a72:	6821      	ldr	r1, [r4, #0]
    6a74:	9103      	str	r1, [sp, #12]
    6a76:	9903      	ldr	r1, [sp, #12]
    6a78:	07c9      	lsls	r1, r1, #31
    6a7a:	d5fa      	bpl.n	6a72 <PkaCopyDataIntoPkaReg+0x5e>
    6a7c:	2100      	movs	r1, #0
    6a7e:	4415      	add	r5, r2
    6a80:	6005      	str	r5, [r0, #0]
    6a82:	4608      	mov	r0, r1
    6a84:	1a9b      	subs	r3, r3, r2
    6a86:	4a0f      	ldr	r2, [pc, #60]	; (6ac4 <PkaCopyDataIntoPkaReg+0xb0>)
    6a88:	428b      	cmp	r3, r1
    6a8a:	d810      	bhi.n	6aae <PkaCopyDataIntoPkaReg+0x9a>
    6a8c:	2000      	movs	r0, #0
    6a8e:	1c5a      	adds	r2, r3, #1
    6a90:	490c      	ldr	r1, [pc, #48]	; (6ac4 <PkaCopyDataIntoPkaReg+0xb0>)
    6a92:	f022 0201 	bic.w	r2, r2, #1
    6a96:	429a      	cmp	r2, r3
    6a98:	d80c      	bhi.n	6ab4 <PkaCopyDataIntoPkaReg+0xa0>
    6a9a:	b005      	add	sp, #20
    6a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a9e:	f852 cb04 	ldr.w	ip, [r2], #4
    6aa2:	f8c7 c000 	str.w	ip, [r7]
    6aa6:	e7ce      	b.n	6a46 <PkaCopyDataIntoPkaReg+0x32>
    6aa8:	6037      	str	r7, [r6, #0]
    6aaa:	3301      	adds	r3, #1
    6aac:	e7d2      	b.n	6a54 <PkaCopyDataIntoPkaReg+0x40>
    6aae:	6010      	str	r0, [r2, #0]
    6ab0:	3101      	adds	r1, #1
    6ab2:	e7e9      	b.n	6a88 <PkaCopyDataIntoPkaReg+0x74>
    6ab4:	6008      	str	r0, [r1, #0]
    6ab6:	3301      	adds	r3, #1
    6ab8:	e7ed      	b.n	6a96 <PkaCopyDataIntoPkaReg+0x82>
    6aba:	bf00      	nop
    6abc:	508410b4 	.word	0x508410b4
    6ac0:	508410d4 	.word	0x508410d4
    6ac4:	508410d8 	.word	0x508410d8
    6ac8:	14210424 	.word	0x14210424

00006acc <PkaEcdsaVerify>:
    6acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ad0:	4b81      	ldr	r3, [pc, #516]	; (6cd8 <PkaEcdsaVerify+0x20c>)
    6ad2:	b0a0      	sub	sp, #128	; 0x80
    6ad4:	681d      	ldr	r5, [r3, #0]
    6ad6:	6898      	ldr	r0, [r3, #8]
    6ad8:	3320      	adds	r3, #32
    6ada:	461e      	mov	r6, r3
    6adc:	681a      	ldr	r2, [r3, #0]
    6ade:	9201      	str	r2, [sp, #4]
    6ae0:	9a01      	ldr	r2, [sp, #4]
    6ae2:	07d7      	lsls	r7, r2, #31
    6ae4:	d5fa      	bpl.n	6adc <PkaEcdsaVerify+0x10>
    6ae6:	4b7d      	ldr	r3, [pc, #500]	; (6cdc <PkaEcdsaVerify+0x210>)
    6ae8:	4a7d      	ldr	r2, [pc, #500]	; (6ce0 <PkaEcdsaVerify+0x214>)
    6aea:	601a      	str	r2, [r3, #0]
    6aec:	6832      	ldr	r2, [r6, #0]
    6aee:	9202      	str	r2, [sp, #8]
    6af0:	9a02      	ldr	r2, [sp, #8]
    6af2:	07d4      	lsls	r4, r2, #31
    6af4:	d5fa      	bpl.n	6aec <PkaEcdsaVerify+0x20>
    6af6:	4a7b      	ldr	r2, [pc, #492]	; (6ce4 <PkaEcdsaVerify+0x218>)
    6af8:	601a      	str	r2, [r3, #0]
    6afa:	4a7b      	ldr	r2, [pc, #492]	; (6ce8 <PkaEcdsaVerify+0x21c>)
    6afc:	4614      	mov	r4, r2
    6afe:	6811      	ldr	r1, [r2, #0]
    6b00:	9103      	str	r1, [sp, #12]
    6b02:	9903      	ldr	r1, [sp, #12]
    6b04:	07c9      	lsls	r1, r1, #31
    6b06:	d5fa      	bpl.n	6afe <PkaEcdsaVerify+0x32>
    6b08:	4a78      	ldr	r2, [pc, #480]	; (6cec <PkaEcdsaVerify+0x220>)
    6b0a:	6811      	ldr	r1, [r2, #0]
    6b0c:	f3c1 2140 	ubfx	r1, r1, #9, #1
    6b10:	6837      	ldr	r7, [r6, #0]
    6b12:	9704      	str	r7, [sp, #16]
    6b14:	9f04      	ldr	r7, [sp, #16]
    6b16:	07ff      	lsls	r7, r7, #31
    6b18:	d5fa      	bpl.n	6b10 <PkaEcdsaVerify+0x44>
    6b1a:	4f75      	ldr	r7, [pc, #468]	; (6cf0 <PkaEcdsaVerify+0x224>)
    6b1c:	601f      	str	r7, [r3, #0]
    6b1e:	6827      	ldr	r7, [r4, #0]
    6b20:	9705      	str	r7, [sp, #20]
    6b22:	9f05      	ldr	r7, [sp, #20]
    6b24:	07ff      	lsls	r7, r7, #31
    6b26:	d5fa      	bpl.n	6b1e <PkaEcdsaVerify+0x52>
    6b28:	6817      	ldr	r7, [r2, #0]
    6b2a:	2900      	cmp	r1, #0
    6b2c:	f000 80cf 	beq.w	6cce <PkaEcdsaVerify+0x202>
    6b30:	05b9      	lsls	r1, r7, #22
    6b32:	f140 80cc 	bpl.w	6cce <PkaEcdsaVerify+0x202>
    6b36:	6831      	ldr	r1, [r6, #0]
    6b38:	9106      	str	r1, [sp, #24]
    6b3a:	9906      	ldr	r1, [sp, #24]
    6b3c:	07cf      	lsls	r7, r1, #31
    6b3e:	d5fa      	bpl.n	6b36 <PkaEcdsaVerify+0x6a>
    6b40:	496c      	ldr	r1, [pc, #432]	; (6cf4 <PkaEcdsaVerify+0x228>)
    6b42:	6019      	str	r1, [r3, #0]
    6b44:	6821      	ldr	r1, [r4, #0]
    6b46:	9107      	str	r1, [sp, #28]
    6b48:	9907      	ldr	r1, [sp, #28]
    6b4a:	07c9      	lsls	r1, r1, #31
    6b4c:	d5fa      	bpl.n	6b44 <PkaEcdsaVerify+0x78>
    6b4e:	6811      	ldr	r1, [r2, #0]
    6b50:	f3c1 2140 	ubfx	r1, r1, #9, #1
    6b54:	6837      	ldr	r7, [r6, #0]
    6b56:	9708      	str	r7, [sp, #32]
    6b58:	9f08      	ldr	r7, [sp, #32]
    6b5a:	07ff      	lsls	r7, r7, #31
    6b5c:	d5fa      	bpl.n	6b54 <PkaEcdsaVerify+0x88>
    6b5e:	4f66      	ldr	r7, [pc, #408]	; (6cf8 <PkaEcdsaVerify+0x22c>)
    6b60:	601f      	str	r7, [r3, #0]
    6b62:	6827      	ldr	r7, [r4, #0]
    6b64:	9709      	str	r7, [sp, #36]	; 0x24
    6b66:	9f09      	ldr	r7, [sp, #36]	; 0x24
    6b68:	07ff      	lsls	r7, r7, #31
    6b6a:	d5fa      	bpl.n	6b62 <PkaEcdsaVerify+0x96>
    6b6c:	6812      	ldr	r2, [r2, #0]
    6b6e:	2900      	cmp	r1, #0
    6b70:	f000 80af 	beq.w	6cd2 <PkaEcdsaVerify+0x206>
    6b74:	0591      	lsls	r1, r2, #22
    6b76:	f140 80ac 	bpl.w	6cd2 <PkaEcdsaVerify+0x206>
    6b7a:	6832      	ldr	r2, [r6, #0]
    6b7c:	920a      	str	r2, [sp, #40]	; 0x28
    6b7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6b80:	07d2      	lsls	r2, r2, #31
    6b82:	d5fa      	bpl.n	6b7a <PkaEcdsaVerify+0xae>
    6b84:	4a56      	ldr	r2, [pc, #344]	; (6ce0 <PkaEcdsaVerify+0x214>)
    6b86:	601a      	str	r2, [r3, #0]
    6b88:	6832      	ldr	r2, [r6, #0]
    6b8a:	920b      	str	r2, [sp, #44]	; 0x2c
    6b8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6b8e:	07d7      	lsls	r7, r2, #31
    6b90:	d5fa      	bpl.n	6b88 <PkaEcdsaVerify+0xbc>
    6b92:	4a5a      	ldr	r2, [pc, #360]	; (6cfc <PkaEcdsaVerify+0x230>)
    6b94:	601a      	str	r2, [r3, #0]
    6b96:	6831      	ldr	r1, [r6, #0]
    6b98:	910c      	str	r1, [sp, #48]	; 0x30
    6b9a:	990c      	ldr	r1, [sp, #48]	; 0x30
    6b9c:	07cc      	lsls	r4, r1, #31
    6b9e:	d5fa      	bpl.n	6b96 <PkaEcdsaVerify+0xca>
    6ba0:	4957      	ldr	r1, [pc, #348]	; (6d00 <PkaEcdsaVerify+0x234>)
    6ba2:	6019      	str	r1, [r3, #0]
    6ba4:	6831      	ldr	r1, [r6, #0]
    6ba6:	910d      	str	r1, [sp, #52]	; 0x34
    6ba8:	990d      	ldr	r1, [sp, #52]	; 0x34
    6baa:	07c9      	lsls	r1, r1, #31
    6bac:	d5fa      	bpl.n	6ba4 <PkaEcdsaVerify+0xd8>
    6bae:	4955      	ldr	r1, [pc, #340]	; (6d04 <PkaEcdsaVerify+0x238>)
    6bb0:	6019      	str	r1, [r3, #0]
    6bb2:	6831      	ldr	r1, [r6, #0]
    6bb4:	910e      	str	r1, [sp, #56]	; 0x38
    6bb6:	990e      	ldr	r1, [sp, #56]	; 0x38
    6bb8:	07cf      	lsls	r7, r1, #31
    6bba:	d5fa      	bpl.n	6bb2 <PkaEcdsaVerify+0xe6>
    6bbc:	4952      	ldr	r1, [pc, #328]	; (6d08 <PkaEcdsaVerify+0x23c>)
    6bbe:	6019      	str	r1, [r3, #0]
    6bc0:	6831      	ldr	r1, [r6, #0]
    6bc2:	910f      	str	r1, [sp, #60]	; 0x3c
    6bc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    6bc6:	07cc      	lsls	r4, r1, #31
    6bc8:	d5fa      	bpl.n	6bc0 <PkaEcdsaVerify+0xf4>
    6bca:	4950      	ldr	r1, [pc, #320]	; (6d0c <PkaEcdsaVerify+0x240>)
    6bcc:	6019      	str	r1, [r3, #0]
    6bce:	4b50      	ldr	r3, [pc, #320]	; (6d10 <PkaEcdsaVerify+0x244>)
    6bd0:	461e      	mov	r6, r3
    6bd2:	6819      	ldr	r1, [r3, #0]
    6bd4:	9110      	str	r1, [sp, #64]	; 0x40
    6bd6:	9910      	ldr	r1, [sp, #64]	; 0x40
    6bd8:	07c9      	lsls	r1, r1, #31
    6bda:	d5fa      	bpl.n	6bd2 <PkaEcdsaVerify+0x106>
    6bdc:	4c3f      	ldr	r4, [pc, #252]	; (6cdc <PkaEcdsaVerify+0x210>)
    6bde:	4b4d      	ldr	r3, [pc, #308]	; (6d14 <PkaEcdsaVerify+0x248>)
    6be0:	6023      	str	r3, [r4, #0]
    6be2:	6833      	ldr	r3, [r6, #0]
    6be4:	9311      	str	r3, [sp, #68]	; 0x44
    6be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6be8:	07db      	lsls	r3, r3, #31
    6bea:	d5fa      	bpl.n	6be2 <PkaEcdsaVerify+0x116>
    6bec:	4b4a      	ldr	r3, [pc, #296]	; (6d18 <PkaEcdsaVerify+0x24c>)
    6bee:	6023      	str	r3, [r4, #0]
    6bf0:	6833      	ldr	r3, [r6, #0]
    6bf2:	9312      	str	r3, [sp, #72]	; 0x48
    6bf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6bf6:	07df      	lsls	r7, r3, #31
    6bf8:	d5fa      	bpl.n	6bf0 <PkaEcdsaVerify+0x124>
    6bfa:	4b48      	ldr	r3, [pc, #288]	; (6d1c <PkaEcdsaVerify+0x250>)
    6bfc:	6023      	str	r3, [r4, #0]
    6bfe:	4b3a      	ldr	r3, [pc, #232]	; (6ce8 <PkaEcdsaVerify+0x21c>)
    6c00:	4698      	mov	r8, r3
    6c02:	6819      	ldr	r1, [r3, #0]
    6c04:	9113      	str	r1, [sp, #76]	; 0x4c
    6c06:	9913      	ldr	r1, [sp, #76]	; 0x4c
    6c08:	07c9      	lsls	r1, r1, #31
    6c0a:	d5fa      	bpl.n	6c02 <PkaEcdsaVerify+0x136>
    6c0c:	4f32      	ldr	r7, [pc, #200]	; (6cd8 <PkaEcdsaVerify+0x20c>)
    6c0e:	6038      	str	r0, [r7, #0]
    6c10:	6833      	ldr	r3, [r6, #0]
    6c12:	9314      	str	r3, [sp, #80]	; 0x50
    6c14:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6c16:	07db      	lsls	r3, r3, #31
    6c18:	d5fa      	bpl.n	6c10 <PkaEcdsaVerify+0x144>
    6c1a:	6022      	str	r2, [r4, #0]
    6c1c:	6833      	ldr	r3, [r6, #0]
    6c1e:	9315      	str	r3, [sp, #84]	; 0x54
    6c20:	9b15      	ldr	r3, [sp, #84]	; 0x54
    6c22:	07d8      	lsls	r0, r3, #31
    6c24:	d5fa      	bpl.n	6c1c <PkaEcdsaVerify+0x150>
    6c26:	4b3e      	ldr	r3, [pc, #248]	; (6d20 <PkaEcdsaVerify+0x254>)
    6c28:	6023      	str	r3, [r4, #0]
    6c2a:	6833      	ldr	r3, [r6, #0]
    6c2c:	9316      	str	r3, [sp, #88]	; 0x58
    6c2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6c30:	07d9      	lsls	r1, r3, #31
    6c32:	d5fa      	bpl.n	6c2a <PkaEcdsaVerify+0x15e>
    6c34:	4b3b      	ldr	r3, [pc, #236]	; (6d24 <PkaEcdsaVerify+0x258>)
    6c36:	6023      	str	r3, [r4, #0]
    6c38:	6833      	ldr	r3, [r6, #0]
    6c3a:	9317      	str	r3, [sp, #92]	; 0x5c
    6c3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    6c3e:	07da      	lsls	r2, r3, #31
    6c40:	d5fa      	bpl.n	6c38 <PkaEcdsaVerify+0x16c>
    6c42:	4b39      	ldr	r3, [pc, #228]	; (6d28 <PkaEcdsaVerify+0x25c>)
    6c44:	6023      	str	r3, [r4, #0]
    6c46:	6833      	ldr	r3, [r6, #0]
    6c48:	9318      	str	r3, [sp, #96]	; 0x60
    6c4a:	9b18      	ldr	r3, [sp, #96]	; 0x60
    6c4c:	07db      	lsls	r3, r3, #31
    6c4e:	d5fa      	bpl.n	6c46 <PkaEcdsaVerify+0x17a>
    6c50:	4b36      	ldr	r3, [pc, #216]	; (6d2c <PkaEcdsaVerify+0x260>)
    6c52:	6023      	str	r3, [r4, #0]
    6c54:	6833      	ldr	r3, [r6, #0]
    6c56:	9319      	str	r3, [sp, #100]	; 0x64
    6c58:	9b19      	ldr	r3, [sp, #100]	; 0x64
    6c5a:	07d8      	lsls	r0, r3, #31
    6c5c:	d5fa      	bpl.n	6c54 <PkaEcdsaVerify+0x188>
    6c5e:	4b34      	ldr	r3, [pc, #208]	; (6d30 <PkaEcdsaVerify+0x264>)
    6c60:	6023      	str	r3, [r4, #0]
    6c62:	6833      	ldr	r3, [r6, #0]
    6c64:	931a      	str	r3, [sp, #104]	; 0x68
    6c66:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    6c68:	07d9      	lsls	r1, r3, #31
    6c6a:	d5fa      	bpl.n	6c62 <PkaEcdsaVerify+0x196>
    6c6c:	4b31      	ldr	r3, [pc, #196]	; (6d34 <PkaEcdsaVerify+0x268>)
    6c6e:	6023      	str	r3, [r4, #0]
    6c70:	6833      	ldr	r3, [r6, #0]
    6c72:	931b      	str	r3, [sp, #108]	; 0x6c
    6c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    6c76:	07da      	lsls	r2, r3, #31
    6c78:	d5fa      	bpl.n	6c70 <PkaEcdsaVerify+0x1a4>
    6c7a:	4b2f      	ldr	r3, [pc, #188]	; (6d38 <PkaEcdsaVerify+0x26c>)
    6c7c:	6023      	str	r3, [r4, #0]
    6c7e:	f000 fc1d 	bl	74bc <PkaSum2ScalarMullt>
    6c82:	bb08      	cbnz	r0, 6cc8 <PkaEcdsaVerify+0x1fc>
    6c84:	f8d8 3000 	ldr.w	r3, [r8]
    6c88:	931c      	str	r3, [sp, #112]	; 0x70
    6c8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    6c8c:	07db      	lsls	r3, r3, #31
    6c8e:	d5f9      	bpl.n	6c84 <PkaEcdsaVerify+0x1b8>
    6c90:	603d      	str	r5, [r7, #0]
    6c92:	6833      	ldr	r3, [r6, #0]
    6c94:	931d      	str	r3, [sp, #116]	; 0x74
    6c96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    6c98:	07d9      	lsls	r1, r3, #31
    6c9a:	d5fa      	bpl.n	6c92 <PkaEcdsaVerify+0x1c6>
    6c9c:	4b27      	ldr	r3, [pc, #156]	; (6d3c <PkaEcdsaVerify+0x270>)
    6c9e:	6023      	str	r3, [r4, #0]
    6ca0:	6833      	ldr	r3, [r6, #0]
    6ca2:	931e      	str	r3, [sp, #120]	; 0x78
    6ca4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    6ca6:	07da      	lsls	r2, r3, #31
    6ca8:	d5fa      	bpl.n	6ca0 <PkaEcdsaVerify+0x1d4>
    6caa:	4b25      	ldr	r3, [pc, #148]	; (6d40 <PkaEcdsaVerify+0x274>)
    6cac:	6023      	str	r3, [r4, #0]
    6cae:	f8d8 3000 	ldr.w	r3, [r8]
    6cb2:	931f      	str	r3, [sp, #124]	; 0x7c
    6cb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    6cb6:	07db      	lsls	r3, r3, #31
    6cb8:	d5f9      	bpl.n	6cae <PkaEcdsaVerify+0x1e2>
    6cba:	4b0c      	ldr	r3, [pc, #48]	; (6cec <PkaEcdsaVerify+0x220>)
    6cbc:	681b      	ldr	r3, [r3, #0]
    6cbe:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    6cc2:	4b20      	ldr	r3, [pc, #128]	; (6d44 <PkaEcdsaVerify+0x278>)
    6cc4:	bf08      	it	eq
    6cc6:	4618      	moveq	r0, r3
    6cc8:	b020      	add	sp, #128	; 0x80
    6cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cce:	481e      	ldr	r0, [pc, #120]	; (6d48 <PkaEcdsaVerify+0x27c>)
    6cd0:	e7fa      	b.n	6cc8 <PkaEcdsaVerify+0x1fc>
    6cd2:	481e      	ldr	r0, [pc, #120]	; (6d4c <PkaEcdsaVerify+0x280>)
    6cd4:	e7f8      	b.n	6cc8 <PkaEcdsaVerify+0x1fc>
    6cd6:	bf00      	nop
    6cd8:	50841090 	.word	0x50841090
    6cdc:	50841080 	.word	0x50841080
    6ce0:	51021000 	.word	0x51021000
    6ce4:	29721fc0 	.word	0x29721fc0
    6ce8:	508410b4 	.word	0x508410b4
    6cec:	50841088 	.word	0x50841088
    6cf0:	2901cfc0 	.word	0x2901cfc0
    6cf4:	290e1fc0 	.word	0x290e1fc0
    6cf8:	29003fc0 	.word	0x29003fc0
    6cfc:	49020140 	.word	0x49020140
    6d00:	a8843100 	.word	0xa8843100
    6d04:	49160000 	.word	0x49160000
    6d08:	a1080140 	.word	0xa1080140
    6d0c:	88084480 	.word	0x88084480
    6d10:	508410b0 	.word	0x508410b0
    6d14:	887044c0 	.word	0x887044c0
    6d18:	417a0780 	.word	0x417a0780
    6d1c:	417e07c0 	.word	0x417e07c0
    6d20:	496a0000 	.word	0x496a0000
    6d24:	49160680 	.word	0x49160680
    6d28:	496e0040 	.word	0x496e0040
    6d2c:	21000200 	.word	0x21000200
    6d30:	21208200 	.word	0x21208200
    6d34:	21208240 	.word	0x21208240
    6d38:	21248280 	.word	0x21248280
    6d3c:	a161a140 	.word	0xa161a140
    6d40:	5161c800 	.word	0x5161c800
    6d44:	00f10803 	.word	0x00f10803
    6d48:	00f10801 	.word	0x00f10801
    6d4c:	00f10802 	.word	0x00f10802

00006d50 <nrf_cc310_bl_hash_update_internal>:
    6d50:	4b32      	ldr	r3, [pc, #200]	; (6e1c <nrf_cc310_bl_hash_update_internal+0xcc>)
    6d52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d56:	4680      	mov	r8, r0
    6d58:	4692      	mov	sl, r2
    6d5a:	4699      	mov	r9, r3
    6d5c:	6844      	ldr	r4, [r0, #4]
    6d5e:	681a      	ldr	r2, [r3, #0]
    6d60:	2a00      	cmp	r2, #0
    6d62:	d1fc      	bne.n	6d5e <nrf_cc310_bl_hash_update_internal+0xe>
    6d64:	4b2e      	ldr	r3, [pc, #184]	; (6e20 <nrf_cc310_bl_hash_update_internal+0xd0>)
    6d66:	469b      	mov	fp, r3
    6d68:	681a      	ldr	r2, [r3, #0]
    6d6a:	2a00      	cmp	r2, #0
    6d6c:	d1fc      	bne.n	6d68 <nrf_cc310_bl_hash_update_internal+0x18>
    6d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6d72:	9101      	str	r1, [sp, #4]
    6d74:	f000 fc94 	bl	76a0 <SaSi_HalClearInterruptBit>
    6d78:	2080      	movs	r0, #128	; 0x80
    6d7a:	f000 fc97 	bl	76ac <SaSi_HalMaskInterrupt>
    6d7e:	2301      	movs	r3, #1
    6d80:	2007      	movs	r0, #7
    6d82:	4a28      	ldr	r2, [pc, #160]	; (6e24 <nrf_cc310_bl_hash_update_internal+0xd4>)
    6d84:	4d28      	ldr	r5, [pc, #160]	; (6e28 <nrf_cc310_bl_hash_update_internal+0xd8>)
    6d86:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
    6d8a:	602b      	str	r3, [r5, #0]
    6d8c:	f8c2 013c 	str.w	r0, [r2, #316]	; 0x13c
    6d90:	6013      	str	r3, [r2, #0]
    6d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6d94:	4f25      	ldr	r7, [pc, #148]	; (6e2c <nrf_cc310_bl_hash_update_internal+0xdc>)
    6d96:	4e26      	ldr	r6, [pc, #152]	; (6e30 <nrf_cc310_bl_hash_update_internal+0xe0>)
    6d98:	603b      	str	r3, [r7, #0]
    6d9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6d9c:	4620      	mov	r0, r4
    6d9e:	6033      	str	r3, [r6, #0]
    6da0:	f8d8 3000 	ldr.w	r3, [r8]
    6da4:	f842 3c04 	str.w	r3, [r2, #-4]
    6da8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6dac:	4798      	blx	r3
    6dae:	9901      	ldr	r1, [sp, #4]
    6db0:	f8d9 3000 	ldr.w	r3, [r9]
    6db4:	2b00      	cmp	r3, #0
    6db6:	d1fb      	bne.n	6db0 <nrf_cc310_bl_hash_update_internal+0x60>
    6db8:	f1ba 0f00 	cmp.w	sl, #0
    6dbc:	d120      	bne.n	6e00 <nrf_cc310_bl_hash_update_internal+0xb0>
    6dbe:	2204      	movs	r2, #4
    6dc0:	4b1c      	ldr	r3, [pc, #112]	; (6e34 <nrf_cc310_bl_hash_update_internal+0xe4>)
    6dc2:	601a      	str	r2, [r3, #0]
    6dc4:	f8d9 3000 	ldr.w	r3, [r9]
    6dc8:	2b00      	cmp	r3, #0
    6dca:	d1fb      	bne.n	6dc4 <nrf_cc310_bl_hash_update_internal+0x74>
    6dcc:	f8db a000 	ldr.w	sl, [fp]
    6dd0:	f1ba 0f00 	cmp.w	sl, #0
    6dd4:	d1fa      	bne.n	6dcc <nrf_cc310_bl_hash_update_internal+0x7c>
    6dd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6dda:	4620      	mov	r0, r4
    6ddc:	4798      	blx	r3
    6dde:	683b      	ldr	r3, [r7, #0]
    6de0:	6263      	str	r3, [r4, #36]	; 0x24
    6de2:	6833      	ldr	r3, [r6, #0]
    6de4:	62a3      	str	r3, [r4, #40]	; 0x28
    6de6:	4b14      	ldr	r3, [pc, #80]	; (6e38 <nrf_cc310_bl_hash_update_internal+0xe8>)
    6de8:	f8c3 a000 	str.w	sl, [r3]
    6dec:	f8c3 a144 	str.w	sl, [r3, #324]	; 0x144
    6df0:	f8d9 3000 	ldr.w	r3, [r9]
    6df4:	2b00      	cmp	r3, #0
    6df6:	d1fb      	bne.n	6df0 <nrf_cc310_bl_hash_update_internal+0xa0>
    6df8:	602b      	str	r3, [r5, #0]
    6dfa:	b003      	add	sp, #12
    6dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e00:	6a23      	ldr	r3, [r4, #32]
    6e02:	2040      	movs	r0, #64	; 0x40
    6e04:	2b01      	cmp	r3, #1
    6e06:	bf04      	itt	eq
    6e08:	4a0b      	ldreq	r2, [pc, #44]	; (6e38 <nrf_cc310_bl_hash_update_internal+0xe8>)
    6e0a:	6013      	streq	r3, [r2, #0]
    6e0c:	4b0b      	ldr	r3, [pc, #44]	; (6e3c <nrf_cc310_bl_hash_update_internal+0xec>)
    6e0e:	6019      	str	r1, [r3, #0]
    6e10:	f8c3 a004 	str.w	sl, [r3, #4]
    6e14:	f000 fc50 	bl	76b8 <SaSi_HalWaitInterrupt>
    6e18:	e7d4      	b.n	6dc4 <nrf_cc310_bl_hash_update_internal+0x74>
    6e1a:	bf00      	nop
    6e1c:	50841910 	.word	0x50841910
    6e20:	50841c20 	.word	0x50841c20
    6e24:	50841900 	.word	0x50841900
    6e28:	50841818 	.word	0x50841818
    6e2c:	508417cc 	.word	0x508417cc
    6e30:	508417d0 	.word	0x508417d0
    6e34:	508417c8 	.word	0x508417c8
    6e38:	50841684 	.word	0x50841684
    6e3c:	50841c28 	.word	0x50841c28

00006e40 <PkaDoubleMdf2Mdf>:
    6e40:	4b54      	ldr	r3, [pc, #336]	; (6f94 <PkaDoubleMdf2Mdf+0x154>)
    6e42:	b510      	push	{r4, lr}
    6e44:	4619      	mov	r1, r3
    6e46:	b098      	sub	sp, #96	; 0x60
    6e48:	681a      	ldr	r2, [r3, #0]
    6e4a:	9201      	str	r2, [sp, #4]
    6e4c:	9a01      	ldr	r2, [sp, #4]
    6e4e:	07d2      	lsls	r2, r2, #31
    6e50:	d5fa      	bpl.n	6e48 <PkaDoubleMdf2Mdf+0x8>
    6e52:	4b51      	ldr	r3, [pc, #324]	; (6f98 <PkaDoubleMdf2Mdf+0x158>)
    6e54:	4a51      	ldr	r2, [pc, #324]	; (6f9c <PkaDoubleMdf2Mdf+0x15c>)
    6e56:	601a      	str	r2, [r3, #0]
    6e58:	680a      	ldr	r2, [r1, #0]
    6e5a:	9202      	str	r2, [sp, #8]
    6e5c:	9a02      	ldr	r2, [sp, #8]
    6e5e:	07d4      	lsls	r4, r2, #31
    6e60:	d5fa      	bpl.n	6e58 <PkaDoubleMdf2Mdf+0x18>
    6e62:	4a4f      	ldr	r2, [pc, #316]	; (6fa0 <PkaDoubleMdf2Mdf+0x160>)
    6e64:	601a      	str	r2, [r3, #0]
    6e66:	680a      	ldr	r2, [r1, #0]
    6e68:	9203      	str	r2, [sp, #12]
    6e6a:	9a03      	ldr	r2, [sp, #12]
    6e6c:	07d0      	lsls	r0, r2, #31
    6e6e:	d5fa      	bpl.n	6e66 <PkaDoubleMdf2Mdf+0x26>
    6e70:	484c      	ldr	r0, [pc, #304]	; (6fa4 <PkaDoubleMdf2Mdf+0x164>)
    6e72:	6018      	str	r0, [r3, #0]
    6e74:	680a      	ldr	r2, [r1, #0]
    6e76:	9204      	str	r2, [sp, #16]
    6e78:	9a04      	ldr	r2, [sp, #16]
    6e7a:	07d2      	lsls	r2, r2, #31
    6e7c:	d5fa      	bpl.n	6e74 <PkaDoubleMdf2Mdf+0x34>
    6e7e:	4a4a      	ldr	r2, [pc, #296]	; (6fa8 <PkaDoubleMdf2Mdf+0x168>)
    6e80:	601a      	str	r2, [r3, #0]
    6e82:	680a      	ldr	r2, [r1, #0]
    6e84:	9205      	str	r2, [sp, #20]
    6e86:	9a05      	ldr	r2, [sp, #20]
    6e88:	07d4      	lsls	r4, r2, #31
    6e8a:	d5fa      	bpl.n	6e82 <PkaDoubleMdf2Mdf+0x42>
    6e8c:	4a47      	ldr	r2, [pc, #284]	; (6fac <PkaDoubleMdf2Mdf+0x16c>)
    6e8e:	601a      	str	r2, [r3, #0]
    6e90:	680a      	ldr	r2, [r1, #0]
    6e92:	9206      	str	r2, [sp, #24]
    6e94:	9a06      	ldr	r2, [sp, #24]
    6e96:	07d2      	lsls	r2, r2, #31
    6e98:	d5fa      	bpl.n	6e90 <PkaDoubleMdf2Mdf+0x50>
    6e9a:	4a45      	ldr	r2, [pc, #276]	; (6fb0 <PkaDoubleMdf2Mdf+0x170>)
    6e9c:	601a      	str	r2, [r3, #0]
    6e9e:	680a      	ldr	r2, [r1, #0]
    6ea0:	9207      	str	r2, [sp, #28]
    6ea2:	9a07      	ldr	r2, [sp, #28]
    6ea4:	07d4      	lsls	r4, r2, #31
    6ea6:	d5fa      	bpl.n	6e9e <PkaDoubleMdf2Mdf+0x5e>
    6ea8:	4a42      	ldr	r2, [pc, #264]	; (6fb4 <PkaDoubleMdf2Mdf+0x174>)
    6eaa:	601a      	str	r2, [r3, #0]
    6eac:	680a      	ldr	r2, [r1, #0]
    6eae:	9208      	str	r2, [sp, #32]
    6eb0:	9a08      	ldr	r2, [sp, #32]
    6eb2:	07d2      	lsls	r2, r2, #31
    6eb4:	d5fa      	bpl.n	6eac <PkaDoubleMdf2Mdf+0x6c>
    6eb6:	4a40      	ldr	r2, [pc, #256]	; (6fb8 <PkaDoubleMdf2Mdf+0x178>)
    6eb8:	601a      	str	r2, [r3, #0]
    6eba:	680a      	ldr	r2, [r1, #0]
    6ebc:	9209      	str	r2, [sp, #36]	; 0x24
    6ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6ec0:	07d4      	lsls	r4, r2, #31
    6ec2:	d5fa      	bpl.n	6eba <PkaDoubleMdf2Mdf+0x7a>
    6ec4:	4a3d      	ldr	r2, [pc, #244]	; (6fbc <PkaDoubleMdf2Mdf+0x17c>)
    6ec6:	601a      	str	r2, [r3, #0]
    6ec8:	680a      	ldr	r2, [r1, #0]
    6eca:	920a      	str	r2, [sp, #40]	; 0x28
    6ecc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6ece:	07d2      	lsls	r2, r2, #31
    6ed0:	d5fa      	bpl.n	6ec8 <PkaDoubleMdf2Mdf+0x88>
    6ed2:	4a3b      	ldr	r2, [pc, #236]	; (6fc0 <PkaDoubleMdf2Mdf+0x180>)
    6ed4:	601a      	str	r2, [r3, #0]
    6ed6:	680a      	ldr	r2, [r1, #0]
    6ed8:	920b      	str	r2, [sp, #44]	; 0x2c
    6eda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6edc:	07d4      	lsls	r4, r2, #31
    6ede:	d5fa      	bpl.n	6ed6 <PkaDoubleMdf2Mdf+0x96>
    6ee0:	4a38      	ldr	r2, [pc, #224]	; (6fc4 <PkaDoubleMdf2Mdf+0x184>)
    6ee2:	601a      	str	r2, [r3, #0]
    6ee4:	680a      	ldr	r2, [r1, #0]
    6ee6:	920c      	str	r2, [sp, #48]	; 0x30
    6ee8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    6eea:	07d2      	lsls	r2, r2, #31
    6eec:	d5fa      	bpl.n	6ee4 <PkaDoubleMdf2Mdf+0xa4>
    6eee:	4a36      	ldr	r2, [pc, #216]	; (6fc8 <PkaDoubleMdf2Mdf+0x188>)
    6ef0:	601a      	str	r2, [r3, #0]
    6ef2:	680a      	ldr	r2, [r1, #0]
    6ef4:	920d      	str	r2, [sp, #52]	; 0x34
    6ef6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    6ef8:	07d4      	lsls	r4, r2, #31
    6efa:	d5fa      	bpl.n	6ef2 <PkaDoubleMdf2Mdf+0xb2>
    6efc:	4a33      	ldr	r2, [pc, #204]	; (6fcc <PkaDoubleMdf2Mdf+0x18c>)
    6efe:	601a      	str	r2, [r3, #0]
    6f00:	680a      	ldr	r2, [r1, #0]
    6f02:	920e      	str	r2, [sp, #56]	; 0x38
    6f04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    6f06:	07d2      	lsls	r2, r2, #31
    6f08:	d5fa      	bpl.n	6f00 <PkaDoubleMdf2Mdf+0xc0>
    6f0a:	4a31      	ldr	r2, [pc, #196]	; (6fd0 <PkaDoubleMdf2Mdf+0x190>)
    6f0c:	601a      	str	r2, [r3, #0]
    6f0e:	680a      	ldr	r2, [r1, #0]
    6f10:	920f      	str	r2, [sp, #60]	; 0x3c
    6f12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    6f14:	07d4      	lsls	r4, r2, #31
    6f16:	d5fa      	bpl.n	6f0e <PkaDoubleMdf2Mdf+0xce>
    6f18:	4a2e      	ldr	r2, [pc, #184]	; (6fd4 <PkaDoubleMdf2Mdf+0x194>)
    6f1a:	601a      	str	r2, [r3, #0]
    6f1c:	680a      	ldr	r2, [r1, #0]
    6f1e:	9210      	str	r2, [sp, #64]	; 0x40
    6f20:	9a10      	ldr	r2, [sp, #64]	; 0x40
    6f22:	07d2      	lsls	r2, r2, #31
    6f24:	d5fa      	bpl.n	6f1c <PkaDoubleMdf2Mdf+0xdc>
    6f26:	4a2c      	ldr	r2, [pc, #176]	; (6fd8 <PkaDoubleMdf2Mdf+0x198>)
    6f28:	601a      	str	r2, [r3, #0]
    6f2a:	4b1a      	ldr	r3, [pc, #104]	; (6f94 <PkaDoubleMdf2Mdf+0x154>)
    6f2c:	4619      	mov	r1, r3
    6f2e:	681c      	ldr	r4, [r3, #0]
    6f30:	9411      	str	r4, [sp, #68]	; 0x44
    6f32:	9c11      	ldr	r4, [sp, #68]	; 0x44
    6f34:	07e4      	lsls	r4, r4, #31
    6f36:	d5fa      	bpl.n	6f2e <PkaDoubleMdf2Mdf+0xee>
    6f38:	4b17      	ldr	r3, [pc, #92]	; (6f98 <PkaDoubleMdf2Mdf+0x158>)
    6f3a:	6018      	str	r0, [r3, #0]
    6f3c:	6808      	ldr	r0, [r1, #0]
    6f3e:	9012      	str	r0, [sp, #72]	; 0x48
    6f40:	9812      	ldr	r0, [sp, #72]	; 0x48
    6f42:	07c4      	lsls	r4, r0, #31
    6f44:	d5fa      	bpl.n	6f3c <PkaDoubleMdf2Mdf+0xfc>
    6f46:	601a      	str	r2, [r3, #0]
    6f48:	680a      	ldr	r2, [r1, #0]
    6f4a:	9213      	str	r2, [sp, #76]	; 0x4c
    6f4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    6f4e:	07d0      	lsls	r0, r2, #31
    6f50:	d5fa      	bpl.n	6f48 <PkaDoubleMdf2Mdf+0x108>
    6f52:	4a12      	ldr	r2, [pc, #72]	; (6f9c <PkaDoubleMdf2Mdf+0x15c>)
    6f54:	601a      	str	r2, [r3, #0]
    6f56:	680a      	ldr	r2, [r1, #0]
    6f58:	9214      	str	r2, [sp, #80]	; 0x50
    6f5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    6f5c:	07d2      	lsls	r2, r2, #31
    6f5e:	d5fa      	bpl.n	6f56 <PkaDoubleMdf2Mdf+0x116>
    6f60:	4a1e      	ldr	r2, [pc, #120]	; (6fdc <PkaDoubleMdf2Mdf+0x19c>)
    6f62:	601a      	str	r2, [r3, #0]
    6f64:	680a      	ldr	r2, [r1, #0]
    6f66:	9215      	str	r2, [sp, #84]	; 0x54
    6f68:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6f6a:	07d4      	lsls	r4, r2, #31
    6f6c:	d5fa      	bpl.n	6f64 <PkaDoubleMdf2Mdf+0x124>
    6f6e:	4a1c      	ldr	r2, [pc, #112]	; (6fe0 <PkaDoubleMdf2Mdf+0x1a0>)
    6f70:	601a      	str	r2, [r3, #0]
    6f72:	680a      	ldr	r2, [r1, #0]
    6f74:	9216      	str	r2, [sp, #88]	; 0x58
    6f76:	9a16      	ldr	r2, [sp, #88]	; 0x58
    6f78:	07d0      	lsls	r0, r2, #31
    6f7a:	d5fa      	bpl.n	6f72 <PkaDoubleMdf2Mdf+0x132>
    6f7c:	4a19      	ldr	r2, [pc, #100]	; (6fe4 <PkaDoubleMdf2Mdf+0x1a4>)
    6f7e:	601a      	str	r2, [r3, #0]
    6f80:	680a      	ldr	r2, [r1, #0]
    6f82:	9217      	str	r2, [sp, #92]	; 0x5c
    6f84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    6f86:	07d2      	lsls	r2, r2, #31
    6f88:	d5fa      	bpl.n	6f80 <PkaDoubleMdf2Mdf+0x140>
    6f8a:	4a17      	ldr	r2, [pc, #92]	; (6fe8 <PkaDoubleMdf2Mdf+0x1a8>)
    6f8c:	601a      	str	r2, [r3, #0]
    6f8e:	b018      	add	sp, #96	; 0x60
    6f90:	bd10      	pop	{r4, pc}
    6f92:	bf00      	nop
    6f94:	508410b0 	.word	0x508410b0
    6f98:	50841080 	.word	0x50841080
    6f9c:	21659300 	.word	0x21659300
    6fa0:	90310400 	.word	0x90310400
    6fa4:	90659640 	.word	0x90659640
    6fa8:	21618300 	.word	0x21618300
    6fac:	2130c300 	.word	0x2130c300
    6fb0:	9064c300 	.word	0x9064c300
    6fb4:	90618100 	.word	0x90618100
    6fb8:	21104600 	.word	0x21104600
    6fbc:	21118100 	.word	0x21118100
    6fc0:	21444100 	.word	0x21444100
    6fc4:	2920c300 	.word	0x2920c300
    6fc8:	c810460c 	.word	0xc810460c
    6fcc:	21318600 	.word	0x21318600
    6fd0:	2160c300 	.word	0x2160c300
    6fd4:	2928c140 	.word	0x2928c140
    6fd8:	21659640 	.word	0x21659640
    6fdc:	90311300 	.word	0x90311300
    6fe0:	29259640 	.word	0x29259640
    6fe4:	c8144659 	.word	0xc8144659
    6fe8:	49320440 	.word	0x49320440

00006fec <PkaDoubleMdf2Jcb>:
    6fec:	4b49      	ldr	r3, [pc, #292]	; (7114 <PkaDoubleMdf2Jcb+0x128>)
    6fee:	b510      	push	{r4, lr}
    6ff0:	4619      	mov	r1, r3
    6ff2:	b094      	sub	sp, #80	; 0x50
    6ff4:	681a      	ldr	r2, [r3, #0]
    6ff6:	9200      	str	r2, [sp, #0]
    6ff8:	9a00      	ldr	r2, [sp, #0]
    6ffa:	07d2      	lsls	r2, r2, #31
    6ffc:	d5fa      	bpl.n	6ff4 <PkaDoubleMdf2Jcb+0x8>
    6ffe:	4b46      	ldr	r3, [pc, #280]	; (7118 <PkaDoubleMdf2Jcb+0x12c>)
    7000:	4a46      	ldr	r2, [pc, #280]	; (711c <PkaDoubleMdf2Jcb+0x130>)
    7002:	601a      	str	r2, [r3, #0]
    7004:	680a      	ldr	r2, [r1, #0]
    7006:	9201      	str	r2, [sp, #4]
    7008:	9a01      	ldr	r2, [sp, #4]
    700a:	07d4      	lsls	r4, r2, #31
    700c:	d5fa      	bpl.n	7004 <PkaDoubleMdf2Jcb+0x18>
    700e:	4a44      	ldr	r2, [pc, #272]	; (7120 <PkaDoubleMdf2Jcb+0x134>)
    7010:	601a      	str	r2, [r3, #0]
    7012:	680a      	ldr	r2, [r1, #0]
    7014:	9202      	str	r2, [sp, #8]
    7016:	9a02      	ldr	r2, [sp, #8]
    7018:	07d0      	lsls	r0, r2, #31
    701a:	d5fa      	bpl.n	7012 <PkaDoubleMdf2Jcb+0x26>
    701c:	4841      	ldr	r0, [pc, #260]	; (7124 <PkaDoubleMdf2Jcb+0x138>)
    701e:	6018      	str	r0, [r3, #0]
    7020:	680a      	ldr	r2, [r1, #0]
    7022:	9203      	str	r2, [sp, #12]
    7024:	9a03      	ldr	r2, [sp, #12]
    7026:	07d2      	lsls	r2, r2, #31
    7028:	d5fa      	bpl.n	7020 <PkaDoubleMdf2Jcb+0x34>
    702a:	4a3f      	ldr	r2, [pc, #252]	; (7128 <PkaDoubleMdf2Jcb+0x13c>)
    702c:	601a      	str	r2, [r3, #0]
    702e:	680a      	ldr	r2, [r1, #0]
    7030:	9204      	str	r2, [sp, #16]
    7032:	9a04      	ldr	r2, [sp, #16]
    7034:	07d4      	lsls	r4, r2, #31
    7036:	d5fa      	bpl.n	702e <PkaDoubleMdf2Jcb+0x42>
    7038:	4a3c      	ldr	r2, [pc, #240]	; (712c <PkaDoubleMdf2Jcb+0x140>)
    703a:	601a      	str	r2, [r3, #0]
    703c:	680a      	ldr	r2, [r1, #0]
    703e:	9205      	str	r2, [sp, #20]
    7040:	9a05      	ldr	r2, [sp, #20]
    7042:	07d2      	lsls	r2, r2, #31
    7044:	d5fa      	bpl.n	703c <PkaDoubleMdf2Jcb+0x50>
    7046:	4a3a      	ldr	r2, [pc, #232]	; (7130 <PkaDoubleMdf2Jcb+0x144>)
    7048:	601a      	str	r2, [r3, #0]
    704a:	680a      	ldr	r2, [r1, #0]
    704c:	9206      	str	r2, [sp, #24]
    704e:	9a06      	ldr	r2, [sp, #24]
    7050:	07d4      	lsls	r4, r2, #31
    7052:	d5fa      	bpl.n	704a <PkaDoubleMdf2Jcb+0x5e>
    7054:	4a37      	ldr	r2, [pc, #220]	; (7134 <PkaDoubleMdf2Jcb+0x148>)
    7056:	601a      	str	r2, [r3, #0]
    7058:	680a      	ldr	r2, [r1, #0]
    705a:	9207      	str	r2, [sp, #28]
    705c:	9a07      	ldr	r2, [sp, #28]
    705e:	07d2      	lsls	r2, r2, #31
    7060:	d5fa      	bpl.n	7058 <PkaDoubleMdf2Jcb+0x6c>
    7062:	4a35      	ldr	r2, [pc, #212]	; (7138 <PkaDoubleMdf2Jcb+0x14c>)
    7064:	601a      	str	r2, [r3, #0]
    7066:	680a      	ldr	r2, [r1, #0]
    7068:	9208      	str	r2, [sp, #32]
    706a:	9a08      	ldr	r2, [sp, #32]
    706c:	07d4      	lsls	r4, r2, #31
    706e:	d5fa      	bpl.n	7066 <PkaDoubleMdf2Jcb+0x7a>
    7070:	4a32      	ldr	r2, [pc, #200]	; (713c <PkaDoubleMdf2Jcb+0x150>)
    7072:	601a      	str	r2, [r3, #0]
    7074:	680a      	ldr	r2, [r1, #0]
    7076:	9209      	str	r2, [sp, #36]	; 0x24
    7078:	9a09      	ldr	r2, [sp, #36]	; 0x24
    707a:	07d2      	lsls	r2, r2, #31
    707c:	d5fa      	bpl.n	7074 <PkaDoubleMdf2Jcb+0x88>
    707e:	4a30      	ldr	r2, [pc, #192]	; (7140 <PkaDoubleMdf2Jcb+0x154>)
    7080:	601a      	str	r2, [r3, #0]
    7082:	680a      	ldr	r2, [r1, #0]
    7084:	920a      	str	r2, [sp, #40]	; 0x28
    7086:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7088:	07d4      	lsls	r4, r2, #31
    708a:	d5fa      	bpl.n	7082 <PkaDoubleMdf2Jcb+0x96>
    708c:	4a2d      	ldr	r2, [pc, #180]	; (7144 <PkaDoubleMdf2Jcb+0x158>)
    708e:	601a      	str	r2, [r3, #0]
    7090:	680a      	ldr	r2, [r1, #0]
    7092:	920b      	str	r2, [sp, #44]	; 0x2c
    7094:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7096:	07d2      	lsls	r2, r2, #31
    7098:	d5fa      	bpl.n	7090 <PkaDoubleMdf2Jcb+0xa4>
    709a:	4a2b      	ldr	r2, [pc, #172]	; (7148 <PkaDoubleMdf2Jcb+0x15c>)
    709c:	601a      	str	r2, [r3, #0]
    709e:	680a      	ldr	r2, [r1, #0]
    70a0:	920c      	str	r2, [sp, #48]	; 0x30
    70a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    70a4:	07d4      	lsls	r4, r2, #31
    70a6:	d5fa      	bpl.n	709e <PkaDoubleMdf2Jcb+0xb2>
    70a8:	4a28      	ldr	r2, [pc, #160]	; (714c <PkaDoubleMdf2Jcb+0x160>)
    70aa:	601a      	str	r2, [r3, #0]
    70ac:	680a      	ldr	r2, [r1, #0]
    70ae:	920d      	str	r2, [sp, #52]	; 0x34
    70b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    70b2:	07d2      	lsls	r2, r2, #31
    70b4:	d5fa      	bpl.n	70ac <PkaDoubleMdf2Jcb+0xc0>
    70b6:	4a26      	ldr	r2, [pc, #152]	; (7150 <PkaDoubleMdf2Jcb+0x164>)
    70b8:	601a      	str	r2, [r3, #0]
    70ba:	680a      	ldr	r2, [r1, #0]
    70bc:	920e      	str	r2, [sp, #56]	; 0x38
    70be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    70c0:	07d4      	lsls	r4, r2, #31
    70c2:	d5fa      	bpl.n	70ba <PkaDoubleMdf2Jcb+0xce>
    70c4:	4a23      	ldr	r2, [pc, #140]	; (7154 <PkaDoubleMdf2Jcb+0x168>)
    70c6:	601a      	str	r2, [r3, #0]
    70c8:	680a      	ldr	r2, [r1, #0]
    70ca:	920f      	str	r2, [sp, #60]	; 0x3c
    70cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    70ce:	07d2      	lsls	r2, r2, #31
    70d0:	d5fa      	bpl.n	70c8 <PkaDoubleMdf2Jcb+0xdc>
    70d2:	4a21      	ldr	r2, [pc, #132]	; (7158 <PkaDoubleMdf2Jcb+0x16c>)
    70d4:	601a      	str	r2, [r3, #0]
    70d6:	4b0f      	ldr	r3, [pc, #60]	; (7114 <PkaDoubleMdf2Jcb+0x128>)
    70d8:	4619      	mov	r1, r3
    70da:	681c      	ldr	r4, [r3, #0]
    70dc:	9410      	str	r4, [sp, #64]	; 0x40
    70de:	9c10      	ldr	r4, [sp, #64]	; 0x40
    70e0:	07e4      	lsls	r4, r4, #31
    70e2:	d5fa      	bpl.n	70da <PkaDoubleMdf2Jcb+0xee>
    70e4:	4b0c      	ldr	r3, [pc, #48]	; (7118 <PkaDoubleMdf2Jcb+0x12c>)
    70e6:	6018      	str	r0, [r3, #0]
    70e8:	6808      	ldr	r0, [r1, #0]
    70ea:	9011      	str	r0, [sp, #68]	; 0x44
    70ec:	9811      	ldr	r0, [sp, #68]	; 0x44
    70ee:	07c4      	lsls	r4, r0, #31
    70f0:	d5fa      	bpl.n	70e8 <PkaDoubleMdf2Jcb+0xfc>
    70f2:	601a      	str	r2, [r3, #0]
    70f4:	680a      	ldr	r2, [r1, #0]
    70f6:	9212      	str	r2, [sp, #72]	; 0x48
    70f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    70fa:	07d0      	lsls	r0, r2, #31
    70fc:	d5fa      	bpl.n	70f4 <PkaDoubleMdf2Jcb+0x108>
    70fe:	4a17      	ldr	r2, [pc, #92]	; (715c <PkaDoubleMdf2Jcb+0x170>)
    7100:	601a      	str	r2, [r3, #0]
    7102:	680a      	ldr	r2, [r1, #0]
    7104:	9213      	str	r2, [sp, #76]	; 0x4c
    7106:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7108:	07d2      	lsls	r2, r2, #31
    710a:	d5fa      	bpl.n	7102 <PkaDoubleMdf2Jcb+0x116>
    710c:	4a14      	ldr	r2, [pc, #80]	; (7160 <PkaDoubleMdf2Jcb+0x174>)
    710e:	601a      	str	r2, [r3, #0]
    7110:	b014      	add	sp, #80	; 0x50
    7112:	bd10      	pop	{r4, pc}
    7114:	508410b0 	.word	0x508410b0
    7118:	50841080 	.word	0x50841080
    711c:	21659080 	.word	0x21659080
    7120:	90090400 	.word	0x90090400
    7124:	90659640 	.word	0x90659640
    7128:	21618080 	.word	0x21618080
    712c:	21082080 	.word	0x21082080
    7130:	90642080 	.word	0x90642080
    7134:	90618100 	.word	0x90618100
    7138:	21104600 	.word	0x21104600
    713c:	21118100 	.word	0x21118100
    7140:	21444100 	.word	0x21444100
    7144:	29202080 	.word	0x29202080
    7148:	c8104602 	.word	0xc8104602
    714c:	21098600 	.word	0x21098600
    7150:	21602080 	.word	0x21602080
    7154:	29282140 	.word	0x29282140
    7158:	21659640 	.word	0x21659640
    715c:	29259640 	.word	0x29259640
    7160:	c8144659 	.word	0xc8144659

00007164 <PkaAddJcbAfn2Mdf>:
    7164:	4b50      	ldr	r3, [pc, #320]	; (72a8 <PkaAddJcbAfn2Mdf+0x144>)
    7166:	b510      	push	{r4, lr}
    7168:	461c      	mov	r4, r3
    716a:	b096      	sub	sp, #88	; 0x58
    716c:	681a      	ldr	r2, [r3, #0]
    716e:	9201      	str	r2, [sp, #4]
    7170:	9a01      	ldr	r2, [sp, #4]
    7172:	07d2      	lsls	r2, r2, #31
    7174:	d5fa      	bpl.n	716c <PkaAddJcbAfn2Mdf+0x8>
    7176:	4b4d      	ldr	r3, [pc, #308]	; (72ac <PkaAddJcbAfn2Mdf+0x148>)
    7178:	4a4d      	ldr	r2, [pc, #308]	; (72b0 <PkaAddJcbAfn2Mdf+0x14c>)
    717a:	601a      	str	r2, [r3, #0]
    717c:	6822      	ldr	r2, [r4, #0]
    717e:	9202      	str	r2, [sp, #8]
    7180:	9a02      	ldr	r2, [sp, #8]
    7182:	07d2      	lsls	r2, r2, #31
    7184:	d5fa      	bpl.n	717c <PkaAddJcbAfn2Mdf+0x18>
    7186:	4a4b      	ldr	r2, [pc, #300]	; (72b4 <PkaAddJcbAfn2Mdf+0x150>)
    7188:	601a      	str	r2, [r3, #0]
    718a:	4a4b      	ldr	r2, [pc, #300]	; (72b8 <PkaAddJcbAfn2Mdf+0x154>)
    718c:	ea42 4080 	orr.w	r0, r2, r0, lsl #18
    7190:	6822      	ldr	r2, [r4, #0]
    7192:	9203      	str	r2, [sp, #12]
    7194:	9a03      	ldr	r2, [sp, #12]
    7196:	07d2      	lsls	r2, r2, #31
    7198:	d5fa      	bpl.n	7190 <PkaAddJcbAfn2Mdf+0x2c>
    719a:	6018      	str	r0, [r3, #0]
    719c:	6822      	ldr	r2, [r4, #0]
    719e:	9204      	str	r2, [sp, #16]
    71a0:	9a04      	ldr	r2, [sp, #16]
    71a2:	07d0      	lsls	r0, r2, #31
    71a4:	d5fa      	bpl.n	719c <PkaAddJcbAfn2Mdf+0x38>
    71a6:	4a45      	ldr	r2, [pc, #276]	; (72bc <PkaAddJcbAfn2Mdf+0x158>)
    71a8:	601a      	str	r2, [r3, #0]
    71aa:	f5a2 0280 	sub.w	r2, r2, #4194304	; 0x400000
    71ae:	ea42 4181 	orr.w	r1, r2, r1, lsl #18
    71b2:	6822      	ldr	r2, [r4, #0]
    71b4:	9205      	str	r2, [sp, #20]
    71b6:	9a05      	ldr	r2, [sp, #20]
    71b8:	07d2      	lsls	r2, r2, #31
    71ba:	d5fa      	bpl.n	71b2 <PkaAddJcbAfn2Mdf+0x4e>
    71bc:	6019      	str	r1, [r3, #0]
    71be:	6822      	ldr	r2, [r4, #0]
    71c0:	9206      	str	r2, [sp, #24]
    71c2:	9a06      	ldr	r2, [sp, #24]
    71c4:	07d0      	lsls	r0, r2, #31
    71c6:	d5fa      	bpl.n	71be <PkaAddJcbAfn2Mdf+0x5a>
    71c8:	4a3d      	ldr	r2, [pc, #244]	; (72c0 <PkaAddJcbAfn2Mdf+0x15c>)
    71ca:	601a      	str	r2, [r3, #0]
    71cc:	6822      	ldr	r2, [r4, #0]
    71ce:	9207      	str	r2, [sp, #28]
    71d0:	9a07      	ldr	r2, [sp, #28]
    71d2:	07d1      	lsls	r1, r2, #31
    71d4:	d5fa      	bpl.n	71cc <PkaAddJcbAfn2Mdf+0x68>
    71d6:	4a3b      	ldr	r2, [pc, #236]	; (72c4 <PkaAddJcbAfn2Mdf+0x160>)
    71d8:	601a      	str	r2, [r3, #0]
    71da:	6822      	ldr	r2, [r4, #0]
    71dc:	9208      	str	r2, [sp, #32]
    71de:	9a08      	ldr	r2, [sp, #32]
    71e0:	07d2      	lsls	r2, r2, #31
    71e2:	d5fa      	bpl.n	71da <PkaAddJcbAfn2Mdf+0x76>
    71e4:	4a38      	ldr	r2, [pc, #224]	; (72c8 <PkaAddJcbAfn2Mdf+0x164>)
    71e6:	601a      	str	r2, [r3, #0]
    71e8:	6822      	ldr	r2, [r4, #0]
    71ea:	9209      	str	r2, [sp, #36]	; 0x24
    71ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    71ee:	07d0      	lsls	r0, r2, #31
    71f0:	d5fa      	bpl.n	71e8 <PkaAddJcbAfn2Mdf+0x84>
    71f2:	4a36      	ldr	r2, [pc, #216]	; (72cc <PkaAddJcbAfn2Mdf+0x168>)
    71f4:	601a      	str	r2, [r3, #0]
    71f6:	6822      	ldr	r2, [r4, #0]
    71f8:	920a      	str	r2, [sp, #40]	; 0x28
    71fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    71fc:	07d1      	lsls	r1, r2, #31
    71fe:	d5fa      	bpl.n	71f6 <PkaAddJcbAfn2Mdf+0x92>
    7200:	4a33      	ldr	r2, [pc, #204]	; (72d0 <PkaAddJcbAfn2Mdf+0x16c>)
    7202:	601a      	str	r2, [r3, #0]
    7204:	6822      	ldr	r2, [r4, #0]
    7206:	920b      	str	r2, [sp, #44]	; 0x2c
    7208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    720a:	07d2      	lsls	r2, r2, #31
    720c:	d5fa      	bpl.n	7204 <PkaAddJcbAfn2Mdf+0xa0>
    720e:	4a31      	ldr	r2, [pc, #196]	; (72d4 <PkaAddJcbAfn2Mdf+0x170>)
    7210:	601a      	str	r2, [r3, #0]
    7212:	6822      	ldr	r2, [r4, #0]
    7214:	920c      	str	r2, [sp, #48]	; 0x30
    7216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    7218:	07d0      	lsls	r0, r2, #31
    721a:	d5fa      	bpl.n	7212 <PkaAddJcbAfn2Mdf+0xae>
    721c:	4a2e      	ldr	r2, [pc, #184]	; (72d8 <PkaAddJcbAfn2Mdf+0x174>)
    721e:	601a      	str	r2, [r3, #0]
    7220:	6822      	ldr	r2, [r4, #0]
    7222:	920d      	str	r2, [sp, #52]	; 0x34
    7224:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    7226:	07d1      	lsls	r1, r2, #31
    7228:	d5fa      	bpl.n	7220 <PkaAddJcbAfn2Mdf+0xbc>
    722a:	4a2c      	ldr	r2, [pc, #176]	; (72dc <PkaAddJcbAfn2Mdf+0x178>)
    722c:	601a      	str	r2, [r3, #0]
    722e:	6822      	ldr	r2, [r4, #0]
    7230:	920e      	str	r2, [sp, #56]	; 0x38
    7232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7234:	07d2      	lsls	r2, r2, #31
    7236:	d5fa      	bpl.n	722e <PkaAddJcbAfn2Mdf+0xca>
    7238:	4a29      	ldr	r2, [pc, #164]	; (72e0 <PkaAddJcbAfn2Mdf+0x17c>)
    723a:	601a      	str	r2, [r3, #0]
    723c:	6822      	ldr	r2, [r4, #0]
    723e:	920f      	str	r2, [sp, #60]	; 0x3c
    7240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7242:	07d0      	lsls	r0, r2, #31
    7244:	d5fa      	bpl.n	723c <PkaAddJcbAfn2Mdf+0xd8>
    7246:	4a27      	ldr	r2, [pc, #156]	; (72e4 <PkaAddJcbAfn2Mdf+0x180>)
    7248:	601a      	str	r2, [r3, #0]
    724a:	6821      	ldr	r1, [r4, #0]
    724c:	9110      	str	r1, [sp, #64]	; 0x40
    724e:	9910      	ldr	r1, [sp, #64]	; 0x40
    7250:	07c9      	lsls	r1, r1, #31
    7252:	d5fa      	bpl.n	724a <PkaAddJcbAfn2Mdf+0xe6>
    7254:	601a      	str	r2, [r3, #0]
    7256:	4b14      	ldr	r3, [pc, #80]	; (72a8 <PkaAddJcbAfn2Mdf+0x144>)
    7258:	461a      	mov	r2, r3
    725a:	6819      	ldr	r1, [r3, #0]
    725c:	9111      	str	r1, [sp, #68]	; 0x44
    725e:	9911      	ldr	r1, [sp, #68]	; 0x44
    7260:	07c8      	lsls	r0, r1, #31
    7262:	d5fa      	bpl.n	725a <PkaAddJcbAfn2Mdf+0xf6>
    7264:	4b11      	ldr	r3, [pc, #68]	; (72ac <PkaAddJcbAfn2Mdf+0x148>)
    7266:	4920      	ldr	r1, [pc, #128]	; (72e8 <PkaAddJcbAfn2Mdf+0x184>)
    7268:	6019      	str	r1, [r3, #0]
    726a:	6811      	ldr	r1, [r2, #0]
    726c:	9112      	str	r1, [sp, #72]	; 0x48
    726e:	9912      	ldr	r1, [sp, #72]	; 0x48
    7270:	07c9      	lsls	r1, r1, #31
    7272:	d5fa      	bpl.n	726a <PkaAddJcbAfn2Mdf+0x106>
    7274:	491d      	ldr	r1, [pc, #116]	; (72ec <PkaAddJcbAfn2Mdf+0x188>)
    7276:	6019      	str	r1, [r3, #0]
    7278:	6811      	ldr	r1, [r2, #0]
    727a:	9113      	str	r1, [sp, #76]	; 0x4c
    727c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    727e:	07cc      	lsls	r4, r1, #31
    7280:	d5fa      	bpl.n	7278 <PkaAddJcbAfn2Mdf+0x114>
    7282:	490b      	ldr	r1, [pc, #44]	; (72b0 <PkaAddJcbAfn2Mdf+0x14c>)
    7284:	6019      	str	r1, [r3, #0]
    7286:	6811      	ldr	r1, [r2, #0]
    7288:	9114      	str	r1, [sp, #80]	; 0x50
    728a:	9914      	ldr	r1, [sp, #80]	; 0x50
    728c:	07c8      	lsls	r0, r1, #31
    728e:	d5fa      	bpl.n	7286 <PkaAddJcbAfn2Mdf+0x122>
    7290:	4917      	ldr	r1, [pc, #92]	; (72f0 <PkaAddJcbAfn2Mdf+0x18c>)
    7292:	6019      	str	r1, [r3, #0]
    7294:	6811      	ldr	r1, [r2, #0]
    7296:	9115      	str	r1, [sp, #84]	; 0x54
    7298:	9915      	ldr	r1, [sp, #84]	; 0x54
    729a:	07c9      	lsls	r1, r1, #31
    729c:	d5fa      	bpl.n	7294 <PkaAddJcbAfn2Mdf+0x130>
    729e:	4a15      	ldr	r2, [pc, #84]	; (72f4 <PkaAddJcbAfn2Mdf+0x190>)
    72a0:	601a      	str	r2, [r3, #0]
    72a2:	b016      	add	sp, #88	; 0x58
    72a4:	bd10      	pop	{r4, pc}
    72a6:	bf00      	nop
    72a8:	508410b0 	.word	0x508410b0
    72ac:	50841080 	.word	0x50841080
    72b0:	90410440 	.word	0x90410440
    72b4:	29298600 	.word	0x29298600
    72b8:	c80110d8 	.word	0xc80110d8
    72bc:	90411440 	.word	0x90411440
    72c0:	29211440 	.word	0x29211440
    72c4:	21651440 	.word	0x21651440
    72c8:	90403400 	.word	0x90403400
    72cc:	900c3100 	.word	0x900c3100
    72d0:	900c40c0 	.word	0x900c40c0
    72d4:	292030c0 	.word	0x292030c0
    72d8:	900d9640 	.word	0x900d9640
    72dc:	90604100 	.word	0x90604100
    72e0:	c8451603 	.word	0xc8451603
    72e4:	21118600 	.word	0x21118600
    72e8:	21604100 	.word	0x21604100
    72ec:	c8444659 	.word	0xc8444659
    72f0:	90451440 	.word	0x90451440
    72f4:	902d1440 	.word	0x902d1440

000072f8 <PkaJcb2Afn>:
    72f8:	4826      	ldr	r0, [pc, #152]	; (7394 <PkaJcb2Afn+0x9c>)
    72fa:	b570      	push	{r4, r5, r6, lr}
    72fc:	4605      	mov	r5, r0
    72fe:	b088      	sub	sp, #32
    7300:	6804      	ldr	r4, [r0, #0]
    7302:	9400      	str	r4, [sp, #0]
    7304:	9c00      	ldr	r4, [sp, #0]
    7306:	07e6      	lsls	r6, r4, #31
    7308:	d5fa      	bpl.n	7300 <PkaJcb2Afn+0x8>
    730a:	4c23      	ldr	r4, [pc, #140]	; (7398 <PkaJcb2Afn+0xa0>)
    730c:	4823      	ldr	r0, [pc, #140]	; (739c <PkaJcb2Afn+0xa4>)
    730e:	6004      	str	r4, [r0, #0]
    7310:	4c23      	ldr	r4, [pc, #140]	; (73a0 <PkaJcb2Afn+0xa8>)
    7312:	ea44 4383 	orr.w	r3, r4, r3, lsl #18
    7316:	682c      	ldr	r4, [r5, #0]
    7318:	9401      	str	r4, [sp, #4]
    731a:	9c01      	ldr	r4, [sp, #4]
    731c:	07e4      	lsls	r4, r4, #31
    731e:	d5fa      	bpl.n	7316 <PkaJcb2Afn+0x1e>
    7320:	6003      	str	r3, [r0, #0]
    7322:	0193      	lsls	r3, r2, #6
    7324:	ea43 4282 	orr.w	r2, r3, r2, lsl #18
    7328:	f042 4410 	orr.w	r4, r2, #2415919104	; 0x90000000
    732c:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
    7330:	682b      	ldr	r3, [r5, #0]
    7332:	9302      	str	r3, [sp, #8]
    7334:	9b02      	ldr	r3, [sp, #8]
    7336:	07de      	lsls	r6, r3, #31
    7338:	d5fa      	bpl.n	7330 <PkaJcb2Afn+0x38>
    733a:	6004      	str	r4, [r0, #0]
    733c:	682b      	ldr	r3, [r5, #0]
    733e:	9303      	str	r3, [sp, #12]
    7340:	9b03      	ldr	r3, [sp, #12]
    7342:	07db      	lsls	r3, r3, #31
    7344:	d5fa      	bpl.n	733c <PkaJcb2Afn+0x44>
    7346:	4b17      	ldr	r3, [pc, #92]	; (73a4 <PkaJcb2Afn+0xac>)
    7348:	6003      	str	r3, [r0, #0]
    734a:	018b      	lsls	r3, r1, #6
    734c:	ea43 4181 	orr.w	r1, r3, r1, lsl #18
    7350:	f041 4310 	orr.w	r3, r1, #2415919104	; 0x90000000
    7354:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
    7358:	682e      	ldr	r6, [r5, #0]
    735a:	9604      	str	r6, [sp, #16]
    735c:	9e04      	ldr	r6, [sp, #16]
    735e:	07f6      	lsls	r6, r6, #31
    7360:	d5fa      	bpl.n	7358 <PkaJcb2Afn+0x60>
    7362:	6003      	str	r3, [r0, #0]
    7364:	682b      	ldr	r3, [r5, #0]
    7366:	9305      	str	r3, [sp, #20]
    7368:	9b05      	ldr	r3, [sp, #20]
    736a:	07de      	lsls	r6, r3, #31
    736c:	d5fa      	bpl.n	7364 <PkaJcb2Afn+0x6c>
    736e:	6004      	str	r4, [r0, #0]
    7370:	f041 4158 	orr.w	r1, r1, #3623878656	; 0xd8000000
    7374:	682b      	ldr	r3, [r5, #0]
    7376:	9306      	str	r3, [sp, #24]
    7378:	9b06      	ldr	r3, [sp, #24]
    737a:	07dc      	lsls	r4, r3, #31
    737c:	d5fa      	bpl.n	7374 <PkaJcb2Afn+0x7c>
    737e:	6001      	str	r1, [r0, #0]
    7380:	f042 4258 	orr.w	r2, r2, #3623878656	; 0xd8000000
    7384:	682b      	ldr	r3, [r5, #0]
    7386:	9307      	str	r3, [sp, #28]
    7388:	9b07      	ldr	r3, [sp, #28]
    738a:	07db      	lsls	r3, r3, #31
    738c:	d5fa      	bpl.n	7384 <PkaJcb2Afn+0x8c>
    738e:	6002      	str	r2, [r0, #0]
    7390:	b008      	add	sp, #32
    7392:	bd70      	pop	{r4, r5, r6, pc}
    7394:	508410b0 	.word	0x508410b0
    7398:	290221c0 	.word	0x290221c0
    739c:	50841080 	.word	0x50841080
    73a0:	98007180 	.word	0x98007180
    73a4:	90186180 	.word	0x90186180

000073a8 <PkaAddAff>:
    73a8:	4b35      	ldr	r3, [pc, #212]	; (7480 <PkaAddAff+0xd8>)
    73aa:	b08e      	sub	sp, #56	; 0x38
    73ac:	4619      	mov	r1, r3
    73ae:	681a      	ldr	r2, [r3, #0]
    73b0:	9200      	str	r2, [sp, #0]
    73b2:	9a00      	ldr	r2, [sp, #0]
    73b4:	07d2      	lsls	r2, r2, #31
    73b6:	d5fa      	bpl.n	73ae <PkaAddAff+0x6>
    73b8:	4b32      	ldr	r3, [pc, #200]	; (7484 <PkaAddAff+0xdc>)
    73ba:	4a33      	ldr	r2, [pc, #204]	; (7488 <PkaAddAff+0xe0>)
    73bc:	601a      	str	r2, [r3, #0]
    73be:	680a      	ldr	r2, [r1, #0]
    73c0:	9201      	str	r2, [sp, #4]
    73c2:	9a01      	ldr	r2, [sp, #4]
    73c4:	07d0      	lsls	r0, r2, #31
    73c6:	d5fa      	bpl.n	73be <PkaAddAff+0x16>
    73c8:	4a30      	ldr	r2, [pc, #192]	; (748c <PkaAddAff+0xe4>)
    73ca:	601a      	str	r2, [r3, #0]
    73cc:	680a      	ldr	r2, [r1, #0]
    73ce:	9202      	str	r2, [sp, #8]
    73d0:	9a02      	ldr	r2, [sp, #8]
    73d2:	07d2      	lsls	r2, r2, #31
    73d4:	d5fa      	bpl.n	73cc <PkaAddAff+0x24>
    73d6:	4a2e      	ldr	r2, [pc, #184]	; (7490 <PkaAddAff+0xe8>)
    73d8:	601a      	str	r2, [r3, #0]
    73da:	680a      	ldr	r2, [r1, #0]
    73dc:	9203      	str	r2, [sp, #12]
    73de:	9a03      	ldr	r2, [sp, #12]
    73e0:	07d0      	lsls	r0, r2, #31
    73e2:	d5fa      	bpl.n	73da <PkaAddAff+0x32>
    73e4:	4a2b      	ldr	r2, [pc, #172]	; (7494 <PkaAddAff+0xec>)
    73e6:	601a      	str	r2, [r3, #0]
    73e8:	680a      	ldr	r2, [r1, #0]
    73ea:	9204      	str	r2, [sp, #16]
    73ec:	9a04      	ldr	r2, [sp, #16]
    73ee:	07d2      	lsls	r2, r2, #31
    73f0:	d5fa      	bpl.n	73e8 <PkaAddAff+0x40>
    73f2:	4a29      	ldr	r2, [pc, #164]	; (7498 <PkaAddAff+0xf0>)
    73f4:	601a      	str	r2, [r3, #0]
    73f6:	680a      	ldr	r2, [r1, #0]
    73f8:	9205      	str	r2, [sp, #20]
    73fa:	9a05      	ldr	r2, [sp, #20]
    73fc:	07d0      	lsls	r0, r2, #31
    73fe:	d5fa      	bpl.n	73f6 <PkaAddAff+0x4e>
    7400:	4a26      	ldr	r2, [pc, #152]	; (749c <PkaAddAff+0xf4>)
    7402:	601a      	str	r2, [r3, #0]
    7404:	680a      	ldr	r2, [r1, #0]
    7406:	9206      	str	r2, [sp, #24]
    7408:	9a06      	ldr	r2, [sp, #24]
    740a:	07d2      	lsls	r2, r2, #31
    740c:	d5fa      	bpl.n	7404 <PkaAddAff+0x5c>
    740e:	4a24      	ldr	r2, [pc, #144]	; (74a0 <PkaAddAff+0xf8>)
    7410:	601a      	str	r2, [r3, #0]
    7412:	680a      	ldr	r2, [r1, #0]
    7414:	9207      	str	r2, [sp, #28]
    7416:	9a07      	ldr	r2, [sp, #28]
    7418:	07d0      	lsls	r0, r2, #31
    741a:	d5fa      	bpl.n	7412 <PkaAddAff+0x6a>
    741c:	4a21      	ldr	r2, [pc, #132]	; (74a4 <PkaAddAff+0xfc>)
    741e:	601a      	str	r2, [r3, #0]
    7420:	680a      	ldr	r2, [r1, #0]
    7422:	9208      	str	r2, [sp, #32]
    7424:	9a08      	ldr	r2, [sp, #32]
    7426:	07d2      	lsls	r2, r2, #31
    7428:	d5fa      	bpl.n	7420 <PkaAddAff+0x78>
    742a:	4a1f      	ldr	r2, [pc, #124]	; (74a8 <PkaAddAff+0x100>)
    742c:	601a      	str	r2, [r3, #0]
    742e:	680a      	ldr	r2, [r1, #0]
    7430:	9209      	str	r2, [sp, #36]	; 0x24
    7432:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7434:	07d0      	lsls	r0, r2, #31
    7436:	d5fa      	bpl.n	742e <PkaAddAff+0x86>
    7438:	4a1c      	ldr	r2, [pc, #112]	; (74ac <PkaAddAff+0x104>)
    743a:	601a      	str	r2, [r3, #0]
    743c:	680a      	ldr	r2, [r1, #0]
    743e:	920a      	str	r2, [sp, #40]	; 0x28
    7440:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7442:	07d2      	lsls	r2, r2, #31
    7444:	d5fa      	bpl.n	743c <PkaAddAff+0x94>
    7446:	4a1a      	ldr	r2, [pc, #104]	; (74b0 <PkaAddAff+0x108>)
    7448:	601a      	str	r2, [r3, #0]
    744a:	6808      	ldr	r0, [r1, #0]
    744c:	900b      	str	r0, [sp, #44]	; 0x2c
    744e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    7450:	07c0      	lsls	r0, r0, #31
    7452:	d5fa      	bpl.n	744a <PkaAddAff+0xa2>
    7454:	601a      	str	r2, [r3, #0]
    7456:	680a      	ldr	r2, [r1, #0]
    7458:	920c      	str	r2, [sp, #48]	; 0x30
    745a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    745c:	07d0      	lsls	r0, r2, #31
    745e:	d5fa      	bpl.n	7456 <PkaAddAff+0xae>
    7460:	4a14      	ldr	r2, [pc, #80]	; (74b4 <PkaAddAff+0x10c>)
    7462:	601a      	str	r2, [r3, #0]
    7464:	680a      	ldr	r2, [r1, #0]
    7466:	920d      	str	r2, [sp, #52]	; 0x34
    7468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    746a:	07d2      	lsls	r2, r2, #31
    746c:	d5fa      	bpl.n	7464 <PkaAddAff+0xbc>
    746e:	4a12      	ldr	r2, [pc, #72]	; (74b8 <PkaAddAff+0x110>)
    7470:	210e      	movs	r1, #14
    7472:	601a      	str	r2, [r3, #0]
    7474:	2000      	movs	r0, #0
    7476:	230d      	movs	r3, #13
    7478:	220f      	movs	r2, #15
    747a:	b00e      	add	sp, #56	; 0x38
    747c:	f7ff bf3c 	b.w	72f8 <PkaJcb2Afn>
    7480:	508410b0 	.word	0x508410b0
    7484:	50841080 	.word	0x50841080
    7488:	29014380 	.word	0x29014380
    748c:	21396340 	.word	0x21396340
    7490:	29017080 	.word	0x29017080
    7494:	21542080 	.word	0x21542080
    7498:	9034d100 	.word	0x9034d100
    749c:	903440c0 	.word	0x903440c0
    74a0:	292030c0 	.word	0x292030c0
    74a4:	900d53c0 	.word	0x900d53c0
    74a8:	90384100 	.word	0x90384100
    74ac:	c8082383 	.word	0xc8082383
    74b0:	2110e380 	.word	0x2110e380
    74b4:	21384100 	.word	0x21384100
    74b8:	c80843cf 	.word	0xc80843cf

000074bc <PkaSum2ScalarMullt>:
    74bc:	2301      	movs	r3, #1
    74be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74c2:	b092      	sub	sp, #72	; 0x48
    74c4:	e9cd 3303 	strd	r3, r3, [sp, #12]
    74c8:	4b62      	ldr	r3, [pc, #392]	; (7654 <PkaSum2ScalarMullt+0x198>)
    74ca:	461d      	mov	r5, r3
    74cc:	681a      	ldr	r2, [r3, #0]
    74ce:	9205      	str	r2, [sp, #20]
    74d0:	9a05      	ldr	r2, [sp, #20]
    74d2:	07d2      	lsls	r2, r2, #31
    74d4:	d5fa      	bpl.n	74cc <PkaSum2ScalarMullt+0x10>
    74d6:	4b60      	ldr	r3, [pc, #384]	; (7658 <PkaSum2ScalarMullt+0x19c>)
    74d8:	4c60      	ldr	r4, [pc, #384]	; (765c <PkaSum2ScalarMullt+0x1a0>)
    74da:	6023      	str	r3, [r4, #0]
    74dc:	4b60      	ldr	r3, [pc, #384]	; (7660 <PkaSum2ScalarMullt+0x1a4>)
    74de:	4619      	mov	r1, r3
    74e0:	681a      	ldr	r2, [r3, #0]
    74e2:	9206      	str	r2, [sp, #24]
    74e4:	9a06      	ldr	r2, [sp, #24]
    74e6:	07d7      	lsls	r7, r2, #31
    74e8:	d5fa      	bpl.n	74e0 <PkaSum2ScalarMullt+0x24>
    74ea:	4b5e      	ldr	r3, [pc, #376]	; (7664 <PkaSum2ScalarMullt+0x1a8>)
    74ec:	681a      	ldr	r2, [r3, #0]
    74ee:	04d6      	lsls	r6, r2, #19
    74f0:	f100 80a8 	bmi.w	7644 <PkaSum2ScalarMullt+0x188>
    74f4:	682a      	ldr	r2, [r5, #0]
    74f6:	9207      	str	r2, [sp, #28]
    74f8:	9a07      	ldr	r2, [sp, #28]
    74fa:	07d0      	lsls	r0, r2, #31
    74fc:	d5fa      	bpl.n	74f4 <PkaSum2ScalarMullt+0x38>
    74fe:	4a5a      	ldr	r2, [pc, #360]	; (7668 <PkaSum2ScalarMullt+0x1ac>)
    7500:	6022      	str	r2, [r4, #0]
    7502:	680a      	ldr	r2, [r1, #0]
    7504:	9208      	str	r2, [sp, #32]
    7506:	9a08      	ldr	r2, [sp, #32]
    7508:	07d2      	lsls	r2, r2, #31
    750a:	d5fa      	bpl.n	7502 <PkaSum2ScalarMullt+0x46>
    750c:	681e      	ldr	r6, [r3, #0]
    750e:	f3c6 3600 	ubfx	r6, r6, #12, #1
    7512:	2e00      	cmp	r6, #0
    7514:	f040 8098 	bne.w	7648 <PkaSum2ScalarMullt+0x18c>
    7518:	2012      	movs	r0, #18
    751a:	f7ff f8f3 	bl	6704 <PkaGetRegEffectiveSizeInBits>
    751e:	4607      	mov	r7, r0
    7520:	2013      	movs	r0, #19
    7522:	f7ff f8ef 	bl	6704 <PkaGetRegEffectiveSizeInBits>
    7526:	4287      	cmp	r7, r0
    7528:	bf8c      	ite	hi
    752a:	2012      	movhi	r0, #18
    752c:	2013      	movls	r0, #19
    752e:	f7ff f8e9 	bl	6704 <PkaGetRegEffectiveSizeInBits>
    7532:	1e47      	subs	r7, r0, #1
    7534:	f7ff ff38 	bl	73a8 <PkaAddAff>
    7538:	ab03      	add	r3, sp, #12
    753a:	aa01      	add	r2, sp, #4
    753c:	4639      	mov	r1, r7
    753e:	2012      	movs	r0, #18
    7540:	f7ff f926 	bl	6790 <PkaGetNextMsBit>
    7544:	ab04      	add	r3, sp, #16
    7546:	4680      	mov	r8, r0
    7548:	aa02      	add	r2, sp, #8
    754a:	4639      	mov	r1, r7
    754c:	2013      	movs	r0, #19
    754e:	f7ff f91f 	bl	6790 <PkaGetNextMsBit>
    7552:	eb00 0048 	add.w	r0, r0, r8, lsl #1
    7556:	2802      	cmp	r0, #2
    7558:	d032      	beq.n	75c0 <PkaSum2ScalarMullt+0x104>
    755a:	2803      	cmp	r0, #3
    755c:	d03e      	beq.n	75dc <PkaSum2ScalarMullt+0x120>
    755e:	2801      	cmp	r0, #1
    7560:	d174      	bne.n	764c <PkaSum2ScalarMullt+0x190>
    7562:	682b      	ldr	r3, [r5, #0]
    7564:	9309      	str	r3, [sp, #36]	; 0x24
    7566:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7568:	07db      	lsls	r3, r3, #31
    756a:	d5fa      	bpl.n	7562 <PkaSum2ScalarMullt+0xa6>
    756c:	4b3f      	ldr	r3, [pc, #252]	; (766c <PkaSum2ScalarMullt+0x1b0>)
    756e:	6023      	str	r3, [r4, #0]
    7570:	682b      	ldr	r3, [r5, #0]
    7572:	930a      	str	r3, [sp, #40]	; 0x28
    7574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7576:	07d8      	lsls	r0, r3, #31
    7578:	d5fa      	bpl.n	7570 <PkaSum2ScalarMullt+0xb4>
    757a:	4b3d      	ldr	r3, [pc, #244]	; (7670 <PkaSum2ScalarMullt+0x1b4>)
    757c:	6023      	str	r3, [r4, #0]
    757e:	682b      	ldr	r3, [r5, #0]
    7580:	930f      	str	r3, [sp, #60]	; 0x3c
    7582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7584:	07d9      	lsls	r1, r3, #31
    7586:	d5fa      	bpl.n	757e <PkaSum2ScalarMullt+0xc2>
    7588:	4b3a      	ldr	r3, [pc, #232]	; (7674 <PkaSum2ScalarMullt+0x1b8>)
    758a:	6023      	str	r3, [r4, #0]
    758c:	682b      	ldr	r3, [r5, #0]
    758e:	9310      	str	r3, [sp, #64]	; 0x40
    7590:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7592:	07da      	lsls	r2, r3, #31
    7594:	d5fa      	bpl.n	758c <PkaSum2ScalarMullt+0xd0>
    7596:	4b38      	ldr	r3, [pc, #224]	; (7678 <PkaSum2ScalarMullt+0x1bc>)
    7598:	6023      	str	r3, [r4, #0]
    759a:	682b      	ldr	r3, [r5, #0]
    759c:	9311      	str	r3, [sp, #68]	; 0x44
    759e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    75a0:	07db      	lsls	r3, r3, #31
    75a2:	d5fa      	bpl.n	759a <PkaSum2ScalarMullt+0xde>
    75a4:	4b35      	ldr	r3, [pc, #212]	; (767c <PkaSum2ScalarMullt+0x1c0>)
    75a6:	6023      	str	r3, [r4, #0]
    75a8:	3f01      	subs	r7, #1
    75aa:	d525      	bpl.n	75f8 <PkaSum2ScalarMullt+0x13c>
    75ac:	2310      	movs	r3, #16
    75ae:	2219      	movs	r2, #25
    75b0:	2118      	movs	r1, #24
    75b2:	2000      	movs	r0, #0
    75b4:	f7ff fea0 	bl	72f8 <PkaJcb2Afn>
    75b8:	4630      	mov	r0, r6
    75ba:	b012      	add	sp, #72	; 0x48
    75bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75c0:	682b      	ldr	r3, [r5, #0]
    75c2:	930b      	str	r3, [sp, #44]	; 0x2c
    75c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    75c6:	07d9      	lsls	r1, r3, #31
    75c8:	d5fa      	bpl.n	75c0 <PkaSum2ScalarMullt+0x104>
    75ca:	4b2d      	ldr	r3, [pc, #180]	; (7680 <PkaSum2ScalarMullt+0x1c4>)
    75cc:	6023      	str	r3, [r4, #0]
    75ce:	682b      	ldr	r3, [r5, #0]
    75d0:	930c      	str	r3, [sp, #48]	; 0x30
    75d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    75d4:	07da      	lsls	r2, r3, #31
    75d6:	d5fa      	bpl.n	75ce <PkaSum2ScalarMullt+0x112>
    75d8:	4b2a      	ldr	r3, [pc, #168]	; (7684 <PkaSum2ScalarMullt+0x1c8>)
    75da:	e7cf      	b.n	757c <PkaSum2ScalarMullt+0xc0>
    75dc:	682b      	ldr	r3, [r5, #0]
    75de:	930d      	str	r3, [sp, #52]	; 0x34
    75e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    75e2:	07db      	lsls	r3, r3, #31
    75e4:	d5fa      	bpl.n	75dc <PkaSum2ScalarMullt+0x120>
    75e6:	4b28      	ldr	r3, [pc, #160]	; (7688 <PkaSum2ScalarMullt+0x1cc>)
    75e8:	6023      	str	r3, [r4, #0]
    75ea:	682b      	ldr	r3, [r5, #0]
    75ec:	930e      	str	r3, [sp, #56]	; 0x38
    75ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    75f0:	07d8      	lsls	r0, r3, #31
    75f2:	d5fa      	bpl.n	75ea <PkaSum2ScalarMullt+0x12e>
    75f4:	4b25      	ldr	r3, [pc, #148]	; (768c <PkaSum2ScalarMullt+0x1d0>)
    75f6:	e7c1      	b.n	757c <PkaSum2ScalarMullt+0xc0>
    75f8:	ab03      	add	r3, sp, #12
    75fa:	aa01      	add	r2, sp, #4
    75fc:	4639      	mov	r1, r7
    75fe:	2012      	movs	r0, #18
    7600:	f7ff f8c6 	bl	6790 <PkaGetNextMsBit>
    7604:	ab04      	add	r3, sp, #16
    7606:	4604      	mov	r4, r0
    7608:	aa02      	add	r2, sp, #8
    760a:	4639      	mov	r1, r7
    760c:	2013      	movs	r0, #19
    760e:	f7ff f8bf 	bl	6790 <PkaGetNextMsBit>
    7612:	eb10 0444 	adds.w	r4, r0, r4, lsl #1
    7616:	d102      	bne.n	761e <PkaSum2ScalarMullt+0x162>
    7618:	f7ff fc12 	bl	6e40 <PkaDoubleMdf2Mdf>
    761c:	e7c4      	b.n	75a8 <PkaSum2ScalarMullt+0xec>
    761e:	f7ff fce5 	bl	6fec <PkaDoubleMdf2Jcb>
    7622:	2c02      	cmp	r4, #2
    7624:	d008      	beq.n	7638 <PkaSum2ScalarMullt+0x17c>
    7626:	2c03      	cmp	r4, #3
    7628:	d009      	beq.n	763e <PkaSum2ScalarMullt+0x182>
    762a:	2c01      	cmp	r4, #1
    762c:	d110      	bne.n	7650 <PkaSum2ScalarMullt+0x194>
    762e:	2117      	movs	r1, #23
    7630:	2016      	movs	r0, #22
    7632:	f7ff fd97 	bl	7164 <PkaAddJcbAfn2Mdf>
    7636:	e7b7      	b.n	75a8 <PkaSum2ScalarMullt+0xec>
    7638:	2115      	movs	r1, #21
    763a:	2014      	movs	r0, #20
    763c:	e7f9      	b.n	7632 <PkaSum2ScalarMullt+0x176>
    763e:	210f      	movs	r1, #15
    7640:	200e      	movs	r0, #14
    7642:	e7f6      	b.n	7632 <PkaSum2ScalarMullt+0x176>
    7644:	4e12      	ldr	r6, [pc, #72]	; (7690 <PkaSum2ScalarMullt+0x1d4>)
    7646:	e7b7      	b.n	75b8 <PkaSum2ScalarMullt+0xfc>
    7648:	4e12      	ldr	r6, [pc, #72]	; (7694 <PkaSum2ScalarMullt+0x1d8>)
    764a:	e7b5      	b.n	75b8 <PkaSum2ScalarMullt+0xfc>
    764c:	4e12      	ldr	r6, [pc, #72]	; (7698 <PkaSum2ScalarMullt+0x1dc>)
    764e:	e7b3      	b.n	75b8 <PkaSum2ScalarMullt+0xfc>
    7650:	4e12      	ldr	r6, [pc, #72]	; (769c <PkaSum2ScalarMullt+0x1e0>)
    7652:	e7b1      	b.n	75b8 <PkaSum2ScalarMullt+0xfc>
    7654:	508410b0 	.word	0x508410b0
    7658:	514a0800 	.word	0x514a0800
    765c:	50841080 	.word	0x50841080
    7660:	508410b4 	.word	0x508410b4
    7664:	50841088 	.word	0x50841088
    7668:	514e0800 	.word	0x514e0800
    766c:	495a0600 	.word	0x495a0600
    7670:	495e0640 	.word	0x495e0640
    7674:	41420400 	.word	0x41420400
    7678:	49421400 	.word	0x49421400
    767c:	492e0440 	.word	0x492e0440
    7680:	49520600 	.word	0x49520600
    7684:	49560640 	.word	0x49560640
    7688:	493a0600 	.word	0x493a0600
    768c:	493e0640 	.word	0x493e0640
    7690:	00f10806 	.word	0x00f10806
    7694:	00f10807 	.word	0x00f10807
    7698:	00f10804 	.word	0x00f10804
    769c:	00f10805 	.word	0x00f10805

000076a0 <SaSi_HalClearInterruptBit>:
    76a0:	4b01      	ldr	r3, [pc, #4]	; (76a8 <SaSi_HalClearInterruptBit+0x8>)
    76a2:	6018      	str	r0, [r3, #0]
    76a4:	4770      	bx	lr
    76a6:	bf00      	nop
    76a8:	50841a08 	.word	0x50841a08

000076ac <SaSi_HalMaskInterrupt>:
    76ac:	4b01      	ldr	r3, [pc, #4]	; (76b4 <SaSi_HalMaskInterrupt+0x8>)
    76ae:	6018      	str	r0, [r3, #0]
    76b0:	4770      	bx	lr
    76b2:	bf00      	nop
    76b4:	50841a04 	.word	0x50841a04

000076b8 <SaSi_HalWaitInterrupt>:
    76b8:	4a03      	ldr	r2, [pc, #12]	; (76c8 <SaSi_HalWaitInterrupt+0x10>)
    76ba:	6813      	ldr	r3, [r2, #0]
    76bc:	4218      	tst	r0, r3
    76be:	d0fc      	beq.n	76ba <SaSi_HalWaitInterrupt+0x2>
    76c0:	4a02      	ldr	r2, [pc, #8]	; (76cc <SaSi_HalWaitInterrupt+0x14>)
    76c2:	6010      	str	r0, [r2, #0]
    76c4:	4618      	mov	r0, r3
    76c6:	4770      	bx	lr
    76c8:	50841a00 	.word	0x50841a00
    76cc:	50841a08 	.word	0x50841a08

000076d0 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    76d0:	4770      	bx	lr

000076d2 <gpio_pin_get>:
{
    76d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    76d4:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
    76d6:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    76d8:	6883      	ldr	r3, [r0, #8]
    76da:	a901      	add	r1, sp, #4
    76dc:	685b      	ldr	r3, [r3, #4]
    76de:	4798      	blx	r3
	if (ret == 0) {
    76e0:	b948      	cbnz	r0, 76f6 <gpio_pin_get+0x24>
		*value ^= data->invert;
    76e2:	9b01      	ldr	r3, [sp, #4]
    76e4:	682a      	ldr	r2, [r5, #0]
    76e6:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    76e8:	2301      	movs	r3, #1
    76ea:	fa03 f104 	lsl.w	r1, r3, r4
    76ee:	420a      	tst	r2, r1
    76f0:	bf14      	ite	ne
    76f2:	4618      	movne	r0, r3
    76f4:	2000      	moveq	r0, #0
}
    76f6:	b003      	add	sp, #12
    76f8:	bd30      	pop	{r4, r5, pc}

000076fa <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    76fa:	2301      	movs	r3, #1
    76fc:	fa03 f101 	lsl.w	r1, r3, r1
    7700:	6903      	ldr	r3, [r0, #16]
    7702:	681b      	ldr	r3, [r3, #0]
    7704:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    7706:	bf18      	it	ne
    7708:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    770c:	b112      	cbz	r2, 7714 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
    770e:	6883      	ldr	r3, [r0, #8]
    7710:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    7712:	4718      	bx	r3
    7714:	6883      	ldr	r3, [r0, #8]
    7716:	691b      	ldr	r3, [r3, #16]
    7718:	e7fb      	b.n	7712 <gpio_pin_set.isra.0+0x18>

0000771a <gpio_pin_configure_dt.isra.0>:
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    771a:	b470      	push	{r4, r5, r6}
				  spec->dt_flags | extra_flags);
    771c:	88c3      	ldrh	r3, [r0, #6]
	return gpio_pin_configure(spec->port,
    771e:	6805      	ldr	r5, [r0, #0]
    7720:	7906      	ldrb	r6, [r0, #4]
    7722:	ea43 0201 	orr.w	r2, r3, r1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7726:	2301      	movs	r3, #1
	struct gpio_driver_data *data =
    7728:	6929      	ldr	r1, [r5, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    772a:	fa03 f406 	lsl.w	r4, r3, r6
    772e:	680b      	ldr	r3, [r1, #0]
	const struct gpio_driver_api *api =
    7730:	68a8      	ldr	r0, [r5, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7732:	f012 0f01 	tst.w	r2, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7736:	bf14      	ite	ne
    7738:	4323      	orrne	r3, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    773a:	43a3      	biceq	r3, r4
    773c:	600b      	str	r3, [r1, #0]
	return api->pin_configure(port, pin, flags);
    773e:	4631      	mov	r1, r6
    7740:	6803      	ldr	r3, [r0, #0]
    7742:	4628      	mov	r0, r5
}
    7744:	bc70      	pop	{r4, r5, r6}
	return api->pin_configure(port, pin, flags);
    7746:	4718      	bx	r3

00007748 <flash_area_id_from_multi_image_slot>:
    switch (slot) {
    7748:	b129      	cbz	r1, 7756 <flash_area_id_from_multi_image_slot+0xe>
    774a:	2901      	cmp	r1, #1
    774c:	bf14      	ite	ne
    774e:	f06f 0015 	mvnne.w	r0, #21
    7752:	2009      	moveq	r0, #9
    7754:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    7756:	2003      	movs	r0, #3
}
    7758:	4770      	bx	lr

0000775a <flash_area_get_device_id>:

uint8_t flash_area_get_device_id(const struct flash_area *fa)
{
	(void)fa;
	return FLASH_DEVICE_ID;
}
    775a:	2000      	movs	r0, #0
    775c:	4770      	bx	lr

0000775e <os_heap_init>:
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
}
#else
void os_heap_init(void)
{
}
    775e:	4770      	bx	lr

00007760 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    7760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7764:	460e      	mov	r6, r1
    7766:	4617      	mov	r7, r2
    7768:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    776a:	4604      	mov	r4, r0
    776c:	b928      	cbnz	r0, 777a <bootutil_tlv_iter_begin+0x1a>
        return -1;
    776e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    7772:	4640      	mov	r0, r8
    7774:	b003      	add	sp, #12
    7776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    777a:	2900      	cmp	r1, #0
    777c:	d0f7      	beq.n	776e <bootutil_tlv_iter_begin+0xe>
    777e:	2a00      	cmp	r2, #0
    7780:	d0f5      	beq.n	776e <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    7782:	68cb      	ldr	r3, [r1, #12]
    7784:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    7786:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    7788:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    778a:	2304      	movs	r3, #4
    778c:	4629      	mov	r1, r5
    778e:	eb0d 0203 	add.w	r2, sp, r3
    7792:	f000 fc84 	bl	809e <flash_area_read>
    7796:	4680      	mov	r8, r0
    7798:	2800      	cmp	r0, #0
    779a:	d1e8      	bne.n	776e <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    779c:	f646 1208 	movw	r2, #26888	; 0x6908
    77a0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    77a4:	8973      	ldrh	r3, [r6, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    77a6:	4291      	cmp	r1, r2
    77a8:	d123      	bne.n	77f2 <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    77aa:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    77ae:	4299      	cmp	r1, r3
    77b0:	d1dd      	bne.n	776e <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    77b2:	2304      	movs	r3, #4
    77b4:	4638      	mov	r0, r7
    77b6:	eb0d 0203 	add.w	r2, sp, r3
    77ba:	4429      	add	r1, r5
    77bc:	f000 fc6f 	bl	809e <flash_area_read>
    77c0:	2800      	cmp	r0, #0
    77c2:	d1d4      	bne.n	776e <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    77c4:	f646 1307 	movw	r3, #26887	; 0x6907
    77c8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    77cc:	429a      	cmp	r2, r3
    77ce:	d1ce      	bne.n	776e <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    77d0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    77d4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    77d8:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    77da:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    77dc:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    77e0:	442b      	add	r3, r5
    77e2:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    77e4:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    77e6:	4413      	add	r3, r2
    it->type = type;
    77e8:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    77ec:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    77ee:	6125      	str	r5, [r4, #16]
    return 0;
    77f0:	e7bf      	b.n	7772 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    77f2:	2b00      	cmp	r3, #0
    77f4:	d0e6      	beq.n	77c4 <bootutil_tlv_iter_begin+0x64>
    77f6:	e7ba      	b.n	776e <bootutil_tlv_iter_begin+0xe>

000077f8 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    77f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    77fc:	460f      	mov	r7, r1
    77fe:	4690      	mov	r8, r2
    7800:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    7802:	4604      	mov	r4, r0
    7804:	b920      	cbnz	r0, 7810 <bootutil_tlv_iter_next+0x18>
        return -1;
    7806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    780a:	b003      	add	sp, #12
    780c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    7810:	6803      	ldr	r3, [r0, #0]
    7812:	2b00      	cmp	r3, #0
    7814:	d0f7      	beq.n	7806 <bootutil_tlv_iter_next+0xe>
    7816:	6843      	ldr	r3, [r0, #4]
    7818:	2b00      	cmp	r3, #0
    781a:	d0f4      	beq.n	7806 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    781c:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    7820:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    7824:	429a      	cmp	r2, r3
    7826:	d216      	bcs.n	7856 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    7828:	6823      	ldr	r3, [r4, #0]
    782a:	895b      	ldrh	r3, [r3, #10]
    782c:	b123      	cbz	r3, 7838 <bootutil_tlv_iter_next+0x40>
    782e:	68e3      	ldr	r3, [r4, #12]
    7830:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    7832:	bf04      	itt	eq
    7834:	3304      	addeq	r3, #4
    7836:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    7838:	2304      	movs	r3, #4
    783a:	6921      	ldr	r1, [r4, #16]
    783c:	6860      	ldr	r0, [r4, #4]
    783e:	eb0d 0203 	add.w	r2, sp, r3
    7842:	f000 fc2c 	bl	809e <flash_area_read>
        if (rc) {
    7846:	2800      	cmp	r0, #0
    7848:	d1dd      	bne.n	7806 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    784a:	7aa3      	ldrb	r3, [r4, #10]
    784c:	6925      	ldr	r5, [r4, #16]
    784e:	b123      	cbz	r3, 785a <bootutil_tlv_iter_next+0x62>
    7850:	68e3      	ldr	r3, [r4, #12]
    7852:	42ab      	cmp	r3, r5
    7854:	d801      	bhi.n	785a <bootutil_tlv_iter_next+0x62>
            return 1;
    7856:	2001      	movs	r0, #1
    7858:	e7d7      	b.n	780a <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    785a:	8921      	ldrh	r1, [r4, #8]
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    785c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    7860:	4549      	cmp	r1, r9
    7862:	f102 0304 	add.w	r3, r2, #4
    7866:	d003      	beq.n	7870 <bootutil_tlv_iter_next+0x78>
    7868:	f8bd c004 	ldrh.w	ip, [sp, #4]
    786c:	458c      	cmp	ip, r1
    786e:	d10b      	bne.n	7888 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    7870:	b116      	cbz	r6, 7878 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    7872:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7876:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    7878:	3504      	adds	r5, #4
    787a:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    787c:	f8a8 2000 	strh.w	r2, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    7880:	6922      	ldr	r2, [r4, #16]
    7882:	4413      	add	r3, r2
    7884:	6123      	str	r3, [r4, #16]
            return 0;
    7886:	e7c0      	b.n	780a <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    7888:	442b      	add	r3, r5
    788a:	6123      	str	r3, [r4, #16]
    788c:	e7c8      	b.n	7820 <bootutil_tlv_iter_next+0x28>

0000788e <bootutil_read_bigint>:
{
    788e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7890:	460c      	mov	r4, r1
    7892:	4606      	mov	r6, r0
    7894:	4611      	mov	r1, r2
    if (mbedtls_asn1_get_tag(cp, end, &len, MBEDTLS_ASN1_INTEGER)) {
    7896:	2302      	movs	r3, #2
    7898:	4620      	mov	r0, r4
    789a:	aa01      	add	r2, sp, #4
    789c:	f000 fa40 	bl	7d20 <mbedtls_asn1_get_tag>
    78a0:	4605      	mov	r5, r0
    78a2:	b9e8      	cbnz	r0, 78e0 <bootutil_read_bigint+0x52>
    if (len >= NUM_ECC_BYTES) {
    78a4:	9a01      	ldr	r2, [sp, #4]
    78a6:	2a1f      	cmp	r2, #31
    78a8:	d90e      	bls.n	78c8 <bootutil_read_bigint+0x3a>
        memcpy(i, *cp + len - NUM_ECC_BYTES, NUM_ECC_BYTES);
    78aa:	f1a2 0120 	sub.w	r1, r2, #32
    78ae:	4630      	mov	r0, r6
    78b0:	2220      	movs	r2, #32
    78b2:	6823      	ldr	r3, [r4, #0]
    78b4:	4419      	add	r1, r3
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    78b6:	f000 ff4d 	bl	8754 <memcpy>
    *cp += len;
    78ba:	6823      	ldr	r3, [r4, #0]
    78bc:	9a01      	ldr	r2, [sp, #4]
    78be:	4413      	add	r3, r2
    78c0:	6023      	str	r3, [r4, #0]
}
    78c2:	4628      	mov	r0, r5
    78c4:	b002      	add	sp, #8
    78c6:	bd70      	pop	{r4, r5, r6, pc}
        memset(i, 0, NUM_ECC_BYTES - len);
    78c8:	4601      	mov	r1, r0
    78ca:	f1c2 0220 	rsb	r2, r2, #32
    78ce:	4630      	mov	r0, r6
    78d0:	f000 ff4b 	bl	876a <memset>
        memcpy(i + NUM_ECC_BYTES - len, *cp, len);
    78d4:	9a01      	ldr	r2, [sp, #4]
    78d6:	6821      	ldr	r1, [r4, #0]
    78d8:	f1c2 0020 	rsb	r0, r2, #32
    78dc:	4430      	add	r0, r6
    78de:	e7ea      	b.n	78b6 <bootutil_read_bigint+0x28>
        return -3;
    78e0:	f06f 0502 	mvn.w	r5, #2
    78e4:	e7ed      	b.n	78c2 <bootutil_read_bigint+0x34>

000078e6 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    78e6:	f000 bf0c 	b.w	8702 <memcmp>

000078ea <boot_trailer_sz>:
    return BOOT_STATUS_MAX_ENTRIES * boot_status_entry_sz(min_write_sz);
    78ea:	f44f 7340 	mov.w	r3, #768	; 0x300
    78ee:	4358      	muls	r0, r3
}
    78f0:	3030      	adds	r0, #48	; 0x30
    78f2:	4770      	bx	lr

000078f4 <boot_status_entries>:
	return fa->fa_id;
    78f4:	780b      	ldrb	r3, [r1, #0]
    if (flash_area_get_id(fap) == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    78f6:	2b03      	cmp	r3, #3
    78f8:	d006      	beq.n	7908 <boot_status_entries+0x14>
    return -1;
    78fa:	2b09      	cmp	r3, #9
    78fc:	bf0c      	ite	eq
    78fe:	f44f 7040 	moveq.w	r0, #768	; 0x300
    7902:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    7906:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    7908:	f44f 7040 	mov.w	r0, #768	; 0x300
}
    790c:	4770      	bx	lr

0000790e <boot_status_off>:
{
    790e:	b510      	push	{r4, lr}
    7910:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    7912:	f000 fc05 	bl	8120 <flash_area_align>
}
    7916:	f44f 7240 	mov.w	r2, #768	; 0x300
    return flash_area_get_size(fap) - off_from_end;
    791a:	68a3      	ldr	r3, [r4, #8]
    791c:	3b30      	subs	r3, #48	; 0x30
}
    791e:	fb02 3010 	mls	r0, r2, r0, r3
    7922:	bd10      	pop	{r4, pc}

00007924 <boot_write_copy_done>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    7924:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)(flash_area_get_off(fap) + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    7926:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    7928:	3918      	subs	r1, #24
    792a:	f021 0107 	bic.w	r1, r1, #7
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    792e:	3908      	subs	r1, #8
    7930:	f001 bae1 	b.w	8ef6 <boot_write_trailer_flag>

00007934 <boot_write_swap_size>:
}

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    7934:	b513      	push	{r0, r1, r4, lr}
    7936:	4604      	mov	r4, r0
    7938:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    793a:	f001 fa79 	bl	8e30 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 flash_area_get_id(fap), (unsigned long)off,
                 (unsigned long)flash_area_get_off(fap) + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    793e:	2304      	movs	r3, #4
    7940:	f1a0 0108 	sub.w	r1, r0, #8
    7944:	eb0d 0203 	add.w	r2, sp, r3
    7948:	4620      	mov	r0, r4
    794a:	f001 faa8 	bl	8e9e <boot_write_trailer>
}
    794e:	b002      	add	sp, #8
    7950:	bd10      	pop	{r4, pc}

00007952 <boot_read_image_headers>:
{
    7952:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7954:	4613      	mov	r3, r2
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    7956:	9201      	str	r2, [sp, #4]
{
    7958:	460e      	mov	r6, r1
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    795a:	4602      	mov	r2, r0
    795c:	2100      	movs	r1, #0
{
    795e:	4605      	mov	r5, r0
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    7960:	f7f9 fa7a 	bl	e58 <boot_read_image_header>
        if (rc != 0) {
    7964:	4604      	mov	r4, r0
    7966:	b950      	cbnz	r0, 797e <boot_read_image_headers+0x2c>
            rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    7968:	2101      	movs	r1, #1
    796a:	4628      	mov	r0, r5
    796c:	9b01      	ldr	r3, [sp, #4]
    796e:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    7972:	f7f9 fa71 	bl	e58 <boot_read_image_header>
        if (rc != 0) {
    7976:	b110      	cbz	r0, 797e <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    7978:	2e00      	cmp	r6, #0
    797a:	bf18      	it	ne
    797c:	4604      	movne	r4, r0
}
    797e:	4620      	mov	r0, r4
    7980:	b002      	add	sp, #8
    7982:	bd70      	pop	{r4, r5, r6, pc}

00007984 <boot_read_image_size.isra.0>:
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    7984:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7986:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    7988:	2000      	movs	r0, #0
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
    798a:	460c      	mov	r4, r1
    798c:	4616      	mov	r6, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    798e:	f7ff fedb 	bl	7748 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    7992:	4669      	mov	r1, sp
    7994:	b2c0      	uxtb	r0, r0
    7996:	f7fa fa25 	bl	1de4 <flash_area_open>
    if (rc != 0) {
    799a:	bb30      	cbnz	r0, 79ea <boot_read_image_size.isra.0+0x66>
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    799c:	212c      	movs	r1, #44	; 0x2c
    799e:	fb01 5404 	mla	r4, r1, r4, r5
    79a2:	8921      	ldrh	r1, [r4, #8]
    79a4:	68e3      	ldr	r3, [r4, #12]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    79a6:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    79a8:	18cd      	adds	r5, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    79aa:	2304      	movs	r3, #4
    79ac:	4629      	mov	r1, r5
    79ae:	eb0d 0203 	add.w	r2, sp, r3
    79b2:	f000 fb74 	bl	809e <flash_area_read>
    79b6:	b9c0      	cbnz	r0, 79ea <boot_read_image_size.isra.0+0x66>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    79b8:	f646 1308 	movw	r3, #26888	; 0x6908
    79bc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    79c0:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    79c2:	429a      	cmp	r2, r3
    79c4:	d116      	bne.n	79f4 <boot_read_image_size.isra.0+0x70>
        if (protect_tlv_size != info.it_tlv_tot) {
    79c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    79ca:	429c      	cmp	r4, r3
    79cc:	d10d      	bne.n	79ea <boot_read_image_size.isra.0+0x66>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    79ce:	2304      	movs	r3, #4
    79d0:	9800      	ldr	r0, [sp, #0]
    79d2:	eb0d 0203 	add.w	r2, sp, r3
    79d6:	1961      	adds	r1, r4, r5
    79d8:	f000 fb61 	bl	809e <flash_area_read>
    79dc:	b928      	cbnz	r0, 79ea <boot_read_image_size.isra.0+0x66>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    79de:	f646 1307 	movw	r3, #26887	; 0x6907
    79e2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    79e6:	429a      	cmp	r2, r3
    79e8:	d007      	beq.n	79fa <boot_read_image_size.isra.0+0x76>
    flash_area_close(fap);
    79ea:	9800      	ldr	r0, [sp, #0]
    79ec:	f000 fb56 	bl	809c <flash_area_close>
}
    79f0:	b002      	add	sp, #8
    79f2:	bd70      	pop	{r4, r5, r6, pc}
    } else if (protect_tlv_size != 0) {
    79f4:	2c00      	cmp	r4, #0
    79f6:	d0f2      	beq.n	79de <boot_read_image_size.isra.0+0x5a>
    79f8:	e7f7      	b.n	79ea <boot_read_image_size.isra.0+0x66>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    79fa:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    79fe:	4421      	add	r1, r4
    7a00:	4429      	add	r1, r5
    7a02:	6031      	str	r1, [r6, #0]
    rc = 0;
    7a04:	e7f1      	b.n	79ea <boot_read_image_size.isra.0+0x66>

00007a06 <boot_read_sectors>:
{
    7a06:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    7a08:	f44f 7580 	mov.w	r5, #256	; 0x100
{
    7a0c:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7a0e:	6a42      	ldr	r2, [r0, #36]	; 0x24
    7a10:	a901      	add	r1, sp, #4
    7a12:	2003      	movs	r0, #3
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    7a14:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7a16:	f7fa fa0d 	bl	1e34 <flash_area_get_sectors>
    if (rc != 0) {
    7a1a:	b958      	cbnz	r0, 7a34 <boot_read_sectors+0x2e>
    *out_num_sectors = num_sectors;
    7a1c:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7a1e:	2009      	movs	r0, #9
    7a20:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    7a22:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7a24:	a901      	add	r1, sp, #4
    uint32_t num_sectors = BOOT_MAX_IMG_SECTORS;
    7a26:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    7a28:	f7fa fa04 	bl	1e34 <flash_area_get_sectors>
    if (rc != 0) {
    7a2c:	4605      	mov	r5, r0
    7a2e:	b128      	cbz	r0, 7a3c <boot_read_sectors+0x36>
        return BOOT_EFLASH_SEC;
    7a30:	2509      	movs	r5, #9
    7a32:	e000      	b.n	7a36 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    7a34:	2501      	movs	r5, #1
}
    7a36:	4628      	mov	r0, r5
    7a38:	b003      	add	sp, #12
    7a3a:	bd30      	pop	{r4, r5, pc}
    *out_num_sectors = num_sectors;
    7a3c:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    7a3e:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    7a40:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    7a42:	f000 fb6d 	bl	8120 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    7a46:	65e0      	str	r0, [r4, #92]	; 0x5c
    return 0;
    7a48:	e7f5      	b.n	7a36 <boot_read_sectors+0x30>

00007a4a <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    7a4a:	2301      	movs	r3, #1
    7a4c:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    7a4e:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    7a52:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    7a54:	2300      	movs	r3, #0
    bs->source = 0;
    7a56:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    7a5a:	4770      	bx	lr

00007a5c <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    7a5c:	7943      	ldrb	r3, [r0, #5]
    7a5e:	2b01      	cmp	r3, #1
    7a60:	d107      	bne.n	7a72 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    7a62:	6803      	ldr	r3, [r0, #0]
    7a64:	2b01      	cmp	r3, #1
    7a66:	d104      	bne.n	7a72 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    7a68:	7900      	ldrb	r0, [r0, #4]
    7a6a:	1e43      	subs	r3, r0, #1
    7a6c:	4258      	negs	r0, r3
    7a6e:	4158      	adcs	r0, r3
    7a70:	4770      	bx	lr
    7a72:	2000      	movs	r0, #0
}
    7a74:	4770      	bx	lr

00007a76 <boot_write_status>:
{
    7a76:	b570      	push	{r4, r5, r6, lr}
    7a78:	b086      	sub	sp, #24
    7a7a:	4606      	mov	r6, r0
    7a7c:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    7a7e:	2003      	movs	r0, #3
    7a80:	a903      	add	r1, sp, #12
    7a82:	f7fa f9af 	bl	1de4 <flash_area_open>
    if (rc != 0) {
    7a86:	bb30      	cbnz	r0, 7ad6 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    7a88:	9803      	ldr	r0, [sp, #12]
    7a8a:	f7ff ff40 	bl	790e <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    7a8e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    7a90:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    7a92:	4628      	mov	r0, r5
    7a94:	f000 f8e5 	bl	7c62 <boot_status_internal_off>
    off = boot_status_off(fap) +
    7a98:	4404      	add	r4, r0
    align = flash_area_align(fap);
    7a9a:	9803      	ldr	r0, [sp, #12]
    7a9c:	f000 fb40 	bl	8120 <flash_area_align>
    7aa0:	9001      	str	r0, [sp, #4]
    erased_val = flash_area_erased_val(fap);
    7aa2:	9803      	ldr	r0, [sp, #12]
    7aa4:	f000 fb43 	bl	812e <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    7aa8:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    7aaa:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    7aac:	a804      	add	r0, sp, #16
    7aae:	f000 fe5c 	bl	876a <memset>
    buf[0] = bs->state;
    7ab2:	792a      	ldrb	r2, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    7ab4:	4621      	mov	r1, r4
    buf[0] = bs->state;
    7ab6:	f88d 2010 	strb.w	r2, [sp, #16]
    rc = flash_area_write(fap, off, buf, align);
    7aba:	9b01      	ldr	r3, [sp, #4]
    7abc:	9803      	ldr	r0, [sp, #12]
    7abe:	aa04      	add	r2, sp, #16
    7ac0:	f000 fb02 	bl	80c8 <flash_area_write>
    if (rc != 0) {
    7ac4:	1e04      	subs	r4, r0, #0
    flash_area_close(fap);
    7ac6:	9803      	ldr	r0, [sp, #12]
    if (rc != 0) {
    7ac8:	bf18      	it	ne
    7aca:	2401      	movne	r4, #1
    flash_area_close(fap);
    7acc:	f000 fae6 	bl	809c <flash_area_close>
}
    7ad0:	4620      	mov	r0, r4
    7ad2:	b006      	add	sp, #24
    7ad4:	bd70      	pop	{r4, r5, r6, pc}
        return BOOT_EFLASH;
    7ad6:	2401      	movs	r4, #1
    7ad8:	e7fa      	b.n	7ad0 <boot_write_status+0x5a>

00007ada <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    7ada:	f000 bb0a 	b.w	80f2 <flash_area_erase>

00007ade <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    7ade:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ae2:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", flash_area_get_id(fap));

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    7ae4:	2100      	movs	r1, #0
{
    7ae6:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    7ae8:	4608      	mov	r0, r1
    7aea:	f7ff fe2d 	bl	7748 <flash_area_id_from_multi_image_slot>
    7aee:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    7af0:	2101      	movs	r1, #1
    7af2:	2000      	movs	r0, #0
    7af4:	f7ff fe28 	bl	7748 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (flash_area_get_id(fap) == fa_id_primary) {
    7af8:	7833      	ldrb	r3, [r6, #0]
    7afa:	429c      	cmp	r4, r3
    7afc:	d021      	beq.n	7b42 <swap_erase_trailer_sectors+0x64>
        slot = BOOT_PRIMARY_SLOT;
    } else if (flash_area_get_id(fap) == fa_id_secondary) {
    7afe:	4298      	cmp	r0, r3
    7b00:	d121      	bne.n	7b46 <swap_erase_trailer_sectors+0x68>
        slot = BOOT_SECONDARY_SLOT;
    7b02:	2501      	movs	r5, #1
    return BOOT_IMG(state, slot).num_sectors;
    7b04:	232c      	movs	r3, #44	; 0x2c
    7b06:	fb03 7505 	mla	r5, r3, r5, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    7b0a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    7b0c:	6aac      	ldr	r4, [r5, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    7b0e:	f7ff feec 	bl	78ea <boot_trailer_sz>
    total_sz = 0;
    7b12:	f04f 0800 	mov.w	r8, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    7b16:	4607      	mov	r7, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    7b18:	3c01      	subs	r4, #1
    return flash_sector_get_size(&BOOT_IMG(state, slot).sectors[sector]);
    7b1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    7b1c:	4630      	mov	r0, r6
    7b1e:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    return flash_sector_get_off(&BOOT_IMG(state, slot).sectors[sector]) -
    7b22:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
	return fs->fs_size;
    7b26:	f8d2 9004 	ldr.w	r9, [r2, #4]
    7b2a:	681b      	ldr	r3, [r3, #0]
    7b2c:	464a      	mov	r2, r9
    7b2e:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    7b30:	44c8      	add	r8, r9
        rc = boot_erase_region(fap, off, sz);
    7b32:	f7ff ffd2 	bl	7ada <boot_erase_region>
    } while (total_sz < trailer_sz);
    7b36:	45b8      	cmp	r8, r7
        sector--;
    7b38:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
    } while (total_sz < trailer_sz);
    7b3c:	d3ed      	bcc.n	7b1a <swap_erase_trailer_sectors+0x3c>

    return rc;
}
    7b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    7b42:	2500      	movs	r5, #0
    7b44:	e7de      	b.n	7b04 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    7b46:	2001      	movs	r0, #1
    7b48:	e7f9      	b.n	7b3e <swap_erase_trailer_sectors+0x60>

00007b4a <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    7b4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7b4c:	4615      	mov	r5, r2
    7b4e:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", flash_area_get_id(fap));

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    7b50:	2009      	movs	r0, #9
    7b52:	4669      	mov	r1, sp
    7b54:	f001 f9e6 	bl	8f24 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    7b58:	79e9      	ldrb	r1, [r5, #7]
    7b5a:	2901      	cmp	r1, #1
    7b5c:	d003      	beq.n	7b66 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    7b5e:	2200      	movs	r2, #0
    7b60:	4620      	mov	r0, r4
    7b62:	f001 f9f3 	bl	8f4c <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    7b66:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7b6a:	2b01      	cmp	r3, #1
    7b6c:	d102      	bne.n	7b74 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    7b6e:	4620      	mov	r0, r4
    7b70:	f001 f9cb 	bl	8f0a <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    7b74:	68a9      	ldr	r1, [r5, #8]
    7b76:	4620      	mov	r0, r4
    7b78:	f7ff fedc 	bl	7934 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    7b7c:	4620      	mov	r0, r4
    7b7e:	f7fc fc3f 	bl	4400 <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    7b82:	2000      	movs	r0, #0
    7b84:	b003      	add	sp, #12
    7b86:	bd30      	pop	{r4, r5, pc}

00007b88 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    7b88:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7b8a:	460d      	mov	r5, r1
    7b8c:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    7b8e:	f7f9 fa4f 	bl	1030 <swap_status_source>
    7b92:	4604      	mov	r4, r0
    7b94:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    7b96:	b358      	cbz	r0, 7bf0 <swap_read_status+0x68>
    7b98:	2802      	cmp	r0, #2
    7b9a:	d12e      	bne.n	7bfa <swap_read_status+0x72>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    7b9c:	2003      	movs	r0, #3
    7b9e:	a901      	add	r1, sp, #4
    7ba0:	f7fa f920 	bl	1de4 <flash_area_open>
    if (rc != 0) {
    7ba4:	bb58      	cbnz	r0, 7bfe <swap_read_status+0x76>
        return BOOT_EFLASH;
    }

    rc = swap_read_status_bytes(fap, state, bs);
    7ba6:	462a      	mov	r2, r5
    7ba8:	4631      	mov	r1, r6
    7baa:	9801      	ldr	r0, [sp, #4]
    7bac:	f7f9 f9a2 	bl	ef4 <swap_read_status_bytes>
    if (rc == 0) {
    7bb0:	4604      	mov	r4, r0
    7bb2:	b9d0      	cbnz	r0, 7bea <swap_read_status+0x62>
        off = boot_swap_info_off(fap);
    7bb4:	9801      	ldr	r0, [sp, #4]
    7bb6:	f001 f93b 	bl	8e30 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    7bba:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    7bbc:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    7bbe:	f10d 0203 	add.w	r2, sp, #3
    7bc2:	9801      	ldr	r0, [sp, #4]
    7bc4:	f000 fa6b 	bl	809e <flash_area_read>
        if (rc != 0) {
    7bc8:	4604      	mov	r4, r0
    7bca:	b9a0      	cbnz	r0, 7bf6 <swap_read_status+0x6e>
            rc = BOOT_EFLASH;
            goto done;
        }

        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    7bcc:	2201      	movs	r2, #1
    7bce:	9801      	ldr	r0, [sp, #4]
    7bd0:	f10d 0103 	add.w	r1, sp, #3
    7bd4:	f001 f940 	bl	8e58 <bootutil_buffer_is_erased>
    7bd8:	b110      	cbz	r0, 7be0 <swap_read_status+0x58>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    7bda:	2301      	movs	r3, #1
    7bdc:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
        }

        /* Extract the swap type info */
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    7be0:	f89d 3003 	ldrb.w	r3, [sp, #3]
    7be4:	f003 030f 	and.w	r3, r3, #15
    7be8:	71eb      	strb	r3, [r5, #7]
    }

done:
    flash_area_close(fap);
    7bea:	9801      	ldr	r0, [sp, #4]
    7bec:	f000 fa56 	bl	809c <flash_area_close>

    return rc;
}
    7bf0:	4620      	mov	r0, r4
    7bf2:	b002      	add	sp, #8
    7bf4:	bd70      	pop	{r4, r5, r6, pc}
            rc = BOOT_EFLASH;
    7bf6:	2401      	movs	r4, #1
    7bf8:	e7f7      	b.n	7bea <swap_read_status+0x62>
    switch (bs->source) {
    7bfa:	2407      	movs	r4, #7
    7bfc:	e7f8      	b.n	7bf0 <swap_read_status+0x68>
        return BOOT_EFLASH;
    7bfe:	2401      	movs	r4, #1
    7c00:	e7f6      	b.n	7bf0 <swap_read_status+0x68>

00007c02 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    7c02:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    7c04:	2003      	movs	r0, #3
    7c06:	a901      	add	r1, sp, #4
    7c08:	f7fa f8ec 	bl	1de4 <flash_area_open>
            &fap);
    if (rc != 0) {
    7c0c:	b948      	cbnz	r0, 7c22 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    7c0e:	9801      	ldr	r0, [sp, #4]
    7c10:	f7ff fe88 	bl	7924 <boot_write_copy_done>
    7c14:	4604      	mov	r4, r0
    flash_area_close(fap);
    7c16:	9801      	ldr	r0, [sp, #4]
    7c18:	f000 fa40 	bl	809c <flash_area_close>
    return rc;
}
    7c1c:	4620      	mov	r0, r4
    7c1e:	b002      	add	sp, #8
    7c20:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    7c22:	2401      	movs	r4, #1
    7c24:	e7fa      	b.n	7c1c <swap_set_copy_done+0x1a>

00007c26 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    7c26:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    7c28:	2003      	movs	r0, #3
    7c2a:	a901      	add	r1, sp, #4
    7c2c:	f7fa f8da 	bl	1de4 <flash_area_open>
            &fap);
    if (rc != 0) {
    7c30:	b9a8      	cbnz	r0, 7c5e <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    7c32:	9801      	ldr	r0, [sp, #4]
    7c34:	a902      	add	r1, sp, #8
    7c36:	f7fc fc03 	bl	4440 <boot_read_swap_state>
    if (rc != 0) {
    7c3a:	4604      	mov	r4, r0
    7c3c:	b968      	cbnz	r0, 7c5a <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    7c3e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7c42:	2b03      	cmp	r3, #3
    7c44:	d103      	bne.n	7c4e <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    7c46:	9801      	ldr	r0, [sp, #4]
    7c48:	f001 f95f 	bl	8f0a <boot_write_image_ok>
    7c4c:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    7c4e:	9801      	ldr	r0, [sp, #4]
    7c50:	f000 fa24 	bl	809c <flash_area_close>
    return rc;
}
    7c54:	4620      	mov	r0, r4
    7c56:	b004      	add	sp, #16
    7c58:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    7c5a:	2401      	movs	r4, #1
    7c5c:	e7f7      	b.n	7c4e <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    7c5e:	2401      	movs	r4, #1
    7c60:	e7f8      	b.n	7c54 <swap_set_image_ok+0x2e>

00007c62 <boot_status_internal_off>:
{
    7c62:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    7c64:	7943      	ldrb	r3, [r0, #5]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    7c66:	7902      	ldrb	r2, [r0, #4]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    7c68:	2b01      	cmp	r3, #1
    7c6a:	bf0a      	itet	eq
    7c6c:	2301      	moveq	r3, #1
    7c6e:	2302      	movne	r3, #2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    7c70:	2500      	moveq	r5, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    7c72:	fb01 f403 	mul.w	r4, r1, r3
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    7c76:	6803      	ldr	r3, [r0, #0]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    7c78:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    7c7c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    7c80:	fb04 f303 	mul.w	r3, r4, r3
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    7c84:	bf18      	it	ne
    7c86:	020d      	lslne	r5, r1, #8
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    7c88:	fb01 3102 	mla	r1, r1, r2, r3
}
    7c8c:	1948      	adds	r0, r1, r5
    7c8e:	bd30      	pop	{r4, r5, pc}

00007c90 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    7c90:	6803      	ldr	r3, [r0, #0]
{
    7c92:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    7c94:	1acd      	subs	r5, r1, r3
    7c96:	2d00      	cmp	r5, #0
    7c98:	dd0d      	ble.n	7cb6 <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    7c9a:	f993 6000 	ldrsb.w	r6, [r3]
    7c9e:	781c      	ldrb	r4, [r3, #0]
    7ca0:	2e00      	cmp	r6, #0
    7ca2:	db0b      	blt.n	7cbc <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    7ca4:	1c5c      	adds	r4, r3, #1
    7ca6:	6004      	str	r4, [r0, #0]
    7ca8:	781b      	ldrb	r3, [r3, #0]
    7caa:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    7cac:	6803      	ldr	r3, [r0, #0]
    7cae:	1ac9      	subs	r1, r1, r3
    7cb0:	6813      	ldr	r3, [r2, #0]
    7cb2:	428b      	cmp	r3, r1
    7cb4:	d932      	bls.n	7d1c <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7cb6:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    7cba:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    7cbc:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    7cc0:	3c01      	subs	r4, #1
    7cc2:	2c03      	cmp	r4, #3
    7cc4:	d827      	bhi.n	7d16 <mbedtls_asn1_get_len+0x86>
    7cc6:	e8df f004 	tbb	[pc, r4]
    7cca:	0902      	.short	0x0902
    7ccc:	1e12      	.short	0x1e12
            if( ( end - *p ) < 2 )
    7cce:	2d01      	cmp	r5, #1
    7cd0:	d0f1      	beq.n	7cb6 <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    7cd2:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    7cd4:	3302      	adds	r3, #2
            *len = (*p)[1];
    7cd6:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    7cd8:	6003      	str	r3, [r0, #0]
            break;
    7cda:	e7e7      	b.n	7cac <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    7cdc:	2d02      	cmp	r5, #2
    7cde:	ddea      	ble.n	7cb6 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    7ce0:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    7ce4:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    7ce6:	ba64      	rev16	r4, r4
    7ce8:	b2a4      	uxth	r4, r4
    7cea:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    7cec:	e7f4      	b.n	7cd8 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    7cee:	2d03      	cmp	r5, #3
    7cf0:	dde1      	ble.n	7cb6 <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7cf2:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    7cf4:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7cf6:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    7cf8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7cfc:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    7cfe:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    7d00:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    7d02:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    7d04:	e7e8      	b.n	7cd8 <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    7d06:	2d04      	cmp	r5, #4
    7d08:	ddd5      	ble.n	7cb6 <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    7d0a:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    7d0e:	3305      	adds	r3, #5
    7d10:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    7d12:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    7d14:	e7e0      	b.n	7cd8 <mbedtls_asn1_get_len+0x48>
        switch( **p & 0x7F )
    7d16:	f06f 0063 	mvn.w	r0, #99	; 0x63
    7d1a:	e7ce      	b.n	7cba <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    7d1c:	2000      	movs	r0, #0
    7d1e:	e7cc      	b.n	7cba <mbedtls_asn1_get_len+0x2a>

00007d20 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    7d20:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    7d22:	6804      	ldr	r4, [r0, #0]
    7d24:	1b0e      	subs	r6, r1, r4
    7d26:	2e00      	cmp	r6, #0
    7d28:	dd07      	ble.n	7d3a <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    7d2a:	7826      	ldrb	r6, [r4, #0]
    7d2c:	429e      	cmp	r6, r3
    7d2e:	d108      	bne.n	7d42 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    7d30:	3401      	adds	r4, #1
    7d32:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    7d34:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    7d36:	f7ff bfab 	b.w	7c90 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7d3a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    7d3e:	bc70      	pop	{r4, r5, r6}
    7d40:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    7d42:	f06f 0061 	mvn.w	r0, #97	; 0x61
    7d46:	e7fa      	b.n	7d3e <mbedtls_asn1_get_tag+0x1e>

00007d48 <mbedtls_asn1_get_bitstring_null>:
/*
 * Get a bit string without unused bits
 */
int mbedtls_asn1_get_bitstring_null( unsigned char **p, const unsigned char *end,
                             size_t *len )
{
    7d48:	b538      	push	{r3, r4, r5, lr}
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;

    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    7d4a:	2303      	movs	r3, #3
{
    7d4c:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, len, MBEDTLS_ASN1_BIT_STRING ) ) != 0 )
    7d4e:	f7ff ffe7 	bl	7d20 <mbedtls_asn1_get_tag>
    7d52:	b918      	cbnz	r0, 7d5c <mbedtls_asn1_get_bitstring_null+0x14>
        return( ret );

    if( *len == 0 )
    7d54:	6813      	ldr	r3, [r2, #0]
    7d56:	b913      	cbnz	r3, 7d5e <mbedtls_asn1_get_bitstring_null+0x16>
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    7d58:	f06f 0067 	mvn.w	r0, #103	; 0x67
    if( **p != 0 )
        return( MBEDTLS_ERR_ASN1_INVALID_DATA );
    ++( *p );

    return( 0 );
}
    7d5c:	bd38      	pop	{r3, r4, r5, pc}
    --( *len );
    7d5e:	3b01      	subs	r3, #1
    7d60:	6013      	str	r3, [r2, #0]
    if( **p != 0 )
    7d62:	6823      	ldr	r3, [r4, #0]
    7d64:	781a      	ldrb	r2, [r3, #0]
    7d66:	2a00      	cmp	r2, #0
    7d68:	d1f6      	bne.n	7d58 <mbedtls_asn1_get_bitstring_null+0x10>
    ++( *p );
    7d6a:	3301      	adds	r3, #1
    7d6c:	6023      	str	r3, [r4, #0]
    return( 0 );
    7d6e:	e7f5      	b.n	7d5c <mbedtls_asn1_get_bitstring_null+0x14>

00007d70 <mbedtls_asn1_get_alg>:
}

int mbedtls_asn1_get_alg( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_asn1_buf *alg, mbedtls_asn1_buf *params )
{
    7d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    7d74:	4690      	mov	r8, r2
    7d76:	461f      	mov	r7, r3
    int ret = MBEDTLS_ERR_ERROR_CORRUPTION_DETECTED;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    7d78:	aa01      	add	r2, sp, #4
    7d7a:	2330      	movs	r3, #48	; 0x30
{
    7d7c:	4605      	mov	r5, r0
    7d7e:	4689      	mov	r9, r1
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len,
    7d80:	f7ff ffce 	bl	7d20 <mbedtls_asn1_get_tag>
    7d84:	4604      	mov	r4, r0
    7d86:	b9f8      	cbnz	r0, 7dc8 <mbedtls_asn1_get_alg+0x58>
            MBEDTLS_ASN1_CONSTRUCTED | MBEDTLS_ASN1_SEQUENCE ) ) != 0 )
        return( ret );

    if( ( end - *p ) < 1 )
    7d88:	682e      	ldr	r6, [r5, #0]
    7d8a:	eba9 0906 	sub.w	r9, r9, r6
    7d8e:	f1b9 0f00 	cmp.w	r9, #0
    7d92:	dd35      	ble.n	7e00 <mbedtls_asn1_get_alg+0x90>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    alg->tag = **p;
    7d94:	4642      	mov	r2, r8
    end = *p + len;
    7d96:	9901      	ldr	r1, [sp, #4]
    alg->tag = **p;
    7d98:	7833      	ldrb	r3, [r6, #0]
    end = *p + len;
    7d9a:	440e      	add	r6, r1
    alg->tag = **p;
    7d9c:	f842 3b04 	str.w	r3, [r2], #4

    if( ( ret = mbedtls_asn1_get_tag( p, end, &alg->len, MBEDTLS_ASN1_OID ) ) != 0 )
    7da0:	4631      	mov	r1, r6
    7da2:	2306      	movs	r3, #6
    7da4:	4628      	mov	r0, r5
    7da6:	f7ff ffbb 	bl	7d20 <mbedtls_asn1_get_tag>
    7daa:	4604      	mov	r4, r0
    7dac:	b960      	cbnz	r0, 7dc8 <mbedtls_asn1_get_alg+0x58>
        return( ret );

    alg->p = *p;
    7dae:	682a      	ldr	r2, [r5, #0]
    *p += alg->len;
    7db0:	f8d8 1004 	ldr.w	r1, [r8, #4]
    alg->p = *p;
    7db4:	f8c8 2008 	str.w	r2, [r8, #8]
    *p += alg->len;
    7db8:	1853      	adds	r3, r2, r1

    if( *p == end )
    7dba:	42b3      	cmp	r3, r6
    *p += alg->len;
    7dbc:	602b      	str	r3, [r5, #0]
    if( *p == end )
    7dbe:	d107      	bne.n	7dd0 <mbedtls_asn1_get_alg+0x60>
    {
        mbedtls_platform_zeroize( params, sizeof(mbedtls_asn1_buf) );
    7dc0:	210c      	movs	r1, #12
    7dc2:	4638      	mov	r0, r7
    7dc4:	f7fe f978 	bl	60b8 <mbedtls_platform_zeroize>

    if( *p != end )
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );

    return( 0 );
}
    7dc8:	4620      	mov	r0, r4
    7dca:	b003      	add	sp, #12
    7dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    params->tag = **p;
    7dd0:	5c51      	ldrb	r1, [r2, r1]
    7dd2:	463a      	mov	r2, r7
    (*p)++;
    7dd4:	3301      	adds	r3, #1
    params->tag = **p;
    7dd6:	f842 1b04 	str.w	r1, [r2], #4
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    7dda:	4628      	mov	r0, r5
    7ddc:	4631      	mov	r1, r6
    (*p)++;
    7dde:	602b      	str	r3, [r5, #0]
    if( ( ret = mbedtls_asn1_get_len( p, end, &params->len ) ) != 0 )
    7de0:	f7ff ff56 	bl	7c90 <mbedtls_asn1_get_len>
    7de4:	4604      	mov	r4, r0
    7de6:	2800      	cmp	r0, #0
    7de8:	d1ee      	bne.n	7dc8 <mbedtls_asn1_get_alg+0x58>
    params->p = *p;
    7dea:	682b      	ldr	r3, [r5, #0]
    *p += params->len;
    7dec:	687a      	ldr	r2, [r7, #4]
    params->p = *p;
    7dee:	60bb      	str	r3, [r7, #8]
    *p += params->len;
    7df0:	4413      	add	r3, r2
        return( MBEDTLS_ERR_ASN1_LENGTH_MISMATCH );
    7df2:	42b3      	cmp	r3, r6
    7df4:	bf0c      	ite	eq
    7df6:	4604      	moveq	r4, r0
    7df8:	f06f 0465 	mvnne.w	r4, #101	; 0x65
    *p += params->len;
    7dfc:	602b      	str	r3, [r5, #0]
    if( *p != end )
    7dfe:	e7e3      	b.n	7dc8 <mbedtls_asn1_get_alg+0x58>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    7e00:	f06f 045f 	mvn.w	r4, #95	; 0x5f
    7e04:	e7e0      	b.n	7dc8 <mbedtls_asn1_get_alg+0x58>

00007e06 <cc310_sha256_update>:
{
    7e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    7e08:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
{
    7e0c:	4605      	mov	r5, r0
    7e0e:	4614      	mov	r4, r2
    7e10:	af00      	add	r7, sp, #0
    if ((uint32_t) data < CONFIG_SRAM_BASE_ADDRESS) {
    7e12:	d210      	bcs.n	7e36 <cc310_sha256_update+0x30>
    7e14:	466e      	mov	r6, sp
        uint8_t stack_buffer[data_len];
    7e16:	1dd3      	adds	r3, r2, #7
    7e18:	f023 0307 	bic.w	r3, r3, #7
    7e1c:	ebad 0d03 	sub.w	sp, sp, r3
        memcpy(stack_buffer, data, block_len);
    7e20:	4668      	mov	r0, sp
    7e22:	f000 fc97 	bl	8754 <memcpy>
        nrf_cc310_bl_hash_sha256_update(ctx, stack_buffer, block_len);
    7e26:	4669      	mov	r1, sp
    7e28:	4622      	mov	r2, r4
    7e2a:	4628      	mov	r0, r5
    7e2c:	f7fe fba4 	bl	6578 <nrf_cc310_bl_hash_sha256_update>
    7e30:	46b5      	mov	sp, r6
};
    7e32:	46bd      	mov	sp, r7
    7e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrf_cc310_bl_hash_sha256_update(ctx, data, data_len);
    7e36:	f7fe fb9f 	bl	6578 <nrf_cc310_bl_hash_sha256_update>
};
    7e3a:	e7fa      	b.n	7e32 <cc310_sha256_update+0x2c>

00007e3c <crc16_itu_t>:
	return seed;
}

uint16_t crc16_itu_t(uint16_t seed, const uint8_t *src, size_t len)
{
	for (; len > 0; len--) {
    7e3c:	440a      	add	r2, r1
    7e3e:	428a      	cmp	r2, r1
    7e40:	d100      	bne.n	7e44 <crc16_itu_t+0x8>
		seed ^= seed << 12U;
		seed ^= (seed & 0xffU) << 5U;
	}

	return seed;
}
    7e42:	4770      	bx	lr
		seed ^= *src++;
    7e44:	f811 3b01 	ldrb.w	r3, [r1], #1
    7e48:	ba40      	rev16	r0, r0
    7e4a:	b280      	uxth	r0, r0
    7e4c:	4058      	eors	r0, r3
		seed ^= (seed & 0xffU) >> 4U;
    7e4e:	f3c0 1303 	ubfx	r3, r0, #4, #4
    7e52:	4058      	eors	r0, r3
		seed ^= seed << 12U;
    7e54:	ea80 3000 	eor.w	r0, r0, r0, lsl #12
    7e58:	b283      	uxth	r3, r0
		seed ^= (seed & 0xffU) << 5U;
    7e5a:	0158      	lsls	r0, r3, #5
    7e5c:	f400 50ff 	and.w	r0, r0, #8160	; 0x1fe0
    7e60:	4058      	eors	r0, r3
	for (; len > 0; len--) {
    7e62:	e7ec      	b.n	7e3e <crc16_itu_t+0x2>

00007e64 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    7e64:	b160      	cbz	r0, 7e80 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7e66:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7e68:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7e6c:	2b01      	cmp	r3, #1
    7e6e:	d003      	beq.n	7e78 <sys_notify_validate+0x14>
    7e70:	2b03      	cmp	r3, #3
    7e72:	d105      	bne.n	7e80 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    7e74:	6803      	ldr	r3, [r0, #0]
    7e76:	b11b      	cbz	r3, 7e80 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    7e78:	2300      	movs	r3, #0
    7e7a:	6083      	str	r3, [r0, #8]
    7e7c:	4618      	mov	r0, r3
    7e7e:	4770      	bx	lr
		return -EINVAL;
    7e80:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    7e84:	4770      	bx	lr

00007e86 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7e86:	2200      	movs	r2, #0
    7e88:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    7e8a:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    7e8c:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
    7e90:	2b03      	cmp	r3, #3
	sys_notify_generic_callback rv = NULL;
    7e92:	bf14      	ite	ne
    7e94:	4613      	movne	r3, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    7e96:	6803      	ldreq	r3, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7e98:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7e9a:	4618      	mov	r0, r3
    7e9c:	4770      	bx	lr

00007e9e <arch_printk_char_out>:
}
    7e9e:	2000      	movs	r0, #0
    7ea0:	4770      	bx	lr

00007ea2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    7ea2:	b40f      	push	{r0, r1, r2, r3}
    7ea4:	b507      	push	{r0, r1, r2, lr}
    7ea6:	a904      	add	r1, sp, #16
    7ea8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    7eac:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    7eae:	f7f9 fc45 	bl	173c <vprintk>

	va_end(ap);
}
    7eb2:	b003      	add	sp, #12
    7eb4:	f85d eb04 	ldr.w	lr, [sp], #4
    7eb8:	b004      	add	sp, #16
    7eba:	4770      	bx	lr

00007ebc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7ebc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    7ebe:	f013 0307 	ands.w	r3, r3, #7
    7ec2:	d105      	bne.n	7ed0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    7ec4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    7ec6:	2b00      	cmp	r3, #0
    7ec8:	bf0c      	ite	eq
    7eca:	2000      	moveq	r0, #0
    7ecc:	2003      	movne	r0, #3
    7ece:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7ed0:	2b02      	cmp	r3, #2
    7ed2:	d105      	bne.n	7ee0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    7ed4:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    7ed6:	2b00      	cmp	r3, #0
    7ed8:	bf14      	ite	ne
    7eda:	2000      	movne	r0, #0
    7edc:	2004      	moveq	r0, #4
    7ede:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7ee0:	2b01      	cmp	r3, #1
    7ee2:	d105      	bne.n	7ef0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    7ee4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	bf0c      	ite	eq
    7eea:	2000      	moveq	r0, #0
    7eec:	2005      	movne	r0, #5
    7eee:	4770      	bx	lr
	int evt = EVT_NOP;
    7ef0:	2000      	movs	r0, #0
}
    7ef2:	4770      	bx	lr

00007ef4 <notify_one>:
{
    7ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7ef6:	460d      	mov	r5, r1
    7ef8:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7efa:	4619      	mov	r1, r3
    7efc:	1d28      	adds	r0, r5, #4
{
    7efe:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7f00:	9300      	str	r3, [sp, #0]
    7f02:	f7ff ffc0 	bl	7e86 <sys_notify_finalize>
	if (cb) {
    7f06:	4604      	mov	r4, r0
    7f08:	b140      	cbz	r0, 7f1c <notify_one+0x28>
		cb(mgr, cli, state, res);
    7f0a:	e9dd 3200 	ldrd	r3, r2, [sp]
    7f0e:	4629      	mov	r1, r5
    7f10:	4630      	mov	r0, r6
    7f12:	46a4      	mov	ip, r4
}
    7f14:	b002      	add	sp, #8
    7f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
    7f1a:	4760      	bx	ip
}
    7f1c:	b002      	add	sp, #8
    7f1e:	bd70      	pop	{r4, r5, r6, pc}

00007f20 <transition_complete>:
{
    7f20:	b410      	push	{r4}
	__asm__ volatile(
    7f22:	f04f 0420 	mov.w	r4, #32
    7f26:	f3ef 8211 	mrs	r2, BASEPRI
    7f2a:	f384 8812 	msr	BASEPRI_MAX, r4
    7f2e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    7f32:	6141      	str	r1, [r0, #20]
}
    7f34:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    7f38:	2101      	movs	r1, #1
    7f3a:	f7f9 bc0d 	b.w	1758 <process_event>

00007f3e <validate_args>:
{
    7f3e:	b510      	push	{r4, lr}
    7f40:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7f42:	b140      	cbz	r0, 7f56 <validate_args+0x18>
    7f44:	b139      	cbz	r1, 7f56 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    7f46:	1d08      	adds	r0, r1, #4
    7f48:	f7ff ff8c 	bl	7e64 <sys_notify_validate>
	if ((rv == 0)
    7f4c:	b928      	cbnz	r0, 7f5a <validate_args+0x1c>
	    && ((cli->notify.flags
    7f4e:	68a3      	ldr	r3, [r4, #8]
    7f50:	f033 0303 	bics.w	r3, r3, #3
    7f54:	d001      	beq.n	7f5a <validate_args+0x1c>
		rv = -EINVAL;
    7f56:	f06f 0015 	mvn.w	r0, #21
}
    7f5a:	bd10      	pop	{r4, pc}

00007f5c <onoff_manager_init>:
{
    7f5c:	b538      	push	{r3, r4, r5, lr}
    7f5e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7f60:	4605      	mov	r5, r0
    7f62:	b158      	cbz	r0, 7f7c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7f64:	b151      	cbz	r1, 7f7c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7f66:	680b      	ldr	r3, [r1, #0]
    7f68:	b143      	cbz	r3, 7f7c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7f6a:	684b      	ldr	r3, [r1, #4]
    7f6c:	b133      	cbz	r3, 7f7c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7f6e:	221c      	movs	r2, #28
    7f70:	2100      	movs	r1, #0
    7f72:	f000 fbfa 	bl	876a <memset>
	return 0;
    7f76:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7f78:	612c      	str	r4, [r5, #16]
}
    7f7a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7f7c:	f06f 0015 	mvn.w	r0, #21
    7f80:	e7fb      	b.n	7f7a <onoff_manager_init+0x1e>

00007f82 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    7f82:	b570      	push	{r4, r5, r6, lr}
    7f84:	4604      	mov	r4, r0
    7f86:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7f88:	f7ff ffd9 	bl	7f3e <validate_args>

	if (rv < 0) {
    7f8c:	1e05      	subs	r5, r0, #0
    7f8e:	db31      	blt.n	7ff4 <onoff_request+0x72>
    7f90:	f04f 0320 	mov.w	r3, #32
    7f94:	f3ef 8111 	mrs	r1, BASEPRI
    7f98:	f383 8812 	msr	BASEPRI_MAX, r3
    7f9c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7fa0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7fa4:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7fa6:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    7fa8:	42ab      	cmp	r3, r5
    7faa:	f000 0207 	and.w	r2, r0, #7
    7fae:	d02e      	beq.n	800e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    7fb0:	2a02      	cmp	r2, #2
    7fb2:	d10e      	bne.n	7fd2 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    7fb4:	3301      	adds	r3, #1
    7fb6:	8363      	strh	r3, [r4, #26]
	rv = state;
    7fb8:	4615      	mov	r5, r2
		notify = true;
    7fba:	2301      	movs	r3, #1
	__asm__ volatile(
    7fbc:	f381 8811 	msr	BASEPRI, r1
    7fc0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    7fc4:	b1b3      	cbz	r3, 7ff4 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    7fc6:	2300      	movs	r3, #0
    7fc8:	4631      	mov	r1, r6
    7fca:	4620      	mov	r0, r4
    7fcc:	f7ff ff92 	bl	7ef4 <notify_one>
    7fd0:	e010      	b.n	7ff4 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    7fd2:	0783      	lsls	r3, r0, #30
    7fd4:	d001      	beq.n	7fda <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    7fd6:	2a06      	cmp	r2, #6
    7fd8:	d10e      	bne.n	7ff8 <onoff_request+0x76>
	parent->next = child;
    7fda:	2300      	movs	r3, #0
    7fdc:	6033      	str	r3, [r6, #0]
	return list->tail;
    7fde:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    7fe0:	b993      	cbnz	r3, 8008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
	list->head = node;
    7fe2:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    7fe6:	4615      	mov	r5, r2
    7fe8:	b962      	cbnz	r2, 8004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
		process_event(mgr, EVT_RECHECK, key);
    7fea:	460a      	mov	r2, r1
    7fec:	4620      	mov	r0, r4
    7fee:	2102      	movs	r1, #2
    7ff0:	f7f9 fbb2 	bl	1758 <process_event>
		}
	}

	return rv;
}
    7ff4:	4628      	mov	r0, r5
    7ff6:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    7ff8:	2a05      	cmp	r2, #5
    7ffa:	bf0c      	ite	eq
    7ffc:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    8000:	f06f 0504 	mvnne.w	r5, #4
    8004:	2300      	movs	r3, #0
    8006:	e7d9      	b.n	7fbc <onoff_request+0x3a>
	parent->next = child;
    8008:	601e      	str	r6, [r3, #0]
	list->tail = node;
    800a:	6066      	str	r6, [r4, #4]
}
    800c:	e7eb      	b.n	7fe6 <onoff_request+0x64>
		rv = -EAGAIN;
    800e:	f06f 050a 	mvn.w	r5, #10
    8012:	e7f7      	b.n	8004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>

00008014 <onoff_sync_lock>:
	__asm__ volatile(
    8014:	f04f 0220 	mov.w	r2, #32
    8018:	f3ef 8311 	mrs	r3, BASEPRI
    801c:	f382 8812 	msr	BASEPRI_MAX, r2
    8020:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
    8024:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
    8026:	600b      	str	r3, [r1, #0]
}
    8028:	4770      	bx	lr

0000802a <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
    802a:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
    802c:	6804      	ldr	r4, [r0, #0]
{
    802e:	460d      	mov	r5, r1
	if (srv->count < 0) {
    8030:	2c00      	cmp	r4, #0
		srv->count = 0;
    8032:	bfbc      	itt	lt
    8034:	2400      	movlt	r4, #0
    8036:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
    8038:	2b00      	cmp	r3, #0
{
    803a:	4611      	mov	r1, r2
    803c:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
    8040:	da0c      	bge.n	805c <onoff_sync_finalize+0x32>
		srv->count = res;
		state = ONOFF_STATE_ERROR;
    8042:	2201      	movs	r2, #1
		srv->count = res;
    8044:	6003      	str	r3, [r0, #0]
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
    8046:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
    8048:	f385 8811 	msr	BASEPRI, r5
    804c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
    8050:	b111      	cbz	r1, 8058 <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
    8052:	2000      	movs	r0, #0
    8054:	f7ff ff4e 	bl	7ef4 <notify_one>
	}

	return rv;
}
    8058:	4620      	mov	r0, r4
    805a:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
    805c:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
    805e:	b11a      	cbz	r2, 8068 <onoff_sync_finalize+0x3e>
		srv->count += 1;
    8060:	3401      	adds	r4, #1
	uint32_t state = ONOFF_STATE_ON;
    8062:	2202      	movs	r2, #2
		srv->count -= 1;
    8064:	6004      	str	r4, [r0, #0]
    8066:	e7ee      	b.n	8046 <onoff_sync_finalize+0x1c>
    8068:	3c01      	subs	r4, #1
    806a:	e7fa      	b.n	8062 <onoff_sync_finalize+0x38>

0000806c <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    806c:	4604      	mov	r4, r0
    806e:	b508      	push	{r3, lr}
    8070:	4608      	mov	r0, r1
    8072:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8074:	461a      	mov	r2, r3
    8076:	47a0      	blx	r4
	return z_impl_z_current_get();
    8078:	f7fd fd7e 	bl	5b78 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    807c:	f7fb f944 	bl	3308 <z_impl_k_thread_abort>

00008080 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    8080:	4770      	bx	lr

00008082 <z_log_minimal_printk>:
#include <zephyr/sys/printk.h>

#define HEXDUMP_BYTES_IN_LINE 8U

void z_log_minimal_printk(const char *fmt, ...)
{
    8082:	b40f      	push	{r0, r1, r2, r3}
    8084:	b507      	push	{r0, r1, r2, lr}
    8086:	a904      	add	r1, sp, #16
    8088:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    808c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    808e:	f7f9 fb55 	bl	173c <vprintk>
	va_end(ap);
}
    8092:	b003      	add	sp, #12
    8094:	f85d eb04 	ldr.w	lr, [sp], #4
    8098:	b004      	add	sp, #16
    809a:	4770      	bx	lr

0000809c <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
    809c:	4770      	bx	lr

0000809e <flash_area_read>:


static inline bool is_in_flash_area_bounds(const struct flash_area *fa,
					   off_t off, size_t len)
{
	return (off >= 0) && ((off + len) <= fa->fa_size);
    809e:	2900      	cmp	r1, #0

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    80a0:	b430      	push	{r4, r5}
    80a2:	461c      	mov	r4, r3
    80a4:	db0c      	blt.n	80c0 <flash_area_read+0x22>
    80a6:	6885      	ldr	r5, [r0, #8]
    80a8:	440c      	add	r4, r1
    80aa:	42ac      	cmp	r4, r5
    80ac:	d808      	bhi.n	80c0 <flash_area_read+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_read(fa->fa_dev, fa->fa_off + off, dst, len);
    80ae:	68c4      	ldr	r4, [r0, #12]
    80b0:	6840      	ldr	r0, [r0, #4]
    80b2:	4401      	add	r1, r0
				    size_t len)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
    80b4:	68a0      	ldr	r0, [r4, #8]
    80b6:	6805      	ldr	r5, [r0, #0]
    80b8:	4620      	mov	r0, r4
    80ba:	46ac      	mov	ip, r5
}
    80bc:	bc30      	pop	{r4, r5}
    80be:	4760      	bx	ip
    80c0:	f06f 0015 	mvn.w	r0, #21
    80c4:	bc30      	pop	{r4, r5}
    80c6:	4770      	bx	lr

000080c8 <flash_area_write>:
    80c8:	2900      	cmp	r1, #0

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    80ca:	b430      	push	{r4, r5}
    80cc:	461c      	mov	r4, r3
    80ce:	db0c      	blt.n	80ea <flash_area_write+0x22>
    80d0:	6885      	ldr	r5, [r0, #8]
    80d2:	440c      	add	r4, r1
    80d4:	42ac      	cmp	r4, r5
    80d6:	d808      	bhi.n	80ea <flash_area_write+0x22>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_write(fa->fa_dev, fa->fa_off + off, (void *)src, len);
    80d8:	68c4      	ldr	r4, [r0, #12]
    80da:	6840      	ldr	r0, [r0, #4]
    80dc:	4401      	add	r1, r0
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->write(dev, offset, data, len);
    80de:	68a0      	ldr	r0, [r4, #8]
    80e0:	6845      	ldr	r5, [r0, #4]
    80e2:	4620      	mov	r0, r4
    80e4:	46ac      	mov	ip, r5
}
    80e6:	bc30      	pop	{r4, r5}
    80e8:	4760      	bx	ip
    80ea:	f06f 0015 	mvn.w	r0, #21
    80ee:	bc30      	pop	{r4, r5}
    80f0:	4770      	bx	lr

000080f2 <flash_area_erase>:
    80f2:	2900      	cmp	r1, #0

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
    80f4:	4613      	mov	r3, r2
    80f6:	b410      	push	{r4}
    80f8:	db0d      	blt.n	8116 <flash_area_erase+0x24>
    80fa:	6884      	ldr	r4, [r0, #8]
    80fc:	440b      	add	r3, r1
    80fe:	42a3      	cmp	r3, r4
    8100:	d809      	bhi.n	8116 <flash_area_erase+0x24>
	if (!is_in_flash_area_bounds(fa, off, len)) {
		return -EINVAL;
	}

	return flash_erase(fa->fa_dev, fa->fa_off + off, len);
    8102:	68c3      	ldr	r3, [r0, #12]
    8104:	6840      	ldr	r0, [r0, #4]
    8106:	4401      	add	r1, r0
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;
	int rc;

	rc = api->erase(dev, offset, size);
    8108:	6898      	ldr	r0, [r3, #8]
    810a:	6884      	ldr	r4, [r0, #8]
    810c:	4618      	mov	r0, r3
    810e:	4623      	mov	r3, r4
}
    8110:	f85d 4b04 	ldr.w	r4, [sp], #4
    8114:	4718      	bx	r3
    8116:	f06f 0015 	mvn.w	r0, #21
    811a:	f85d 4b04 	ldr.w	r4, [sp], #4
    811e:	4770      	bx	lr

00008120 <flash_area_align>:

uint32_t flash_area_align(const struct flash_area *fa)
{
    8120:	b508      	push	{r3, lr}
	return flash_get_write_block_size(fa->fa_dev);
    8122:	68c0      	ldr	r0, [r0, #12]
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    8124:	6883      	ldr	r3, [r0, #8]
    8126:	68db      	ldr	r3, [r3, #12]
    8128:	4798      	blx	r3
}
    812a:	6800      	ldr	r0, [r0, #0]
    812c:	bd08      	pop	{r3, pc}

0000812e <flash_area_erased_val>:
{
	return fa->fa_dev;
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    812e:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(fa->fa_dev);
    8130:	68c0      	ldr	r0, [r0, #12]
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    8132:	6883      	ldr	r3, [r0, #8]
    8134:	68db      	ldr	r3, [r3, #12]
    8136:	4798      	blx	r3

	return param->erase_value;
}
    8138:	7900      	ldrb	r0, [r0, #4]
    813a:	bd08      	pop	{r3, pc}

0000813c <get_sectors_cb>:
{
    813c:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    813e:	6802      	ldr	r2, [r0, #0]
    8140:	684c      	ldr	r4, [r1, #4]
    8142:	42a2      	cmp	r2, r4
    8144:	d316      	bcc.n	8174 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    8146:	688b      	ldr	r3, [r1, #8]
    8148:	4423      	add	r3, r4
    814a:	429a      	cmp	r2, r3
    814c:	d206      	bcs.n	815c <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    814e:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    8152:	42ab      	cmp	r3, r5
    8154:	d304      	bcc.n	8160 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    8156:	f06f 030b 	mvn.w	r3, #11
    815a:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    815c:	2000      	movs	r0, #0
    815e:	e00a      	b.n	8176 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    8160:	68cd      	ldr	r5, [r1, #12]
    8162:	1b12      	subs	r2, r2, r4
    8164:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    8168:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    816a:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    816e:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    8170:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    8172:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    8174:	2001      	movs	r0, #1
}
    8176:	bd70      	pop	{r4, r5, r6, pc}

00008178 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    8178:	2000      	movs	r0, #0
{
    817a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    817c:	f7f9 fdfe 	bl	1d7c <sys_reboot>

00008180 <console_write>:
{
    8180:	b570      	push	{r4, r5, r6, lr}
    8182:	4606      	mov	r6, r0
    8184:	460d      	mov	r5, r1
	for (i = 0; i < cnt; i++) {
    8186:	2400      	movs	r4, #0
    8188:	42ac      	cmp	r4, r5
    818a:	db00      	blt.n	818e <console_write+0xe>
}
    818c:	bd70      	pop	{r4, r5, r6, pc}
		if (console_out((int)str[i]) == EOF) {
    818e:	5d30      	ldrb	r0, [r6, r4]
    8190:	f7f9 ff98 	bl	20c4 <console_out>
    8194:	3001      	adds	r0, #1
    8196:	d0f9      	beq.n	818c <console_write+0xc>
	for (i = 0; i < cnt; i++) {
    8198:	3401      	adds	r4, #1
    819a:	e7f5      	b.n	8188 <console_write+0x8>

0000819c <initial_checks>:
} while(0)

static bool initial_checks(zcbor_state_t *state)
{
	ZCBOR_CHECK_ERROR();
	ZCBOR_CHECK_PAYLOAD();
    819c:	6802      	ldr	r2, [r0, #0]
    819e:	68c3      	ldr	r3, [r0, #12]
    81a0:	429a      	cmp	r2, r3
    81a2:	bf21      	itttt	cs
    81a4:	2208      	movcs	r2, #8
    81a6:	6943      	ldrcs	r3, [r0, #20]
    81a8:	2000      	movcs	r0, #0
    81aa:	60da      	strcs	r2, [r3, #12]
	return true;
    81ac:	bf38      	it	cc
    81ae:	2001      	movcc	r0, #1
}
    81b0:	4770      	bx	lr

000081b2 <list_map_end_decode>:

static bool list_map_end_decode(zcbor_state_t *state)
{
	uint_fast32_t max_elem_count = 0;

	if (state->indefinite_length_array) {
    81b2:	7c02      	ldrb	r2, [r0, #16]
{
    81b4:	b510      	push	{r4, lr}
    81b6:	4604      	mov	r4, r0
	if (state->indefinite_length_array) {
    81b8:	b18a      	cbz	r2, 81de <list_map_end_decode+0x2c>
	INITIAL_CHECKS();
    81ba:	f7ff ffef 	bl	819c <initial_checks>
    81be:	b130      	cbz	r0, 81ce <list_map_end_decode+0x1c>
	ZCBOR_ERR_IF(*state->payload != 0xFF, ZCBOR_ERR_WRONG_TYPE);
    81c0:	6823      	ldr	r3, [r4, #0]
    81c2:	781a      	ldrb	r2, [r3, #0]
    81c4:	2aff      	cmp	r2, #255	; 0xff
    81c6:	d004      	beq.n	81d2 <list_map_end_decode+0x20>
    81c8:	220a      	movs	r2, #10
    81ca:	6963      	ldr	r3, [r4, #20]
    81cc:	60da      	str	r2, [r3, #12]
			max_elem_count)) {
		ZCBOR_FAIL();
	}

	return true;
}
    81ce:	2000      	movs	r0, #0
    81d0:	bd10      	pop	{r4, pc}
	state->payload++;
    81d2:	3301      	adds	r3, #1
    81d4:	6023      	str	r3, [r4, #0]
		state->indefinite_length_array = false;
    81d6:	2300      	movs	r3, #0
		max_elem_count = ZCBOR_MAX_ELEM_COUNT;
    81d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		state->indefinite_length_array = false;
    81dc:	7423      	strb	r3, [r4, #16]
	if (!zcbor_process_backup(state,
    81de:	4620      	mov	r0, r4
}
    81e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!zcbor_process_backup(state,
    81e4:	2107      	movs	r1, #7
    81e6:	f000 ba12 	b.w	860e <zcbor_process_backup>

000081ea <type_check>:
{
    81ea:	b510      	push	{r4, lr}
    81ec:	4604      	mov	r4, r0
	if (!initial_checks(state)) {
    81ee:	f7ff ffd5 	bl	819c <initial_checks>
    81f2:	b140      	cbz	r0, 8206 <type_check+0x1c>
	zcbor_major_type_t major_type = MAJOR_TYPE(*state->payload);
    81f4:	6823      	ldr	r3, [r4, #0]
    81f6:	781b      	ldrb	r3, [r3, #0]
	if (major_type != exp_major_type) {
    81f8:	ebb1 1f53 	cmp.w	r1, r3, lsr #5
    81fc:	bf1f      	itttt	ne
    81fe:	220a      	movne	r2, #10
		ZCBOR_ERR(ZCBOR_ERR_WRONG_TYPE);
    8200:	2000      	movne	r0, #0
    8202:	6963      	ldrne	r3, [r4, #20]
    8204:	60da      	strne	r2, [r3, #12]
}
    8206:	bd10      	pop	{r4, pc}

00008208 <value_extract>:
{
    8208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    820c:	4604      	mov	r4, r0
    820e:	4690      	mov	r8, r2
	INITIAL_CHECKS();
    8210:	f7ff ffc4 	bl	819c <initial_checks>
{
    8214:	460e      	mov	r6, r1
	INITIAL_CHECKS();
    8216:	4605      	mov	r5, r0
    8218:	b128      	cbz	r0, 8226 <value_extract+0x1e>
	ZCBOR_ERR_IF((state->elem_count == 0), ZCBOR_ERR_LOW_ELEM_COUNT);
    821a:	68a3      	ldr	r3, [r4, #8]
    821c:	b933      	cbnz	r3, 822c <value_extract+0x24>
    821e:	2103      	movs	r1, #3
    8220:	6962      	ldr	r2, [r4, #20]
    8222:	60d1      	str	r1, [r2, #12]
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
    8224:	2500      	movs	r5, #0
}
    8226:	4628      	mov	r0, r5
    8228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t additional = ADDITIONAL(*state->payload);
    822c:	6823      	ldr	r3, [r4, #0]
	memset(result, 0, result_len);
    822e:	4642      	mov	r2, r8
	uint8_t additional = ADDITIONAL(*state->payload);
    8230:	781f      	ldrb	r7, [r3, #0]
	state->payload_bak = state->payload;
    8232:	6063      	str	r3, [r4, #4]
	(state->payload)++;
    8234:	3301      	adds	r3, #1
	memset(result, 0, result_len);
    8236:	2100      	movs	r1, #0
    8238:	4630      	mov	r0, r6
	uint8_t additional = ADDITIONAL(*state->payload);
    823a:	f007 071f 	and.w	r7, r7, #31
	(state->payload)++;
    823e:	6023      	str	r3, [r4, #0]
	memset(result, 0, result_len);
    8240:	f000 fa93 	bl	876a <memset>
	if (additional <= ZCBOR_VALUE_IN_HEADER) {
    8244:	2f17      	cmp	r7, #23
    8246:	d804      	bhi.n	8252 <value_extract+0x4a>
		u8_result[0] = additional;
    8248:	7037      	strb	r7, [r6, #0]
	(state->elem_count)--;
    824a:	68a3      	ldr	r3, [r4, #8]
    824c:	3b01      	subs	r3, #1
    824e:	60a3      	str	r3, [r4, #8]
	return true;
    8250:	e7e9      	b.n	8226 <value_extract+0x1e>
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    8252:	3f18      	subs	r7, #24
    8254:	b2fa      	uxtb	r2, r7
    8256:	2a03      	cmp	r2, #3
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    8258:	6823      	ldr	r3, [r4, #0]
	if (ZCBOR_VALUE_IS_1_BYTE <= additional && additional <= ZCBOR_VALUE_IS_8_BYTES) {
    825a:	d80a      	bhi.n	8272 <value_extract+0x6a>
		return 1U << (additional - ZCBOR_VALUE_IS_1_BYTE);
    825c:	2201      	movs	r2, #1
    825e:	fa02 f707 	lsl.w	r7, r2, r7
		FAIL_AND_DECR_IF(len > result_len, ZCBOR_ERR_INT_SIZE);
    8262:	45b8      	cmp	r8, r7
    8264:	d20a      	bcs.n	827c <value_extract+0x74>
    8266:	2205      	movs	r2, #5
    8268:	3b01      	subs	r3, #1
    826a:	6023      	str	r3, [r4, #0]
    826c:	6963      	ldr	r3, [r4, #20]
    826e:	60da      	str	r2, [r3, #12]
    8270:	e7d8      	b.n	8224 <value_extract+0x1c>
		FAIL_AND_DECR_IF(len == 0, ZCBOR_ERR_ADDITIONAL_INVAL); // additional_len() did not recognize the additional value.
    8272:	3b01      	subs	r3, #1
    8274:	6023      	str	r3, [r4, #0]
    8276:	2207      	movs	r2, #7
    8278:	6963      	ldr	r3, [r4, #20]
    827a:	e7f8      	b.n	826e <value_extract+0x66>
		FAIL_AND_DECR_IF((state->payload + len) > state->payload_end,
    827c:	68e1      	ldr	r1, [r4, #12]
    827e:	19da      	adds	r2, r3, r7
    8280:	4291      	cmp	r1, r2
    8282:	d204      	bcs.n	828e <value_extract+0x86>
    8284:	3b01      	subs	r3, #1
    8286:	6023      	str	r3, [r4, #0]
    8288:	2208      	movs	r2, #8
    828a:	6963      	ldr	r3, [r4, #20]
    828c:	e7ef      	b.n	826e <value_extract+0x66>
    828e:	1e7b      	subs	r3, r7, #1
    8290:	3e01      	subs	r6, #1
			u8_result[i] = (state->payload)[len - i - 1];
    8292:	6822      	ldr	r2, [r4, #0]
    8294:	5cd2      	ldrb	r2, [r2, r3]
		for (uint_fast32_t i = 0; i < len; i++) {
    8296:	3b01      	subs	r3, #1
			u8_result[i] = (state->payload)[len - i - 1];
    8298:	f806 2f01 	strb.w	r2, [r6, #1]!
		for (uint_fast32_t i = 0; i < len; i++) {
    829c:	d2f9      	bcs.n	8292 <value_extract+0x8a>
		(state->payload) += len;
    829e:	6823      	ldr	r3, [r4, #0]
    82a0:	441f      	add	r7, r3
    82a2:	6027      	str	r7, [r4, #0]
    82a4:	e7d1      	b.n	824a <value_extract+0x42>

000082a6 <str_start_decode>:
{
    82a6:	b538      	push	{r3, r4, r5, lr}
    82a8:	460c      	mov	r4, r1
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    82aa:	4611      	mov	r1, r2
{
    82ac:	4605      	mov	r5, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    82ae:	f7ff ff9c 	bl	81ea <type_check>
    82b2:	b908      	cbnz	r0, 82b8 <str_start_decode+0x12>
    82b4:	2000      	movs	r0, #0
}
    82b6:	bd38      	pop	{r3, r4, r5, pc}
	if (!value_extract(state, &result->len, sizeof(result->len))) {
    82b8:	2204      	movs	r2, #4
    82ba:	4628      	mov	r0, r5
    82bc:	18a1      	adds	r1, r4, r2
    82be:	f7ff ffa3 	bl	8208 <value_extract>
    82c2:	2800      	cmp	r0, #0
    82c4:	d0f6      	beq.n	82b4 <str_start_decode+0xe>
	result->value = state->payload;
    82c6:	682b      	ldr	r3, [r5, #0]
    82c8:	6023      	str	r3, [r4, #0]
	return true;
    82ca:	e7f4      	b.n	82b6 <str_start_decode+0x10>

000082cc <list_map_start_decode>:
{
    82cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    82ce:	4604      	mov	r4, r0
	INITIAL_CHECKS_WITH_TYPE(exp_major_type);
    82d0:	f7ff ff8b 	bl	81ea <type_check>
    82d4:	4605      	mov	r5, r0
    82d6:	b170      	cbz	r0, 82f6 <list_map_start_decode+0x2a>
	if (ADDITIONAL(*state->payload) == ZCBOR_VALUE_IS_INDEFINITE_LENGTH) {
    82d8:	6822      	ldr	r2, [r4, #0]
    82da:	7813      	ldrb	r3, [r2, #0]
    82dc:	f003 031f 	and.w	r3, r3, #31
    82e0:	2b1f      	cmp	r3, #31
    82e2:	d11a      	bne.n	831a <list_map_start_decode+0x4e>
		new_elem_count = ZCBOR_LARGE_ELEM_COUNT;
    82e4:	f06f 0310 	mvn.w	r3, #16
		ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
    82e8:	68a0      	ldr	r0, [r4, #8]
		new_elem_count = ZCBOR_LARGE_ELEM_COUNT;
    82ea:	9301      	str	r3, [sp, #4]
		ZCBOR_ERR_IF(state->elem_count == 0, ZCBOR_ERR_LOW_ELEM_COUNT);
    82ec:	b930      	cbnz	r0, 82fc <list_map_start_decode+0x30>
    82ee:	2103      	movs	r1, #3
    82f0:	6962      	ldr	r2, [r4, #20]
    82f2:	60d1      	str	r1, [r2, #12]
    82f4:	4605      	mov	r5, r0
}
    82f6:	4628      	mov	r0, r5
    82f8:	b003      	add	sp, #12
    82fa:	bd30      	pop	{r4, r5, pc}
		state->payload++;
    82fc:	3201      	adds	r2, #1
		state->elem_count--;
    82fe:	1e43      	subs	r3, r0, #1
		state->payload++;
    8300:	6022      	str	r2, [r4, #0]
		state->elem_count--;
    8302:	60a3      	str	r3, [r4, #8]
	if (!zcbor_new_backup(state, new_elem_count)) {
    8304:	4620      	mov	r0, r4
    8306:	9901      	ldr	r1, [sp, #4]
    8308:	f000 f967 	bl	85da <zcbor_new_backup>
    830c:	b978      	cbnz	r0, 832e <list_map_start_decode+0x62>
		FAIL_RESTORE();
    830e:	6863      	ldr	r3, [r4, #4]
    8310:	6023      	str	r3, [r4, #0]
    8312:	68a3      	ldr	r3, [r4, #8]
    8314:	3301      	adds	r3, #1
    8316:	60a3      	str	r3, [r4, #8]
    8318:	e7ec      	b.n	82f4 <list_map_start_decode+0x28>
		if (!value_extract(state, &new_elem_count, sizeof(new_elem_count))) {
    831a:	2204      	movs	r2, #4
    831c:	4620      	mov	r0, r4
    831e:	eb0d 0102 	add.w	r1, sp, r2
    8322:	f7ff ff71 	bl	8208 <value_extract>
    8326:	2800      	cmp	r0, #0
    8328:	d0e4      	beq.n	82f4 <list_map_start_decode+0x28>
	bool indefinite_length_array = false;
    832a:	2500      	movs	r5, #0
    832c:	e7ea      	b.n	8304 <list_map_start_decode+0x38>
	state->indefinite_length_array = indefinite_length_array;
    832e:	7425      	strb	r5, [r4, #16]
	return true;
    8330:	e7e0      	b.n	82f4 <list_map_start_decode+0x28>

00008332 <str_decode>:
{
    8332:	b538      	push	{r3, r4, r5, lr}
    8334:	4604      	mov	r4, r0
    8336:	460d      	mov	r5, r1
	if (!str_start_decode(state, result, exp_major_type)) {
    8338:	f7ff ffb5 	bl	82a6 <str_start_decode>
    833c:	b138      	cbz	r0, 834e <str_decode+0x1c>
	if (result->len > (state->payload_end - state->payload)) {
    833e:	6823      	ldr	r3, [r4, #0]
    8340:	68e2      	ldr	r2, [r4, #12]
    8342:	6869      	ldr	r1, [r5, #4]
    8344:	1ad2      	subs	r2, r2, r3
    8346:	4291      	cmp	r1, r2
    8348:	d802      	bhi.n	8350 <str_decode+0x1e>
	state->payload += result->len;
    834a:	440b      	add	r3, r1
    834c:	6023      	str	r3, [r4, #0]
}
    834e:	bd38      	pop	{r3, r4, r5, pc}
    8350:	2208      	movs	r2, #8
		ERR_RESTORE(ZCBOR_ERR_NO_PAYLOAD);
    8352:	6863      	ldr	r3, [r4, #4]
		ZCBOR_FAIL();
    8354:	2000      	movs	r0, #0
		ERR_RESTORE(ZCBOR_ERR_NO_PAYLOAD);
    8356:	6023      	str	r3, [r4, #0]
    8358:	68a3      	ldr	r3, [r4, #8]
    835a:	3301      	adds	r3, #1
    835c:	60a3      	str	r3, [r4, #8]
    835e:	6963      	ldr	r3, [r4, #20]
    8360:	60da      	str	r2, [r3, #12]
    8362:	e7f4      	b.n	834e <str_decode+0x1c>

00008364 <str_expect>:
{
    8364:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8366:	460e      	mov	r6, r1
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    8368:	4669      	mov	r1, sp
{
    836a:	4604      	mov	r4, r0
	if (!str_decode(state, &tmp_result, exp_major_type)) {
    836c:	f7ff ffe1 	bl	8332 <str_decode>
    8370:	4605      	mov	r5, r0
    8372:	b160      	cbz	r0, 838e <str_expect+0x2a>
	if ((tmp_result.len != result->len)
    8374:	9a01      	ldr	r2, [sp, #4]
    8376:	6873      	ldr	r3, [r6, #4]
    8378:	429a      	cmp	r2, r3
    837a:	d00b      	beq.n	8394 <str_expect+0x30>
    837c:	220b      	movs	r2, #11
    837e:	2500      	movs	r5, #0
		ERR_RESTORE(ZCBOR_ERR_WRONG_VALUE);
    8380:	6863      	ldr	r3, [r4, #4]
    8382:	6023      	str	r3, [r4, #0]
    8384:	68a3      	ldr	r3, [r4, #8]
    8386:	3301      	adds	r3, #1
    8388:	60a3      	str	r3, [r4, #8]
    838a:	6963      	ldr	r3, [r4, #20]
    838c:	60da      	str	r2, [r3, #12]
}
    838e:	4628      	mov	r0, r5
    8390:	b002      	add	sp, #8
    8392:	bd70      	pop	{r4, r5, r6, pc}
			|| memcmp(result->value, tmp_result.value, tmp_result.len)) {
    8394:	9900      	ldr	r1, [sp, #0]
    8396:	6830      	ldr	r0, [r6, #0]
    8398:	f000 f9b3 	bl	8702 <memcmp>
    839c:	2800      	cmp	r0, #0
    839e:	d0f6      	beq.n	838e <str_expect+0x2a>
    83a0:	e7ec      	b.n	837c <str_expect+0x18>

000083a2 <zcbor_int64_decode>:
{
    83a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    83a4:	4604      	mov	r4, r0
    83a6:	460d      	mov	r5, r1
	INITIAL_CHECKS();
    83a8:	f7ff fef8 	bl	819c <initial_checks>
    83ac:	b148      	cbz	r0, 83c2 <zcbor_int64_decode+0x20>
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    83ae:	6823      	ldr	r3, [r4, #0]
    83b0:	781b      	ldrb	r3, [r3, #0]
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    83b2:	2b3f      	cmp	r3, #63	; 0x3f
	uint8_t major_type = MAJOR_TYPE(*state->payload);
    83b4:	ea4f 1653 	mov.w	r6, r3, lsr #5
	if (major_type != ZCBOR_MAJOR_TYPE_PINT
    83b8:	d905      	bls.n	83c6 <zcbor_int64_decode+0x24>
    83ba:	220a      	movs	r2, #10
    83bc:	6963      	ldr	r3, [r4, #20]
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    83be:	2000      	movs	r0, #0
    83c0:	60da      	str	r2, [r3, #12]
}
    83c2:	b002      	add	sp, #8
    83c4:	bd70      	pop	{r4, r5, r6, pc}
	if (!value_extract(state, &uint_result, sizeof(uint_result))) {
    83c6:	2208      	movs	r2, #8
    83c8:	4669      	mov	r1, sp
    83ca:	4620      	mov	r0, r4
    83cc:	f7ff ff1c 	bl	8208 <value_extract>
    83d0:	2800      	cmp	r0, #0
    83d2:	d0f6      	beq.n	83c2 <zcbor_int64_decode+0x20>
	int_result = (int64_t)uint_result;
    83d4:	e9dd 2300 	ldrd	r2, r3, [sp]
	if (int_result < 0) {
    83d8:	2b00      	cmp	r3, #0
    83da:	da07      	bge.n	83ec <zcbor_int64_decode+0x4a>
		ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    83dc:	6863      	ldr	r3, [r4, #4]
    83de:	2205      	movs	r2, #5
    83e0:	6023      	str	r3, [r4, #0]
    83e2:	68a3      	ldr	r3, [r4, #8]
    83e4:	3301      	adds	r3, #1
    83e6:	60a3      	str	r3, [r4, #8]
    83e8:	6963      	ldr	r3, [r4, #20]
    83ea:	e7e8      	b.n	83be <zcbor_int64_decode+0x1c>
	if (major_type == ZCBOR_MAJOR_TYPE_NINT) {
    83ec:	2e01      	cmp	r6, #1
		*result = -1 - int_result;
    83ee:	bf04      	itt	eq
    83f0:	43d2      	mvneq	r2, r2
    83f2:	43db      	mvneq	r3, r3
		*result = int_result;
    83f4:	e9c5 2300 	strd	r2, r3, [r5]
    83f8:	e7e3      	b.n	83c2 <zcbor_int64_decode+0x20>

000083fa <zcbor_int32_decode>:
{
    83fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    83fc:	460d      	mov	r5, r1
	if (zcbor_int64_decode(state, &result64)) {
    83fe:	4669      	mov	r1, sp
{
    8400:	4604      	mov	r4, r0
	if (zcbor_int64_decode(state, &result64)) {
    8402:	f7ff ffce 	bl	83a2 <zcbor_int64_decode>
    8406:	b178      	cbz	r0, 8428 <zcbor_int32_decode+0x2e>
		if (result64 > INT32_MAX) {
    8408:	9b00      	ldr	r3, [sp, #0]
    840a:	9a01      	ldr	r2, [sp, #4]
    840c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    8410:	f172 0200 	sbcs.w	r2, r2, #0
    8414:	db0a      	blt.n	842c <zcbor_int32_decode+0x32>
    8416:	2205      	movs	r2, #5
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    8418:	2000      	movs	r0, #0
    841a:	6863      	ldr	r3, [r4, #4]
    841c:	6023      	str	r3, [r4, #0]
    841e:	68a3      	ldr	r3, [r4, #8]
    8420:	3301      	adds	r3, #1
    8422:	60a3      	str	r3, [r4, #8]
    8424:	6963      	ldr	r3, [r4, #20]
    8426:	60da      	str	r2, [r3, #12]
}
    8428:	b003      	add	sp, #12
    842a:	bd30      	pop	{r4, r5, pc}
		*result = (int32_t)result64;
    842c:	602b      	str	r3, [r5, #0]
		return true;
    842e:	e7fb      	b.n	8428 <zcbor_int32_decode+0x2e>

00008430 <zcbor_bstr_decode>:
	return str_decode(state, result, ZCBOR_MAJOR_TYPE_BSTR);
    8430:	2202      	movs	r2, #2
    8432:	f7ff bf7e 	b.w	8332 <str_decode>

00008436 <zcbor_tstr_expect>:
	return str_expect(state, result, ZCBOR_MAJOR_TYPE_TSTR);
    8436:	2203      	movs	r2, #3
    8438:	f7ff bf94 	b.w	8364 <str_expect>

0000843c <zcbor_map_start_decode>:
{
    843c:	b510      	push	{r4, lr}
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    843e:	2105      	movs	r1, #5
{
    8440:	4604      	mov	r4, r0
	bool ret = list_map_start_decode(state, ZCBOR_MAJOR_TYPE_MAP);
    8442:	f7ff ff43 	bl	82cc <list_map_start_decode>
	if (ret && !state->indefinite_length_array) {
    8446:	b188      	cbz	r0, 846c <zcbor_map_start_decode+0x30>
    8448:	7c22      	ldrb	r2, [r4, #16]
    844a:	b95a      	cbnz	r2, 8464 <zcbor_map_start_decode+0x28>
		if (state->elem_count >= (ZCBOR_MAX_ELEM_COUNT / 2)) {
    844c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    8450:	68a3      	ldr	r3, [r4, #8]
    8452:	428b      	cmp	r3, r1
    8454:	d308      	bcc.n	8468 <zcbor_map_start_decode+0x2c>
			ERR_RESTORE(ZCBOR_ERR_INT_SIZE);
    8456:	6861      	ldr	r1, [r4, #4]
    8458:	3301      	adds	r3, #1
    845a:	6021      	str	r1, [r4, #0]
    845c:	2105      	movs	r1, #5
    845e:	60a3      	str	r3, [r4, #8]
    8460:	6963      	ldr	r3, [r4, #20]
    8462:	60d9      	str	r1, [r3, #12]
}
    8464:	4610      	mov	r0, r2
    8466:	bd10      	pop	{r4, pc}
		state->elem_count *= 2;
    8468:	005b      	lsls	r3, r3, #1
    846a:	60a3      	str	r3, [r4, #8]
    846c:	4602      	mov	r2, r0
    846e:	e7f9      	b.n	8464 <zcbor_map_start_decode+0x28>

00008470 <zcbor_map_end_decode>:
    8470:	f7ff be9f 	b.w	81b2 <list_map_end_decode>

00008474 <zcbor_list_map_end_force_decode>:
}


bool zcbor_list_map_end_force_decode(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state,
    8474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8478:	2107      	movs	r1, #7
    847a:	f000 b8c8 	b.w	860e <zcbor_process_backup>

0000847e <zcbor_multi_decode>:
		uint_fast32_t *num_decode,
		zcbor_decoder_t decoder,
		zcbor_state_t *state,
		void *result,
		uint_fast32_t result_len)
{
    847e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8482:	4681      	mov	r9, r0
    8484:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
    8488:	4688      	mov	r8, r1
    848a:	4617      	mov	r7, r2
    848c:	469a      	mov	sl, r3
	ZCBOR_CHECK_ERROR();
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    848e:	2400      	movs	r4, #0
    8490:	4544      	cmp	r4, r8
    8492:	d102      	bne.n	849a <zcbor_multi_decode+0x1c>
			zcbor_print("Found %" PRIuFAST32 " elements.\r\n", i);
			return true;
		}
	}
	zcbor_print("Found %" PRIuFAST32 " elements.\r\n", max_decode);
	*num_decode = max_decode;
    8494:	603c      	str	r4, [r7, #0]
			return true;
    8496:	2001      	movs	r0, #1
    8498:	e013      	b.n	84c2 <zcbor_multi_decode+0x44>
		uint8_t const *payload_bak = state->payload;
    849a:	682b      	ldr	r3, [r5, #0]
		if (!decoder(state,
    849c:	4631      	mov	r1, r6
    849e:	4628      	mov	r0, r5
		uint8_t const *payload_bak = state->payload;
    84a0:	9301      	str	r3, [sp, #4]
		uint_fast32_t elem_count_bak = state->elem_count;
    84a2:	f8d5 b008 	ldr.w	fp, [r5, #8]
		if (!decoder(state,
    84a6:	47d0      	blx	sl
    84a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    84aa:	441e      	add	r6, r3
    84ac:	9b01      	ldr	r3, [sp, #4]
    84ae:	b958      	cbnz	r0, 84c8 <zcbor_multi_decode+0x4a>
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    84b0:	454c      	cmp	r4, r9
			*num_decode = i;
    84b2:	603c      	str	r4, [r7, #0]
			state->payload = payload_bak;
    84b4:	602b      	str	r3, [r5, #0]
			state->elem_count = elem_count_bak;
    84b6:	f8c5 b008 	str.w	fp, [r5, #8]
			ZCBOR_ERR_IF(i < min_decode, ZCBOR_ERR_ITERATIONS);
    84ba:	d2ec      	bcs.n	8496 <zcbor_multi_decode+0x18>
    84bc:	220d      	movs	r2, #13
    84be:	696b      	ldr	r3, [r5, #20]
    84c0:	60da      	str	r2, [r3, #12]
	return true;
}
    84c2:	b003      	add	sp, #12
    84c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (uint_fast32_t i = 0; i < max_decode; i++) {
    84c8:	3401      	adds	r4, #1
    84ca:	e7e1      	b.n	8490 <zcbor_multi_decode+0x12>

000084cc <str_encode>:
}


static bool str_encode(zcbor_state_t *state,
		const struct zcbor_string *input, zcbor_major_type_t major_type)
{
    84cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (input->len > (state->payload_end - state->payload)) {
    84d0:	f8d0 900c 	ldr.w	r9, [r0, #12]
    84d4:	6805      	ldr	r5, [r0, #0]
    84d6:	f8d1 a004 	ldr.w	sl, [r1, #4]
    84da:	eba9 0305 	sub.w	r3, r9, r5
    84de:	459a      	cmp	sl, r3
{
    84e0:	4604      	mov	r4, r0
    84e2:	460e      	mov	r6, r1
    84e4:	4690      	mov	r8, r2
	if (input->len > (state->payload_end - state->payload)) {
    84e6:	d906      	bls.n	84f6 <str_encode+0x2a>
    84e8:	2208      	movs	r2, #8
		ZCBOR_ERR(ZCBOR_ERR_NO_PAYLOAD);
	}
	if (!str_start_encode(state, input, major_type)) {
		ZCBOR_FAIL();
    84ea:	2500      	movs	r5, #0
    84ec:	6963      	ldr	r3, [r4, #20]
    84ee:	60da      	str	r2, [r3, #12]
		 * because of bstrx_cbor_start_encode/bstrx_cbor_end_encode. */
		memmove(state->payload_mut, input->value, input->len);
	}
	state->payload += input->len;
	return true;
}
    84f0:	4628      	mov	r0, r5
    84f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    84f6:	460f      	mov	r7, r1
    84f8:	f857 3b04 	ldr.w	r3, [r7], #4
    84fc:	b143      	cbz	r3, 8510 <str_encode+0x44>
    84fe:	2104      	movs	r1, #4
    8500:	4638      	mov	r0, r7
    8502:	f7fa fa7d 	bl	2a00 <get_result_len>
			+ 1 + input->len + (size_t)state->payload)
    8506:	4455      	add	r5, sl
    8508:	3501      	adds	r5, #1
    850a:	4428      	add	r0, r5
	if (input->value && ((get_result_len(&input->len, sizeof(input->len))
    850c:	4581      	cmp	r9, r0
    850e:	d3eb      	bcc.n	84e8 <str_encode+0x1c>
	if (!value_encode(state, major_type, &input->len, sizeof(input->len))) {
    8510:	2304      	movs	r3, #4
    8512:	463a      	mov	r2, r7
    8514:	4641      	mov	r1, r8
    8516:	4620      	mov	r0, r4
    8518:	f7fa fa88 	bl	2a2c <value_encode>
    851c:	4605      	mov	r5, r0
    851e:	2800      	cmp	r0, #0
    8520:	d0e6      	beq.n	84f0 <str_encode+0x24>
	if (state->payload_mut != input->value) {
    8522:	6820      	ldr	r0, [r4, #0]
    8524:	6831      	ldr	r1, [r6, #0]
    8526:	4288      	cmp	r0, r1
    8528:	d002      	beq.n	8530 <str_encode+0x64>
		memmove(state->payload_mut, input->value, input->len);
    852a:	6872      	ldr	r2, [r6, #4]
    852c:	f000 f8fa 	bl	8724 <memmove>
	state->payload += input->len;
    8530:	6823      	ldr	r3, [r4, #0]
    8532:	6872      	ldr	r2, [r6, #4]
    8534:	4413      	add	r3, r2
    8536:	6023      	str	r3, [r4, #0]
	return true;
    8538:	e7da      	b.n	84f0 <str_encode+0x24>

0000853a <zcbor_uint64_put>:
{
    853a:	b507      	push	{r0, r1, r2, lr}
	if (!value_encode(state, major_type, input, 8)) {
    853c:	2100      	movs	r1, #0
{
    853e:	e9cd 2300 	strd	r2, r3, [sp]
	if (!value_encode(state, major_type, input, 8)) {
    8542:	2308      	movs	r3, #8
    8544:	466a      	mov	r2, sp
    8546:	f7fa fa71 	bl	2a2c <value_encode>
}
    854a:	b003      	add	sp, #12
    854c:	f85d fb04 	ldr.w	pc, [sp], #4

00008550 <zcbor_uint32_put>:
{
    8550:	460a      	mov	r2, r1
	return zcbor_uint64_put(state, input);
    8552:	2300      	movs	r3, #0
    8554:	f7ff bff1 	b.w	853a <zcbor_uint64_put>

00008558 <zcbor_tstr_encode>:
}


bool zcbor_tstr_encode(zcbor_state_t *state, const struct zcbor_string *input)
{
	return str_encode(state, input, ZCBOR_MAJOR_TYPE_TSTR);
    8558:	2203      	movs	r2, #3
    855a:	f7ff bfb7 	b.w	84cc <str_encode>

0000855e <zcbor_list_start_encode>:
	ZCBOR_CHECK_PAYLOAD();
    855e:	6803      	ldr	r3, [r0, #0]
    8560:	68c2      	ldr	r2, [r0, #12]
    8562:	4293      	cmp	r3, r2
    8564:	d304      	bcc.n	8570 <zcbor_list_start_encode+0x12>
    8566:	2208      	movs	r2, #8
    8568:	6943      	ldr	r3, [r0, #20]
		ZCBOR_FAIL();
	}
	state->elem_count--; /* Because of dummy header. */
#else
	if (!encode_header_byte(state, major_type, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
		ZCBOR_FAIL();
    856a:	2000      	movs	r0, #0
    856c:	60da      	str	r2, [r3, #12]
	ZCBOR_CHECK_PAYLOAD();
    856e:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    8570:	1c5a      	adds	r2, r3, #1
    8572:	6002      	str	r2, [r0, #0]
    8574:	229f      	movs	r2, #159	; 0x9f
	}
#endif
	return true;
    8576:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    8578:	701a      	strb	r2, [r3, #0]


bool zcbor_list_start_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_start_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}
    857a:	4770      	bx	lr

0000857c <zcbor_map_start_encode>:
	ZCBOR_CHECK_PAYLOAD();
    857c:	6803      	ldr	r3, [r0, #0]
    857e:	68c2      	ldr	r2, [r0, #12]
    8580:	4293      	cmp	r3, r2
    8582:	d304      	bcc.n	858e <zcbor_map_start_encode+0x12>
    8584:	2208      	movs	r2, #8
    8586:	6943      	ldr	r3, [r0, #20]
		ZCBOR_FAIL();
    8588:	2000      	movs	r0, #0
    858a:	60da      	str	r2, [r3, #12]
	ZCBOR_CHECK_PAYLOAD();
    858c:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    858e:	1c5a      	adds	r2, r3, #1
    8590:	6002      	str	r2, [r0, #0]
    8592:	22bf      	movs	r2, #191	; 0xbf
	return true;
    8594:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    8596:	701a      	strb	r2, [r3, #0]


bool zcbor_map_start_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_start_encode(state, max_num, ZCBOR_MAJOR_TYPE_MAP);
}
    8598:	4770      	bx	lr

0000859a <zcbor_list_end_encode>:
	ZCBOR_CHECK_PAYLOAD();
    859a:	6803      	ldr	r3, [r0, #0]
    859c:	68c2      	ldr	r2, [r0, #12]
    859e:	4293      	cmp	r3, r2
    85a0:	d304      	bcc.n	85ac <zcbor_list_end_encode+0x12>
    85a2:	2208      	movs	r2, #8
    85a4:	6943      	ldr	r3, [r0, #20]
		/* Reset payload pointer to end of list */
		state->payload = payload;
	}
#else
	if (!encode_header_byte(state, ZCBOR_MAJOR_TYPE_PRIM, ZCBOR_VALUE_IS_INDEFINITE_LENGTH)) {
		ZCBOR_FAIL();
    85a6:	2000      	movs	r0, #0
    85a8:	60da      	str	r2, [r3, #12]
	ZCBOR_CHECK_PAYLOAD();
    85aa:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    85ac:	1c5a      	adds	r2, r3, #1
    85ae:	6002      	str	r2, [r0, #0]
    85b0:	22ff      	movs	r2, #255	; 0xff
	}
#endif
	return true;
    85b2:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    85b4:	701a      	strb	r2, [r3, #0]


bool zcbor_list_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_LIST);
}
    85b6:	4770      	bx	lr

000085b8 <zcbor_map_end_encode>:
	ZCBOR_CHECK_PAYLOAD();
    85b8:	6803      	ldr	r3, [r0, #0]
    85ba:	68c2      	ldr	r2, [r0, #12]
    85bc:	4293      	cmp	r3, r2
    85be:	d304      	bcc.n	85ca <zcbor_map_end_encode+0x12>
    85c0:	2208      	movs	r2, #8
    85c2:	6943      	ldr	r3, [r0, #20]
		ZCBOR_FAIL();
    85c4:	2000      	movs	r0, #0
    85c6:	60da      	str	r2, [r3, #12]
	ZCBOR_CHECK_PAYLOAD();
    85c8:	4770      	bx	lr
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    85ca:	1c5a      	adds	r2, r3, #1
    85cc:	6002      	str	r2, [r0, #0]
    85ce:	22ff      	movs	r2, #255	; 0xff
	return true;
    85d0:	2001      	movs	r0, #1
	*(state->payload_mut++) = (uint8_t)((major_type << 5) | (additional & 0x1F));
    85d2:	701a      	strb	r2, [r3, #0]


bool zcbor_map_end_encode(zcbor_state_t *state, uint_fast32_t max_num)
{
	return list_map_end_encode(state, max_num, ZCBOR_MAJOR_TYPE_MAP);
}
    85d4:	4770      	bx	lr

000085d6 <zcbor_new_encode_state>:


bool zcbor_new_encode_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
	return zcbor_new_state(state_array, n_states, payload, payload_len, elem_count);
    85d6:	f000 b85a 	b.w	868e <zcbor_new_state>

000085da <zcbor_new_backup>:

bool zcbor_new_backup(zcbor_state_t *state, uint_fast32_t new_elem_count)
{
	ZCBOR_CHECK_ERROR();

	if ((state->constant_state->current_backup)
    85da:	6943      	ldr	r3, [r0, #20]
{
    85dc:	b570      	push	{r4, r5, r6, lr}
	if ((state->constant_state->current_backup)
    85de:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
    85e2:	4296      	cmp	r6, r2
{
    85e4:	4604      	mov	r4, r0
    85e6:	460d      	mov	r5, r1
    85e8:	f04f 0000 	mov.w	r0, #0
	if ((state->constant_state->current_backup)
    85ec:	d302      	bcc.n	85f4 <zcbor_new_backup+0x1a>
    85ee:	2201      	movs	r2, #1
    85f0:	60da      	str	r2, [r3, #12]
		sizeof(zcbor_state_t));

	state->elem_count = new_elem_count;

	return true;
}
    85f2:	bd70      	pop	{r4, r5, r6, pc}
	(state->constant_state->current_backup)++;
    85f4:	1c72      	adds	r2, r6, #1
	state->payload_moved = false;
    85f6:	7460      	strb	r0, [r4, #17]
	(state->constant_state->current_backup)++;
    85f8:	605a      	str	r2, [r3, #4]
	memcpy(&state->constant_state->backup_list[i], state,
    85fa:	2218      	movs	r2, #24
    85fc:	6818      	ldr	r0, [r3, #0]
    85fe:	4621      	mov	r1, r4
    8600:	fb02 0006 	mla	r0, r2, r6, r0
    8604:	f000 f8a6 	bl	8754 <memcpy>
	return true;
    8608:	2001      	movs	r0, #1
	state->elem_count = new_elem_count;
    860a:	60a5      	str	r5, [r4, #8]
	return true;
    860c:	e7f1      	b.n	85f2 <zcbor_new_backup+0x18>

0000860e <zcbor_process_backup>:


bool zcbor_process_backup(zcbor_state_t *state, uint32_t flags,
		uint_fast32_t max_elem_count)
{
    860e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8612:	4617      	mov	r7, r2
	const uint8_t *payload = state->payload;
	const uint_fast32_t elem_count = state->elem_count;

	ZCBOR_CHECK_ERROR();

	if (state->constant_state->current_backup == 0) {
    8614:	6942      	ldr	r2, [r0, #20]
{
    8616:	4605      	mov	r5, r0
	if (state->constant_state->current_backup == 0) {
    8618:	6850      	ldr	r0, [r2, #4]
{
    861a:	460e      	mov	r6, r1
	if (state->constant_state->current_backup == 0) {
    861c:	b918      	cbnz	r0, 8626 <zcbor_process_backup+0x18>
    861e:	2102      	movs	r1, #2
    8620:	60d1      	str	r1, [r2, #12]
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
		state->payload = payload;
	}

	return true;
}
    8622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (flags & ZCBOR_FLAG_RESTORE) {
    8626:	07f1      	lsls	r1, r6, #31
	const uint8_t *payload = state->payload;
    8628:	f8d5 8000 	ldr.w	r8, [r5]
	const uint_fast32_t elem_count = state->elem_count;
    862c:	f8d5 9008 	ldr.w	r9, [r5, #8]
	if (flags & ZCBOR_FLAG_RESTORE) {
    8630:	d50d      	bpl.n	864e <zcbor_process_backup+0x40>
		uint_fast32_t i = state->constant_state->current_backup - 1;
    8632:	1e43      	subs	r3, r0, #1
			if (state->constant_state->backup_list[i].payload_moved) {
    8634:	2018      	movs	r0, #24
    8636:	6811      	ldr	r1, [r2, #0]
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    8638:	f016 0404 	ands.w	r4, r6, #4
			if (state->constant_state->backup_list[i].payload_moved) {
    863c:	fb00 1103 	mla	r1, r0, r3, r1
		if (!(flags & ZCBOR_FLAG_TRANSFER_PAYLOAD)) {
    8640:	d101      	bne.n	8646 <zcbor_process_backup+0x38>
			if (state->constant_state->backup_list[i].payload_moved) {
    8642:	7c4b      	ldrb	r3, [r1, #17]
    8644:	b97b      	cbnz	r3, 8666 <zcbor_process_backup+0x58>
		memcpy(state, &state->constant_state->backup_list[i],
    8646:	2218      	movs	r2, #24
    8648:	4628      	mov	r0, r5
    864a:	f000 f883 	bl	8754 <memcpy>
	if (flags & ZCBOR_FLAG_CONSUME) {
    864e:	07b2      	lsls	r2, r6, #30
		state->constant_state->current_backup--;
    8650:	bf41      	itttt	mi
    8652:	696a      	ldrmi	r2, [r5, #20]
    8654:	6853      	ldrmi	r3, [r2, #4]
    8656:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
    865a:	6053      	strmi	r3, [r2, #4]
	if (elem_count > max_elem_count) {
    865c:	45b9      	cmp	r9, r7
    865e:	d904      	bls.n	866a <zcbor_process_backup+0x5c>
    8660:	2204      	movs	r2, #4
    8662:	696b      	ldr	r3, [r5, #20]
    8664:	60da      	str	r2, [r3, #12]
		ZCBOR_ERR(ZCBOR_ERR_HIGH_ELEM_COUNT);
    8666:	2000      	movs	r0, #0
    8668:	e7db      	b.n	8622 <zcbor_process_backup+0x14>
	if (flags & ZCBOR_FLAG_TRANSFER_PAYLOAD) {
    866a:	0773      	lsls	r3, r6, #29
	return true;
    866c:	f04f 0001 	mov.w	r0, #1
		state->payload = payload;
    8670:	bf48      	it	mi
    8672:	f8c5 8000 	strmi.w	r8, [r5]
    8676:	e7d4      	b.n	8622 <zcbor_process_backup+0x14>

00008678 <zcbor_union_start_code>:
}


bool zcbor_union_start_code(zcbor_state_t *state)
{
	if (!zcbor_new_backup(state, state->elem_count)) {
    8678:	6881      	ldr	r1, [r0, #8]
    867a:	f7ff bfae 	b.w	85da <zcbor_new_backup>

0000867e <zcbor_union_elem_code>:
}


bool zcbor_union_elem_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_RESTORE, state->elem_count)) {
    867e:	2101      	movs	r1, #1
    8680:	6882      	ldr	r2, [r0, #8]
    8682:	f7ff bfc4 	b.w	860e <zcbor_process_backup>

00008686 <zcbor_union_end_code>:
	return true;
}

bool zcbor_union_end_code(zcbor_state_t *state)
{
	if (!zcbor_process_backup(state, ZCBOR_FLAG_CONSUME, state->elem_count)) {
    8686:	2102      	movs	r1, #2
    8688:	6882      	ldr	r2, [r0, #8]
    868a:	f7ff bfc0 	b.w	860e <zcbor_process_backup>

0000868e <zcbor_new_state>:
	return true;
}

bool zcbor_new_state(zcbor_state_t *state_array, uint_fast32_t n_states,
		const uint8_t *payload, size_t payload_len, uint_fast32_t elem_count)
{
    868e:	b530      	push	{r4, r5, lr}
	state_array[0].payload = payload;
	state_array[0].payload_end = payload + payload_len;
    8690:	4413      	add	r3, r2
    8692:	60c3      	str	r3, [r0, #12]
	state_array[0].elem_count = elem_count;
    8694:	9b03      	ldr	r3, [sp, #12]
	state_array[0].indefinite_length_array = false;
	state_array[0].payload_moved = false;
	state_array[0].constant_state = NULL;

	if(n_states < 2) {
    8696:	2901      	cmp	r1, #1
	state_array[0].elem_count = elem_count;
    8698:	6083      	str	r3, [r0, #8]
	state_array[0].indefinite_length_array = false;
    869a:	f04f 0300 	mov.w	r3, #0
	state_array[0].payload = payload;
    869e:	6002      	str	r2, [r0, #0]
	state_array[0].indefinite_length_array = false;
    86a0:	8203      	strh	r3, [r0, #16]
	if(n_states < 2) {
    86a2:	d802      	bhi.n	86aa <zcbor_new_state+0x1c>
	state_array[0].constant_state = NULL;
    86a4:	6143      	str	r3, [r0, #20]
		return false;
    86a6:	4618      	mov	r0, r3
#endif
	if (n_states > 2) {
		state_array[0].constant_state->backup_list = &state_array[1];
	}
	return true;
}
    86a8:	bd30      	pop	{r4, r5, pc}
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
    86aa:	2218      	movs	r2, #24
    86ac:	434a      	muls	r2, r1
    86ae:	3a18      	subs	r2, #24
    86b0:	1884      	adds	r4, r0, r2
	if (n_states > 2) {
    86b2:	2902      	cmp	r1, #2
	state_array[0].constant_state->num_backups = n_states - 2;
    86b4:	f1a1 0502 	sub.w	r5, r1, #2
	state_array[0].constant_state = (struct zcbor_state_constant *)&state_array[n_states - 1];
    86b8:	6144      	str	r4, [r0, #20]
	state_array[0].constant_state->backup_list = NULL;
    86ba:	5083      	str	r3, [r0, r2]
	state_array[0].constant_state->current_backup = 0;
    86bc:	e9c4 3501 	strd	r3, r5, [r4, #4]
	state_array[0].constant_state->error = ZCBOR_SUCCESS;
    86c0:	60e3      	str	r3, [r4, #12]
		state_array[0].constant_state->backup_list = &state_array[1];
    86c2:	bf1c      	itt	ne
    86c4:	f100 0318 	addne.w	r3, r0, #24
    86c8:	5083      	strne	r3, [r0, r2]
	return true;
    86ca:	2001      	movs	r0, #1
    86cc:	e7ec      	b.n	86a8 <zcbor_new_state+0x1a>

000086ce <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    86ce:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    86d0:	6800      	ldr	r0, [r0, #0]
    86d2:	f7fa ba09 	b.w	2ae8 <z_arm_fatal_error>

000086d6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    86d6:	2100      	movs	r1, #0
    86d8:	2001      	movs	r0, #1
    86da:	f7fa ba05 	b.w	2ae8 <z_arm_fatal_error>

000086de <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    86de:	b508      	push	{r3, lr}
	handler();
    86e0:	f7fa fa9c 	bl	2c1c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    86e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    86e8:	f7fa bb94 	b.w	2e14 <z_arm_exc_exit>

000086ec <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    86ec:	6e43      	ldr	r3, [r0, #100]	; 0x64
    86ee:	f383 880b 	msr	PSPLIM, r3
}
    86f2:	4770      	bx	lr

000086f4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    86f4:	4603      	mov	r3, r0
	size_t n = 0;
    86f6:	2000      	movs	r0, #0

	while (*s != '\0') {
    86f8:	5c1a      	ldrb	r2, [r3, r0]
    86fa:	b902      	cbnz	r2, 86fe <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    86fc:	4770      	bx	lr
		n++;
    86fe:	3001      	adds	r0, #1
    8700:	e7fa      	b.n	86f8 <strlen+0x4>

00008702 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    8702:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    8704:	b162      	cbz	r2, 8720 <memcmp+0x1e>
    8706:	4603      	mov	r3, r0
    8708:	3901      	subs	r1, #1
    870a:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    870c:	f813 0b01 	ldrb.w	r0, [r3], #1
    8710:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    8714:	42a3      	cmp	r3, r4
    8716:	d001      	beq.n	871c <memcmp+0x1a>
    8718:	4290      	cmp	r0, r2
    871a:	d0f7      	beq.n	870c <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    871c:	1a80      	subs	r0, r0, r2
}
    871e:	bd10      	pop	{r4, pc}
		return 0;
    8720:	4610      	mov	r0, r2
    8722:	e7fc      	b.n	871e <memcmp+0x1c>

00008724 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    8724:	1a43      	subs	r3, r0, r1
    8726:	4293      	cmp	r3, r2
{
    8728:	b510      	push	{r4, lr}
    872a:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    872e:	d308      	bcc.n	8742 <memmove+0x1e>
	char *dest = d;
    8730:	4602      	mov	r2, r0
    8732:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    8734:	429a      	cmp	r2, r3
    8736:	d007      	beq.n	8748 <memmove+0x24>
			*dest = *src;
    8738:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    873c:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    8740:	e7f8      	b.n	8734 <memmove+0x10>
    8742:	440a      	add	r2, r1
		while (n > 0) {
    8744:	428a      	cmp	r2, r1
    8746:	d100      	bne.n	874a <memmove+0x26>
		}
	}

	return d;
}
    8748:	bd10      	pop	{r4, pc}
			dest[n] = src[n];
    874a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
    874e:	f803 4d01 	strb.w	r4, [r3, #-1]!
    8752:	e7f7      	b.n	8744 <memmove+0x20>

00008754 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8754:	b510      	push	{r4, lr}
    8756:	1e43      	subs	r3, r0, #1
    8758:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    875a:	4291      	cmp	r1, r2
    875c:	d100      	bne.n	8760 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    875e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8760:	f811 4b01 	ldrb.w	r4, [r1], #1
    8764:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    8768:	e7f7      	b.n	875a <memcpy+0x6>

0000876a <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    876a:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    876c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    876e:	4402      	add	r2, r0
    8770:	4293      	cmp	r3, r2
    8772:	d100      	bne.n	8776 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8774:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8776:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    877a:	e7f9      	b.n	8770 <memset+0x6>

0000877c <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    877c:	684b      	ldr	r3, [r1, #4]
    877e:	2b01      	cmp	r3, #1
    8780:	dd07      	ble.n	8792 <sprintf_out+0x16>
		*(p->ptr) = c;
    8782:	680b      	ldr	r3, [r1, #0]
    8784:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    8786:	680b      	ldr	r3, [r1, #0]
    8788:	3301      	adds	r3, #1
    878a:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    878c:	684b      	ldr	r3, [r1, #4]
    878e:	3b01      	subs	r3, #1
    8790:	604b      	str	r3, [r1, #4]
}
    8792:	2000      	movs	r0, #0
    8794:	4770      	bx	lr

00008796 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    8796:	220c      	movs	r2, #12
    8798:	6903      	ldr	r3, [r0, #16]
    879a:	b2c9      	uxtb	r1, r1
    879c:	fb01 3302 	mla	r3, r1, r2, r3
    87a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    87a2:	f000 0007 	and.w	r0, r0, #7
    87a6:	4770      	bx	lr

000087a8 <set_on_state>:
	__asm__ volatile(
    87a8:	f04f 0320 	mov.w	r3, #32
    87ac:	f3ef 8211 	mrs	r2, BASEPRI
    87b0:	f383 8812 	msr	BASEPRI_MAX, r3
    87b4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    87b8:	6803      	ldr	r3, [r0, #0]
    87ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    87be:	f043 0302 	orr.w	r3, r3, #2
    87c2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    87c4:	f382 8811 	msr	BASEPRI, r2
    87c8:	f3bf 8f6f 	isb	sy
}
    87cc:	4770      	bx	lr

000087ce <stop>:
{
    87ce:	4603      	mov	r3, r0
    87d0:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    87d2:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    87d4:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    87d6:	f04f 0420 	mov.w	r4, #32
    87da:	f3ef 8611 	mrs	r6, BASEPRI
    87de:	f384 8812 	msr	BASEPRI_MAX, r4
    87e2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    87e6:	250c      	movs	r5, #12
    87e8:	fb05 0401 	mla	r4, r5, r1, r0
    87ec:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    87ee:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    87f2:	d001      	beq.n	87f8 <stop+0x2a>
    87f4:	42a2      	cmp	r2, r4
    87f6:	d111      	bne.n	881c <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    87f8:	2201      	movs	r2, #1
    87fa:	fb05 0001 	mla	r0, r5, r1, r0
    87fe:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    8800:	2000      	movs	r0, #0
	__asm__ volatile(
    8802:	f386 8811 	msr	BASEPRI, r6
    8806:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    880a:	b930      	cbnz	r0, 881a <stop+0x4c>
	get_sub_config(dev, type)->stop();
    880c:	220c      	movs	r2, #12
    880e:	685b      	ldr	r3, [r3, #4]
    8810:	fb02 3101 	mla	r1, r2, r1, r3
    8814:	684b      	ldr	r3, [r1, #4]
    8816:	4798      	blx	r3
	return 0;
    8818:	2000      	movs	r0, #0
}
    881a:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    881c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8820:	e7ef      	b.n	8802 <stop+0x34>

00008822 <api_stop>:
	return stop(dev, subsys, CTX_API);
    8822:	2280      	movs	r2, #128	; 0x80
    8824:	f7ff bfd3 	b.w	87ce <stop>

00008828 <async_start>:
{
    8828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    882a:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    882c:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    882e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    8830:	f04f 0520 	mov.w	r5, #32
    8834:	f3ef 8c11 	mrs	ip, BASEPRI
    8838:	f385 8812 	msr	BASEPRI_MAX, r5
    883c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8840:	260c      	movs	r6, #12
    8842:	fb06 4601 	mla	r6, r6, r1, r4
    8846:	6c35      	ldr	r5, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8848:	f005 0e07 	and.w	lr, r5, #7
    884c:	f1be 0f01 	cmp.w	lr, #1
    8850:	d110      	bne.n	8874 <async_start+0x4c>
	int err = 0;
    8852:	2500      	movs	r5, #0
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    8854:	6437      	str	r7, [r6, #64]	; 0x40
	__asm__ volatile(
    8856:	f38c 8811 	msr	BASEPRI, ip
    885a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    885e:	b93d      	cbnz	r5, 8870 <async_start+0x48>
	subdata->cb = cb;
    8860:	260c      	movs	r6, #12
    8862:	4371      	muls	r1, r6
    8864:	440c      	add	r4, r1
	subdata->user_data = user_data;
    8866:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    886a:	6843      	ldr	r3, [r0, #4]
    886c:	585b      	ldr	r3, [r3, r1]
    886e:	4798      	blx	r3
}
    8870:	4628      	mov	r0, r5
    8872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8874:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
		err = -EALREADY;
    8878:	42af      	cmp	r7, r5
    887a:	bf14      	ite	ne
    887c:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
    8880:	f06f 0577 	mvneq.w	r5, #119	; 0x77
    8884:	e7e7      	b.n	8856 <async_start+0x2e>

00008886 <api_start>:
{
    8886:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    8888:	2480      	movs	r4, #128	; 0x80
    888a:	9400      	str	r4, [sp, #0]
    888c:	f7ff ffcc 	bl	8828 <async_start>
}
    8890:	b002      	add	sp, #8
    8892:	bd10      	pop	{r4, pc}

00008894 <onoff_started_callback>:
{
    8894:	b410      	push	{r4}
	notify(mgr, 0);
    8896:	241c      	movs	r4, #28
	return &data->mgr[type];
    8898:	6900      	ldr	r0, [r0, #16]
    889a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    889c:	fb03 0004 	mla	r0, r3, r4, r0
    88a0:	2100      	movs	r1, #0
}
    88a2:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    88a6:	4710      	bx	r2

000088a8 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    88a8:	2000      	movs	r0, #0
    88aa:	f000 bbcd 	b.w	9048 <nrfx_clock_start>

000088ae <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    88ae:	2000      	movs	r0, #0
    88b0:	f000 bc0b 	b.w	90ca <nrfx_clock_stop>

000088b4 <blocking_start_callback>:
{
    88b4:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    88b6:	f7fc be25 	b.w	5504 <z_impl_k_sem_give>

000088ba <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    88ba:	6843      	ldr	r3, [r0, #4]
}
    88bc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    88be:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    88c0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    88c2:	600b      	str	r3, [r1, #0]
}
    88c4:	4770      	bx	lr

000088c6 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    88c6:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    88c8:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    88cc:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    88ce:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    88d2:	6098      	str	r0, [r3, #8]
}
    88d4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    88d6:	60d9      	str	r1, [r3, #12]
    88d8:	4770      	bx	lr

000088da <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    88da:	6843      	ldr	r3, [r0, #4]
}
    88dc:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    88de:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    88e0:	6099      	str	r1, [r3, #8]
}
    88e2:	4770      	bx	lr

000088e4 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    88e4:	6843      	ldr	r3, [r0, #4]
}
    88e6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    88e8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    88ea:	60d9      	str	r1, [r3, #12]
}
    88ec:	4770      	bx	lr

000088ee <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    88ee:	6843      	ldr	r3, [r0, #4]
    88f0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    88f2:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    88f4:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    88f8:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    88fa:	6090      	str	r0, [r2, #8]
}
    88fc:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    88fe:	60d3      	str	r3, [r2, #12]
    8900:	4770      	bx	lr

00008902 <gpio_nrfx_manage_callback>:
	return port->data;
    8902:	6903      	ldr	r3, [r0, #16]
{
    8904:	b530      	push	{r4, r5, lr}
	return list->head;
    8906:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    8908:	b158      	cbz	r0, 8922 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    890a:	2400      	movs	r4, #0
    890c:	4281      	cmp	r1, r0
    890e:	d112      	bne.n	8936 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    8910:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    8912:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    8914:	b954      	cbnz	r4, 892c <gpio_nrfx_manage_callback+0x2a>
    8916:	428d      	cmp	r5, r1
	list->head = node;
    8918:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    891a:	d100      	bne.n	891e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    891c:	6098      	str	r0, [r3, #8]
	parent->next = child;
    891e:	2000      	movs	r0, #0
    8920:	6008      	str	r0, [r1, #0]
	if (set) {
    8922:	b96a      	cbnz	r2, 8940 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    8924:	2000      	movs	r0, #0
}
    8926:	bd30      	pop	{r4, r5, pc}
    8928:	4628      	mov	r0, r5
    892a:	e7ef      	b.n	890c <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    892c:	428d      	cmp	r5, r1
	parent->next = child;
    892e:	6020      	str	r0, [r4, #0]
	list->tail = node;
    8930:	bf08      	it	eq
    8932:	609c      	streq	r4, [r3, #8]
}
    8934:	e7f3      	b.n	891e <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    8936:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8938:	4604      	mov	r4, r0
    893a:	2d00      	cmp	r5, #0
    893c:	d1f4      	bne.n	8928 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    893e:	b13a      	cbz	r2, 8950 <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    8940:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    8942:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    8944:	600a      	str	r2, [r1, #0]
	list->head = node;
    8946:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    8948:	2800      	cmp	r0, #0
    894a:	d1eb      	bne.n	8924 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    894c:	6099      	str	r1, [r3, #8]
}
    894e:	e7ea      	b.n	8926 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    8950:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    8954:	e7e7      	b.n	8926 <gpio_nrfx_manage_callback+0x24>

00008956 <gpio_pin_set_dt>:
{
    8956:	4603      	mov	r3, r0
    8958:	460a      	mov	r2, r1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    895a:	7919      	ldrb	r1, [r3, #4]
    895c:	2301      	movs	r3, #1
	return gpio_pin_set(spec->port, spec->pin, value);
    895e:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    8960:	fa03 f101 	lsl.w	r1, r3, r1
    8964:	6903      	ldr	r3, [r0, #16]
    8966:	681b      	ldr	r3, [r3, #0]
    8968:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    896a:	bf18      	it	ne
    896c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    8970:	b112      	cbz	r2, 8978 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
    8972:	6883      	ldr	r3, [r0, #8]
    8974:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    8976:	4718      	bx	r3
    8978:	6883      	ldr	r3, [r0, #8]
    897a:	691b      	ldr	r3, [r3, #16]
    897c:	e7fb      	b.n	8976 <gpio_pin_set_dt+0x20>

0000897e <disable_sync>:
{
    897e:	b530      	push	{r4, r5, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    8980:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
    8982:	6845      	ldr	r5, [r0, #4]
{
    8984:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
    8986:	a903      	add	r1, sp, #12
    8988:	4620      	mov	r0, r4
    898a:	f7ff fb43 	bl	8014 <onoff_sync_lock>
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
    898e:	7d29      	ldrb	r1, [r5, #20]
    8990:	f011 0101 	ands.w	r1, r1, #1
    8994:	d113      	bne.n	89be <disable_sync+0x40>
	} else if (rc == 1) {
    8996:	2801      	cmp	r0, #1
    8998:	d10c      	bne.n	89b4 <disable_sync+0x36>
		rc = gpio_pin_set_dt(&cfg->enable, false);
    899a:	f105 000c 	add.w	r0, r5, #12
    899e:	f7ff ffda 	bl	8956 <gpio_pin_set_dt>
	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
    89a2:	2200      	movs	r2, #0
    89a4:	4603      	mov	r3, r0
    89a6:	9903      	ldr	r1, [sp, #12]
    89a8:	4620      	mov	r0, r4
    89aa:	9200      	str	r2, [sp, #0]
    89ac:	f7ff fb3d 	bl	802a <onoff_sync_finalize>
}
    89b0:	b005      	add	sp, #20
    89b2:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
    89b4:	2800      	cmp	r0, #0
    89b6:	bf08      	it	eq
    89b8:	f06f 0015 	mvneq.w	r0, #21
    89bc:	e7f1      	b.n	89a2 <disable_sync+0x24>
		rc = 0;
    89be:	2000      	movs	r0, #0
    89c0:	e7ef      	b.n	89a2 <disable_sync+0x24>

000089c2 <enable_sync>:
{
    89c2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
    89c4:	6905      	ldr	r5, [r0, #16]
{
    89c6:	460c      	mov	r4, r1
	const struct driver_config *cfg = dev->config;
    89c8:	6846      	ldr	r6, [r0, #4]
	int rc = onoff_sync_lock(&data->srv, &key);
    89ca:	a903      	add	r1, sp, #12
    89cc:	4628      	mov	r0, r5
    89ce:	f7ff fb21 	bl	8014 <onoff_sync_lock>
	if ((rc == 0)
    89d2:	b938      	cbnz	r0, 89e4 <enable_sync+0x22>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
    89d4:	7d33      	ldrb	r3, [r6, #20]
    89d6:	07db      	lsls	r3, r3, #31
    89d8:	d404      	bmi.n	89e4 <enable_sync+0x22>
		rc = gpio_pin_set_dt(&cfg->enable, true);
    89da:	2101      	movs	r1, #1
    89dc:	f106 000c 	add.w	r0, r6, #12
    89e0:	f7ff ffb9 	bl	8956 <gpio_pin_set_dt>
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
    89e4:	2301      	movs	r3, #1
    89e6:	4622      	mov	r2, r4
    89e8:	9300      	str	r3, [sp, #0]
    89ea:	9903      	ldr	r1, [sp, #12]
    89ec:	4603      	mov	r3, r0
    89ee:	4628      	mov	r0, r5
    89f0:	f7ff fb1b 	bl	802a <onoff_sync_finalize>
}
    89f4:	b004      	add	sp, #16
    89f6:	bd70      	pop	{r4, r5, r6, pc}

000089f8 <is_regular_addr_valid>:
{
    89f8:	b538      	push	{r3, r4, r5, lr}
    89fa:	4605      	mov	r5, r0
    89fc:	460c      	mov	r4, r1
	return is_within_bounds(addr, len, 0, nrfx_nvmc_flash_size_get());
    89fe:	f000 fb66 	bl	90ce <nrfx_nvmc_flash_size_get>
			(addr < (boundary_start + boundary_size)) &&
    8a02:	2d00      	cmp	r5, #0
    8a04:	db07      	blt.n	8a16 <is_regular_addr_valid+0x1e>
	return (addr >= boundary_start &&
    8a06:	42a8      	cmp	r0, r5
    8a08:	d905      	bls.n	8a16 <is_regular_addr_valid+0x1e>
			(len <= (boundary_start + boundary_size - addr)));
    8a0a:	1b40      	subs	r0, r0, r5
			(addr < (boundary_start + boundary_size)) &&
    8a0c:	4284      	cmp	r4, r0
    8a0e:	bf8c      	ite	hi
    8a10:	2000      	movhi	r0, #0
    8a12:	2001      	movls	r0, #1
}
    8a14:	bd38      	pop	{r3, r4, r5, pc}
			(addr < (boundary_start + boundary_size)) &&
    8a16:	2000      	movs	r0, #0
    8a18:	e7fc      	b.n	8a14 <is_regular_addr_valid+0x1c>

00008a1a <flash_get_page_info>:

#include <zephyr/drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
			       uint32_t index, struct flash_pages_info *info)
{
    8a1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8a1e:	461c      	mov	r4, r3
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	size_t layout_size;
	uint32_t index_jmp;

	info->start_offset = 0;
    8a20:	f04f 0800 	mov.w	r8, #0
	const struct flash_driver_api *api = dev->api;
    8a24:	6883      	ldr	r3, [r0, #8]
{
    8a26:	460d      	mov	r5, r1
    8a28:	4616      	mov	r6, r2
	info->index = 0U;

	api->page_layout(dev, &layout, &layout_size);
    8a2a:	4669      	mov	r1, sp
    8a2c:	691b      	ldr	r3, [r3, #16]
	info->start_offset = 0;
    8a2e:	f8c4 8000 	str.w	r8, [r4]
	info->index = 0U;
    8a32:	f8c4 8008 	str.w	r8, [r4, #8]
	api->page_layout(dev, &layout, &layout_size);
    8a36:	aa01      	add	r2, sp, #4
    8a38:	4798      	blx	r3

	while (layout_size--) {
    8a3a:	e9dd 7c00 	ldrd	r7, ip, [sp]
    8a3e:	4640      	mov	r0, r8
		info->size = layout->pages_size;
    8a40:	f107 0e04 	add.w	lr, r7, #4
	while (layout_size--) {
    8a44:	4560      	cmp	r0, ip
    8a46:	d104      	bne.n	8a52 <flash_get_page_info+0x38>
		}

		layout++;
	}

	return -EINVAL; /* page at offs or idx doesn't exist */
    8a48:	f06f 0015 	mvn.w	r0, #21
}
    8a4c:	b003      	add	sp, #12
    8a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		info->size = layout->pages_size;
    8a52:	f85e 9030 	ldr.w	r9, [lr, r0, lsl #3]
			index_jmp = index - info->index;
    8a56:	68a1      	ldr	r1, [r4, #8]
			index_jmp = (offs - info->start_offset) / info->size;
    8a58:	6822      	ldr	r2, [r4, #0]
		info->size = layout->pages_size;
    8a5a:	f8c4 9004 	str.w	r9, [r4, #4]
		if (offs == 0) {
    8a5e:	b97d      	cbnz	r5, 8a80 <flash_get_page_info+0x66>
			index_jmp = index - info->index;
    8a60:	1a73      	subs	r3, r6, r1
		index_jmp = MIN(index_jmp, layout->pages_count);
    8a62:	f857 8030 	ldr.w	r8, [r7, r0, lsl #3]
		if (index_jmp < layout->pages_count) {
    8a66:	3001      	adds	r0, #1
		index_jmp = MIN(index_jmp, layout->pages_count);
    8a68:	4543      	cmp	r3, r8
    8a6a:	bf28      	it	cs
    8a6c:	4643      	movcs	r3, r8
		info->start_offset += (index_jmp * info->size);
    8a6e:	fb03 2209 	mla	r2, r3, r9, r2
		info->index += index_jmp;
    8a72:	4419      	add	r1, r3
		if (index_jmp < layout->pages_count) {
    8a74:	4598      	cmp	r8, r3
		info->start_offset += (index_jmp * info->size);
    8a76:	6022      	str	r2, [r4, #0]
		info->index += index_jmp;
    8a78:	60a1      	str	r1, [r4, #8]
		if (index_jmp < layout->pages_count) {
    8a7a:	d9e3      	bls.n	8a44 <flash_get_page_info+0x2a>
			return 0;
    8a7c:	2000      	movs	r0, #0
    8a7e:	e7e5      	b.n	8a4c <flash_get_page_info+0x32>
			index_jmp = (offs - info->start_offset) / info->size;
    8a80:	1aab      	subs	r3, r5, r2
    8a82:	fbb3 f3f9 	udiv	r3, r3, r9
    8a86:	e7ec      	b.n	8a62 <flash_get_page_info+0x48>

00008a88 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
    8a88:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, 0U, info);
    8a8a:	2200      	movs	r2, #0
    8a8c:	f7ff bfc5 	b.w	8a1a <flash_get_page_info>

00008a90 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    8a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    8a94:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    8a96:	6883      	ldr	r3, [r0, #8]
{
    8a98:	b086      	sub	sp, #24
    8a9a:	4688      	mov	r8, r1
    8a9c:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    8a9e:	691b      	ldr	r3, [r3, #16]
    8aa0:	aa02      	add	r2, sp, #8
    8aa2:	a901      	add	r1, sp, #4
    8aa4:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    8aa6:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    8aa8:	4625      	mov	r5, r4
    8aaa:	9b02      	ldr	r3, [sp, #8]
    8aac:	42ab      	cmp	r3, r5
    8aae:	d802      	bhi.n	8ab6 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    8ab0:	b006      	add	sp, #24
    8ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    8ab6:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    8ab8:	9f01      	ldr	r7, [sp, #4]
    8aba:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    8abe:	687b      	ldr	r3, [r7, #4]
    8ac0:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    8ac2:	683a      	ldr	r2, [r7, #0]
    8ac4:	eb0a 0306 	add.w	r3, sl, r6
    8ac8:	42b2      	cmp	r2, r6
    8aca:	d802      	bhi.n	8ad2 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    8acc:	469a      	mov	sl, r3
    8ace:	3501      	adds	r5, #1
    8ad0:	e7eb      	b.n	8aaa <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    8ad2:	4649      	mov	r1, r9
    8ad4:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    8ad6:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    8ad8:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    8ada:	47c0      	blx	r8
    8adc:	2800      	cmp	r0, #0
    8ade:	d0e7      	beq.n	8ab0 <flash_page_foreach+0x20>
			off += page_info.size;
    8ae0:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    8ae2:	3601      	adds	r6, #1
			off += page_info.size;
    8ae4:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    8ae6:	e7ec      	b.n	8ac2 <flash_page_foreach+0x32>

00008ae8 <uarte_nrfx_config_get>:
{
    8ae8:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    8aea:	6902      	ldr	r2, [r0, #16]
    8aec:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    8af0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    8af4:	2000      	movs	r0, #0
    8af6:	4770      	bx	lr

00008af8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    8af8:	6843      	ldr	r3, [r0, #4]
    8afa:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    8afc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    8b00:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    8b04:	4770      	bx	lr

00008b06 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    8b06:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    8b08:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    8b0a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8b0c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8b10:	b150      	cbz	r0, 8b28 <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8b12:	2000      	movs	r0, #0
	*c = *data->rx_data;
    8b14:	6992      	ldr	r2, [r2, #24]
    8b16:	7812      	ldrb	r2, [r2, #0]
    8b18:	700a      	strb	r2, [r1, #0]
    8b1a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    8b1e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8b22:	2201      	movs	r2, #1
    8b24:	601a      	str	r2, [r3, #0]
	return 0;
    8b26:	4770      	bx	lr
		return -1;
    8b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    8b2c:	4770      	bx	lr

00008b2e <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8b2e:	2a00      	cmp	r2, #0
    8b30:	dd10      	ble.n	8b54 <uarte_nrfx_fifo_read+0x26>
	return config->uarte_regs;
    8b32:	6843      	ldr	r3, [r0, #4]
    8b34:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8b36:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8b3a:	b15b      	cbz	r3, 8b54 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = dev->data;
    8b3c:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8b3e:	2000      	movs	r0, #0
    8b40:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
    8b44:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8b48:	2001      	movs	r0, #1
		rx_data[num_rx++] = *data->rx_data;
    8b4a:	699b      	ldr	r3, [r3, #24]
    8b4c:	781b      	ldrb	r3, [r3, #0]
    8b4e:	700b      	strb	r3, [r1, #0]
    8b50:	6010      	str	r0, [r2, #0]
}
    8b52:	4770      	bx	lr
	int num_rx = 0;
    8b54:	2000      	movs	r0, #0
    8b56:	4770      	bx	lr

00008b58 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    8b58:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    8b5a:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
    8b5c:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    8b5e:	f04f 0020 	mov.w	r0, #32
    8b62:	f3ef 8311 	mrs	r3, BASEPRI
    8b66:	f380 8812 	msr	BASEPRI_MAX, r0
    8b6a:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    8b6e:	2000      	movs	r0, #0
    8b70:	68c9      	ldr	r1, [r1, #12]
    8b72:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    8b74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    8b78:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    8b7c:	f383 8811 	msr	BASEPRI, r3
    8b80:	f3bf 8f6f 	isb	sy
}
    8b84:	4770      	bx	lr

00008b86 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    8b86:	2201      	movs	r2, #1
    8b88:	6903      	ldr	r3, [r0, #16]
    8b8a:	68db      	ldr	r3, [r3, #12]
    8b8c:	739a      	strb	r2, [r3, #14]
}
    8b8e:	4770      	bx	lr

00008b90 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    8b90:	6903      	ldr	r3, [r0, #16]
    8b92:	68db      	ldr	r3, [r3, #12]
    8b94:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8b96:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    8b9a:	b962      	cbnz	r2, 8bb6 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    8b9c:	6842      	ldr	r2, [r0, #4]
    8b9e:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8ba0:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    8ba4:	b140      	cbz	r0, 8bb8 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    8ba6:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    8baa:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    8bae:	d003      	beq.n	8bb8 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8bb0:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    8bb2:	6119      	str	r1, [r3, #16]
    8bb4:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    8bb6:	2000      	movs	r0, #0
}
    8bb8:	4770      	bx	lr

00008bba <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    8bba:	6843      	ldr	r3, [r0, #4]
    8bbc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8bbe:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    8bc2:	3800      	subs	r0, #0
    8bc4:	bf18      	it	ne
    8bc6:	2001      	movne	r0, #1
    8bc8:	4770      	bx	lr

00008bca <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    8bca:	2210      	movs	r2, #16
	return config->uarte_regs;
    8bcc:	6843      	ldr	r3, [r0, #4]
    8bce:	681b      	ldr	r3, [r3, #0]
    8bd0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    8bd4:	4770      	bx	lr

00008bd6 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    8bd6:	2210      	movs	r2, #16
	return config->uarte_regs;
    8bd8:	6843      	ldr	r3, [r0, #4]
    8bda:	681b      	ldr	r3, [r3, #0]
    8bdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    8be0:	4770      	bx	lr

00008be2 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    8be2:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    8be6:	6843      	ldr	r3, [r0, #4]
    8be8:	681b      	ldr	r3, [r3, #0]
    8bea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    8bee:	4770      	bx	lr

00008bf0 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    8bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    8bf4:	6843      	ldr	r3, [r0, #4]
    8bf6:	681b      	ldr	r3, [r3, #0]
    8bf8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    8bfc:	4770      	bx	lr

00008bfe <uarte_nrfx_irq_update>:
}
    8bfe:	2001      	movs	r0, #1
    8c00:	4770      	bx	lr

00008c02 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    8c02:	6903      	ldr	r3, [r0, #16]
    8c04:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    8c06:	e9c3 1200 	strd	r1, r2, [r3]
}
    8c0a:	4770      	bx	lr

00008c0c <uarte_nrfx_irq_is_pending>:
{
    8c0c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    8c0e:	6843      	ldr	r3, [r0, #4]
{
    8c10:	4604      	mov	r4, r0
	return config->uarte_regs;
    8c12:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    8c14:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    8c18:	025b      	lsls	r3, r3, #9
    8c1a:	d405      	bmi.n	8c28 <uarte_nrfx_irq_is_pending+0x1c>
    8c1c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    8c20:	f010 0010 	ands.w	r0, r0, #16
    8c24:	d106      	bne.n	8c34 <uarte_nrfx_irq_is_pending+0x28>
}
    8c26:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    8c28:	f7ff ffb2 	bl	8b90 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    8c2c:	2800      	cmp	r0, #0
    8c2e:	d0f5      	beq.n	8c1c <uarte_nrfx_irq_is_pending+0x10>
		||
    8c30:	2001      	movs	r0, #1
    8c32:	e7f8      	b.n	8c26 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    8c34:	4620      	mov	r0, r4
    8c36:	f7ff ffc0 	bl	8bba <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    8c3a:	3800      	subs	r0, #0
    8c3c:	bf18      	it	ne
    8c3e:	2001      	movne	r0, #1
    8c40:	e7f1      	b.n	8c26 <uarte_nrfx_irq_is_pending+0x1a>

00008c42 <tx_start.isra.0>:
	return config->uarte_regs;
    8c42:	6803      	ldr	r3, [r0, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    8c44:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    8c48:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8c4c:	2200      	movs	r2, #0
    8c4e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    8c52:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    8c56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    8c5a:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8c5e:	6842      	ldr	r2, [r0, #4]
    8c60:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    8c62:	bf41      	itttt	mi
    8c64:	2208      	movmi	r2, #8
    8c66:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    8c6a:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    8c6e:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8c72:	2201      	movs	r2, #1
    8c74:	609a      	str	r2, [r3, #8]
}
    8c76:	4770      	bx	lr

00008c78 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    8c78:	6802      	ldr	r2, [r0, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8c7a:	f8d2 3158 	ldr.w	r3, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8c7e:	b943      	cbnz	r3, 8c92 <is_tx_ready.isra.0+0x1a>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    8c80:	6841      	ldr	r1, [r0, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8c82:	0789      	lsls	r1, r1, #30
    8c84:	d407      	bmi.n	8c96 <is_tx_ready.isra.0+0x1e>
    8c86:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    8c8a:	3800      	subs	r0, #0
    8c8c:	bf18      	it	ne
    8c8e:	2001      	movne	r0, #1
    8c90:	4770      	bx	lr
    8c92:	2001      	movs	r0, #1
    8c94:	4770      	bx	lr
    8c96:	4618      	mov	r0, r3
}
    8c98:	4770      	bx	lr

00008c9a <uarte_nrfx_fifo_fill>:
{
    8c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    8c9c:	6906      	ldr	r6, [r0, #16]
{
    8c9e:	4605      	mov	r5, r0
	len = MIN(len, data->int_driven->tx_buff_size);
    8ca0:	68f3      	ldr	r3, [r6, #12]
    8ca2:	899c      	ldrh	r4, [r3, #12]
    8ca4:	3310      	adds	r3, #16
    8ca6:	4294      	cmp	r4, r2
    8ca8:	bfa8      	it	ge
    8caa:	4614      	movge	r4, r2
    8cac:	2201      	movs	r2, #1
    8cae:	e8d3 0fef 	ldaex	r0, [r3]
    8cb2:	2800      	cmp	r0, #0
    8cb4:	d103      	bne.n	8cbe <uarte_nrfx_fifo_fill+0x24>
    8cb6:	e8c3 2fe7 	stlex	r7, r2, [r3]
    8cba:	2f00      	cmp	r7, #0
    8cbc:	d1f7      	bne.n	8cae <uarte_nrfx_fifo_fill+0x14>
    8cbe:	bf0c      	ite	eq
    8cc0:	4613      	moveq	r3, r2
    8cc2:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    8cc4:	d11f      	bne.n	8d06 <uarte_nrfx_fifo_fill+0x6c>
	memcpy(data->int_driven->tx_buffer, tx_data, len);
    8cc6:	68f3      	ldr	r3, [r6, #12]
    8cc8:	4622      	mov	r2, r4
    8cca:	6898      	ldr	r0, [r3, #8]
    8ccc:	f7ff fd42 	bl	8754 <memcpy>
	__asm__ volatile(
    8cd0:	f04f 0320 	mov.w	r3, #32
    8cd4:	f3ef 8711 	mrs	r7, BASEPRI
    8cd8:	f383 8812 	msr	BASEPRI_MAX, r3
    8cdc:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    8ce0:	6868      	ldr	r0, [r5, #4]
    8ce2:	f7ff ffc9 	bl	8c78 <is_tx_ready.isra.0>
    8ce6:	68f3      	ldr	r3, [r6, #12]
    8ce8:	b938      	cbnz	r0, 8cfa <uarte_nrfx_fifo_fill+0x60>
		len = 0;
    8cea:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    8cec:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    8cee:	f387 8811 	msr	BASEPRI, r7
    8cf2:	f3bf 8f6f 	isb	sy
}
    8cf6:	4620      	mov	r0, r4
    8cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    8cfa:	4622      	mov	r2, r4
    8cfc:	6899      	ldr	r1, [r3, #8]
    8cfe:	6868      	ldr	r0, [r5, #4]
    8d00:	f7ff ff9f 	bl	8c42 <tx_start.isra.0>
    8d04:	e7f3      	b.n	8cee <uarte_nrfx_fifo_fill+0x54>
		return 0;
    8d06:	461c      	mov	r4, r3
    8d08:	e7f5      	b.n	8cf6 <uarte_nrfx_fifo_fill+0x5c>

00008d0a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    8d0a:	6842      	ldr	r2, [r0, #4]
{
    8d0c:	b410      	push	{r4}
	return config->uarte_regs;
    8d0e:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    8d10:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    8d14:	05c9      	lsls	r1, r1, #23
    8d16:	d518      	bpl.n	8d4a <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8d18:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    8d1c:	b1a9      	cbz	r1, 8d4a <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    8d1e:	f04f 0420 	mov.w	r4, #32
    8d22:	f3ef 8111 	mrs	r1, BASEPRI
    8d26:	f384 8812 	msr	BASEPRI_MAX, r4
    8d2a:	f3bf 8f6f 	isb	sy
    8d2e:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    8d32:	b134      	cbz	r4, 8d42 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8d34:	2400      	movs	r4, #0
    8d36:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
    8d3a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8d3e:	2401      	movs	r4, #1
    8d40:	60dc      	str	r4, [r3, #12]
	__asm__ volatile(
    8d42:	f381 8811 	msr	BASEPRI, r1
    8d46:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    8d4a:	6852      	ldr	r2, [r2, #4]
    8d4c:	06d2      	lsls	r2, r2, #27
    8d4e:	d51a      	bpl.n	8d86 <uarte_nrfx_isr_int+0x7c>
	__asm__ volatile(
    8d50:	f04f 0220 	mov.w	r2, #32
    8d54:	f3ef 8111 	mrs	r1, BASEPRI
    8d58:	f382 8812 	msr	BASEPRI_MAX, r2
    8d5c:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8d60:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    8d64:	b112      	cbz	r2, 8d6c <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    8d66:	2200      	movs	r2, #0
    8d68:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    8d6c:	6902      	ldr	r2, [r0, #16]
    8d6e:	68d2      	ldr	r2, [r2, #12]
    8d70:	b10a      	cbz	r2, 8d76 <uarte_nrfx_isr_int+0x6c>
    8d72:	6912      	ldr	r2, [r2, #16]
    8d74:	b91a      	cbnz	r2, 8d7e <uarte_nrfx_isr_int+0x74>
    p_reg->INTENCLR = mask;
    8d76:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    8d7a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
    8d7e:	f381 8811 	msr	BASEPRI, r1
    8d82:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    8d86:	6902      	ldr	r2, [r0, #16]
    8d88:	68d2      	ldr	r2, [r2, #12]
    8d8a:	b15a      	cbz	r2, 8da4 <uarte_nrfx_isr_int+0x9a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8d8c:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    8d90:	b159      	cbz	r1, 8daa <uarte_nrfx_isr_int+0xa0>
		data->int_driven->fifo_fill_lock = 0;
    8d92:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
    8d94:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    8d96:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    8d98:	b13c      	cbz	r4, 8daa <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
    8d9a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    8d9e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    8da2:	7391      	strb	r1, [r2, #14]
}
    8da4:	f85d 4b04 	ldr.w	r4, [sp], #4
    8da8:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8daa:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    8dae:	b121      	cbz	r1, 8dba <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8db0:	2100      	movs	r1, #0
    8db2:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    8db6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    8dba:	6813      	ldr	r3, [r2, #0]
    8dbc:	2b00      	cmp	r3, #0
    8dbe:	d0f1      	beq.n	8da4 <uarte_nrfx_isr_int+0x9a>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    8dc0:	6851      	ldr	r1, [r2, #4]
}
    8dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
    8dc6:	4718      	bx	r3

00008dc8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    8dc8:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    8dca:	6843      	ldr	r3, [r0, #4]
    8dcc:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    8dce:	7a03      	ldrb	r3, [r0, #8]
    8dd0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    8dd4:	3b01      	subs	r3, #1
    8dd6:	00db      	lsls	r3, r3, #3
    8dd8:	6845      	ldr	r5, [r0, #4]
    8dda:	6814      	ldr	r4, [r2, #0]
    8ddc:	441d      	add	r5, r3
    8dde:	42ac      	cmp	r4, r5
    8de0:	d902      	bls.n	8de8 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    8de2:	f06f 0001 	mvn.w	r0, #1
}
    8de6:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    8de8:	7965      	ldrb	r5, [r4, #5]
    8dea:	428d      	cmp	r5, r1
    8dec:	d002      	beq.n	8df4 <pinctrl_lookup_state+0x2c>
		(*state)++;
    8dee:	3408      	adds	r4, #8
    8df0:	6014      	str	r4, [r2, #0]
    8df2:	e7f1      	b.n	8dd8 <pinctrl_lookup_state+0x10>
			return 0;
    8df4:	2000      	movs	r0, #0
    8df6:	e7f6      	b.n	8de6 <pinctrl_lookup_state+0x1e>

00008df8 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8df8:	f7fd b882 	b.w	5f00 <nrf_cc3xx_platform_init_no_rng>

00008dfc <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    8dfc:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8dfe:	f7f9 f849 	bl	1e94 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    8e02:	f7f9 f8f3 	bl	1fec <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    8e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    8e0a:	f7fd b879 	b.w	5f00 <nrf_cc3xx_platform_init_no_rng>

00008e0e <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    8e0e:	b538      	push	{r3, r4, r5, lr}
    8e10:	460c      	mov	r4, r1
    8e12:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
    8e14:	f7ff f98b 	bl	812e <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    8e18:	4621      	mov	r1, r4
    8e1a:	4425      	add	r5, r4
    8e1c:	42a9      	cmp	r1, r5
    8e1e:	d101      	bne.n	8e24 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    8e20:	2001      	movs	r0, #1
}
    8e22:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    8e24:	f811 3b01 	ldrb.w	r3, [r1], #1
    8e28:	4298      	cmp	r0, r3
    8e2a:	d0f7      	beq.n	8e1c <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    8e2c:	2000      	movs	r0, #0
    8e2e:	e7f8      	b.n	8e22 <bootutil_buffer_is_erased.part.0+0x14>

00008e30 <boot_swap_info_off>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    8e30:	6880      	ldr	r0, [r0, #8]
    8e32:	3818      	subs	r0, #24
    8e34:	f020 0007 	bic.w	r0, r0, #7
}
    8e38:	3810      	subs	r0, #16
    8e3a:	4770      	bx	lr

00008e3c <boot_magic_compatible_check>:
    switch (tbl_val) {
    8e3c:	2804      	cmp	r0, #4
    8e3e:	d009      	beq.n	8e54 <boot_magic_compatible_check+0x18>
    8e40:	2805      	cmp	r0, #5
    8e42:	d103      	bne.n	8e4c <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    8e44:	1e48      	subs	r0, r1, #1
    8e46:	bf18      	it	ne
    8e48:	2001      	movne	r0, #1
    8e4a:	4770      	bx	lr
        return tbl_val == val;
    8e4c:	1a43      	subs	r3, r0, r1
    8e4e:	4258      	negs	r0, r3
    8e50:	4158      	adcs	r0, r3
    8e52:	4770      	bx	lr
    switch (tbl_val) {
    8e54:	2001      	movs	r0, #1
}
    8e56:	4770      	bx	lr

00008e58 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    8e58:	b111      	cbz	r1, 8e60 <bootutil_buffer_is_erased+0x8>
    8e5a:	b10a      	cbz	r2, 8e60 <bootutil_buffer_is_erased+0x8>
    8e5c:	f7ff bfd7 	b.w	8e0e <bootutil_buffer_is_erased.part.0>
}
    8e60:	2000      	movs	r0, #0
    8e62:	4770      	bx	lr

00008e64 <boot_read_flag>:
{
    8e64:	b538      	push	{r3, r4, r5, lr}
    8e66:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    8e68:	2301      	movs	r3, #1
{
    8e6a:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    8e6c:	4622      	mov	r2, r4
{
    8e6e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    8e70:	f7ff f915 	bl	809e <flash_area_read>
    if (rc < 0) {
    8e74:	2800      	cmp	r0, #0
    8e76:	db10      	blt.n	8e9a <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    8e78:	2201      	movs	r2, #1
    8e7a:	4621      	mov	r1, r4
    8e7c:	4628      	mov	r0, r5
    8e7e:	f7ff ffeb 	bl	8e58 <bootutil_buffer_is_erased>
    8e82:	b118      	cbz	r0, 8e8c <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    8e84:	2303      	movs	r3, #3
    return 0;
    8e86:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
    8e88:	7023      	strb	r3, [r4, #0]
}
    8e8a:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    8e8c:	7823      	ldrb	r3, [r4, #0]
        return BOOT_FLAG_BAD;
    8e8e:	2b01      	cmp	r3, #1
    8e90:	bf0c      	ite	eq
    8e92:	2301      	moveq	r3, #1
    8e94:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    8e96:	7023      	strb	r3, [r4, #0]
    8e98:	e7f7      	b.n	8e8a <boot_read_flag+0x26>
        return BOOT_EFLASH;
    8e9a:	2001      	movs	r0, #1
    8e9c:	e7f5      	b.n	8e8a <boot_read_flag+0x26>

00008e9e <boot_write_trailer>:
{
    8e9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8ea2:	461d      	mov	r5, r3
    8ea4:	4606      	mov	r6, r0
    8ea6:	460f      	mov	r7, r1
    8ea8:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    8eaa:	f7ff f939 	bl	8120 <flash_area_align>
    align = ALIGN_UP(inlen, align);
    8eae:	1e6c      	subs	r4, r5, #1
    8eb0:	4404      	add	r4, r0
    8eb2:	4243      	negs	r3, r0
    8eb4:	401c      	ands	r4, r3
    if (align > BOOT_MAX_ALIGN) {
    8eb6:	2c08      	cmp	r4, #8
    8eb8:	d81a      	bhi.n	8ef0 <boot_write_trailer+0x52>
    erased_val = flash_area_erased_val(fap);
    8eba:	4630      	mov	r0, r6
    8ebc:	f7ff f937 	bl	812e <flash_area_erased_val>
    8ec0:	4681      	mov	r9, r0
    memcpy(buf, inbuf, inlen);
    8ec2:	462a      	mov	r2, r5
    8ec4:	4641      	mov	r1, r8
    8ec6:	4668      	mov	r0, sp
    8ec8:	f7ff fc44 	bl	8754 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    8ecc:	4649      	mov	r1, r9
    8ece:	1b62      	subs	r2, r4, r5
    8ed0:	eb0d 0005 	add.w	r0, sp, r5
    8ed4:	f7ff fc49 	bl	876a <memset>
    rc = flash_area_write(fap, off, buf, align);
    8ed8:	4623      	mov	r3, r4
    8eda:	466a      	mov	r2, sp
    8edc:	4639      	mov	r1, r7
    8ede:	4630      	mov	r0, r6
    8ee0:	f7ff f8f2 	bl	80c8 <flash_area_write>
    if (rc != 0) {
    8ee4:	3800      	subs	r0, #0
    8ee6:	bf18      	it	ne
    8ee8:	2001      	movne	r0, #1
}
    8eea:	b003      	add	sp, #12
    8eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    8ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8ef4:	e7f9      	b.n	8eea <boot_write_trailer+0x4c>

00008ef6 <boot_write_trailer_flag>:
{
    8ef6:	b507      	push	{r0, r1, r2, lr}
    return boot_write_trailer(fap, off, buf, 1);
    8ef8:	2301      	movs	r3, #1
    const uint8_t buf[1] = { flag_val };
    8efa:	f88d 2004 	strb.w	r2, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    8efe:	aa01      	add	r2, sp, #4
    8f00:	f7ff ffcd 	bl	8e9e <boot_write_trailer>
}
    8f04:	b003      	add	sp, #12
    8f06:	f85d fb04 	ldr.w	pc, [sp], #4

00008f0a <boot_write_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    8f0a:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    8f0c:	2201      	movs	r2, #1
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    8f0e:	3918      	subs	r1, #24
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    8f10:	f021 0107 	bic.w	r1, r1, #7
    8f14:	f7ff bfef 	b.w	8ef6 <boot_write_trailer_flag>

00008f18 <boot_read_image_ok>:
    return ALIGN_DOWN(boot_magic_off(fap) - BOOT_MAX_ALIGN, BOOT_MAX_ALIGN);
    8f18:	6882      	ldr	r2, [r0, #8]
    8f1a:	3a18      	subs	r2, #24
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    8f1c:	f022 0207 	bic.w	r2, r2, #7
    8f20:	f7ff bfa0 	b.w	8e64 <boot_read_flag>

00008f24 <boot_read_swap_state_by_id>:
{
    8f24:	b513      	push	{r0, r1, r4, lr}
    8f26:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    8f28:	b2c0      	uxtb	r0, r0
    8f2a:	a901      	add	r1, sp, #4
    8f2c:	f7f8 ff5a 	bl	1de4 <flash_area_open>
    if (rc != 0) {
    8f30:	b950      	cbnz	r0, 8f48 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    8f32:	4621      	mov	r1, r4
    8f34:	9801      	ldr	r0, [sp, #4]
    8f36:	f7fb fa83 	bl	4440 <boot_read_swap_state>
    8f3a:	4604      	mov	r4, r0
    flash_area_close(fap);
    8f3c:	9801      	ldr	r0, [sp, #4]
    8f3e:	f7ff f8ad 	bl	809c <flash_area_close>
}
    8f42:	4620      	mov	r0, r4
    8f44:	b002      	add	sp, #8
    8f46:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    8f48:	2401      	movs	r4, #1
    8f4a:	e7fa      	b.n	8f42 <boot_read_swap_state_by_id+0x1e>

00008f4c <boot_write_swap_info>:
{
    8f4c:	b513      	push	{r0, r1, r4, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    8f4e:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
{
    8f52:	4604      	mov	r4, r0
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    8f54:	f88d 2007 	strb.w	r2, [sp, #7]
    off = boot_swap_info_off(fap);
    8f58:	f7ff ff6a 	bl	8e30 <boot_swap_info_off>
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    8f5c:	2301      	movs	r3, #1
    off = boot_swap_info_off(fap);
    8f5e:	4601      	mov	r1, r0
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    8f60:	f10d 0207 	add.w	r2, sp, #7
    8f64:	4620      	mov	r0, r4
    8f66:	f7ff ff9a 	bl	8e9e <boot_write_trailer>
}
    8f6a:	b002      	add	sp, #8
    8f6c:	bd10      	pop	{r4, pc}

00008f6e <nrf91_errata_14>:
                uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    8f6e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    8f72:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    8f76:	f8d3 0134 	ldr.w	r0, [r3, #308]	; 0x134
  __ASM volatile ("dsb 0xF":::"memory");
    8f7a:	f3bf 8f4f 	dsb	sy
            if (var1 == 0x09)
    8f7e:	2a09      	cmp	r2, #9
    8f80:	d103      	bne.n	8f8a <nrf91_errata_14+0x1c>
                switch(var2)
    8f82:	1e43      	subs	r3, r0, #1
    8f84:	4258      	negs	r0, r3
    8f86:	4158      	adcs	r0, r3
    8f88:	4770      	bx	lr
        return false;
    8f8a:	2000      	movs	r0, #0
}
    8f8c:	4770      	bx	lr

00008f8e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    8f8e:	4700      	bx	r0

00008f90 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    8f90:	f000 ba01 	b.w	9396 <z_impl_k_busy_wait>

00008f94 <clock_stop>:
{
    8f94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    8f96:	4604      	mov	r4, r0
    8f98:	b118      	cbz	r0, 8fa2 <clock_stop+0xe>
    8f9a:	2801      	cmp	r0, #1
    8f9c:	d025      	beq.n	8fea <clock_stop+0x56>
}
    8f9e:	b003      	add	sp, #12
    8fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8fa2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    8fa6:	2202      	movs	r2, #2
    8fa8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8fac:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    8fb0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8fb4:	2201      	movs	r2, #1
    8fb6:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    8fb8:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8fba:	429c      	cmp	r4, r3
    8fbc:	bf18      	it	ne
    8fbe:	2500      	movne	r5, #0
    8fc0:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8fc4:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    8fc8:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8fcc:	bf08      	it	eq
    8fce:	f10d 0507 	addeq.w	r5, sp, #7
    switch (domain)
    8fd2:	b1ac      	cbz	r4, 9000 <clock_stop+0x6c>
    8fd4:	2c01      	cmp	r4, #1
    8fd6:	d1e2      	bne.n	8f9e <clock_stop+0xa>
            if (p_clk_src != NULL)
    8fd8:	b125      	cbz	r5, 8fe4 <clock_stop+0x50>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8fda:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8fde:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8fe2:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8fe4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8fe8:	e012      	b.n	9010 <clock_stop+0x7c>
    p_reg->INTENCLR = mask;
    8fea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8fee:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    8ff0:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ff4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8ff8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8ffc:	6058      	str	r0, [r3, #4]
}
    8ffe:	e7db      	b.n	8fb8 <clock_stop+0x24>
            if (p_clk_src != NULL)
    9000:	b125      	cbz	r5, 900c <clock_stop+0x78>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9002:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    9006:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    900a:	702b      	strb	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    900c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    9010:	03db      	lsls	r3, r3, #15
    9012:	d5c4      	bpl.n	8f9e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    9014:	b92d      	cbnz	r5, 9022 <clock_stop+0x8e>
    9016:	2001      	movs	r0, #1
    9018:	f7ff ffba 	bl	8f90 <nrfx_busy_wait>
    901c:	3f01      	subs	r7, #1
    901e:	d1d8      	bne.n	8fd2 <clock_stop+0x3e>
    9020:	e7bd      	b.n	8f9e <clock_stop+0xa>
    9022:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9026:	2b01      	cmp	r3, #1
    9028:	d0f5      	beq.n	9016 <clock_stop+0x82>
    902a:	e7b8      	b.n	8f9e <clock_stop+0xa>

0000902c <nrfx_clock_enable>:
{
    902c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    902e:	2005      	movs	r0, #5
    9030:	f7f9 fdd0 	bl	2bd4 <arch_irq_is_enabled>
    9034:	b910      	cbnz	r0, 903c <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    9036:	2005      	movs	r0, #5
    9038:	f7f9 fdbc 	bl	2bb4 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    903c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9040:	2201      	movs	r2, #1
    9042:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    9046:	bd08      	pop	{r3, pc}

00009048 <nrfx_clock_start>:
{
    9048:	b508      	push	{r3, lr}
    switch (domain)
    904a:	b110      	cbz	r0, 9052 <nrfx_clock_start+0xa>
    904c:	2801      	cmp	r0, #1
    904e:	d031      	beq.n	90b4 <nrfx_clock_start+0x6c>
}
    9050:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9052:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    9056:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    905a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    905e:	03c9      	lsls	r1, r1, #15
    9060:	d413      	bmi.n	908a <nrfx_clock_start+0x42>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    9062:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    9066:	07db      	lsls	r3, r3, #31
    9068:	d419      	bmi.n	909e <nrfx_clock_start+0x56>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    906a:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    906c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    9070:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9074:	2300      	movs	r3, #0
    9076:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    907a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    907e:	2302      	movs	r3, #2
    9080:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9084:	2301      	movs	r3, #1
    9086:	6093      	str	r3, [r2, #8]
}
    9088:	e7e2      	b.n	9050 <nrfx_clock_start+0x8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    908a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    908e:	2b02      	cmp	r3, #2
    9090:	d0ec      	beq.n	906c <nrfx_clock_start+0x24>
    if (!is_correct_clk)
    9092:	2b01      	cmp	r3, #1
    9094:	d0ea      	beq.n	906c <nrfx_clock_start+0x24>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9096:	2000      	movs	r0, #0
    9098:	f7ff ff7c 	bl	8f94 <clock_stop>
    909c:	e7e5      	b.n	906a <nrfx_clock_start+0x22>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    909e:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    90a2:	f003 0303 	and.w	r3, r3, #3
    if (!is_correct_clk)
    90a6:	3b01      	subs	r3, #1
    90a8:	2b01      	cmp	r3, #1
    90aa:	d8f4      	bhi.n	9096 <nrfx_clock_start+0x4e>
    p_reg->INTENSET = mask;
    90ac:	2302      	movs	r3, #2
    90ae:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    90b2:	e7cd      	b.n	9050 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    90b4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    90b8:	2200      	movs	r2, #0
    90ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    90be:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    90c2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    90c6:	6018      	str	r0, [r3, #0]
}
    90c8:	e7c2      	b.n	9050 <nrfx_clock_start+0x8>

000090ca <nrfx_clock_stop>:
    clock_stop(domain);
    90ca:	f7ff bf63 	b.w	8f94 <clock_stop>

000090ce <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    90ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    90d2:	4770      	bx	lr

000090d4 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    90d4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    90d8:	4770      	bx	lr

000090da <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    90da:	f44f 7080 	mov.w	r0, #256	; 0x100
    90de:	4770      	bx	lr

000090e0 <z_device_state_init>:
}
    90e0:	4770      	bx	lr

000090e2 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    90e2:	b138      	cbz	r0, 90f4 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    90e4:	68c3      	ldr	r3, [r0, #12]
    90e6:	8818      	ldrh	r0, [r3, #0]
    90e8:	f3c0 0008 	ubfx	r0, r0, #0, #9
    90ec:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    90f0:	4258      	negs	r0, r3
    90f2:	4158      	adcs	r0, r3
}
    90f4:	4770      	bx	lr

000090f6 <z_early_memset>:
	(void) memset(dst, c, n);
    90f6:	f7ff bb38 	b.w	876a <memset>

000090fa <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    90fa:	f7ff bb2b 	b.w	8754 <memcpy>

000090fe <k_mem_slab_init>:
{
    90fe:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    9100:	2400      	movs	r4, #0
    9102:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9104:	ea41 0402 	orr.w	r4, r1, r2
    9108:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    910c:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    9110:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9112:	d10c      	bne.n	912e <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    9114:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    9116:	42a3      	cmp	r3, r4
    9118:	d103      	bne.n	9122 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    911a:	e9c0 0000 	strd	r0, r0, [r0]
}
    911e:	2000      	movs	r0, #0
}
    9120:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    9122:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    9124:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    9126:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    9128:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    912a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    912c:	e7f3      	b.n	9116 <k_mem_slab_init+0x18>
		return -EINVAL;
    912e:	f06f 0015 	mvn.w	r0, #21
	return rc;
    9132:	e7f5      	b.n	9120 <k_mem_slab_init+0x22>

00009134 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    9134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9136:	4604      	mov	r4, r0
    9138:	460d      	mov	r5, r1
	__asm__ volatile(
    913a:	f04f 0320 	mov.w	r3, #32
    913e:	f3ef 8611 	mrs	r6, BASEPRI
    9142:	f383 8812 	msr	BASEPRI_MAX, r3
    9146:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    914a:	6947      	ldr	r7, [r0, #20]
    914c:	b977      	cbnz	r7, 916c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    914e:	f000 f8d3 	bl	92f8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    9152:	b158      	cbz	r0, 916c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    9154:	682a      	ldr	r2, [r5, #0]
    9156:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    9158:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    915a:	f000 f871 	bl	9240 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    915e:	4631      	mov	r1, r6
    9160:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    9164:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    9168:	f7fc ba5a 	b.w	5620 <z_reschedule>
	**(char ***) mem = slab->free_list;
    916c:	682b      	ldr	r3, [r5, #0]
    916e:	6962      	ldr	r2, [r4, #20]
    9170:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    9172:	682b      	ldr	r3, [r5, #0]
    9174:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    9176:	69a3      	ldr	r3, [r4, #24]
    9178:	3b01      	subs	r3, #1
    917a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    917c:	f386 8811 	msr	BASEPRI, r6
    9180:	f3bf 8f6f 	isb	sy
}
    9184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009186 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9186:	f3ef 8005 	mrs	r0, IPSR
}
    918a:	3800      	subs	r0, #0
    918c:	bf18      	it	ne
    918e:	2001      	movne	r0, #1
    9190:	4770      	bx	lr

00009192 <k_thread_name_get>:
}
    9192:	2000      	movs	r0, #0
    9194:	4770      	bx	lr

00009196 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    9196:	b508      	push	{r3, lr}
	__asm__ volatile(
    9198:	f04f 0220 	mov.w	r2, #32
    919c:	f3ef 8311 	mrs	r3, BASEPRI
    91a0:	f382 8812 	msr	BASEPRI_MAX, r2
    91a4:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
    91a8:	f7f9 fc86 	bl	2ab8 <arch_cpu_idle>
    91ac:	e7f4      	b.n	9198 <idle+0x2>

000091ae <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    91ae:	f990 300e 	ldrsb.w	r3, [r0, #14]
    91b2:	428b      	cmp	r3, r1
    91b4:	d001      	beq.n	91ba <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    91b6:	f7fc bb9b 	b.w	58f0 <z_set_prio>
}
    91ba:	2000      	movs	r0, #0
    91bc:	4770      	bx	lr

000091be <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    91be:	2300      	movs	r3, #0
    91c0:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
    91c4:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    91c8:	4618      	mov	r0, r3
    91ca:	4770      	bx	lr

000091cc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    91cc:	b13a      	cbz	r2, 91de <z_impl_k_sem_init+0x12>
    91ce:	428a      	cmp	r2, r1
    91d0:	d305      	bcc.n	91de <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    91d2:	e9c0 1202 	strd	r1, r2, [r0, #8]
    91d6:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    91da:	2000      	movs	r0, #0
    91dc:	4770      	bx	lr
		return -EINVAL;
    91de:	f06f 0015 	mvn.w	r0, #21
}
    91e2:	4770      	bx	lr

000091e4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    91e4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    91e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    91ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    91ec:	2300      	movs	r3, #0
	node->prev = NULL;
    91ee:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    91f2:	4770      	bx	lr

000091f4 <unpend_thread_no_timeout>:
{
    91f4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    91f6:	f7ff fff5 	bl	91e4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    91fa:	7b43      	ldrb	r3, [r0, #13]
    91fc:	f023 0302 	bic.w	r3, r3, #2
    9200:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    9202:	2300      	movs	r3, #0
    9204:	6083      	str	r3, [r0, #8]
}
    9206:	bd08      	pop	{r3, pc}

00009208 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9208:	4603      	mov	r3, r0
    920a:	b920      	cbnz	r0, 9216 <z_reschedule_irqlock+0xe>
    920c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    9210:	b90a      	cbnz	r2, 9216 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    9212:	f7f9 bd35 	b.w	2c80 <arch_swap>
	__asm__ volatile(
    9216:	f383 8811 	msr	BASEPRI, r3
    921a:	f3bf 8f6f 	isb	sy
}
    921e:	4770      	bx	lr

00009220 <z_reschedule_unlocked>:
	__asm__ volatile(
    9220:	f04f 0320 	mov.w	r3, #32
    9224:	f3ef 8011 	mrs	r0, BASEPRI
    9228:	f383 8812 	msr	BASEPRI_MAX, r3
    922c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9230:	f7ff bfea 	b.w	9208 <z_reschedule_irqlock>

00009234 <z_priq_dumb_best>:
	return list->head == list;
    9234:	6803      	ldr	r3, [r0, #0]
}
    9236:	4298      	cmp	r0, r3
    9238:	bf14      	ite	ne
    923a:	4618      	movne	r0, r3
    923c:	2000      	moveq	r0, #0
    923e:	4770      	bx	lr

00009240 <z_ready_thread>:
{
    9240:	b510      	push	{r4, lr}
    9242:	f04f 0320 	mov.w	r3, #32
    9246:	f3ef 8411 	mrs	r4, BASEPRI
    924a:	f383 8812 	msr	BASEPRI_MAX, r3
    924e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    9252:	f7fc faa7 	bl	57a4 <ready_thread>
	__asm__ volatile(
    9256:	f384 8811 	msr	BASEPRI, r4
    925a:	f3bf 8f6f 	isb	sy
}
    925e:	bd10      	pop	{r4, pc}

00009260 <z_thread_timeout>:
{
    9260:	4601      	mov	r1, r0
    9262:	b510      	push	{r4, lr}
	__asm__ volatile(
    9264:	f04f 0320 	mov.w	r3, #32
    9268:	f3ef 8411 	mrs	r4, BASEPRI
    926c:	f383 8812 	msr	BASEPRI_MAX, r3
    9270:	f3bf 8f6f 	isb	sy
		if (!killed) {
    9274:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    9278:	f013 0f28 	tst.w	r3, #40	; 0x28
    927c:	d10d      	bne.n	929a <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    927e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    9282:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    9284:	b10b      	cbz	r3, 928a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    9286:	f7ff ffb5 	bl	91f4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    928a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    928e:	f023 0314 	bic.w	r3, r3, #20
    9292:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    9296:	f7fc fa85 	bl	57a4 <ready_thread>
	__asm__ volatile(
    929a:	f384 8811 	msr	BASEPRI, r4
    929e:	f3bf 8f6f 	isb	sy
}
    92a2:	bd10      	pop	{r4, pc}

000092a4 <add_to_waitq_locked>:
{
    92a4:	b538      	push	{r3, r4, r5, lr}
    92a6:	4604      	mov	r4, r0
    92a8:	460d      	mov	r5, r1
	unready_thread(thread);
    92aa:	f7fc facf 	bl	584c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    92ae:	7b63      	ldrb	r3, [r4, #13]
    92b0:	f043 0302 	orr.w	r3, r3, #2
    92b4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    92b6:	b195      	cbz	r5, 92de <add_to_waitq_locked+0x3a>
    92b8:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    92ba:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    92bc:	429d      	cmp	r5, r3
    92be:	d015      	beq.n	92ec <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    92c0:	b1a3      	cbz	r3, 92ec <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    92c2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    92c6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    92ca:	4291      	cmp	r1, r2
    92cc:	d008      	beq.n	92e0 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    92ce:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    92d0:	2a00      	cmp	r2, #0
    92d2:	dd05      	ble.n	92e0 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    92d4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    92d6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    92da:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    92dc:	605c      	str	r4, [r3, #4]
}
    92de:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    92e0:	686a      	ldr	r2, [r5, #4]
    92e2:	4293      	cmp	r3, r2
    92e4:	d002      	beq.n	92ec <add_to_waitq_locked+0x48>
    92e6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    92e8:	2b00      	cmp	r3, #0
    92ea:	d1ec      	bne.n	92c6 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    92ec:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    92ee:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    92f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    92f4:	606c      	str	r4, [r5, #4]
}
    92f6:	e7f2      	b.n	92de <add_to_waitq_locked+0x3a>

000092f8 <z_unpend_first_thread>:
{
    92f8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    92fa:	f04f 0320 	mov.w	r3, #32
    92fe:	f3ef 8511 	mrs	r5, BASEPRI
    9302:	f383 8812 	msr	BASEPRI_MAX, r3
    9306:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    930a:	f7ff ff93 	bl	9234 <z_priq_dumb_best>
		if (thread != NULL) {
    930e:	4604      	mov	r4, r0
    9310:	b120      	cbz	r0, 931c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    9312:	f7ff ff6f 	bl	91f4 <unpend_thread_no_timeout>
    9316:	3018      	adds	r0, #24
    9318:	f000 f806 	bl	9328 <z_abort_timeout>
	__asm__ volatile(
    931c:	f385 8811 	msr	BASEPRI, r5
    9320:	f3bf 8f6f 	isb	sy
}
    9324:	4620      	mov	r0, r4
    9326:	bd38      	pop	{r3, r4, r5, pc}

00009328 <z_abort_timeout>:
{
    9328:	b510      	push	{r4, lr}
	__asm__ volatile(
    932a:	f04f 0220 	mov.w	r2, #32
    932e:	f3ef 8411 	mrs	r4, BASEPRI
    9332:	f382 8812 	msr	BASEPRI_MAX, r2
    9336:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    933a:	6803      	ldr	r3, [r0, #0]
    933c:	b13b      	cbz	r3, 934e <z_abort_timeout+0x26>
			remove_timeout(to);
    933e:	f7fc fccb 	bl	5cd8 <remove_timeout>
			ret = 0;
    9342:	2000      	movs	r0, #0
	__asm__ volatile(
    9344:	f384 8811 	msr	BASEPRI, r4
    9348:	f3bf 8f6f 	isb	sy
}
    934c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    934e:	f06f 0015 	mvn.w	r0, #21
    9352:	e7f7      	b.n	9344 <z_abort_timeout+0x1c>

00009354 <z_set_timeout_expiry>:
{
    9354:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9356:	4604      	mov	r4, r0
    9358:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    935a:	f04f 0320 	mov.w	r3, #32
    935e:	f3ef 8511 	mrs	r5, BASEPRI
    9362:	f383 8812 	msr	BASEPRI_MAX, r3
    9366:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    936a:	f7fc fc8f 	bl	5c8c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    936e:	2801      	cmp	r0, #1
    9370:	dd05      	ble.n	937e <z_set_timeout_expiry+0x2a>
    9372:	42a0      	cmp	r0, r4
    9374:	9901      	ldr	r1, [sp, #4]
    9376:	db02      	blt.n	937e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    9378:	4620      	mov	r0, r4
    937a:	f7fa ff27 	bl	41cc <sys_clock_set_timeout>
	__asm__ volatile(
    937e:	f385 8811 	msr	BASEPRI, r5
    9382:	f3bf 8f6f 	isb	sy
}
    9386:	b003      	add	sp, #12
    9388:	bd30      	pop	{r4, r5, pc}

0000938a <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    938a:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    938c:	f7fc fd92 	bl	5eb4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9390:	bd08      	pop	{r3, pc}

00009392 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    9392:	f7fc bd8f 	b.w	5eb4 <sys_clock_tick_get>

00009396 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9396:	b108      	cbz	r0, 939c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    9398:	f7f8 bd18 	b.w	1dcc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    939c:	4770      	bx	lr

0000939e <nrf_cc310_bl_ecdsa_verify_secp256r1>:
    939e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93a2:	9f06      	ldr	r7, [sp, #24]
    93a4:	4604      	mov	r4, r0
    93a6:	4615      	mov	r5, r2
    93a8:	461e      	mov	r6, r3
    93aa:	f7fc ff9b 	bl	62e4 <nrf_cc310_bl_ecdsa_verify_init_secp256r1>
    93ae:	b938      	cbnz	r0, 93c0 <nrf_cc310_bl_ecdsa_verify_secp256r1+0x22>
    93b0:	463b      	mov	r3, r7
    93b2:	4632      	mov	r2, r6
    93b4:	4629      	mov	r1, r5
    93b6:	4620      	mov	r0, r4
    93b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    93bc:	f7fc bfb8 	b.w	6330 <nrf_cc310_bl_ecdsa_verify_hash_secp256r1>
    93c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000093c4 <PkaInitAndMutexLock>:
    93c4:	460a      	mov	r2, r1
    93c6:	2100      	movs	r1, #0
    93c8:	f7fd ba3e 	b.w	6848 <PkaInitPka>

000093cc <SaSi_PalMemCopy>:
    93cc:	f7ff b9c2 	b.w	8754 <memcpy>

000093d0 <SaSi_PalMemSet>:
    93d0:	f7ff b9cb 	b.w	876a <memset>

000093d4 <SaSi_PalMemSetZero>:
    93d4:	460a      	mov	r2, r1
    93d6:	2100      	movs	r1, #0
    93d8:	f7ff b9c7 	b.w	876a <memset>

000093dc <CRYS_COMMON_ReverseMemcpy32>:
    93dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    93e0:	3804      	subs	r0, #4
    93e2:	428a      	cmp	r2, r1
    93e4:	d101      	bne.n	93ea <CRYS_COMMON_ReverseMemcpy32+0xe>
    93e6:	2000      	movs	r0, #0
    93e8:	4770      	bx	lr
    93ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    93ee:	ba1b      	rev	r3, r3
    93f0:	f840 3f04 	str.w	r3, [r0, #4]!
    93f4:	e7f5      	b.n	93e2 <CRYS_COMMON_ReverseMemcpy32+0x6>
